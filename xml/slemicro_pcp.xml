<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-performance-monitoring" xml:lang="en">
 <title>Monitoring performance</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
    <para>
    For performance monitoring purposes, &slema; provides a container image that
  enables you to run the Performance Co-Pilot (PCP) analysis toolkit in a
  container. The toolkit comprises tools for gathering and processing
  performance information collected either in real time or from PCP archive
  logs.
    </para>
  </abstract>
 </info>
 <para>
  The performance data are collected by <emphasis>performance metrics domain
  agents</emphasis> and passed to the <emphasis>pmcd</emphasis> daemon. The
  daemon coordinates the gathering and exporting of performance statistics in
  response to requests from the PCP monitoring tools.
  <command>pmlogger</command> is then used to log the metrics. For details,
  refer to the
  <link xlink:href="https://pcp.readthedocs.io/en/latest/UAG/IntroductionToPcp.html#">PCP
  documentation</link>.
 </para>
 <section xml:id="sec-getting-pcp">
  <title>Getting the PCP container image</title>
  <para>
   The PCP container image is based on the <emphasis>BCI-Init</emphasis>
   container that utilizes &systemd; used to manage the PCP services.
  </para>
  <para>
   You can pull the container image using podman or from the Cockpit web
   management console. To pull the image by using podman, run the following
   command:
  </para>
<screen>&prompt.root;podman pull registry.suse.com/suse/pcp:latest</screen>
  <para>
   To get the container image using Cockpit, go to <guimenu>Podman
   containers</guimenu>, click <guimenu>Get new image</guimenu>, and search for
   <emphasis>pcp</emphasis>. Then select the image from the
   <literal>registry.suse.com</literal> for &slea; 15 SP4 and download it.
  </para>
 </section>
 <section xml:id="sec-starting-pcp">
  <title>Running the PCP container</title>
  <para>
   The following command shows minimal options that you need to use to run a
   PCP container:
  </para>
<screen>&prompt.root;podman run -d  \
  --systemd always \
  -p <replaceable>HOST_IP:HOST_PORT:CONTAINER_PORT</replaceable> \
  -v <replaceable>HOST_DIR</replaceable>:/var/log/pcp/pmlogger \
  <replaceable>PCP_CONTAINER_IMAGE</replaceable></screen>
  <para>
   where the options have the following meaning:
  </para>
  <variablelist>
   <varlistentry>
    <term><option>-d</option></term>
    <listitem>
     <para>
      The container will run in a detached mode without tty.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--systemd always</option></term>
    <listitem>
     <para>
      Runs the container in the &systemd; mode. All services needed to run in
      the PCP container will be started automatically by &systemd; in the
      container.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--privileged</option></term>
    <listitem>
     <para>
      The container runs with extended privileges. Use this option if your
      system has SELinux enabled, otherwise the collected metrics will be
      incomplete.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-v <replaceable>HOST_DIR</replaceable>:/var/log/pcp/pmlogger</option></term>
    <listitem>
     <para>
      Creates a bind mount so that <command>pmlogger</command> archives are
      written to the <replaceable>HOST_DIR</replaceable> on the host. By
      default, <command>pmlogger</command> stores the collected metrics in
      <filename>/var/log/pcp/pmlogger</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>PCP_CONTAINER_IMAGE</replaceable></term>
    <listitem>
     <para>
      Is the downloaded PCP container image.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   Other useful options of the <command>podman run</command> command follow:
  </para>
  <variablelist>
   <title>Other options</title>
   <varlistentry>
    <term><option>-p <replaceable>HOST_IP:HOST_PORT:CONTAINER_PORT</replaceable></option></term>
    <listitem>
     <para>
      Publishes ports of the container by mapping a container port onto a host
      port. If you do not specify <replaceable>HOST_IP</replaceable>, the ports
      will be mapped on the local host. If you omit the
      <replaceable>HOST_PORT</replaceable> value, a random port number will be
      used. By default, the <command>pmcd</command> daemon listens and exposes
      the PMAPI to receive metrics on the port <emphasis>44321</emphasis>, so
      it is recommended to map this port on the same port number on the host.
      The <command>pmproxy</command> daemon listens on and exposes the REST
      PMWEBAPI to access metrics on the <emphasis>44322</emphasis> port by
      default, so it is recommended to map this port on the same host port
      number.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--net host</option></term>
    <listitem>
     <para>
      The container uses the host's network. Use this option if you want to
      collect metrics from the host's network interfaces.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-e</option></term>
    <listitem>
     <para>
      The option enables you to set the following environment variables:
     </para>
     <variablelist>
      <!-- <title>Environment variables</title> -->
      <varlistentry>
       <term>PCP_SERVICES</term>
       <listitem>
        <para>
         Is a comma-separated list of services to start by &systemd; in the
         container.
        </para>
        <para>
         Default services are: <literal>pmcd</literal>,
         <literal>pmie</literal>, <literal>pmlogger</literal>,
         <literal>pmproxy</literal>.
        </para>
        <para>
         You can use this variable, if you want to run a container with a list
         of services that is different from the default one, for example, only
         with <literal>pmlogger</literal>:
        </para>
<screen>&prompt.root;podman run -d \
  --name pmlogger \
  --systemd always \
  -e PCP_SERVICES=pmlogger  \
  -v pcp-archives:/var/log/pcp/pmlogger  \
  registry.suse.com/suse/pcp:latest</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>HOST_MOUNT</term>
       <listitem>
        <para>
         Is a path inside the container to the bind mount of the host's root
         file system. The default value is not set.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>REDIS_SERVERS</term>
       <listitem>
        <para>
         Specifies a connection to a Redis server. In a non-clustered setup,
         provide a comma-separated list of host specs. In a clustered setup,
         provide any individual cluster host, other hosts in the cluster are
         discovered automatically. The default value is:
         <literal>localhost:6379</literal>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      If you need to use a different configuration to the one provided by the
      environment variables, proceed as described in
      <xref linkend="sec-pcp-services-configuration"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>
 <section xml:id="sec-pcp-services-configuration">
  <title>Configuring PCP services</title>
  <para>
   All services that run inside the PCP container have a default configuration
   that might not suit your needs. If you need a custom configuration that
   cannot be covered by the environment variables described above, create
   configuration files for the PCP services and pass them to the PCP using a
   bind mount as follows:
  </para>
<screen>&prompt.root;podman run -d \
  --name <replaceable>CONTAINER_NAME</replaceable> \
  --systemd always \
  -v $<replaceable>HOST_CONFIG</replaceable>:<replaceable>CONTAINER_CONFIG_PATH</replaceable>:z \
  -v <replaceable>HOST_LOGS_PATH</replaceable>:/var/log/pcp/pmlogger  \
  registry.suse.com/suse/pcp:latest</screen>
  <para>
   Where:
  </para>
  <variablelist>
   <varlistentry>
    <term><replaceable>CONTAINER_NAME</replaceable></term>
    <listitem>
     <para>
      Is an optional container name.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>HOST_CONFIG</replaceable></term>
    <listitem>
     <para>
      Is an absolute path to the config you created on the host machine. You
      can choose any file name you want.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>CONTAINER_CONFIG_PATH</replaceable></term>
    <listitem>
     <para>
      Is an absolute path to a particular configuration file inside the
      container. Each available configuration file is described in the
      corresponding sections further.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>HOST_LOGS_PATH</replaceable></term>
    <listitem>
     <para>
      Is a directory that should be a bind mount to the container logs.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For example, a container called <literal>pcp</literal>, with the
   configuration file <filename>pmcd</filename> on the host machine and the
   <filename>pcp-archives</filename> directory for logs on the host machine, is
   run by the following command:
  </para>
<screen>&prompt.root;podman run -d \
  --name pcp  \
  --systemd always \
  -v $(pwd)/pcp-archives:/var/log/pcp/pmlogger \
  -v $(pwd)/pmcd:/etc/sysconfig/pmcd \
registry.suse.com/suse/pcp:latest</screen>
  <section xml:id="sec-pmcd-daemon-configuration">
   <title>Custom <command>pmcd</command> daemon configuration</title>
   <para>
    The <command>pmcd</command> daemon configuration is stored in the
    <filename>/etc/sysconfig/pmcd</filename> file. The file stores environment
    variables that modify the behavior of the <command>pmcd</command> daemon.
   </para>
   <section xml:id="sec-sysconfig-pmcd">
    <title>The <filename>/etc/sysconfig/pmcd</filename> file</title>
    <para>
     You can add the following variables to the file to configure the
     <command>pmcd</command> daemon:
    </para>
    <variablelist>
     <varlistentry>
      <term>PMCD_LOCAL</term>
      <listitem>
       <para>
        Defines whether the remote host can connect to the
        <command>pmcd</command> daemon. If set to <emphasis>0</emphasis>,
        remote connections to the daemon are allowed. If set to
        <emphasis>1</emphasis>, the daemon listens only on the local host. The
        default value is <emphasis>0</emphasis>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMCD_MAXPENDING</term>
      <listitem>
       <para>
        Defines the maximum count of pending connections to the agent. The
        default value is 5.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMCD_ROOT_AGENT</term>
      <listitem>
       <para>
        If the <literal>pmdaroot</literal> is enabled (the value is set to
        <emphasis>1</emphasis>), adding a new PDMA does not trigger restarting
        of other PMDAs. If <literal>pmdaroot</literal> is not enabled,
        <command>pmcd</command> will require to restart all PMDAs when a new
        PMDA is added. The default value is <emphasis>1</emphasis>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMCD_RESTART_AGENTS</term>
      <listitem>
       <para>
        If set to <emphasis>1</emphasis>, the <command>pmcd</command> daemon
        tries to restart any exited PMDA. Enable this option only if you have
        enabled <literal>pmdaroot</literal>, as <command>pmcd</command> itself
        does not have privileges to restart PMDA.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMCD_WAIT_TIMEOUT</term>
      <listitem>
       <para>
        Defines the maximum time in seconds <command>pmcd</command> can wait
        to accept a connection. After this time, the connection is reported as
        failed. The default value is <emphasis>60</emphasis>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PCP_NSS_INIT_MODE</term>
      <listitem>
       <para>
        Defines the mode in which <command>pmcd</command> initializes the NSS
        certificate database when secured connections are used. The default
        value is <literal>readonly</literal>. You can set the mode to
        <literal>readwrite</literal>, but if the initialization fails, the
        default value is used as a fallback.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     An example follows:
    </para>
<screen>
      PMCD_LOCAL=0
      PMCD_MAXPENDING=5
      PMCD_ROOT_AGENT=1
      PMCD_RESTART_AGENTS=1
      PMCD_WAIT_TIMEOUT=70
      PCP_NSS_INIT_MODE=readwrite
     </screen>
   </section>
   <!-- <section xml:id="sec-pmcd-options">
    <title>The <filename>/etc/pcp/pmcd/pmcd.options</filename> file</title>
    <para>
    The configuration file <filename>/etc/pcp/pmcd/pmcd.options</filename>
    stores possible command line options for the <command>pmcd</command>
    daemon. By default the options are commented out and not used when
    invoking the daemon. See the <command>pmcd</command> command options in
    <link xlink:href="https://man7.org/linux/man-pages/man1/pmcd.1.html">pmcd(1)</link>.
    </para>
    <para>
    Add the required options to your configuration file that will be mounted
    on the <filename>/etc/pcp/pmcd/pmcd.options</filename> file in the
    container. The options should be added to the configuration file in the
    following pattern:
    </para>
    <screen>
    -<replaceable>option</replaceable> <replaceable>OPTION_VALUE</replaceable>
    </screen>
    <para>
    For example, the option that specifies an IP address on which the daemon
    listen for connections
    </para>
    <screen>-i 192.168.0.100</screen>
    </section>
    -->
  </section>
  <section xml:id="sec-pmlogger-configuration">
   <title>Custom <command>pmlogger</command> configuration</title>
   <para>
    The custom configuration for the <command>pmlogger</command> is stored in
    the following configuration files:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <filename>/etc/sysconfig/pmlogger</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/etc/pcp/pmlogger/control.d/local</filename>
     </para>
    </listitem>
    <!-- <listitem>
     <para>
     <filename>/var/lib/pcp/config/pmlogger/config.default</filename>
     </para> -->
   </itemizedlist>
   <section xml:id="sec-sysconfig-pmlogger">
    <title>The <filename>/etc/sysconfig/pmlogger</filename> file</title>
    <para>
     You can use the following attributes to configure the
     <command>pmlogger</command>:
    </para>
    <variablelist>
     <varlistentry>
      <term>PMLOGGER_LOCAL</term>
      <listitem>
       <para>
        Defines whether <command>pmlogger</command> allows connections from
        remote hosts. If set to <emphasis>1</emphasis>,
        <command>pmlogger</command> allows connections from local host only.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMLOGGER_MAXPENDING</term>
      <listitem>
       <para>
        Defines the maximum count of pending connections. The default value is
        5.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMLOGGER_INTERVAL</term>
      <listitem>
       <para>
        Defines the default sampling interval <command>pmlogger</command> uses.
        The default value is <emphasis>60&nbsp;s</emphasis>. Keep in mind that
        this value can be overridden by the <command>pmlogger</command> command
        line.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>PMLOGGER_CHECK_SKIP_LOGCONF</term>
      <listitem>
       <para>
        Setting this option to <emphasis>yes</emphasis> disables the
        regeneration and checking of the <command>pmlogger</command>
        configuration if the configuration <command>pmlogger</command> comes
        from <command>pmlogconf</command>. The default behavior is to
        regenerate configuration files and check for changes every time
        <command>pmlogger</command> is started.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     An example follows:
    </para>
<screen>
PMLOGGER_LOCAL=1
PMLOGGER_MAXPENDING=5
PMLOGGER_INTERVAL=10
PMLOGGER_CHECK_SKIP_LOGCONF=yes
     </screen>
   </section>
   <section xml:id="sec-control-local">
    <title>The <filename>/etc/pcp/pmlogger/control.d/local</filename> file</title>
    <para>
     The file <filename>/etc/pcp/pmlogger/control.d/local</filename> stores
     specifications of the host, which metrics should be logged, the logging
     frequency (default is 24 hours), and <command>pmlogger</command> options.
     For example:
    </para>
<screen>
# === VARIABLE ASSIGNMENTS ===
#
# DO NOT REMOVE OR EDIT THE FOLLOWING LINE
$version=1.1

# Uncomment one of the lines below to enable/disable compression behaviour
# that is different to the pmlogger_daily default.
# Value is days before compressing archives, 0 is immediate compression,
# "never" or "forever" suppresses compression.
#
#$PCP_COMPRESSAFTER=0
#$PCP_COMPRESSAFTER=3
#$PCP_COMPRESSAFTER=never

# === LOGGER CONTROL SPECIFICATIONS ===
#
#Host           P?  S?  directory                       args

# local primary logger
LOCALHOSTNAME   y   n   PCP_ARCHIVE_DIR/LOCALHOSTNAME   -r -T24h10m -c config.default -v 100Mb
     </screen>
    <note>
     <title>Defaults point to local host</title>
     <para>
      If you run the <command>pmlogger</command> in a container on a different
      machine than the one that runs the <command>pmcd</command> (a client),
      change the following line to point to the client:
     </para>
<screen># local primary logger
<replaceable>CLIENT_HOSTNAME</replaceable>   y   n   PCP_ARCHIVE_DIR/<replaceable>CLIENT_HOSTNAME</replaceable>   -r -T24h10m -c config.default -v 100Mb</screen>
     <para>
      For example, for the <literal>slemicro_1</literal> host name, the line
      should look as follows:
     </para>
<screen># local primary logger
slemicro_1   y   n   PCP_ARCHIVE_DIR/slemicro_1   -r -T24h10m -c config.default -v 100Mb</screen>
    </note>
   </section>
   <!--
    <section xml:id="sec-config-default">
    <title>The <filename>/var/lib/pcp/config/pmlogger/config.default</filename> file</title>
    <para>
    The file <filename>/var/lib/pcp/config/pmlogger/config.default</filename>
    stores a set of default metrics that are logged on the system. Though you
    can add metrics to the file, do not modify the default metrics.
    </para>
    </section>
    -->
  </section>
 </section>
 <section xml:id="sec-autostart-onboot">
  <title>Starting the PCP container automatically on boot</title>
  <para>
   After you run the PCP container, you can configure &systemd; to start the
   container on boot. To do so, follow the procedure below:
  </para>
  <procedure>
   <step>
    <para>
     Create a unit file for the container by using the <command>podman generate
     systemd</command> command:
    </para>
<screen>&prompt.root;podman generate systemd --name <replaceable>CONTAINER_NAME</replaceable> > /etc/systemd/system/container-<replaceable>CONTAINER_NAME</replaceable>.service</screen>
    <para>
     where <replaceable>CONTAINER_NAME</replaceable> is the name of the PCP
     container you used when running the container from the container image.
    </para>
   </step>
   <step>
    <para>
     Enable the service in &systemd;:
    </para>
<screen>&prompt.root;systemctl enable container-<replaceable>CONTAINER_NAME</replaceable></screen>
   </step>
  </procedure>
 </section>
 <section xml:id="sec-collecting-metrics">
  <title>Metrics management</title>
  <section xml:id="sec-listing-metrics">
   <title>Listing available performance metrics</title>
   <para>
    From within the container, you can use the command
    <command>pminfo</command> to list metrics. For example, to list all
    available performance metrics, run:
   </para>
<screen>&prompt.root;pminfo</screen>
   <para>
    You can list a group of related metrics by specifying the metrics prefix:
   </para>
<screen>&prompt.root;pminfo <replaceable>METRIC_PREFIX</replaceable></screen>
   <para>
    For example, to list all metrics related to kernel, use:
   </para>
<screen>&prompt.root;pminfo disk

disk.dev.r_await
disk.dm.await
disk.dm.r_await
disk.md.await
disk.md.r_await
...
</screen>
   <para>
    You can also specify additional strings to narrow down the list of metrics,
    for example:
   </para>
<screen>&prompt.root;piminfo disk.dev

disk.dev.read
disk.dev.write
disk.dev.total
disk.dev.blkread
disk.dev.blkwrite
disk.dev.blktotal
...
</screen>
   <para>
    To get online help text of a particular metric, use the <option>-t</option>
    option followed by the metric, for example:
   </para>
<screen>&prompt.root;pminfo -t kernel.cpu.util.user

kernel.cpu.util.user [percentage of user time across all CPUs, including guest CPU time]
      </screen>
   <para>
    To display a description text of a particular metric, use the
    <option>-T</option> option followed by the metric, for example:
   </para>
<screen>&prompt.root;pminfo -T kernel.cpu.util.user

Help:
percentage of user time across all CPUs, including guest CPU time
      </screen>
  </section>
  <section xml:id="sec-local-metrics">
   <title>Checking local metrics</title>
   <para>
    After you start the PCP container, you can verify that metrics are being
    recorded properly by running the following command inside the container:
   </para>
<screen>&prompt.root;pcp

Performance Co-Pilot configuration on localhost:

 platform: Linux localhost &kernel-version;-default #1 SMP Wed May 4 11:29:09 UTC 2022 (ea30951) x86_64
 hardware: 1 cpu, 1 disk, 1 node, 1726MB RAM
 timezone: UTC
 services: pmcd pmproxy
     pmcd: Version 5.2.2-1, 9 agents, 4 clients
     pmda: root pmcd proc pmproxy xfs linux mmv kvm jbd2
 pmlogger: primary logger: /var/log/pcp/pmlogger/localhost/20220607.09.24
     pmie: primary engine: /var/log/pcp/pmie/localhost/pmie.log
      </screen>
   <para>
    Now check if the logs are written to a proper destination:
   </para>
<screen>&prompt.root;ls <replaceable>PATH_TO_PMLOGGER_LOGS</replaceable></screen>
   <para>
    where <replaceable>PATH_TO_PMLOGGER_LOGS</replaceable> should be
    <filename>/var/log/pcp/pmlogger/localhost/</filename> in this case.
   </para>
  </section>
  <section xml:id="sec-remote-metrics">
   <title>Recording metrics from remote systems</title>
   <para>
    You can deploy collector containers that collect metrics from different
    remote systems than the ones where the <command>pmlogger</command>
    containers are running. Each remote collector system needs the
    <command>pmcd</command> daemon and a set of <emphasis>pmda</emphasis>. To
    deploy several collectors with a centralized monitoring system, proceed as
    follows.
   </para>
   <procedure>
    <step>
     <para>
      On each system you want to collect metrics from (clients), run a
      container with the <command>pmcd</command> daemon:
     </para>
<screen>&prompt.root;podman run -d \
    --name pcp-pmcd \
    --privileged \
    --net host \
    --systemd always \
    -e PCP_SERVICES=pmcd \
    -e HOST_MOUNT=/host \
    -v /:/host:ro,rslave \
    registry.suse.com/suse/pcp:latest</screen>
    </step>
    <step xml:id="pmlogger-config">
     <para>
      On the monitoring system, create a <command>pmlogger</command>
      configuration file for each client
      <filename>control.<replaceable>CLIENT</replaceable></filename> with the
      following content:
     </para>
<screen>
$version=1.1

<replaceable>CLIENT_HOSTNAME</replaceable> n n PCP_ARCHIVE_DIR/<replaceable>CLIENT</replaceable> -N -r -T24h10m -c config.default -v 100Mb
          </screen>
     <para>
      Keep in mind that the <replaceable>CLIENT_HOSTNAME</replaceable> must be
      resolvable in DNS. You can use IP addresses or fully qualified domain
      names (FQDN) instead.
     </para>
    </step>
    <step>
     <para>
      On the monitoring system, create a directory for each client to store the
      recorded logs:
     </para>
<screen>&prompt.root;mkdir /root/pcp-archives/<replaceable>CLIENT</replaceable></screen>
     <para>
      For example, for <literal>slemicro_1</literal>:
     </para>
<screen>&prompt.root;mkdir /root/pcp-archives/slemicro_1</screen>
    </step>
    <step>
     <para>
      On the monitoring system, run a container with
      <command>pmlogger</command> for each client:
     </para>
<screen>&prompt.root;podman run -d \
    --name pcp-pmlogger-<replaceable>CLIENT</replaceable> \
    --systemd always \
    -e PCP_SERVICES=pmlogger \
    -v /root/pcp-archives/<replaceable>CLIENT</replaceable>:/var/log/pcp/pmlogger:z \
    -v $(pwd)/control.<replaceable>CLIENT</replaceable>:/etc/pcp/pmlogger/control.d/local:z \
    registry.suse.com/suse/pcp:latest
          </screen>
     <para>
      For example, for a client called <literal>slemicro_1</literal>:
     </para>
<screen>&prompt.root;podman run -d \
    --name pcp-pmlogger-slemicro_1 \
    --systemd always \
    -e PCP_SERVICES=pmlogger \
    -v /root/pcp-archives:/var/log/pcp/pmlogger:z \
    -v $(pwd)/control.slemicro_1:/etc/pcp/pmlogger/control.d/local:z \
    registry.suse.com/suse/pcp:latest
          </screen>
     <note>
      <para>
       The second bind mount points to the configuration file created in
       <xref linkend="pmlogger-config"/> and replaces the default
       <command>pmlogger</command> configuration. If you do not create this
       bind mount, <command>pmlogger</command> uses the default
       <filename>/etc/pcp/pmlogger/control.d/local</filename> file and logging
       from clients fails as the default configuration points to a local host.
       For details about the configuration file, refer to
       <xref linkend="sec-control-local"/>.
      </para>
     </note>
    </step>
    <step>
     <para>
      To check if the log collection is working properly, run:
     </para>
<screen>&prompt.root;ls -l pcp-archives/<replaceable>CLIENT</replaceable>/<replaceable>CLIENT</replaceable></screen>
     <para>
      For example:
     </para>
<screen>&prompt.root;ls -l pcp-archives/slemicro_1/slemicro_1

total 1076
-rw-r--r--. 1 systemd-network systemd-network 876372 Jun  8 11:24 20220608.10.58.0
-rw-r--r--. 1 systemd-network systemd-network    312 Jun  8 11:22 20220608.10.58.index
-rw-r--r--. 1 systemd-network systemd-network 184486 Jun  8 10:58 20220608.10.58.meta
-rw-r--r--. 1 systemd-network systemd-network    246 Jun  8 10:58 Latest
-rw-r--r--. 1 systemd-network systemd-network  24595 Jun  8 10:58 pmlogger.log
          </screen>
    </step>
   </procedure>
  </section>
 </section>
</chapter>
