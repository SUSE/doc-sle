<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<chapter version="5.0" role="General"
  xml:id="sec-sec-file-management"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>File management</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <sect1 xml:id="sec-sec-prot-general-partitions">
   <title>Disk partitions</title>

   <para>
    Servers should have separate file systems for at least
    <filename>/</filename>, <filename>/boot</filename>,
    <filename>/usr</filename>, <filename>/var</filename>,
    <filename>/tmp</filename>, and <filename>/home</filename>. This prevents,
    for example, logging space and temporary space under
    <filename>/var</filename> and <filename>/tmp</filename> from filling up
    the root partition. Third-party applications should be on separate file
    systems as well, for example under <filename>/opt</filename>.
   </para>

   <para>
    Another advantage of separate file systems is the possibility of choosing
    special mount options that are only suitable for certain regions in the
    file system hierarchy. The mount options are:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>noexec</literal>: prevents execution of files.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nodev</literal>: prevents character or block special devices
      from being usable.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nosuid</literal>: prevents the <literal>set-user-ID</literal>
      or <literal>set-group-ID</literal> bits from being effective.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ro</literal>: mounts the file system
      <literal>read-only</literal>.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Each of these options needs to be carefully considered before applying
    it to a partition mount. Applications may stop working, or the support
    status may be violated. When applied correctly, mount options can help
    against certain types of security attacks or misconfigurations. For
    example, there should be no need for <literal>set-user-ID</literal>
    binaries to be placed in <filename>/tmp</filename>.
   </para>

   <para>
    You are advised to review <xref linkend="cha-common-criteria"/>. It is
    important to understand the need to separate the partitions that could
    impact a running system (for example, log files filling up
    <filename>/var/log</filename> are a good reason to separate
    <filename>/var</filename> from the <filename>/</filename> partition).
    Another thing to keep in mind is that you need to utilize LVM
    or another volume manager or at the least the extended partition type
    to work around the limit of four primary partitions on PC class systems.
   </para>

   <para>
    Another capability in &productname; is encrypting a partition or even a
    single directory or file as a container. Refer to
    <xref linkend="cha-security-cryptofs"/> for details.
   </para>
  </sect1>

 <sect1 xml:id="sec-sec-prot-general-file-permissions">
  <title>Modifying permissions of certain system files</title>

  <para>
   Many files&mdash;especially in the <filename>/etc</filename>
   directory&mdash;are world-readable, which means that unprivileged users can
   read their contents. Normally this is not a problem, but to take
   extra care, you can remove the world-readable or group-readable bits for
   sensitive files.
  </para>

  <para>
   &sle; provides the <package>permissions</package> package to easily apply
   file permissions. The package comes with three pre-defined system profiles:
  </para>

  <variablelist>
   <varlistentry>
    <term>easy</term>
    <listitem>
     <para>
      Profile for systems that require user-friendly graphical user interaction.
      This is the default profile.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>secure</term>
    <listitem>
     <para>
      Profile for server systems without fully fledged graphical user
      interfaces.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>paranoid</term>
    <listitem>
     <para>
      Profile for maximum security. Additionally to the <literal>secure</literal>
      profile, it removes <emphasis>all</emphasis> special permissions like
      setuid/setgid and capability bits.
     </para>

     <warning>
      <title>Unusable system for non-privileged users</title>
      <para>
       Except for simple tasks like changing passwords, a system without special
       permissions may be unusable for non-privileged users.
      </para>
      <para>
       Do not use the <literal>paranoid</literal> profile is as-is, but as a
       template for custom permissions. More information can be found in the
       <filename>permissions.paranoid</filename> file.
      </para>
     </warning>

    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   To define custom file permissions, edit
   <filename>/etc/permissions.local</filename> or create a drop-in file in the
   <filename>/etc/permissions.d/</filename> directory.
  </para>

  <screen># Additional custom hardening
/etc/security/access.conf       root:root       0400
/etc/sysctl.conf                root:root       0400
/root/                          root:root       0700</screen>

  <para>
   The first column specifies the file name; the directory names must end with a
   slash. The second column specifies the owner and group, and the third column
   specifies the mode.
   For more information about the configuration file format, refer to
   <command>man permissions</command>.
  </para>

  <para>
   Select the profile in <filename>/etc/sysconfig/security</filename>. To use
   the <literal>easy</literal> profile and custom permissions from
   <filename>/etc/permissions.local</filename>, set:
  </para>

  <screen>PERMISSION_SECURITY="<replaceable>easy local</replaceable>"</screen>

  <para>
   To apply the setting, run <command>chkstat --system --set</command>.
  </para>

  <para>
   The permissions are also applied during package updates via
   <command>zypper</command>. You could also call <command>chkstat</command>
   regularly via <systemitem class="daemon">cron</systemitem> or a &systemd;
   timer.
  </para>

  <important>
   <title>Custom file permissions</title>
   <para>
    While the system profiles are well tested, custom permissions can break
    standard applications. &suse; cannot provide support for such scenarios.
   </para>
   <para>
    Always test custom file permissions before applying them with
    <command>chkstat</command> to make sure everything works as desired.
   </para>
  </important>

 </sect1>

 <sect1 xml:id="sec-sec-prot-general-home-permissions">
  <title>Changing home directory permissions from 755 to 700</title>
  <para>
   By default, home directories of users are accessible (read, execute) by all
   by users on the system. As this is a potential information leak, home
   directories should only be accessible by their owners.
  </para>
  <para>
   The following commands set the permissions to <literal>700</literal>
   (directory only accessible for the owner) for all existing home directories
   in <filename>/home</filename>:
  </para>
  <screen>&prompt.sudo;chmod 755 /home
&prompt.sudo;for a in /home/*; do \
echo "Changing rights for directory $a"; chmod 700 ”$a”; done</screen>

  <!-- cwickert 2021-11-11: the following only works with shadow >= 4.8.1,
   means SLES 15 >= SP3. Beware when backporting! -->
  <para>
   To ensure newly created home directories are created with secure
   permissions, edit <filename>/etc/login.defs</filename> and set
   <varname>HOME_MODE</varname> to <literal>700</literal>.
  </para>

  <screen># HOME_MODE is used by useradd(8) and newusers(8) to set the mode for new
# home directories.
# If HOME_MODE is not set, the value of UMASK is used to create the mode.
HOME_MODE      0700</screen>

  <para>
   If you do not set <varname>HOME_MODE</varname>, permissions are calculated
   from the default umask. <varname>HOME_MODE</varname>
   specifies the permissions used, not a mask used to remove access like umask.
   For more information about umask, refer to <xref
    linkend="sec-sec-prot-general-umask"/>.
  </para>

  <para>
   You can verify the configuration change by creating a new user with
   <command>useradd -m testuser</command>. Check the permissions of the
   directories with <command>ls -l /home</command>. Afterwards, remove the user
   created for this test.
  </para>
  <!-- cwickert 2021-11-11: end of SLE 15 >= SP3-only content -->
  <important>
   <title>Test permission changes</title>
   <para>
    Users are no longer allowed to access other users' home directories. This
    may be unexpected for users and software.
   </para>
   <para>
    Test this change before using it in production and notify users affected by
    the change.
   </para>
  </important>
 </sect1>

  <sect1 xml:id="sec-sec-prot-general-umask">
   <title>Default umask</title>

   <para>
    The <command>umask</command> (user file-creation mode mask) command is a
    shell built-in command that determines the default file permissions for
    newly created files and directories. This can be overwritten by system calls
    but many programs and utilities use <command>umask</command>.
   </para>

   <para>
    By default, <command>umask</command> is set to <literal>022</literal>.
    This umask is subtracted from the access mode <literal>777</literal> if at
    least one bit is set.
   </para>

   <para>
    To determine the active umask, use the <command>umask</command>
    command:
   </para>

<screen>&prompt.user;umask
022</screen>

   <para>
    With the default umask, you see the behavior most users expect to see on a
    Linux system.
   </para>

<screen>&prompt.user;touch a
&prompt.user;mkdir b
&prompt.user;ls -on
total 16
-rw-r--r--. 1 17086    0 Nov 29 15:05 a
drwxr-xr-x. 2 17086 4096 Nov 29 15:05 b</screen>

   <para>
    You can specify arbitrary umask values, depending on your needs.
   </para>

<screen>&prompt.user;umask 111
&prompt.user;touch c
&prompt.user;mkdir d
&prompt.user;ls -on
total 16
-rw-rw-rw-. 1 17086    0 Nov 29 15:05 c
drw-rw-rw-. 2 17086 4096 Nov 29 15:05 d</screen>

   <para>
    Based on your threat model, you can use a stricter umask such as
    <literal>037</literal> to prevent accidental data leakage.
   </para>

<screen>&prompt.user;umask 037
&prompt.user;touch e
&prompt.user;mkdir f
&prompt.user;ls -on
total 16
-rw-r-----. 1 17086    0 Nov 29 15:06 e
drwxr-----. 2 17086 4096 Nov 29 15:06 f</screen>

   <tip>
    <title>Maximum security</title>
    <para>
     For maximum security, use a umask of <literal>077</literal>. This
     forces newly created files and directories to be created with no
     permissions for the group and other users.
    </para>
    <para>
     This can be unexpected for users and software and may
     cause additional load for your support team.
    </para>
   </tip>

   <sect2 xml:id="sec-sec-prot-general-umask-adjust">
    <title>Adjusting the default umask</title>
    <para>
     You can modify the umask globally for all users by changing the
     <varname>UMASK</varname> value in <filename>/etc/login.defs</filename>.
    </para>

<screen># Default initial "umask" value used by login(1) on non-PAM enabled systems.
# Default "umask" value for pam_umask(8) on PAM enabled systems.
# UMASK is also used by useradd(8) and newusers(8) to set the mode for new
# home directories.
# 022 is the default value, but 027, or even 077, could be considered
# for increased privacy. There is no One True Answer here: each sysadmin
# must make up their mind.
UMASK           022</screen>

    <para>
     For individual users, add the umask to the 'gecos' field in
     <filename>/etc/password</filename> like this:
    </para>
<screen>&exampleuser_plain;:x:1000:100:&exampleuserfull;,UMASK=<replaceable>022</replaceable>:/home/tux:/bin/bash</screen>
    <para>
     You can do the same with <command>YaST users</command> by adding
     <literal>UMASK=<replaceable>022</replaceable></literal> to a user's
     <menuchoice><guimenu>Details</guimenu> <guimenu>Additional User
     Information</guimenu></menuchoice>.
    </para>
    <para>
     The settings made in <filename>/etc/login.defs</filename> and
     <filename>/etc/password</filename> are applied by the PAM module
     <filename>pam_umask.so</filename>. For additional configuration options,
     refer to <command>man pam_umask</command>.
    </para>
    <para>
     For the changes to take effect, users need to log out and back in
     again. Afterwards, use the <command>umask</command> command to verify the
     umask is set correctly.
    </para>

   </sect2>

  </sect1>

 <sect1 xml:id="sec-sec-prot-general-s-bit">
   <title>SUID/SGID files</title>

   <para>
    When the SUID (set user ID) or SGID (set group ID) bits are set on an
    executable, it executes with the UID or GID of the owner of the executable
    rather than that of the person executing it. This means that, for example,
    all executables that have the SUID bit set and are owned by &rootuser; are
    executed with the UID of &rootuser;. A good example is the <command>passwd</command> command that
    allows ordinary users to update the password field in the <filename>/etc/shadow</filename> file,
    which is owned by &rootuser;.
   </para>

   <para>
    SUID/SGID bits can be misused when the executable has a
    security hole. Therefore, you should search the entire system for
    SUID/SGID executables and document them. To search the entire system for SUID or SGID files, you can run the
    following command:
   </para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin \
  /srv /tmp /usr /var -type f -perm '/6000' -ls</screen>

   <para>
    You may need to extend the list of directories that are searched if you
    have a different file system structure.
   </para>


   <para>
    &suse; only sets the SUID/SGID bit on binary if it is really necessary.
    Ensure that code
    developers do not set SUID/SGID bits on their programs if it is not an
    absolute requirement. Often you can use workarounds like removing the
    executable bit for world/others. However, a better approach is to change
    the design of the software or use capabilities.
   </para>

   <para>
    &productname; supports file capabilities to allow more fine-grained
    privileges to be given to programs rather than the full power of &rootuser;:
   </para>

<screen>&prompt.root;getcap -v /usr/bin/ping
/usr/bin/ping = cap_new_raw+eip</screen>

   <para>
    The previous command only grants the <literal>CAP_NET_RAW</literal> capability
    to whoever executes <command>ping</command>. In case of vulnerabilities
    inside <command>ping</command>, an attacker can gain, at most, this
    capability in contrast with full &rootuser;.  Whenever possible, file
    capabilities should be chosen in favor of the SUID bit. But this only
    applies when the binary is SUID to &rootuser;, not to other users such as
    <literal>news</literal>, <literal>lp</literal> and similar.
   </para>

  </sect1>

  <sect1 xml:id="sec-sec-prot-general-world-writable-files">
   <title>World-writable files</title>

   <para>
    World-writable files are a security risk since they can be modified by any
    user on the system. Additionally, world-writable directories allow anyone to add or
    delete files. To locate world-writable files and directories, you can use
    the following command:
   </para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin \
  /srv /tmp /usr /var -type f -perm -2 ! -type l -ls</screen>

   <para>
   You may need to extend the list of directories that are searched if you
   have a different file system structure.
   </para>

   <para>
    The <option>! -type l</option> parameter skips all symbolic links since
    symbolic links are always world-writable. However, this is not a problem
    if the target of the link is not world-writable, which is checked
    by the above find command.
   </para>

   <para>
    World-writable directories with the sticky bit such as the <filename>/tmp</filename>
    directory do not allow anyone except the owner of a file to delete or rename it in
    this directory.
    The sticky bit makes files stick to the user who created them, and
    prevents other users from deleting or renaming the files. Therefore,
    depending on the purpose of the directory, world-writable directories with
    the sticky bit are not an issue. An example is the
    <filename>/tmp</filename> directory:
   </para>

<screen>&prompt.user;ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>

   <para>
    The <literal>t</literal> mode bit in the output denotes the sticky bit.
   </para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-orphaned">
   <title>Orphaned or unowned files</title>

   <para>
    Files not owned by any user or group may not necessarily be a security
    problem in itself. However, unowned files could pose a security problem in
    the future. For example, if a new user is created and the new user
    happens to get the same UID as the unowned files have, then this new user
    automatically becomes the owner of these files.
   </para>

   <para>
    To locate files not owned by any user or group, use the following command:
   </para>

    <screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -nouser -o -nogroup</screen>

   <para>
   You may need to extend the list of directories that are searched if you
   have a different file system structure.
   </para>

   <para>
    A different problem is files that were not installed via the packaging
    system and therefore do not receive updates. You can check for such files
    with the following command:
   </para>

   <screen>&prompt.user;find /bin /lib /lib64 /usr -path /usr/local -prune -o -type f -a -exec /bin/sh -c "rpm -qf {} &amp;> /dev/null || echo {}" \;</screen>

   <para>
    Run this command as an untrusted user (for example nobody) since crafted
    file names may lead to command
    execution. This should not be a problem since these directories should only be writeable by &rootuser;, but
    it is still a good security precaution.
   </para>

   <para>
    This shows you all files under <filename>/bin</filename>,
    <filename>/lib</filename>, <filename>/lib64</filename> and
    <filename>/usr</filename> (with the
    exception of files in <filename>/usr/local</filename>) that are not tracked
    by the package manager. These files may not represent a security issue, but
    you should be aware of what is not tracked and take the necessary precautions to
    keep these files up to date.
   </para>
  </sect1>
</chapter>
