<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter version="5.0" xml:id="cha.64bit"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>32-Bit and 64-Bit Applications in a 64-Bit System Environment</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <indexterm>
 <primary>64-bit Linux</primary></indexterm>
 <para>
  &productnamereg; is available for <phrase os="sles">several</phrase>
  64-bit platforms. This does not necessarily mean that all the applications
  included have already been ported to 64-bit platforms. &productname;
  supports the use of 32-bit applications in a 64-bit system environment.
  This chapter offers a brief overview of how this support is implemented on
  64-bit &productname; platforms. It explains how 32-bit applications are
  executed (runtime support) and how 32-bit applications should be compiled
  to enable them to run both in 32-bit and 64-bit system environments.
  Additionally, find information about the kernel API and an explanation of
  how 32-bit applications can run under a 64-bit kernel.
 </para>
 <para>
  <phrase os="sles">&productname; for the 64-bit platforms &ppc;,
  &zseries; and x86_64</phrase><phrase os="sled;osuse">&productname; for the
  64-bit platforms amd64 and &intel64;</phrase> is designed so that
  existing 32-bit applications run in the 64-bit environment
  <quote>out-of-the-box.</quote> <phrase os="sles">The corresponding 32-bit
  platforms are ppc for ppc64, and x86 for x86_64.</phrase> This support
  means that you can continue to use your preferred 32-bit applications
  without waiting for a corresponding 64-bit port to become
  available.<phrase os="sles"> The current ppc64 system runs most
  applications in 32-bit mode, but you can run 64-bit applications.</phrase>
 </para>
 <sect1 xml:id="sec.64bit.runt">
  <title>Runtime Support</title><indexterm>

  <primary>64-bit Linux</primary>

  <secondary>runtime support</secondary></indexterm>

  <important>
   <title>Conflicts Between Application Versions</title>
   <para>
    If an application is available both for 32-bit and 64-bit environments,
    parallel installation of both versions is bound to lead to problems. In
    such cases, decide on one of the two versions and install and use this.
   </para>
   <para>
    An exception to this rule is PAM (pluggable authentication modules).
    &productname; uses PAM in the authentication process as a layer that
    mediates between user and application. On a 64-bit operating system that
    also runs 32-bit applications it is necessary to always install both
    versions of a PAM module.
   </para>
  </important>

  <para>
   To be executed correctly, every application requires a range of
   libraries. Unfortunately, the names for the 32-bit and 64-bit versions of
   these libraries are identical. They must be differentiated from each
   other in another way.
  </para>

  <para>
   To retain compatibility with the 32-bit version, the libraries are stored
   at the same place in the system as in the 32-bit environment. The 32-bit
   version of <filename>libc.so.6</filename> is located under
   <filename>/lib/libc.so.6</filename> in both the 32-bit and 64-bit
   environments.
  </para>

  <para>
   All 64-bit libraries and object files are located in directories called
   <filename>lib64</filename>. The 64-bit object files that you would
   normally expect to find under <filename>/lib</filename> and
   <filename>/usr/lib</filename> are now found under
   <filename>/lib64</filename> and <filename>/usr/lib64</filename>. This
   means that there is space for the 32-bit libraries under
   <filename>/lib</filename> and <filename>/usr/lib</filename>, so the file
   name for both versions can remain unchanged.
  </para>

  <para>
   Subdirectories of 32-bit <filename>/lib</filename> directories which
   contain data content that does not depend on the word size are not moved.
   This scheme conforms to LSB (Linux Standards Base) and FHS (File System
   Hierarchy Standard).
  </para>
 </sect1>
 <sect1 xml:id="sec.64bit.devel">
  <title>Software Development</title><indexterm>

  <primary>64-bit Linux</primary>

  <secondary>software development</secondary></indexterm>

  <para os="sles;osuse">
   All 64-bit architectures support the development of 64-bit objects. The
   level of support for 32-bit compiling depends on the architecture. These
   are the various implementation options for the tool chain from GCC (GNU
   Compiler Collection) and binutils, which include the assembler
   <command>as</command> and the linker <command>ld</command>:
  </para>

  <variablelist os="sles;osuse">
   <varlistentry>
    <term>Biarch Compiler</term>
    <listitem>
     <para>
      Both 32-bit and 64-bit objects can be generated with a biarch
      development tool chain. A biarch development tool chain allows
      generation of 32-bit and 64-bit objects. The compilation of 64-bit
      objects is the default on almost all platforms. 32-bit objects can be
      generated if special flags are used. This special flag is
      <option>-m32</option> for GCC. The flags for the binutils are
      architecture-dependent, but GCC transfers the correct flags to linkers
      and assemblers. A biarch development tool chain currently exists for
      amd64 (supports development for x86 and amd64 instructions), for
      &zseries; and for ppc64. 32-bit objects are normally created on the
      ppc64 platform. The <literal>-m64</literal> flag must be used to
      generate 64-bit objects.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>No Support</term>
    <listitem>
     <para>
      &productname; does not support the direct development of 32-bit
      software on all platforms. To develop applications for x86 under ia64,
      use the corresponding 32-bit version of &productname;.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para os="sled">
   A biarch development tool chain allows generation of 32-bit and 64-bit
   objects. The default is to compile 64-bit objects. It is possible to
   generate 32-bit objects by using special flags. For GCC, this special
   flag is <option>-m32</option>.
  </para>

  <para>
   All header files must be written in an architecture-independent form. The
   installed 32-bit and 64-bit libraries must have an API (application
   programming interface) that matches the installed header files. The
   normal &productname; environment is designed according to this
   principle. In the case of manually updated libraries, resolve these
   issues yourself.
  </para>
 </sect1>
 <sect1 xml:id="sec.64bit.biarch">
  <title>Software Compilation on Biarch Platforms</title>

  <para>
   To develop binaries for the other architecture on a biarch architecture,
   the respective libraries for the second architecture must additionally be
   installed. These packages are called
   <systemitem class="resource">rpmname-32bit</systemitem><phrase os="sles">
   or <systemitem class="resource">rpmname-x86</systemitem> (for ia64) if
   the second architecture is a 32-bit architecture or
   <systemitem class="resource">rpmname-64bit</systemitem> if the second
   architecture is a 64-bit architecture</phrase>. You also need the
   respective headers and libraries from the
   <systemitem class="resource">rpmname-devel</systemitem> packages and the
   development libraries for the second architecture from
   <systemitem class="resource">rpmname-devel-32bit</systemitem><phrase os="sles">
   or
   <systemitem class="resource">rpmname-devel-64bit</systemitem></phrase>.
  </para>

  <para os="sles;osuse">
   For example, to compile a program that uses <command>libaio</command> on a
   system whose second architecture is a 32-bit architecture (x86_64<phrase
   os="sles"> or &zseries;</phrase>), you need the following RPMs:
  </para>

  <variablelist os="sles;osuse">
   <varlistentry>
    <term>libaio-32bit</term>
    <listitem>
     <para>
      32-bit runtime package
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio-devel-32bit</term>
    <listitem>
     <para>
      Headers and libraries for 32-bit development
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio</term>
    <listitem>
     <para>
      64-bit runtime package
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>libaio-devel</term>
    <listitem>
     <para>
      64-bit development headers and libraries
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Most open source programs use an <command>autoconf</command>-based
   program configuration. To use <command>autoconf</command> for configuring
   a program for the second architecture, overwrite the normal compiler and
   linker settings of <command>autoconf</command> by running the
   <command>configure</command> script with additional environment
   variables.
  </para>

  <para>
   The following example refers to an x86_64 system with &x86; as the
   second architecture. <phrase os="sles">Examples for ppc64 with ppc as the
   second architecture would be similar. This example does not apply to ia64
   where you cannot build 32-bit packages.</phrase>
  </para>

  <procedure>
   <step>
    <para>
     Use the 32-bit compiler:
    </para>
<screen>CC="gcc -m32"</screen>
   </step>
   <step>
    <para>
     Instruct the linker to process 32-bit objects (always use
     <command>gcc</command> as the linker front-end):
    </para>
<screen>LD="gcc -m32"</screen>
   </step>
   <step>
    <para>
     Set the assembler to generate 32-bit objects:
    </para>
<screen>AS="gcc -c -m32"</screen>
   </step>
   <step>
    <para>
     Specify linker flags, such as the location of 32-bit libraries, for
     example:
    </para>
<screen>LDFLAGS="-L/usr/lib"</screen>
   </step>
   <step>
    <para>
     Specify the location for the 32-bit object code libraries:
    </para>
<screen>--libdir=/usr/lib</screen>
   </step>
   <step>
    <para>
     Specify the location for the 32-bit X libraries:
    </para>
<screen>--x-libraries=/usr/lib</screen>
   </step>
  </procedure>

  <para>
   Not all of these variables are needed for every program. Adapt them to
   the respective program.
  </para>

  <para>
   An example <command>configure</command> call to compile a native 32-bit
   application on x86_64<phrase os="sles">, ppc64 or &zseries;</phrase>
   could appear as follows:
  </para>

<screen>CC="gcc -m32"
LDFLAGS="-L/usr/lib;"
./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib
make
make install</screen>
 </sect1>
 <sect1 xml:id="sec.64bit.kernel">
  <title>Kernel Specifications</title><indexterm>

  <primary>64-bit Linux</primary>

  <secondary>kernel specifications</secondary></indexterm>

  <para>
   The 64-bit kernels for x86_64<phrase os="sles">, ppc64 and
   &zseries;</phrase> offer both a 64-bit and a 32-bit kernel ABI
   (application binary interface). The latter is identical with the ABI for
   the corresponding 32-bit kernel. This means that the 32-bit application
   can communicate with the 64-bit kernel in the same way as with the 32-bit
   kernel.
  </para>

  <para>
   The 32-bit emulation of system calls for a 64-bit kernel does not support
   all the APIs used by system programs. This depends on the platform. For
   this reason, few applications, like <command>lspci</command>, must be
   compiled<phrase os="sles"> on non-ppc64 platforms as 64-bit programs to
   function properly. On IBM &zseries;, not all ioctls are available in the
   32-bit kernel ABI</phrase>.
  </para>

  <para>
   A 64-bit kernel can only load 64-bit kernel modules that have been
   specially compiled for this kernel. It is not possible to use 32-bit
   kernel modules.
  </para>

  <tip>
   <title>Kernel-loadable Modules</title>
   <para>
    Some applications require separate kernel-loadable modules. If you
    intend to use such a 32-bit application in a 64-bit system environment,
    contact the provider of this application and &suse; to make sure that
    the 64-bit version of the kernel-loadable module and the 32-bit compiled
    version of the kernel API are available for this module.
   </para>
  </tip>
 </sect1>
</chapter>
