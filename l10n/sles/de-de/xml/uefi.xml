<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="uefi.xml" version="5.0" xml:id="cha-uefi">

 <title>UEFI (Unified Extensible Firmware Interface)</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  Die UEFI (Unified Extensible Firmware Interface) bildet die Schnittstelle zwischen der Firmware, die sich auf der Systemhardware befindet, allen Hardware-Komponenten des Systems und dem Betriebssystem.
 </para>
 <para>
  UEFI wird auf PC-Systemen immer stärker verbreitet und ersetzt allmählich das bisherige PC-BIOS. UEFI bietet beispielsweise echte Unterstützung für 64-Bit-Systeme und ermöglicht das sichere Booten (<quote>Secure Boot</quote>, Firmware-Version 2.3.1c oder höher erforderlich), eine der zentralen Funktionen dieser Schnittstelle. Nicht zuletzt stellt UEFI auf allen x86-Plattformen eine Standard-Firmware bereit.
 </para>
 <para>
  UEFI eröffnet außerdem die folgenden Vorteile:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    Booten von großen Festplatten (mehr als 2 TiB) mithilfe einer GUID-Partitionstabelle (GPT).
   </para>
  </listitem>
  <listitem>
   <para>
    CPU-unabhängige Architektur und Treiber.
   </para>
  </listitem>
  <listitem>
   <para>
    Flexible Vor-OS-Umgebung mit Netzwerkfunktionen.
   </para>
  </listitem>
  <listitem>
   <para>
    CSM (Compatibility Support Module) zur Unterstützung des Bootens älterer Betriebssysteme über eine PC-BIOS-ähnliche Emulation.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Weitere Informationen finden Sie im <link xlink:href="http://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"/>. Die nachfolgenden Abschnitte sollen keinen allgemeinen Überblick über UEFI liefern, sondern sie weisen lediglich darauf hin, wie bestimmte Funktionen in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> implementiert sind.
 </para>
 <sect1 xml:id="sec-uefi-secboot">
  <title>Secure Boot</title>



  <para>
   Bei UEFI bedeutet die Absicherung des Bootstrapping-Prozesses, dass eine Vertrauenskette aufgebaut wird. Die <quote>Plattform</quote> ist die Grundlage dieser Vertrauenskette; im <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>-Kontext bilden die Hauptplatine und die On-Board-Firmware diese <quote>Plattform</quote>. Anders gesagt ist dies der Hardware-Hersteller, und die Vertrauenskette erstreckt sich von diesem Hardware-Hersteller zu den Komponentenherstellern, den Betriebssystemherstellern usw
  </para>

  <para>
   Das Vertrauen wird durch die Verschlüsselung mit öffentlichen Schlüsseln ausgedrückt. Der Hardware-Hersteller integriert einen sogenannten Plattformschlüssel (Platform Key, PK) in die Firmware, der die Grundlage für das Vertrauen legt. Das Vertrauensverhältnis zu Betriebssystemherstellern und anderen Dritten wird dadurch dokumentiert, dass ihre Schlüssel mit dem PK signiert werden.
  </para>

  <para>
   Zum Gewährleisten der Sicherheit wird schließlich verlangt, dass die Firmware erst dann einen Code ausführt, wenn dieser Code mit einem dieser <quote>verbürgten</quote> Schlüssel signiert ist – ein OS-Bootloader, ein Treiber im Flash-Speicher einer PCI-Express-Karte oder auf der Festplatte oder auch eine Aktualisierung der Firmware selbst.
  </para>

  <para>
   Um Secure Boot nutzen zu können, muss der OS-Loader also mit einem Schlüssel signiert sein, der für die Firmware als verbürgt gilt, und der OS-Loader muss überprüfen, ob der zu ladende Kernel ebenfalls verbürgt ist.
  </para>

  <para>

   In die UEFI-Schlüsseldatenbank können KEKs (Key Exchange Keys) aufgenommen werden. Auf diese Weise können Sie auch andere Zertifikate nutzen, sofern diese mit dem privaten Teil des PK signiert sind.

  </para>

  <sect2 xml:id="sec-uefi-secboot-sle">
   <title>Implementierung auf <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase></title>
   <para>
    Standardmäßig wird der KEK (Key Exchange Key) von Microsoft installiert.
   </para>
   <note>
    <title>GUID-Partitionstabelle (GPT) erforderlich</title>
    <para>
     Die Secure Boot-Funktion ist in UEFI/x86_64-Installationen standardmäßig aktiviert. Die Option <guimenu>Secure Boot-Unterstützung aktivieren</guimenu> finden Sie auf der Registerkarte <guimenu>Bootcode-Optionen</guimenu> im Dialogfeld <guimenu>Bootloader-Einstellungen</guimenu>. Diese Option unterstützt das Booten, wenn Secure Boot in der Firmware aktiviert ist, wobei Sie auch dann booten können, wenn diese Funktion deaktiviert ist.
    </para>
    <figure>
     <title>Secure Boot-Unterstützung</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_bootloader_boot_code_efi.png" width="70%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="yast2_bootloader_boot_code_efi.png" width="70%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <para>
     Für die Secure Boot-Funktion ist eine GUID-Partitionstabelle (GPT) erforderlich, die die bisherige Partitionierung per MBR (Master Boot Record) ersetzt. Wenn YaST während der Installation den EFI-Modus feststellt, wird versucht, eine GPT-Partition zu erstellen. UEFI erwartet die EFI-Programme auf einer FAT-formatierten ESP (EFI-Systempartition).
    </para>
   </note>

   <para>
    Zur Unterstützung von UEFI Secure Boot ist ein Bootloader mit einer digitalen Signatur erforderlich, den die Firmware als verbürgten Schlüssel erkennt. Die Firmware vertraut diesem Schlüssel a priori und ohne manuelle Intervention.
   </para>
   <para>
    Hierzu gibt es zwei Möglichkeiten. Die erste Möglichkeit ist die Zusammenarbeit mit Hardware-Herstellern, sodass diese einen SUSE-Schlüssel zulassen, mit dem dann der Bootloader signiert wird. Die zweite Möglichkeit besteht darin, das Windows Logo Certification-Programm von Microsoft zu durchlaufen, damit der Bootloader zertifiziert wird und Microsoft den SUSE-Signierschlüssel anerkennt (also mit dem KEK von Microsoft signiert). Bislang wurde der Loader für SUSE vom UEFI Signing Service (in diesem Fall von Microsoft) signiert.
   </para>

   <figure xml:id="fig-uefi-secure-boot-mok2">
    <title>UEFI: Secure Boot-Vorgang</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="uefi-secure-boot-mok2.png" width="50%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="uefi-secure-boot-mok2.png" width="80%"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    Auf der Implementierungsschicht nutzt SUSE den <systemitem>shim</systemitem>-Loader, der standardmäßig installiert wird. Durch diese elegante Lösung werden rechtliche Probleme vermieden und der Zertifizierungs- und Signierungsschritt wird erheblich vereinfacht. Der <systemitem>shim</systemitem>-Loader lädt einen Bootloader wie GRUB 2 und überprüft diesen Loader; der Bootloader wiederum lädt ausschließlich Kernels, die mit einem SUSE-Schlüssel signiert sind. <phrase os="sles;sled">SUSE bietet diese Funktion ab SLE11 SP3 in Neuinstallationen, in denen UEFI Secure Boot aktiviert ist.</phrase>
   </para>
   <para>
    Es gibt zwei Typen von verbürgten Benutzern.
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Erstens: Benutzer, die die Schlüssel besitzen. Der PK (Platform Key) ermöglicht nahezu alle Aktionen. Der KEK (Key Exchange Key) ermöglicht dieselben Aktionen wie ein PK, mit der Ausnahme, dass der PK hiermit nicht geändert werden kann.
     </para>
    </listitem>
    <listitem>
     <para>
      Zweitens: Benutzer mit physischem Zugang zum Computer. Ein Benutzer mit physischem Zugang kann den Computer neu booten und UEFI konfigurieren.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    UEFI bietet zwei Arten von Variablen für die Anforderungen dieser Benutzer:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Der erste Variablentyp sind die sogenannten <quote>authentifizierten Variablen</quote>, die sowohl aus dem Bootprozess (der sogenannten Boot-Dienstumgebung) und dem laufenden Betriebssystem heraus aktualisiert werden können. Dies ist nur dann möglich, wenn der neue Wert der Variable mit demselben Schlüssel signiert ist wie der bisherige Wert der Variable. Zudem können diese Variablen nur an einen Wert mit einer höheren Seriennummer angehängt oder in einen Wert mit einer höheren Seriennummer geändert werden.
     </para>
    </listitem>
    <listitem>
     <para>
      Die zweiten Variablen sind die sogenannten <quote>Boot Services Only Variables</quote> (Variablen für Boot-Services). Diese Variablen stehen jedem Code zur Verfügung, der während des Bootvorgangs ausgeführt wird. Nach Abschluss des Bootvorgangs und vor dem Starten des Betriebssystems muss der Bootloader den Aufruf <literal>ExitBootServices</literal> auslösen. Anschließend sind diese Variablen nicht mehr zugänglich, und das Betriebssystem kann nicht mehr darauf zugreifen.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Die verschiedenen UEFI-Schlüssellisten sind vom ersten Typ, da es damit möglich ist, die Schlüssel, Treiber und Firmware-Fingerabdrücke online zu aktualisieren, hinzuzufügen und in Schwarze Listen einzutragen. Der zweite Variablentyp, also die <quote>Boot Services Only Variables</quote>, unterstützt die Implementierung von Secure Boot auf sichere, Open Source-freundliche und damit GPLv3-kompatible Weise.
   </para>
   <para>
    SUSE wird mit <systemitem>shim</systemitem> gestartet, einem kleinen, einfachen EFI-Bootloader, der von SUSE und Microsoft signiert ist.
   </para>
   <para>
    Damit kann <systemitem>shim</systemitem> geladen und ausgeführt werden.
   </para>
   <para>
    Anschließend überprüft <systemitem>shim</systemitem>, ob der zu ladende Bootloader verbürgt ist. In der Standardsituation verwendet <systemitem>shim</systemitem> ein unabhängiges SUSE-Zertifikat, das in diesen Loader integriert ist. Darüber hinaus ermöglicht <systemitem>shim</systemitem> das <quote>Registrieren</quote> weiterer Schlüssel, die Vorrag vor dem SUSE-Standardschlüssel erhalten. Im Folgenden werden diese Schlüssel als MOKs (<quote>Machine Owner Keys</quote>) bezeichnet.
   </para>
   <para>
    Danach überprüft und bootet der Bootloader den Kernel, und der Kernel überprüft und bootet seinerseits die Module.
   </para>
  </sect2>

  <sect2 xml:id="sec-uefi-secboot-mok">
   <title>MOK (Machine Owner Key)</title>
   
   <para>
   Wenn bestimmte Kernel, Treiber oder andere Komponenten im Startprozess ersetzt werden sollen, müssen Sie Machine Owner Keys (MOKs) verwenden. Das Werkzeug <systemitem>mokutil</systemitem> unterstützt Sie bei der Verwaltung der MOKs.
   </para>
   <para>
   Sie können mit <systemitem>mokutil</systemitem> eine MOK-Registrierungsanforderung erstellen. Die Anforderung wird in der UEFI-Laufzeit(RT)-Variablen <systemitem>MokNew</systemitem> gespeichert. Beim nächsten Starten erkennt der <systemitem>shim</systemitem>-Bootloader die Variable <systemitem>MokNew</systemitem> und lädt den <systemitem>MokManager</systemitem>, in dem Sie mehrere Optionen erhalten. Mit den Optionen <guimenu>Schlüssel von Festplatte registrieren</guimenu> und <guimenu>Hash von Festplatte registrieren</guimenu> nehmen Sie den Schlüssel in die MokList auf. Mit der Option <guimenu>MOK registrieren</guimenu> kopieren Sie einen Schlüssel aus der <systemitem>MokNew</systemitem>-Variablen.
   </para>
   <para>
   Im Normalfall wird ein Schlüssel von der Festplatte registriert, wenn Shim <systemitem>grub2</systemitem> nicht laden kann und ein Fallback auf das Laden des MokManagers durchführt. Da <systemitem>MokNew</systemitem> noch nicht vorhanden ist, haben Sie die Möglichkeit, den Schlüssel in der UEFI-Partition zu suchen. 
   </para>
  </sect2>

  <sect2 xml:id="sec-uefi-secboot-custom">
   <title>Booten eines benutzerdefinierten Kernels</title>
   <para>
    Die folgenden Ausführungen beruhen auf <link xlink:href="https://en.opensuse.org/openSUSE:UEFI#Booting_a_custom_kernel"/>.
   </para>
   <para>
    Secure Boot verhindert nicht die Nutzung eines selbst kompilierten Kernels. Sie müssen den Kernel mit Ihrem eigenen Zertifikat signieren und dieses Zertifikat für die Firmware oder den MOK bekanntgeben.
   </para>
   <procedure>
    <step>
     <para>
      Erstellen Sie einen benutzerdefinierten X.509-Schlüssel und ein entsprechendes Zertifikat für die Signierung:
     </para>
<screen>openssl req -new -x509 -newkey rsa:2048 -keyout key.asc \
  -out cert.pem -nodes -days 666 -subj "/CN=$USER/"</screen>
     <para>

      Weitere Informationen zum Erstellen von Zertifikaten finden Sie unter <link xlink:href="https://en.opensuse.org/openSUSE:UEFI_Image_File_Sign_Tools#Create_Your_Own_Certificate"/>.
     </para>
    </step>
    <step>
     <para>
      Verpacken Sie den Schlüssel und das Zertifikat als PKCS#12-Struktur:
     </para>
<screen><prompt>&gt; </prompt>openssl pkcs12 -export -inkey key.asc -in cert.pem \
  -name kernel_cert -out cert.p12</screen>
    </step>
    <step>
     <para>
      Generieren Sie eine NSS-Datenbank für <command>pesign</command>:
     </para>
<screen><prompt>&gt; </prompt>certutil -d . -N</screen>
    </step>
    <step>
     <para>
      Importieren Sie den Schlüssel und das Zertifikat aus PKCS#12 in die NSS-Datenbank:
     </para>
<screen><prompt>&gt; </prompt>pk12util -d . -i cert.p12</screen>
    </step>
    <step>
     <para>
      <quote>Authentifizieren</quote> Sie den Kernel mit der neuen Signatur mithilfe von <command>pesign</command>:
     </para>
<screen><prompt>&gt; </prompt>pesign -n . -c kernel_cert -i arch/x86/boot/bzImage \
  -o vmlinuz.signed -s</screen>
    </step>
    <step>
     <para>
      Listen Sie die Signaturen im Kernel-Image auf:
     </para>
<screen><prompt>&gt; </prompt>pesign -n . -S -i vmlinuz.signed</screen>
     <para>
      Zu diesem Zeitpunkt können Sie den Kernel wie gewohnt in <filename>/boot</filename> installieren. Der Kernel besitzt nun eine benutzerdefinierte Signatur, sodass das Zertifikat zum Signieren in die UEFI-Firmware oder in den MOK importiert werden muss.
     </para>
    </step>
    <step>
     <para>
      Konvertieren Sie das Zertifikat zum Importieren in die Firmware oder den MOK in das DER-Format: 
     </para>
<screen><prompt>&gt; </prompt>openssl x509 -in cert.pem -outform der -out cert.der</screen>
    </step>
    <step>
     <para>
      Kopieren Sie das Zertifikat aus Gründen des einfacheren Zugriffs in die ESP:
     </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp cert.der /boot/efi/</screen>
    </step>
    <step>
     <para>
      Mit <command>mokutil</command> wird die MOK-Liste automatisch gestartet.
     </para>
     <stepalternatives>
      <step>
       <substeps>
        <step>
         <para>
          Importieren Sie das Zertifikat in MOK:
         </para>
<screen><prompt>&gt; </prompt>mokutil --root-pw --import cert.der</screen>
         <para>
          Mit der Option <option>--root-pw</option> kann der <systemitem class="username">root</systemitem>-Benutzer direkt verwendet werden.
         </para>
        </step>
        <step>
         <para>
          Prüfen Sie die Liste der Zertifikate, die für die Registrierung vorbereitet werden:
         </para>
<screen><prompt>&gt; </prompt>mokutil --list-new</screen>
        </step>
        <step>
         <para>
          Booten Sie das System neu; mit <systemitem>shim</systemitem> sollte MokManager gestartet werden. Um den Import des Zertifikats in die MOK-Liste zu bestätigen, müssen Sie das <systemitem class="username">root</systemitem>-Passwort eingeben.
         </para>
        </step>
        <step>
         <para>
          Prüfen Sie, ob der soeben importierte Schlüssel registriert wurde:
         </para>
<screen><prompt>&gt; </prompt>mokutil --list-enrolled</screen>
        </step>
       </substeps>
      </step>
      <step>
       <substeps>
        <step>
         <para>
          Zum manuellen Starten des MOK gehen Sie alternativ wie folgt vor:
         </para>
         <para>
          Booten Sie den Computer neu
         </para>
        </step>
        <step>
         <para>
          Drücken Sie im GRUB 2-Menü die Taste „<literal>c</literal>“.
         </para>
        </step>
        <step>
         <para>
          Typ:
         </para>
<screen>chainloader $efibootdir/MokManager.efi
boot</screen>
        </step>
        <step>
         <para>
          Wählen Sie <guimenu>Enroll key from disk (Schlüssel von Festplatte registrieren)</guimenu>.
         </para>
        </step>
        <step>
         <para>
          Navigieren Sie zur Datei <filename>cert.der</filename>, und drücken Sie <keycap function="enter"/>.
         </para>
        </step>
        <step>
         <para>
          Registrieren Sie den Schlüssel gemäß den Anweisungen. In der Regel drücken Sie hierzu „<literal>0</literal>“ und dann zum Bestätigen „<literal>j</literal>“.
         </para>
         <para>
          Alternativ können Sie einen neuen Schlüssel über das Firmware-Menü in die Signaturdatenbank aufnehmen.
         </para>
        </step>
       </substeps>
      </step>
     </stepalternatives>
    </step>
   </procedure>


  </sect2>

  <sect2 xml:id="sec-uefi-secboot-non-inbox">
   <title>Verwenden von Nicht-Inbox-Treibern</title>
   <para>
    Das Hinzufügen von Nicht-Inbox-Treibern (also Treibern, die nicht in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> inbegriffen sind) wird bei der Installation mit aktiviertem Secure Boot nicht unterstützt. Der Signierschlüssel für SolidDriver/PLDP gilt standardmäßig nicht als vertrauenswürdig.
   </para>
   <para>
    Es ist mit zwei Methoden möglich, Treiber von Drittanbietern bei der Installation mit aktiviertem Secure Boot zu nutzen. In beiden Fällen gilt:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Fügen Sie die erforderlichen Schlüssel vor der Installation mithilfe von Firmware-/Systemverwaltungswerkzeugen in die Firmware-Datenbank ein. Diese Option ist von der jeweils verwendeten Hardware abhängig. Weitere Informationen erhalten Sie bei Ihrem Hardware-Händler.
     </para>
    </listitem>
    <listitem>
     <para>
      Verwenden Sie ein bootfähiges Treiber-ISO-Image von <link xlink:href="https://drivers.suse.com/"/> oder von Ihrem Hardware-Händler, mit dem die erforderlichen Schlüssel beim ersten Starten in die MOK-Liste eingetragen werden.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    So tragen Sie die Treiberschlüssel mit dem bootfähigen Treiber-ISO-Image in die MOK-Liste ein:
   </para>
   <procedure>
    <step>
     <para>
      Brennen Sie das obige ISO-Image auf eine leere CD/DVD.
     </para>
    </step>
    <step>
     <para>
      Starten Sie die Installation von der neuen CD/DVD und halten Sie dabei die standardmäßigen Installationsmedien bzw. die URL zu einem Netzwerkinstallationsserver bereit.
     </para>
     <para>
      Wenn Sie eine Netzwerkinstallation vornehmen, geben Sie die URL der Netzwerkinstallationsquelle mit der Option <option>install=</option> in die Bootbefehlszeile ein.
     </para>
     <para>
      Bei einer Installation von optischen Speichermedien bootet das Installationsprogramm zunächst vom Treiber-Kit; anschließend werden Sie aufgefordert, den ersten Installationsdatenträger für das Produkt einzulegen.
     </para>
    </step>
    <step>
     <para>
      Bei der Installation wird ein initrd mit aktualisierten Treibern herangezogen.
     </para>
    </step>
   </procedure>
   <para>
    Weitere Informationen finden Sie im <link xlink:href="https://drivers.suse.com/doc/Usage/Secure_Boot_Certificate.html"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-uefi-secboot-feats">

   <title>Funktionen und Einschränkungen</title>
   <para>
    Beim Booten im Secure Boot-Modus stehen die folgenden Funktionen zur Verfügung:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Installation in den Speicherort des UEFI-Standard-Bootloaders (Mechanismus zum Beibehalten oder Wiederherstellen des EFI-Booteintrags).
     </para>
    </listitem>
    <listitem>
     <para>
      Neubooten über UEFI.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Xen-Hypervisor wird mit UEFI gebootet, wenn kein Legacy-BIOS für das Fallback vorhanden ist.
     </para>
    </listitem>
    <listitem>
     <para>
      Unterstützung für das PXE-Booten mit UEFI IPv6.
     </para>
    </listitem>
    <listitem>
     <para>
      Unterstützung für den UEFI-Videomodus; der Kernel kann den Videomodus aus UEFI abrufen und den KMS-Modus mit denselben Parametern konfigurieren.
     </para>
    </listitem>
    <listitem>
     <para>
      Unterstützung für das UEFI-Booten von USB-Geräten.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Beim Booten im Secure Boot-Modus gelten die folgenden Einschränkungen:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Um zu gewährleisten, dass Secure Boot nicht einfach umgangen werden kann, sind einige Kernelfunktionen beim Ausführen unter Secure Boot deaktiviert.
     </para>
    </listitem>

    <listitem>
     <para>
      Der Bootloader, der Kernel und die Kernelmodule müssen signiert sein.
     </para>
    </listitem>
    <listitem>
     <para>
      Kexec und Kdump sind deaktiviert.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Ruhezustand (Suspend on Disk) ist deaktiviert.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Zugriff auf <filename>/dev/kmem</filename> und <filename>/dev/mem</filename> ist nicht möglich, auch nicht als root-Benutzer.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Zugriff auf den E/A-Anschluss ist nicht möglich, auch nicht als root-Benutzer. Alle X11-Grafiktreiber müssen einen Kerneltreiber verwenden.
     </para>
    </listitem>
    <listitem>
     <para>
      Der PCI-BAR-Zugriff über sysfs ist nicht möglich.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>custom_method</literal> in ACPI ist nicht verfügbar.
     </para>
    </listitem>
    <listitem>
     <para>
      debugfs für das Modul asus-wmi ist nicht verfügbar.
     </para>
    </listitem>
    <listitem>
     <para>
      Der Parameter <literal>acpi_rsdp</literal> hat keine Auswirkungen auf den Kernel.
     </para>
    </listitem>
   </itemizedlist>

  </sect2>
 </sect1>
 <sect1 xml:id="sec-uefi-moreinfo">
  <title>Weitere Informationen</title>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <link xlink:href="https://www.uefi.org"/> – UEFI-Homepage mit den aktuellen UEFI-Spezifikationen.
    </para>
   </listitem>
   <listitem>
    <para>
     Blogeinträge von Olaf Kirch und Vojtěch Pavlík (das obige Kapitel ist stark auf diese Einträge gestützt):
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <link xlink:href="https://www.suse.com/c/uefi-secure-boot-plan/"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <link xlink:href="https://www.suse.com/c/uefi-secure-boot-overview/"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <link xlink:href="https://www.suse.com/c/uefi-secure-boot-details/"/>
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://en.opensuse.org/openSUSE:UEFI"/> – UEFI mit openSUSE.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>

</chapter>
