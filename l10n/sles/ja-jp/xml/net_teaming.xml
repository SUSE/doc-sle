<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="net_teaming.xml" version="5.1" xml:id="sec-network-iface-teaming"> <title>ネットワークチーミング用チームデバイスの設定</title>

 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <remark>toms 2016-06-16: FATE#320468</remark>

 <para>
  <quote>リンク集約</quote>という用語は、論理層を提供するためにネットワーク接続を結合(または集約)することを表す一般用語です。<quote>チャネルチーミング</quote>、<quote>Ethernetボンディング</quote>、<quote>ポートトランケーティング</quote>などの用語が使用されることもありますが、これらは同義語であり、同じ概念を表しています。
 </para>

 <para>
  これは、<quote>ボンディング</quote>として広く知られている概念であり、当初はLinuxカーネルに統合されていました(当初の実装については、<xref linkend="sec-network-iface-bonding"/>を参照)。<emphasis/>「ネットワークチーミング」という用語は、この概念の新しい実装を表すために使用されます。
 </para>

 <para>
  ボンディングとネットワークチーミングの主な違いは、チーミングはteamdインスタンスのインタフェースを提供する一連の小さなカーネルモジュールを供給するという点です。それ以外はすべてユーザ空間で処理されます。すべての機能がカーネル内に排他的に組み込まれている当初のボンディングの実装とは、この点が異なります。比較については、<xref linkend="tab-team-comparison"/>を参照してください。
 </para>

 <table xml:id="tab-team-comparison">
  <title>ボンディングとチームの機能比較</title>
  <tgroup cols="3">
   <colspec colname="c1"/>
   <colspec colname="c2"/>
   <colspec colname="c3"/>
   <thead>
    <row>
     <entry>機能</entry>
     <entry>ボンディング</entry>
     <entry>チーム</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>ブロードキャスト、ラウンドロビンTXポリシー</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>アクティブバックアップTXポリシー</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>LACP (802.3ad)のサポート</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>ハッシュベースのTXポリシー</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>ユーザがハッシュ関数を設定可能</entry>
     <entry>no</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>TX負荷分散サポート(TLB)</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>LACPのTX負荷分散サポート</entry>
     <entry>no</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>Ethtoolリンク監視</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>ARPリンク監視</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>NS/NA (IPV6)リンク監視</entry>
     <entry>no</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>TX/RXパスに対するRCUロック</entry>
     <entry>no</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>ポートの優先順位とスティッキネス</entry>
     <entry>no</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>ポートごとに別個のリンク監視設定</entry>
     <entry>no</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>複数のリンク監視設定</entry>
     <entry>limited</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>VLANのサポート</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry>複数デバイスのスタック</entry>
     <entry>yes</entry>
     <entry>yes</entry>
    </row>
    <row>
     <entry namest="c1" nameend="c3">ソース: <link xlink:href="http://libteam.org/files/teamdev.pp.pdf"/></entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>
  ボンディングとネットワークチーミングの両方の実装は、並行して使用できます。ネットワークチーミングは、既存のボンディング実装の代替手段です。ボンディングがネットワークチーミングに置き換わるわけではありません。
 </para>

 <para>
  ネットワークチーミングは、さまざまな事例で使用できます。次の技術に関連する最も重要な2つの事例について、後で説明します。
 </para>

 <itemizedlist>
  <listitem>
   <para>
    複数のネットワークデバイス間での負荷分散
   </para>
  </listitem>
  <listitem>
   <para>
    ネットワークデバイスの1つに障害が発生した場合の、別のデバイスへのフェールオーバー
   </para>
  </listitem>
 </itemizedlist>

 <para>
  <remark>toms 2016-06-21: FATE#320947 for Teaming in/with YaST</remark>現在は、チーミングデバイスの作成をサポートするYaSTモジュールは存在しません。ネットワークチーミングは手動で設定する必要があります。一般的な手順を次に示します。この手順は、あらゆるネットワークチーミング設定に適用できます。
 </para>

 <procedure xml:id="pro-team-general">
  <title>一般的な手順</title>
  <step>
   <para>
    必要なパッケージがすべてインストールされていることを確認します。パッケージ<package>libteam-tools</package>、<package>libteamdctl0</package>、および<package>python-libteam</package>をインストールします。
   </para>
  </step>
  <step>
   <para>
    <filename>/etc/sysconfig/network/</filename>に設定ファイルを作成します。通常は、<filename>ifcfg-team0</filename>という名前を付けます。複数のネットワークチーミングデバイスが必要な場合は、昇順に番号を付けます。
   </para>
   <para>
    この設定ファイルで使用するさまざまな変数については、マニュアルページ(<command>man ifcfg</command>および<command>man ifcfg-team</command>)を参照してください。設定例は、システム内にあるファイル<filename>/etc/sysconfig/network/ifcfg.template</filename>で参照できます。
   </para>
  </step>
  <step>
   <para>
    チーミングデバイスに使用するインタフェースの設定ファイル(通常は<filename>ifcfg-eth0</filename>および<filename>ifcfg-eth1</filename>)を削除します。
   </para>
   <para>
    どちらのファイルも、バックアップを作成してから削除することを推奨します。Wickedが、チーミングに必要なパラメータを含む設定ファイルを再作成します。
   </para>
  </step>
  <step>
   <para>
    必要に応じて、Wickedの設定ファイルにすべてのパラメータが含まれているかどうかを確認します。
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> <command>wicked show-config</command></screen>
  </step>
  <step>
   <para>
    ネットワークチーミングデバイス<systemitem class="service">team0</systemitem>を起動します。
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> <command>wicked ifup all team0</command></screen>
   <para>
    詳しいデバッグ情報が必要な場合は、<command>all</command>サブコマンドの後にオプション<option>--debug all</option>を指定します。
   </para>
  </step>
  <step>
   <para>
    ネットワークチーミングデバイスのステータスを確認します。それには、次のコマンドを実行します。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Wickedからteamdインスタンスの状態を取得します。
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> <command>wicked ifstatus --verbose team0</command></screen>
    </listitem>
    <listitem>
     <para>
      インスタンス全体の状態を取得します。
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> <command>teamdctl team0 state</command></screen>
    </listitem>
    <listitem>
     <para>
      teamdインスタンスのsystemd状態を取得します。
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> <command>systemctl status teamd@team0</command></screen>
    </listitem>
   </itemizedlist>
   <para>
    これらは必要に応じて少しずつ異なる情報を表示します。
   </para>
  </step>
  <step>
   <para>
    後で<filename>ifcfg-team0</filename>ファイルの内容を一部変更する必要がある場合は、次のコマンドでその設定を再ロードします。
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> <command>wicked ifreload team0</command></screen>
  </step>
 </procedure>

 <para>
  チーミングデバイスを起動または停止する場合、<emphasis/><command>systemctl</command>を使用「しない」でください。代わりに、上記の<command>wicked</command>コマンドを使用します。
 </para>

 <para>
  チームデバイスを完全に削除するには、次の手順を実行します。
 </para>
 <procedure>
  <title>チームデバイスの削除</title>
  <step>
   <para>
    ネットワークチーミングデバイス<systemitem class="service">team0</systemitem>を停止します。
   </para>
   <screen><prompt>tux &gt; </prompt><command>sudo</command> <command>wicked ifdown team0</command></screen>
  </step>
  <step>
   <para>
    ファイル<filename>/etc/sysconfig/network/ifcfg-team0</filename>の名前を<filename>/etc/sysconfig/network/.ifcfg-team0</filename>に変更します。ファイル名の先頭にドットを挿入することにより、wickedでファイルが<quote>非表示</quote>になります。設定が本当に必要ない場合は、ファイルを削除することもできます。
   </para>
  </step>
  <step>
   <para>設定を再ロードします。</para>
   <screen><prompt>tux &gt; </prompt><command>sudo</command> <command>wicked ifreload all</command></screen>
  </step>
 </procedure>

 <sect2 xml:id="sec-network-iface-teaming-lb">
  <title>使用事例: ネットワークチーミングによる負荷分散</title>
  <para>
   負荷分散は帯域幅を改善するために使用されます。次の設定ファイルを使用して、負荷分散機能を備えたネットワークチーミングデバイスを作成します。<xref linkend="pro-team-general"/>に従ってデバイスを設定します。<command>teamdctl</command>の出力を確認します。
  </para>
  <example xml:id="ex-team-lb">
   <title>ネットワークチーミングによる負荷分散の設定</title>
<screen>STARTMODE=auto <co xml:id="co-team-lb-startmode"/>
BOOTPROTO=static <co xml:id="co-team-lb-boot-and-ip"/>
IPADDRESS="192.168.1.1/24" <xref linkend="co-team-lb-boot-and-ip"/>
IPADDR6="fd00:deca:fbad:50::1/64" <xref linkend="co-team-lb-boot-and-ip"/>

TEAM_RUNNER="loadbalance" <co xml:id="co-team-lb-loadbalance"/>
TEAM_LB_TX_HASH="ipv4,ipv6,eth,vlan"
TEAM_LB_TX_BALANCER_NAME="basic"
TEAM_LB_TX_BALANCER_INTERVAL="100"

TEAM_PORT_DEVICE_0="eth0" <co xml:id="co-team-lb-dev"/>
TEAM_PORT_DEVICE_1="eth1" <xref linkend="co-team-lb-dev"/>

TEAM_LW_NAME="ethtool" <co xml:id="co-team-lb-name"/>
TEAM_LW_ETHTOOL_DELAY_UP="10" <co xml:id="co-team-lb-ethtool-delay"/>
TEAM_LW_ETHTOOL_DELAY_DOWN="10" <xref linkend="co-team-lb-ethtool-delay"/></screen>

   <calloutlist>
    <callout arearefs="co-team-lb-startmode">
     <para>
      チーミングデバイスの起動を制御します。値<literal>auto</literal>は、インタフェースが、ネットワークサービスを使用可能な場合に設定され、再起動時に毎回自動的に起動されることを意味します。
     </para>
     <para>
      デバイスを手動で制御する(自動的に起動しないようにする)必要がある場合は、<varname>STARTMODE</varname>を<literal>manual</literal>に設定します。
     </para>
    </callout>
    <callout arearefs="co-team-lb-boot-and-ip">
     <para>
      静的IPアドレス(この場合、IPv4では<systemitem class="ipaddress">192.168.1.1</systemitem>、IPv6では<systemitem class="ipaddress">fd00:deca:fbad:50::1</systemitem>)を設定します。
     </para>
     <para>
      ネットワークチーミングデバイスが動的IPアドレスを使用する必要がある場合は、<literal>BOOTPROTO="dhcp"</literal>を設定し、<varname>IPADDRESS</varname>と<varname>IPADDR6</varname>の行を削除(またはコメント)します。
     </para>
    </callout>
    <callout arearefs="co-team-lb-loadbalance">
     <para>
      <varname>TEAM_RUNNER</varname>を<literal>loadbalance</literal>に設定して、負荷分散モードを有効にします。
     </para>
    </callout>
    <callout arearefs="co-team-lb-dev">
     <para>
      ネットワークチーミングデバイスを作成するために集約する必要がある1つまたは複数のデバイスを指定します。
     </para>
    </callout>
    <callout arearefs="co-team-lb-name">
     <para>
      従属デバイスの状態を監視するリンクウォッチャを定義します。デフォルト値<literal>ethtool</literal>は、デバイスが起動していてアクセス可能かどうかのみを確認します。その場合、この確認にはほとんど時間はかかりません。ただし、デバイスが実際にパケットを送受信できるかどうかの確認は行われません。
     </para>
     <para>
      接続でさらに高い信頼性が必要な場合は、<literal>arp_ping</literal>オプションを使用します。これにより、任意のホスト(<varname>TEAM_LW_ARP_PING_TARGET_HOST</varname>変数で設定されている)にpingが送信されます。返信を受信した場合のみ、このネットワークチーミングデバイスが起動しているものとみなされます。
     </para>
    </callout>
    <callout arearefs="co-team-lb-ethtool-delay">
     <para>
      リンクが起動(または停止)してからランナに通知されるまでの遅延(ミリ秒)を定義します。
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect2>

 <sect2 xml:id="sec-network-iface-teaming-failover">
  <title>使用事例: ネットワークチーミングによるフェールオーバー</title>
  <para>
   フェールオーバーは、並行して動作するバックアップネットワークデバイスを使用することにより、重要なネットワークチーミングデバイスの高可用性を確保するために使用します。バックアップネットワークデバイスは常時実行され、メインデバイスに障害が発生すると処理を引き継ぎます。
  </para>
  <para>
   次の設定ファイルを使用して、フェールオーバー機能を備えたネットワークチーミングデバイスを作成します。<xref linkend="pro-team-general"/>に従ってデバイスを設定します。<command>teamdctl</command>の出力を確認します。
  </para>
  <example xml:id="ex-team-failover">
   <title>DHCPネットワークチーミングデバイスの設定</title>
<screen>STARTMODE=auto <co xml:id="co-team-failover-startmode"/>
BOOTPROTO=static <co xml:id="co-team-failover-boot-and-ip"/>
IPADDR="192.168.1.2/24" <xref linkend="co-team-failover-boot-and-ip"/>
IPADDR6="fd00:deca:fbad:50::2/64" <xref linkend="co-team-failover-boot-and-ip"/>

TEAM_RUNNER=activebackup <co xml:id="co-team-failover-activebackup"/>
TEAM_PORT_DEVICE_0="eth0" <co xml:id="co-team-failover-dev"/>
TEAM_PORT_DEVICE_1="eth1" <xref linkend="co-team-failover-dev"/>

TEAM_LW_NAME=ethtool <co xml:id="co-team-failover-name"/>
TEAM_LW_ETHTOOL_DELAY_UP="10" <co xml:id="co-team-failover-ethtool-delay"/>
TEAM_LW_ETHTOOL_DELAY_DOWN="10" <xref linkend="co-team-failover-ethtool-delay"/></screen>
   <calloutlist>
    <callout arearefs="co-team-failover-startmode">
     <para>
      チーミングデバイスの起動を制御します。値<literal>auto</literal>は、インタフェースが、ネットワークサービスを使用可能な場合に設定され、再起動時に毎回自動的に起動されることを意味します。
     </para>
     <para>
      デバイスを手動で制御する(自動的に起動しないようにする)必要がある場合は、<varname>STARTMODE</varname>を<literal>manual</literal>に設定します。
     </para>
    </callout>
    <callout arearefs="co-team-failover-boot-and-ip">
     <para>
      静的IPアドレス(この場合、IPv4では<systemitem class="ipaddress">192.168.1.2</systemitem>、IPv6では<systemitem class="ipaddress">fd00:deca:fbad:50::2</systemitem>)を設定します。
     </para>
     <para>
      ネットワークチーミングデバイスが動的IPアドレスを使用する必要がある場合は、<literal>BOOTPROTO="dhcp"</literal>を設定し、<varname>IPADDRESS</varname>と<varname>IPADDR6</varname>の行を削除(またはコメント)します。
     </para>
    </callout>
    <callout arearefs="co-team-failover-activebackup">
     <para>
      <varname>TEAM_RUNNER</varname>を<literal>activebackup</literal>に設定して、フェールオーバーモードを有効にします。
     </para>
    </callout>
    <callout arearefs="co-team-failover-dev">
     <para>
      ネットワークチーミングデバイスを作成するために集約する必要がある1つまたは複数のデバイスを指定します。
     </para>
    </callout>
    <callout arearefs="co-team-failover-name">
     <para>
      従属デバイスの状態を監視するリンクウォッチャを定義します。デフォルト値<literal>ethtool</literal>は、デバイスが起動していてアクセス可能かどうかのみを確認します。その場合、この確認にはほとんど時間はかかりません。ただし、デバイスが実際にパケットを送受信できるかどうかの確認は行われません。
     </para>
     <para>
      接続でさらに高い信頼性が必要な場合は、<literal>arp_ping</literal>オプションを使用します。これにより、任意のホスト(<varname>TEAM_LW_ARP_PING_TARGET_HOST</varname>変数で設定されている)にpingが送信されます。返信を受信した場合のみ、このネットワークチーミングデバイスが起動しているものとみなされます。
     </para>
    </callout>
    <callout arearefs="co-team-failover-ethtool-delay">
     <para>
      リンクが起動(または停止)してからランナに通知されるまでの遅延(ミリ秒)を定義します。
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect2>

 <sect2 xml:id="sec-network-iface-teaming-vlan">
  <title>使用事例: チームデバイス上でのVLAN</title>
  
  <para>
   VLANは<emphasis>Virtual Local Area Network</emphasis>(仮想ローカルエリアネットワーク)の略です。複数の<emphasis>論理</emphasis>(仮想)Ethernetを1つの物理Ethernet上で実行できます。ネットワークを論理的に複数のブロードキャストドメインに分割し、パケットが同じVLANに指定されたポート間でのみ切り替えられるようにします。
  </para>
  <para>
   次の使用例では、チームデバイス上に静的なVLANを2つ作成します。
  </para>
  <itemizedlist>
   <listitem>
     <para><systemitem class="other" otherclass="device">vlan0</systemitem>。IPアドレス<systemitem class="ipaddress">192.168.10.1</systemitem>にバインドされます。</para>
   </listitem>
   <listitem>
     <para><systemitem class="other" otherclass="device">vlan1</systemitem>。IPアドレス<systemitem class="ipaddress">192.168.20.1</systemitem>にバインドされます。</para>
   </listitem>
  </itemizedlist>

  <para>以下に手順を示します。</para>
  <procedure>
   <step>
    <para>
     スイッチでVLANタグを有効にします。チームデバイスに負荷分散を使用するには、スイッチが<emphasis>Link Aggregation Control Protocol</emphasis> (LACP) (802.3ad)に対応している必要があります。詳細については、ハードウェアマニュアルを参照してください。
    </para>
   </step>
   
   <step>
    <para>
     チームデバイスで負荷分散またはフェールオーバーのどちらを使用するかを決定します。<xref linkend="sec-network-iface-teaming-lb"/>または<xref linkend="sec-network-iface-teaming-failover"/>の説明に従ってチームデバイスを設定します。
    </para>
   </step>
   <step>
    <para>
     <filename>/etc/sysconfig/network</filename>内に、次の内容が含まれるファイル<filename>ifcfg-vlan0</filename>を作成します。
    </para>
    <screen>STARTMODE="auto"
BOOTPROTO="static" <co xml:id="co-team-vlan-bootproto"/>
IPADDR='192.168.10.1/24' <co xml:id="co-team-vlan-ipaddr"/>
ETHERDEVICE="team0" <co xml:id="co-team-vlan-etherdevice"/>
VLAN_ID="0" <co xml:id="co-team-vlan-vlan-id"/>
VLAN='yes'</screen>
    <calloutlist>
     <callout arearefs="co-team-vlan-bootproto">
      <para>
       <varname>IPADDR</varname>で指定された固定IPアドレスを定義します。
      </para>
     </callout>
     <callout arearefs="co-team-vlan-ipaddr">
      <para>
       IPアドレスを定義します。ここではネットマスクを一緒に定義しています。
      </para>
     </callout>
     <callout arearefs="co-team-vlan-etherdevice">
      <para>
       VLANインタフェースに使用する実際のインタフェースが含まれます。ここでは、チームデバイス(<systemitem>team0</systemitem>)です。
      </para>
     </callout>
     <callout arearefs="co-team-vlan-vlan-id">
      <para>
       VLANの固有IDを指定します。できれば、ファイル名と<varname>VLAN_ID</varname>は<filename>ifcfg-vlan<replaceable>VLAN_ID</replaceable></filename>という名前に対応させてください。この場合、<varname>VLAN_ID</varname>は<literal>0</literal>で、ファイル名は<filename>ifcfg-vlan0</filename>になります。
      </para>
     </callout>
     
    </calloutlist>
   </step>
   <step>
    <para>
     ファイル<filename>/etc/sysconfig/network/ifcfg-vlan0</filename>を<filename>/etc/sysconfig/network/ifcfg-vlan1</filename>にコピーして、次の値を変更します。
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <varname>IPADDR</varname>は、<systemitem class="ipaddress">192.168.10.1/24</systemitem>から<systemitem class="ipaddress">192.168.20.1/24</systemitem>に変更。</para>
     </listitem>
     <listitem>
      <para>
       <varname>VLAN_ID</varname>は<literal>0</literal>から<literal>1</literal>に変更。
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     2つのVLANを起動します。
    </para>
    <screen><prompt role="root">root # </prompt><command>wicked</command> ifup vlan0 vlan1</screen>
   </step>
   <step>
    <para>
     <command>ifconfig</command>の出力を確認します。
    </para>
    <screen><prompt role="root">root # </prompt><command>ifconfig</command> -a
[...]
vlan0     Link encap:Ethernet  HWaddr 08:00:27:DC:43:98
          inet addr:192.168.10.1 Bcast:192.168.10.255 Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fedc:4398/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:816 (816.0 b)

vlan1     Link encap:Ethernet  HWaddr 08:00:27:DC:43:98
          inet addr:192.168.20.1 Bcast:192.168.20.255 Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fedc:4398/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:816 (816.0 b)</screen>
   </step>
   
  </procedure>
 </sect2>
</sect1>
