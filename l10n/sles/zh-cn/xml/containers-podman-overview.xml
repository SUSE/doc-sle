<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="containers-podman-overview.xml" xml:id="cha-podman-overview" xml:lang="zh-cn" version="5.0"> <title>Podman 概述</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  <link xlink:href="https://podman.io/">Podman</link> 是 Pod Manager 工具的简称。它是一个无守护程序的容器引擎，用于在 Linux 系统上开发、管理和运行 Open Container Initiative (OCI) 容器，可以直接取代 Docker。Podman 是 openSUSE Kubic（基于 openSUSE 构建的 Kubernetes 认证发行套件）中的默认容器运行时。您可以使用 Podman 通过 Dockerfile 和一系列与 Docker 开源引擎相同的命令来创建符合 OCI 标准的容器映像。例如，<literal>docker build</literal> 能够执行的任务也可以通过 <literal>podman build</literal> 命令来执行。换言之，Podman 可以直接替代 Docker 开源引擎。
 </para>
 <para>
  从 Docker 开源引擎迁移到 Podman 不需要对既有的工作流程进行任何更改。您无需重构建映像，可以使用完全相同的命令来构建和管理映像，以及运行和控制容器。
 </para>
 <para>
  Podman 与 Docker 开源引擎的差别体现在两个重要方面。
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Podman 不使用守护程序，因此容器引擎将直接与映像注册表、容器和映像储存服务交互。由于 Podman 没有守护程序，因此它提供了与 systemd 的集成。这样就可以通过 systemd 单元来控制容器。您可为现有容器创建这些单元，以及生成可启动容器的单元（如果系统中不存在这些单元）。此外，Podman 可以在容器内部运行 systemd。
   </para>
  </listitem>
  <listitem>
   <para>
    由于 Podman 依赖于多个名称空间（用于为 Linux 进程提供隔离机制），因此无需 root 特权就能创建和运行容器。这意味着 Podman 既可以在 root 模式下运行，也可以在非特权环境中运行。此外，非特权用户创建的容器在主机上无法获得高于容器创建者的特权。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-podman-install">
  <title>Podman 安装</title>

  <para>
   要安装 Podman，请运行 <command>sudo zypper in podman</command> 命令。然后运行 <command>podman --version</command> 检查 Podman 是否已成功安装。
  </para>

  <para>
   默认情况下，Podman 需要 root 特权。要为当前用户启用无 root 权限模式，请运行以下命令：
  </para>

<screen><prompt>tux &gt; </prompt> sudo usermod --add-subuids 200000-201000 --add-subgids 200000-201000 $USER</screen>

  <para>
   重引导计算机以启用更改。您也可以不重引导系统，而是停止当前用户的会话。为此，请运行 <command>loginctl list-sessions | grep $USER</command> 命令并记下会话 ID。然后使用 <command>loginctl kill-session <replaceable>SESSION_ID</replaceable></command> 命令终止会话。
  </para>

  <para>
   以上命令会在主机上定义一系列本地 UID，分配给容器中的用户的 UID 将映射到这些 UID。请注意，为不同用户定义的范围不得重叠。同样重要的是，这些范围不能重复使用现有本地用户或组的 UID。默认情况下，在 SLES 15 中使用 <command>useradd</command> 命令添加用户会自动分配 subUID 和 subGID 范围。
  </para>

  <para>
   在 SUSE Linux Enterprise Server 上以无 root 权限模式使用 Podman 运行容器可能会失败，因为容器需要拥有 SUSE Customer Center 身份凭证的读取访问权限。例如，使用 <command>podman run -it --rm registry.suse.com/suse/sle15 bash</command> 命令运行容器，然后执行 <command>zypper ref</command> 会出现以下错误消息：
  </para>

<screen>Refreshing service 'container-suseconnect-zypp'.
Problem retrieving the repository index file for service 'container-suseconnect-zypp':
[container-suseconnect-zypp|file:/usr/lib/zypp/plugins/services/container-suseconnect-zypp] 
Warning: Skipping service 'container-suseconnect-zypp' because of the above error.
Warning: There are no enabled repositories defined.
Use 'zypper addrepo' or 'zypper modifyrepo' commands to add or enable repositories</screen>

  <para>
   要解决该问题，请在主机上运行以下命令为当前用户授予所需的访问权限：
  </para>

<screen><prompt>tux &gt; </prompt>sudo setfacl -m u:$USER:r /etc/zypp/credentials.d/*</screen>

  <para>
   注销然后重新登录以应用更改。
  </para>

  <para>
   要为多个用户授予所需的访问权限，请使用 <command>groupadd <replaceable>GROUPNAME</replaceable></command> 命令创建一个专用组。然后使用以下命令更改 <filename>/etc/zypp/credentials.d/</filename> 目录中的文件的组所有权和权限。
  </para>

<screen><prompt>tux &gt; </prompt>sudo chgrp <replaceable>GROUPNAME</replaceable> /etc/zypp/credentials.d/*
<prompt>tux &gt; </prompt>sudo chmod g+r /etc/zypp/credentials.d/*</screen>

  <para>
   之后，您便可以通过将特定用户添加到这个创建的组来为其授予写入访问权限。
  </para>
 </sect1>
 <sect1 xml:id="cha-podman-use">
  <title>Podman 基本用法</title>

  <para>
   由于 Podman 与 Docker 开源引擎兼容，因此它具有相同的命令和选项。例如，<command>podman pull</command> 命令可从注册表中提取容器映像，而 <command>podman build</command> 命令可用于构建映像。
  </para>

  <para>
   与 Docker 开源引擎相比，Podman 的其中一项优势是可配置为搜索多个注册表。要使 Podman 首先搜索 SUSE 注册表并使用 Docker Hub 作为回退搜索源，请在 <filename>/etc/containers/registries.conf</filename> 文件中添加以下配置：
  </para>

<screen>[registries.search]
registries = ["registry.suse.com", "docker.io"]</screen>

  <para>
   与 Docker 开源引擎类似，Podman 能够以交互模式运行容器，使您可以检查和处理映像。要以交互模式运行 <literal>suse/sle15</literal>，请使用以下命令：
  </para>

<screen><prompt>tux &gt; </prompt>podman run --rm -ti suse/sle15</screen>

  <sect2 xml:id="cha-podman-build-images">
   <title>使用 Podman 构建映像</title>
   <para>
    Podman 可以基于 Dockerfile 构建映像。<command>podman build</command> 命令的行为与 <command>docker build</command> 相同，并且接受相同的选项。
   </para>
   <para>
    Podman 的配套工具 Buildah 提供了另一种构建映像的方式。有关 Buildah 的更多信息，请参见<xref linkend="cha-buildah-overview"/>。
   </para>
  </sect2>
 </sect1>
</chapter>
