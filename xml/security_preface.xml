<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.security">
 <title>Security and Confidentiality</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <indexterm class="startofrange" xml:id="idx.security">
 <primary>security</primary></indexterm>
 <para>
  One of the main characteristics of a Linux or Unix system is its ability
  to handle several users at the same time (multiuser) and to allow these
  users to perform several tasks (multitasking) on the same computer
  simultaneously. Moreover, the operating system is network transparent. The
  users often do not know whether the data and applications they are using
  are provided locally from their machine or made available over the
  network.
 </para>
 <para>
  With the multiuser capability, the data of different users must be stored
  separately, and security and privacy need to be guaranteed. Data security
  was already an important issue, even before computers could be linked
  through networks. Like today, the most important concern was the ability
  to keep data available in spite of a lost or otherwise damaged data medium
  (usually a hard disk).
 </para>
 <para>
  This section is primarily focused on confidentiality issues and on ways to
  protect the privacy of users. But it cannot be stressed enough that a
  comprehensive security concept should always include procedures to have a
  regularly updated, workable, and tested backup in place. Without this, you
  could have a very hard time getting your data back&mdash;not only in
  the case of some hardware defect, but also in the case that someone has
  gained unauthorized access and tampered with files.
 </para>
 <sect1 xml:id="sec.security.general.overview">
  <title>Local Security and Network Security</title>

  <para>
   There are several ways of accessing data:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     personal communication with people who have the desired information or
     access to the data on a computer
    </para>
   </listitem>
   <listitem>
    <para>
     directly through physical access from the console of a computer
    </para>
   </listitem>
   <listitem>
    <para>
     over a serial line
    </para>
   </listitem>
   <listitem>
    <para>
     using a network link
    </para>
   </listitem>
  </itemizedlist>

  <para>
   In all these cases, a user should be authenticated before accessing the
   resources or data in question. A Web server might be less restrictive in
   this respect, but you still would not want it to disclose your personal
   data to an anonymous user.
  </para><indexterm>

  <primary>security</primary>

  <secondary>engineering</secondary></indexterm>

  <para>
   In the list above, the first case is the one where the highest amount of
   human interaction is involved (such as when you are contacting a bank
   employee and are required to prove that you are the person owning that
   bank account). Then, you are asked to provide a signature, a PIN, or a
   password to prove that you are the person you claim to be. In some cases,
   it might be possible to elicit some intelligence from an informed person
   by mentioning known bits and pieces to win the confidence of that person.
   The victim could be led to reveal gradually more information, maybe
   without even being aware of it. Among hackers, this is called
   <emphasis>social engineering</emphasis>. You can only guard against this
   by educating people and by dealing with language and information in a
   conscious way. Before breaking into computer systems, attackers often try
   to target receptionists, service people working with the company, or even
   family members. Often such an attack based on social engineering
   is only discovered at a much later time.
  </para><indexterm>

  <primary>security</primary>

  <secondary>booting</secondary></indexterm><indexterm>

  <primary>security</primary>

  <secondary>serial terminals</secondary></indexterm>

  <para>
   A person wanting to obtain unauthorized access to your data could also
   use the traditional way and try to get at your hardware directly.
   Therefore, the machine should be protected against any tampering so that
   no one can remove, replace, or cripple its components. This also applies
   to backups and even any network cables or power cords. Also secure the
   boot procedure, because there are some well-known key combinations that
   might provoke unusual behavior. Protect yourself against this by setting
   passwords for the BIOS and the boot loader. <indexterm>
   <primary>security</primary>
   <secondary>booting</secondary>
   </indexterm>
  </para>

  <para>
   <indexterm>
   <primary>security</primary>
   <secondary>serial terminals</secondary>
   </indexterm> Serial terminals connected to serial ports are still used in
   many places. Unlike network interfaces, they do not rely on network
   protocols to communicate with the host. A simple cable or an infrared
   port is used to send plain characters back and forth between the devices.
   The cable itself is the weakest point of such a system: with an older
   printer connected to it, it is easy to record any data being transferred
   that way. What can be achieved with a printer can also be accomplished in
   other ways, depending on the effort that goes into the attack.
  </para>

  <para>
   Reading a file locally on a host requires additional access rules than
   opening a network connection with a server on a different host. There is
   a distinction between local security and network security. The line is
   drawn where data must be put into packets to be sent somewhere else.
  </para>

  <sect2 xml:id="sec.security.general.overview.local">
   <title>Local Security</title><indexterm xml:id="idx.security_local" class="startofrange">
   <primary>security</primary>
   <secondary>local</secondary></indexterm>
   <para>
    Local security starts with the physical environment at the location in
    which computer is running. Set up your machine in a place where security
    is in line with your expectations and needs. The main goal of local
    security is to keep users separate from each other, so no user can
    assume the permissions or the identity of another. This is a general
    rule to be observed, but it is especially true for the user
    <systemitem class="username">root</systemitem>, who holds system
    administration privileges.
    <systemitem class="username">root</systemitem> can take on the identity
    of any other local user and read any locally-stored file without being
    prompted for the password.
   </para>
   <sect3 xml:id="sec.security.general.overview.local.passwords">
    <title>Passwords</title><indexterm xml:id="idx.security_passwords" class="startofrange">
    <primary>security</primary>
    <secondary>passwords</secondary></indexterm>
    <para>
     On a Linux system, passwords are not stored as plain text and the
     entered text string is not simply matched with the saved
     pattern. If this were the case, all accounts on your system would
     be compromised when someone got access to the corresponding
     file. Instead, the stored password is encrypted and, each time it
     is entered, is encrypted again and the two encrypted strings are
     compared. This only provides more security if the encrypted
     password cannot be reverse-computed into the original text string.
    </para>
    <para>
     This is achieved by a special kind of algorithm, also called
     <emphasis>trapdoor algorithm</emphasis>, because it only works in one
     direction. An attacker who has obtained the encrypted string is not
     able to get your password by simply applying the same algorithm again.
     Instead, it would be necessary to test all the possible character
     combinations until a combination is found that looks like your password
     when encrypted. With passwords eight characters long, there are many
     combinations to calculate.
    </para>
    <para>
     In the seventies, it was argued that this method would be more secure
     than others because of the relative slowness of the algorithm used
     which took a few seconds to encrypt one password. In the meantime, PCs have become powerful enough to do several hundred thousand
     or even millions of encryptions per second. Because of this, encrypted
     passwords should not be visible to regular users
     (<filename>/etc/shadow</filename> cannot be read by normal users). It
     is even more important that passwords are not easy to guess, in case
     the password file becomes visible because of an error. Consequently, it
     is not really useful to <quote>translate</quote> a password like
     <quote>tantalize</quote> into <quote>t@nt@1lz3</quote>.
    </para>
    <para>
     Replacing some letters of a word with similar looking numbers (like
     writing the password <quote>tantalize</quote> as
     <quote>t@nt@1lz3</quote>) is not sufficient. Password cracking programs
     that use dictionaries to guess words also play with substitutions like
     that. A better way is to make up a word that only makes sense to you personally, like the first
     letters of the words of a sentence or the title of a book, such as
     <quote>The Name of the Rose</quote> by Umberto Eco. This would give the
     following safe password: <quote>TNotRbUE9</quote>. In contrast,
     passwords like <quote>beerbuddy</quote> or <quote>jasmine76</quote> are
     easily guessed even by someone who has only some casual knowledge about
     you.
    </para><indexterm class="endofrange" startref="idx.security_passwords"/>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.local.boot">
    <title>The Boot Procedure</title><indexterm xml:id="idx.security_booting" class="startofrange">
    <primary>security</primary>
    <secondary>booting</secondary></indexterm>
    <para>
     Configure your system so it cannot be booted from a removable device,
     either by removing the drives entirely or by setting a BIOS password
     and configuring the BIOS to allow booting from a hard disk only.
     Normally, a Linux system is started by a boot loader, allowing you to
     pass additional options to the booted kernel. Prevent others from using
     such parameters during boot by setting an additional password for the
     boot loader (see <xref linkend="sec.grub2.password"/> for
     instructions). This is crucial to your system's security. Not only does
     the kernel itself run with
     <systemitem class="username">root</systemitem> permissions, but it is
     also the first authority to grant
     <systemitem class="username">root</systemitem> permissions at system
     start-up.
    </para><indexterm class="endofrange" startref="idx.security_booting"/>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.local.permissions">
    <title>File Permissions</title><indexterm xml:id="idx.security_permissions" class="startofrange">
    <primary>security</primary>
    <secondary>permissions</secondary></indexterm>
    <para>
     As a general rule, always work with the most restrictive privileges
     possible for a given task. For example, it is definitely not necessary
     to be <systemitem class="username">root</systemitem> to read or write
     e-mail. If the mail program has a bug, this bug could be exploited for
     an attack that acts with exactly the permissions of the program when it
     was started. By following the above rule, minimize the possible damage.
    </para>
    <para>
     The permissions of all files included in the &productname;
     distribution are carefully chosen. A system administrator who installs
     additional software or other files should take great care when doing
     so, especially when setting the permission bits. Experienced and
     security-conscious system administrators always use the
     <option>-l</option> option with the command <command>ls</command> to
     get an extensive file list, which allows them to detect any incorrect
     file permissions immediately. An incorrect file attribute does not only
     mean that files could be changed or deleted. These modified files could
     be executed by <systemitem class="username">root</systemitem> or, in
     the case of configuration files, programs could use such files with the
     permissions of <systemitem class="username">root</systemitem>. This
     significantly increases the possibilities of an attack. Attacks like
     these are called cuckoo eggs, because the program (the egg) is executed
     (hatched) by a different user (bird), similar to how a cuckoo tricks
     other birds into hatching its eggs.
    </para>
    <para>
     An &productnamereg; system includes the files
     <filename>permissions</filename>,
     <filename>permissions.easy</filename>,
     <filename>permissions.secure</filename>, and
     <filename>permissions.paranoid</filename>, all in the directory
     <filename>/etc</filename>. The purpose of these files is to define
     special permissions, such as world-writable directories or, for files,
     the setuser ID bit (programs with the setuser ID bit set do not run
     with the permissions of the user that has launched it, but with the
     permissions of the file owner, usually
     <systemitem class="username">root</systemitem>). An administrator can
     use the file <filename>/etc/permissions.local</filename> to add his own
     settings.
    </para>
    <para>
     To define which of the above files is used by &productname;'s
     configuration programs to set permissions, select <guimenu>Local
     Security</guimenu> in the <guimenu>Security and Users</guimenu> section
     of &yast;. To learn more about the topic, read the comments in
     <filename>/etc/permissions</filename> or consult the manual page of
     <command>chmod</command>
     (<command>man</command>&nbsp;<option>chmod</option>).
    </para><indexterm class="endofrange" startref="idx.security_permissions"/>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.local.bugs">
    <title>Buffer Overflows and Format String Bugs</title><indexterm>
    <primary>security</primary>
    <secondary>bugs and</secondary></indexterm>
    <para>
     Special care must be taken whenever a program needs to process data
     that could be changed by a user, but this is more of an issue for the
     programmer of an application than for regular users. The programmer
     must make sure that his application interprets data in the correct way,
     without writing it into memory areas that are too small to hold it.
     Also, the program should hand over data in a consistent manner, using
     interfaces defined for that purpose.
    </para>
    <para>
     A <emphasis>buffer overflow</emphasis> can happen if the actual size of
     a memory buffer is not taken into account when writing to that buffer.
     There are cases where this data (as generated by the user) uses up more
     space than what is available in the buffer. As a result, data is
     written beyond the end of that buffer area, which, under certain
     circumstances, makes it possible for a program to execute program
     sequences influenced by the user (and not by the programmer), rather
     than processing user data only. A bug of this kind may have serious
     consequences, especially if the program is being executed with special
     privileges (see
     <xref linkend="sec.security.general.overview.local.permissions"/>).
    </para>
    <para>
     <emphasis>Format string bugs</emphasis> work in a slightly different
     way, but again it is the user input that could lead the program astray.
     Usually, these programming errors are exploited with programs
     executed with special permissions&mdash;setuid and setgid
     programs&mdash;which also means that you can protect your data and
     your system from such bugs by removing the corresponding execution
     privileges from programs. Again, the best way is to apply a policy of
     using the lowest possible privileges (see
     <xref linkend="sec.security.general.overview.local.permissions"/>).
    </para>
    <para>
     Given that buffer overflows and format string bugs are related to
     the handling of user data, they are only exploitable if access has
     been given to a local account. Many of the bugs that have been reported
     can also be exploited over a network link. Accordingly, buffer
     overflows and format string bugs should be classified as being relevant
     for both local and network security.
    </para>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.local.virus">
    <title>Viruses</title><indexterm>
    <primary>security</primary>
    <secondary>viruses</secondary></indexterm>
    <para>
     Contrary to popular opinion, there are viruses that run on Linux.
     However, the viruses that are known were released by their authors as a
     <emphasis>proof of concept</emphasis> that the technique works as
     intended. None of these viruses have been spotted <emphasis>in the
     wild</emphasis> so far.
    </para>
    <para>
     Viruses cannot survive and spread without a host on which to live. In
     this case, the host would be a program or an important storage area of
     the system (for example, the master boot record) that needs to be writable
     for the program code of the virus. Because of its multiuser capability,
     Linux can restrict write access to certain files (this is especially
     important with system files). Therefore, if you did your normal work
     with <systemitem class="username">root</systemitem> permissions, you
     would increase the chance of the system being infected by a virus. In
     contrast, if you follow the principle of using the lowest possible
     privileges as mentioned above, chances of getting a virus are slim.
    </para>
    <para>
     Apart from that, you should never rush into executing a program from
     some Internet site that you do not really know. &productname;'s RPM
     packages carry a cryptographic signature, as a digital label that the
     necessary care was taken to build them. Viruses are a typical sign that
     the administrator or the user lacks the required security awareness,
     putting at risk even a system that should be highly secure by its very
     design.
    </para>
    <para>
     Viruses should not be confused with worms, which belong entirely to the
     world of networks. Worms do not need a host to spread.
    </para><indexterm class="endofrange" startref="idx.security_local"/>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.security.general.overview.network">
   <title>Network Security</title><indexterm xml:id="idx.security_network" class="startofrange">
   <primary>security</primary>
   <secondary>network</secondary></indexterm>
   <para>
    Network security is important for protecting from an attack that is
    started outside the network. The typical login procedure requiring a
    user name and a password for user authentication is still a local
    security issue. In the particular case of logging in over a network,
    differentiate between the two security aspects. What happens until the
    actual authentication is network security and anything that happens
    afterward is local security.
   </para>
   <sect3 xml:id="sec.security.general.overview.network.x11">
    <title>X Window System and X Authentication</title><indexterm>
    <primary>security</primary>
    <secondary>X and</secondary></indexterm><indexterm>
    <primary>X</primary>
    <secondary>security</secondary></indexterm>
    <para>
     As mentioned at the beginning, network transparency is one of the
     central characteristics of a Unix system. X, the windowing system of
     Unix operating systems, can use this feature in an impressive
     way. With X, it is no problem to log in to a remote host and start a
     graphical program that is then sent over the network to be displayed on
     your computer.
    </para>
    <para>
     When an X client needs to be displayed remotely using an X server, the
     latter should protect the resource managed by it (the display) from
     unauthorized access. In more concrete terms, certain permissions must
     be given to the client program. With the X Window System, there are two
     ways to do this, called host-based access control and cookie-based
     access control. The former relies on the IP address of the host where
     the client should run. The program to control this is xhost. xhost
     enters the IP address of a legitimate client into a database belonging
     to the X server. However, relying on IP addresses for authentication is
     not very secure. For example, if there were a second user working on
     the host sending the client program, that user would have access to the
     X server as well&mdash;like someone stealing the IP address. Because
     of these shortcomings, this authentication method is not described in
     more detail here, but you can learn about it with
     <command>man</command>&nbsp;<option>xhost</option>.
    </para>
    <para>
     In the case of cookie-based access control, a character string is
     generated that is only known to the X server and to the legitimate
     user, like an ID card of some kind. This cookie is stored on login in
     the file <filename>.Xauthority</filename> in the user's home directory
     and is available to any X client wanting to use the X server to display
     a window. The file <filename>.Xauthority</filename> can be examined by
     the user with the tool <command>xauth</command>. If you rename
     <filename>.Xauthority</filename>, or if you delete the file from your
     home directory by accident, you would not be able to open any new
     windows or X clients.
    </para>
    <para>
     SSH (secure shell) can be used to encrypt a network connection and forward it to an X server transparently. This is also called X
     forwarding. X forwarding is achieved by simulating an X server on the
     server side and setting a DISPLAY variable for the shell on the remote
     host. Further details about SSH can be found in
     <xref linkend="cha.ssh"/>.
    </para>
    <warning>
     <title>X Forwarding Can Be Insecure</title>
     <para>
      <remark>sknorr, 2014-08-22: "The host where you log in" is ambiguous: does
       this mean the computer that you are logging in to or the computer that
       you are logging in from?</remark>
      If you do not consider the host where you log in to be a secure host,
      do not use X forwarding. If X forwarding is enabled, an attacker could
      authenticate via your SSH connection. The attacker could then intrude
      on your X server and, for example, read your keyboard input.
     </para>
    </warning>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.network.bugs">
    <title>Buffer Overflows and Format String Bugs</title><indexterm>
    <primary>security</primary>
    <secondary>bugs and</secondary></indexterm>
    <para>
     As discussed in
     <xref linkend="sec.security.general.overview.local.bugs"/>, buffer
     overflows and format string bugs should be classified as issues
     applying to both local and network security. As with the local variants
     of such bugs, buffer overflows in network programs, when successfully
     exploited, are mostly used to obtain
     <systemitem class="username">root</systemitem> permissions. Even if
     that is not the case, an attacker could use the bug to gain access to
     an unprivileged local account to exploit other vulnerabilities that
     might exist on the system.
    </para>
    <para>
     Buffer overflows and format string bugs exploitable over a network link
     are certainly the most frequent form of remote attacks, in general.
     Exploits for these&mdash;programs to exploit these newly-found
     security holes&mdash;are often posted on security mailing lists.
     They can be used to target the vulnerability without knowing the
     details of the code.
    </para>
    <para>
     Experience has shown that the availability of exploit codes has
     contributed to more secure operating systems, as they force operating
     system makers to fix problems in their software. With free software,
     anyone has access to the source code (&productname; comes with
     complete source code) and anyone who finds a vulnerability and its
     exploit code can submit a patch to fix the corresponding bug.
    </para>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.network.dos">
    <title>Denial of Service</title><indexterm xml:id="idx.security_attacks" class="startofrange">
    <primary>security</primary>
    <secondary>attacks</secondary></indexterm>
    <para>
     The purpose of a denial of service (DoS) attack is to block a server
     program or even an entire system. This can be achieved in several ways: overloading the server, keeping it busy with garbage
     packets, or exploiting a remote buffer overflow. Often, a DoS attack is
     made with the sole purpose of making the service disappear. However,
     when a given service has become unavailable, communications could
     become vulnerable to <emphasis>man-in-the-middle attacks</emphasis>
     (sniffing, TCP connection hijacking, spoofing) and DNS poisoning.
    </para>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.network.mitm">
    <title>Man in the Middle: Sniffing, Hijacking, Spoofing</title>
    <para>
     In general, any remote attack performed by an attacker who puts himself
     between the communicating hosts is called a <emphasis>man-in-the-middle
     attack</emphasis>. What almost all types of man-in-the-middle attacks
     have in common is that the victim is usually not aware that there is
     something happening. There are many variants. For example, the
     attacker could pick up a connection request and forward that to the
     target machine. Now the victim has unwittingly established a connection
     with the wrong host, because the other end is posing as the legitimate
     destination machine.
    </para>
    <para>
     The simplest form of a man-in-the-middle attack is called
     <emphasis>sniffer</emphasis> (the attacker is <quote>only</quote>
     listening to the network traffic passing by). As a more complex attack,
     the <quote>man in the middle</quote> could try to take over an already
     established connection (hijacking). To do so, the attacker would need
     to analyze the packets for some time to be able to predict the TCP
     sequence numbers belonging to the connection. When the attacker finally
     seizes the role of the target host, the victims notice this, because
     they get an error message saying the connection was terminated because
     of a failure. That there are protocols not secured against
     hijacking through encryption (which only perform a simple
     authentication procedure upon establishing the connection) makes it
     easier for attackers.
    </para>
    <para>
     <emphasis>Spoofing</emphasis> is an attack where packets are modified
     to contain counterfeit source data, usually the IP address. Most active
     forms of attack rely on sending out such fake packets (something that,
     on a Linux machine, can only be done by the superuser
     (<systemitem class="username">root</systemitem>)).
    </para>
    <para>
     Many of the attacks mentioned are carried out in combination with a
     DoS. If an attacker sees an opportunity to bring down a certain host
     abruptly, even if only for a short time, it makes it easier for him to
     push the active attack, because the host cannot interfere
     with the attack for some time.
    </para>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.network.dns">
    <title>DNS Poisoning</title><indexterm>
    <primary>DNS</primary>
    <secondary>security and</secondary></indexterm><indexterm>
    <primary>security</primary>
    <secondary>DNS</secondary></indexterm>
    <para>
     DNS poisoning means that the attacker corrupts the cache of a DNS
     server by replying to it with spoofed DNS reply packets, trying to get
     the server to send certain data to a victim who is requesting
     information from that server. Many servers maintain a trust
     relationship with other hosts, based on IP addresses or host names. The
     attacker needs a good understanding of the actual structure of the
     trust relationships among hosts to disguise itself as one of the
     trusted hosts. Usually, the attacker analyzes some packets received
     from the server to get the necessary information. The attacker often
     needs to target a well-timed DoS attack at the name server as well.
     Protect yourself by using encrypted connections that can verify
     the identity of the hosts to which to connect.
    </para>
   </sect3>
   <sect3 xml:id="sec.security.general.overview.network.worms">
    <title>Worms</title><indexterm>
    <primary>security</primary>
    <secondary>worms</secondary></indexterm>
    <para>
     Worms are often confused with viruses, but there is a clear difference
     between the two. Unlike viruses, worms do not need to infect a host
     program to live. Instead, they are specialized to spread as quickly as
     possible on network structures. The worms that appeared in the past,
     such as Ramen, Lion, or Adore, used well-known security holes in
     server programs like bind8. Protection against worms is relatively
     easy. Given that some time elapses between the discovery of a security
     hole and the moment the worm hits your server, there is a good chance
     that an updated version of the affected program is available on time.
     That is only useful if the administrator actually installs the security
     updates on the systems in question.
     <indexterm class="endofrange" startref="idx.security_attacks"/>
     <indexterm class="endofrange" startref="idx.security_network"/>
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.security.general.tips">
  <title>Some General Security Tips and Tricks</title><indexterm>

  <primary>security</primary>

  <secondary>tips and tricks</secondary></indexterm>

  <remark condition="clarity"> 2007-07-27 - jjaeger: please use profiling for mailing lists and
   websites if they change from SLE to opensuse, next time. </remark>

  <para>
   To handle security competently, it is important to observe some
   recommendations. You may find the following list of rules useful in
   dealing with basic security concerns:
  </para>

  <remark>2011-03-17 jw: Most users are surprised to find plain text copies of a password in their home.
  Should we explain when that happens, and how to avoid it? E.g. .netrc, .subversion/auth/*, .oscrc, et al.
  </remark>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Get and install the updated packages recommended by security
     announcements as quickly as possible.
    </para>
   </listitem>
   <listitem>
    <para>
     Stay informed about the latest security issues:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <link xlink:href="http://lists.opensuse.org/opensuse-security-announce/"/>
       is the &suse; mailing list for security announcements. It is a
       first-hand source of information regarding updated packages and
       includes members of &suse;'s security team among its active
       contributors. You can subscribe to this list on page
       <link xlink:href="http://en.opensuse.org/openSUSE:Mailing_lists"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       Find &suse; security advisories at
       <link os="sles;sled" xlink:href="http://www.suse.com/support/update/"/><link os="osuse" xlink:href="https://www.suse.com//security/cve/"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>bugtraq@securityfocus.com</literal> is one of the best-known
       security mailing lists worldwide. Reading this list, which receives
       between 15 and 20 postings per day, is recommended. More information
       can be found at <link xlink:href="http://www.securityfocus.com"/>.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Discuss any security issues of interest on our mailing list
     <literal>opensuse-security@opensuse.org</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     According to the rule of using the most restrictive set of permissions
     possible for every job, avoid doing your regular jobs as
     <systemitem class="username">root</systemitem>. This reduces the risk
     of getting a cuckoo egg or a virus and protects you from your own
     mistakes.
    </para>
   </listitem>
   <listitem>
    <para>
     If possible, always try to use encrypted connections to work on a
     remote machine. Using <command>ssh</command> (secure shell) to replace
     <command>telnet</command>, <command>ftp</command>,
     <command>rsh</command>, and <command>rlogin</command> should be
     standard practice.
    </para>
   </listitem>
   <listitem>
    <para>
     Avoid using authentication methods based solely on IP addresses.
    </para>
   </listitem>
   <listitem>
    <para>
     Try to keep the most important network-related packages up-to-date and
     subscribe to the corresponding mailing lists to receive announcements
     on new versions of such programs (<command>bind</command>,
     <command>postfix</command>, <command>ssh</command>, etc.). The same
     should apply to software relevant to local security.
    </para>
   </listitem>
   <listitem><indexterm>
    <primary>configuration files</primary>
    <secondary>permissions</secondary></indexterm>
    <para>
     Change the <filename>/etc/permissions</filename> file to optimize
     the permissions of files crucial to your system's security. If you
     remove the setuid bit from a program, it might well be that it
     cannot do its job anymore in the intended way. On the other hand,
     the program will usually have ceased to be a potential security
     risk. You might take a similar approach with world-writable
     directories and files.
    </para>
   </listitem>
   <listitem>
    <para>
     Disable any network services you do not absolutely require for your
     server to work properly. This makes your system safer. Open ports, with
     the socket state LISTEN, can be found with the program
     <literal>netstat</literal>. As for the options, it is recommended to
     use <command>netstat</command>&nbsp;<option>-ap</option> or
     <command>netstat</command>&nbsp;<option>-anp</option>. The
     <option>-p</option> option allows you to see which process is occupying
     a port under which name.
    </para>
    <para>
     Compare the <literal>netstat</literal> results with those of a thorough
     port scan done from outside your host. An excellent program for this
     job is <literal>nmap</literal>, which not only checks out the ports of
     your machine, but also draws some conclusions as to which services are
     waiting behind them. However, port scanning may be interpreted as an
     aggressive act, so do not do this on a host without the explicit
     approval of the administrator. Finally, remember that it is important
     not only to scan TCP ports, but also UDP ports (options
     <option>-sS</option> and <option>-sU</option>).
    </para>
   </listitem>
   <listitem>
    <para>
     To monitor the integrity of the files of your system in a reliable way,
     use the program <literal>AIDE</literal> (Advanced Intrusion Detection
     Environment), available on &productname;. Encrypt the database
     created by AIDE to prevent someone from tampering with it. Furthermore,
     keep a backup of this database available outside your machine, stored
     on an external data medium not connected to it by a network link.
    </para>
   </listitem>
   <listitem>
    <para>
     Take proper care when installing any third-party software. There have
     been cases where a hacker had built a Trojan horse into the TAR archive
     of a security software package, which was fortunately discovered very
     quickly. If you install a binary package, have no doubts about the site
     from which you downloaded it.
    </para><indexterm>
    <primary>security</primary>
    <secondary>RPM signatures</secondary></indexterm><indexterm>
    <primary>RPM</primary>
    <secondary>security</secondary></indexterm>
    <para>
     &suse;'s RPM packages are gpg-signed. The key used by &suse; for
     signing is:
    </para>
<screen>ID:9C800ACA 2000-10-19 SUSE Package Signing Key &lt;build@suse.de&gt;
     Key fingerprint = 79C1 79B2 E1C8 20C1 890F 9994 A84E DAE8 9C80 0ACA</screen>
    <para>
     The command <command>rpm</command>&nbsp;<option>--checksig
     package.rpm</option> shows whether the checksum and the signature of an
     uninstalled package are correct. Find the key on the first CD of the
     distribution and on most key servers worldwide.
    </para>
   </listitem>
   <listitem>
    <para>
     Check backups of user and system files regularly. Consider that if you
     do not test whether the backup works, it might actually be worthless.
    </para>
   </listitem>
   <listitem>
    <para>
     Check your log files. Whenever possible, write a small script to search
     for suspicious entries. Admittedly, this is not exactly a trivial task.
     In the end, only you can know which entries are unusual and which are
     not.
    </para>
   </listitem>
   <listitem>
    <para>
     Use <literal>tcp_wrapper</literal> to restrict access to the individual
     services running on your machine, so you have explicit control over
     which IP addresses can connect to a service. For further information
     regarding <literal>tcp_wrapper</literal>, consult the manual pages of
     tcpd and hosts_access (<command>man</command>&nbsp;<option>8
     tcpd</option>,
     <command>man</command>&nbsp;<option>hosts_access</option>).
    </para><indexterm>
    <primary>security</primary>
    <secondary>tcpd</secondary></indexterm>
   </listitem>
   <listitem>
    <para>
     Use SuSEfirewall to enhance the security provided by
     <literal>tcpd</literal> (<literal>tcp_wrapper</literal>).
    </para>
   </listitem>
   <listitem>
    <para>
     Design your security measures to be redundant: a message seen twice is
     much better than no message.
    </para>
   </listitem>
   <listitem>
    <para>
     If you use suspend to disk, consider configuring the suspend image
     encryption using the <command>configure-suspend-encryption.sh</command>
     script. The program creates the key, copies it to
     <filename>/etc/suspend.key</filename>, and modifies
     <filename>/etc/suspend.conf</filename> to use encryption for suspend
     images.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.security.general.report">
  <title>Using the Central Security Reporting Address</title><indexterm>

  <primary>security</primary>

  <secondary>reporting problems</secondary></indexterm>

  <para>
   If you discover a security-related problem (check the available update
   packages first), write an e-mail to <email>security@suse.de</email>.
   Include a detailed description of the problem and the version number of
   the package concerned. &suse; will try to send a reply when
   possible. You are encouraged to pgp-encrypt your e-mail messages.
   &suse;'s PGP key is:
  </para>

<screen>ID:3D25D3D9 1999-03-06 SUSE Security Team &lt;security@suse.de&gt;
Key fingerprint = 73 5F 2E 99 DF DB 94 C4 8F 5A A3 AE AF 22 F2 D5</screen>

  <para>
   This key is also available for download from
   <link xlink:href="http://www.suse.com/support/security/contact.html"/>.
  </para><indexterm class="endofrange" startref="idx.security"/>
 </sect1>
</chapter>
