<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>

<!DOCTYPE article 
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<article xml:id="article.vt.best.practices" xml:lang="en" version="5.0"
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <?suse-quickstart color="suse"?>
 <title>SUSE Linux Enterprise in the Public Cloud</title>
 <subtitle>Amazon EC2 Container Service</subtitle>
 <info>
  <productnumber>&productnumber;</productnumber><productname>&productname;</productname><date>
  <?dbtimestamp format="B d, Y" ?></date>
 <abstract>
   <para>
    <link xlink:href="https://aws.amazon.com/ecs/">Amazon EC2 Container Service (ECS)</link>
    is a container management service that provides a set of APIs for
    scheduling container workloads across EC2 clusters.
   </para>
   <para>
    &sle; 12 images with the <emphasis role="strong">ecs</emphasis> TLA in the
    image name are designed to integrate with the Amazon EC2 Container
    service. The image contains an agent that interacts with &deng; to
    start/stop new containers and gather information about running
    containers. The agent is fully integrated with &sle;.
   </para>
 </abstract>
 </info>

 <sect1 xml:id="cluster-setup">
    <title>Cluster setup</title>
    <para>
      Creating a new ECS cluster in Amazon is accomplished by using the
      <link xlink:href="https://console.aws.amazon.com/ecs/home#/firstRun">First
      Run Wizard.</link> Alternatively you may use the
      <command>aws</command> command line tool to create the cluster, refer to 
      <link xlink:href="http://docs.aws.amazon.com/cli/latest/reference/ecs/create-cluster.html">create</link> for details.
      In the First Run Wizard select
      <guimenu>Custom</guimenu> if you want to create a
      setup unique to your own needs. The
      <guimenu>Amazon ECS sample</guimenu> selection creates
      a pre-defined web application setup, that may be customized. By default
      the First Run Wizard selects the Amazon ECS AMI, we will change this
      later. 
    </para>
    <note>
      <para>
        Note that using the First Run Wizard also creates an autoscaling
        group. This implies that at least one instance (default setting) is
        always running and a new instance will be started by the autoscaling
        group if the running instance should be stopped or terminated.
      </para>
    </note>
    <para>
      We recommend retaining the default cluster name
      <emphasis role="strong">default</emphasis>. When the cluster is named
      <systemitem>default</systemitem> an ECS instance will
      automatically attach itself to the cluster without additional
      configuration steps. Selecting a custom name for the cluster
      requires the instance to be configured as outlined in
      <xref linkend="alternative-cluster-name"/>.
    </para>
 </sect1>
 <sect1 xml:id="ecs-instance-role">
    <title>ECS instance role</title>
    <para>
      Use of the Amazon EC2 Container Service requires permissions that
      are not enabled by default in the Identity and Access Management
      (IAM) functionality. Therefore it is necessary to create a policy
      that provides users that are intended to use ECS with the proper
      permissions. We recommend the following policy:
    </para>
    <screen>{
      "Version": "2012-10-17",
      "Statement": [
          {
              "Effect": "Allow",
              "Action": [
                  "ecs:CreateCluster",
                  "ecs:DeregisterContainerInstance",
                  "ecs:DiscoverPollEndpoint",
                  "ecs:Poll",
                  "ecs:RegisterContainerInstance",
                  "ecs:Submit*",
                  "ecs:StartTask",
                  "ecs:DescribeTasks",
                  "ecs:StopTask",
                  "ecs:RegisterTaskDefinition",
                  "ecs:DescribeTaskDefinition",
                  "ecs:DescribeContainerInstances",
                  "ecs:StartTelemetrySession"
              ],
              "Resource": [
                  "*"
              ]
          }
      ]
    }
    </screen>
    <para>
      For additional information about IAM policies please refer to the
      Amazon documentation: <link xlink:href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/IAM_policies.html">IAM Policies</link>
    </para>
    <para>
      Once the policy is created attach it to a role named
      <emphasis role="strong">ecsInstanceRole</emphasis>. Details about
      ECS specific policies and roles can be found in the Amazon documentation:
      <link xlink:href="http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html">IAM Role</link>
    </para>
    <note>
      <para>
        Note that the policy given above is more permissive than the
        policy example provided in the Amazon documentation.
      </para>
    </note>
 </sect1>
 <sect1 xml:id="attach-sles12-ecs-instances-to-the-cluster">
    <title>Attach &sls; ECS instances to the cluster</title>
    <para>
      Once the cluster is up and running and your AWS account provides a
      permissive IAM role for ECS, you can continue to run ECS instances
      as follows:
    </para>
    <orderedlist>
      <listitem>
        <para>
          Find the latest &sls; ECS ami using <link
          xlink:href="https://www.suse.com/communities/conversations/tag/pint"
          >pint</link>
        </para>
        <screen>$ pint amazon images --active --filter 'name~ecs'</screen>
      </listitem>
      <listitem>
        <para>
          Run as many instances of the above ami as required for your
          cluster. Remember to select the ECS role when launching the
          instance.
        </para>
        <para>
          You may use the Amazon EC2 Web Console to launch instances.  The
          &sls; ECS images are found in the so called General Catalog. From
          the <emphasis role="strong">Instances</emphasis> view select
          <guimenu>Launch Instance</guimenu>. In the left column select the
          <guimenu>Community AMIs</guimenu> tab. Check the <guimenu>SUSE
          Linux</guimenu> box on the left and enter <emphasis
          role="strong">ecs</emphasis> into the search box. When configuring
          the instance parameters in the <emphasis role="strong">Configure
          Instance Details</emphasis> view select the
          <guimenu>ecsInstanceRole</guimenu> as the IAM role. Then launch the
          instance.
        </para>
        <para>
          Alternatively you can use the <command>aws</command> command line
          tool to run instances, see
          <link xlink:href="http://docs.aws.amazon.com/cli/latest/reference/ec2/run-instances.html">run-instances</link> for details.
        </para>
        <screen>$ aws ec2 run-instances \
           --image-id <replaceable>IMAGE_ID_SEE_PINT_OUTPUT</replaceable> \
           --region <replaceable>EC2_REGION_NAME</replaceable> \
           --key-name <replaceable>SSH_KEY_PAIR_NAME</replaceable> \
           --instance-type <replaceable>DESIRED_INSTANCE_TYPE</replaceable> \
           --subnet-id <replaceable>SUBNET_ID</replaceable> \
           --iam-instance-profile 'Arn=<replaceable>PROFILE_PATH</replaceable>'
        </screen>
        <para>
          The <replaceable>PROFILE_PATH</replaceable> may be obtained by querying the IAM service.
        </para>
        <screen>$ aws iam list-instance-profiles</screen>
        <para>
          The <replaceable>SUBNET_ID</replaceable> will depend on your
          network configuration. If you created your setup using the First
          Run Wizard you will most likely want the instance to run in the
          subnet created by the wizard. Thus, you can obtain the value by
          inspecting the properties of the running ECS Instance.
        </para>
        <para>
          Once the instance is running and if your cluster is named
          <systemitem>default</systemitem> you can confirm that
          the instance has attached itself to the cluster as follows:
        </para>
        <screen>$ aws ecs describe-clusters</screen>
        <para>
          The <literal>registeredContainerInstancesCount</literal>
          entry in the output provides the number of instances considered to
          be part of the cluster. If you used the First Run Wizard to create
          the cluster the number should be at least 2 after you launch the
          &sls; ECS instance.
        </para>
      </listitem>
      <listitem>
        <para>
          If you used the First Run Wizard you already have an <link
          xlink:href="https://aws.amazon.com/autoscaling/">Auto Scaling</link>
          group. You can <link
          xlink:href="http://docs.aws.amazon.com/cli/latest/reference/autoscaling/attach-instances.html">add</link>
          the running &sls; instance to the existing group, or simply remove
          the default group. Removing the group created by the ECS First Run
          Wizard will also terminate the ECS Amazon AMI and you will be left
          with the running SUSE Linux Enterprise Server ECS optimized instance
          launched above.
        </para>
        <para>
          The autoscaling feature provides parallel functionality that is not
          strictly necessary for operating container instances. The First Run
          Wizard creates an autoscaling group as a good practice to ensure
          that at least always 1 container host is running.
        </para>
      </listitem>
    </orderedlist>
    <sect2 xml:id="alternative-cluster-name">
      <title>Alternative cluster name</title>
      <para>
        If you chose a name other than
        <emphasis role="strong">default</emphasis> for your cluster it is
        necessary to configure the instance to attach itself to this
        cluster. The configuration consists of setting the
        <emphasis role="strong">ECS_CLUSTER</emphasis>
        variable as follows:
      </para>
      <orderedlist>
        <listitem>
          <para>
            Login to the running ECS instance via ssh.
          </para>
        </listitem>
        <listitem>
          <para>
            Edit the environment file
            <filename>/etc/ecs/ecs.config</filename>
            and add an entry of the form:
          </para>
          <para>
            ECS_CLUSTER=name
          </para>
          <para>
            The amazon ECS init launcher will read in the environment
            file and populate the information into the environment prior
            to starting the ECS agent. A complete list of configuration
            options can be found at: <link xlink:href="https://github.com/aws/amazon-ecs-agent#environment-variables">Agent Configuration Variables</link>
          </para>
        </listitem>
        <listitem>
          <para>
            Restart the service with:
          </para>
          <screen>$ sudo systemctl restart amazon-ecs</screen>
          <para>
            The current instance will be detached from the default
            cluster and will be re-attached to the configured cluster
            name.
          </para>
          <para>
            Watching <filename>/var/log/ecs/ecs-agent.log.*</filename>
            will tell you if the expected cluster is used.
          </para>
        </listitem>
      </orderedlist>
    </sect2>
 </sect1>
 <sect1 xml:id="caveats">
    <title>Additional Considerations</title>
    <para>
      The integrated ECS service requires access to Amazon S3 to download a
      pre-built container. This implies that if you start an ECS instance that
      has no route to reach Amazon S3 the initialization will fail and the
      container host instance will not be able to attach itself to your
      cluster. Should you end up in a situation where the instance does not
      attach itself to your <emphasis role="strong">default</emphasis>
      cluster, you can modify your network configuration to ensure a route
      to Amazon S3 and then simply log into your container instance as start
      the service as follows:
    </para>
    <screen>$ systemctl start amazon-ecs.service</screen>
 </sect1>
 <sect1 xml:id="using-sles-containers">
    <title>Using &sls; Containers</title>
    <para>
      &sls; &docker; images are not available on &dhub;. However, &suse;
      provides pre-build docker images as packages in the
      SLE-Module-Containers12-Updates repository. Given that your launched
      instance has a route to the Internet and that the traffic originates
      with an IP address assigned by EC2 the instance will automatically
      register with an update server and the SLE-Module-Containers12-Updates
      repository will be configured.  Once configured installing a
      &sls; &docker; image is simple:
    </para>
    <screen>$ zypper se docker-image</screen>
    <para>
      Install the image you are interested in, the &sls; 12 image for example:
    </para>
    <screen>$ zypper in sles12-docker-image</screen>
    <para>
      The &sls; license does not allow you to push this image to a public
      docker registry. However you can use the Amazon hosted private <link
      xlink:href="https://aws.amazon.com/ecr/">Container Registry</link> to
      store &sls; containers.
    </para>
    <para>
      For additional details about &sls; &docker; images see section 6 of the
      <link
      xlink:href="https://www.suse.com/documentation/sles-12/dockerquick/data/dockerquick.html#sec_docker_sle_images">Quick
      Start Guide</link>.
    </para>
 </sect1>
 <sect1 xml:id="image-storage">
   <title>Docker Image Storage</title>
   <para>
     The &sls; ECS image uses btrfs as the storage backend for &docker; image
     storage. The image storage is self contained in the
     <filename>/var/lib/docker-storage.btrfs</filename> file that is mounted
     to <filename>/var/lib/docker</filename>. The image storage is configured
     to be 100 GB in size. This is thinly provisioned and thus does not
     actually take up 100 GB of space on the root file system. It is the users
     responsibility to start an instance with a sufficiently large root volume
     to store the docker images.
   </para>
   <para>
     If you store a large number of &docker; images or you want to safeguard
     your local docker images from accidental deletion you may consider
     to place the image storage onto an external
     <link xlink:href="https://aws.amazon.com/ebs/">Elastic Block Store</link>
     device. If you format the device with btrfs no changes to the docker
     configuration are required.
   </para>
   <note>
     <para>
       The device must be mounted to
       <filename>/var/lib/docker</filename>.
     </para>
   </note>
   <para>
     If you choose another storage backend you will need to modify
     <filename>/etc/sysconfig/docker</filename> to pass the appropriate
     configuration options to docker at start up. Please consult the standard
     docker
     <link xlink:href="https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/">documentation</link>
     for storage configuration and storage related options.
   </para>
 </sect1>
 <sect1 xml:id="cleanup">
   <title>Clean up</title>
   <para>
     If you decide that you want to clean up and shut everything down there
     are a few additional steps to take when compared to terminating a
     system that is not associated with a cluster.
   </para>
   <para>
     In order to delete a cluster the tasks count of the tasks associated
     with the cluster must be zero.
   </para>
   <screen>$ aws ecs update-service \
     --service <replaceable>TASK_NAME</replaceable> \
     --desired-count 0
   </screen>
   <para>
     Where <replaceable>TASK_NAME</replaceable> is the name of the task
     associated with the cluster. If you used the Quick Launch Wizard and
     selected <guimenu>Amazon ECS sample</guimenu> the
     <replaceable>TASK_NAME</replaceable> is <literal>sample-webapp</literal>.
   </para>
   <para>
     After setting the task/service count to zero as shown above you can
     delete the task/service as follows:
   </para>
   <screen>$ aws ecs delete-service --service <replaceable>TASK_NAME</replaceable></screen>
   <para>
     As mentioned previously, the First Run Wizard also creates an autoscaling
     group. This group also needs to be deleted.
   </para>
   <note>
     <para>
       Any running instances associated with the autoscaling group will be
       terminated when the autoscaling group is deleted.
     </para>
   </note>
   <screen>$ aws autoscaling delete-auto-scaling-group \
     --auto-scaling-group-name <replaceable>GROUP_NAME</replaceable>
   </screen>
   <para>
     Now you are ready to delete the cluster.
  </para>
  <screen>$ aws ecs delete-cluster --cluster <replaceable>CLUSTER_NAME</replaceable></screen>
 </sect1>
</article>

