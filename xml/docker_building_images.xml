<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
xml:id="docker-building-images" xml:lang="en">
 <title>Creating Custom Images</title>
 <para>
  For creating your custom image you need a base &docker; image of &slsa;. You
  can use any of the pre-built &slsa; images that you can obtain as described
  in <xref linkend="Customizing-Pre-build-Images"/>.
 </para>
 <note>
  <title>No &slsa; Images in &dhub;</title>
  <para>
   Usually you can pull a variety of base &docker; images from the
   <link xlink:href="https://hub.docker.com/">docker hub</link> but that does
   not apply for &slsa;. Currently we cannot distribute &slsa; images for
   &deng; because there is no way to associate an End-User License Agreement
   (EULA) to a &docker; image. <literal>sle2docker</literal> enables you to
   import pre-built &slsa; images that you can use for creating base &slsa;
   images.
  </para>
 </note>
 <para>
  After you obtain your base docker image, you can modify the image by using a
  <filename>Dockerfile</filename> (usually placed in the build directory). Then
  use the standard building tool to create your custom image:
 </para>
<screen>docker build <replaceable>PATH_TO_BUILD_DIRECTORY</replaceable></screen>
 <para>
  For more <literal>docker build</literal> options, refer to the
  <link xlink:href="https://docs.docker.com/engine/reference/commandline/build/">official
  Docker documentation</link>.
 </para>
 <note>
  <title>Dockerizing Your Applications</title>
  <para>
   You may want to write a dockerfile for your own application that should be
   run inside a docker container. For a procedure refer to
   <xref linkend="docker-dockerizing-application"/>.
  </para>
 </note>
<!-- This section is commented out after discussion with Frederica as KIWI should not be used for building base images outside SUSE. Even though it is possible, the only supported way is to activate pre-built images of SLES -->
<!--
        <sect1 xml:id="Building-Base-Images-KIWI">
                <title>Building Base &slsa; Images with KIWI</title>
                <para>
                 KIWI is a command line tool that enables you to build images in a variety of formats. You can use the tool to build a base docker image of &slsa;. For more details about KIWI installation and usage, refer to the <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.introduction">KIWI documentation</link>.
                </para>
                <para>
                The procedure of building docker images is given in the <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.docker">Docker Images chapter</link>.
                </para>
        </sect1>
-->
 <sect1 xml:id="Building-Pre-build-Images">
  <title>Obtaining Base &slsa; Images</title>

  <para>
   How to obtain a pre-built base image depends on the &productname; version:
  </para>

  <variablelist>
   <varlistentry>
    <term>Up to &slsa;&nbsp;12 SP2</term>
    <listitem>
     <screen>&prompt.sudo;zypper in sles11sp4-docker-image</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&slsa;&nbsp;12 SP3 and higher</term>
    <listitem>
     <screen>docker pull registry.suse.com/suse/sles12sp4</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Pre-built images do not have repositories configured. But when the &docker;
   host has an SLE subscription that provides access to the product used in the
   image, Zypper will automatically have access to the right repositories.
  </para>

  <para>
   If you have obtained the image with Zypper, you need to activate it. Proceed as follows:
  </para>

  <procedure>
   <title>Activating the Base Image for up to &slsa;&nbsp;12 SP2</title>
   <step>
    <para>
     Get the proper image name with <literal>sle2docker</literal> by running
    </para>
    <screen>sle2docker list</screen>
   </step>
   <step>
    <para>
     Activate the image by using the image name from the previous step:
    </para>
    <screen>sle2docker activate <emphasis>PRE-BUILT_IMAGE_NAME</emphasis></screen>
   </step>
   <step>
    <para>
     Check if the image was successfully activated by running
    </para>
    <screen>sle2docker</screen>
   </step>
  </procedure>

  <para>
   You can customize the docker image as described in
   <xref linkend="Customizing-Pre-build-Images"/>.
  </para>
   <para>
    The <literal>latest</literal> tag refers to the most recently built and
    published image for the newest Service Pack release, while builds for a
    specific Service Pack can be referenced by
    <literal><replaceable>MAJOR</replaceable>.<replaceable>SP</replaceable></literal>.
    To refer to a specific image build, the build identification numbers need
    to be appended, e.g. <literal>15.0.3.2.1</literal> or
    <literal>15.1.2.3</literal>. The full reference including the tag to a
    specific image is part of the meta information, see
    <xref linkend="sec-docker-sle-images-metainfo"/>.
   </para>

 </sect1>
 <sect1 xml:id="Customizing-Pre-build-Images">
  <title>Customizing &slsa; &docker; Images</title>

  <para>
   The pre-built images do not have any repository configured and do not
   include any modules or extensions. They contain a
   <link xlink:href="https://github.com/SUSE/container-suseconnect">zypper
   service</link> that contacts either the &scc; (SCC) or your &smtool;
   (SMT) server, according to the configuration of
   the SLE host that runs the Docker container. The service obtains the list of
   repositories available for the product used by the &docker; image. You can
   also directly declare extensions in your <filename>Dockerfile</filename>
   (for details refer to
   <xref linkend="sec-docker-sle-images-customizing-the-images-extensions"/>.
  </para>

  <para>
   You do not need to add any credentials to the &docker; image because the
   machine credentials are automatically injected into the container by the
   &docker; daemon. They are injected inside of the
   <literal>/run/secrets</literal> directory. The same applies to the
   <filename>/etc/SUSEConnect</filename> file of the host system, which is
   automatically injected into the <filename>/run/secrets</filename> directory.
  </para>

  <note>
   <title>Credentials and Security</title>
   <para>
    The contents of the <filename>/run/secrets</filename> directory are never
    committed to a &docker; image, hence there is no risk of your credentials
    leaking.
   </para>
  </note>
   <note xml:id="build-images-different-codebase">
   <title>Building Images on Systems Registered with &rmt;</title>

   <para>
     When the host system used for building &docker; images is registered
    against &rmt;, the default behavior allows only building containers of the 
    same code base as the host. For example, if your &docker; host is a
    &slea;&nbsp;15 system you can only build &slea;&nbsp;15-based images
    on that host by default. To build images for a different &slea; version, for 
    example &slea;&nbsp;12 on a &slea;&nbsp;15 host,
    the host machine credentials for the target release can be injected into
    the container as outlined below.
</para>
<para>    
    When the host system is registered again &scc; this
    restriction does not apply.
   </para>
  </note>

  <note>
    <title>Building Container Images in On-Demand &slea; Instances in the Public Cloud</title>

    <para>
      When building container images on &slea; instances that were launched as
      so-called "on-demand" or "pay as you go" instances on a Public Cloud 
      (AWS, GCE, or Azure), some additional steps have to be performed.
      For installing packages and updates, the "on-demand" public cloud
      instances are connected to a public cloud-specific update infrastructure,
      which is based on &rmt; servers operated by &suse; on the various Public
      Cloud Providers. Some additional steps are required to locate the required 
      services and authenticate with them.
    </para>
    <para>
      A new service was introduced to enable this, called 
      <literal>containerbuild-regionsrv</literal>. This service is available 
      in the public cloud images provided through the
      Marketplaces of the various Public Cloud Providers. So before building
      an image, this service has to be started on the public cloud instance by
      running the following command:
      </para>
    <screen>&prompt.sudo;systemctl start containerbuild-regionsrv</screen>

    <para>
      To start it automatically after system startup, enable it with
      <command>systemctl</command>:
    </para>

    <screen>&prompt.sudo;systemctl enable containerbuild-regionsrv</screen>

    <para>
      The Zypper plugins provided by the &slea; base images will then connect
      to this service for retrieving authentication details and information about
      which update server to talk to. In order for that to work the container
      has to be built with host networking enabled, like the following example:
    </para>
    <screen>&prompt.user;docker build --network host <replaceable>build-directory/</replaceable></screen>

    <para>
      Since update infrastructure in the Public Clouds is based upon &rmt;,
      the same restrictions with regard to building &slea; images for &slea;
      versions differing from the &slea; version of the host apply here as well
      (see <xref linkend="build-images-different-codebase"/>).
    </para>
  </note>

  <para>
   To obtain the list of repositories use the following command:
  </para>

<screen>zypper ref -s</screen>

  <para>
   It will automatically add all the repositories to your container. For each
   repository added to the system a new file will be created under
   <command>/etc/zypp/repos.d</command>. The URLs of these repositories include
   an access token that automatically expires after 12 hours. To renew the
   token call the <command>zypper ref -s</command> command. It is secure to
   commit these files to a &docker; image.
  </para>

  <para>
   If you want to use a different set of credentials, place a custom
   <filename>/etc/zypp/credentials.d/SCCcredentials</filename> file inside of
   the Docker image. It contains the machine credentials that have the
   subscription you want to use. The same applies to the
   <filename>SUSEConnect</filename> file: to override the file available on the
   host system that is running the &docker; container, add a custom
   <filename>/etc/SUSEConnect</filename> file inside of the &docker; image.
  </para>

  <para>
   Now you can create a custom &docker; image by using a
   <literal>Dockerfile</literal>. If you want to create a custom image, refer to
   <literal>Dockerfile</literal> as described in <xref
   linkend="sec-docker-sle-images-customizing-the-images-sles12"
   xrefstyle="select:label"/>. In
   case you would like to move your application to a &docker; container,
   refer to <xref linkend="docker-dockerizing-application"/>.
   After you have edited the <filename>Dockerfile</filename>, build the image by
   running the following command in the same directory in which the
   <filename>Dockerfile</filename> resides:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <xref linkend="sec-docker-sle-images-customizing-the-images-sles11sp4"/>
        for &slea;&nbsp;11 SP4
      </para>
    </listitem>
    <listitem>
      <para>
        <xref linkend="sec-docker-sle-images-customizing-the-images-sles12"/> for &slea;&nbsp;12
      </para>
    </listitem>
  </itemizedlist>

 <para>
  In case you would like to move your application to a &docker; container, refer
  to <xref linkend="docker-dockerizing-application"/>.
 </para>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-sles11sp4">
   <title>Creating a Custom &slea;&nbsp;11 SP4 Image</title>
   <para>
    The following <filename>Dockerfile</filename> creates a simple &docker; image based on
    &slea;&nbsp;11 SP4:
   </para>
<screen>FROM suse/sles11sp4:latest

RUN zypper ref -s
RUN zypper -n in vim</screen>
   <para>
    When the &docker; host machine is registered against an internal &smt;
    server, the &docker; image requires the SSL certificate used by &smt;:
   </para>
<screen>FROM suse/sles11sp4:latest

# Import the crt file of our private SMT server
ADD http://smt.test.lan/smt.crt /etc/ssl/certs/smt.pem
RUN c_rehash /etc/ssl/certs

RUN zypper ref -s
RUN zypper -n in vim</screen>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-sles12">
   <title>Creating a Custom &slea;&nbsp;12 Image</title>
   <para>
    The following <filename>Dockerfile</filename> creates a simple &docker; image based on
    &slea;&nbsp;12 SP4:
   </para>
<screen>FROM registry.suse.com/suse/sles12sp4:latest

RUN zypper ref -s
RUN zypper -n in vim</screen>
   <para>
    When the &docker; host machine is registered against an internal &smt;
    server, the &docker; image requires the SSL certificate used by &smt;:
   </para>
<screen>FROM registry.suse.com/suse/sles12sp4:latest

# Import the crt file of our private SMT server
ADD http://smt.test.lan/smt.crt /etc/pki/trust/anchors/smt.crt
RUN update-ca-certificates

RUN zypper ref -s
RUN zypper -n in vim</screen>
  </sect2>
  <sect2 xml:id="sec-docker-sle-images-metainfo">
   <title>Meta Information in &slea; Container Images</title>
   <para>
    Starting from &sle;&nbsp;12&nbsp;SP3, all base container images include information
    such as a build time stamp and description. This information is provided in the form of
    labels attached to the base images and is thus available for derived images and
    containers as well. It can be displayed with <command>docker inspect</command>:
   </para>
<screen>&prompt.user;docker inspect registry.suse.com/suse/sle15
[...]
            "Labels": {
                "com.suse.sle.base.created": "2019-06-20T18:21:37.729383880Z",
                "com.suse.sle.base.description": "Image containing a minimal environment for containers based on SUSE Linux Enterprise Server 15 SP1.",
                "com.suse.sle.base.disturl": "obs://build.suse.de/SUSE:SLE-15-SP1:Update:CR/images/20efed47827dc48da9537c1aeed4dbe2-sles15-image",
                "com.suse.sle.base.reference": "registry.suse.com/suse/sle15:15.1.6.2.31",
                "com.suse.sle.base.title": "SUSE Linux Enterprise Server 15 SP1 Base Container",
                "com.suse.sle.base.url": "https://www.suse.com/products/server/",
                "com.suse.sle.base.vendor": "SUSE LLC",
                "com.suse.sle.base.version": "15.1.6.2.31",
                "org.openbuildservice.disturl": "obs://build.suse.de/SUSE:SLE-15-SP1:Update:CR/images/20efed47827dc48da9537c1aeed4dbe2-sles15-image",
                "org.opencontainers.image.created": "2019-06-20T18:21:37.729383880Z",
                "org.opencontainers.image.description": "Image containing a minimal environment for containers based on SUSE Linux Enterprise Server 15 SP1.",
                "org.opencontainers.image.title": "SUSE Linux Enterprise Server 15 SP1 Base Container",
                "org.opencontainers.image.url": "https://www.suse.com/products/server/",
                "org.opencontainers.image.vendor": "SUSE LLC",
                "org.opencontainers.image.version": "15.1.6.2.31",
                "org.opensuse.reference": "registry.suse.com/suse/sle15:15.1.6.2.31"
            }
[...]</screen>
  <para>
   All labels are shown twice. This is necessary to ensure that in derived images the
   information about the original base image is still visible and not overwritten.
  </para>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-extensions">
   <title>Adding &slea; Extensions and Modules to Images</title>
   <para>
    You may have subscriptions to SLE extensions or modules that you would like
    to use in your custom image. To add them to the &docker; image, proceed as
    follows:
   </para>
   <procedure>
    <title>Adding Extension and Modules</title>
    <step>
     <para>
      Add the following into your <filename>Dockerfile</filename>:
     </para>
<screen>ADD *.repo /etc/zypp/repos.d/
ADD *.service /etc/zypp/services.d
RUN zypper refs &amp;&amp; zypper refresh</screen>
    </step>
    <step>
     <para>
      Copy all <filename>.service</filename> and <filename>.repo</filename>
      files that you will use into the directory where you will build the
      &docker; image from the <filename>Dockerfile</filename>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
<!-- This section is incomplete as such a solution is not currently supported by SLES.
        <sect1 xml:id="Automating-Images-Builds">
                <title>Automation of Images Building</title>
                <para>
                In enterprise environment you typically need to automate your deployment process, from developer's commits to running the application. In case you use your own dockerregistry, you need to set up a pipeline between the versioning system and your private registry. To set up a pipeline you need to perform the following steps:
                </para>
                <orderedlist>
                        <listitem>
                                <para>
                                configure your versioning system to use hooks.
                                </para>
                        </listitem>
                        <listitem>
                                <para>
                                choose any of continuous integration tools to receive the hooks and then to perform the build process.
                                </para>
                        </listitem>
                        <listitem>
                                <para>
                                upload the built image to your docker registry.
                                </para>
                        </listitem>
                </orderedlist>
                <sect2 xml:id="Configuring-Versioning-System">
                        <title>Configuring Versioning Systems</title>
                        <para>
                        Most of the currently used versioning systems enables you to configure hooks. As soon as you perform a particular action, the versioning system sends information to the continuos integration tool that a build should be performed. For example, in case of git used with Github, Github sends a <literal>POST</literal> request to configured URLs. You can select from various types of triggering events or use the default one - <literal>push</literal> to a configured branch.
                        </para>
                        <para>
                        Your repository must contain besides your application source code, also a particular <filename>Dockerfile<filename> that defines your image.
                        </para>
                </sect2>
        </sect1>
        -->
</chapter>
