<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="cha-working-with-containers" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Working with Containers</title>
 <para>
  After you have created your images, you can start your containers based on
  that image. You can run an instance of the image by using the <command>docker
  run</command> command. &deng; then creates and starts the
  container. The command <command>docker run</command> takes several arguments:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    A container name&mdash;it is recommended to name your container.
   </para>
  </listitem>
  <listitem>
   <para>
    Specify a user to use in your container.
   </para>
  </listitem>
  <listitem>
   <para>
    Define a mount point.
   </para>
  </listitem>
  <listitem>
   <para>
    Specify a particular host name, etc.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="Starting-Containers">
  <title>Starting Containers</title>
  <para>
   The container typically exits if its main process finishes. For example, if
   your container starts a particular application, the container exits as soon
   as you quit the application. You can start the container again by running:
  </para>
  <screen>&prompt.user;docker start -ai &lt;container name&gt;</screen>
  <para>
   To remove unused containers:
  </para>
  <screen>&prompt.user;docker rm &lt;container name&gt;</screen>
 </sect1>
 <sect1 xml:id="Linking-Containers">
  <title>Linking Containers</title>

  <para>
   &deng; enables you to link containers together, which allows containers
   on the same host server to communicate with each other. If you use the
   standard networking model, you can link containers by using the
   <literal>--link</literal> option when running containers:
  </para>

  <para>
   First, create a container to link to:
  </para>
  <screen>&prompt.user;docker run -d --name sles sles12sp4 /bin/bash</screen>

  <para>
   Then create a container that will link to the &productname; container:
  </para>
  <screen>&prompt.user;docker run --link sles:sles sles12sp4 /bin/bash</screen>

  <para>
   The container that links to &productname; has defined environment variables that
   enable connecting to the linked container.
  </para>
 </sect1>
</chapter>
