<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="storage_filesystems.xml" version="5.0" xml:id="cha-filesystems" xml:lang="zh-tw"> <title>Linux 中檔案系統的綜覽</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
      <abstract>
        <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 隨附了不同的檔案系統供您選擇，包括 Btrfs、Ext4、Ext3、Ext2 和 XFS。每個檔案系統都有其各自的優點和缺點。如需 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中主要檔案系統的並排功能比較，請參閱 <link xlink:href="https://www.suse.com/releasenotes/x86_64/SUSE-SLES/15-SP3/#file-system-comparison"/> (<citetitle>支援的檔案系統比較</citetitle>)。本章包含有關這些檔案系統的工作方式及其優點的綜覽。
   </para>
      </abstract>
    </info>
    <para>
  在 SUSE Linux Enterprise 12 中，Btrfs 是作業系統的預設檔案系統，XFS 是所有其他使用案例的預設檔案系統。此外，SUSE 仍繼續支援 Ext 系列的檔案系統和 OCFS2。依預設，Btrfs 檔案系統將設定為使用子磁碟區。對於使用 snapper 基礎架構的根檔案系統，將會自動啟用快照。如需 snapper 的詳細資訊，請參閱<xref linkend="cha-snapper"/>。
 </para>
 <para>
  專業的高效能設定可能需要高可用儲存系統。為符合高效能叢集案例的要求，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 在 High Availability Extension 附加產品中加入了 OCFS2 (Oracle Cluster File System 2) 與 Distributed Replicated Block Device (DRBD)。本指南中將不會介紹這些先進的儲存系統。如需資訊，請參閱<link xlink:href="https://documentation.suse.com/sle-ha-15/html/SLE-HA-all/book-administration.html">
  <citetitle><citetitle>《SUSE Linux Enterprise High Availability Extension 管理指南》</citetitle></citetitle></link>。
 </para>
 <para>
  請記住，沒有一種檔案系統能夠完美適合所有類型的應用程式，這點非常重要。每一種檔案系統都有自己特殊的優、缺點，必須考慮在內。此外，即使是最頂級的檔案系統，也無法取代合理的備份策略。
 </para>
 <para>
  本節中使用的<emphasis>資料完整性</emphasis>和<emphasis>資料一致性</emphasis>這兩個詞彙，並不表示使用者空間資料 (應用程式寫入其檔案中的資料) 的一致性。這項資料是否一致必須由應用程式本身控制。
 </para>
 <para>
  除非在本節中特別指明，否則設定或變更分割區以及檔案系統所需進行的一切步驟，都可以使用 YaST 磁碟分割程式 (也強烈建議使用它) 來執行。如需更多資訊，請參閱<xref linkend="cha-expert-partitioner"/>。
 </para>
 <sect1 xml:id="sec-filesystems-glossary">
  <title>術語</title>

  <variablelist>
   <varlistentry>
    <term>中繼資料</term>
    <listitem>
     <para>
      資料結構屬於檔案系統的內部結構。它可確保磁碟上的所有資料都組織有序並可進行存取。。幾乎每一種檔案系統都有自己的中繼資料結構，這也是檔案系統展現出不同效能特性的原因所在。它對於維護中繼資料的完整極為重要，因為要不是如此，檔案系統上所有資料便無法存取。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>inode</term>
    <listitem>
     <para>
      檔案系統的資料結構包含檔案的各種資訊，包括大小、連結數量、實際儲存檔案內容之磁碟區塊的指標、建立、修改和存取的日期與時間。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>日誌</term>
    <listitem>
     <para>
      在檔案系統的內容中，日誌是一種磁碟上的結構，包含了檔案系統用於儲存有關檔案系統之中繼資料變更資訊的一種記錄。日誌記錄可大大降低檔案系統的復原時間，因為有了它就不需要在系統啟動時執行檢查整個檔案系統這一冗長的搜尋程序。而是只重複檢查日誌。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-filesystems-major-btrfs">
  <title>Btrfs</title>

  <para>
   Btrfs 是 Chris Mason 開發的「寫時複製」(copy-on-write，COW) 檔案系統。它以 Ohad Rodeh 開發的支援 COW 的 B 樹為基礎。Btrfs 是記錄樣式的檔案系統。它不會記錄區塊變更，而是將它們寫入新位置，然後將變更連結起來。直到最後一次寫入時才會提交新變更。
  </para>

  <sect2 xml:id="sec-filesystems-major-btrfs-features">
   <title>主要功能</title>
   <para>
    Btrfs 提供容錯、修復與簡易管理功能，例如：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      可寫入快照，可讓您在套用更新之後有需要時輕鬆地復原系統，或者可讓您備份檔案。
     </para>
    </listitem>
    <listitem>
     <para>
      子磁碟區支援：Btrfs 會在為其指定的空間池中建立預設子磁碟區。它可讓您建立其他子磁碟區，做為同一個空間池內的不同檔案系統。子磁碟區的數量僅受為池配置的空間限制。
     </para>
    </listitem>
    <listitem>
     <para>
      Btrfs 指令行工具中提供了線上檢查和修復功能 <command>scrub</command>。它會在假設樹狀結構沒有問題的前提下，驗證資料和中繼資料的完整性。您可以在掛接的檔案系統上定期執行 scrub；在一般操作過程中，該指令會做為背景程序執行。
     </para>
    </listitem>
    <listitem>
     <para>
      中繼資料和使用者資料分別使用不同的 RAID 層級。
     </para>
    </listitem>
    <listitem>
     <para>
      中繼資料和使用者資料分別使用不同的檢查總數，可提高錯誤偵測效率。
     </para>
    </listitem>
    <listitem>
     <para>
      與 Linux 邏輯磁碟區管理員 (LVM) 儲存物件整合。
     </para>
    </listitem>
    <listitem>
     <para>
      與 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上的 YaST 磁碟分割程式及 AutoYaST 整合。這也包括在多個裝置 (MD) 和裝置對應程式 (DM) 儲存組態上建立 Btrfs 檔案系統。
     </para>
    </listitem>
    <listitem>
     <para>
      從現有的 Ext2、Ext3 和 Ext4 檔案系統進行離線移轉。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/boot</filename> 的開機載入程式支援，如此即允許從 Btrfs 分割區開機。
     </para>
    </listitem>
    <listitem>

     <para>
      <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> <phrase role="productnumber"><phrase os="sles;sled"> 15 SP3</phrase></phrase> 中的 RAID0、RAID1 和 RAID10 組態檔案支援多磁碟區 Btrfs。尚不支援更高的 RAID 層級，但安裝未來發佈的 Service Pack 後可能會支援。
     </para>
    </listitem>
    <listitem>
     <para>
      使用 Btrfs 指令設定透明壓縮。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-btrfs-suse">
   <title><phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上的根檔案系統設定</title>
   <para>
    依預設，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 設定為對根分割區使用 Btrfs 和快照。快照可讓您在套用更新之後有需要時輕鬆地復原系統，或者可讓您備份檔案。快照可透過 SUSE Snapper 基礎架構輕鬆管理，如<xref linkend="cha-snapper"/>中所述。如需 SUSE Snapper 專案的一般資訊，請參閱 OpenSUSE.org (<link xlink:href="http://snapper.io"/>) 上的 Snapper 入口 Wiki。
   </para>
   <para>
    使用快照復原系統時，必須確保在復原期間，資料 (例如使用者的主目錄、Web 和 FTP 伺服器內容或記錄檔案) 不會遺失或被覆寫。這一點透過使用根檔案系統上的 Btrfs 子磁碟區來實現。子磁碟區可從快照中排除。安裝期間，根據 YaST 建議，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上的預設根檔案系統設定包含下列子磁碟區。由於下述原因，它們會從快照中排除。
   </para>
   <xi:include href="snapshot_excludes_i.xml"/>
   <warning>
    <title>復原支援</title>
    <para>
     僅當您未移除任何預先設定的子磁碟區時，SUSE 才支援復原。不過，您可以使用 YaST 磁碟分割程式新增子磁碟區。
    </para>
   </warning>
   <sect3 xml:id="sec-filesystems-major-btrfs-compress">
    <title>掛接壓縮的 Btrfs 檔案系統</title>
    <remark>toms 2015-09-16: FATE#316463</remark>
    <note>
     <title>GRUB 2 和壓縮根</title>
     <para>
      GRUB 2 無法從 lzo 或 zstd 壓縮根檔案系統開機。請使用 zlib 壓縮，或者如果您想要為根使用 lzo 或 zstd 壓縮，請建立一個獨立的 <filename>/boot</filename> 分割區。
     </para>
    </note>
    <para>
     Btrfs 檔案系統支援透明壓縮。如果啟用，Btrfs 將在寫入時壓縮檔案資料，並在讀取時解壓縮檔案資料。
    </para>
    <para>
     使用 <option>compress</option> 或 <option>compress-force</option> 掛接選項，並選取壓縮演算法 <literal>zstd</literal>、<literal>lzo</literal> 或 <literal>zlib</literal> (預設)。zlib 壓縮的壓縮率更高，而 lzo 的壓縮速度更快，並且佔用的 CPU 負載更小。zstd 演算法提供了一種新式折衷方法，其效能接近 lzo，而壓縮率與 zlib 類似。
    </para>
    <para>
     例如：
    </para>
<screen><prompt role="root">root # </prompt>mount -o compress=zstd /dev/sdx /mnt</screen>
    <para>
     如果您建立了一個檔案並在其中寫入資料，而壓縮後的結果大於或等於未壓縮時的大小，則將來針對此檔案執行寫入操作後，Btrfs 會一直跳過壓縮。如果您不希望有這種行為，請使用 <option>compress-force</option> 選項。對於包含一些初始未壓縮資料的檔案而言，此選項可能很有用。
    </para>
    <para>
     請注意，壓縮只會作用於新檔案。如果使用 <option>compress</option> 或 <option>compress-force</option> 選項掛接檔案系統，則在未壓縮情況下寫入的檔案將不會壓縮。此外，永遠不會壓縮包含 <option>nodatacow</option> 屬性之檔案的內容：
    </para>
<screen><prompt role="root">root # </prompt><command>chattr</command> +C <replaceable>FILE</replaceable>
<prompt role="root">root # </prompt><command>mount</command> -o nodatacow  /dev/sdx /mnt</screen>
    <para>
     加密與任何壓縮操作無關。在此分割區中寫入一些資料後，請列印詳細資料：
    </para>
<screen><prompt role="root">root # </prompt>btrfs filesystem show /mnt
btrfs filesystem show /mnt
Label: 'Test-Btrfs'  uuid: 62f0c378-e93e-4aa1-9532-93c6b780749d
        Total devices 1 FS bytes used 3.22MiB
      devid    1 size 2.00GiB used 240.62MiB path /dev/sdb1</screen>
    <para>
     如果您希望此設定是永久性的，請在 <filename>/etc/fstab</filename> 組態檔案中新增 <option>compress</option> 或 <option>compress-force</option> 選項。例如：
    </para>
<screen>UUID=1a2b3c4d /home btrfs subvol=@/home,<emphasis role="strong">compress</emphasis> 0 0</screen>
   </sect3>
   <sect3 xml:id="sec-filesystems-major-btrfs-suse-mount">
    <title>掛接子磁碟區</title>
    <para>
     在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上，從快照進行系統復原的程序透過先從快照開機來執行。如此，您便可在執行復原之前，在系統執行時檢查快照。透過掛接子磁碟區，可實現從快照開機的目的 (一般不需要如此)。
    </para>
    <para>
     除了<xref linkend="sec-filesystems-major-btrfs-suse"/>中列出的子磁碟區之外，系統中還存在一個名為 <literal>@</literal> 的磁碟區。這是預設子磁碟區，將掛接為根分割區 (<filename>/</filename>)。其他子磁碟區將掛接到此磁碟區中。
    </para>
    <para>
     從快照開機時，使用的不是 <literal>@</literal> 子磁碟區，而是快照。快照中包括的檔案系統部分將以唯讀方式掛接為 <filename>/</filename>。其他子磁碟區將以可寫入方式掛接到快照中。依預設，此狀態為臨時狀態，下次重新開機時將還原先前的組態。若要使它成為永久狀態，請執行 <command>snapper rollback</command> 指令。這將使目前開機的快照成為新的<emphasis>預設</emphasis>子磁碟區，在重新開機之後將會使用它。
    </para>
   </sect3>
   <sect3 xml:id="sec-filesystems-major-btrfs-suse-space">
    <title>檢查可用空間</title>

    <para>
     通常可以執行 <command>df</command> 指令來檢查檔案系統的使用量。在 Btrfs 檔案系統上，<command>df</command> 的輸出可能有誤導性，因為除了原始資料配置的空間以外，Btrfs 檔案系統也會配置並使用中繼資料的空間。
    </para>
    <para>
     因此，即使看上去仍有大量的可用空間，Btrfs 檔案系統也可能會報告空間不足。在這種情況下，為中繼資料配置的所有空間均會用盡。使用以下指令來檢查 Btrfs 檔案系統上已用和可用的空間：
    </para>
    <variablelist>
     <varlistentry>
      <term><command>btrfs filesystem show</command></term>
      <listitem>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs filesystem show /
Label: 'ROOT'  uuid: 52011c5e-5711-42d8-8c50-718a005ec4b3
        Total devices 1 FS bytes used 10.02GiB
        devid    1 size 20.02GiB used 13.78GiB path /dev/sda3</screen>
       <para>
        顯示檔案系統的總大小及其使用量。如果最後一行中的這兩個值相符，則表示檔案系統上的全部空間都已分配出去。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>btrfs filesystem df</command></term>
      <listitem>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs filesystem df /
Data, single: total=13.00GiB, used=9.61GiB
System, single: total=32.00MiB, used=16.00KiB
Metadata, single: total=768.00MiB, used=421.36MiB
GlobalReserve, single: total=144.00MiB, used=0.00B</screen>
       <para>
        顯示檔案系統的已配置 (<literal>總計</literal>) 空間和已用空間值。如果中繼資料的<literal>總計</literal>和<literal>已用</literal>空間值大致相等，則表示中繼資料的所有空間均已配置。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><command>btrfs filesystem usage</command></term>
      <listitem>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs filesystem usage /
Overall:
    Device size:                  20.02GiB
    Device allocated:             13.78GiB
    Device unallocated:            6.24GiB
    Device missing:                  0.00B
    Used:                         10.02GiB
    Free (estimated):              9.63GiB      (min: 9.63GiB)
    Data ratio:                       1.00
    Metadata ratio:                   1.00
    Global reserve:              144.00MiB      (used: 0.00B)

             Data     Metadata  System
Id Path      single   single    single   Unallocated
-- --------- -------- --------- -------- -----------
 1 /dev/sda3 13.00GiB 768.00MiB 32.00MiB     6.24GiB
-- --------- -------- --------- -------- -----------
   Total     13.00GiB 768.00MiB 32.00MiB     6.24GiB
   Used       9.61GiB 421.36MiB 16.00KiB</screen>
       <para>
        顯示類似前兩個指令合併輸出結果的資料。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     如需詳細資訊，請參閱 <command>man 8 btrfs-filesystem</command> 和 <link xlink:href="https://btrfs.wiki.kernel.org/index.php/FAQ"/>。
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-btrfs-migrate">
   <title>從 ReiserFS 和 ext 檔案系統移轉至 Btrfs</title>
   <para>
    您可以使用 <command>btrfs-convert</command> 工具，將資料磁碟區從現有 ReiserFS 或 Ext (Ext2、Ext3 或 Ext4) 移轉至 Btrfs 檔案系統。該過程允許您對未掛接的 (離線) 檔案系統執行就地轉換，執行此操作可能需要包含 <command>btrfs-convert</command> 工具的可開機安裝媒體。該工具會在原始檔案系統的可用空間內建構 Btrfs 檔案系統，並直接連結至其中包含的資料。裝置上必須有足夠用於建立中繼資料的可用空間，否則轉換將失敗。原始檔案系統將保持不變，Btrfs 檔案系統不會佔用任何可用空間。所需的空間大小取決於檔案系統的內容，可能會因其中包含的檔案系統物件 (例如檔案、目錄、延伸屬性) 數量而異。由於系統會直接參考資料，檔案系統上的資料數量不會影響轉換所需的空間，但使用檔尾壓縮且大小超過 2 KiB 的檔案除外。
   </para>
   <para>
    若要將原始檔案系統轉換為 Btrfs 檔案系統，請執行：
   </para>
<screen><prompt role="root">root # </prompt>btrfs-convert /path/to/device</screen>
   <important>
    <title>檢查 <filename>/etc/fstab</filename></title>
    <para>
     轉換後，需確定 <filename>/etc/fstab</filename> 中對原始檔案系統的所有參考已進行調整，現指示裝置包含 Btrfs 檔案系統。
    </para>
   </important>
   <para>
    轉換後，Btrfs 檔案系統的內容將反映來源檔案系統的內容。來源檔案系統將一直保留，直到您移除了在 <filename><replaceable>fs_root</replaceable>/reiserfs_saved/image</filename> 中建立的相關唯讀影像為止。該影像檔案實際上是轉換前 ReiserFS 檔案系統的一個「快照」，修改 Btrfs 檔案系統時不會對其進行修改。若要移除該影像檔案，請移除 <filename>reiserfs_saved</filename> 子磁碟區：
   </para>
<screen><prompt role="root">root # </prompt>btrfs subvolume delete <replaceable>fs_root</replaceable>/reiserfs_saved</screen>
   <para>
    若要將檔案系統回復到原始檔案系統，請使用以下指令：
   </para>
<screen><prompt role="root">root # </prompt>btrfs-convert -r /path/to/device</screen>
   <warning>
    <title>變更遺失</title>
    <para>
     您在檔案系統掛接為 Btrfs 檔案系統時所做的任何變更都將遺失。切勿在此期間執行任何平衡操作，否則將無法正常還原檔案系統。
    </para>
   </warning>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-btrfs-admin">
   <title>Btrfs 管理</title>
   <para>
    Btrfs 已整合到 YaST 磁碟分割程式和 AutoYaST 中。安裝期間可以使用它來設定根檔案系統的解決方案。安裝之後，您可以使用 YaST 磁碟分割程式來檢視和管理 Btrfs 磁碟區。
   </para>
   <para>
    Btrfs 管理工具提供於 <filename>btrfsprogs</filename> 套件中。如需使用 Btrfs 指令的資訊，請參閱 <command>man 8 btrfs</command>、<command>man 8 btrfsck</command> 和 <command>man 8 mkfs.btrfs</command> 指令。如需 Btrfs 功能的資訊，請參閱 <link xlink:href="http://btrfs.wiki.kernel.org"/> 上的 <citetitle>Btrfs Wiki</citetitle>。
   </para>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-btrfs-quota">
   <title>Btrfs 子磁碟區配額支援</title>
   <para>
    Btrfs 根檔案系統子磁碟區 (例如 <filename>/var/log</filename>、<filename>/var/crash</filename> 或 <filename>/var/cache</filename>) 在正常運作期間可能會使用所有可用的磁碟空間，這會導致系統功能發生問題。為避免出現此狀況，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了 Btrfs 子磁碟區配額支援。只需依據 YaST 建議設定根檔案系統，便可啟用和設定子磁碟區配額。
   </para>
   <sect3 xml:id="setting-btrfs-quotas-using-yast">
    <title>使用 YaST 設定 Btrfs 配額</title>
    <para>
     若要使用 YaST 為根檔案系統的子磁碟區設定配額，請執行下列步驟：
    </para>
    <procedure>
     <step>
      <para>
       啟動 YaST 並選取<menuchoice><guimenu>系統</guimenu><guimenu>磁碟分割程式</guimenu></menuchoice>，然後按一下<guimenu>是</guimenu>確認警告。
      </para>
     </step>
     <step>
      <para>
       在左側窗格中，按一下 <guimenu>Btrfs</guimenu>。
      </para>
     </step>
     <step>
      <para>
       在主視窗中，選取要為其啟用子磁碟區配額的裝置，然後按一下底部的<guimenu>編輯</guimenu>。
      </para>
     </step>
     <step>
      <para>
       在<guimenu>編輯 Btrfs</guimenu> 視窗中，啟用<guimenu>啟用子磁碟區配額</guimenu>核取方塊，然後按一下<guimenu>下一步</guimenu>進行確認。
      </para>
      <figure>
       <title>啟用 Btrfs 配額</title>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="yast2_btrfs_quotas_enable.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="yast2_btrfs_quotas_enable.png" width="75%"/>
        </imageobject>
       </mediaobject>
      </figure>
     </step>
     <step>
      <para>
       從現有子磁碟區清單中，按一下要依配額限制大小的子磁碟區，然後按一下底部的<guimenu>編輯</guimenu>。
      </para>
     </step>
     <step>
      <para>
       在<guimenu>編輯 Btrfs 的子磁碟區</guimenu>視窗中，啟用<guimenu>限制大小</guimenu>並指定最大參考大小。按一下「<guimenu>接受</guimenu>」進行確認。
      </para>
      <figure>
       <title>設定子磁碟區配額</title>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="yast2_btrfs_quotas_set.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="yast2_btrfs_quotas_set.png" width="75%"/>
        </imageobject>
       </mediaobject>
      </figure>
      <para>
       新的大小限制將顯示在子磁碟區名稱旁：
      </para>
      <figure>
       <title>裝置的子磁碟區清單</title>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="yast2_btrfs_quotas_edit.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="yast2_btrfs_quotas_edit.png" width="75%"/>
        </imageobject>
       </mediaobject>
      </figure>
     </step>
     <step>
      <para>
       按一下<guimenu>下一步</guimenu>套用變更。
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 xml:id="setting-btrfs-quotas-using-cmdline">
    <title>在指令行上設定 Btrfs 配額</title>
    <para>
     若要在指令行上設定根檔案系統的子磁碟區配額，請執行下列步驟：
    </para>
    <procedure>
     <step>
      <para>
       啟用配額支援：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs quota enable /</screen>
     </step>
     <step>
      <para>
       取得子磁碟區清單：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume list /</screen>
      <para>
       只能為現有子磁碟區設定配額。
      </para>
     </step>
     <step>
      <para>
       為上一步中所列的其中一個子磁碟區設定配額。子磁碟區可以透過路徑識別 (例如 <filename>/var/tmp</filename>)，也可以透過 <literal>0/<replaceable>子磁碟區 ID</replaceable></literal> 識別 (例如 <literal>0/272</literal>)。下面的範例為 <filename>/var/tmp</filename> 設定 5 GB 的配額。
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs qgroup limit 5G /var/tmp</screen>
      <para>
       大小單位可以是位元組 (5000000000)、KB (5000000K)、MB (5000M) 或 GB (5G)。以位元組為單位產生的值略有不同，因為 1024 位元組 = 1 KB，1024 KB = 1 MB，等等。
      </para>
     </step>
     <step>
      <para>
       若要列出現有配額，請使用以下指令。<literal>max_rfer</literal> 欄以位元組為單位顯示配額。
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs qgroup show -r /</screen>
     </step>
    </procedure>
    <tip>
     <title>取消配額</title>
     <para>
      如果您要取消現有配額，請將配額大小設定為 <literal>none</literal>：
     </para>
 <screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs qgroup limit none /var/tmp</screen>
     <para>
      若要停用某個分割區及其所有子磁碟區的配額支援，請使用 <command>btrfs quota disable</command>：
     </para>
 <screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs quota disable /</screen>
    </tip>
   </sect3>
   <sect3 xml:id="setting-btrfs-quotas-for-more-info">
    <title>更多資訊</title>
    <para>
     如需詳細資料，請參閱 <command>man 8 btrfs-qgroup</command> 和 <command>man 8 btrfs-quota</command>。Btrfs Wiki (<link xlink:href="https://btrfs.wiki.kernel.org/index.php/UseCases"/>) 上的 <citetitle>UseCases</citetitle> 頁面也提供了更多資訊。
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-btrfs-swapping">
	  <title>Btrfs 上的交換</title>
    <important>
     <title>啟用交換建立快照</title>
     <para>
      如果來源子磁碟區中有任何已啟用的交換檔案，您將無法建立快照。
     </para>
    </important>
	   <para>
	    如果滿足與產生的交換檔案相關的以下準則，則 SLES 支援在 Btrfs 檔案系統上的檔案交換：
    </para>
    <itemizedlist>
	    <listitem>
		    <para>
		     交換檔案必須具有 <option>NODATACOW</option> 和 <option>NODATASUM</option> 掛接選項。
		    </para>
	    </listitem>
	    <listitem>
		    <para>
		     不得壓縮交換檔案，您可以透過設定 <option>NODATACOW</option> 和 <option>NODATASUM</option> 掛接選項來確保滿足此準則。兩個選項都會停用交換檔案壓縮。
		    </para>
	    </listitem>
     <listitem>
		    <para>
		     在執行獨佔操作 (例如裝置調整大小、新增、移除或取代) 時，或在執行平衡操作時，不能啟用交換檔案。
		    </para>
	    </listitem>
     <listitem>
		    <para>
		     交換檔案不能是疏鬆檔案。
		    </para>
	    </listitem>
     <listitem>
		    <para>
		     交換檔案不能是內嵌檔案。
		    </para>
	    </listitem>
     <listitem>
		    <para>
		     交換檔案必須位於<literal>單個</literal>配置設定檔檔案系統上。
		    </para>
	    </listitem>
    </itemizedlist>
   </sect2>

  <sect2 xml:id="sec-filesystems-major-btrfs-s-r">
   <title>Btrfs 傳送/接收</title>
   <para>
    Btrfs 允許產生快照來擷取檔案系統的狀態。例如，在系統變更之前和之後，Snapper 可以使用此功能來建立快照，以便進行復原。但是，將快照與傳送/接收功能結合使用，可以在遠端位置建立和維護檔案系統的副本。例如，此功能可用於執行增量備份。
   </para>
   <para>
    <command>btrfs 傳送</command>操作可計算同一個子磁碟區中兩個唯讀快照之間的差異，並將這種差異傳送到某個檔案或 STDOUT。<command>btrfs receive</command> 操作會接收 send 指令的結果，並將其套用至快照。
   </para>
   <sect3 xml:id="sec-filesystems-major-btrfs-s-r-requires">
    <title>先決條件</title>
    <para>
     若要使用傳送/接收功能，需要滿足以下要求：
    </para>
    <itemizedlist>
     <listitem>
      <para>
       來源端 (<literal>傳送</literal>) 和目標端 (<literal>接收</literal>) 各有一個 trfs 檔案系統。
      </para>
     </listitem>
     <listitem>
      <para>
       Btrfs 傳送/接收將對快照執行，因此，相應的資料需要位於 Btrfs 子磁碟區中。
      </para>
     </listitem>
     <listitem>
      <para>
       來源端中的快照需是唯讀的。
      </para>
     </listitem>
     <listitem>
      <para>
       SUSE Linux Enterprise 12 SP2 或更高版本。早期版本的 SUSE Linux Enterprise 不支援傳送/接收。
      </para>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="sec-filesystems-major-btrfs-s-r-backup">
    <title>增量備份</title>
    <para>
     以下程序說明 Btrfs 傳送/接收操作的用法，其中示範了如何在 <filename>/backup/data</filename> (目標端) 建立 <filename>/data</filename> (來源端) 的增量備份。<filename>/data</filename> 需為子磁碟區。
    </para>
    <procedure>
     <title>啟始設定</title>
     <step>
      <para>
       在來源端建立啟始快照 (在本範例中名為 <literal>snapshot_0</literal>)，並確定將其寫入磁碟：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume snapshot -r /data /data/bkp_data
sync</screen>
      <para>
       新的子磁碟區 <filename>/data/bkp_data</filename> 隨即建立。該子磁碟區將用做後續增量備份的基礎，應將其保留以供參考。
      </para>
     </step>
     <step>
      <para>
       將啟始快照傳送至目標端。由於這是啟始的傳送/接收操作，因此需要傳送整個快照：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> bash -c 'btrfs send /data/bkp_data | btrfs receive /backup'</screen>
      <para>
       在目標端建立新子磁碟區 <filename>/backup/bkp_data</filename>。
      </para>
     </step>
    </procedure>
    <para>
     完成啟始設定後，可以建立增量備份，並將目前快照與先前快照之間的差異傳送至目標端。程序永遠是相同的：
    </para>
    <orderedlist>
     <listitem>
      <para>
       在來源端建立新快照。
      </para>
     </listitem>
     <listitem>
      <para>
       將差異傳送至目標端。
      </para>
     </listitem>
     <listitem>
      <para>
       選擇性：重新命名和/或清理兩端中的快照。
      </para>
     </listitem>
    </orderedlist>
    <procedure>
     <title>執行增量備份</title>
     <step>
      <para>
       在來源端建立新快照，並確定將其寫入磁碟。在以下範例中，快照名為 bkp_data_<replaceable>目前日期</replaceable>：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume snapshot -r /data /data/bkp_data_$(date +%F)
sync</screen>
      <para>
       建立新子磁碟區，例如 <filename>/data/bkp_data_2016-07-07</filename>。
      </para>
     </step>
     <step>
      <para>
       將先前快照與您建立的快照之間的差異傳送至目標端。為此，可以使用選項 <option>-p <replaceable>SNAPSHOT</replaceable></option> 指定先前的快照。
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> bash -c 'btrfs send -p /data/bkp_data /data/bkp_data_2016-07-07 \
| btrfs receive /backup'</screen>
      <para>
       建立新子磁碟區 <filename>/backup/bkp_data_2016-07-07</filename>。
      </para>
     </step>
     <step>
      <para>
       因此存在四個快照，每端各有兩個：
      </para>
      <simplelist><member><filename>/data/bkp_data</filename></member><member><filename>/data/bkp_data_2016-07-07</filename></member><member><filename>/backup/bkp_data</filename></member><member><filename>/backup/bkp_data_2016-07-07</filename></member>
      </simplelist>
      <para>
       現在，您可以使用三個選項繼續操作：
      </para>
      <itemizedlist>
       <listitem>
        <para>
         保留兩端中的所有快照。如果使用此選項，您可以復原到兩端中的任意快照，同時可以複製所有資料。不需採取任何動作。執行後續增量備份時，請記得使用倒數第二個快照做為傳送操作的父代。
        </para>
       </listitem>
       <listitem>
        <para>
         僅保留來源端中的最後一個快照，並保留目標端中的所有快照。此外，允許復原到兩端中的任意快照 - 若要復原到來源端中的特定快照，請針對整個快照，執行從目標端到來源端的傳送/接收操作。在來源端執行刪除/移動操作。
        </para>
       </listitem>
       <listitem>
        <para>
         僅保留兩端中的最後一個快照。如此即可在目標端建立一個備份，該備份代表來源端中產生之最後一個快照的狀態。無法復原到其他快照。在來源端和目標端執行刪除/移動操作。
        </para>
       </listitem>
      </itemizedlist>
      <substeps>
       <step>
        <para>
         如果只想保留來源端中的最後一個快照，請執行以下指令：
        </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume delete /data/bkp_data
<prompt>tux &gt; </prompt><command>sudo</command> mv /data/bkp_data_2016-07-07 /data/bkp_data</screen>
        <para>
         第一條指令刪除先前快照，第二條指令將目前快照重新命名為 <filename>/data/bkp_data</filename>。如此可確定備份的最後一個快照永遠命名為 <filename>/data/bkp_data</filename>。因此，您也可以永遠使用此子磁碟區名稱做為增量傳送操作的父代。
        </para>
       </step>
       <step>
        <para>
         如果只想保留目標端中的最後一個快照，請執行以下指令：
        </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume delete /backup/bkp_data
<prompt>tux &gt; </prompt><command>sudo</command> mv /backup/bkp_data_2016-07-07 /backup/bkp_data</screen>
        <para>
         第一條指令刪除先前備份快照，第二條指令將目前備份快照重新命名為 <filename>/backup/bkp_data</filename>。如此可確定最新的備份快照永遠命名為 <filename>/backup/bkp_data</filename>。
        </para>
       </step>
      </substeps>
     </step>
    </procedure>
    <tip>
     <title>傳送至遠端目標端</title>
     <para>
      若要將快照傳送至遠端機器，請使用 SSH：
     </para>
<screen><prompt>tux &gt; </prompt>btrfs send /data/bkp_data | ssh root@jupiter.example.com 'btrfs receive /backup'</screen>
    </tip>
   </sect3>
  </sect2>


  <sect2 xml:id="sec-filesystems-major-btrfs-deduplication">
   <title>重複資料刪除支援</title>
   <para>
    Btrfs 支援重複資料刪除功能，具體方式為以指向公用儲存位置中之區塊單一副本的邏輯連結取代檔案系統中完全相同的區塊。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了 <command>duperemove</command> 工具，可掃描檔案系統中有無完全相同的區塊。在 Btrfs 檔案系統上使用時，也可以用來刪除這些重複的區塊，從而節省檔案系統上的空間。系統上預設不會安裝 <command>duperemove</command>。若要使此功能可用，請安裝套件 
    <package>duperemove</package> 。
   </para>
   <note>
    <title>刪除重複的大型資料集</title>
    <para>
     如果您要刪除重複的大量檔案，請使用 <option>--hashfile</option> 選項：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> duperemove <option>--hashfile <replaceable>HASH_FILE</replaceable></option> file1 file2 file3</screen>
    <para>
     <option>--hashfile</option> 選項會將所有指定檔案的雜湊儲存到 <replaceable>HASH_FILE</replaceable> (而不是 RAM 中)，防止耗盡 RAM。<replaceable>HASH_FILE</replaceable> 可重複使用 - 完成產生基線雜湊檔案的初始執行後，可立即刪除對大型資料集的重複變更。
    </para>
   </note>
   <para>
    <command>duperemove</command> 可以針對一系列檔案操作，也可以以遞迴方式掃描某個目錄：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> duperemove <replaceable>OPTIONS</replaceable> file1 file2 file3
<prompt>tux &gt; </prompt><command>sudo</command> duperemove -r <replaceable>OPTIONS</replaceable> directory</screen>
   <para>
    它有兩種運作模式：唯讀和重複資料刪除。以唯讀模式執行時 (即不使用 <option>-d</option> 參數)，它會掃描給定檔案或目錄中的重複區塊，並將其列印出來。此模式適用於所有檔案系統。
   </para>
   <para>
    以重複資料刪除模式執行 <command>duperemove</command> 僅在 Btrfs 檔案系統上受支援。掃描給定檔案或目錄之後，它會提交重複的區塊以進行重複資料刪除。
   </para>
   <para>
    如需詳細資訊，請參閱 <command>man 8 duperemove</command>。
   </para>
  </sect2>

  <sect2 xml:id="btrfs-delete-subvolumes">
   <title>從根檔案系統中刪除子磁碟區</title>
   <para>
    出於特定目的，您可能需要從根檔案系統中刪除某個預設的 Btrfs 子磁碟區。目的之一是將某個子磁碟區 (例如 <filename>@/home</filename> 或 <filename>@/srv</filename>) 轉換成獨立裝置上的檔案系統。以下程序說明如何刪除 Btrfs 子磁碟區：
   </para>
   <procedure>
    <step>
     <para>
      確定需要刪除的子磁碟區 (例如 <filename>@/opt</filename>)。請注意，根路徑永遠使用子磁碟區 ID「5」。
     </para>
<screen>
<prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume list /
ID 256 gen 30 top level 5 path @
ID 258 gen 887 top level 256 path @/var
ID 259 gen 872 top level 256 path @/usr/local
ID 260 gen 886 top level 256 path @/tmp
ID 261 gen 60 top level 256 path @/srv
ID 262 gen 886 top level 256 path @/root
ID 263 gen 39 top level 256 path @/opt
[...]
</screen>
    </step>
    <step>
     <para>
      尋找代管根分割區的裝置名稱：
     </para>
<screen>
<prompt>tux &gt; </prompt><command>sudo</command> btrfs device usage /
/dev/sda1, ID: 1
  Device size:            23.00GiB
  Device slack:              0.00B
  Data,single:             7.01GiB
  Metadata,DUP:            1.00GiB
  System,DUP:             16.00MiB
  Unallocated:            14.98GiB
</screen>
    </step>
    <step>
     <para>
      在獨立的掛接點 (例如 <filename>/mnt</filename>) 上掛接根檔案系統(ID 為 5 的子磁碟區)：
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> mount -o subvolid=5 /dev/sda1 /mnt</screen>
    </step>
    <step>
     <para>
      從掛接的根檔案系統中刪除 <filename>@/opt</filename> 分割區：
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs subvolume delete /mnt/@/opt</screen>
    </step>
    <step>
     <para>
      卸載之前掛接的根檔案系統：
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> umount /mnt</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-filesystems-major-xfs">
  <title>XFS</title>

  <para>
   1990 年代早期，SGI 開始對原先要當成 IRIX OS 的檔案系統 XFS 進行研發。XFS 隱含的目標是建立高效能 64 位元日誌記錄檔案系統，以滿足嚴格的計算挑戰。XFS 對於操控大型檔案以及執行高階硬體，具備良好功能。XFS 是 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中資料分割區的預設檔案系統。
  </para>

  <para>
   以下是 XFS 主要功能的快速回顧，這些正是為什麼它在高階計算中比其他日誌記錄檔案系統更具競爭力的證明。
  </para>

  <sect2 xml:id="sec-filesystems-major-xfs-scalability">
   <title>使用配置群組取得高延展性</title>
   <para>
    建立 XFS 檔案系統時，檔案系統所屬的區塊裝置，會分割成 8 或更多等同大小的線性區域。這些區域稱為<emphasis>配置群組</emphasis>。每一個配置群組管理自己的 inode 以及可用的磁碟空間。事實上，配置群組可以看成是檔案系統中的檔案系統。因為配置群組彼此各自獨立，所以核心可以同時處理一個以上的配置群組。此功能是 XFS 具備優良延展性的關鍵。當然，獨立配置群組的概念符合多處理器系統的需求。
   </para>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-xfs-mgmt">
   <title>透過高效率的磁碟空間管理取得高效能</title>
   <para>
    可用空間和 inode 是由配置群組裡面的 B<superscript>+</superscript> 樹處理。使用 B<superscript>+</superscript> 樹可大大增強 XFS 的效能和延展性。XFS 使用<emphasis>延遲配置</emphasis>，透過將程序分為兩個部分來處理配置。待處理的交易會儲存在 RAM 並保留適當的空間。XFS 仍然沒有決定資料儲存的確切位置 (在檔案系統區塊中)。此決策會盡量延緩至最後時刻。部分暫時資料永遠不會儲存至磁碟，因為當 XFS 決定了其實際儲存位置時，它早已過時了。採用這種方式，XFS 將增加寫入效能並減少檔案系統片段。因為延緩的配置會造成寫入事件比其他檔案系統要來得少，因此寫入情況較嚴重時，發生損毀之後，有可能會遺失資料。
   </para>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-prealloc">
   <title>預先配置來避免檔案系統片段化</title>
   <para>
    寫入資料至檔案系統前，XFS 會<emphasis>保留</emphasis> (預先配置) 檔案需要的可用空間。因此，可大幅降低檔案系統零散化。因為檔案的內容是分佈在檔案系統中，所以效能就會提高。
   </para>
   <note>
    <title>新的 XFS 磁碟上格式</title>
    <para>
     從 12 版開始，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 支援 XFS 檔案系統的新<quote>磁碟上格式</quote>(v5)。由 YaST 建立的 XFS 檔案系統將使用這種新格式。這種格式的主要優點包括，自動獲取所有 XFS 中繼資料的檢查總數、檔案類型支援以及支援檔案更多數量的存取控制清單。
    </para>
    <para>
     請注意，下列元件<emphasis>不</emphasis>支援這種格式：低於 3.12 版的 SUSE Linux Enterprise 核心、低於 3.2.0 版的 xfsprogs，以及在 SUSE Linux Enterprise 12 之前發佈的 GRUB 2 版本。如果還需要從不符合上述先決條件的系統中使用該檔案系統，就會出現問題。
    </para>
    <para>
     如果您需要在較舊 SUSE 系統或其他 Linux 套裝作業系統與 XFS 檔案系統之間實現互通性，請使用 <command>mkfs.xfs</command> 指令手動設定檔案系統的格式。這將建立一個採用舊格式的 XFS檔案系統 (除非您使用 <option>-m crc=1</option> 選項)。
    </para>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-filesystems-major-ext2">
  <title>Ext2</title>

  <para>
   Ext2 的起源要回到 Linux 歷史的古早年代。它的前輩 - 延伸檔案系統，是在 1992 年 4 月落實並整合至 Linux 0.96c。延伸檔案系統已經過多次修改，而到了 Ext2，成為多年來最受歡迎的 Linux 檔案系統。若建立了檔案系統的日誌記錄，因其復原快速，Ext2 就顯得不再那麼重要了。
  </para>

  <para>
   簡短的 Ext2 功能摘要可以協助瞭解它曾是 (在某些領域依然是) 很多 Linux 使用者最喜愛的 Linux 檔案系統的原因所在。
  </para>

  <variablelist>
   <varlistentry>
    <term>穩固性和速度</term>
    <listitem>
     <para>
      Ext2 經過多次改良和密集測試，已經算是<quote>老前輩</quote>了。這可能是為什麼人們通常稱它堅如磐石的原因所在。在檔案系統無法完全取消掛接而導致系統中斷後，e2fsck 會開始分析檔案系統資料。中繼資料會進入一致性狀態，而待處理的檔案或資料區塊會寫入指定的目錄 (稱為 <filename>lost+found</filename>)。與日誌記錄檔案系統相比，e2fsck 會分析整個檔案系統，而不僅僅是中繼資料中最近修改的位元。這比檢查日誌記錄檔案系統的記錄資料，要花費更多時間。按照檔案系統大小，此程序會花半小時或更長的時間。因此，不要為任何需要高可用性的伺服器選擇 Ext2。不過，因為 Ext2 不會維護日誌，而且使用的記憶體更少，因此有時候比其他檔案系統較快速一些。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>升級容易</term>
    <listitem>
     <para>
      因為 Ext3 是以 Ext2 程式碼為基礎，而且共用它的磁碟上格式和中繼資料格式，所以從 Ext2 升級至 Ext3 十分容易。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-filesystems-major-ext3">
  <title>Ext3</title>

  <para>
   Ext3 是由 Stephen Tweedie 設計。不像其他所有下一代檔案系統，Ext3 不依循全新的設計原則。它是以 Ext2 為基礎。這兩個檔案系統彼此關係十分密切。Ext3 檔案系統可以輕易地建立在 Ext2 檔案系統的最上層。Ext2 和 Ext3 最重要的差別是 Ext3 支援日誌記錄。簡而言之，Ext3 提供三個主要優點：
  </para>

  <sect2 xml:id="sec-filesystems-major-ext3-upgrade">
   <title>可輕易從 ext2 升級，並具有高可靠性</title>
   <para>
    Ext2 的程式碼為 Ext3 奠定了堅實的基礎，使後者成為受到高度評價的下一代檔案系統。在 Ext3 中完美融合了 Ext2 的可靠性和穩固性特點，同時具備日誌記錄檔案系統的優點。不像轉換至其他日誌記錄檔案系統 (例如 XFS) 那麼費時 (備份整個檔案系統，然後從頭開始重新建立)，轉換至 Ext3 僅需數分鐘。它還非常安全，因為從頭開始重新建立整個檔案系統，並不能確保萬無一失。考慮一下等候升級至日誌記錄檔案系統的現有 Ext2 系統數量，您可以輕易瞭解為什麼 Ext3 對很多系統管理員都具有一定重要性。從 Ext3 降級至 Ext2 就和升級一樣容易。將 Ext3 檔案系統乾淨地取消掛接，然後重新掛接成 Ext2 檔案系統即可。
   </para>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-ext3-performance">
   <title>可靠性和效能</title>
   <para>
    其他日誌記錄檔案系統，有些會依照<quote>僅中繼資料</quote>日誌記錄方法。這表示您的中繼資料會始終維持一致的狀態，但這並不能自動保證檔案系統資料本身的一致性。Ext3 的設計是妥善管理中繼資料和資料二者。「<quote>管理</quote>」的程度可以自訂。在 <option>data=journal</option> 模式啟用 Ext3，可提供最大的安全性 (資料整合性)，不過因為中繼資料和資料都會記錄下來，所以系統速度會減慢。較新的方法是使用 <option>data=ordered</option> 模式，這樣可以確定資料和中繼資料整合性，不過僅限中繼資料使用日誌記錄。檔案系統驅動程式會收集所有對應至某一中繼資料更新的所有資料區塊。更新中繼資料前，這些資料區塊會寫入硬碟。如此一來便可以達到中繼資料和資料的一致性，不會犧牲效能。第三個要使用的選項是 <option>data=writeback</option>，它允許資料在其中繼資料已經提交至日誌後再寫入主要檔案系統。一般認為此選項的效能最好。不過，它可以允許在損毀和復原舊資料後，重新顯示舊資料，同時又維護內部檔案系統整合性。Ext3 使用 <option>data=ordered</option> 選項做為預設值。
   </para>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-ext3-ext22ext3a">
   <title>將 ext2 檔案系統轉換成 ext3</title>
   <para>
    若要將 Ext2 檔案系統轉換為 Ext3，請執行下列步驟：
   </para>
   <procedure>
    <step>
     <para>
      以 <systemitem class="username">root</systemitem> 使用者身分執行 <command>tune2fs -j</command> 來建立 Ext3 日誌。
     </para>
     <para>
      這樣會以預設參數建立 Ext3 日誌。
     </para>
     <para>
      若要指定日誌的大小以及存放它的裝置，請執行 <command>tune2fs</command> <option>-J</option>，不要同時使用需要的日誌選項 <option>size=</option> 和 <option>device=</option>。如需 <command>tune2fs</command> 程式的詳細資訊，請參閱 <command>tune2fs</command> 線上文件。
     </para>
    </step>
    <step>
     <para>
      以 <systemitem class="username">root</systemitem> 使用者身分編輯檔案 <filename>/etc/fstab</filename>，將為對應分割區指定的檔案系統類型從 <literal>ext2</literal> 變更為 <literal>ext3</literal>，然後儲存變更。
     </para>
     <para>
      這可確保 Ext3 檔案系統會被識別為 Ext3 檔案系統。完成的變更會在下次啟動時生效。
     </para>
    </step>
    <step>
     <para>
      若要將設定為 Ext3 分割區的根檔案系統開機，請在 <literal>initrd</literal> 中新增模組 <literal>ext3</literal> 和 <filename>jbd</filename>。操作步驟如下：
     </para>
     <substeps performance="required">
      <step>
       <para>
        開啟或建立 <filename>/etc/dracut.conf.d/10-filesystem.conf</filename> 並新增以下行 (請注意前置空格)：
       </para>
<screen>force_drivers+=" ext3 jbd"</screen>
      </step>
      <step>
       <para>
        然後執行 <command>dracut</command> <option>-f</option> 指令。
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      重新啟動系統。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-filesystems-major-ext3-inodesize">
   <title>Ext3 檔案系統 inode 大小和 inode 數量</title>
   <para>
    Inode 會儲存檔案及其在檔案系統中之區塊位置的相關資訊。為了在 Inode 中留出空間用於延伸的屬性和 ACL，Ext3 的預設 Inode 大小已從 SLES 10 上的 128 位元組增大到 SLES 11 上的 256 位元組。與 SLES 10 相比，當您在 SLES 11 上建立新的 Ext3 檔案系統時，為相同數量的 Inode 預先配置的預設空間容量會增加一倍，檔案系統中檔案的可用空間則會減少相應的容量。因此，您必須使用較大的分割區才能容納 SLES 10 上 Ext3 檔案系統可能容納的相同 Inode 數和檔案數。
   </para>
   <para>
    當您建立新的 Ext3 檔案系統時，系統將根據可建立的 Inode 總數預先配置 Inode 表格中的空間。每 Inode 的位元組數比率和檔案系統的大小決定了可以建立的 Inode 數。檔案系統建立後，將會為每一個每 Inode 的位元組數位元組空間建立一個 Inode：
   </para>
<screen>number of inodes = total size of the file system divided by the number of bytes per inode</screen>
   <para>
    Inode 數控制了檔案系統中可容納的檔案數：一個檔案對應一個 Inode。為了解決 Inode 大小日益增大而可用空間日益減少的問題，每 Inode 的位元組數比率的預設值已從 SLES 10 上的 8192 位元組增大到 SLES 11 上的 16384 位元組。比率增加了一倍，表示可建立的檔案數是 SLES 10 上 Ext3 檔案系統所允許檔案數的一半。
   </para>
   <important>
    <title>變更現有 ext3 檔案系統的 inode 大小</title>
    <para>
     配置 Inode 之後，您無法變更 Inode 大小或每 Inode 的位元組數比率的設定。如果不使用其他設定重新建立檔案系統，或不延伸檔案系統，則無法新增 Inode。當超出最大 Inode 數時，除非刪除某些檔案，否則無法在檔案系統上建立新的檔案。
    </para>
   </important>
   <para>
    建立新的 Ext3 檔案系統時，您可以指定 Inode 大小和每 Inode 的位元組數比率來控制 Inode 空間使用量以及檔案系統上所允許的檔案數。如果不指定區塊大小、Inode 大小和每 Inode 的位元組數比率值，則會套用 <filename>/etc/mked2fs.conf</filename> 檔案中的預設值。如需詳細資訊，請參閱 <filename>mke2fs.conf(5)</filename> man 頁面。
   </para>
   <para>
    使用下列準則：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>Inode 大小：</title>
      <para>
       預設 Inode 大小為 256 位元組。以位元組為單位指定一個值，該值是 2 的冪且大於或等於 128 位元組 (最大為區塊大小)，例如 128、256、512 等。僅當不在 Ext3 檔案系統上使用延伸的屬性或 ACL 時，方可使用 128 位元組。
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>每 Inode 的位元組數比率：</title>
      <para>
       每 Inode 的位元組數比率預設值為 16384 位元組。有效的每 Inode 的位元組數比率值必須是 2 的幂且大於或等於 1024 位元組，例如 1024、2048、4096、8192、16384、32768 等。此值不應小於檔案系統的區塊大小，因為區塊大小是用於儲存資料的最小空間區塊。Ext3 檔案系統的預設區塊大小為 4 KB。
      </para>
     </formalpara>
     <para>
      此外，請考量需要儲存的檔案數和檔案大小。例如，如果檔案系統將儲存許多小型檔案，您可以指定一個較小的每 Inode 的位元組數比率，這樣可增加 Inode 數。如果檔案系統將儲存超大型檔案，您可以指定一個較大的每 Inode 的位元組數比率，這樣可減少可能的 Inode 數量。
     </para>
     <para>
      一般而言，最好準備充足的 Inode，而不是將其耗盡。如果 Inode 太少且檔案也很小，則在實際上為空的磁碟上，您可能已經達到最大檔案數。如果 Inode 太多且檔案也很大，則您可能會被告知存在可用空間但卻無法使用，因為您無法在為 Inode 保留的空間中建立新檔案。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    如果不在 Ext3 檔案系統上使用延伸的屬性或 ACL，則可以在建立檔案系統時，分別指定 128 位元組和 8192 位元組做為 Inode 大小和每 Inode 的位元組數比率，藉以還原 SLES 10 的行為。使用下列任一種方法來設定 Inode 大小和每 Inode 的位元組數比率：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>修改所有新 ext3 檔案的預設設定：</title>
      <para>
       在文字編輯器中，修改 <filename>/etc/mke2fs.conf</filename> 檔案的 <literal>defaults</literal> 區段，以將 <literal>inode_size</literal> 和 <literal>inode_ratio</literal> 設為所需的預設值。這些值會套用至所有新的 Ext3 檔案系統。例如：
      </para>
     </formalpara>
<screen>blocksize = 4096
inode_size = 128
inode_ratio = 8192</screen>
    </listitem>
    <listitem>
     <formalpara>
      <title>在指令行中：</title>
      <para>
       當建立新的 Ext3 檔案系統時，將 Inode 大小 (<literal>-I 128</literal>) 和每 Inode 的位元組數比率 (<literal>-i 8192</literal>) 傳遞至 <command>mkfs.ext3(8)</command> 指令或 <command>mke2fs(8)</command> 指令。例如，使用下列任一個指令：
      </para>
     </formalpara>
<screen><prompt>tux &gt; </prompt><command>sudo</command> mkfs.ext3 -b 4096 -i 8092 -I 128 /dev/sda2
<prompt>tux &gt; </prompt><command>sudo</command> mke2fs -t ext3 -b 4096 -i 8192 -I 128 /dev/sda2</screen>
    </listitem>
    <listitem>
     <formalpara>
      <title>在使用 YaST 進行安裝期間：</title>
      <para>
       在安裝期間建立新的 Ext3 檔案系統時，傳遞 Inode 大小和每 Inode 的位元組數比率值。在 YaST 磁碟分割程式之<guimenu>編輯分割區</guimenu>頁面的<guimenu>格式化選項</guimenu>下，選取<guimenu>格式化分割區</guimenu><guimenu>Ext3</guimenu>，然後按一下<guimenu>選項</guimenu>。在<guimenu>檔案系統選項</guimenu>對話方塊中，從<guimenu>區塊大小 (位元組)</guimenu>、<guimenu>每 Inode 的位元組數</guimenu>和 <guimenu>Inode 大小</guimenu>下拉式方塊中選取所需的值。
      </para>
     </formalpara>
     <para>
      例如，從<guimenu>區塊大小 (位元組)</guimenu> 下拉式方塊中選取 4096，從<guimenu>每 Inode 的位元組數</guimenu>下拉式方塊中選取 8192，從 <guimenu>Inode 大小</guimenu>下拉式方塊中選取 128，然後按一下<guimenu>確定</guimenu>。
     </para>
     <informalfigure>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="ext3_inode_yast_a.png" width="80%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="ext3_inode_yast_a.png" width="100%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </informalfigure>
    </listitem>
    <listitem>
     <formalpara>
      <title>在使用 AutoYaST 進行安裝期間：</title>
      <para>
       在 AutoYaST 設定檔中，可以使用 <literal>fs_options</literal> 標記將 -i 的 <literal>opt_bytes_per_inode</literal> 比率值設為 8192，並將 -I 的 <literal>opt_inode_density</literal> 值設為 128：
      </para>
     </formalpara>
<screen>
&lt;partitioning config:type="list"&gt;
  &lt;drive&gt;
    &lt;device&gt;/dev/sda&lt;/device&gt;
    &lt;initialize config:type="boolean"&gt;true&lt;/initialize&gt;
    &lt;partitions config:type="list"&gt;
      &lt;partition&gt;
        &lt;filesystem config:type="symbol"&gt;ext3&lt;/filesystem&gt;
        &lt;format config:type="boolean"&gt;true&lt;/format&gt;
        &lt;fs_options&gt;
          &lt;opt_bytes_per_inode&gt;
            &lt;option_str&gt;-i&lt;/option_str&gt;
            &lt;option_value&gt;8192&lt;/option_value&gt;
          &lt;/opt_bytes_per_inode&gt;
          &lt;opt_inode_density&gt;
            &lt;option_str&gt;-I&lt;/option_str&gt;
            &lt;option_value&gt;128&lt;/option_value&gt;
          &lt;/opt_inode_density&gt;
        &lt;/fs_options&gt;
        &lt;mount&gt;/&lt;/mount&gt;
        &lt;partition_id config:type="integer"&gt;131&lt;/partition_id&gt;
        &lt;partition_type&gt;primary&lt;/partition_type&gt;
        &lt;size&gt;25G&lt;/size&gt;
      &lt;/partition&gt;
    &lt;/partitions&gt;
  &lt;/drive&gt;
&lt;partitioning&gt;</screen>
    </listitem>
   </itemizedlist>
   <para>
    如需相關資訊，請參閱 <link xlink:href="https://www.suse.com/support/kb/doc.php?id=7009075"/> (<citetitle>SLES11 ext3 分割區只能儲存 SLES10 上可儲存之檔案數的 50%</citetitle> [技術資訊文件 7009075])。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-filesystems-major-ext4">
  <title>Ext4</title>

  <para>
   2006 年，Ext4 做為 Ext3 的衍生部份面市。它支援最大大小為 1 EiB 的磁碟區、最大大小為 16 TiB 的檔案和數量不受限制的子目錄，消除了 Ext3 的一些儲存局限性。它還引入了許多效能加強功能，例如延遲區塊配置和速度大幅加快的檔案系統檢查例行工作。Ext4 還支援日誌檢查總數，並可提供以奈秒為單位測量的時間戳記，因而更加可靠。Ext4 完全反向相容於 Ext2 和 Ext3，後兩個檔案系統都可以做為 Ext4 掛接。
  </para>
 </sect1>
 <sect1 xml:id="sec-filesystems-major-reiser">
  <title>ReiserFS</title>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 15 中完全移除了 ReiserFS 支援。若要將現有分割區移轉至 Btrfs，請參閱<xref linkend="sec-filesystems-major-btrfs-migrate"/>。
  </para>
 </sect1>
 <sect1 xml:id="sec-filesystems-other">
  <title>其他受支援的檔案系統</title>

  <para role="intro">
   <xref linkend="tab-filesystems-other" xrefstyle="TableXRef"/> 彙整 Linux 支援的其他檔案系統。支援它們主要是確定不同媒體或外來作業系統中，資料交換的相容性。
  </para>

  <table xml:id="tab-filesystems-other">
   <title>Linux 中的檔案系統類型</title>
   <tgroup cols="2">
    <colspec colnum="1" colname="1" colwidth="2381*"/>
    <colspec colnum="2" colname="2" colwidth="7620*"/>
    <thead>
     <row>
      <entry>
       <para>
        檔案系統類型
       </para>
      </entry>
      <entry>
       <para>
        描述
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <systemitem>cramfs</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        壓縮的 ROM 檔案系統：ROM 的一種壓縮唯讀檔案系統。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>hpfs</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        高效能檔案系統：IBM OS/2 標準檔案系統。僅支援唯讀模式。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>iso9660</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        CD-ROM 的標準檔案系統。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>minix</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        源自作業系統學術研究專案的檔案系統，是 Linux 使用的第一個檔案系統。現在，它可作為磁片檔案系統來使用。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>msdos</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        <filename>fat</filename> 最早源自 DOS 的檔案系統，現在各種作業系統均使用之。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>nfs</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        網路檔案系統：使用這種檔案系統，資料可以儲存在網路中的任何機器上，而且可以經由授權從網路存取。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>ntfs</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        Windows NT 檔案系統；唯讀。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>exfat</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        為使用快閃記憶體 (例如 USB 隨身碟和 SD 卡) 而最佳化的檔案系統。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>smbfs</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        有些產品 (例如 Windows) 會使用伺服器訊息區塊，透過網路來存取檔案。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>sysv</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        用於 SCO Unix、Xenix 和 Coherent (個人電腦的商用 Unix 系統)。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>ufs</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        由 BSD、SunOS 和 NextStep 使用。僅支援唯讀模式。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>umsdos</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        MS-DOS 上的 Unix：套用於標準 <filename>fat</filename> 檔案系統的最上層，透過建立特殊檔案來實現 Unix 功能 (權限、連結、長檔案名稱)。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <systemitem>vfat</systemitem>
       </para>
      </entry>
      <entry>
       <para>
        虛擬 FAT：<literal>fat</literal> 檔案系統的副檔名 (支援長檔名)。
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>
 <sect1 xml:id="sec-filesystems-lfs">
  <title>Linux 中的大型檔案支援</title>

  <para>
   一開始，Linux 支援的檔案大小最大為 2 GiB (2<superscript>31</superscript> 位元組)。除非檔案系統隨附大型檔案支援，否則 32 位元系統上的最大檔案大小為 2 GiB。
  </para>

  <para>
   目前，我們所有的標準檔案系統都具有 LFS (大型檔案支援)，理論上可以支援最大為 2<superscript>63</superscript> 位元組的檔案大小。<xref linkend="tab-filesystems-maxsize" xrefstyle="TableXRef"/> 概述了 Linux 檔案和檔案系統的目前磁碟格式限制。表格中的數字假設檔案系統使用 4 KiB 區塊大小 (此為常用標準)。使用不同的區塊大小時，結果將會不同。使用疏鬆區塊時，<xref linkend="tab-filesystems-maxsize" xrefstyle="TableXRef"/> 中的最大檔案大小可以大於檔案系統的實際大小。
  </para>

  <note>
   <title>二進位倍數</title>
   <para>
    在本文件中：1024 位元組 = 1 KiB；1024 KiB = 1 MiB；1024 MiB = 1 GiB；1024 GiB = 1 TiB；1024 TiB = 1 PiB；1024 PiB = 1 EiB (另請參閱<link xlink:href="http://physics.nist.gov/cuu/Units/binary.html"><citetitle>《NIST: Prefixes for Binary Multiples》(NIST：二倍數的字首)</citetitle></link>。
   </para>
  </note>

  <table xml:id="tab-filesystems-maxsize">
   <title>檔案和檔案系統的最大大小 (磁碟格式，4 KiB 區塊大小)</title>
   <tgroup cols="3">
    <colspec colnum="1" colname="1" colwidth="3334*"/>
    <colspec colnum="2" colname="2" colwidth="3334*"/>
    <colspec colnum="3" colname="3" colwidth="3334*"/>
    <thead>
     <row>
      <entry>
       <para>
        檔案系統 (4 KiB 區塊大小)
       </para>
      </entry>
      <entry>
       <para>
        檔案系統的最大大小
       </para>
      </entry>
      <entry>
       <para>
        最大檔案大小
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Btrfs
       </para>
      </entry>
      <entry>
       <para>
        16 EiB
       </para>
      </entry>
      <entry>
       <para>
        16 EiB
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Ext3
       </para>
      </entry>
      <entry>
       <para>
        16 TiB
       </para>
      </entry>
      <entry>
       <para>
        2 TiB
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Ext4
       </para>
      </entry>
      <entry>
       <para>
        1 EiB
       </para>
      </entry>
      <entry>
       <para>
        16 TiB
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        OCFS2 (High Availability Extension 中可使用之支援叢集的檔案系統)
       </para>
      </entry>
      <entry>
       <para>
        16 TiB
       </para>
      </entry>
      <entry>
       <para>
        1 EiB
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        XFS
       </para>
      </entry>
      <entry>
       <para>
        16 EiB
       </para>
      </entry>
      <entry>
       <para>
        8 EiB
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        NFSv2 (用戶端)
       </para>
      </entry>
      <entry>
       <para>
        8 EiB
       </para>
      </entry>
      <entry>
       <para>
        2 GiB
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        NFSv3/NFSv4 (用戶端)
       </para>
      </entry>
      <entry>
       <para>
        8 EiB
       </para>
      </entry>
      <entry>
       <para>
        8 EiB
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <important>
   <title>限制</title>
   <para>
    <xref linkend="tab-filesystems-maxsize" xrefstyle="TableXRef"/>會說明磁碟上 (On-Disk) 格式的限制。Linux 核心會強制其處理的檔案和檔案系統依循自身大小限制。限制如下：
   </para>
   <variablelist>
    <varlistentry>
     <term>檔案大小</term>
     <listitem>
      <para>
       在 32 位元系統上，檔案不能超過 2 TiB (2<superscript>41</superscript> 位元組)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>檔案系統大小</term>
     <listitem>
      <para>
       檔案系統大小最大可達 2<superscript>73</superscript> 位元組。不過，此限制仍然跟不上目前可用的硬體。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </important>
 </sect1>
 <sect1 xml:id="sec-filesystems-stor-limits">
  <title>Linux 核心儲存限制</title>

  <para>
   <xref linkend="tab-filesystems-stor-limits" xrefstyle="TableXRef"/> 總結了與 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 相關聯之儲存的核心限制。
  </para>

  <table xml:id="tab-filesystems-stor-limits">
   <title>儲存限制</title>
   <tgroup cols="2">
    <colspec colnum="1" colname="1" colwidth="5001*"/>
    <colspec colnum="2" colname="2" colwidth="5001*"/>
    <thead>
     <row>
      <entry>
       <para>
        儲存功能
       </para>
      </entry>
      <entry>
       <para>
        限制
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        支援的最大 LUN 數
       </para>
      </entry>
      <entry>
       <para>
        每個目標 16384 個 LUN。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        每個 LUN 的最大路徑數
       </para>
      </entry>
      <entry>
       <para>
        預設無限制。每個路徑都視為一個一般 LUN。
       </para>
       <para>
        實際限制由每個目標的 LUN 數和每個 HBA 的目標數 (對於光纖通道 HBA 為 16777215) 指定。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        最大 HBA 數
       </para>
      </entry>
      <entry>
       <para>
        無限制.實際限制由系統的 PCI 插槽數決定。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        每個作業系統使用 device-mapper-multipath 的最大路徑數 (總計)
       </para>
      </entry>
      <entry>
       <para>
        大約為 1024。實際數量取決於每個多重路徑裝置的裝置號碼字串長度。它是 multipath-tools 中的一個編譯時間變數，如果此限制會導致問題，可以提高其值。
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        每一區塊裝置的最大大小
       </para>
      </entry>
      <entry>
       <para>
        最大 8 EiB。
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>
 <sect1 xml:id="sec-filesystems-trouble">
  <title>檔案系統疑難排解</title>

  <para>
   本節說明檔案系統的一些已知問題和可能的解決方案。
  </para>

  <sect2 xml:id="sec-filesystems-trouble-btrfs-volfull">
   <title>Btrfs 錯誤：裝置上已無空間</title>
   <para>
    使用 Btrfs 檔案系統的根 (<filename>/</filename>) 分割區停止接受資料。您收到錯誤<quote><literal>裝置上已無空間</literal></quote>。
   </para>
   <para>
    請參閱下列各節，瞭解有關此問題的可能原因和預防措施的資訊。
   </para>
   <sect3 xml:id="sec-filesystems-trouble-btrfs-volfull-snapshots">
    <title>Snapper 快照使用的磁碟空間</title>
    <para>
     如果 Snapper 是針對 Btrfs 檔案系統執行的，則<quote><literal>裝置上已無空間</literal></quote>問題通常是由於系統上做為快照儲存的資料過多所致。
    </para>
    <para>
     您可以從 Snapper 中移除一些快照，不過，快照不會立即刪除，可能不能釋放您需要的空間容量。
    </para>
    <para>
     若要從 Snapper 中刪除檔案：
    </para>
    <procedure>
     <step>
      <para>
       開啟終端機主控台。
      </para>
     </step>
     <step>
      <para>
       在指令提示符處，輸入 <command>btrfs filesystem show</command>，例如：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs filesystem show
Label: none uuid: 40123456-cb2c-4678-8b3d-d014d1c78c78
 Total devices 1 FS bytes used 20.00GB
 devid 1 size 20.00GB used 20.00GB path /dev/sda3</screen>
     </step>
     <step>
      <para>
       輸入
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs fi balance start <replaceable>MOUNTPOINT</replaceable> -dusage=5</screen>
      <para>
       此指令會嘗試將資料重新放置在空的或接近空的資料區塊中，從而允許收回空間並將空間重新指定給中繼資料。此操作可能需要一些時間 (1 TB 資料可能需要很多小時)，不過，在此期間系統仍可以使用。
      </para>
     </step>
     <step>
      <para>
       列出 Snapper 中的快照。輸入
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> snapper -c root list</screen>
     </step>
     <step>
      <para>
       從 Snapper 中刪除一或多個快照。輸入
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> snapper -c root delete <replaceable>SNAPSHOT_NUMBER(S)</replaceable></screen>
      <para>
       務必先刪除最舊的快照。快照越舊，它佔用的磁碟空間就越多。
      </para>
     </step>
    </procedure>
    <para>
     為了避免此問題發生，您可以變更 Snapper 清理演算法。如需詳細資料，請參閱<xref linkend="sec-snapper-manage-metadata-cleanup"/>。控制快照清理的組態值為 <envar>EMPTY_*</envar>、<envar>NUMBER_*</envar> 和 <envar>TIMELINE_*</envar>。
    </para>
    <para>
     如果在檔案系統磁碟上將 Snapper 與 Btrfs 結合使用，建議您保留兩倍於標準儲存建議的磁碟空間容量。YaST 磁碟分割程式會自動在 Btrfs 儲存建議中為根檔案系統建議標準磁碟空間的兩倍容量。
    </para>
   </sect3>
   <sect3 xml:id="sec-filesystems-trouble-btrfs-volfull-var">
    <title>記錄、當機和快取檔案使用的磁碟空間</title>
    <para>
     如果系統磁碟中填滿了資料，您可以嘗試從 <filename>/var/log</filename>、<filename>/var/crash</filename>、<filename>/var/lib/systemd/coredump</filename> 和 <filename>/var/cache</filename> 中刪除檔案。
    </para>
    <para>
     Btrfs <systemitem class="username">根</systemitem>檔案系統子磁碟區 <filename>/var/log</filename>、<filename>/var/crash</filename> 和 <filename>/var/cache</filename> 可在執行一般操作過程中使用所有可用的磁碟空間，但會導致系統功能出現問題。為避免出現此狀況，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了 Btrfs 子磁碟區配額支援。如需詳細資料，請參閱<xref linkend="sec-filesystems-major-btrfs-quota"/>。
    </para>
    <para>
     在測試和開發機器上，尤其是當應用程式頻繁當機時，您也可能想查看 <filename>/var/lib/systemd/coredump</filename>，磁心傾印就儲存在其中。
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-filesystems-trouble-trim">
   <title>釋放未使用的檔案系統區塊</title>
   <para>
    在固態硬碟 (SSD) 和簡易佈建的磁碟區中，釋放檔案系統未使用的區塊會很有幫助。對於支援 <phrase role="productname"><phrase os="sles">unmap</phrase></phrase> 或 <literal>trim</literal> 操作的所有檔案系統，<literal>SUSE Linux Enterprise Server</literal> 完全支援在其上使用這些方法。
   </para>
   <para>
    建議透過執行 <command>/sbin/wiper.sh</command>，來釋放 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上支援的檔案系統 (Btrfs 除外)。在執行此程序檔之前，請確定讀取 <filename>/usr/share/doc/packages/hdparm/README.wiper</filename>。對於大部分桌上型電腦和伺服器系統，每週釋放一次便已足夠。使用 <option>-o discard</option> 掛接檔案系統會降低效能，並可能對 SSD 的壽命造成負面影響，因此不建議使用此選項。
   </para>
   <warning>
    <title>不要在 Btrfs 上使用 <command>wiper.sh</command></title>
    <para>
     <command>wiper.sh</command> 程序檔會釋放掛接的讀寫 Ext4 或 XFS 檔案系統，以及掛接/未掛接的唯讀 Ext2、Ext3、Ext4 或 XFS 檔案系統。請<emphasis>勿</emphasis>在 Btrfs 檔案系統上使用 <command>wiper.sh</command>，否則可能會損毀資料。而應該使用 <command>/usr/share/btrfsmaintenance/btrfs-trim.sh</command>，後者是 <package>btrfsmaintenance</package> 套件的一部分。
    </para>
   </warning>
  </sect2>

  <sect2 xml:id="sec-filesystems-trouble-balance">
   <title>Btrfs：跨裝置平衡資料</title>
   <para>
    <command>btrfs balance</command> 指令是
    <package>btrfs-progs</package> 套件的一部分。它可以在以下範例情況下平衡 Btrfs 檔案系統上的區塊群組：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      假設您有一個 1 TB 磁碟機，其中的 600 GB 被資料佔用，然後您又新增了另一個 1 TB 磁碟機。理論上，平衡後將導致每個磁碟機上各有 300 GB 的已用空間。
     </para>
    </listitem>
    <listitem>
     <para>
      您的裝置上有大量接近空的資料區塊。在執行平衡清除這些區塊之前，它們的空間都將不可用。
     </para>
    </listitem>
    <listitem>
     <para>
      您需要依據其使用百分比壓縮半空的區塊群組。以下指令將平衡使用率等於或小於 5% 的區塊群組：
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs balance start -dusage=5 /</screen>
     <tip>
      <para>
       <filename>/etc/cron.weekly/btrfs-balance</filename> 程序檔負責每週清理未使用的區塊群組。
      </para>
     </tip>
    </listitem>
    <listitem>
     <para>
      您需要清除區塊裝置的未滿部分，更均勻地分散資料。
     </para>
    </listitem>
    <listitem>
     <para>
      您需要在不同的 RAID 類型之間移轉資料。例如，若要將一組磁碟上的資料從 RAID1 轉換至 RAID5，請執行以下指令：
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> btrfs balance start -dprofiles=raid1,convert=raid5 /</screen>
    </listitem>
   </itemizedlist>
   <tip>
    <para>
     若要微調 Btrfs 檔案系統上平衡資料的預設行為 (例如，平衡的頻率或掛接點)，請檢查並自訂 <filename>/etc/sysconfig/btrfsmaintenance</filename>。相關選項以 <option>BTRFS_BALANCE_</option> 開頭。
    </para>
   </tip>
   <para>
    如需 <command>btrfs balance</command> 指令用法的詳細資料，請參閱其手冊頁 (<command>man 8 btrfs-balance</command>)。
   </para>
  </sect2>

  <sect2 xml:id="sec-filesystems-trouble-defrag">
   <title>不要在 SSD 中進行磁碟重組</title>
   <para>
    Linux 檔案系統包含相應的機制用於避免資料分散，因此通常沒有必要執行磁碟重組。但在某些使用場合下，資料分散不可避免，而對硬碟進行磁碟重組可以顯著提高效能。
   </para>
   <para>
    這種做法僅適用於常設硬碟。在使用快閃記憶體儲存資料的固態硬碟 (SSD) 中，韌體提供的演算法可以確定要將資料寫入哪些晶片。資料通常散佈在裝置的各個位置。因此，對 SSD 進行磁碟重組並不能取得所需的效果，反而會因為寫入不必要的資料而縮短 SSD 的壽命。
   </para>
   <para>
    出於上述原因，SUSE 明確建議<emphasis>不要</emphasis>對 SSD 進行磁碟重組。某些廠商還會警告對其固態硬碟進行磁碟重組所產生的後果。這些品牌包括但不限於：
   </para>
   <itemizedlist>
    <listitem>
     <para>
      HPE 3PAR StoreServ All-Flash
     </para>
    </listitem>
    <listitem>
     <para>
      HPE 3PAR StoreServ Converged Flash
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-filesystems-info">
  <title>更多資訊</title>

  <para>
   請造訪上述每種檔案系統專案維護的專屬首頁，找出的郵件清單資訊、詳盡文件以及常見問題：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Kernel.org 上的 Btrfs Wiki：<link xlink:href="https://btrfs.wiki.kernel.org/"/>
    </para>
   </listitem>
   <listitem>
    <para>
     E2fsprogs: Ext2/3/4 File System Utilities (E2fsprogs：Ext2/3/4 檔案系統公用程式)：<link xlink:href="http://e2fsprogs.sourceforge.net/"/>
    </para>
   </listitem>
   <listitem>
    <para>
     OCFS2 Project (OCFS2 專案)：<link xlink:href="https://oss.oracle.com/projects/ocfs2/"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Wikipedia 專案上的「Comparison of File Systems」(檔案系統比較，網址為 <link xlink:href="http://en.wikipedia.org/wiki/Comparison_of_file_systems#Comparison"/>) 中提供了對各種檔案系統 (不僅僅是 Linux 檔案系統) 更深入的比較。
  </para>
 </sect1>
</chapter>
