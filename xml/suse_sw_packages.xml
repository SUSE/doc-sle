<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-suse-packages">
 <title>Information about Special Software Packages</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  The programs <systemitem class="resource">bash</systemitem>,
  <systemitem class="resource">cron</systemitem>,
  <systemitem class="resource">logrotate</systemitem>,
  <systemitem class="resource">locate</systemitem>,
  <systemitem class="resource">ulimit</systemitem> and
  <systemitem class="resource">free</systemitem> are very important for system
  administrators and many users. Man pages and info pages are two useful
  sources of information about commands, but both are not always available. GNU
  Emacs is a popular and very configurable text editor.
 </para>

 <sect2 xml:id="sec-suse-packages-bash">
  <title>The <systemitem class="resource">bash</systemitem> Package and <filename>/etc/profile</filename></title>
  <para>
   Bash is the default system shell. When used as a login shell, it reads
   several initialization files. Bash processes them in the order they appear
   in this list:
  </para>
  <orderedlist spacing="normal">
   <listitem>
    <para>
     <filename>/etc/profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/etc/bash.bashrc</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.bashrc</filename>
    </para>
   </listitem>
  </orderedlist>
  <para>
   Make custom settings in <filename>~/.profile</filename> or
   <filename>~/.bashrc</filename>. To ensure the correct processing of these
   files, it is necessary to copy the basic settings from
   <filename>/etc/skel/.profile</filename> or
   <filename>/etc/skel/.bashrc</filename> into the home directory of the user.
   It is recommended to copy the settings from <filename>/etc/skel</filename>
   after an update. Execute the following shell commands to prevent the loss of
   personal adjustments:
  </para>
<screen>&prompt.user;mv ~/.bashrc ~/.bashrc.old
&prompt.user;cp /etc/skel/.bashrc ~/.bashrc
&prompt.user;mv ~/.profile ~/.profile.old
&prompt.user;cp /etc/skel/.profile ~/.profile</screen>
  <para>
   Then copy personal adjustments back from the <literal>*.old</literal> files.
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-packages-cron">
  <title>The <phrase>cron</phrase> Package</title>
  <para>
   Use <systemitem class="daemon">cron</systemitem> to automatically run
   commands in the background at predefined times. <systemitem
    class="daemon">cron</systemitem> uses specially formatted time tables, and
   the tool comes with several default ones. Users can also specify custom
   tables, if needed.
  </para>
  <para>
   The cron tables are located in <filename>/var/spool/cron/tabs</filename>.
   <filename>/etc/crontab</filename> serves as a systemwide cron table. Enter
   the user name to run the command directly after the time table and before
   the command. In <xref linkend="ex-suse-packages-cron"/>,
   <systemitem class="username">root</systemitem> is entered. Package-specific
   tables, located in <filename>/etc/cron.d</filename>, have the same format.
   See the <command>cron</command> man page (<command>man cron</command>).
  </para>
  <example xml:id="ex-suse-packages-cron">
   <title>Entry in /etc/crontab</title>
<screen>1-59/5 * * * *   root   test -x /usr/sbin/atrun &amp;&amp; /usr/sbin/atrun</screen>
  </example>
  <para>
   You cannot edit <filename>/etc/crontab</filename> by calling the command
   <command>crontab -e</command>. This file must be loaded directly into an
   editor, then modified and saved.
  </para>
  <para>
   Several packages install shell scripts to the directories
   <filename>/etc/cron.hourly</filename>, <filename>/etc/cron.daily</filename>,
   <filename>/etc/cron.weekly</filename> and
   <filename>/etc/cron.monthly</filename>, whose execution is controlled by
   <filename>/usr/lib/cron/run-crons</filename>.
   <filename>/usr/lib/cron/run-crons</filename> is run every 15 minutes from
   the main table (<filename>/etc/crontab</filename>). This guarantees that
   processes that may have been neglected can be run at the proper time.
  </para>
  <para>
   To run the <filename>hourly</filename>, <filename>daily</filename> or other
   periodic maintenance scripts at custom times, remove the time stamp files
   regularly using <filename>/etc/crontab</filename> entries (see
   <xref linkend="ex-suse-packages-cron-time"/>, which removes the
   <filename>hourly</filename> one before every full hour, the
   <filename>daily</filename> one once a day at 2:14 a.m., etc.).
  </para>
  <example xml:id="ex-suse-packages-cron-time">
   <title>/etc/crontab: Remove Time Stamp Files</title>
<screen>59 *  * * *     root  rm -f /var/spool/cron/lastrun/cron.hourly
14 2  * * *     root  rm -f /var/spool/cron/lastrun/cron.daily
29 2  * * 6     root  rm -f /var/spool/cron/lastrun/cron.weekly
44 2  1 * *     root  rm -f /var/spool/cron/lastrun/cron.monthly</screen>
  </example>
  <para>
   Or you can set <literal>DAILY_TIME</literal> in
   <filename>/etc/sysconfig/cron</filename> to the time at which
   <filename>cron.daily</filename> should start. The setting of
   <literal>MAX_NOT_RUN</literal> ensures that the daily tasks get triggered to
   run, even if the user did not turn on the computer at the specified
   <literal>DAILY_TIME</literal> for a longer time. The maximum value of
   <literal>MAX_NOT_RUN</literal> is 14 days.
  </para>
  <para>
   The daily system maintenance jobs are distributed to various scripts for
   reasons of clarity. They are contained in the package
   <systemitem class="resource">aaa_base</systemitem>.
   <filename>/etc/cron.daily</filename> contains, for example, the components
   <filename>suse.de-backup-rpmdb</filename>,
   <filename>suse.de-clean-tmp</filename> or
   <filename>suse.de-cron-local</filename>.
   <remark role="trans">"suse.de" is just a prefix to avoid naming clashes with
   third party provided scripts; read it as: these are scripts provided by
   SUSE.  They are not German packages and you must not localize these filename
   in any way.</remark>
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-packages-cronstatus">
  <title>Stopping Cron Status Messages</title>
  <para>
   To avoid the mail-flood caused by cron status messages, the default value of
   <literal>SEND_MAIL_ON_NO_ERROR</literal> in
   <filename>/etc/sysconfig/cron</filename> is set to "<literal>no</literal>"
   for new installations. Even with this setting to "<literal>no</literal>",
   cron data output will still be sent to the <literal>MAILTO</literal>
   address, as documented in the cron man page.
  </para>
  <para>
   In the update case it is recommended to set these values according to your
   needs.
  </para>
 </sect2>

 <xi:include href="suse_logfiles.xml"/>

 <sect2 xml:id="sec-suse-locate">
  <title>The <command>locate</command> Command</title>
<!-- bnc#892484: mlocate since SLE 12 -->
  <para>
   <command>locate</command>, a command for quickly finding files, is not
   included in the standard scope of installed software. If desired, install
   the package <systemitem>mlocate</systemitem>, the successor of the package
   <systemitem>findutils-locate</systemitem>. The
   <systemitem class="daemon">updatedb</systemitem> process is started
   automatically every night or about 15&nbsp;minutes after booting the system.
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-ulimit">
  <title>The <command>ulimit</command> Command</title>
  <para>
   With the <command>ulimit</command> (<emphasis>user limits</emphasis>)
   command, it is possible to set limits for the use of system resources and to
   have these displayed. <command>ulimit</command> is especially useful for
   limiting available memory for applications. With this, an application can be
   prevented from co-opting too much of the system resources and slowing or
   even hanging up the operating system.
  </para>
  <para>
   <command>ulimit</command> can be used with various options. To limit memory
   usage, use the options listed in <xref linkend="tab-suse-packages-ulimit"/>.
  </para>
  <table xml:id="tab-suse-packages-ulimit">
   <title><command>ulimit</command>: Setting Resources for the User</title>
<!-- Taken literally from the bash manpage. -ke- -->
   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>-m</option>
       </para>
      </entry>
      <entry>
       <para>
        The maximum resident set size
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-v</option>
       </para>
      </entry>
      <entry>
       <para>
        The maximum amount of virtual memory available to the shell
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-s</option>
       </para>
      </entry>
      <entry>
       <para>
        The maximum size of the stack
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-c</option>
       </para>
      </entry>
      <entry>
       <para>
        The maximum size of core files created
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-a</option>
       </para>
      </entry>
      <entry>
       <para>
        All current limits are reported
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   Systemwide default entries are set in <filename>/etc/profile</filename>.
   Editing this file directly is not recommended, because changes will be
   overwritten during system upgrades. To customize systemwide profile
   settings, use <filename>/etc/profile.local</filename>. Per-user settings
   should be made in
   <filename>~<replaceable>USER</replaceable>/.bashrc</filename>.
  </para>
  <example xml:id="ex-u-ulimit-bashrc">
   <title><command>ulimit</command>: Settings in <filename>~/.bashrc</filename></title>
<screen># Limits maximum resident set size (physical memory):
ulimit -m 98304

# Limits of virtual memory:
ulimit -v 98304</screen>
  </example>
  <para>
   Memory allocations must be specified in KB. For more detailed information,
   see <command>man bash</command>.
  </para>
  <important>
   <title><command>ulimit</command> Support</title>
   <para>
    Not all shells support <command>ulimit</command> directives. PAM (for
    example, <literal>pam_limits</literal>) offers comprehensive adjustment
    possibilities as an alternative to <command>ulimit</command>.
   </para>
  </important>
 </sect2>

 <sect2 xml:id="sec-suse-free">
  <title>The <command>free</command> Command</title>
  <para>
   The <command>free</command> command displays the total amount of free and
   used physical memory and swap space in the system and the buffers and
   cache consumed by the kernel. The concept of <emphasis>available
   RAM</emphasis> dates back to before the days of unified memory management.
   The slogan <emphasis>free memory is bad memory</emphasis> applies well to
   Linux. As a result, Linux has always made the effort to balance out caches
   without actually allowing free or unused memory.
  </para>
  <para>
   The kernel does not have direct knowledge of any applications or user data.
   Instead, it manages applications and user data in a <emphasis>page
   cache</emphasis>. If memory runs short, parts of it are written to the swap
   partition or to files, from which they can initially be read using the
   <command>mmap</command> command (see <command>man mmap</command>).
  </para>
  <para>
   The kernel also contains other caches, such as the <emphasis>slab
   cache</emphasis>, where the caches used for network access are stored. This
   may explain the differences between the counters in
   <filename>/proc/meminfo</filename>. Most, but not all, of them can be
   accessed via <filename>/proc/slabinfo</filename>.
  </para>
  <para>
   However, if your goal is to find out how much RAM is currently being used,
   find this information in <filename>/proc/meminfo</filename>.
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-manpages">
  <title>Man Pages and Info Pages</title>
  <para>
   For some GNU applications (such as tar), the man pages are no longer
   maintained. For these commands, use the <option>--help</option> option to
   get a quick overview of the info pages, which provide more in-depth
   instructions. Info
<!-- it's a product name; so capitalize it -ke- -->
   is GNU's hypertext system. Read an introduction to this system by entering
   <command>info</command> <option>info</option>. Info pages can be viewed with
   Emacs by entering <command>emacs</command> <option>-f info</option> or
   directly in a console with <command>info</command>. You can also use tkinfo,
   xinfo or the help system to view info pages.
  </para>
 </sect2>

<!-- bnc#442262 -->

 <sect2 xml:id="sec-suse-packages-man">
  <title>Selecting Man Pages Using the <command>man</command> Command</title>
  <para>
   To read a man page enter <command>man</command>
   <replaceable>MAN_PAGE</replaceable>. If a man page with the same name exists
   in different sections, they will all be listed with the corresponding
   section numbers. Select the one to display. If you do not enter a section
   number within a few seconds, the first man page will be displayed.
  </para>
  <para>
   To change this to the default system behavior, set
   <literal>MAN_POSIXLY_CORRECT=1</literal> in a shell initialization file such
   as <filename>~/.bashrc</filename>.
  </para>
 </sect2>

 <xi:include href="suse_emacs.xml"/>
</sect1>
