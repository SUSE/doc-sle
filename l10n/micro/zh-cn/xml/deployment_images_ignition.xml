<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_images_ignition.xml" version="5.0" xml:id="cha-images-ignition">
  <title>使用 Ignition 进行配置</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
    <abstract>
      <para>
        本章提供有关用于设置计算机的 Ignition 配置工具的详细信息。在本章中，您将了解如何提供用于计算机定义的必要配置文件。
      </para>
    </abstract>
  </info>
  <sect1 xml:id="sec-about-ignition">
    <title>关于 Ignition</title>

    <para>
      Ignition 是一种配置工具，可让您在首次引导时根据您的具体要求配置系统。系统首次引导时，会将 Ignition 作为 <filename>initramfs</filename> 的一部分加以装载，并会在特定目录（在 USB 闪存盘上，或者您也可以提供 URL）中搜索配置文件。所有更改都是在内核从临时文件系统切换到实际根文件系统前（在 <literal>switch_root</literal> 命令发出前）执行的。
    </para>

    <para>
      Ignition 使用 JSON 格式的配置文件。该文件名为 <filename>config.ign</filename>。
    </para>
  </sect1>
  <sect1 xml:id="sec-ignition-configuration">
    <title><filename>config.ign</filename></title>

    <para>
      <filename>config.ign</filename> 是 JSON 配置文件，用于提供针对 Ignition 的指令。您可以手动创建 JSON 格式的文件，也可以使用 Fuel Ignition 工具 (<link xlink:href="https://opensuse.github.io/fuel-ignition/"/>) 生成基本的指令集。请注意，Fuel Ignition 工具不提供完整的选项集，因此您可能必须手动修改文件。
    </para>

    <para>
      或者，为了更直观易懂，您也可以先创建 YAML 格式的 <filename>config.fcc</filename> 文件，然后将该文件转换为 JSON 格式。有关细节，请参见<xref linkend="sec-converting-config"/>。
    </para>

    <para>
      在裸机上安装时，配置文件 <filename>config.ign</filename> 必须位于标记为 <literal>ignition</literal> 的配置媒体上的 <filename>ignition</filename> 子目录中。目录结构必须如下所示：
    </para>

<screen>
&lt;root directory&gt;
└── ignition
    └── config.ign

 </screen>

    <para>
      如果您要配置 QEMU/KVM 虚拟机，请以 <command>qemu</command> 命令的属性来提供 <filename>config.ign</filename> 的路径。例如：
    </para>

<screen>
-fw_cfg name=opt/com.coreos/config,file=<replaceable>PATH_TO_config.ign</replaceable>
 </screen>

    <para>
      <filename>config.ign</filename> 包含各种数据类型：对象、字符串、整数、布尔值以及对象列表。如需完整规范，请参见 <link xlink:href="https://coreos.github.io/ignition/configuration-v3_3/">Ignition
      specification v3.3.0</link>。
    </para>

    <para>
      <literal>version</literal> 属性为必要属性，对于 SLE Micro，其值必须设置为 <literal>3.3.0</literal> 或更低版本，否则 Ignition 将会失败。
    </para>

    <para>
      如果您要以 root 身份登录系统，必须至少包含 <systemitem class="username">root</systemitem> 的口令，但建议通过 SSH 密钥建立访问权限。如果您要配置口令，请务必使用安全口令。如果您使用随机生成的口令，请至少包含 10 个字符。如果手动创建口令，请确保其长度超过 10 个字符，并且必须包含大小写字母和数字。
    </para>

    <sect2 xml:id="sec-ignition-examples">
      <title>配置示例</title>
      <para>
        本节将为您提供 JSON 和 YAML 两种格式的 Ignition 配置的一些常见示例。如果您创建 YAML 格式的配置，则需要按<xref linkend="sec-converting-config"/>中所述将配置转换为 JSON 格式。
      </para>
      <important>
        <title>声明默认子卷外部的内容</title>
        <para>
          请注意，如果您要在<xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>外部创建文件，则需要使用 <literal>filesystem</literal> 属性定义目录。
        </para>
      </important>
      <note>
        <title><literal>version</literal> 属性为必要属性</title>
        <para>
          分别包含具体的版本：在 <filename>config.ign</filename> 中为 3.3.0 或更低版本，在 <filename>config.fcc</filename> 中为 1.4.0 或更低版本。
        </para>
      </note>
      <sect3 xml:id="sec-ignition-storage">
        <title>存储配置</title>
        <para>
          <literal>storage</literal> 属性用于配置分区、RAID，定义文件系统，创建文件等。要定义分区，请使用 <literal>disks</literal> 属性。<literal>filesystem</literal> 属性用于指定分区格式并定义特定分区的挂载点。<literal>files</literal> 属性可用于在文件系统中创建文件。后续章节中将介绍上述每个属性。
        </para>
        <sect4 xml:id="sec-storage-disks">
          <title><literal>disks</literal> 属性</title>
          <para>
            <literal>disks</literal> 属性是设备列表，可用于定义这些设备上的分区。<literal>disks</literal> 属性必须至少包含一个 <literal>device</literal>。其他属性为可选属性。下面的示例将使用单个虚拟设备并将磁盘分成四个分区：
          </para>
<screen>
    {
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "disks": [
            {
                "device": "/dev/vda",
                "wipe_table": true,
                "partitions": [
                    {
                        "label": "root",
                        "number": 1,
                        "type_guid": "4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709"
                    },
                    {
                        "label": "boot",
                        "number": 2,
                        "type_guid": "BC13C2FF-59E6-4262-A352-B275FD6F7172"
                    },
                    {
                        "label": "swap",
                        "number": 3,
                        "type_guid": "0657FD6D-A4AB-43C4-84E5-0933C84B4F4F"
                    },
                    {
                        "label": "home",
                        "number": 4,
                        "type_guid": "933AC7E1-2EB4-4F13-B844-0E14E2AEF915"
                    }
                ]
            }
        ]
    }
}
     </screen>
          <para>
            YAML 格式的相同示例：
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  disks:
    - device: "/dev/vda"
      wipeTable: true
      partitions: 
        - label: root
          number: 1
          typeGuid: 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709
        - label: boot
          number: 2
          typeGuid: BC13C2FF-59E6-4262-A352-B275FD6F7172
        - label: swap
          number: 3
          typeGuid: 0657FD6D-A4AB-43C4-84E5-0933C84B4F4F
        - label: home
          number: 4
          typeGuid: 933AC7E1-2EB4-4F13-B844-0E14E2AEF915
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-raid">
          <title><literal>raid</literal> 属性</title>
          <para>
            <literal>raid</literal> 是 RAID 阵列列表。<literal>raid</literal> 的下列属性为必要属性：
          </para>
          <variablelist>
            <varlistentry>
              <term>level</term>
              <listitem>
                <para>
                  特定 RAID 阵列的级别（线性、raid0、raid1、raid2、raid3、raid4、raid5、raid6）
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>devices</term>
              <listitem>
                <para>
                  阵列中设备的列表，通过绝对路径引用这些设备
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>name</term>
              <listitem>
                <para>
                  将用于 md 设备的名称
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<screen>
      {
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "raid": [
            {
                "name": "system",
                "level": "raid1",
                "devices": [
                    "/dev/sda",
                    "/dev/sdb"
                ]
            }
        ]
    }
}
     </screen>
          <para>
            YAML 格式的相同示例：
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  - raid: data
    name: system
    level: raid1
    devices: "/dev/sda", "/dev/sdb"
      
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-filesystem">
          <title><literal>filesystem</literal> 属性</title>
          <para>
            <literal>filesystem</literal> 必须包含以下属性：
          </para>
          <variablelist>
            <varlistentry>
              <term>device</term>
              <listitem>
                <para>
                  设备的绝对路径，如果是物理磁盘，通常为 <literal>/dev/sda</literal>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>format</term>
              <listitem>
                <para>
                  文件系统格式（btrfs、ext4、xfs、vfat 或 swap）
                </para>
                <note>
                  <para>
                    对于 SLE Micro，<literal>root</literal> 文件系统必须为 btrfs 格式。
                  </para>
                </note>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            下面的示例演示如何使用 <literal>filesystem</literal> 属性。<filename>/opt</filename> 目录将挂载到 <literal>/dev/sda1</literal> 分区，该分区为 btrfs 格式。将不擦除分区表。
          </para>
<screen>
{
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "filesystems": [
            {
                "path": "/opt",
                "device": "/dev/sda1",
                "format": "btrfs",
                "wipe_filesystem": false
            }
        ]
    }
}
</screen>
          <para>
            YAML 格式的相同示例：
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  filesystems:
    - path: /opt
      device: "/dev/sda1"
      format: btrfs
      wipe_filesystem: false
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-files">
          <title><literal>files</literal> 属性</title>
          <para>
            您可以使用 <literal>files</literal> 属性在计算机上创建任何文件。请注意，如果您要在<xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>外部创建文件，需要使用 <literal>filesystem</literal> 属性定义目录。
          </para>
          <para>
            在下面的示例中，将使用 <literal>files</literal> 属性创建一个主机名。将创建文件 <filename>/etc/hostname</filename>，其中包含 <emphasis>slemicro-1</emphasis> 主机名。
          </para>
          <note>
            <title>JSON 和 YAML 格式的不同数制</title>
            <para>
              请注意，JSON 格式使用十进制，因此 <literal>mode</literal> 值为访问权限的十进制表示法。要使用八进制表示法，建议在此示例中采用 YAML 格式。
            </para>
          </note>
<screen>
{
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "files": [
            {
                "path": "/etc/hostname",
                "mode": 420,
                "overwrite": true,
                "contents": {
                    "inline": "slemicro-1"
                }
            }
        ]
    }
}
</screen>
          <para>
            YAML 格式的相同示例：
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  files:
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: "slemicro-1"
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-directories">
          <title><literal>directories</literal> 属性</title>
          <para>
            <literal>directories</literal> 属性是将在文件系统中创建的目录列表。<literal>directories</literal> 属性必须至少包含一个 <literal>path</literal> 属性。
          </para>
<screen>
{
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "directories": [
            {
                "path": "/mnt/backup",
                "user": {
                    "name": "tux"
                }
            }
        ]
    }
}
</screen>
          <para>
            YAML 格式的相同示例：
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  directories:
    - path: /mnt/backup
      user: 
       - name: tux    
 </screen>
        </sect4>
      </sect3>
      <sect3 xml:id="sec-ignition-users">
        <title>用户管理</title>
        <para>
          <literal>passwd</literal> 属性用于添加用户。如果您要登录到系统，请创建 <systemitem class="username">root</systemitem> 并设置 <systemitem class="username">root</systemitem> 的口令，以及/或者将 SSH 密钥添加到 Ignition 配置中。您需要对 <systemitem class="username">root</systemitem> 口令进行哈希处理，例如使用 <command>openssl</command> 命令来处理：
        </para>
<screen>
 openssl passwd -6
 </screen>
        <para>
          该命令会为您选择的口令创建哈希。使用此哈希作为 <literal>password_hash</literal> 属性的值。
        </para>
<screen>
variant: fcos
version: 1.0.0
passwd:
  users:
   - name: root
     password_hash: "$6$PfKm6Fv5WbqOvZ0C$g4kByYM.D2B5GCsgluuqDNL87oeXiHqctr6INNNmF75WPGgkLn9O9uVx4iEe3UdbbhaHbTJ1vpZymKWuDIrWI1"
     ssh_authorized_keys: 
       - ssh-rsa long...key user@host
 </screen>
        <para>
          <literal>users</literal> 属性必须至少包含一个 <literal>name</literal> 属性。<literal>ssh_authorized_keys</literal> 是用户的 SSH 密钥列表。
        </para>
        <note>
          <title>创建非 <systemitem class="username">root</systemitem> 用户</title>
          <para>
            在创建非 <systemitem class="username">root</systemitem> 用户时，需要定义用户的 <filename>/home</filename> 目录，因为这些目录（通常为 <filename>/home/<replaceable>USER_NAME</replaceable></filename>）默认不会挂载。因此，请使用 <literal>storage</literal>/<literal>filesystem</literal> 属性声明这些目录。例如，对于 tux 用户，其示例如下所示：
          </para>
<screen>
        {
  "ignition": {
    "version": "3.2.0"
  },
  "passwd": {
    "users": [
      {
        "name": "tux",
        "passwordHash": "$2a$10$US9XSqLOqMmGq/OnhlVjPOwuZREh2.iEtlwD5LI7DKgV24NJU.wO6"
      }
    ]
  },
  "storage": {
    "filesystems": [
      {
        "device": "/dev/disk/by-label/ROOT",
        "format": "btrfs",
        "mountOptions": [
          "subvol=/@/home"
        ],
        "path": "/home",
        "wipeFilesystem": false
      }
    ]
  }
}
      </screen>
          <para>
            YAML 格式的相同示例：
          </para>
<screen>
version: 1.2.0
passwd:
  users:
    - name: tux
      passwordHash: $2a$10$US9XSqLOqMmGq/OnhlVjPOwuZREh2.iEtlwD5LI7DKgV24NJU.wO6
storage:
  filesystems:
    - device: /dev/disk/by-label/ROOT
      format: btrfs
      mountOptions:
        - subvol=/@/home
      path: /home
      wipeFilesystem: false
      </screen>
        </note>
      </sect3>
      <sect3 xml:id="sec-ignition-systemd">
        <title>启用 <literal>systemd</literal> 服务</title>
        <para>
          您可以通过在 <literal>systemd</literal> 属性中指定 <systemitem class="daemon">systemd</systemitem> 服务来启用相应服务。<literal>name</literal> 必须是要启用的服务的确切名称（包含后缀）。
        </para>
<screen>
variant: fcos
version: 1.0.0
systemd:
  units:
  - name: sshd.service
    enabled: true
 </screen>
<screen>
  {
  "ignition": {
    "version": "3.0.0"
  },
  "systemd": {
    "units": [
      {
        "enabled": true,
        "name": "sshd.service"
      }
    ]
  }
}
 </screen>
        <para>
          YAML 格式的相同示例：
        </para>
<screen>
variant: fcos
version: 1.0.0
systemd:
  units:
  - name: sshd.service
    enabled: true
 </screen>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-converting-config">
      <title>将 YAML <literal>fcc</literal> 文件转换为 JSON <literal>ign</literal></title>
      <para>
        为了使 Ignition 配置更直观易懂，您可以分两个阶段来进行配置。首先，以 <literal>fcc</literal> 文件格式准备 YAML 配置，然后将此配置转换为 JSON。可通过 <literal>butane</literal> 工具完成此转换。
      </para>
      <para>
        转换期间，<literal>butane</literal> 还会校验 YAML 文件的语法，捕获结构中可能存在的错误。若要使用最新版 <literal>butane</literal> 工具，请添加储存库：
      </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command>  zypper ar -f \
  https://download.opensuse.org/repositories/devel:/kubic:/ignition/<replaceable>DISTRIBUTION</replaceable>/ \
  devel_kubic_ignition
 </screen>
      <para>
        其中，<replaceable>DISTRIBUTION</replaceable> 是下列其中一项（具体取决于您的发行套件）：
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>openSUSE_Tumbleweed</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>openSUSE_Leap_$release_number</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>15.a</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        现在，您可以安装 <literal>butane</literal> 工具：
      </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command>  zypper in butane
 </screen>
      <para>
        现在，您可以运行以下命令来调用 <literal>butane</literal>：
      </para>
<screen>
<prompt>&gt; </prompt> butane -p -o config.ign config.fcc
 </screen>
      <para>
        其中：
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <filename>config.fcc</filename> 是 YAML 配置文件的路径
          </para>
        </listitem>
        <listitem>
          <para>
            <filename>config.ign</filename> 是输出 JSON 配置文件的路径
          </para>
        </listitem>
        <listitem>
          <para>
            <option>-p</option> 命令选项会在输出文件中添加换行符，使其更易于阅读。
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
</chapter>
