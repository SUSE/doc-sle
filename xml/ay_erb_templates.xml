<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
xml:id="erb-templates">
 <title>ERB templates</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  ERB templates allow embedding some Ruby code within the profile to modify it
  during the installation. With this approach, you can inspect the system and
  adjust the profile by setting values, adding or skipping sections, etc.
 </para>
 <para>
  To activate the ERB processing, the profile must have the extension
  <filename>.erb</filename> (for example,
  <filename>autoyast.xml.erb</filename>). Hence, it is not possible to combine
  rules/classes and ERB templates.
 </para>
 <sect1 xml:id="erb">
  <title>What is <literal>ERB</literal>?</title>

  <para>
   <literal>ERB</literal> stands for <emphasis>Embedded Ruby</emphasis> and
   allows using the power of the Ruby programming language to generate
   different kind of contents. With <literal>ERB</literal>, you can include
   some Ruby code in your profiles to adapt them at runtime depending on the
   installation system.
  </para>

  <para>
   When using ERB, the Ruby code is enclosed between <literal>&lt;%</literal>
   and <literal>%&gt;</literal> signs. If you want the output of the command to
   be included in the resulting profile, you simply need to add an equal sign
   (<literal>=</literal>).
  </para>

  <example xml:id="simple-erb">
   <title>Including a file using ERB</title>
<screen>&lt;bootloader&gt;
  &lt;% require "open-uri" %&gt;
  &lt;%= URI.open("http://192.168.1.1/profiles/bootloader-common.xml").read %&gt;
&lt;/bootloader&gt;</screen>
  </example>

  <para>
   &ay; offers a small set of <emphasis>helper functions</emphasis> to retrieve
   information from the underlying system, like <literal>disks</literal> or
   <literal>network_cards</literal>. You can check the list of helpers and
   their values in the <xref linkend="erb-helpers" /> section.
  </para>
 </sect1>
 <sect1 xml:id="erb-helpers">
  <title>Template helpers</title>

  <para>
   Template helpers are sets of Ruby methods that can be used in the profiles
   to retrieve information about the installation system.
  </para>

  <sect2 xml:id="erb-disks-helper">
   <title><literal>disks</literal></title>
   <para>
    The <literal>disks</literal> helper returns a list of the detected disks.
    Each element of the list contains some basic information like the device
    name or the size.
   </para>
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>
         Key
        </para>
       </entry>
       <entry>
        <para>
         Type
        </para>
       </entry>
       <entry>
        <para>
         Value
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         <literal>:device</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Device kernel name (for example, <literal>sda</literal>).
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:model</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Disk model
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:serial</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Serial number
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:size</literal>
        </para>
       </entry>
       <entry>
        <para>
         Integer
        </para>
       </entry>
       <entry>
        <para>
         Disk size (in bytes)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:udev_names</literal>
        </para>
       </entry>
       <entry>
        <para>
         Array&lt;String&gt;
        </para>
       </entry>
       <entry>
        <para>
         List of disk udev names. You can use any of them to refer to the
         device.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:vendor</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Disk vendor's name
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    The profile in the example below installs the system on the largest disk.
    It sorts the list of existing disks by size and takes the last one. Then it
    uses the <literal>:device</literal> key as value for the
    <literal>device</literal> element.
   </para>
   <example>
    <title>Using the largest disk</title>
<screen>&lt;partitioning t="list"&gt;
  &lt;drive&gt;
    &lt;% disk = disks.sort_by { |d| d[:size] }.last %&gt; &lt;!-- find the largest disk --&gt;
    &lt;device&gt;&lt;%= disk[:device] %&gt;&lt;/device&gt; &lt;!-- print the disk device name --&gt;
    &lt;initialize t="boolean"&gt;true&lt;/initialize&gt;
    &lt;use&gt;all&lt;/use&gt;
  &lt;/drive&gt;
&lt;/partitioning&gt;
     </screen>
   </example>
  </sect2>

  <sect2 xml:id="erb-network-cards-helper">
   <title><literal>network_cards</literal></title>
   <para>
    The <literal>network_cards</literal> helper returns a list of network
    cards, including their names, status information (for example, if they are
    connected or not).
   </para>
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>
         Key
        </para>
       </entry>
       <entry>
        <para>
         Type
        </para>
       </entry>
       <entry>
        <para>
         Value
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         <literal>:device</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Device name (for example, <literal>eth0</literal> or
         <literal>enp3s0</literal>)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:mac</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         MAC address
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:active</literal>
        </para>
       </entry>
       <entry>
        <para>
         Boolean
        </para>
       </entry>
       <entry>
        <para>
         Whether the device is active or not
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:link</literal>
        </para>
       </entry>
       <entry>
        <para>
         Boolean
        </para>
       </entry>
       <entry>
        <para>
         Whether the device is connected or not
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:vendor</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Disk vendor's name
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    The following example finds the first network card that is connected to the
    network and configures it to use DHCP.
   </para>
   <example>
    <title>Configure the connected network cards</title>
<screen>&lt;interfaces t="list"&gt;
  &lt;% with_link = netword_cards.sort_by { |n| n[:name] }.find { |n| n[:link] } %&gt;
  &lt;% if with_link %&gt;
    &lt;interface&gt;
      &lt;device&gt;&lt;%= with_link[:device] %&gt;&lt;/device&gt;
      &lt;startmode&gt;auto&lt;/startmode&gt;
      &lt;bootproto&gt;dhcp&lt;/bootproto&gt;
      &lt;/interface&gt;
  &lt;% end &gt;
&lt;/interfaces&gt;
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="erb-os-release-helper">
   <title><literal>os_release</literal></title>
   <para>
    The <literal>os_release</literal> helper returns the operating system
    information, which is included in the <filename>/etc/os-release</filename>
    file.
   </para>
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>
         Key
        </para>
       </entry>
       <entry>
        <para>
         Type
        </para>
       </entry>
       <entry>
        <para>
         Value
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         <literal>:id</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Distribution ID (<phrase os="sles;osuse">for example,
         <literal>sles</literal>,
         <literal>opensuse-tumbleweed</literal></phrase><phrase os="slemicro"><literal>suse-microos</literal></phrase>)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:name</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Distribution name (<phrase os="sles;osuse">for example,
         <literal>SLES</literal> or <literal>openSUSE
         Tumbleweed</literal></phrase><phrase os="slemicro"><literal>SLE
         Micro</literal></phrase>)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>:version</literal>
        </para>
       </entry>
       <entry>
        <para>
         String
        </para>
       </entry>
       <entry>
        <para>
         Distribution version (<phrase os="sles;osuse">for example,
         <literal>15.2</literal></phrase><phrase os="slemicro"><literal>5.1</literal></phrase>)
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para os="sles;osuse">
    You might use this information to decide which product to install, using
    pretty much the same profile for all of them (SLE or openSUSE
    distributions).
   </para>
   <example os="sles;osuse">
    <title>Reusing the same profile for different distributions</title>
<screen>&lt;products t="list"&gt;
  &lt;% if os_release[:id] == 'sle' %&gt;
  &lt;product&gt;SLES&lt;/product&gt;
  &lt;% else %&gt;
  &lt;product&gt;openSUSE&lt;/product&gt;
  &lt;% end %&lt;
&lt;/products&gt;</screen>
   </example>
  </sect2>
 </sect1>
</chapter>
