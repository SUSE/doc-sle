<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="apache2.xml" version="5.0" xml:id="cha-apache2"> <title>Apache HTTPサーバ</title>
 <info>
      <abstract>
        <para>
    <link xlink:href="http://www.netcraft.com/"/>の調査によると、Apache HTTP Server (Apache)は世界で最も広く利用されているWebサーバです。ApacheはApache Software Foundation (<link xlink:href="http://www.apache.org/"/>)により開発され、ほとんどのオペレーティングシステムに対応しています。<phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase>には、Apache version 2.4が付属しています。この章では、Webサーバのインストール、環境設定、設定方法、SSL、CGI、その他のモジュールの使用方法、およびApacheのトラブルシューティング方法について説明します。
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-apache2-quickstart">
  <title>クイックスタート</title>

  <para>
   このセクションでは、Apacheを迅速に設定し、起動します。Apacheをインストールして設定するには、<systemitem class="username">root</systemitem>ユーザでなければなりません。
  </para>

  <sect2 xml:id="sec-apache-quickstart-requirements">
   <title>要件</title>
   <para>
    Apache Webサーバをセットアップする前に、次の要件が満たされていることを確認してください。
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      マシンのネットワークが適切に設定されているか。この項目の詳細については、<xref linkend="cha-network"/>を参照してください。
     </para>
    </listitem>
    <listitem>
     <para>
      マシンの正確なシステム時間は、タイムサーバとの同期により維持されます。これは、HTTPプロトコルの一部が正確な時間に依存するために必要です。この項目の詳細については、<xref linkend="cha-ntp"/>を参照してください。
     </para>
    </listitem>
    <listitem>
     <para>
      最新のセキュリティアップデートがインストールされています。不明な場合は、YaSTオンラインアップデートを実行します。
     </para>
    </listitem>
    <listitem>
     <para>
      ファイアウォールで、デフォルトのWebサーバポート(<literal>80</literal>)を開きます。このために、公開ゾーンのサービス<literal>http</literal>を許可するように<systemitem class="daemon">firewalld</systemitem>を設定します。詳細については<xref linkend="sec-security-firewall-firewalld-cmd"/>を参照してください。
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-quickstart-installation">
   <title>インストール</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheは、デフォルトではインストールされません。<quote>そのまますぐに</quote>実行できる標準の事前定義された設定を使用してインストールするには、次の手順を使用します。
   </para>
   <procedure>
    <title>デフォルト設定でApacheをインストールする</title>
    <step>
     <para>
      YaSTを起動して、<menuchoice> <guimenu>ソフトウェア</guimenu>
      <guimenu>ソフトウェア管理</guimenu> </menuchoice>の順に選択します。
     </para>
    </step>
    <step>
     <para>
      <menuchoice> <guimenu>表示</guimenu> <guimenu>パターン</guimenu>
      </menuchoice>の順に選択して、<guimenu>WebおよびLAMPサーバ</guimenu>を選択します。
     </para>
    </step>
    <step>
     <para>
      依存関係のあるパッケージのインストールを確認して、インストールプロセスを完了します。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-apache-quickstart-start">
   <title>開始</title>
   <para>
    Apacheは、ブート時に自動的に起動することも、手動で起動することもできます。
   </para>
   <para>
    Apacheをターゲット<literal>multi-user.target</literal>および<literal>graphical.target</literal>でブート時に自動的に起動するには、次のコマンドを実行します。
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl enable apache2</screen>
   <para>
    <remark>taroth 2014-02-11: commenting the following procedure as it is unsure
      how to enable a service for certain targets with YaST Services Manager,
      filed bnc# 863333 for it
     UPDATE tbazant 2015-08-20: still not clear, leaving commented out
     </remark>
   </para>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>の<systemitem class="daemon">systemd</systemitem>ターゲットの詳細、およびYaST<guimenu>サービスマネージャ</guimenu>の詳細については、<xref linkend="sec-boot-runlevel-edit"/>を参照してください。
   </para>
   <para>
    シェルを使用してApacheを手動で起動するには、<command>systemctl start apache2</command>コマンドを実行します。
   </para>
   <procedure>
    <title>Apacheが実行中かどうかチェックする</title>
    <para>
     Apacheの起動時にエラーメッセージが表示されなければ、通常、このWeb serverが実行されています。これをテストするには:
    </para>
    <step>
     <para>
      ブラウザを起動し、<link xlink:href="http://localhost/"/>を開きます。
     </para>
     <para>
      Apacheが立ち上がって稼働している場合は、<quote>It works!</quote>で始まるテストページが表示されます。
     </para>
    </step>
    <step>
     <para>
      このページが表示されない場合は、<xref linkend="sec-apache2-troubleeshooting"/>を参照してください。
     </para>
    </step>
   </procedure>
   <para>
    Webサーバの起動後は、ドキュメントを追加、必要に応じて設定を調整、およびモジュールをインストールして機能を追加することができます。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-configuration">
  <title>Apacheの設定</title>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>には、2つの設定オプションがあります。
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   手動で設定を行えば細かい点まで調整できますが、YaSTのGUIほど便利ではありません。
  </para>

  <important>
   <title>設定変更後のApacheのリロードまたは再起動</title>
   <para>
    設定の変更は、ほとんどの場合、Apacheをリロード(または再起動)しないと有効になりません。<command>systemctl reload apache2</command>コマンドを使用してApacheを手動で再ロードするか、<xref linkend="sec-apache2-start-stop"/>に示されている再起動オプションの1つを使用します。
   </para>
   <para>
    YaSTでApatcheを設定する場合、これを自動化するには、<xref linkend="sec-apache2-configuration-yast-server-configuration"/>で説明されているように、<guimenu>HTTPサービス</guimenu>を<guimenu>有効</guimenu>に設定します。
   </para>
  </important>

  <sect2 xml:id="sec-apache2-configuration-manually-configfiles">
   <title>Apache設定ファイル</title>
   <para>
    このセクションでは、Apache設定ファイルの概要を示します。環境設定にYaSTを使用する場合は、これらのファイルを操作する必要はありません。ただし、後で手動設定に切り替える場合に、この情報が役立つことがあります。
   </para>
   <para>
    Apache設定ファイルは、次の2つの場所にあります。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename>は、ロードするモジュール、インクルードする付加的な設定ファイル、サーバを起動するときのフラグ、コマンドラインに追加するべきフラグなど、Apacheのいくつかのグローバル設定を制御します。このファイルの各設定オプションについては、詳細なドキュメントが存在するので、ここでは説明しません。一般的な目的のWebサーバの場合には、<filename>/etc/sysconfig/apache2</filename>の内容を設定するだけで十分でしょう。
    </para>
   </sect3>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename>には、Apacheのすべての設定ファイルが含まれます。ここでは、各ファイルの目的について説明します。各ファイルには、複数の設定オプションが含まれます(<emphasis>ディレクティブ</emphasis>とも呼ばれる)。これらのファイルの各設定オプションについては、詳細なドキュメントがあるので、ここでは説明しません。
    </para>
    <para>
     Apache設定ファイルは、次のように編成されます。
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- httpd.conf
     |- listen.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- server-tuning.conf
     |- ssl.*
     |- ssl-global.conf
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>「etc/apache2」内のApache設定ファイル</title>
     <varlistentry>
      <term><filename>charset.conv</filename>
      </term>
      <listitem>
       <para>
        各言語に使用する文字セットを指定します。このファイルは、編集しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        他のモジュールによって追加される設定ファイル。これらの設定ファイルは、必要に応じて仮想ホスト設定に含めることができます。その例として、<filename>vhosts.d/vhost.template</filename>を参照してください。設定ファイルを仮想ホスト設定に含めることにより、仮想ホストごとに別のモジュールセットを指定できます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename>
      </term>
      <listitem>
       <para>
        すべての仮想ホストに対応するグローバル設定で、それぞれ適切なデフォルト値が指定されています。デフォルト値を変更する代わりに、仮想ホスト設定で上書きします。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename>
      </term>
      <listitem>
       <para>
        Apacheによるエラーの対処方法を定義します。すべての仮想ホストに対してこれらのメッセージをカスタマイズするには、このファイルを編集します。カスタマイズしない場合は、仮想ホスト設定内のこれらのディレクティブを上書きします。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename>
      </term>
      <listitem>
       <para>
        メインのApacheサーバ設定ファイル。このファイルは変更しません。インクルード文およびグローバル設定が含まれています。ここに記載されている設定ファイルのグローバル設定を上書きします。仮想ホスト設定内のホスト固有の設定(ドキュメントルートなど)を変更します。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename>
      </term>
      <listitem>
       <para>
        Apacheを特定のIPアドレスおよびポートにバインドします。名前ベースの仮想ホスティングもこのファイルで設定します。詳細については、<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename>
      </term>
      <listitem>
       <para>
        Apacheが自動的に不明なファイルのMIMEタイプを判別できるようにするmime_magicモジュール用のデータ。このファイルは、変更しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename>
      </term>
      <listitem>
       <para>
        システムで認識されるMIMEタイプ(実際には<filename>/etc/mime.types</filename>へのリンク)。このファイルは、編集しないでください。このリスト以外にMIMEタイプを追加する必要がある場合は、<filename>mod_mime-defaults.conf</filename>に追加します。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename>
      </term>
      <listitem>
       <para>
        デフォルトでインストールされるモジュール用の設定ファイル。詳細については、<xref linkend="sec-apache2-modules"/>を参照してください。オプションのモジュール用の設定ファイルは、<filename>conf.d</filename>ディレクトリ内にあります。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename>
      </term>
      <listitem>
       <para>
        各MPMの設定ディレクティブ(<xref linkend="sec-apache2-modules-mpm"/>を参照)、およびApacheのパフォーマンスを制御する一般的な設定オプションが含まれています。このファイルを変更する場合は、Webサーバを適切にテストしてください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> and <filename>ssl.*</filename>
      </term>
      <listitem>
       <para>
        グローバルSSL設定およびSSL証明書データ。詳細については、<xref linkend="sec-apache2-ssl"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        <filename>/etc/sysconfig/apache2</filename>から自動的に生成される設定ファイル。これらのファイルは、いずれも変更しません。その代わりに、<filename>/etc/sysconfig/apache2</filename>を編集します。このディレクトリに、他の設定ファイルを格納しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename>
      </term>
      <listitem>
       <para>
        Apacheを実行する際に使用するユーザおよびグループIDを指定します。このファイルは、変更しないでください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        仮想ホストの設定はこのファイルにあるはずです。このディレクトリには、SSLの有無にかかわらず、仮想ホストのテンプレートファイルが格納されます。このディレクトリ内の <filename>.conf </filename>で終わるファイルは、すべて自動的にApache設定に含まれます。詳細については、<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-configuration-manually">
   <title>Apacheを手動で設定する</title>
   <para>
    Apacheを手動設定するには、<systemitem class="username">root</systemitem>ユーザとしてプレーンテキストの設定ファイルを編集する必要があります。
   </para>
   <sect3 xml:id="sec-apache2-configuration-manually-vhost">
    <title>仮想ホスト設定</title>
    <para>
     <emphasis>仮想ホスト</emphasis>という用語は、同じ物理マシンから複数のURI (universal resource identifiers)のサービスを行えるApacheの機能を指しています。これは、www.example.comとwww.example.netのような複数のドメインを、1台の物理マシン上の単一のWebサーバで保持できることを意味しています。
    </para>
    <para>
     管理の手間(1つのWebサーバを維持すればよい)とハードウェアの費用(ドメインごとの専用のサーバを必要としない)を省くために仮想ホストを使うことは、よく行われています。仮想ホストは名前ベース、IPベース、またはポートベースのいずれかになります。
    </para>
    <para>
     すべての既存仮想ホストをリストするには、コマンド<command>apache2ctl</command> <option>-S</option>を使用します。デフォルトサーバおよびすべての仮想ホストが、それらのIPアドレスおよびリスニングポートとともにリストに表示されます。リストには、各仮想ホストの設定ファイル内での位置を示すエントリも含まれています。
    </para>
    <para>
     仮想ホストを設定するには、YaSTを使用するか(<xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>で説明)、または設定ファイルを手動で編集します。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheは、デフォルトでは、<filename>/etc/apache2/vhosts.d/</filename>の仮想ホストごとに1つの設定ファイルを使用するようになっています。このディレクトリ内で、拡張子が<filename>.conf</filename>のファイルは、すべて自動的に設定に含まれます。仮想ホストの基本的なテンプレートはこのディレクトリ内に用意されています(<filename>vhost.template</filename>、またはSSLサポートのある仮想ホストの場合は<filename>vhost-ssl.template</filename>)。
    </para>
    <tip>
     <title>常に仮想ホスト設定を作成する</title>
     <para>
      Webサーバに1つのドメインしか存在しない場合でも、常に仮想ホストの設定ファイルを作成することをお勧めします。そうすることによって、ドメイン固有の設定が1つのファイルにまとまるだけでなく、仮想ホストの設定ファイルを移動、削除、または名前変更することによって使用可能な基本設定に常時フォールバックできます。同じ理由で、仮想ホストごとに個別の設定ファイルも作成します。
     </para>
     <para>
      名前ベースの仮想ホストを使用する際、ドメイン名が仮想ホスト設定と一致しない場合に使用されるデフォルト設定を設定することを推奨します。デフォルト仮想ホストは、その設定が最初にロードされるホストです。設定ファイルの順序は、ファイル名で決定されるので、デフォルト仮想ホスト設定のファイル名は、下線文字(<literal>_</literal>)で始めて(たとえば、<filename>_default_vhost.conf</filename>)、そのファイルが最初にロードされるようにします。
     </para>
    </tip>
    <para>
     <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem>ブロックには、特定のドメインに適用される情報を記述します。Apacheは、クライアントから定義済みの仮想ホストへの要求を受け取ると、このセクションに記述されているディレクティブを使用します。仮想ホストでは、ほぼすべてのディレクティブを使用できます。Apacheの設定ディレクティブの詳細については、<link xlink:href="http://httpd.apache.org/docs/2.4/mod/quickreference.html"/>を参照してください。
    </para>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>名前ベースの仮想ホスト</title>
     <para>
      名前ベースの仮想ホストでは、1つのIPアドレスで複数のWebサイトを運用することができます。Apacheは、クライアントから送られたHTTPヘッダのホストフィールドを使用して、仮想ホスト宣言の1つの、一致する<systemitem>ServerName</systemitem>エントリに要求を接続します。一致する<systemitem>ServerName</systemitem>が見つからない場合には、指定されている最初の仮想ホストがデフォルトとして用いられます。
     </para>
     <para>
      最初のステップは、サービスを提供する、名前ベースの異なるホストそれぞれに対して<literal>&lt;VirtualHost&gt;</literal>ブロックを作成することです。各<literal>&lt;VirtualHost&gt;</literal>ブロック内には、少なくとも、サービスの提供対象ホストを指定する<literal>ServerName</literal>ディレクティブと、ファイルシステム内でそのホストのコンテンツが存在する場所を示す<literal>DocumentRoot</literal>ディレクティブが必要です。
     </para>
     <example xml:id="ex-apache2-virtual-hosts-name-based">
      <title>名前ベースの<systemitem>VirtualHost</systemitem>エントリの基本例</title>
<screen>&lt;VirtualHost *:80&gt;
# This first-listed virtual host is also the default for *:80
ServerName www.example.com
ServerAlias example.com
DocumentRoot /srv/www/htdocs/domain
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
ServerName other.example.com
DocumentRoot /srv/www/htdocs/otherdomain
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      <systemitem>VirtualHost</systemitem>開始タグには、名前ベースの仮想ホスト設定の引数としてIPアドレス(または完全修飾ドメイン名)が採用されます。ポート番号ディレクティブはオプションです。
     </para>
     <para>
      ワイルドカード<emphasis>*</emphasis>をIPアドレスの代わりに使用することもできます。IPv6アドレスを使用する場合には、アドレスを角括弧の中に記述することが必要です。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-name-based">
      <title>名前ベースの<systemitem>VirtualHost</systemitem>ディレクティブ</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>IPベースの仮想ホスト</title>
     <para>
      この代替仮想ホスト設定では、1つのコンピュータに対して複数のIPアドレスを設定する必要があります。Apacheの1つのインスタンスが、複数のドメインにホストとしてサービスを提供し、各ドメインに別のIPアドレスが割り当てられることになります。
     </para>
     <para>
      物理サーバは、IPベースの仮想ホストごとに、1つのIPアドレスを持つ必要があります。マシンに複数のネットワークカードがない場合には、仮想ネットワークインタフェース(IPエイリアス)を使用することもできます。
     </para>
     <para>
      次の例では、IP <systemitem class="ipaddress">192.168.3.100</systemitem>のマシンでApacheが実行されており、付加的なIPアドレス<systemitem class="ipaddress">192.168.3.101</systemitem>および<systemitem class="ipaddress">192.168.3.102</systemitem>で2つのドメインをホストしています。すべての仮想サーバについて、<systemitem>VirtualHost</systemitem>ブロックが個別に必要です。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-ip-based">
      <title>IPベースの<systemitem>VirtualHost</systemitem>ディレクティブ</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      ここでは、<systemitem>VirtualHost</systemitem>ディレクティブは、<systemitem>192.168.3.100</systemitem>以外のインタフェースに対してのみ指定されています。<systemitem>Listen</systemitem>ディレクティブが<systemitem>192.168.3.100</systemitem>に対しても設定される場合、このインタフェースへのHTTP要求に応答するために別のIPベースの仮想ホストを作成する必要があります。作成しない場合、デフォルトのサーバ設定(<filename>/etc/apache2/default-server.conf</filename>)内のディレクティブが適用されます。
     </para>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>基本的な仮想ホスト設定</title>
     <para>
      仮想ホストをセットアップするには、少なくとも次のディレクティブが各仮想ホスト設定に含まれている必要があります。オプションについては、<filename>/etc/apache2/vhosts.d/vhost.template</filename>を参照してください。
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem>
       </term>
       <listitem>
        <para>
         ホストに割り当てられている完全修飾ドメイン名。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem>
       </term>
       <listitem>
        <para>
         Apacheがこのホストにファイルをサービスする際に使用されるディレクトリパス。セキュリティ上の理由から、ファイルシステム全体へのアクセスはデフォルトで禁じられているため、<systemitem>Directory</systemitem>コンテナ内でこのディレクトリを明示的にロック解除する必要があります。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem>
       </term>
       <listitem>
        <para>
         サーバ管理者の電子メールアドレス。このアドレスは、Apacheが作成するエラーページなどに表示されます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem>
       </term>
       <listitem>
        <para>
         この仮想ホストに関するエラーログファイル。仮想ホストごとに個別のエラーログファイルを作成する必要はありませんが、エラーのデバッグが簡単にできるため、作成されるのが一般的です。<filename>/var/log/apache2/</filename>はApacheのログファイルのデフォルトディレクトリです。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem>
       </term>
       <listitem>
        <para>
         この仮想ホストに関するアクセスログファイル。仮想ホストごとに個別のアクセスログファイルを作成する必要はありませんが、ホストごとのアクセス統計を個別に分析できるため、作成されるのが一般的です。<filename>/var/log/apache2/</filename>はApacheのログファイルのデフォルトディレクトリです。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      セキュリティ上の理由から、ファイルシステム全体へのアクセスはデフォルトで禁じられています。したがって、<systemitem>DocumentRoot</systemitem>など、Apacheによりサービスされるファイルを保管したディレクトリを明示的にロック解除する必要があります。
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
&lt;/Directory&gt;</screen>
     <note>
      <title><literal>Require all granted</literal></title>
      <para>
       Apacheの以前のバージョンでは、<literal>Require all granted</literal>文を次のように表記していました。
      </para>
<screen>Order allow,deny
Allow from all</screen>
      <para>
       この古い構文は、現在も<literal>mod_access_compat</literal>モジュールでサポートされています。
      </para>
     </note>
     <para>
      完全な設定ファイルは次のようになります。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-basic-configuration">
      <title>基本的な<systemitem>VirtualHost</systemitem>設定</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
   </sect3>
  </sect2>



  <xi:include href="apache2_yast_i.xml"/>


 </sect1>
 <sect1 xml:id="sec-apache2-start-stop">
  <title>Apacheの起動および停止</title>

  <remark>taroth 2014-02-11: @file-maintainer: please give the following a
 thorough check - so far I only replaced the rc* commands by the systemctl
 (and where those are not available, by apachectl commands as advised by
 crrodriguez), but the descriptions might need adjustment and some commands
 are probably no longer around, therefore I commented them</remark>

  <para>
   <xref linkend="sec-apache2-configuration-yast"/>の説明のようにYaSTを設定すると、Apacheは、ブート時に<systemitem>multi-user.target</systemitem>および<systemitem>graphical.target</systemitem>で起動されます。YaSTの<guimenu>サービスマネージャ</guimenu>、あるいは<command>systemctl</command>コマンドラインツール(<command>systemctl enable</command>または<command>systemctl disable</command>)を使用して、この動作を変更できます。
  </para>

  <para>
   稼働中のシステムでApacheを起動、停止、または操作するには、次の説明に従って<command>systemctl</command>または<command>apachectl</command>コマンドを使用します。
  </para>

  <para>
   <command>systemctl</command>コマンドの一般的な情報については、<xref linkend="sec-boot-systemd-basics-services"/>を参照してください。
  </para>

  <variablelist>
   <varlistentry>
    <term><command>systemctl status apache2</command>
    </term>
    <listitem>
     <para>
      Apacheが起動したかどうかをチェックします。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl start apache2</command>
    </term>
    <listitem>
     <para>
      Apacheが実行中でない場合に起動します。
     </para>
    </listitem>
   </varlistentry>


   <varlistentry>
    <term><command>systemctl stop apache2</command>
    </term>
    <listitem>
     <para>
      親プロセスを終了して、Apacheを終了します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><command>systemctl restart apache2</command>
    </term>
    <listitem>
     <para>
      Apacheをいったん停止し、再起動します。Apacheが実行中でなかった場合は、新規に起動します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl try-restart apache2</command>
    </term>
    <listitem>
     <para>
      Apacheがすでに実行中の場合にのみ、停止して再起動します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl reload apache2</command>
    </term>
    <listitem>
     <para>
      フォークしたすべてのApacheプロセスに、シャットダウンする前に要求を完了させて、それからWebサーバを停止します。1つのプロセスが終了するたびに、新たに開始したプロセスで置き換えられるので、最終的にはApacheの完全な<quote>再起動</quote>になります。
     </para>
     <tip>
      <title>運用環境でApacheを再起動する</title>
      <para>
       このコマンドを使用すると、接続を切らずにApache設定の変更を有効化することができます。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><command>systemctl stop apache2</command></term>
    <listitem>
     <para>
      既存の要求を完了できるように、<systemitem>GracefulShutdownTimeout</systemitem>で設定された一定の時間の経過後にWebサーバを停止します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl configtest</command>
    </term>
    <listitem>
     <para>
      実行中のWebサーバに影響することなく、設定ファイルの構文をチェックします。このチェックは、サーバが起動、再ロードまたは再起動するたびに行われるため、通常は明示的にテストを実行する必要はありません(設定エラーが検出された場合、Webサーバは起動、再ロードまたは再起動されません)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl status</command>および<command>apachectl fullstatus</command>
    </term>
    <listitem>
     <para>
      それぞれ、簡単または完全ステータス画面を表示します。モジュール<systemitem>mod_status</systemitem>を有効にし、テキストベースのブラウザ(<command>links</command>または<command>w3m</command>など)をインストールする必要があります。これに加え、<literal>status</literal>を<filename>/etc/sysconfig/apache2</filename>ファイルの<systemitem>APACHE_SERVER_FLAGS</systemitem>に追加する必要があります。
     </para>
    </listitem>
   </varlistentry>





  </variablelist>

  <tip>
   <title>その他のフラグ</title>
   <para>
    コマンドにその他のフラグを指定すると、これらのフラグはWebサーバを通過します。
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-apache2-modules">
  <title>モジュールのインストール、有効化、および設定</title>

  <para>
   Apacheソフトウェアは、モジュール形式で構築されており、一部の主要タスクを除いてはモジュールごとに処理されます。この方法で、HTTPさえもモジュールによって処理されています(<systemitem>http_core</systemitem>)。
  </para>

  <para>
   Apacheのモジュールは、ビルド時にApacheのバイナリに組み込むことも、実行時に動的にロードすることもできます。動的なモジュールのロード方法の詳細については、<xref linkend="sec-apache2-modules-activating"/>を参照してください。
  </para>

  <para>
   Apacheモジュールは、次の4つのカテゴリに分類されます。
  </para>

  <variablelist>
   <varlistentry>
    <term>基本モジュール</term>
    <listitem>
     <para>
      基本モジュールは、デフォルトでApacheにコンパイルされています。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheでは、<systemitem>mod_so</systemitem> (他のモジュールのロードに必要)および<systemitem>http_core</systemitem>のみがコンパイルされています。他のモジュールは、サーバのバイナリに入れる代わりに、ランタイム時に入れるように共有オブジェクトとして利用できます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>拡張モジュール</term>
    <listitem>
     <para>
      一般に、拡張とされているモジュールは、Apache ソフトウェアパッケージに含まれてはいますが、通常、サーバに静的にはコンパイルされていません。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、これらはApacheにランタイムでロードすることができる共有オブジェクトとして利用可能になっています。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>外部モジュール</term>
    <listitem>
     <para>
      外部とラベルされているモジュールは、公式のApacheのディストリビューションには含まれていません。ただし、<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>はそれらのいくつかを提供しています。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>MPM(マルチプロセシングモジュール)</term>
    <listitem>
     <para>
      MPMは、Webサーバへのリクエストを受け取って処理する役割を果たすもので、Webサーバ\'83\'5cフトウェアの中核となっています。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-apache2-modules-installing">
   <title>モジュールのインストール</title>
   <para>
    <xref linkend="sec-apache2-quickstart-installation"/>で説明されているデフォルトインストールを行った場合は、すべての基本モジュールと拡張モジュール、Prefork MPM(マルチプロセシングモジュール)、および外部モジュールの<systemitem>mod_python</systemitem>がすでにインストールされています。
   </para>
   <para>
    YaSTを起動し、<menuchoice><guimenu>ソフトウェア</guimenu> <guimenu>ソフトウェア管理</guimenu></menuchoice>の順に選択して、その他の外部モジュールをインストールできます。<menuchoice><guimenu>表示</guimenu> <guimenu>検索</guimenu></menuchoice>の順に選択し、<literal>［apache］</literal>を検索します。他のパッケージの中で、使用可能な外部Apacheモジュールがすべて検索結果のリストに表示されます。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-activating">
   <title>有効化と無効化</title>
   <para>
    特定モジュールの有効化/無効化は、手動で行うか、YaSTを使用します。YaSTでは、<xref linkend="sec-apache2-configuration-yast-wizard"/>で説明されているモジュール設定を使用して、スクリプト言語モジュール(PHP 5およびPython)を有効または無効にする必要があります。その他のすべてのモジュールは、<xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/>で説明しているように有効化または無効化できます。
   </para>
   <para>
    モジュールを手動で有効化/無効化する場合は、それぞれ<command>a2enmod</command> <replaceable>MODULE</replaceable>または<command>a2dismod</command> <replaceable>MODULE</replaceable>コマンドを使用します。<command>a2enmod -l</command>は、現在アクティブなすべてのモジュールのリストを出力します。
   </para>
   <important>
    <title>外部モジュール用の設定ファイルを含める</title>
    <para>
     手動で外部モジュールを有効化した場合は、各設定ファイルがすべての仮想ホスト設定にロードされていることを確認します。外部モジュール用の設定ファイルは、<filename>/etc/apache2/conf.d/</filename>内に存在し、デフォルトで<filename>/etc/apache2/default-server.conf</filename>にロードされます。より詳細に制御するには、外部モジュール用の設定ファイルがインクルードされないよう<filename>/etc/apache2/default-server.conf</filename>でコメントアウトして、特定の仮想ホストに対してのみファイルを追加することができます。その例として、<filename>/etc/apache2/vhosts.d/vhost.template</filename>を参照してください。
    </para>
   </important>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-base-extension">
   <title>基本および拡張モジュール</title>
   <para>
    すべての基本および拡張モジュールは、Apacheのマニュアルに詳しく説明されています。ここでは、主要なモジュールについて簡単に説明します。各モジュールの詳細については、<link xlink:href="http://httpd.apache.org/docs/2.4/mod/">http://httpd.apache.org/docs/2.4/mod/</link>を参照してください。
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem>
     </term>
     <listitem>
      <para>
       特定のMIMEタイプ(<systemitem>application/pdf</systemitem>など)、特定の拡張子を持つファイル(<filename>.rpm</filename>など)、または特定の要求方法(<systemitem>GET</systemitem>など)が要求された場合に、常にスクリプトを実行する方法を提供します。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>Alias</systemitem>および<systemitem>Redirect</systemitem>ディレクティブを提供します。これにより、特定のディレクトリにURLをマップ(<systemitem>Alias</systemitem>)、または要求されたURLを別の場所にリダイレクトできます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem>
     </term>
     <listitem>
      <para>
       認証モジュールは、<systemitem>mod_auth_basic</systemitem>による基本認証や<systemitem>mod_auth_digest</systemitem>によるダイジェスト認証など、さまざまな認証方法を提供します。
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem>および<systemitem>mod_auth_digest</systemitem>は、認証プロバイダモジュールの<systemitem>mod_authn_*</systemitem> (たとえば、テキストファイルベースの認証用の<systemitem>mod_authn_file</systemitem>)および認証モジュールの<systemitem>mod_authz_*</systemitem> (たとえば、ユーザ認証用の<systemitem>mod_authz_user</systemitem>)と組み合わせる必要があります。
      </para>
      <para>
       この項目の詳細は、<link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>の「<citetitle>Authentication HOWTO</citetitle>」で説明されています。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
        <term><systemitem>mod_auth_openidc</systemitem></term>
        <listitem>
            <para>
                <systemitem>mod_auth_openidc</systemitem>は、Apache HTTPサーバでOpenID Connectを使用するための唯一の認定された方法です。(<link xlink:href="https://openid.net/developers/certified/"/>を参照してください)。
            </para>
        </listitem>
       </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem>
     </term>
     <listitem>
      <para>
       Autoindexは、インデックスファイル(<filename>index.html</filename>など)が存在しない場合にディレクトリリストを生成します。これらのインデックスのルックアンドフィールは設定可能です。このモジュールは、デフォルトで有効です。ただし、ディレクトリリストは、デフォルトで<systemitem>Options</systemitem>ディレクティブを経由して無効化されています。仮想ホスト設定でこの設定を上書きします。このモジュール用のデフォルト設定は、<filename>/etc/apache2/mod_autoindex-defaults.conf</filename>に存在します。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_cgi</systemitem>は、CGIスクリプトを実行するのに必要です。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem>
     </term>
     <listitem>
      <para>
       このモジュールを使用して、配信前にファイルタイプを圧縮するようにApacheを設定できます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem/>mod_dirは、<systemitem>DirectoryIndex</systemitem>ディレクティブを提供します。これを使用して、ディレクトリが要求されたときに(デフォルトでは<filename>index.html</filename>)自動的に配信されるファイルを設定できます。ディレクトリ要求に末尾のスラッシュが含まれていない場合は、正しいURLへの自動リダイレクトも提供します。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem>
     </term>
     <listitem>
      <para>
       CGIスクリプトやSSIページに渡す環境を制御します。環境変数を設定、設定解除したり、<systemitem class="daemon">httpd</systemitem>プロセスを起動したシェルから渡すことができます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_expires</systemitem>を使用すると、<systemitem>Expires</systemitem>ヘッダの送信によって、プロキシとブラウザのキャッシュがドキュメントを更新する頻度を制御できます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_http2</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_http2</systemitem>では、ApacheでのHTTP/2プロトコルの使用がサポートされています。<systemitem>VirtualHost</systemitem>で<literal>Protocols h2 http/1.1</literal>を指定することにより、有効化できます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_include</systemitem>は、動的にHTMLページを生成するための基本機能を提供するSSI (Server-Side Includes)を使用できるようにします。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem>
     </term>
     <listitem>
      <para>
       http://localhost/server-info/にサーバ設定の包括的な概要を表示します。セキュリティ上の理由から、このURLへのアクセスは常に制限されます。デフォルトでは、<systemitem class="domainname">localhost</systemitem>のみがこのURLへのアクセスを許可されています。<systemitem>mod_info</systemitem>は、<filename>/etc/apache2/mod_info.conf</filename>で設定されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem>
     </term>
     <listitem>
      <para>
       このモジュールを使用して、Apacheログファイルの書式を設定できます。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem>
     </term>
     <listitem>
      <para>
       mimeモジュールは、ファイル名の拡張子(HTMLドキュメント用の<systemitem>text/html</systemitem>など)に基づいた、適切なMIMEヘッダを使用してファイルが配信されるようにします。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem>
     </term>
     <listitem>
      <para>
       コンテンツネゴシエーションに必要です。詳細については、<link xlink:href="http://httpd.apache.org/docs/2.4/content-negotiation.html">http://httpd.apache.org/docs/2.4/content-negotiation.html</link>を参照してください。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_alias</systemitem>の機能を提供しますが、それ以外の機能と柔軟性も提供します。<systemitem>mod_rewrite</systemitem>を使用すると、複数の規則、要求ヘッダなどに基づいてURLをリダイレクトできます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem>
     </term>
     <listitem>
      <para>
       クライアントから送信されたブラウザ文字列やIPアドレスなどの、クライアントからのリクエスト詳細に基づいて環境変数を設定します。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_spelling</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_spelling</systemitem>は、大文字小文字の違いなど、URLの表記エラーの訂正を自動的に試みます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem>
     </term>
     <listitem>
      <para>
       Webサーバとクライアント間の暗号化接続を有効化します。詳細については<xref linkend="sec-apache2-ssl"/>を参照してください。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem>
     </term>
     <listitem>
      <para>
       サーバの動作およびパフォーマンスに関する情報をhttp://localhost/server-status/に表示します。セキュリティ上の理由から、このURLへのアクセスは常に制限する必要があります。デフォルトでは、<systemitem class="domainname">localhost</systemitem>のみがこのURLへのアクセスを許可されています。<systemitem>mod_info</systemitem>は、<filename>/etc/apache2/mod_status.conf</filename>で設定されます。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem>は、CGIスクリプトを別のユーザとグループで実行できるようにします。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem>
     </term>
     <listitem>
      <para>
       <filename>~<replaceable>USER</replaceable>/</filename>の下に、ユーザ固有のディレクトリを用意します。<systemitem>UserDir</systemitem>ディレクティブを設定で指定する必要があります。このモジュールは、デフォルトで有効です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-mpm">
   <title>マルチプロセシングモジュール</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>には、Apacheで使用するための2つの異なるマルチプロセッシングモジュール(MPM)が用意されています。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-modules-mpm-prefork">
    <title>プリフォークMPM</title>
    <para>
     プリフォークMPMは、スレッド対応でない、プリフォークWebサーバを実装します。プリフォークMPMは、各要求を分離し、個々の子プロセスの分岐で処理するApacheバージョン 1.xと同じように、このWebサーバを動作させます。これにより、問題のあるリクエストが他のものに影響することがなくなるので、Webサーバのロックアップを避けられます。
    </para>
    <para>
     プロセスベースのアプローチによって安定性がもたらされますが、プリフォークMPMは、もう一方のワーカーMPMよりも多くのシステムリソースを消費します。プリフォークMPMは、UnixベースのオペレーティングシステムでのデフォルトのMPMと見なされています。
    </para>
    <important>
     <title>このドキュメントでのMPM</title>
     <para>
      このドキュメントでは、ApacheがプリフォークMPMで使用されていることを仮定しています。
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-modules-mpm-worker">
    <title>ワーカーMPM</title>
    <para>
     ワーカーMPMは、マルチスレッド対応のWebサーバを提供します。スレッドとは、<quote>軽い</quote>形態のプロセスです。プロセスよりもスレッドが優れている点は、リソースの消費が少ないことです。ワーカーMPMは、子プロセスを分岐する代わりに、サーバプロセスでスレッドを使用することによってリクエストを処理します。プリフォークした子プロセスはマルチスレッドになります。このアプローチでは、プリフォークMPMの場合よりもシステムリソースの消費が少なくなるので、Apacheの性能が良くなります。
    </para>
    <para>
     主な欠点としては、ワーカーMPMの安定性の問題が挙げられます。スレッドが壊れた場合、プロセスのすべてのスレッドに影響してしまいます。最悪の場合には、サーバがクラッシュすることがあります。特に、ApacheでCGI (Common Gateway Interface)を使用している場合、負荷が大きくなると、スレッドがシステムリソースと通信できなくなり、内部サーバエラーが生じることがあります。ワーカーMPMを使用すべきでない理由として、Apacheのモジュールのすべてがスレッドセーフになっているわけではないために、ワーカーMPMとともに使用するわけにはいかないということもあります。
    </para>
    <warning>
     <title>MPMと組み合わせてPHPモジュールを使用する</title>
     <para>
      利用可能なPHPモジュールのすべてがスレッドセーフになっているわけではありません。ワーカーMPMと<systemitem>mod_php</systemitem>は併用しないでください。
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-external">
   <title>外部モジュール</title>
   <para>
    ここでは、<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>に付属しているすべての外部モジュールを記載しています。モジュールのドキュメントは、記載のディレクトリ内に存在します。
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_php5</systemitem>などのモジュールが処理する個々のCGIスクリプトに対して、<phrase>AppArmor</phrase>制限を提供するために、Apacheにサポートを追加します。
      </para>
      <simplelist>
       <member>
        パッケージ名: <systemitem>apache2-mod_apparmor</systemitem>
       </member>
       <member>
        詳細情報: <xref linkend="part-apparmor"/>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       PHPは、サーバ側クロスプラットフォームのHTML埋め込みスクリプト言語です。
      </para>
      <simplelist>
       <member>
        パッケージ名: <systemitem>apache2-mod_php5</systemitem>
       </member>
       <member>
        環境設定ファイル: <filename>/etc/apache2/conf.d/php5.conf</filename>
       </member>
       <member>
        詳細情報: <filename>/usr/share/doc/packages/apache2-mod_php5</filename>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem>は、Apache HTTPサーバへのPythonの埋め込みができるようにし、Webベースのアプリケーションの設計で、さらに柔軟性を持たせ、パフォーマンスを向上させます。
      </para>
      <simplelist>
       <member>
        パッケージ名: <systemitem>apache2-mod_python</systemitem>
       </member>
       <member>
        詳細情報: <filename>/usr/share/doc/packages/apache2-mod_python</filename>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem>により、さまざまな範囲の攻撃からWebアプリケーションを保護するためのファイアウォールがWebアプリケーションに提供されます。さらに、HTTPトラフィックモニタリングおよびリアルタイム分析も可能です。
      </para>
      <simplelist>
       <member>
        パッケージ名: <systemitem>apache2-mod_security2</systemitem>
       </member>
       <member>
        環境設定ファイル: <filename>/etc/apache2/conf.d/mod_security2.conf</filename>
       </member>
       <member>
        詳細情報: <filename>/usr/share/doc/packages/apache2-mod_security2</filename>
       </member>
       <member>
        マニュアル: <link xlink:href="http://modsecurity.org/documentation/"/>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-building-modules">
   <title>コンパイル</title>
   <para>
    上級ユーザは、カスタムのモジュールを記述してApacheを拡張することができます。Apache用のモジュールを開発したり、サードパーティのモジュールをコンパイルしたりするには、対応する開発ツールとともに<systemitem>apache2-devel</systemitem>パッケージが必要です。<systemitem>apache2-devel</systemitem>には、Apache用の追加モジュールをコンパイルするために必要な<command>apxs2</command>ツールも含まれています。
   </para>
   <para>
    <command>apxs2</command>は、ソースコードからモジュールをコンパイルし、インストールすることを可能にします(設定ファイルへの必要な変更も含みます)。これは、実行時にApacheにロードされる、<emphasis>ダイナミック共有オブジェクト</emphasis> (DSO)を作成します。
   </para>
   <para>
    <command>apxs2</command>バイナリは、<filename>/usr/sbin</filename>の下層にあります
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename>—MPMと共に動作する拡張モジュールを構築するのに適しています。インストール場所は<filename>/usr/lib64/apache2</filename>です。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename>—プリフォークMPMモジュールに適しています。インストール場所は<filename>/usr/lib64/apache2-prefork</filename>です。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename>—ワーカーMPMモジュールに適しています。インストール場所は<filename>/usr/lib64/apache2-worker</filename>です。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    次のコマンドで、ソースコードからモジュールをインストールして、アクティブにします。
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> cd /path/to/module/source
<prompt>tux &gt; </prompt><command>sudo</command> apxs2 -cia <replaceable>MODULE</replaceable>.c</screen>
   <para>
    ここで、<option>-c</option>はモジュールをコンパイルし、<option>-i</option>はモジュールをインストールし、<option>-a</option>はモジュールをアクティブにします。<command>apxs2</command>のその他のオプションについては、<systemitem>apxs2(1)</systemitem> manページを参照してください。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-cgi">
  <title>CGIスクリプトの有効化</title>

  <para>
   ApacheのCGI(コモンゲートウェイインタフェース)により、通常CGIスクリプトと呼ばれるプログラムまたはスクリプトを含んだ動的コンテンツを作成できます。CGIスクリプトは、どのプログラム言語でも作成できます。通常、PHPなどのスクリプト言語が使用されます。
  </para>

  <para>
   ApacheがCGIスクリプトで作成されたコンテンツを配信できるようにするには、<systemitem>mod_cgi</systemitem>を有効にする必要があります。<systemitem>mod_alias</systemitem>も必要です。デフォルトでは、両モジュールとも有効化されています。モジュールの有効化の詳細については、<xref linkend="sec-apache2-modules-activating"/>を参照してください。
  </para>

  <warning>
   <title>CGIセキュリティ</title>
   <para>
    サーバがCGIスクリプトを実行できるようになると、潜在的なセキュリティホールが発生します。詳細については、<xref linkend="sec-apache2-security"/>を参照してください。
   </para>
  </warning>

  <sect2 xml:id="sec-apache2-cgi-configuration">
   <title>Apacheの設定</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、CGIスクリプトの実行は、<filename>/srv/www/cgi-bin/</filename>ディレクトリ内でのみ許可されています。この場所は、すでにCGIスクリプトを実行するように設定されています。仮想ホスト設定を作成しておらず(<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照してください)、ホスト固有のディレクトリにスクリプトを配置する場合は、このディレクトリのロックを解除し、設定する必要があります。
   </para>
   <example xml:id="ex-apache2-cgi-configuration">
    <title>VirtualHost CGIの設定</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co xml:id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co xml:id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co xml:id="co-apache2-cgi-handler"/>
 Require all granted<co xml:id="co-apache2-cgi-order"/>
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       このディレクトリ内のすべてのファイルをCGIスクリプトとして処理するようにApacheに指示します。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       CGIスクリプトの実行を有効化します。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       .plおよび.cgiの拡張子が付いたファイルをCGIスクリプトとして処理するようにサーバに指示します。必要に応じて調整します。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       <systemitem>Require</systemitem>ディレクティブは、デフォルトのアクセス状態を制御します。この場合、指定したディレクトリへのアクセスが無制限に許可されます。認証および権限の詳細については、<link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>を参照してください。
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-example-script">
   <title>テストスクリプトの実行</title>
   <para>
    CGIプログラミングは通常のプログラミングとは異なり、CGIプログラムとスクリプトの前に<literal>Content-type: text/html</literal>などのMIMEタイプヘッダを記述する必要があります。このヘッダはクライアントに送信されるので、クライアントは、受信したコンテンツによってコンテンツの種類を識別します。次に、このスクリプトの出力は、クライアント(通常はWebブラウザ)が認識できる形式(通常はHTML。あるいは、プレーンテキストまたは画像など)でなければなりません。
   </para>
   <para>
    Apacheパッケージの一部として、<filename>/usr/share/doc/packages/apache2/test-cgi</filename>内に簡単なテストスクリプトが含まれています。このスクリプトは、いくつかの環境変数の内容をプレーンテキストとして出力します。このスクリプトを<filename>/srv/www/cgi-bin/</filename>か、仮想ホストのスクリプトディレクトリ<filename>/srv/www/www.example.com/cgi-bin/</filename>のいずれかにコピーし、「<filename>test.cgi</filename>」という名前を付けます。ファイルを編集して、<literal>#! /bin/sh</literal>を最初の行に置きます。
   </para>
   <para>
    Webサーバがアクセスできるファイルは、<systemitem class="username">root</systemitem>ユーザが所有している必要があります。詳細については、<xref linkend="sec-apache2-security"/>を参照してください。Webサーバは別のユーザ名で実行しているので、CGIスクリプトはworld-executableおよびworld-readableである必要があります。CGIディレクトリに移動し、<command>chmod 755 test.cgi</command>コマンドを使用して適切なパーミッションを適用します。
   </para>
   <para>
    次に、<literal>http://localhost/cgi-bin/test.cgi</literal>または<literal>http://www.example.com/cgi-bin/test.cgi</literal>を呼び出します。<quote>CGI/1.0 test script report</quote>を参照してください。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-troubleshooting">
   <title>CGIトラブルシューティング</title>
   <para>
    テストプログラムの出力の代わりにエラーメッセージが\'95\'5c示される場合は、次を確認します。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGIトラブルシューティング</title>
    <listitem>
     <para>
      <emphasis>設定を変更した後、サーバを再ロードしましたか? </emphasis>していない場合は、<command>systemctl reload apache2</command>を使用して再ロードしてください。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>カスタムCGIディレクトリを設定した場合、適切に設定されていますか? </emphasis>不明な場合は、デフォルトのCGIディレクトリの<filename>/srv/www/cgi-bin/</filename>内にあるスクリプトを実行し、<literal>http://localhost/cgi-bin/test.cgi</literal>を呼び出します。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>ファイルのパーミッションは正しいですか? </emphasis>CGIディレクトリに移動して、<command>ls -l test.cgi</command>を実行します。その出力が次で始まっているかどうかを確認します。
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      そのスクリプトにプログラミングエラーがないかどうか確認します。<filename>test.cgi</filename>を変更しなかった場合は該当しませんが、独自のプログラムを使用する場合は、必ず、プログラミングエラーがないかどうか確認してください。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-ssl">
  <title>SSLをサポートするセキュアWebサーバのセットアップ</title>

  <para>
   クレジットカード情報などの機密データをWebサーバやクライアント間で送信する場合は必ず、認証を使用して、安全で、暗号化された接続の確立を推奨します。<systemitem>mod_ssl</systemitem>は、クライアントとWebサーバ間のHTTP通信にセキュアソケットレイヤ(SSL)プロトコルとトランスポートレイヤセキュリティ(TLS)プロトコルを使用して、強力な暗号化を行います。TLS/SSLを使用することにより、Webサーバとクライアント間でプライベートな接続が確立されます。データの整合性が保証され、クライアントとサーバとの間の相互認証が可能になります。
  </para>

  <para>
   この目的で、サーバは、URLに対するリクエストに応答する前に、サーバの有効な識別情報を含むSSL証明書を送ります。これにより、サーバが唯一の正当な通信相手であることが保証されます。加えて、この証明書は、クライアントとサーバの間の暗号化された通信が、重要な内容がプレーンテキストとして見られる危険なしに、情報を転送できることを保証します。
  </para>

  <para>
   <systemitem>mod_ssl</systemitem>は、TLS/SSLプロトコル自体は実装しませんが、ApacheとSSLライブラリとの間のインタフェースとして機能します。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、OpenSSLライブラリが使用されます。OpenSSLは、Apacheとともに自動的にインストールされます。
  </para>

  <para>
   Apacheで<systemitem>mod_ssl</systemitem>を使用した場合の最も明白な効果は、URLのプレフィクスが<literal>http://</literal>ではなく<literal>https://</literal>となることです。
  </para>

  <sect2 xml:id="sec-apache2-ssl-certificate">
   <title>SSL証明書の作成</title>
   <para>
    TLS/SSLをWebサーバで使用するには、SSL証明書を作成する必要があります。この証明書は、両者が互いに相手を識別できるように、Webサーバとクライアント間の認証に必要です。証明書の整合性を確認するには、すべてのユーザが信用する者によって署名される必要があります。
   </para>
   <para>
    3種類の証明書を作成することができます。テストの目的のみの<quote>ダミー証明書</quote>、あらかじめ定義されている信用する一部のユーザグループ用の自己署名付き証明書、および公的な独立団体のCA (Certificate Authority)によって署名される証明書です。
   </para>
   <para>
    証明書の作成は、2つのステップで行うことができます。はじめに、CAの秘密鍵が生成され、次に、この鍵を使用してサーバ証明書が署名されます。
   </para>
   <tip>
    <title>詳細情報</title>
    <para>
     TLS/SSLの概念および定義の詳細については、<link xlink:href="http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html</link>を参照してください。
    </para>
   </tip>
   <sect3 xml:id="sec-apache2-ssl-certificate-dummy">
    <title><quote>ダミー</quote>証明書の作成</title>
    <para>
     ダミー証明書を生成するには、スクリプト<command>/usr/bin/gensslcert</command>を呼び出します。次のファイルを作成または上書きします。<command>gensslcert</command>のオプションのスイッチを使用して、証明書を微調整します。詳細は、<command>/usr/bin/gensslcert </command>
     <option>-h</option>を呼び出してください。
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     <filename>ca.crt</filename>のコピーは、ダウンロード用に<filename>/srv/www/htdocs/CA.crt</filename>にも配置されます。
    </para>
    <important>
     <title>テスト専用</title>
     <para>
      ダミー証明書は、実働システム上では使用しないでください。テストの目的のみで使用してください。
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-custom">
    <title>自己署名証明書の作成</title>
    <para>
     イントラネットまたは定義されている一部のユーザグループ用にセキュアWebサーバをセットアップするときは、多くの場合、独自の認証局(CA)を通じて証明書に署名すれば十分です。Webブラウザは自己署名付き証明書を認識できないため、このようなサイトの訪問者には<quote>これは信頼できないサイトです</quote>という警告が表示されます。
    </para>
    <important>
     <title>自己署名証明書</title>
     <para>
      自己署名付き証明書は、CA (Certificate Authority)として認識および信用するユーザによってアクセスされるWebサーバ上でのみ使用します。自己署名付き証明書をパブリックショップなどで使用することはお勧めしません。
     </para>
    </important>
    <para>
     まず、証明書署名要求(CSR)を生成する必要があります。<command>openssl</command>と、証明書の書式として<literal>PEM</literal>を使用します。このステップでは、パスフレーズを入力し、いくつかの質問に回答するよう求められます。入力したパスフレーズは後で必要になるため、覚えておいてください。
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> openssl req -new &gt; new.cert.csr
Generating a 1024 bit RSA private key
..++++++
.........++++++
writing new private key to 'privkey.pem'
Enter PEM pass phrase:<co xml:id="co-ssl-self-pass1"/>
Verifying - Enter PEM pass phrase:<co xml:id="co-ssl-self-pass2"/>
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:<co xml:id="co-ssl-self-country"/>
State or Province Name (full name) [Some-State]:<co xml:id="co-ssl-self-state"/>
Locality Name (eg, city) []:<co xml:id="co-ssl-self-city"/>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:<co xml:id="co-ssl-self-org"/>
Organizational Unit Name (eg, section) []:<co xml:id="co-ssl-self-uname"/>
Common Name (for example server FQDN, or YOUR name) []:<co xml:id="co-ssl-self-cname"/>
Email Address []:<co xml:id="co-ssl-self-email"/>

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:<co xml:id="co-ssl-self-challenge"/>
An optional company name []:<co xml:id="co-ssl-self-optional"/></screen>
    <calloutlist>
     <callout arearefs="co-ssl-self-pass1">
      <para>
       パスフレーズを入力します。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-pass2">
      <para>
       もう一度入力します(パスフレーズを覚えてください)。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-country">
      <para>
       2文字の国コードを入力します(<literal>GB</literal>や<literal>CZ</literal>など)。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-state">
      <para>
       住所のある都道府県の名前を入力します。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-city">
      <para>
       都市名を入力します(<literal>Prague</literal>など)。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-org">
      <para>
       勤務先の組織の名前を入力します。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-uname">
      <para>
       組織部門を入力します。組織部門がない場合は空白のままにします。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-cname">
      <para>
       サーバのドメイン名または自分の氏名を入力します。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-email">
      <para>
       勤務先の電子メールアドレスを入力します。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-challenge">
      <para>
       チャレンジパスワードは空白のままにします。入力した場合は、Apache Webサーバを再起動するたびにチャレンジパスワードを入力する必要があります。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-optional">
      <para>
       オプションの会社名を入力するか、空白のままにします。
      </para>
     </callout>
    </calloutlist>
    <para>
     これで証明書を生成できます。もう一度<command>openssl</command>を使用します。証明書の形式はデフォルトの<literal>PEM</literal>です。
    </para>
    <procedure>
     <title>証明書を生成する</title>
     <step>
      <para>
       鍵の秘密部分を<filename>new.cert.key</filename>にエクスポートします。証明書署名要求(CSR)の作成時に入力したパスフレーズを入力するようプロンプトが表示されます。
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> openssl rsa -in privkey.pem -out new.cert.key</screen>
     </step>
     <step>
      <para>
       署名要求に入力した情報に従って、証明書の公開部分を生成します。<option>-days</option>オプションで、証明書が期限切れになるまでの期間を指定します。証明書を取り消すことも、期限切れになる前に置き換えることもできます。
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> openssl x509 -in new.cert.csr -out new.cert.cert -req \
-signkey new.cert.key -days 365</screen>
     </step>
     <step>
      <para>
       関連するディレクトリに証明書ファイルをコピーし、Apacheサーバが読み込めるようにします。秘密鍵<filename>/etc/apache2/ssl.key/server.key</filename>を全ユーザに対して読み込み可能にせずに、公開PEM証明書を<filename>/etc/apache2/ssl.crt/server.crt</filename>全ユーザに対して読み込み可能にします。
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> cp new.cert.cert /etc/apache2/ssl.crt/server.crt
<prompt>tux &gt; </prompt><command>sudo</command> cp new.cert.key /etc/apache2/ssl.key/server.key</screen>
     </step>
    </procedure>
    <tip>
     <title>パブリック証明書の場所</title>
     <para>
      最後のステップとして、パブリック証明書ファイルを<filename>/etc/apache2/ssl.crt/server.crt</filename>からユーザがアクセスできる場所にコピーして、Webブラウザの、既知の信頼されたCAのリストにそのファイルを組み込めるようにします。コピーしない場合、ブラウザは、この証明書が不明な認証局から発行されたものであると見なします。
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-official">
    <title>公式に署名された証明書の取得</title>
    <para>
     証明書に署名する公式の認証局は、多数存在します。証明書は、信用のあるサードパーティによって署名されるため、完全に信用できます。
通常、公式に運営されているセキュアWebサーバには、公式に署名された証明書があります。最もよく使用されている認証局のリストについては、<link xlink:href="https://en.wikipedia.org/wiki/Certificate_authority#Providers"/>を参照してください。
    </para>
    <para>
     公式に署名された証明書を要求するとき、CAに証明書を送信しません。代わりに、CSR (Certificate Signing Request)を発行します。CSRを作成するには、次のコマンドを入力します。
    </para>
<screen><prompt>tux &gt; </prompt>openssl req -new -newkey rsa:2048 -nodes -keyout newkey.pem -out newreq.pem</screen>
    <para>

     その後、識別名の入力を求められます。このとき、国名または組織名など、いくつかの質問に答える必要があります。ここで入力した内容が証明書に含まれ、確認されるため、有効なデータを入力します。すべての質問に答える必要はありません。該当しない、または空白のままにする場合は、<quote>.</quote>を使用します。一般名は、CA自体の名前です。<replaceable>My company</replaceable> CAなど、意味のある名前を選択します。最後に、チャレンジパスワードおよび代替の企業名を入力する必要があります。
    </para>
    <para>
     スクリプトを呼び出したディレクトリでCSRを検索します。ファイルには、<filename>newreq.pem</filename>という名前が付きます。
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-ssl-configuration">
   <title>SSLサポートのあるApacheの設定</title>
   <para>
    Webサーバ側のTLS/SSL要求のデフォルトのポートは、443です。ポート80での<quote>通常の</quote>Apacheリスニングと、ポート443でのTLS/SSL対応のApacheリスニングとの間に競合は発生しません。実際、HTTPとHTTPSは同じApacheインスタンスで実行できます。通常、ポート80とポート443への要求はそれぞれ別の仮想ホストが処理し、別の仮想サーバに送られます。
   </para>
   <important>
    <title>ファイアウォール設定</title>
    <para>
     ポート443でSSL対応のApacheのファイアウォールを開くことを忘れないでください。これは、<xref linkend="sec-security-firewall-firewalld-cmd"/>で説明されているように<systemitem class="daemon">firewalld</systemitem>を使用して行うことができます。
    </para>
   </important>
   <para>
    グローバルサーバ設定のSSLモジュールはデフォルトで有効になっています。ホストで無効にされている場合は、コマンド<command>a2enmod ssl</command>で有効にします。最終的にSSLを有効にするには、サーバをフラグ<quote>SSL</quote>で起動する必要があります。そのためには、<command>a2enflag SSL</command>(大文字と小文字が区別される)を呼び出します。サーバ証明書をパスワードで暗号化している場合は、<filename>/etc/sysconfig/apache2</filename>で<systemitem>APACHE_TIMEOUT</systemitem>の値を増やし、Apacheの起動時にパスフレーズを入力するのに十分な時間が与えられるようにします。これらの変更を適用するため、サーバを再起動します。再ロードでは不十分です。
   </para>
   <para>
    仮想ホスト設定ディレクトリには、SSL固有ディレクティブが詳細に記述されている<filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename>テンプレートが含まれています。一般的な仮想ホスト設定については、<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照してください。
   </para>
   <para>
    始めるには、テンプレートを<filename>/etc/apache2/vhosts.d/<replaceable>MYSSL-HOST</replaceable>.conf</filename>にコピーして編集します。次のディレクティブの値を調整するだけです。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-ssl-configuration-name-based">
    <title>名前ベースの仮想ホストとSSL</title>
    <para>
     IPアドレスが1つだけのサーバで、複数のSSL対応の仮想ホストを実行することはできません。名前ベースの仮想ホスティングでは、要求されたサーバ名をApacheが知っている必要があります。SSL接続の問題は、SSL接続が(デフォルトの仮想ホストの使用により)確立された後でのみ、そのような要求の読み込みが可能なことです。その結果、証明書がサーバ名に一致しないという警告メッセージが表示されます。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、SNI (Server Name Indication)と呼ばれるSSLプロトコルの拡張を組み込んでおり、仮想ドメインの名前をSSLネゴシエーションの一部として送信することで、この問題を解決します。これにより、サーバが正しい仮想ドメインに早く<quote>切り替わり</quote>、ブラウザに正しい証明書を提示することが可能になります。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、SNIはデフォルトで有効になっています。名前ベースの仮想ホストをSSLで使用できるようにするには、<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>で説明しているようにサーバを設定します(ただし、SSLでは、ポート<literal>80</literal>ではなく、ポート<literal>443</literal>を使用)。
    </para>
    <important>
     <title>SNIブラウザのサポート</title>
     <para>
      SNIは、クライアント側でもサポートされる必要があります。ただし、SNIは、一部の旧式のブラウザを除き、ほとんどのブラウザでサポートされています。詳細については、<link xlink:href="https://en.wikipedia.org/wiki/Server_Name_Indication#Support"/>を参照してください。
     </para>
     <para>
      SNI非対応ブラウザの処理を設定するには、ディレクティブ<systemitem>SSLStrictSNIVHostCheck</systemitem>を使用します。SNI非対応ブラウザは、サーバ設定で<literal>on</literal>に設定されると、すべての仮想ホストに関して拒否されます。<systemitem>VirtualHost</systemitem>ディレクティブ内で<literal>on</literal>に設定されると、この特定のホストへのアクセスが拒否されます。
     </para>
     <para>
      サーバ設定で<literal>off</literal>に設定されると、サーバはSNIサポートがないかのように動作します。SSL要求は、(ポート443に対して)定義された<emphasis>最初の</emphasis>仮想ホストによって処理されます。
     </para>
    </important>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-multiple-instances">
  <title>複数のApacheインスタンスを同じサーバで実行</title>

  <para>
   複数のApacheインスタンスを同じサーバで実行することには、複数の仮想ホストを実行するよりもいくつかのメリットがあります(<xref linkend="sec-apache2-configuration-manually-vhost"/>を参照)。
  </para>

  <itemizedlist>
   <listitem>
    <para>
     仮想ホストを無効にする必要がある場合、Webサーバ設定を変更してから、Webサーバを再始動し、変更が適用されるようにする必要があります。
    </para>
   </listitem>
   <listitem>
    <para>
     問題のある仮想ホストが1つの場合でも、すべてのWebサーバを再始動しなければなりません。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   通常どおり、デフォルトのApacheインスタンスを実行できます。
  </para>

<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start apache2</screen>

  <para>
   デフォルトの<filename>/etc/sysconfig/apache2</filename>ファイルを読み取ります。このファイルが存在しない場合、または存在しても、<systemitem>APACHE_HTTPD_CONF</systemitem>変数が設定されていない場合、<filename>/etc/apache2/httpd.conf</filename>を読み取ります。
  </para>

  <para>
   別のApacheインスタンスを有効にするために、以下を実行します。
  </para>

<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start apache2@<replaceable>INSTANCE_NAME</replaceable></screen>

  <para>
   例:
  </para>

<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start apache2@example_web.org</screen>

  <para>
   デフォルトでは、インスタンスはメイン設定ファイルとして<filename>/etc/apache2@example_web.org/httpd.conf</filename>を使用します。このファイルは、<filename>/etc/sysconfig/apache2@example_web.org</filename>で<systemitem>APACHE_HTTPD_CONF</systemitem>を設定することにより上書きできます。
  </para>

  <para>
   Apacheの追加インスタンスの設定例を次に示します。すべてのコマンドを<systemitem class="username">root</systemitem>ユーザで実行する必要があることに注意してください。
  </para>

  <procedure>
   <title>Apacheの追加インスタンスの設定</title>
   <step>
    <para>
     <filename>/etc/sysconfig/apache2</filename>に基づいて、新しい設定ファイルを作成します(<filename>/etc/sysconfig/apache2@example_web.org</filename>など)。
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> cp /etc/sysconfig/apache2 /etc/sysconfig/apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     <filename>/etc/sysconfig/apache2@example_web.org</filename>というファイルを編集して、次を含んでいる行を変更します。
    </para>
<screen>APACHE_HTTPD_CONF</screen>
    <para>
     次のように変更してください。
    </para>
<screen>APACHE_HTTPD_CONF="/etc/apache2/httpd@example_web.org.conf"</screen>
   </step>
   <step>
    <para>
     <filename>/etc/apache2/httpd@example_web.org.conf</filename>というファイルを<filename>/etc/apache2/httpd.conf</filename>に基づいて作成します。
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> cp /etc/apache2/httpd.conf /etc/apache2/httpd@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     <filename>/etc/apache2/httpd@example_web.org.conf</filename>を編集して変更します。
    </para>
<screen>Include /etc/apache2/listen.conf</screen>
    <para>
     次のように変更してください。
    </para>
<screen>Include /etc/apache2/listen@example_web.org.conf</screen>
    <para>
     すべてのディレクティブを確認し、必要に応じて変更します。多くの場合、
    </para>
<screen>Include /etc/apache2/global.conf</screen>
    <para>
     各インスタンスに対して変更するか、新しい<filename>global@example_web.org.conf</filename>を作成することになるでしょう。変更することをお勧めします。
    </para>
<screen>ErrorLog /var/log/apache2/error_log</screen>
    <para>
     次のように変更してください。
    </para>
<screen>ErrorLog /var/log/apache2/error@example_web.org_log</screen>
    <para>
     インスタンスごとに個別のログを保有するためです。
    </para>
   </step>
   <step>
    <para>
     <filename>/etc/apache2/listen@example_web.org.conf</filename>を<filename>/etc/apache2/listen.conf</filename>に基づいて作成します。
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> cp /etc/apache2/listen.conf /etc/apache2/listen@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     <filename>/etc/apache2/listen@example_web.org.conf</filename>を編集して、
    </para>
<screen>Listen 80</screen>
    <para>
     新しいインスタンスを実行したいポート番号(82など)に変更します。
    </para>
<screen>Listen 82</screen>
    <para>
     新しいApacheインスタンスをセキュアなプロトコルで実行するには(<xref linkend="sec-apache2-ssl"/>を参照)、次の行を変更します。
    </para>
<screen>Listen 443</screen>
    <para>
     変更後(例):
    </para>
<screen>Listen 445</screen>
   </step>
   <step>
    <para>
     新しいApacheインスタンスを開始します。
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     Webブラウザに<literal>http://server_name:82</literal>を参照させて、サーバが稼働していることを確認します。前に新規インスタンス用のエラーログファイル名を変更していた場合、そのファイルを確認できます。
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> tail -f /var/log/apache2/error@example_web.org_log</screen>
   </step>
  </procedure>

  <para>
   複数のApacheインスタンスを同じサーバ上に設定する場合に考慮するべきいくつかのポイントを示します。
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <filename>/etc/sysconfig/apache2@<replaceable>INSTANCE_NAME</replaceable></filename>というファイルには、モジュールのロードやMPM設定などの、<filename>/etc/sysconfig/apache2</filename>と同じ変数を組み込むことができます。
    </para>
   </listitem>
   <listitem>
    <para>
     デフォルトのApacheインスタンスが、他のインスタンスの実行中に実行されている必要はありません。
    </para>
   </listitem>
   <listitem>
    <para>
     Apacheヘルパーユーティリティである、<command>a2enmod</command>、<command>a2dismod</command>および<command>apachectl</command>は、<systemitem>HTTPD_INSTANCE</systemitem>環境変数で別途指定されていない限り、デフォルトのApacheインスタンスで動作します。次の例
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> export HTTPD_INSTANCE=example_web.org
<prompt>tux &gt; </prompt><command>sudo</command> a2enmod access_compat
<prompt>tux &gt; </prompt><command>sudo</command> a2enmod status
<prompt>tux &gt; </prompt><command>sudo</command> apachectl start</screen>
    <para>
     では、<systemitem>access_compat</systemitem>および<systemitem>status</systemitem>モジュールを<filename>/etc/sysconfig/apache2@example_web.org</filename>の<systemitem>APACHE_MODULE</systemitem>変数に追加してから、<literal>example_web.org</literal>インスタンスを始動します。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-apache2-security">
  <title>セキュリティ問題の回避</title>

  <para>
   公共のインターネットに公開しているWebサーバについては、管理面での不断の努力が求められます。ソフトウェアと、偶然の設定ミスの両方に関連したセキュリティの問題が発生することは避けられません。それらに対処するためのいくつかのヒントを紹介します。
  </para>

  <sect2 xml:id="sec-apache2-security-up-to-date">
   <title>最新版のソフトウェア</title>
   <para>
    Apacheソフトウェアに脆弱性が見つかると、SUSEからセキュリティ上の勧告が出されます。それには、脆弱性を修正するための指示が含まれているので、可能な限り適用すべきです。SUSEセキュリティ通知は、次の場所から入手できます。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>Webページ</title>
      <para>
       <link xlink:href="https://www.suse.com/support/security/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>メーリングリストのアーカイブ</title>
      <para>
       <link xlink:href="https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>セキュリティアナウンスメントのリスト</title>
      <para>
       <link xlink:href="https://www.suse.com/support/update/"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-security-permissions">
   <title>DocumentRootのパーミッション</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のデフォルトでは、<systemitem>DocumentRoot</systemitem>ディレクトリの<filename>/srv/www/htdocs</filename>およびCGIディレクトリの<filename>/srv/www/cgi-bin</filename>の所有者はユーザおよびグループの<systemitem>root</systemitem>になっています。これらのパーミッションは変更しないでください。ディレクトリにすべてのユーザが書き込み可能な場合、どのユーザもそれらのディレクトリにファイルを格納できます。その後これらのファイルは、Apacheにより<systemitem>wwwrun</systemitem>のパーミッションで実行されます。その結果、意図しない仕方で、ユーザがファイルシステムのリソースにアクセスできるようになる可能性があります。<filename>/srv/www</filename>のサブディレクトリを使用して仮想ホストの<systemitem>DocumentRoot</systemitem>およびCGIディレクトリを配置し、このユーザおよびグループの<systemitem class="username">root</systemitem>がディレクトリとファイルの所有者であることを確認します。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-filesystem">
   <title>ファイルシステムアクセス</title>
   <para>
    デフォルトでは、ファイルシステム全体へのアクセスは、<filename>/etc/apache2/httpd.conf</filename>で定義されています。これらのディレクティブは決して上書きしないでください。ただし、Apacheが読み込む必要のあるすべてのディレクトリに対するアクセスは有効にしてください。詳細については、<xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>を参照してください。このためには、パスワードまたはシステム設定ファイルなど重要なファイルは外部から読み取ることができないことを確認します。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-cgi">
   <title>CGIスクリプト</title>
   <para>
    PHP、SSIまたは他のプログラミング言語によるインタラクティブなスクリプトは、事実上、任意のコマンドを実行できるため、一般的なセキュリティの問題が存在します。サーバから実行されるスクリプトは、サーバの管理者が信用するソースからのみインストールされる必要があります。一般的には、ユーザが独自のスクリプトを実行できる環境は適切ではありません。また、すべてのスクリプトに対してセキュリティ監査を行うこともお勧めします。
   </para>
   <para>
    スクリプトの管理をできるだけ簡単にするため、CGIスクリプトの実行をグローバルに許可するのではなく、通常、特定のディレクトリに制限されています。設定には、ディレクティブの<systemitem>ScriptAlias</systemitem>および<systemitem>Option ExecCGI</systemitem>が使用されます。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のデフォルト設定では、任意の場所からのCGIスクリプトの実行は許可されていません。
   </para>
   <para>
    すべてのCGIスクリプトは同一のユーザとして実行するため、異なるスクリプトが互いに競合する可能性があります。suEXECモジュールは、CGIスクリプトを別のユーザとグループで実行できるようにします。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-users">
   <title>ユーザディレクトリ</title>
   <para>
    ユーザディレクトリを(<systemitem>mod_userdir</systemitem>または<systemitem>mod_rewrite</systemitem>を使用して)有効化する場合は、 <filename>.htaccess</filename>ファイルを許可しないことをお勧めします。これらのファイルは、ユーザによるセキュリティ設定の上書きを可能にするからです。<systemitem>AllowOverRide</systemitem>ディレクティブを使用して、少なくとも、ユーザの操作を制限する必要があります。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>では、<filename>.htaccess</filename>ファイルはデフォルトで有効化されていますが、ユーザは<systemitem>mod_userdir</systemitem>を使用するときにいずれの<systemitem>Option</systemitem>ディレクティブも上書きすることは許可されていません(<filename>/etc/apache2/mod_userdir.conf</filename>設定ファイルを参照してください)。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-troubleeshooting">
  <title>トラブルシューティング</title>

  <para>
   Apacheが起動しないと、Webページにアクセスすることはできず、ユーザがWebサーバに接続することもできないので、問題の原因を見つけ出すことは重要です。次に、エラーが説明されている場所とチェックすべき重要事項について説明します。
  </para>

  <variablelist>
   <varlistentry>
    <term><systemitem class="service">apache2.service</systemitem>サブコマンドの出力:</term>
    <listitem>
     <para>
      Webサーバをバイナリの<filename>/usr/sbin/apache2ctl</filename>で起動/停止する代わりに、<command>systemctl</command>コマンドを使用します(<xref linkend="sec-apache2-start-stop"/>を参照)。<command>systemctl status apache2</command>は、エラーを詳細に説明し、設定エラーを修正するコツやヒントも提供します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ログファイルと冗長性レベル</term>
    <listitem>
     <para>
      致命的エラーと致命的でないエラーの両方について、Apacheログファイル(主に、デフォルトで<filename>/var/log/apache2/error_log</filename>にあるエラーログファイル)をチェックしてください。さらに、ログファイルにさらに詳細な情報を記録することが必要な場合には、<systemitem>LogLevel</systemitem>ディレクティブで、記録されるメッセージの詳細を制御することができます。
     </para>
     <tip>
      <title>簡単なテスト</title>
      <para>
       <command>tail -F /var/log/apache2/<replaceable>MY_ERROR_LOG</replaceable></command>コマンドで、Apacheのログメッセージを確認します。その後、<command>systemctl restart apache2</command>コマンドを実行します。そして、ブラウザでの接続をもう一度試みて、出力を確認してください。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ファイアウォールとポート</term>
    <listitem>
     <para>
      よくある間違いで、サーバのファイアウォール設定でApache用のポートを開けていないことがあります。YaSTでApacheを設定する場合には、この点を扱うための別のオプションが存在します(<xref linkend="sec-apache2-configuration-yast"/>を参照してください)。Apacheを手動で設定する場合は、YaSTのファイアウォールモジュールを使用してHTTPとHTTPS用のファイアウォールポートを開きます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   これまでに説明したいずれの方法でもエラーを特定できない場合には、<link xlink:href="http://httpd.apache.org/bug_report.html"/>の、オンラインのApacheバグデータベースをチェックしてください。加えて、<link xlink:href="http://httpd.apache.org/userslist.html"/>のメーリングリストで、Apacheのユーザコミュニティに参加することができます。
  </para>
 </sect1>
 <sect1 xml:id="sec-apache2-more-information">
  <title>詳細情報</title>

  <para>
   <systemitem>apache2-doc</systemitem>パッケージには、ローカルインストールおよび参照用にそれぞれローカライズされている完全なApacheマニュアルが含まれています。これは、デフォルトではインストールされません。このマニュアルを最もすばやくインストールするには、<command>zypper in apache2-doc</command>コマンドを使用します。Apacheマニュアルは、インストールされると、<link xlink:href="http://localhost/manual/"/>から表示できるようになります。また、Webの<link xlink:href="http://httpd.apache.org/docs-2.4/"/>からもアクセスできます。SUSE固有の設定に関するヒントについては、<filename>/usr/share/doc/packages/apache2/README.*</filename>ディレクトリを参照してください。
  </para>

  <sect2 xml:id="sec-apache2-more-information-apache22">
   <title>Apache 2.4</title>
   <para>
    Apache 2.4の新機能のリストについては、<link xlink:href="http://httpd.apache.org/docs/2.4/new_features_2_4.html"/>を参照してください。バージョン2.2から2.4へのアップグレード情報も<link xlink:href="http://httpd.apache.org/docs-2.4/upgrading.html"/>で参照できます。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-modules">
   <title> Apache モジュール </title>
   <para>
    <xref linkend="sec-apache2-modules-external"/>で簡単に説明されている外部Apacheモジュールの詳細は、次の場所で入手できます。
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="https://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-cgi">
   <title>開発</title>
   <para>
    Apacheモジュールの開発、またはApache Webサーバプロジェクトへの参加に関する情報については、次を参照してください。
   </para>
   <variablelist>
    <varlistentry>
     <term>Apache開発者情報</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apache開発者ドキュメント</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/docs/2.4/developer/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-miscellaneous-sources" os="sles;sled">
   <title>その他の情報源</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>のApacheに固有な問題が発生した場合は、Technical Information Search (<link xlink:href="https://www.suse.com/support"/>)を参照してください。Apacheの沿革は、<link xlink:href="https://httpd.apache.org/ABOUT_APACHE.html"/>で参照できます。このページでは、Apacheというサーバ名の由来についても説明しています。
   </para>
  </sect2>
 </sect1>
</chapter>
