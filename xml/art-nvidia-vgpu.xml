<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<article xml:id="article-nvidia-vgpu" xml:lang="en" version="5.0"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&nvidia; virtual GPU (vGPU) Guide</title>
 <info><productname>&productname;</productname>
  <productnumber>&productnumber;</productnumber><date>
<?dbtimestamp format="B d, Y" ?></date>
 </info>
 <sect1 xml:id="configure-nvidia-vgpu-introduction">
  <title>Introduction</title>

  <para>
   &nvidia; vGPU is a graphics virtualization solution that provides multiple
   virtual machines (VMs) simultaneous access to one physical Graphics
   Processing Unit (GPU) on the &vmhost;. This article refers to the Volta and
   Ampere GPU architecture.
  </para>
 </sect1>
 <sect1 xml:id="configure-nvidia-vgpu-topology">
  <title>Topology</title>

  <sect2 xml:id="configure-nvidia-vgpu-architecture">
   <title>&nvidia; GPU architectures</title>
   <para>
    There are two types of GPU architectures:
   </para>
   <variablelist>
    <varlistentry>
     <term>Time-sliced vGPU architecture</term>
     <listitem>
      <para>
       Introduced on GPUs that are based on the &nvidia; Ampere GPU
       architecture. Only Ampere GPU cards can support MIG-backed vGPU.
      </para>
      <figure>
       <title>Time-sliced architecture</title>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="nvidia-vgpu-time-sliced.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="nvidia-vgpu-time-sliced.png" width="75%"/>
        </imageobject>
       </mediaobject>
      </figure>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Multi-Instance GPU (MIG) vGPU architecture</term>
     <listitem>
      <para>
       All GPU cards support time-sliced vGPU. For time-sliced vGPU
       architecture, Ampere GPU cards are based on Single Root I/O
       Virtualization (SR-IOV) mechanism. Volta and the earlier architecture
       are based on meditated device mechanism. These two mechanisms are
       transparent to a VM. However, they need different configurations from
       the host side.
      </para>
      <figure>
       <title>MIG-backed architecture</title>
       <mediaobject>
        <imageobject role="fo">
         <imagedata fileref="nvidia-vgpu-mig-backed.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
         <imagedata fileref="nvidia-vgpu-mig-backed.png" width="75%"/>
        </imageobject>
       </mediaobject>
      </figure>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="configure-nvidia-vgpu-vgpu-types">
   <title>vGPU types</title>
   <para>
    Each physical GPU can support several different types of vGPUs. vGPU types
    have a fixed amount of frame buffer, the number of supported display heads,
    and maximum resolutions. NVIDIA has four types of vGPUs: A, B, C, and
    Q-series. &suse; currently supports Q and C-series.
   </para>
   <table>
    <title>vGPU types</title>
    <tgroup cols="2" align="left">
     <colspec colname="c1" colwidth="20*"/>
     <colspec colname="c2" colwidth="80*"/>
     <thead>
      <row>
       <entry>
        <para>
         vGPU series
        </para>
       </entry>
       <entry>
        <para>
         Optimal workload
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Q-series
        </para>
       </entry>
       <entry>
        <para>
         Virtual workstations for creative and technical professionals who
         require the performance and features of the &nvidia; Quadro
         technology.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         C-series
        </para>
       </entry>
       <entry>
        <para>
         Compute-intensive server workloads, for example, artificial
         intelligence (AI), deep learning, or high-performance computing (HPC).
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         B-series
        </para>
       </entry>
       <entry>
        <para>
         Virtual desktops for business professionals and knowledge workers.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         A-series
        </para>
       </entry>
       <entry>
        <para>
         Application streaming or session-based solutions for virtual
         applications users.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="configure-nvidia-vgpu-valid-configurations">
   <title>Valid vGPU configurations on a single GPU</title>
   <sect3 xml:id="configure-nvidia-vgpu-valid-configurations-time-sliced">
    <title>Time-sliced vGPU configurations</title>
    <para>
     For time-sliced vGPUs, all vGPUs types must be the same:
    </para>
    <figure>
     <title>Example time-sliced vGPU configurations on &nvidia; Tesla M60</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="nvidia-vgpus-supported.png" width="75%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="nvidia-vgpus-supported.png" width="75%"/>
      </imageobject>
     </mediaobject>
    </figure>
   </sect3>
   <sect3 xml:id="configure-nvidia-vgpu-valid-configurations-mig-backed">
    <title>MIG-backed vGPU configurations</title>
    <para>
     For MIG-backed vGPUs, vGPUs can be both homogeneous and mixed-type:
    </para>
    <figure>
     <title>Example MIG-backed vGPU configurations on &nvidia; A100 PCIe 40GB</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="nvidia-vgpus-supported2.png" width="75%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="nvidia-vgpus-supported2.png" width="75%"/>
      </imageobject>
     </mediaobject>
    </figure>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="configure-nvidia-vgpu-configuring-host">
  <title>Configuring vGPU manager in &vmhost;</title>

  <sect2 xml:id="configure-nvidia-vgpu-verify-host">
   <title>Prepare &vmhost; environment</title>
   <procedure>
    <step>
     <para>
      Verify that you have a compatible server and GPU cards. Check
      specification (FIXME) for details.
     </para>
    </step>
    <step>
     <para>
      Verify that &vmhost; is &sls; 15 SP2 or newer:
     </para>
<screen>
&prompt.user;cat /etc/issue
Welcome to SUSE Linux Enterprise Server 15 SP3  (x86_64) - Kernel \r (\l).
</screen>
    </step>
    <step>
     <para>
      If Ampere architecture GPU cards are used, verify that &vmhost; supports
      VT-/IOMMU and SR-IOV technologies, and that they are enabled in BIOS.
     </para>
    </step>
    <step>
     <para>
      Enable IOMMU. Verify that it is included in the boot command line:
     </para>
<screen>
cat /proc/cmdline
BOOT_IMAGE=/boot/vmlinuz-default [...] intel_iommu=on [...]
</screen>
     <para>
      If not, add the following line to <filename>/etc/default/grub</filename>.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        For Intel CPUs:
       </para>
<screen>GRUB_CMDLINE_LINUX="intel_iommu=on"</screen>
       <para>
        For AMD CPUs:
       </para>
<screen>GRUB_CMDLINE_LINUX="amd_iommu=on"</screen>
      </listitem>
     </itemizedlist>
     <para>
      Then generate new &grub; configuration file and reboot:
     </para>
<screen>
&prompt.sudo;grub2-mkconfig -o /boot/grub2/grub.cfg
&prompt.sudo;systemctl reboot
</screen>
     <tip>
      <para>
       You can verify that IOMMU is loaded by running the following command:
<screen>sudo dmesg | grep -e IOMMU</screen>
      </para>
     </tip>
    </step>
    <step>
     <!-- 2021-09-21 tbazant: this seems out of place here:
      "After finishing the driver installation, run
      /usr/lib/nvidia/sriov-manage -e slot:bus:domain.function"
      -->
     <para>
      Enable SR-IOV. Refer to
      <link
      xlink:href="https://documentation.suse.com/sles/15-SP3/single-html/SLES-virtualization/#sec-libvirt-config-io"/>
      for useful information.
     </para>
    </step>
    <step>
     <para>
      Disable the nouveau kernel module by adding the following line it to the
      top of the <filename>/etc/modprobe.d/50-blacklist.conf</filename> file:
     </para>
<screen>blacklist nouveau</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="configure-nvidia-vgpu-kvm-driver">
   <title>Install the &nvidia; &kvm; driver</title>
   <procedure>
    <step>
     <para>
      Exit from the graphical mode:
     </para>
<screen>&prompt.sudo;init 3</screen>
    </step>
    <step>
     <para>
      Install the <package>kernel-default-devel</package> package and its
      dependencies:
     </para>
<screen>&prompt.sudo;zypper in kernel-default-devel</screen>
    </step>
    <step>
     <para>
      Download the vGPU software from the &nvidia; portal, make it executable,
      and run it:
     </para>
<screen>
&prompt.user;chmod +x NVIDIA-Linux-x86_64-450.55-vgpu-kvm.run
&prompt.sudo;./NVIDIA-Linux-x86_64-450.55-vgpu-kvm.run
</screen>
     <tip>
      <para>
       To enable dynamic kernel module support in order to get the module
       rebuilt automatically when new a new kernel is installed, add the
       <option>--dkms</option> option:
      </para>
<screen>&prompt.sudo;./NVIDIA-Linux-x86_64-450.55-vgpu-kvm.run --dkms</screen>
     </tip>
    </step>
    <step>
     <para>
      When the driver installation is finished, reboot the system:
     </para>
<screen>&prompt.sudo;systemctl reboot</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="configure-nvidia-vgpu-verify-driver-installation">
   <title>Verify the driver installation</title>
   <procedure>
    <step>
     <para>
      Verify loaded kernel modules:
     </para>
<screen>
&prompt.user;lsmod | grep nvidia
nvidia_vgpu_vfio       49152  9
nvidia              14393344  229 nvidia_vgpu_vfio
mdev                   20480  2 vfio_mdev,nvidia_vgpu_vfio
vfio                   32768  6 vfio_mdev,nvidia_vgpu_vfio,vfio_iommu_type1
</screen>
     <para>
      The modules containing the <literal>vfio</literal> string are required
      dependencies.
     </para>
    </step>
    <step>
     <para>
      Print the GPU device status with the <command>nvidia-smi</command>
      command. The output should be similar to the following one:
     </para>
<screen>
&prompt.user;nvidia-smi
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.63       Driver Version: 470.63       CUDA Version: N/A      |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA A40          Off  | 00000000:31:00.0 Off |                    0 |
|  0%   46C    P0    39W / 300W |      0MiB / 45634MiB |      0%      Default |
|                               |                      |                  N/A |
+-------------------------------+----------------------+----------------------+

+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
</screen>
    </step>
    <step>
     <para>
      Check the sysfs file system. For Volta and earlier GPU cards, new directory <filename>mdev_supported_types</filename> is added, for example:
     </para>
     <screen>cd /sys/bus/pci/devices/0000\:84\:00.0/mdev_supported_types</screen>
     <para>
      For Ampere GPU cards, you need to enable SR-IOV first.
      <!-- 2021-09-21 tbazant, this referes to 'out-of-place' comment below -->
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <xi:include href="common_gfdl1.2_i.xml"/>
</article>
