<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
    [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xml:id="cha-buildah-overview" xml:lang="en"
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&buildah; overview</title>
 <para>
  <link xlink:href="https://buildah.io/">&buildah;</link> is tool for building
  OCI-compliant container images. &buildah; can handle the following tasks.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Create containers from scratch, or from an existing image.
   </para>
  </listitem>
  <listitem>
   <para>
    Create an image from a working container or via Dockerfile.
   </para>
  </listitem>
  <listitem>
   <para>
    Build images in the OCI or &deng; image formats.
   </para>
  </listitem>
  <listitem>
   <para>
    Mount a working container's root filesystem for manipulation.
   </para>
  </listitem>
  <listitem>
   <para>
    Use the updated contents of a container's root filesystem as a filesystem
    layer to create a new image.
   </para>
  </listitem>
  <listitem>
   <para>
    Delete a working container or an image and rename a local container.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Compared to &deng;, &buildah; has several advantages.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    The tool makes it possible to mount a working container's filesystem, so it
    becomes accessible by the host.
   </para>
  </listitem>
  <listitem>
   <para>
    The process of building container images using &buildah; can be automated
    via scripts by using &buildah;'s subcommands instead of a Containerfile or
    Dockerfile.
   </para>
  </listitem>
  <listitem>
   <para>
    Similar to &podman;, &buildah; does not require a daemon to run and can be
    used by unprivileged users.
   </para>
  </listitem>
  <listitem>
   <para>
    It is possible to build images inside a container without mounting the
    &docker; socket, which improves security.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-podman-buildah">
  <title>&podman; and &buildah;</title>

  <para>
   Both &podman; and &buildah; can be used to build container images. While
   &podman; makes it possible to build images using Dockerfiles, &buildah;
   offers an expanded range of image building options and capabilities.
  </para>
 </sect1>
 <sect1 xml:id="cha-buildah-install">
  <title>&buildah; installation</title>

  <para>
   To install &buildah;, run the <command>sudo zypper in buildah</command>. Run
   <command>buildah --version</command> to check whether &buildah; has been
   installed successfully.
  </para>

  <para>
   If you already have &podman; installed and set up for use in the rootless
   mode, &buildah; can be used in an unprivileged environment without any
   further configuration. If you need to enable the rootless mode for
   &buildah;, run the following command:
  </para>

<screen>&prompt.user;sudo usermod --add-subuids 200000-201000 --add-subgids 200000-201000 $USER</screen>

  <para>
   This command enables the rootless mode for the current user. After running
   the command, log out and log in again to enable the changes.
  </para>

  <para>
   The command above defines a range of local uids on the host, on to which the
   uids allocated to users inside the container are mapped. Note that the
   ranges defined for different users must not overlap. It is also important
   that the ranges do not reuse the uid of any existing local users or groups.
   By default, adding a user with the <command>useradd</command> on &slsa;
   &product-ga;, automatically allocates subuid and subgid ranges.
  </para>

  <note>
   <title>&buildah; in rootless mode</title>
   <para>
    In the rootless mode, &buildah; commands must be executed in a modified
    user namespace of the user. To enter this user namespace, run the command
    <command>buildah unshare</command>. Otherwise, the <command>buildah
    mount</command> command will fail.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="cha-buildah-build-images">
  <title>Building images with &buildah;</title>

  <para>
   Instead of a special file with instructions, &buildah; uses individual
   commands to build an image. Building an image with &buildah; involves
   several steps: run a container based on the specified image, edit container
   (install packages, configure settings, etc.), configure container options,
   commit all changes into a new image. While this process may include
   additional steps, such as mounting the container's filesystem and working
   with it, the basic workflow logic remains the same.
  </para>

  <para>
   The following example can give you a general idea of how to build an image
   with &buildah;.
  </para>

  <example>
   <title>Build image example</title>
<screen>container=$(buildah from suse/sle15) <co xml:id="ctr"/>
buildah run $container zypper up <co xml:id="run"/>
buildah copy $container . /usr/src/example/ <co xml:id="copy"/>
buildah config --workingdir /usr/src/example $container
buildah config --port 8000 $container
buildah config --cmd "php -S 0.0.0.0:8000" $container <co xml:id="config"/>
buildah config --label maintainer="Tux" $container
buildah config --label version="0.1" $container <co xml:id="label"/>
buildah commit $container example <co xml:id="commit"/>
buildah rm $container <co xml:id="rm"/>
</screen>
   <calloutlist>
    <callout arearefs="ctr">
     <para>
      Run a container (also called a working container) based on the specified
      image (in this case, <literal>sle15</literal>).
     </para>
    </callout>
    <callout arearefs="run">
     <para>
      Run a command in the working container you just created. In this example,
      &buildah; runs the <command>zypper up</command> command.
     </para>
    </callout>
    <callout arearefs="copy">
     <para>
      Copy files and directories to the specified location in the container. In
      this example, &buildah; copies the entire contents of the current
      directory to <filename>/usr/src/example/</filename>.
     </para>
    </callout>
    <callout arearefs="config">
     <para>
      The <command>buildah config</command> commands specify container options.
      This includes defining a working directory, exposing a port, and running
      a command inside the container.
     </para>
    </callout>
    <callout arearefs="label">
     <para>
      The <command>buildah config --label</command> command allows you to
      assign labels to the container. This may include the
      <literal>maintainer</literal>, <literal>description</literal>,
      <literal>version</literal>, and so on.
     </para>
    </callout>
    <callout arearefs="commit">
     <para>
      Create an image from the working container by committing all the
      modifications.
     </para>
    </callout>
    <callout arearefs="rm">
     <para>
      Delete the working container.
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect1>
</chapter>
