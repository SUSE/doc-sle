<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.udev">
 <title>Dynamic Kernel Device Management with <systemitem class="service">udev</systemitem></title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  The kernel can add or remove almost any device in a running system. Changes
  in the device state (whether a device is plugged in or removed) need to be
  propagated to user space. Devices need to be configured when they are
  plugged in and recognized. Users of a certain device need to be informed
  about any changes in this device's recognized state.
  <systemitem class="service">udev</systemitem> provides the needed
  infrastructure to dynamically maintain the device node files and symbolic
  links in the <filename>/dev</filename> directory.
  <systemitem class="service">udev</systemitem> rules provide a way to plug
  external tools into the kernel device event processing. This allows you to
  customize <systemitem class="service">udev</systemitem> device handling by adding certain scripts to execute as part of kernel device
  handling, or request and import additional data to evaluate during device
  handling.
 </para>
 <sect1 xml:id="sec.udev.devdir">
  <title>The <filename>/dev</filename> Directory</title>

  <para>
   The device nodes in the <filename>/dev</filename> directory provide access
   to the corresponding kernel devices. With
   <systemitem class="service">udev</systemitem>, the <filename>/dev</filename>
   directory reflects the current state of the kernel. Every kernel device has
   one corresponding device file. If a device is disconnected from the system,
   the device node is removed.
  </para>

  <para>
   The content of the <filename>/dev</filename> directory is kept on a
   temporary file system and all files are rendered at every system start-up.
   Manually created or modified files do not, by design, survive a reboot.
   Static files and directories that should always be in the
   <filename>/dev</filename> directory regardless of the state of the
   corresponding kernel device can be created with systemd-tmpfiles. The
   configuration files are found in <filename>/usr/lib/tmpfiles.d/</filename>
   and <filename>/etc/tmpfiles.d/</filename>; for more information, see the
   <systemitem>systemd-tmpfiles(8)</systemitem> man page.
  </para>
 </sect1>
 <sect1 xml:id="sec.udev.kernel">
  <title>Kernel <systemitem class="service">uevents</systemitem> and <systemitem class="service">udev</systemitem></title>

  <para>
   The required device information is exported by the
   <systemitem class="filesystem">sysfs</systemitem> file system. For every
   device the kernel has detected and initialized, a directory with the device
   name is created. It contains attribute files with device-specific
   properties.
  </para>

  <para>
   Every time a device is added or removed, the kernel sends a uevent to notify
   <systemitem class="service">udev</systemitem> of the change. The
   <systemitem class="service">udev</systemitem> daemon reads and parses all
   provided rules from the <filename>/etc/udev/rules.d/*.rules</filename> files
   once at start-up and keeps them in memory. If rules files are changed, added
   or removed, the daemon can reload the in-memory representation of all rules
   with the command <command>udevadm control --reload</command>. For more
   details on <systemitem class="service">udev</systemitem> rules and their
   syntax, refer to <xref linkend="sec.udev.rules"/>.
  </para>

  <para>
   Every received event is matched against the set of provides rules. The rules
   can add or change event environment keys, request a specific name for the
   device node to create, add symbolic links pointing to the node or add
   programs to run after the device node is created. The driver core
   <systemitem class="service">uevents</systemitem> are received from a kernel
   netlink socket.
  </para>
 </sect1>
 <sect1 xml:id="sec.udev.drivers">
  <title>Drivers, Kernel Modules and Devices</title>

  <para>
   The kernel bus drivers probe for devices. For every detected device, the
   kernel creates an internal device structure while the driver core sends a
   uevent to the <systemitem class="service">udev</systemitem> daemon. Bus
   devices identify themselves by a specially-formatted ID, which tells what
   kind of device it is. Usually these IDs consist of vendor and product ID and
   other subsystem-specific values. Every bus has its own scheme for these IDs,
   called <envar>MODALIAS</envar>. The kernel takes the device information,
   composes a <envar>MODALIAS</envar> ID string from it and sends that string
   along with the event. For a USB mouse, it looks like this:
  </para>

<screen>MODALIAS=usb:v046DpC03Ed2000dc00dsc00dp00ic03isc01ip02</screen>

  <para>
   Every device driver carries a list of known aliases for devices it can
   handle. The list is contained in the kernel module file itself. The program
   depmod reads the ID lists and creates the file
   <filename>modules.alias</filename> in the kernel's
   <filename>/lib/modules</filename> directory for all currently available
   modules. With this infrastructure, module loading is as easy as calling
   <command>modprobe</command> for every event that carries a
   <literal>MODALIAS</literal> key. If <command>modprobe $MODALIAS</command> is
   called, it matches the device alias composed for the device with the aliases
   provided by the modules. If a matching entry is found, that module is
   loaded. All this is automatically triggered by
   <systemitem class="service">udev</systemitem>.
  </para>
 </sect1>
 <sect1 xml:id="sec.udev.boot">
  <title>Booting and Initial Device Setup</title>

  <para>
   All device events happening during the boot process before the
   <systemitem class="service">udev</systemitem> daemon is running are lost,
   because the infrastructure to handle these events resides on the root file
   system and is not available at that time. To cover that loss, the kernel
   provides a <filename>uevent</filename> file located in the device directory
   of every device in the <systemitem class="filesystem">sysfs</systemitem>
   file system. By writing <literal>add</literal> to that file, the kernel
   resends the same event as the one lost during boot. A simple loop over all
   <filename>uevent</filename> files in <filename>/sys</filename> triggers all
   events again to create the device nodes and perform device setup.
  </para>

  <para>
   As an example, a USB mouse present during boot may not be initialized by the
   early boot logic, because the driver is not available at that time. The
   event for the device discovery was lost and failed to find a kernel module
   for the device. Instead of manually searching for connected
   devices, <systemitem class="service">udev</systemitem> requests all device
   events from the kernel after the root file system is available, so the event
   for the USB mouse device runs again. Now it finds the kernel module on the
   mounted root file system and the USB mouse can be initialized.
  </para>

  <para>
   From user space, there is no visible difference between a device coldplug
   sequence and a device discovery during runtime. In both cases, the same
   rules are used to match and the same configured programs are run.
  </para>
 </sect1>
 <sect1 xml:id="sec.udev.debug">
  <title>Monitoring the Running <systemitem class="service">udev</systemitem> Daemon</title>

  <para>
   The program <command>udevadm monitor</command> can be used to visualize the
   driver core events and the timing of the
   <systemitem class="service">udev</systemitem> event processes.
  </para>

<screen>UEVENT[1185238505.276660] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1 (usb)
UDEV  [1185238505.279198] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1 (usb)
UEVENT[1185238505.279527] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0 (usb)
UDEV  [1185238505.285573] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0 (usb)
UEVENT[1185238505.298878] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10 (input)
UDEV  [1185238505.305026] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10 (input)
UEVENT[1185238505.305442] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/mouse2 (input)
UEVENT[1185238505.306440] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/event4 (input)
UDEV  [1185238505.325384] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/event4 (input)
UDEV  [1185238505.342257] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/mouse2 (input)</screen>

  <para>
   The <literal>UEVENT</literal> lines show the events the kernel has sent over
   netlink. The <literal>UDEV</literal> lines show the finished
   <systemitem class="service">udev</systemitem> event handlers. The timing is
   printed in microseconds. The time between <literal>UEVENT</literal> and
   <literal>UDEV</literal> is the time
   <systemitem class="service">udev</systemitem> took to process this event or
   the <systemitem class="service">udev</systemitem> daemon has delayed its
   execution to synchronize this event with related and already running events.
   For example, events for hard disk partitions always wait for the main disk
   device event to finish, because the partition events may rely on the data
   that the main disk event has queried from the hardware.
  </para>

  <para>
   <command>udevadm monitor --env</command> shows the complete event
   environment:
  </para>

<screen>ACTION=add
DEVPATH=/devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10
SUBSYSTEM=input
SEQNUM=1181
NAME="Logitech USB-PS/2 Optical Mouse"
PHYS="usb-0000:00:1d.2-1/input0"
UNIQ=""
EV=7
KEY=70000 0 0 0 0
REL=103
MODALIAS=input:b0003v046DpC03Ee0110-e0,1,2,k110,111,112,r0,1,8,amlsfw</screen>

  <para>
   <systemitem class="service">udev</systemitem> also sends messages to syslog.
   The default syslog priority that controls which messages are sent to syslog
   is specified in the <systemitem class="service">udev</systemitem>
   configuration file <filename>/etc/udev/udev.conf</filename>. The log
   priority of the running daemon can be changed with <command>udevadm control
   --log_priority=</command><replaceable>LEVEL/NUMBER</replaceable>.
  </para>
 </sect1>
 <sect1 xml:id="sec.udev.rules">
  <title>Influencing Kernel Device Event Handling with <systemitem class="service">udev</systemitem> Rules</title>

  <para>
   A <systemitem class="service">udev</systemitem> rule can match any property
   the kernel adds to the event itself or any information that the kernel
   exports to <filename>sysfs</filename>. The rule can also request additional
   information from external programs. Every event is matched against all
   provided rules. All rules are located in the
   <filename>/etc/udev/rules.d</filename> directory.
  </para>

  <para>
   Every line in the rules file contains at least one key value pair. There are
   two kinds of keys, match and assignment keys. If all match keys match their
   values, the rule is applied and the assignment keys are assigned the
   specified value. A matching rule may specify the name of the device node,
   add symbolic links pointing to the node or run a specified program as part
   of the event handling. If no matching rule is found, the default device node
   name is used to create the device node. Detailed information about the rule
   syntax and the provided keys to match or import data are described in the
   <systemitem class="service">udev</systemitem> man page. The following
   example rules provide a basic introduction to
   <systemitem class="service">udev</systemitem> rule syntax. The example rules
   are all taken from the <systemitem class="service">udev</systemitem> default
   rule set that is located under
   <filename>/etc/udev/rules.d/50-udev-default.rules</filename>.
  </para>

  <example xml:id="ex.rules">
   <title>Example <systemitem class="service">udev</systemitem> Rules</title>
<screen># console
KERNEL=="console", MODE="0600", OPTIONS="last_rule"

# serial devices
KERNEL=="ttyUSB*", ATTRS{product}=="[Pp]alm*Handheld*", SYMLINK+="pilot"

# printer
SUBSYSTEM=="usb", KERNEL=="lp*", NAME="usb/%k", SYMLINK+="usb%k", GROUP="lp"

# kernel firmware loader
SUBSYSTEM=="firmware", ACTION=="add", RUN+="firmware.sh"</screen>
  </example>

  <para>
   The <systemitem>console</systemitem> rule consists of three keys: one match
   key (<literal>KERNEL</literal>) and two assign keys
   (<literal>MODE</literal>, <literal>OPTIONS</literal>). The
   <literal>KERNEL</literal> match rule searches the device list for any items
   of the type <literal>console</literal>. Only exact matches are valid and
   trigger this rule to be executed. The <literal>MODE</literal> key assigns
   special permissions to the device node, in this case, read and write
   permissions to the owner of this device only. The <literal>OPTIONS</literal>
   key makes this rule the last rule to be applied to any device of this type.
   Any later rule matching this particular device type does not have any
   effect.
  </para>

  <para>
   The <systemitem>serial devices</systemitem> rule is not available in
   <filename>50-udev-default.rules</filename> anymore, but it is still worth
   considering. It consists of two match keys (<literal>KERNEL</literal> and
   <literal>ATTRS</literal>) and one assign key (<literal>SYMLINK</literal>).
   The <literal>KERNEL</literal> key searches for all devices of the
   <literal>ttyUSB</literal> type. Using the <literal>*</literal> wild card,
   this key matches several of these devices. The second match key,
   <literal>ATTRS</literal>, checks whether the <filename>product</filename>
   attribute file in <literal>sysfs</literal> for any <literal>ttyUSB</literal>
   device contains a certain string. The assign key
   (<literal>SYMLINK</literal>) triggers the addition of a symbolic link to
   this device under <filename>/dev/pilot</filename>. The operator used in this
   key (<literal>+=</literal>) tells
   <systemitem class="service">udev</systemitem> to additionally perform this
   action, even if previous or later rules add other symbolic links. As this
   rule contains two match keys, it is only applied if both conditions are met.
  </para>

  <para>
   The <systemitem>printer</systemitem> rule deals with USB printers and
   contains two match keys which must both apply to get the entire rule applied
   (<literal>SUBSYSTEM</literal> and <literal>KERNEL</literal>). Three assign
   keys deal with the naming for this device type (<literal>NAME</literal>),
   the creation of symbolic device links (<literal>SYMLINK</literal>) and the
   group membership for this device type (<literal>GROUP</literal>). Using the
   <literal>*</literal> wild card in the <literal>KERNEL</literal> key makes it
   match several <literal>lp</literal> printer devices. Substitutions are used
   in both, the <literal>NAME</literal> and the <literal>SYMLINK</literal> keys
   to extend these strings by the internal device name. For example, the
   symbolic link to the first <literal>lp</literal> USB printer would read
   <filename>/dev/usblp0</filename>.
  </para>

  <para>
   The <systemitem>kernel firmware loader</systemitem> rule makes
   <systemitem class="service">udev</systemitem> load additional firmware by an
   external helper script during runtime. The <literal>SUBSYSTEM</literal>
   match key searches for the <literal>firmware</literal> subsystem. The
   <literal>ACTION</literal> key checks whether any device belonging to the
   <literal>firmware</literal> subsystem has been added. The
   <literal>RUN+=</literal> key triggers the execution of the
   <literal>firmware.sh</literal> script to locate the firmware that is to be
   loaded.
  </para>

  <para>
   Some general characteristics are common to all rules:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Each rule consists of one or more key value pairs separated by a comma.
    </para>
   </listitem>
   <listitem>
    <para>
     A key's operation is determined by the operator.
     <systemitem class="service">udev</systemitem> rules support several
     operators.
    </para>
   </listitem>
   <listitem>
    <para>
     Each given value must be enclosed by quotation marks.
    </para>
   </listitem>
   <listitem>
    <para>
     Each line of the rules file represents one rule. If a rule is longer than
     one line, use <literal>\</literal> to join the different lines as you
     would do in shell syntax.
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="service">udev</systemitem> rules support a shell-style
     pattern that matches the <literal>*</literal>, <literal>?</literal>, and
     <literal>[]</literal> patterns.
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="service">udev</systemitem> rules support substitutions.
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.udev.rules.ops">
   <title>Using Operators in <systemitem class="service">udev</systemitem> Rules</title>
   <para>
    Creating keys you can choose from several operators, depending on the type
    of key you want to create. Match keys will normally be used to find a value
    that either matches or explicitly mismatches the search value. Match keys
    contain either of the following operators:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>==</literal>
     </term>
     <listitem>
      <para>
       Compare for equality. If the key contains a search pattern, all results
       matching this pattern are valid.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>!=</literal>
     </term>
     <listitem>
      <para>
       Compare for non-equality. If the key contains a search pattern, all
       results matching this pattern are valid.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Any of the following operators can be used with assign keys:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>=</literal>
     </term>
     <listitem>
      <para>
       Assign a value to a key. If the key previously consisted of a list of
       values, the key resets and only the single value is assigned.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>+=</literal>
     </term>
     <listitem>
      <para>
       Add a value to a key that contains a list of entries.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>:=</literal>
     </term>
     <listitem>
      <para>
       Assign a final value. Disallow any later change by later rules.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.udev.rules.subst">
   <title>Using Substitutions in <systemitem class="service">udev</systemitem> Rules</title>
   <para>
    <systemitem class="service">udev</systemitem> rules support the use of
    placeholders and substitutions. Use them in a similar fashion as you would
    do in any other scripts. The following substitutions can be used with
    <systemitem class="service">udev</systemitem> rules:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>%r</literal>, <literal>$root</literal>
     </term>
     <listitem>
      <para>
       The device directory, <filename>/dev</filename> by default.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%p</literal>, <literal>$devpath</literal>
     </term>
     <listitem>
      <para>
       The value of <envar>DEVPATH</envar>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%k</literal>, <literal>$kernel</literal>
     </term>
     <listitem>
      <para>
       The value of <envar>KERNEL</envar> or the internal device name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%n</literal>, <literal>$number</literal>
     </term>
     <listitem>
      <para>
       The device number.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%N</literal>, <literal>$tempnode</literal>
     </term>
     <listitem>
      <para>
       The temporary name of the device file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%M</literal>, <literal>$major</literal>
     </term>
     <listitem>
      <para>
       The major number of the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%m</literal>, <literal>$minor</literal>
     </term>
     <listitem>
      <para>
       The minor number of the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%s{<replaceable>ATTRIBUTE</replaceable>}</literal>,
     <literal>$attr{<replaceable>ATTRIBUTE</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       The value of a <filename>sysfs</filename> attribute (specified by
       <replaceable>ATTRIBUTE</replaceable>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%E{<replaceable>VARIABLE</replaceable>}</literal>,
     <literal>$env{<replaceable>VARIABLE</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       The value of an environment variable (specified by
       <replaceable>VARIABLE</replaceable>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%c</literal>, <literal>$result</literal>
     </term>
     <listitem>
      <para>
       The output of <envar>PROGRAM</envar>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%%</literal>
     </term>
     <listitem>
      <para>
       The <literal>%</literal> character.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>$$</literal>
     </term>
     <listitem>
      <para>
       The <literal>$</literal> character.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.udev.rules.match">
   <title>Using <systemitem class="service">udev</systemitem> Match Keys</title>
   <para>
    Match keys describe conditions that must be met before a
    <systemitem class="service">udev</systemitem> rule can be applied. The
    following match keys are available:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>ACTION</literal>
     </term>
     <listitem>
      <para>
       The name of the event action, for example, <literal>add</literal> or
       <literal>remove</literal> when adding or removing a device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEVPATH</literal>
     </term>
     <listitem>
      <para>
       The device path of the event device, for example,
       <literal>DEVPATH=/bus/pci/drivers/ipw3945</literal> to search for all
       events related to the ipw3945 driver.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>KERNEL</literal>
     </term>
     <listitem>
      <para>
       The internal (kernel) name of the event device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>SUBSYSTEM</literal>
     </term>
     <listitem>
      <para>
       The subsystem of the event device, for example,
       <literal>SUBSYSTEM=usb</literal> for all events related to USB devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ATTR{<replaceable>FILENAME</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       <systemitem class="filesystem">sysfs</systemitem> attributes of the
       event device. To match a string contained in the
       <filename>vendor</filename> attribute file name, you could use
       <literal>ATTR{vendor}=="On[sS]tream"</literal>, for example.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>KERNELS</literal>
     </term>
     <listitem>
      <para>
       Let <systemitem class="service">udev</systemitem> search the device path
       upwards for a matching device name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>SUBSYSTEMS</literal>
     </term>
     <listitem>
      <para>
       Let <systemitem class="service">udev</systemitem> search the device path
       upwards for a matching device subsystem name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DRIVERS</literal>
     </term>
     <listitem>
      <para>
       Let <systemitem class="service">udev</systemitem> search the device path
       upwards for a matching device driver name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ATTRS{<replaceable>FILENAME</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       Let <systemitem class="service">udev</systemitem> search the device path
       upwards for a device with matching
       <systemitem class="filesystem">sysfs</systemitem> attribute values.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ENV{<replaceable>KEY</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       The value of an environment variable, for example,
       <literal>ENV{ID_BUS}="ieee1394</literal> to search for all events
       related to the FireWire bus ID.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>PROGRAM</literal>
     </term>
     <listitem>
      <para>
       Let <systemitem class="service">udev</systemitem> execute an external
       program. To be successful, the program must return with exit code zero.
       The program's output, printed to STDOUT, is available to the
       <literal>RESULT</literal> key.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>RESULT</literal>
     </term>
     <listitem>
      <para>
       Match the output string of the last <literal>PROGRAM</literal> call.
       Either include this key in the same rule as the
       <literal>PROGRAM</literal> key or in a later one.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.udev.rules.assign">
   <title>Using <systemitem class="service">udev</systemitem> Assign Keys</title>
   <para>
    In contrast to the match keys described above, assign keys do not describe
    conditions that must be met. They assign values, names and actions to the
    device nodes maintained by <systemitem class="service">udev</systemitem>.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>NAME</literal>
     </term>
     <listitem>
      <para>
       The name of the device node to be created. After a rule has set a node
       name, all other rules with a <literal>NAME</literal> key for this node
       are ignored.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>SYMLINK</literal>
     </term>
     <listitem>
      <para>
       The name of a symbolic link related to the node to be created. Multiple
       matching rules can add symbolic links to be created with the device
       node. You can also specify multiple symbolic links for one node in one
       rule using the space character to separate the symbolic link names.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>OWNER, GROUP, MODE</literal>
     </term>
     <listitem>
      <para>
       The permissions for the new device node. Values specified here overwrite
       anything that has been compiled in.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ATTR{<replaceable>KEY</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       Specify a value to be written to a
       <systemitem class="filesystem">sysfs</systemitem> attribute of the event
       device. If the <literal>==</literal> operator is used, this key is also
       used to match against the value of a
       <systemitem class="filesystem">sysfs</systemitem> attribute.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ENV{<replaceable>KEY</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       Tell <systemitem class="service">udev</systemitem> to export a variable
       to the environment. If the <literal>==</literal> operator is used, this
       key is also used to match against an environment variable.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>RUN</literal>
     </term>
     <listitem>
      <para>
       Tell <systemitem class="service">udev</systemitem> to add a program to
       the list of programs to be executed for this device. Keep in mind to
       restrict this to very short tasks to avoid blocking further events for
       this device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>LABEL</literal>
     </term>
     <listitem>
      <para>
       Add a label where a <literal>GOTO</literal> can jump to.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>GOTO</literal>
     </term>
     <listitem>
      <para>
       Tell <systemitem class="service">udev</systemitem> to skip several
       rules and continue with the one that carries the label referenced by the
       <literal>GOTO</literal> key.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>IMPORT{<replaceable>TYPE</replaceable>}</literal>
     </term>
     <listitem>
      <para>
       Load variables into the event environment such as the output of an
       external program. <systemitem class="service">udev</systemitem> imports
       variables of several types. If no type is specified,
       <systemitem class="service">udev</systemitem> tries to determine the
       type itself based on the executable bit of the file permissions.
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         <literal>program</literal> tells
         <systemitem class="service">udev</systemitem> to execute an external
         program and import its output.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>file</literal> tells
         <systemitem class="service">udev</systemitem> to import a text file.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>parent</literal> tells
         <systemitem class="service">udev</systemitem> to import the stored
         keys from the parent device.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>WAIT_FOR_SYSFS</literal>
     </term>
     <listitem>
      <para>
       Tells <systemitem class="service">udev</systemitem> to wait for the
       specified <systemitem class="filesystem">sysfs</systemitem> file to be
       created for a certain device. For example,
       <literal>WAIT_FOR_SYSFS="ioerr_cnt"</literal> informs
       <systemitem class="service">udev</systemitem> to wait until the
       <filename>ioerr_cnt</filename> file has been created.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>OPTIONS</literal>
     </term>
     <listitem>
      <para>
       The <literal>OPTION</literal> key may have several values:
      </para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para>
         <literal>last_rule</literal> tells
         <systemitem class="service">udev</systemitem> to ignore all later
         rules.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>ignore_device</literal> tells
         <systemitem class="service">udev</systemitem> to ignore this event
         completely.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>ignore_remove</literal> tells
         <systemitem class="service">udev</systemitem> to ignore all later
         remove events for the device.
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>all_partitions</literal> tells
         <systemitem class="service">udev</systemitem> to create device nodes
         for all available partitions on a block device.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.udev.persdev">
  <title>Persistent Device Naming</title>

  <para>
   The dynamic device directory and the
   <systemitem class="service">udev</systemitem> rules infrastructure make it
   possible to provide stable names for all disk devices&mdash;regardless of
   their order of recognition or the connection used for the device. Every
   appropriate block device the kernel creates is examined by tools with
   special knowledge about certain buses, drive types or file systems. Along
   with the dynamic kernel-provided device node name,
   <systemitem class="service">udev</systemitem> maintains classes of
   persistent symbolic links pointing to the device:
  </para>

<screen>/dev/disk
|-- by-id
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B -&gt; ../../sda
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B-part1 -&gt; ../../sda1
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B-part6 -&gt; ../../sda6
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B-part7 -&gt; ../../sda7
|   |-- usb-Generic_STORAGE_DEVICE_02773 -&gt; ../../sdd
|   `-- usb-Generic_STORAGE_DEVICE_02773-part1 -&gt; ../../sdd1
|-- by-label
|   |-- Photos -&gt; ../../sdd1
|   |-- SUSE10 -&gt; ../../sda7
|   `-- devel -&gt; ../../sda6
|-- by-path
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0 -&gt; ../../sda
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0-part1 -&gt; ../../sda1
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0-part6 -&gt; ../../sda6
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0-part7 -&gt; ../../sda7
|   |-- pci-0000:00:1f.2-scsi-1:0:0:0 -&gt; ../../sr0
|   |-- usb-02773:0:0:2 -&gt; ../../sdd
|   |-- usb-02773:0:0:2-part1 -&gt; ../../sdd1
`-- by-uuid
    |-- 159a47a4-e6e6-40be-a757-a629991479ae -&gt; ../../sda7
    |-- 3e999973-00c9-4917-9442-b7633bd95b9e -&gt; ../../sda6
    `-- 4210-8F8C -&gt; ../../sdd1</screen>
 </sect1>
 <sect1 xml:id="sec.udev.files">
  <title>Files used by <systemitem class="service">udev</systemitem></title>

  <variablelist>
   <varlistentry>
    <term><filename>/sys/*</filename>
    </term>
    <listitem>
     <para>
      Virtual file system provided by the Linux kernel, exporting all currently
      known devices. This information is used by
      <systemitem class="service">udev</systemitem> to create device nodes in
      <filename>/dev</filename>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/dev/*</filename>
    </term>
    <listitem>
     <para>
      Dynamically created device nodes and static content created with
      systemd-tmpfiles; for more information, see the
      <systemitem>systemd-tmpfiles(8)</systemitem> man page.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The following files and directories contain the crucial elements of the
   <systemitem class="service">udev</systemitem> infrastructure:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/etc/udev/udev.conf</filename>
    </term>
    <listitem>
     <para>
      Main <systemitem class="service">udev</systemitem> configuration file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/udev/rules.d/*</filename>
    </term>
    <listitem>
     <para>
      <systemitem class="service">udev</systemitem> event matching rules.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/lib/tmpfiles.d/</filename> and
    <filename>/etc/tmpfiles.d/</filename>
    </term>
    <listitem>
     <para>
      Responsible for static <filename>/dev</filename> content.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/lib/udev/*</filename>
    </term>
    <listitem>
     <para>
      Helper programs called from <systemitem class="service">udev</systemitem>
      rules.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.udev.moreinfo">
  <title>For More Information</title>

  <para>
   For more information about the <systemitem class="service">udev</systemitem>
   infrastructure, refer to the following man pages:
  </para>

  <variablelist>
   <varlistentry>
    <term><systemitem class="service">udev</systemitem>
    </term>
    <listitem>
     <para>
      General information about <systemitem class="service">udev</systemitem>,
      keys, rules and other important configuration issues.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>udevadm</command>
    </term>
    <listitem>
     <para>
      <command>udevadm</command> can be used to control the runtime behavior of
      <systemitem class="service">udev</systemitem>, request kernel events,
      manage the event queue and provide simple debugging mechanisms.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem class="daemon">udevd</systemitem>
    </term>
    <listitem>
     <para>
      Information about the <systemitem class="daemon">udev</systemitem> event
      managing daemon.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
