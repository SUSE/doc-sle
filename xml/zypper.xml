<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1 version="5.0" xml:id="sec.zypper"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Using Zypper</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  Zypper is a command line package manager for installing, updating and
  removing packages as well as for managing repositories. It is especially
  useful for accomplishing remote software management tasks or managing
  software from shell scripts.
 </para>

 <sect2 xml:id="sec.zypper.usage">
  <title>General Usage</title>
  <para>
   The general syntax of Zypper is:
  </para>
<screen>zypper <option>[--global-options]</option>&nbsp;<replaceable>COMMAND</replaceable>&nbsp;<option>&nbsp;[--command-options]</option>&nbsp;<option>[arguments]</option></screen>
<!-- Note that Zypper distinguishes between "commands" and "subcommands" in
    ways which are inconsistent with our other documentation:
    + A "command" is a preinstalled functionality of Zypper ("install",
      "remove").
    + A "subcommand" is an executable that users can put into a special path and
      can be run via Zypper.
    - sknorr, 2016-04-21 -->
  <para>
   The components enclosed in brackets are not required. See <command>zypper
   help</command> for a list of general options and all commands. To get help
   for a specific command, type <command>zypper help</command>
   <replaceable>COMMAND</replaceable>.
  </para>
  <variablelist>
   <varlistentry>
    <term>Zypper Commands</term>
    <listitem>
     <para>
      The simplest way to execute Zypper is to type its name, followed by a
      command. For example, to apply all needed patches to the system, use:
     </para>
<screen>&prompt.sudo;zypper patch</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Global Options</term>
    <listitem>
     <para>
      Additionally, you can choose from one or more global options by typing
      them immediately before the command:
     </para>
<screen>&prompt.sudo;zypper --non-interactive patch</screen>
     <para>
      In the above example, the option <option>--non-interactive</option> means
      that the command is run without asking anything (automatically applying
      the default answers).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Command-Specific Options</term>
    <listitem>
     <para>
      To use options that are specific to a particular command, type them
      immediately after the command:
     </para>
<screen>&prompt.sudo;zypper patch --auto-agree-with-licenses</screen>
     <para>
      In the above example, <option>--auto-agree-with-licenses</option> is used
      to apply all needed patches to a system without you being asked to
      confirm any licenses. Instead, license will be accepted automatically.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Arguments</term>
    <listitem>
     <para>
      Some commands require one or more arguments. For example, when using the
      command <command>install</command>, you need to specify which package or
      which packages you want to <emphasis>install</emphasis>:
     </para>
<screen>&prompt.sudo;zypper install mplayer</screen>
     <para>
      Some options also require a single argument. The following command will
      list all known patterns:
     </para>
<screen>&prompt.user;zypper search -t pattern</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   You can combine all of the above. For example, the following command will
   install the <package>mc</package> and <package>vim</package> packages from
   the <literal>factory</literal> repository while being verbose:
  </para>
<screen>&prompt.sudo;zypper -v install --from factory mc vim</screen>
  <para>
   The <option>--from</option> option makes sure to keep all repositories
   enabled (for solving any dependencies) while requesting the package from the
   specified repository.
  </para>
  <para>
   Most Zypper commands have a <literal>dry-run</literal> option that does a
   simulation of the given command. It can be used for test purposes.
  </para>
<screen>&prompt.sudo;zypper remove --dry-run MozillaFirefox</screen>
  <para>
   Zypper supports the global <option>--userdata
   <replaceable>STRING</replaceable></option> option. You can specify a string
   with this option, which gets written to Zypper's log files and plug-ins
   (such as the Btrfs plug-in). It can be used to mark and identify
   transactions in log files.
  </para>
<screen>&prompt.sudo;zypper --userdata <replaceable>STRING</replaceable> patch</screen>
 </sect2>

 <sect2 xml:id="sec.zypper.softman">
  <title>Installing and Removing Software with Zypper</title>
  <para>
   To install or remove packages, use the following commands:
  </para>
<screen>&prompt.sudo;zypper install <replaceable>PACKAGE_NAME</replaceable>
sudo zypper remove <replaceable>PACKAGE_NAME</replaceable></screen>
<!-- fate#304459 -->
  <warning>
   <title>Do Not Remove Mandatory System Packages</title>
   <para>
    Do not remove mandatory system packages like
    <package>glibc</package>
    ,
    <package>zypper</package>
    ,
    <package>kernel</package>
    . If they are removed, the system can become unstable or stop working
    altogether.
   </para>
  </warning>
  <sect3 xml:id="sec.zypper.selectpackage">
   <title>Selecting Which Packages to Install or Remove</title>
   <para>
    There are various ways to address packages with the commands
    <command>zypper install</command> and <command>zypper remove</command>.
   </para>
   <variablelist>
    <varlistentry>
     <term>By Exact Package Name</term>
     <listitem>
<screen>&prompt.sudo;zypper install MozillaFirefox</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By Exact Package Name and Version Number</term>
     <listitem>
<screen>&prompt.sudo;zypper install MozillaFirefox-52.2</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By Repository Alias and Package Name</term>
     <listitem>
<screen>&prompt.sudo;zypper install mozilla:MozillaFirefox</screen>
      <para>
       Where <literal>mozilla</literal> is the alias of the repository from
       which to install.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By Package Name Using Wild Cards</term>
     <listitem>
      <para>
       You can select all packages that have names starting or ending with a
       certain string. Use wild cards with care, especially when removing
       packages. The following command will install all packages starting with
       <quote>Moz</quote>:
      </para>
<screen>&prompt.sudo;zypper install 'Moz*'</screen>
      <tip>
       <title>Removing all <filename>-debuginfo</filename> Packages</title>
       <para>
        When debugging a problem, you sometimes need to temporarily install a
        lot of <filename>-debuginfo</filename> packages which give you more
        information about running processes. After your debugging session
        finishes and you need to clean the environment, run the following:
       </para>
<screen>&prompt.sudo;zypper remove '*-debuginfo'</screen>
      </tip>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By Capability</term>
     <listitem>
      <para>
       For example, if you want to install a Perl module without knowing the
       name of the package, capabilities come in handy:
      </para>
<screen>&prompt.sudo;zypper install firefox</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By Capability, Hardware Architecture, or Version</term>
     <listitem>
      <para>
       Together with a capability, you can specify a hardware architecture and
       a version:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         The name of the desired hardware architecture is appended to the
         capability after a full stop. For example, to specify the &x86-64;
         architectures (which in Zypper is named <literal>x86_64</literal>),
         use:
        </para>
<screen>&prompt.sudo;zypper install 'firefox.x86_64'</screen>
       </listitem>
       <listitem>
        <para>
         Versions must be appended to the end of the string and must be
         preceded by an operator: <literal>&lt;</literal> (lesser than),
         <literal>&lt;=</literal> (lesser than or equal), <literal>=</literal>
         (equal), <literal>&gt;=</literal> (greater than or equal),
         <literal>&gt;</literal> (greater than).
        </para>
<screen>&prompt.sudo;zypper install 'firefox&gt;=52.2'</screen>
       </listitem>
       <listitem>
        <para>
         You can also combine a hardware architecture and version requirement:
        </para>
<screen>&prompt.sudo;zypper install 'firefox.x86_64&gt;=52.2'</screen>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By Path to the RPM file</term>
     <listitem>
      <para>
       You can also specify a local or remote path to a package:
      </para>
<screen>&prompt.sudo;zypper install /tmp/install/MozillaFirefox.rpm
&prompt.sudo;zypper install http://download.&exampledomain;/MozillaFirefox.rpm</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
  <sect3 xml:id="sec.zypper.combineinstall">
   <title>Combining Installation and Removal of Packages</title>
   <para>
    To install and remove packages simultaneously, use the
    <literal>+/-</literal> modifiers. To install
    <package>emacs</package>
    and simultaneously remove
    <package>vim</package>
    , use:
   </para>
<screen>&prompt.sudo;zypper install emacs -vim</screen>
   <para>
    To remove
    <package>emacs</package>
    and simultaneously install
    <package>vim</package>
    , use:
   </para>
<screen>&prompt.sudo;zypper remove emacs +vim</screen>
   <para>
    To prevent the package name starting with the <literal>-</literal> being
    interpreted as a command option, always use it as the second argument. If
    this is not possible, precede it with <literal>--</literal>:
   </para>
<screen>&prompt.sudo;zypper install -emacs +vim       # Wrong
&prompt.sudo;zypper install vim -emacs        # Correct
&prompt.sudo;zypper install -- -emacs +vim    # Correct
&prompt.sudo;zypper remove emacs +vim         # Correct</screen>
  </sect3>
  <sect3 xml:id="sec.zypper.clean">
   <title>Cleaning Up Dependencies of Removed Packages</title>
   <para>
    If (together with a certain package), you automatically want to remove any
    packages that become unneeded after removing the specified package, use the
    <option>--clean-deps</option> option:
   </para>
<screen>&prompt.sudo;zypper rm <replaceable>PACKAGE_NAME</replaceable> --clean-deps</screen>
  </sect3>
  <sect3 xml:id="sec.zypper.script">
   <title>Using Zypper in Scripts</title>
   <para>
    By default, Zypper asks for a confirmation before installing or removing a
    selected package, or when a problem occurs. You can override this behavior
    using the <option>--non-interactive</option> option. This option must be
    given before the actual command (<command>install</command>,
    <command>remove</command>, and <command>patch</command>), as can be seen in
    the following:
   </para>
<screen>&prompt.sudo;zypper <option>--non-interactive</option> install <replaceable>PACKAGE_NAME</replaceable></screen>
   <para>
    This option allows the use of Zypper in scripts and cron jobs.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.softman.sources">
   <title>Installing or Downloading Source Packages</title>
   <para>
    To install the corresponding source package of a package, use:
   </para>
<screen>&prompt.user;zypper source-install <replaceable>PACKAGE_NAME</replaceable></screen>
   <para>
    When executed as &rootuser;, the default location to install source
    packages is <filename>/usr/src/packages/</filename> and
    <filename>~/rpmbuild</filename> when run as user. These values can be
    changed in your local <command>rpm</command> configuration.
   </para>
   <para>
    This command will also install the build dependencies of the specified
    package. If you do not want this, add the switch <literal>-D</literal>:
   </para>
<screen>&prompt.sudo;zypper source-install -D <replaceable>PACKAGE_NAME</replaceable></screen>
   <para>
    To install only the build dependencies use <literal>-d</literal>.
   </para>
<screen>&prompt.sudo;zypper source-install -d <replaceable>PACKAGE_NAME</replaceable></screen>
   <para>
    Of course, this will only work if you have the repository with the source
    packages enabled in your repository list (it is added by default, but not
    enabled). See <xref linkend="sec.zypper.instrepo"/> for details on
    repository management.
   </para>
   <para>
    A list of all source packages available in your repositories can be
    obtained with:
   </para>
<screen>&prompt.user;zypper search -t srcpackage</screen>
   <para>
    You can also download source packages for all installed packages to a local
    directory. To download source packages, use:
   </para>
<screen>&prompt.user;zypper source-download</screen>
   <para>
    The default download directory is
    <filename>/var/cache/zypper/source-download</filename>. You can change it
    using the <option>--directory</option> option. To only show missing or
    extraneous packages without downloading or deleting anything, use the
    <option>--status</option> option. To delete extraneous source packages, use
    the <option>--delete</option> option. To disable deleting, use the
    <option>--no-delete</option> option.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.softman.pluscontent">
   <title>Installing Packages from Disabled Repositories</title>
   <para>
    Normally you can only install or refresh packages from enabled
    repositories. The <option>--plus-content
    <replaceable>TAG</replaceable></option> option helps you specify
    repositories to be refreshed, temporarily enabled during the current Zypper
    session, and disabled after it completes.
   </para>
   <para>
    For example, to enable repositories that may provide additional
    <filename>-debuginfo</filename> or <filename>-debugsource</filename>
    packages, use <option>--plus-content debug</option>. You can specify this
    option multiple times.
   </para>
   <para>
    To temporarily enable such 'debug' repositories to install a specific
    <filename>-debuginfo</filename> package, use the option as follows:
   </para>
   <screen>&prompt.sudo;zypper --plus-content debug \
   install "debuginfo(build-id)=eb844a5c20c70a59fc693cd1061f851fb7d046f4"</screen>
   <para>
    The <literal>build-id</literal> string is reported by
    <command>gdb</command> for missing debuginfo packages.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.softman.util">
   <title>Utilities</title>
   <para>
    To verify whether all dependencies are still fulfilled and to repair
    missing dependencies, use:
   </para>
<screen>&prompt.user;zypper verify</screen>
   <para>
    In addition to dependencies that must be fulfilled, some packages
    <quote>recommend</quote> other packages. These recommended packages are
    only installed if actually available and installable. In case recommended
    packages were made available after the recommending package has been
    installed (by adding additional packages or hardware), use the following
    command:
   </para>
<screen>&prompt.sudo;zypper install-new-recommends</screen>
   <para>
    This command is very useful after plugging in a Web cam or Wi-Fi device. It
    will install drivers for the device and related software, if available.
    Drivers and related software are only installable if certain hardware
    dependencies are fulfilled.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="sec.zypper.softup">
  <title>Updating Software with Zypper</title>
  <para>
   There are three different ways to update software using Zypper: by
   installing patches, by installing a new version of a package or by updating
   the entire distribution. The latter is achieved with <command>zypper
   dist-upgrade</command>. Upgrading &productname; is discussed in
   <phrase os="sles;sled"><xref linkend="cha.update.sle"/></phrase>
   <phrase os="osuse"><xref linkend="cha.update.osuse"/></phrase>.
  </para>
  <sect3 xml:id="sec.zypper.softup.patch">
   <title>Installing All Needed Patches</title>
   <para>
    To install all officially released patches that apply to your system, run:
   </para>
<screen>&prompt.sudo;zypper patch</screen>
   <para>
    All patches available from repositories configured on your computer are
    checked for their relevance to your installation. If they are relevant (and
    not classified as <literal>optional</literal> or
    <literal>feature</literal>), they are installed immediately.
    <phrase os="sles;sled">Note that the official update repository is only
    available after registering your &productname; installation.</phrase>
   </para>
   <para>
    If a patch that is about to be installed includes changes that require a
    system reboot, you will be warned before.
   </para>
   <para>
    The plain <command>zypper patch</command> command does not apply patches
    from third party repositories. To update also the third party repositories,
    use the <literal>with-update</literal> command option as follows:
   </para>
<screen>&prompt.sudo;zypper patch --with update</screen>
<!--taroth 2016-07-04: fate#320447-->
   <para>
    To install also optional patches, use:
   </para>
<screen>&prompt.sudo;zypper patch --with-optional</screen>
   <remark>
    The structure here is a bit unfortunate: We explain how to use the
    --cve/--bugzilla options in more detail below ("Listing Patches").
    However, the first bit people get is the very brief intro immediately below.
    Not sure whether to replicate all the information from "Listing Patches"
    here.
    - sknorr, 2016-04-25
   </remark>
   <para>
    To install all patches relating to a specific Bugzilla issue, use:
   </para>
<screen>&prompt.sudo;zypper patch --bugzilla=<replaceable>NUMBER</replaceable></screen>
   <para>
    To install all patches relating to a specific CVE database entry, use:
   </para>
<screen>&prompt.sudo;zypper patch --cve=<replaceable>NUMBER</replaceable></screen>
   <para>
    For example, to install a security patch with the CVE number
    <literal>CVE-2010-2713</literal>, execute:
   </para>
<screen>&prompt.sudo;zypper patch --cve=CVE-2010-2713</screen>
   <para>
    To install only patches which affect Zypper and the package management
    itself, use:
   </para>
<screen>&prompt.sudo;zypper patch --updatestack-only</screen>
   <para>
    Bear in mind that other command options that would also update other
    repositories will be dropped if you use the
    <literal>updatestack-only</literal> command option.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.softup.listpatch">
   <title>Listing Patches</title>
   <para>
    To find out whether patches are available, Zypper allows viewing the
    following information:
   </para>
   <variablelist>
    <varlistentry>
     <term>Number of Needed Patches</term>
     <listitem>
      <para>
       To list the number of needed patches (patches that apply to your system
       but are not yet installed), use <command>patch-check</command>:
      </para>
<screen>&prompt.user;zypper patch-check
Loading repository data...
Reading installed packages...
5 patches needed (1 security patch)</screen>
      <para>
       This command can be combined with the
       <option>--updatestack-only</option> option to list only the patches
       which affect Zypper and the package management itself.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>List of Needed Patches</term>
     <listitem>
      <para>
       To list all needed patches (patches that apply to your system but are
       not yet installed), use <command>list-patches</command>:
      </para>
<screen os="sles;sled"><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper list-patches
Loading repository data...
Reading installed packages...

Repository     | Name        | Version | Category | Status  | Summary
---------------+-------------+---------+----------+---------+---------
SLES12-Updates | SUSE-2014-8 | 1       | security | needed  | openssl: Update for OpenSSL
</screen>
<screen os="osuse"><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper list-patches
Repository | Name              | Category | Severity | Interactive | Status | S>
-----------+-------------------+----------+----------+-------------+--------+-->
Update     | openSUSE-2017-828 | security | moderate | ---         | needed | S>

Found 1 applicable patch:
1 patch needed (1 security patch)</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>List of All Patches</term>
     <listitem>
      <para>
       To list all patches available for &productname;, regardless of whether
       they are already installed or apply to your installation, use
       <command>zypper patches</command>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    It is also possible to list and install patches relevant to specific
    issues. To list specific patches, use the <command>zypper
    list-patches</command> command with the following options:
   </para>
   <variablelist>
    <varlistentry>
     <term>By Bugzilla Issues</term>
     <listitem>
      <para>
       To list all needed patches that relate to Bugzilla issues, use the
       option <option>--bugzilla</option>.
      </para>
      <para>
       To list patches for a specific bug, you can also specify a bug number:
       <option>--bugzilla=<replaceable>NUMBER</replaceable></option>. To search
       for patches relating to multiple Bugzilla issues, add commas between the
       bug numbers, for example:
      </para>
<screen>&prompt.user;zypper list-patches --bugzilla=972197,956917</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>By CVE Number</term>
     <listitem>
      <para>
       To list all needed patches that relate to an entry in the CVE database
       (Common Vulnerabilities and Exposures), use the option
       <option>--cve</option>.
      </para>
      <para>
       To list patches for a specific CVE database entry, you can also specify
       a CVE number: <option>--cve=<replaceable>NUMBER</replaceable></option>.
       To search for patches relating to multiple CVE database entries, add
       commas between the CVE numbers, for example:
      </para>
<screen>&prompt.user;zypper list-patches --bugzilla=CVE-2016-2315,CVE-2016-2324</screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To list all patches regardless of whether they are needed, use the option
    <option>--all</option> additionally. For example, to list all patches with
    a CVE number assigned, use:
   </para>
<screen><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper list-patches --all --cve
Issue | No.           | Patch             | Category    | Severity  | Status
------+---------------+-------------------+-------------+-----------+----------
cve   | CVE-2015-0287 | SUSE-SLE-Module.. | recommended | moderate  | needed
cve   | CVE-2014-3566 | SUSE-SLE-SERVER.. | recommended | moderate  | not needed
[...]</screen>
  </sect3>
  <sect3 xml:id="sec.zypper.softup.update">
   <title>Installing New Package Versions</title>
   <para>
    If a repository contains only new packages, but does not provide patches,
    <command>zypper&nbsp;patch</command> does not show any effect. To update
    all installed packages with newer available versions (while maintaining
    system integrity), use:
   </para>
<screen>&prompt.sudo;zypper update</screen>
   <para>
    To update individual packages, specify the package with either the update
    or install command:
   </para>
<screen>&prompt.sudo;zypper update <replaceable>PACKAGE_NAME</replaceable>
sudo zypper install <replaceable>PACKAGE_NAME</replaceable></screen>
   <para>
    A list of all new installable packages can be obtained with the command:
   </para>
<screen>&prompt.user;zypper list-updates</screen>
   <para>
    Note that this command only lists packages that match the following
    criteria:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      has the same vendor like the already installed package,
     </para>
    </listitem>
    <listitem>
     <para>
      is provided by repositories with at least the same priority than the
      already installed package,
     </para>
    </listitem>
    <listitem>
     <para>
      is installable (all dependencies are satisfied).
     </para>
    </listitem>
   </itemizedlist>
   <para>
    A list of <emphasis>all</emphasis> new available packages (regardless
    whether installable or not) can be obtained with:
   </para>
<screen>&prompt.sudo;zypper list-updates --all</screen>
   <para>
    To find out why a new package cannot be installed, use the <command>zypper
    install</command> or <command>zypper update</command> command as described
    above.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.softup.orphaned">
   <title>Identifying Orphaned Packages</title>
   <para>
    Whenever you remove a repository from Zypper or upgrade your system, some
    packages can get in an <quote>orphaned</quote> state. These
    <emphasis>orphaned</emphasis> packages belong to no active repository
    anymore. The following command gives you a list of these:
   </para>
<screen>&prompt.sudo;zypper packages --orphaned</screen>
   <para>
    With this list, you can decide if a package is still needed or can be
    removed safely.
   </para>
  </sect3>
<!--taroth 2014-04-30: commenting the following content due to trello#42
    (https://trello.com/c/pyYJ7sQ1)

  <sect3 id="sec.zypper.softup.upgrade">
   <title>Upgrading to a New Product Version</title>
   <para>&suse; offers various tools to upgrade to a new product version.
    The scenario very much depends on how the system is registered and where it
    gets its repositories from. For more information, see <xref linkend="cha.update.sle"/>.
   </para>
   <para>
    To easily upgrade your installation to a new product version
    (for example, from &sls; 11 to
    &sls; 11 SP1, first adjust your repositories to match the
    current &productname; repositories. For details, refer to
    <xref
     linkend="sec.zypper.instrepo"/>. Then use the <command>zypper
    dist-upgrade</command> command with the required repositories. This
    command ensures that all packages will be installed from the
    repositories currently enabled. For detailed instructions, refer to
    <xref
     linkend="sec.update.zypper"/>.
   </para>
   <para>
    To restrict the distribution upgrade to packages from a certain
    repository while considering also the other repositories for satisfying
    dependencies, use the <option>-/-from</option> option and specify the
    repository by either its alias, its number or URI.
   </para>
   <note>
    <title>Differences between <command>zypper update</command> and <command>zypper dist-upgrade</command></title>
    <para>
     Choose <command>zypper update</command> to update packages to newer
     versions available for your product version while maintaining system
     integrity. <command>zypper update</command> will honor the following
     rules:
    </para>
    <simplelist>
     <member>no vendor changes</member>
     <member>no architecture changes</member>
     <member>no downgrades</member>
     <member>keep installed packages</member>
    </simplelist>
    <para>
     When executing <command>zypper dist-upgrade</command>, all packages
     will be installed from the repositories currently enabled. This rule is
     enforced, so packages might change vendor or architecture or even might
     get downgraded. All packages that have unfulfilled dependencies after
     the upgrade will be uninstalled.
    </para>
   </note>
  </sect3>-->
 </sect2>

 <sect2 xml:id="sec.zypper.ps">
  <title>Identifying Processes and Services Using Deleted Files</title>
  <para>
   When patching, updating or removing packages, there may be running processes
   on the system which continue to use files having been deleted by the update
   or removal. Use <command>zypper ps</command> to list processes using deleted
   files. In case the process belongs to a known service, the service name is
   listed, making it easy to restart the service. By default <command>zypper
   ps</command> shows a table:
  </para>
<screen><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper ps
PID   | PPID | UID | User  | Command      | Service      | Files
------+------+-----+-------+--------------+--------------+-------------------
814   | 1    | 481 | avahi | avahi-daemon | avahi-daemon | /lib64/ld-2.19.s->
      |      |     |       |              |              | /lib64/libdl-2.1->
      |      |     |       |              |              | /lib64/libpthrea->
      |      |     |       |              |              | /lib64/libc-2.19->
[...]</screen>
  <simplelist>
   <member><emphasis role="bold">PID</emphasis>: ID of the process
   </member>
   <member><emphasis role="bold">PPID</emphasis>: ID of the parent process
   </member>
   <member><emphasis role="bold">UID</emphasis>: ID of the user running the
    process
   </member>
   <member><emphasis role="bold">Login</emphasis>: Login name of the user
    running the process
   </member>
   <member><emphasis role="bold">Command</emphasis>: Command used to
    execute the process
   </member>
   <member><emphasis role="bold">Service</emphasis>: Service name (only if command
    is associated with a system service)
   </member>
   <member><emphasis role="bold">Files</emphasis>: The list of the deleted
    files
   </member>
  </simplelist>
  <para>
   The output format of <command>zypper ps</command> can be controlled as
   follows:
  </para>
  <variablelist>
   <varlistentry>
    <term><command>zypper ps</command><option>-s</option>
    </term>
    <listitem>
     <para>
      Create a short table not showing the deleted files.
     </para>
<screen><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper ps -s
PID   | PPID | UID  | User    | Command      | Service
------+------+------+---------+--------------+--------------
814   | 1    | 481  | avahi   | avahi-daemon | avahi-daemon
817   | 1    | 0    | root    | irqbalance   | irqbalance
1567  | 1    | 0    | root    | sshd         | sshd
1761  | 1    | 0    | root    | master       | postfix
1764  | 1761 | 51   | postfix | pickup       | postfix
1765  | 1761 | 51   | postfix | qmgr         | postfix
2031  | 2027 | 1000 | tux     | bash         |</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>zypper ps</command><option>-ss</option>
    </term>
    <listitem>
     <para>
      Show only processes associated with a system service.
     </para>
<screen>PID   | PPID | UID  | User    | Command      | Service
------+------+------+---------+--------------+--------------
814   | 1    | 481  | avahi   | avahi-daemon | avahi-daemon
817   | 1    | 0    | root    | irqbalance   | irqbalance
1567  | 1    | 0    | root    | sshd         | sshd
1761  | 1    | 0    | root    | master       | postfix
1764  | 1761 | 51   | postfix | pickup       | postfix
1765  | 1761 | 51   | postfix | qmgr         | postfix</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>zypper ps</command><option>-sss</option>
    </term>
    <listitem>
     <para>
      Only show system services using deleted files.
     </para>
<screen>avahi-daemon
irqbalance
postfix
sshd</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>zypper ps</command><option>--print "systemctl status
     %s"</option>
    </term>
    <listitem>
     <para>
      Show the commands to retrieve status information for services which might
      need a restart.
     </para>
<screen>systemctl status avahi-daemon
systemctl status irqbalance
systemctl status postfix
systemctl status sshd</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For more information about service handling refer to
   <xref
   linkend="cha.systemd"/>.
  </para>
 </sect2>

<!--taroth 2014-04-30: commenting the following content due to trello#42
  (https://trello.com/c/pyYJ7sQ1)-->

<!-- <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="zypper_upgrade.xml"/>-->

 <sect2 xml:id="sec.zypper.instrepo">
  <title>Managing Repositories with Zypper</title>
  <para>
   All installation or patch commands of Zypper rely on a list of known
   repositories. To list all repositories known to the system, use the command:
  </para>
<screen>&prompt.user;zypper repos</screen>
  <para>
   The result will look similar to the following output:
  </para>
  <example xml:id="ex.zypper.repos">
   <title>Zypper&mdash;List of Known Repositories</title>
<screen os="sles;sled"><?dbsuse-fo font-size="0.60em"?>&prompt.user;zypper repos
# | Alias        | Name          | Enabled | Refresh
--+--------------+---------------+---------+--------
1 | SLEHA-12-GEO | SLEHA-12-GEO  | Yes     | No
2 | SLEHA-12     | SLEHA-12      | Yes     | No
3 | SLES12       | SLES12        | Yes     | No</screen>
<screen os="osuse"><?dbsuse-fo font-size="0.60em"?>&prompt.user;zypper repos
#  | Alias                 | Name             | Enabled | GPG Check | Refresh
---+-----------------------+------------------+---------+-----------+--------
 1 | Leap-42.3-Main        | Main (OSS)       | Yes     | (r ) Yes  | Yes
 2 | Leap-42.3-Update      | Update (OSS)     | Yes     | (r ) Yes  | Yes
 3 | Leap-42.3-NOSS        | Main (NON-OSS)   | Yes     | (r ) Yes  | Yes
 4 | Leap-42.3-Update-NOSS | Update (NON-OSS) | Yes     | (r ) Yes  | Yes
[...]</screen>
  </example>
  <para>
   When specifying repositories in various commands, an alias, URI or
   repository number from the <command>zypper repos</command> command output
   can be used. A repository alias is a short version of the repository name
   for use in repository handling commands. Note that the repository numbers
   can change after modifying the list of repositories. The alias will never
   change by itself.
  </para>
  <para>
   By default, details such as the URI or the priority of the repository are
   not displayed. Use the following command to list all details:
  </para>
<screen>&prompt.user;zypper repos -d</screen>
  <sect3 xml:id="sec.zypper.instrepo.add">
   <title>Adding Repositories</title>
   <para>
    To add a repository, run
   </para>
<screen>&prompt.sudo;zypper addrepo <replaceable>URI</replaceable> <replaceable>ALIAS</replaceable></screen>
   <para>
    <replaceable>URI</replaceable> can either be an Internet repository, a
    network resource, a directory or a CD or DVD (see
    <link xlink:href="http://en.opensuse.org/openSUSE:Libzypp_URIs"/> for
    details). The <replaceable>ALIAS</replaceable> is a shorthand and unique
    identifier of the repository. You can freely choose it, with the only
    exception that it needs to be unique. Zypper will issue a warning if you
    specify an alias that is already in use.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.instrepo.refresh">
   <title>Refreshing Repositories</title>
   <para>
    <command>zypper</command> enables you to fetch changes in packages from
    configured repositories. To fetch the changes, run:
   </para>
<screen>&prompt.sudo;zypper refresh</screen>
   <note>
    <title>Default Behavior of <command>zypper</command></title>
    <para>
     By default, some commands perform <command>refresh</command>
     automatically, so you do not need to run the command explicitly.
    </para>
   </note>
   <para>
    The <command>refresh</command> command enables you to view changes also in
    disabled repositories, by using the <literal>--plus-content</literal>
    option:
   </para>
<screen>&prompt.sudo;zypper --plus-content refresh</screen>
   <para>
    This option fetches changes in repositories, but keeps the disabled
    repositories in the same state&mdash;disabled.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.instrepo.rm">
   <title>Removing Repositories</title>
   <para>
    To remove a repository from the list, use the command
    <command>zypper removerepo</command> together with the alias or number of
    the repository you want to delete. For example, to remove the repository
    <literal os="sles;sled">SLEHA-12-GEO</literal><literal
    os="osuse">Leap-42.3-NOSS</literal> from <xref linkend="ex.zypper.repos"/>,
    use one of the following commands:
   </para>
<screen os="sles;sled">&prompt.sudo;zypper removerepo 1
&prompt.sudo;zypper removerepo "SLEHA-12-GEO"</screen>
<screen os="osuse">&prompt.sudo;zypper removerepo 4
&prompt.sudo;zypper removerepo "Leap-42.3-NOSS"</screen>
  </sect3>
  <sect3 xml:id="sec.zypper.instrepo.mofify">
   <title>Modifying Repositories</title>
   <para>
    Enable or disable repositories with <command>zypper modifyrepo</command>.
    You can also alter the repository's properties (such as refreshing
    behavior, name or priority) with this command. The following command will
    enable the repository named <literal>updates</literal>, turn on
    auto-refresh and set its priority to 20:
   </para>
<screen>&prompt.sudo;zypper modifyrepo -er -p 20 'updates'</screen>
   <para>
    Modifying repositories is not limited to a single repository&mdash;you can
    also operate on groups:
   </para>
   <simplelist>
    <member><option>-a</option>: all repositories</member>
    <member><option>-l</option>: local repositories</member>
    <member><option>-t</option>: remote repositories</member>
    <member><option>-m <replaceable>TYPE</replaceable></option>: repositories
     of a certain type (where <replaceable>TYPE</replaceable> can be one of the
     following: <literal>http</literal>, <literal>https</literal>, <literal>ftp</literal>,
     <literal>cd</literal>, <literal>dvd</literal>, <literal>dir</literal>, <literal>file</literal>,
     <literal>cifs</literal>, <literal>smb</literal>, <literal>nfs</literal>, <literal>hd</literal>,
     <literal>iso</literal>) </member>
   </simplelist>
   <para>
    To rename a repository alias, use the <literal>renamerepo</literal>
    command. The following example changes the alias from <literal>Mozilla
    Firefox</literal> to <literal>firefox</literal>:
   </para>
<screen>&prompt.sudo;zypper renamerepo 'Mozilla Firefox' firefox</screen>
  </sect3>
 </sect2>

 <sect2 xml:id="sec.zypper.query">
  <title>Querying Repositories and Packages with Zypper</title>
  <para>
   Zypper offers various methods to query repositories or packages. To get
   lists of all products, patterns, packages or patches available, use the
   following commands:
  </para>
<screen>&prompt.user;zypper products
&prompt.user;zypper patterns
&prompt.user;zypper packages
&prompt.user;zypper patches</screen>
  <para>
   To query all repositories for certain packages, use
   <literal>search</literal>. To get information regarding particular packages,
   use the <literal>info</literal> command.
  </para>
  <sect3 xml:id="sec.zypper.query.search">
   <title>Searching for Software</title>
   <para>
    The <command>zypper search</command> command works on package names, or,
    optionally, on package summaries and descriptions. Strings wrapped in
    <literal>/</literal> are interpreted as regular expressions. By default,
    the search is not case-sensitive.
   </para>
   <variablelist>
    <varlistentry>
     <term>Simple search for a package name containing <literal>fire</literal>
     </term>
     <listitem>
<screen>&prompt.user;zypper search "fire"</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Simple search for the exact package <literal>MozillaFirefox</literal>
     </term>
     <listitem>
<screen>&prompt.user;zypper search --match-exact "MozillaFirefox"</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Also search in package descriptions and summaries</term>
     <listitem>
<screen>&prompt.user;zypper search -d fire</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Only display packages not already installed</term>
     <listitem>
<screen>&prompt.user;zypper search -u fire</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Display packages containing the string <literal>fir</literal> not
    followed be <literal>e</literal>
     </term>
     <listitem>
<screen>&prompt.user;zypper se "/fir[^e]/"</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
  <sect3 xml:id="sec.zypper.query.what-provides">
   <title>Searching for Specific Capability</title>
   <para>
    To search for packages which provide a special capability, use the command
    <literal>what-provides</literal>. For example, if you want to know which
    package provides the Perl module <literal>SVN::Core</literal>, use the
    following command:
   </para>
<screen>&prompt.user;zypper what-provides 'perl(SVN::Core)'</screen>
   <para>
    The <literal>what-provides
    <replaceable>PACKAGE_NAME</replaceable></literal> is similar to
    <command>rpm -q --whatprovides</command>
    <replaceable>PACKAGE_NAME</replaceable>, but RPM is only able to query the
    RPM database (that is the database of all installed packages). Zypper, on
    the other hand, will tell you about providers of the capability from any
    repository, not only those that are installed.
   </para>
  </sect3>
  <sect3 xml:id="sec.zypper.query.info">
   <title>Showing Package Information</title>
   <para>
    To query single packages, use <command>info</command> with an exact package
    name as an argument. This displays detailed information about a package. In
    case the package name does not match any package name from repositories,
    the command outputs detailed information for non-package matches. If you
    request a specific type (by using the <literal>-t</literal> option) and the
    type does not exist, the command outputs other available matches but
    without detailed information.
   </para>
   <para>
    If you specify a source package, the command displays binary packages built
    from the source package. If you specify a binary package, the command
    outputs the source packages used to build the binary package.
   </para>
   <para>
    To also show what is required/recommended by the package, use the options
    <option>--requires</option> and <option>--recommends</option>:
   </para>
<screen>&prompt.user;zypper info --requires MozillaFirefox</screen>
  </sect3>
 </sect2>

 <sect2 xml:id="sec.zypper.lifecycle">
  <title>Showing Life Cycle Information</title>
  <para>
   &suse; products are generally supported for 10 years. Often, you
   can extend that standard life cycle by using the extended support
   offerings of &suse; which add 3 years of support.
   Depending on your product find the exact support life cycle at
   <link xlink:href="https://www.suse.com/lifecycle"/>.
  </para>
  <para>
   To check the lifecycle of your product and supported package, use the
   <command>zypper lifecycle</command> command as shown below:
  </para>
  <screen>&prompt.root;<command>zypper lifecycle</command>
Product end of support
Codestream: SUSE Linux Enterprise Server 15             2028-04-23
    SUSE Linux Enterprise Server 15                     n/a*

Module end of support
Basesystem Module                                       2021-07-31

No packages with end of support different from product.

*) See https://www.suse.com/lifecycle for latest information</screen>
 </sect2>

 <sect2 xml:id="sec.zypper.configure">
  <title>Configuring Zypper</title>
  <para>
   Zypper now comes with a configuration file, allowing you to permanently
   change Zypper's behavior (either system-wide or user-specific). For
   system-wide changes, edit <filename>/etc/zypp/zypper.conf</filename>. For
   user-specific changes, edit <filename>~/.zypper.conf</filename>. If
   <filename>~/.zypper.conf</filename> does not yet exist, you can use
   <filename>/etc/zypp/zypper.conf</filename> as a template: copy it to
   <filename>~/.zypper.conf</filename> and adjust it to your liking. Refer to
   the comments in the file for help about the available options.
  </para>
 </sect2>

 <sect2 xml:id="sec.zypper.trouble">
  <title>Troubleshooting</title>
  <para>
   If you have trouble accessing packages from configured repositories
   (for example, Zypper cannot find a certain package even though you know it
   exists in one the repositories), refreshing the repositories may help:
  </para>
<screen>&prompt.sudo;zypper refresh</screen>
  <para>
   If that does not help, try
  </para>
<screen>&prompt.sudo;zypper refresh -fdb</screen>
  <para>
   This forces a complete refresh and rebuild of the database, including a
   forced download of raw metadata.
  </para>
 </sect2>

 <sect2 xml:id="sec.zypper.rollback">
  <title>Zypper Rollback Feature on Btrfs File System</title>
  <para>
   If the Btrfs file system is used on the root partition and
   <command>snapper</command> is installed, Zypper automatically calls
   <command>snapper</command> when committing changes to the file system to
   create appropriate file system snapshots. These snapshots can be used to revert any changes made by Zypper. See <xref linkend="cha.snapper"/> for
   more information.
  </para>
 </sect2>

 <sect2 xml:id="sec.zypper.more">
  <title>For More Information</title>
  <para>
   For more information on managing software from the command line, enter
   <command>zypper help</command>, <command>zypper help&nbsp;</command>
   <replaceable>COMMAND</replaceable> or refer to the
   <command>zypper(8)</command> man page. For a complete and detailed command
   reference, <literal>cheat sheets</literal> with the most important
   commands, and information on how to use Zypper in scripts and applications,
   refer to <link xlink:href="http://en.opensuse.org/SDB:Zypper_usage"/>. A
   list of software changes for the latest &productname; version can be found
   at <link xlink:href="http://en.opensuse.org/openSUSE:Zypper versions"/>.
  </para>
 </sect2>
</sect1>
