<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="apparmor_changehat.xml" version="5.0" xml:id="cha-apparmor-hat">
 <title>使用 ChangeHat 构建 Web 应用程序的配置文件</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
	<dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  <phrase>AppArmor®</phrase> 配置文件表示单个程序实例或进程的安全策略。它适用于一个可执行程序，但是，如果该程序的一部分需要与其它部分不同的访问权限，该程序可以<quote>变换帽子</quote>以使用有别于主程序访问权限的安全环境。这称作<emphasis>帽子</emphasis>或<emphasis>子配置文件</emphasis>。
 </para>
 <para>
  ChangeHat 使程序能够在 <phrase>AppArmor</phrase> 配置文件内变成<emphasis>帽子</emphasis>或从帽子变成程序。这样您就可以定义比进程更细级别的安全性。此功能要求您将各应用程序配置为<quote>感知 ChangeHat</quote>，也就是说，将其修改为可以在应用程序执行期间的特定时间向 <phrase>AppArmor</phrase> 模块发出转换安全域的请求。Apache Web 服务器就是一款 ChangeHat 感知型应用程序。
 </para>
 <para>
  一个配置文件可以有任意数目的子配置文件，但总共只能有两个级别：子配置文件不能有其他子配置文件。子配置文件是作为单独的配置文件编写的。其名称由包含配置文件的名称后接子配置文件名称构成，两者之间以 <literal>^</literal>^ 分隔。
 </para>
 <para>
  子配置文件可存储在父配置文件所在的同一个文件中，也可存储在不同的文件中。在包含许多帽子的站点上，建议采用后一种存储方式 — 它使策略缓存能够在帽子级别处理更改。如果所有帽子都位于父配置文件所在的同一文件中，则必须重新编译父配置文件和所有帽子。
 </para>
 <para>
  要用作帽子的外部子配置文件必须以单词 <literal>hat</literal> 或字符 <literal>^</literal>^ 开头。
 </para>
 <para>
  下面两个子配置文件<emphasis>不能</emphasis>用作帽子：
 </para>
<screen>/foo//bar { }</screen>
 <para>
  或
 </para>
<screen>profile /foo//bar { }</screen>
 <para>
  而下面两个子配置文件将被视为帽子：
 </para>
<screen>^/foo//bar { }</screen>
 <para>
  或
 </para>
<screen>hat /foo//bar { } # this syntax is not highlighted in vim</screen>
 <para>
  帽子的安全性比完整配置文件的安全性要弱得多。攻击者有可能能够通过利用程序中特定类型的 bug 从帽子中逃脱并进入包含配置文件。这是因为，帽子的安全性由包含进程处理的某个机密密钥所决定，而帽子中运行的代码对该密钥不得拥有访问权限。因此，change_hat 在应用程序服务器中的作用最大。在这些服务器中，某个语言解释器（例如 PERL、PHP 或 Java）会隔离代码片段，以便防止这些代码直接访问包含进程的内存。
 </para>
 <para>
  本章的其余内容将介绍如何在 Apache 中使用 change_hat 来包含通过 <literal>mod_perl</literal> 和 <literal>mod_php</literal> 运行的 Web 服务器组件。通过提供与<xref linkend="sec-apparmor-hat-config-directives"/>中介绍的 <literal>mod_apparmor</literal> 类似的应用程序模块，可以对任意应用程序服务器使用类似的方法。
 </para>
 <tip>
  <title>更多信息</title>
  <para>
   有关更多信息，请参见 <command>change_hat</command> 手册页。
  </para>
 </tip>
 <sect1 xml:id="sec-apparmor-hat-config" role="General">
  <title>配置 Apache 以使用 <systemitem>mod_apparmor</systemitem></title>

  <para>
   <phrase>AppArmor</phrase> 为 Apache 程序提供 <literal>mod_apparmor</literal> 模块（<systemitem class="resource">apache2-mod-apparmor</systemitem> 软件包）。此模块使 Apache Web 服务器能够感知 ChangeHat。请连同 Apache 一起安装此模块。
  </para>

  <para>
   当 Apache 可感知 ChangeHat 后，便会检查以下自定义的 <phrase>AppArmor</phrase> 安全配置文件，检查的顺序为向其收到的各 URI 请求指定的顺序。
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     URI 特定的帽子。例如，, <filename>^www_app_name/templates/classic/images/bar_left.gif</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>DEFAULT_URI</literal>
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>HANDLING_UNTRUSTED_INPUT</literal>
    </para>
   </listitem>
  </itemizedlist>

  <note>
   <title>Apache 配置</title>
   <para>
    如果您安装 <systemitem class="resource">apache2-mod-apparmor</systemitem>，请确保启用该模块，然后执行以下命令重启动 Apache：
   </para>
<screen><prompt>&gt; </prompt>a2enmod apparmor &amp;&amp; sudo systemctl reload apache2</screen>
  </note>

  <para>
   Apache 的配置方式是在纯文本配置文件中放置指令。主配置文件为 <filename>/etc/apache2/httpd.conf</filename>。编译 Apache 时，您可以指明此文件的位置。您可以将指令放置在这些配置文件的任一个中以改变 Apache 的行为方式。对主配置文件进行更改后，需使用 <command>sudo systemctl reload apache2</command> 重新装载 Apache，以便识别更改。
  </para>

  <sect2 xml:id="sec-apparmor-hat-config-vhost">
   <title>虚拟主机指令</title>
   <para>
    &lt;VirtualHost&gt; 和 &lt;/VirtualHost&gt; 指令用于封装一组仅应用于特定虚拟主机的指令。有关 Apache 虚拟主机指令的详细信息，请参见 <link xlink:href="http://httpd.apache.org/docs/2.4/en/mod/core.html#virtualhost"/>。
   </para>
   <para>
    特定于 ChangeHat 的配置关键字为 <literal>AADefaultHatName</literal>。其用法与 <literal>AAHatName</literal> 类似，例如 <literal>AADefaultHatName
    My_Funky_Default_Hat</literal>。
   </para>
   <para>
    您可以使用此关键字来指定用于虚拟主机和其他 Apache 服务器指令的默认帽子，这样便可对不同的虚拟主机使用不同的默认值。<literal>AAHatName</literal> 指令可以覆盖此关键字，仅当不存在匹配的 <literal>AAHatName</literal> 或者不存在 URI 所命名的帽子时，才检查此关键字。如果 <literal>AADefaultHatName</literal> 帽子不存在，它将回退到 <literal>DEFAULT_URI</literal> 帽子（如果存在）。
   </para>
   <para>
    如果不存在匹配的帽子，则返回到<quote>父</quote> Apache 帽子。
   </para>
  </sect2>

  <sect2 xml:id="sec-apparmor-hat-config-directives">
   <title>位置和目录指令</title>
   <para>
    位置和目录指令会在程序配置文件中指定帽子名称，以便 Apache 可调用与其安全性相关的帽子。对于 Apache，您可以在 <link xlink:href="http://httpd.apache.org/docs/2.4/en/sections.html"/> 找到有关位置和目录指令的文档。
   </para>
   <para>
    下面的位置指令示例针对给定的位置指定 <literal>mod_apparmor</literal> 应使用特定的帽子：
   </para>
<screen>&lt;Location /foo/&gt;
  AAHatName MY_HAT_NAME
&lt;/Location&gt;
</screen>
   <para>
    这会尝试将 <literal>MY_HAT_NAME</literal> 用于任何以 <filename>/foo/</filename> 开头的 URI（<filename>/foo/</filename>、<filename>/foo/bar</filename>、<filename>/foo/cgi/path/blah_blah/blah</filename> 等）。
   </para>
   <para>
    目录指令的工作方式与位置指令相似，不同的是它代表的是文件系统中的路径，示例如下：
   </para>
<screen>&lt;Directory "/srv/www/www.example.org/docs"&gt;
  # Note lack of trailing slash
  AAHatName example.org
&lt;/Directory&gt;</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apparmor-hat-apache-managing">
  <title>管理 ChangeHat 感知型应用程序</title>

  <para>
   在上一节中，您已了解了 <literal>mod_apparmor</literal>，以及它如何帮助您保护特定的 Web 应用程序。本节通过一个真实的示例来逐步讲解如何为某个 Web 应用程序创建帽子，并使用 <phrase>AppArmor</phrase> 的 change_hat 功能来保护该应用程序。由于 YaST 的 <phrase>AppArmor</phrase> 模块功能有限，本章主要使用 <phrase>AppArmor</phrase> 的命令行工具。
  </para>

  <sect2>
   <title>使用 <phrase>AppArmor</phrase> 的命令行工具</title>
  <para>
   为便于演示，我们选择名为 <emphasis>Adminer</emphasis> (<link xlink:href="http://www.adminer.org/en/"/>) 的 Web 应用程序。它是一个以 PHP 编写的全功能 SQL 数据库管理工具，不过只包括一个 PHP 文件。要正常运行 Adminer，您需要设置一个 Apache Web 服务器、PHP 及其 Apache 模块，以及一个适用于 PHP 的数据库驱动程序 — 本示例使用 MariaDB。您可使用以下命令安装所需的软件包
  </para>

<screen>zypper in apache2 apache2-mod_apparmor apache2-mod_php5 php5 php5-mysql
</screen>

  <para>
   要设置用于运行 Adminer 的 Web 环境，请执行以下步骤：
  </para>

  <procedure>
   <title>设置 Web 服务器环境</title>
   <step>
    <para>
     确保对 Apache 启用了 <literal>apparmor</literal> 和 <literal>php5</literal> 模块。要在任何情况下均启用这些模块，请使用：
    </para>
<screen><prompt>&gt; </prompt>a2enmod apparmor php5</screen>
    <para>
     然后使用以下命令重启动 Apache
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl restart apache2</screen>
   </step>
   <step>
    <para>
     确保 MariaDB 正在运行。如果不确定，请使用以下命令将其重启动
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl restart mariadb</screen>
    <remark>taroth 2014-02-26: at the moment, there is no mariadb.service, starting
     mysql to be the right way - wrote
     mail to mhrusecky to ask if this is bound to change anytime soon for SLE
     12 - taroth 2020-06-04: this is fixed meanwhile, see jsc#SLE-9450, comment by
     kstreitova</remark>
   </step>
   <step>
    <para>
     从 <link xlink:href="http://www.adminer.org"/> 下载 Adminer，将其复制到 <filename>/srv/www/htdocs/adminer/</filename>，并将其重命名为 <filename>adminer.php</filename>，使其完整路径为 <filename>/srv/www/htdocs/adminer/adminer.php</filename>。
    </para>
   </step>
   <step>
    <para>
     在网页浏览器的 URI 地址字段中输入 <literal>http://localhost/adminer/adminer.php</literal> 以测试 Adminer。如果您将 Adminer 安装到了远程服务器上，请将 <literal>localhost</literal> 替换为该服务器的实际主机名。
    </para>
    <figure>
     <title>Adminer 登录页</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="aa_changehat_adminer.png" width="75%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="aa_changehat_adminer.png" width="40%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <tip>
     <para> 如果您在查看 Adminer 登录页时遇到问题，请尝试检查 Apache 错误日志 <filename>/var/log/apache2/error.log</filename> 以寻求帮助。无法访问网页的另一个原因可能是，您的 Apache 已受 <phrase>AppArmor</phrase> 的控制，并且其 <phrase>AppArmor</phrase> 配置文件过于严格，不允许查看 Adminer。请使用 <command>aa-status</command> 检查该配置文件，如果需要，可使用以下命令暂时将 Apache 设置为控诉模式 </para>
<screen><prompt role="root"># </prompt>sudo aa-complain usr.sbin.httpd2-prefork</screen>
    </tip>
   </step>
  </procedure>

  <para>
   Adminer 的 Web 环境就绪后，您需要配置 Apache 的 <literal>mod_apparmor</literal>，使 <phrase>AppArmor</phrase> 能够检测对 Adminer 的访问以及对特定<quote>帽子</quote>进行的更改。
  </para>

  <procedure>
   <title>配置 <literal>mod_apparmor</literal></title>
   <step>
    <para>
     Apache 在 <filename>/etc/apache2/</filename> 和 <filename>/etc/apache2/conf.d/</filename> 下提供了多个配置文件。请选择所需的配置文件并在文本编辑器中打开。在此示例中，<command>vim</command> 编辑器用于创建新的配置文件 <filename>/etc/apache2/conf.d/apparmor.conf</filename>。
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> vim /etc/apache2/conf.d/apparmor.conf</screen>
   </step>
   <step>
    <para>
     将以下代码段复制到编辑后的文件中。
    </para>
<screen>&lt;Directory /srv/www/htdocs/adminer&gt;
  AAHatName adminer
&lt;/Directory&gt;</screen>
    <para>
     当 Web 用户访问 Apache 文档根目录中的 <filename>/adminer</filename> 目录（以及该目录中的任何文件/目录）时，此代码段可让 Apache 告知 <phrase>AppArmor</phrase> 发生了 change_hat 事件。请记住，<filename>adminer.php</filename> 应用程序就放在该位置。
    </para>
   </step>
   <step>
    <para>
     保存文件，关闭编辑器，然后使用以下命令重启动 Apache
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl restart apache2</screen>
   </step>
  </procedure>

  <para>
   现在，Apache 就能识别 Adminer 并知道<quote>帽子</quote>发生的更改了。接下来我们在 <phrase>AppArmor</phrase> 配置中创建 Adminer 的相关帽子。如果您目前还没有 <phrase>AppArmor</phrase> 配置文件，请先创建一个，然后再继续。请记住，如果您的 Apache 主二进制文件为 <filename>/usr/sbin/httpd2-prefork</filename>，则相关的配置文件命名为 <filename>/etc/apparmor.d/usr.sbin.httpd2-prefork</filename>。
  </para>

  <procedure>
   <title>创建 Adminer 的帽子</title>
   <step>
    <para>
     在文本编辑器中打开文件 <filename>/etc/apparmor.d/usr.sbin.httpd2-prefork</filename>（如果该文件不存在，请创建一个）。其内容应如下所示：
    </para>
<screen>#include &lt;tunables/global&gt;

/usr/sbin/httpd2-prefork {
  #include &lt;abstractions/apache2-common&gt;
  #include &lt;abstractions/base&gt;
  #include &lt;abstractions/php5&gt;

  capability kill,
  capability setgid,
  capability setuid,

  /etc/apache2/** r,
  /run/httpd.pid rw,
  /usr/lib{,32,64}/apache2*/** mr,
  /var/log/apache2/** rw,

  ^DEFAULT_URI {
    #include &lt;abstractions/apache2-common&gt;
    /var/log/apache2/** rw,
  }

  ^HANDLING_UNTRUSTED_INPUT {
    #include &lt;abstractions/apache2-common&gt;
    /var/log/apache2/** w,
  }
}</screen>
   </step>
   <step>
    <para>
     在最后一个右花括号 (<literal>}</literal>) 前面插入以下部分：
    </para>
<screen>^adminer flags=(complain) {
}</screen>
    <para>
     请注意帽子名称后面添加的 <literal>(complain)</literal> — 此部分告知 <phrase>AppArmor</phrase> 将 <systemitem>adminer</systemitem> 帽子保持控诉模式。这是因为，我们稍后需要通过访问 Adminer 来了解帽子配置文件。
     <remark>@cboltz: i did it this way myself and it worked perfectly</remark>
    </para>
   </step>
   <step>
    <para>
     保存文件，然后依次重启动 <phrase>AppArmor</phrase> 和 Apache。
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl reload apparmor apache2</screen>
   </step>
   <step>
    <para>
     检查 <systemitem>adminer</systemitem> 帽子是否确实处于控诉模式。
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> aa-status
apparmor module is loaded.
39 profiles are loaded.
37 profiles are in enforce mode.
[...]
   /usr/sbin/httpd2-prefork
   /usr/sbin/httpd2-prefork//DEFAULT_URI
   /usr/sbin/httpd2-prefork//HANDLING_UNTRUSTED_INPUT
[...]
2 profiles are in complain mode.
   /usr/bin/getopt
   /usr/sbin/httpd2-prefork//adminer
[...]
</screen>
    <para>
     我们可以看到，<literal>httpd2-prefork//adminer</literal> 是以控诉模式装载的。
    </para>
   </step>
  </procedure>

  <para>
   最后一个任务是找出 <systemitem>adminer</systemitem> 帽子的正确规则集。这就是我们将 <systemitem>adminer</systemitem> 帽子设置为控诉模式的原因 — 当我们通过网页浏览器使用 <filename>adminer.php</filename> 时，日志记录工具将收集有关其访问要求的有用信息。然后，<command>aa-logprof</command> 将帮助我们创建该帽子的配置文件。
  </para>

  <procedure>
   <title>生成 <systemitem>adminer</systemitem> 帽子的规则</title>
   <step>
    <para>
     在网页浏览器中打开 Adminer。如果您在本地安装了 Adminer，则 URI 为 <literal>http://localhost/adminer/adminer.php</literal>。
    </para>
   </step>
   <step>
    <para>
     选择要使用的数据库引擎（在本例中为 MariaDB），并使用现有的数据库用户名和口令登录 Adminer。您此时不需要指定数据库名称，可以在登录后再指定。使用 Adminer 执行所需的任意操作 — 创建新数据库、创建数据库的新表、设置用户特权，等等。
    </para>
   </step>
   <step>
    <para>
     简单测试 Adminer 的用户界面后，切换回控制台并检查日志中收集的数据。
    </para>
    <screen><prompt>&gt; </prompt><command>sudo</command> aa-logprof
Reading log entries from /var/log/audit/audit.log.
Updating AppArmor profiles in /etc/apparmor.d.
Complain-mode changes:

Profile:  /usr/sbin/httpd2-prefork^adminer
Path:     /dev/urandom
Mode:     r
Severity: 3

  1 - #include &lt;abstractions/apache2-common&gt;
[...]
 [8 - /dev/urandom]

[(A)llow] / (D)eny / (G)lob / Glob w/(E)xt / (N)ew / Abo(r)t / (F)inish / (O)pts</screen>
    <para>
     通过 <command>aa-logprof</command> 消息，我们可以确定系统已正确检测到这个新的 <systemitem>adminer</systemitem> 帽子：
    </para>
<screen>Profile:  /usr/sbin/httpd2-prefork^adminer</screen>
    <para>
     <command>aa-logprof</command> 命令会要求您选取每个已发现的 <phrase>AppArmor</phrase> 事件的正确规则。指定要使用的规则，并使用 <guimenu>Allow</guimenu> 确认。有关使用 <command>aa-genprof</command> 和 <command>aa-logprof</command> 接口的详细信息，请参见<xref linkend="sec-apparmor-commandline-profiling-summary-genprof"/>。
    </para>
    <tip>
     <para>
      <command>aa-logprof</command> 针对所检查的事件提供多个有效规则。有些规则属于<emphasis>抽象</emphasis> — 影响特定的常用目标组的预定义规则集。包含这样的抽象（而非直接的 URI 规则）有时会很有用：
     </para>
<screen> 1 - #include &lt;abstractions/php5&gt;
 [2 - /var/lib/php5/sess_3jdmii9cacj1e3jnahbtopajl7p064ai242]</screen>
     <para>
      在上面的示例中，建议点击 <guimenu>1</guimenu> 并使用 <guimenu>A</guimenu> 确认，以允许抽象。
     </para>
    </tip>
   </step>
   <step>
    <para>
     完成最后一项更改后，系统会要求您保存更改的配置文件。
    </para>
<screen>The following local profiles were changed. Would you like to save them?
 [1 - /usr/sbin/httpd2-prefork]

 (S)ave Changes / [(V)iew Changes] / Abo(r)t</screen>
    <para>
     点击 <guimenu>S</guimenu> 保存更改。
    </para>
   </step>
   <step>
    <para>
     使用 <command>aa-enforce</command> 将配置文件设置为强制模式
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> aa-enforce usr.sbin.httpd2-prefork</screen>
    <para>
     然后使用 <command>aa-status</command> 检查其状态
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> aa-status
apparmor module is loaded.
39 profiles are loaded.
38 profiles are in enforce mode.
[...]
   /usr/sbin/httpd2-prefork
   /usr/sbin/httpd2-prefork//DEFAULT_URI
   /usr/sbin/httpd2-prefork//HANDLING_UNTRUSTED_INPUT
   /usr/sbin/httpd2-prefork//adminer
[...]</screen>
    <para>
     我们可以看到，<literal>//adminer</literal> 帽子已从<emphasis>控诉</emphasis>模式转变为<emphasis>强制</emphasis>模式。
    </para>
   </step>
   <step>
    <para>
     尝试在网页浏览器中运行 Adminer，如果在运行时遇到问题，请将它切换到控诉模式，重复前面出现问题的步骤，并使用 <command>aa-logprof</command> 更新配置文件，直到您对应用程序的功能感到满意为止。
    </para>
   </step>
  </procedure>

  <note>
   <title>帽子与父配置文件的关系</title>
   <para>
    配置文件 <filename>^adminer</filename> 仅在基于父配置文件 <filename>usr.sbin.httpd2-prefork</filename> 运行的进程的环境中可用。
   </para>
  </note>
  </sect2>
  <sect2 xml:id="sec-apparmor-hat-apache-managing-add">
   <title>在 YaST 中向帽子添加帽子和项</title>
   <para>
    使用<guimenu>编辑配置文件</guimenu>对话框时（有关使用方法，请参见<xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-yast-edit"/>），或者使用<guimenu>手动添加 配置文件</guimenu>添加新的配置文件时（有关使用方法，请参见<xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-yast-add"/>），您具有将帽子（子配置文件）添加到 AppArmor 配置文件的选项。<phrase></phrase>如下所示通过 <guimenu><phrase>AppArmor</phrase> 配置文件对话框</guimenu>窗口添加 ChangeHat 子配置文件。
   </para>
   <informalfigure>
    <mediaobject>
     <textobject role="description"><phrase><phrase>AppArmor</phrase> profile dialog</phrase>
     </textobject>
     <imageobject role="fo">
      <imagedata fileref="hats_in_profiles.png" width="75%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="hats_in_profiles.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <procedure>
    <step>
     <para>
      在 <guimenu><phrase>AppArmor</phrase> 配置文件对话框</guimenu>窗口中单击<guimenu>添加项</guimenu>，然后选择<guimenu>帽子</guimenu>。<guimenu>输入帽子名称</guimenu>对话框即会打开：
     </para>
     <informalfigure>
      <mediaobject>
       <textobject role="description"><phrase>Enter hat name</phrase>
       </textobject>
       <imageobject role="fo">
        <imagedata fileref="hat_createhat.png" width="50%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="hat_createhat.png" width="35%"/>
       </imageobject>
      </mediaobject>
     </informalfigure>
    </step>
    <step>
     <para>
      输入要添加到 <phrase>AppArmor</phrase> 配置文件的帽子的名称。此名称为 URI，此 URI 被访问时将接收到帽子中设定的权限。
     </para>
    </step>
    <step>
     <para>
      单击<guimenu>创建帽子</guimenu>。返回到 <guimenu><phrase></phrase>AppArmor 配置文件对话框</guimenu>屏幕。
     </para>
    </step>
    <step>
     <para>
      添加新帽子后，单击<guimenu>完成</guimenu>。
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
