<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="docker-building-images" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Creating Custom Images</title>
 <para>
  For creating your custom image you need a base &docker; image of &slsa;. You
  can use any of the pre-built &slsa; images that you can obtain as described
  in <xref linkend="Customizing-Pre-build-Images"/>.
 </para>

 <para>
  After you obtain your base &docker; image, you can modify the image by using a
  <filename>Dockerfile</filename> (usually placed in the build directory). Then
  use the standard <command>docker</command> building tool to create your custom image:
 </para>
 <screen>&prompt.user;docker build <replaceable>PATH_TO_BUILD_DIRECTORY</replaceable></screen>
 <para>
  For more information about <literal>docker build</literal> options, see the
  <link xlink:href="https://docs.docker.com/engine/reference/commandline/build/">official
  Docker documentation</link>.
 </para>
 <note>
  <title>Creating a &docker; Image for an Application</title>
  <para>
   For information about creating a <filename>Dockerfile</filename> for the
   application you want to run inside a &docker; container, see
   <xref linkend="docker-dockerizing-application"/>.
  </para>
 </note>
 <!-- This section is commented out after discussion with Federica as KIWI
 should not be used for building base images outside SUSE. Even though it is
 possible, the only supported way is to activate pre-built images of SLES -->
 <!--
 <sect1 xml:id="Building-Base-Images-KIWI">
  <title>Building Base &slsa; Images with KIWI</title>
  <para>
   KIWI is a command line tool that enables you to build images in a
   variety of formats. You can use the tool to build a base &docker; image of
   &slsa;. For more details about KIWI installation and usage, please refer
   to the
   <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.introduction">KIWI documentation</link>.
  </para>
  <para>
   The procedure of building &docker; images is given in the
   <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.docker">Docker Images chapter</link>.
  </para>
 </sect1>
 -->
 <sect1 xml:id="Building-Pre-build-Images">
  <title>Obtaining Base &slsa; Images</title>
  <para>
   To obtain the base &slsa; images from &suse; registry, use the following
   command:</para>
  <screen>&prompt.user;docker pull registry.suse.com/suse/<replaceable>IMAGENAME</replaceable></screen>

  <para>
   For example, to get the one for &productname; 15, use:
  </para>
 <screen>&prompt.user;docker pull registry.suse.com/suse/sle15</screen>

  <para>
   Pre-built images do not have repositories configured. But when the &docker;
   host has a &slea; subscription that provides access to the product used in the
   image, Zypper will automatically have access to the right repositories.
  </para>

  <para>
   You can customize the &docker; image as described in
   <xref linkend="Customizing-Pre-build-Images"/>.
  </para>
 </sect1>
 <sect1 xml:id="Customizing-Pre-build-Images">
  <title>Customizing &slsa; &docker; Images</title>

  <para>
   The pre-built images do not have any repository configured and do not
   include any modules or extensions. They contain a
   <link xlink:href="https://github.com/SUSE/container-suseconnect">zypper
   service</link> that contacts either the &sccreg; (&scc;) or your
   &rmtool; (&rmt;) server, according to the configuration of
   the SLE host that runs the &docker; container. The service obtains the list of
   repositories available for the product used by the &docker; image. You can
   also directly declare extensions in your <filename>Dockerfile</filename>
   (for details refer to
   <xref linkend="sec-docker-sle-images-customizing-the-images-extensions"/>.
  </para>

  <para>
   You do not need to add any credentials to the &docker; image because the
   machine credentials are automatically injected into the container by the
   <systemitem class="daemon">docker</systemitem> daemon. They are injected inside of the
   <literal>/run/secrets</literal> directory. The same applies to the
   <filename>/etc/SUSEConnect</filename> file of the host system, which is
   automatically injected into the <filename>/run/secrets</filename> directory.
  </para>

  <note>
   <title>Credentials and Security</title>

   <para>
    The contents of the <filename>/run/secrets</filename> directory are never
    committed to a &docker; image, hence there is no risk of your credentials
    leaking.
   </para>
  </note>

  <para>
   To obtain the list of repositories, use the following command:
  </para>
  <screen>&prompt.sudo;zypper ref -s</screen>

  <para>
   It will automatically add all the repositories to your container. For each
   repository added to the system a new file will be created under
   <command>/etc/zypp/repos.d</command>. The URLs of these repositories include
   an access token that automatically expires after 12 hours. To renew the
   token call the <command>zypper ref -s</command> command. It is secure to
   commit these files to a &docker; image.
  </para>

  <para>
   If you want to use a different set of credentials, place a custom
   <filename>/etc/zypp/credentials.d/SCCcredentials</filename> file inside of
   the &docker; image. It contains the machine credentials that have the
   subscription you want to use. The same applies to the
   <filename>SUSEConnect</filename> file: to override the file available on the
   host system that is running the &docker; container, add a custom
   <filename>/etc/SUSEConnect</filename> file inside of the &docker; image.
  </para>

  <para>
   Now you can create a custom &docker; image by using a
   <literal>Dockerfile</literal> as described in <xref
   linkend="sec-docker-sle-images-customizing-the-images-sles12"
   xrefstyle="select:label"/> and <xref
   linkend="sec-docker-sle-images-customizing-the-images-sles15"
   xrefstyle="select:label"/>. In
   case you would like to move your application to a &docker; container,
   refer to <xref linkend="docker-dockerizing-application"/>.
   After you have edited the <filename>Dockerfile</filename>, build the image by
   running the following command in the same directory in which the
   <filename>Dockerfile</filename> resides:
  </para>
<screen>&prompt.user;docker build .</screen>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-sles12">
   <title>Creating a Custom &slea;&nbsp;12 Image</title>
   <para>
    The following <filename>Dockerfile</filename> creates a simple &docker; image based on
    &slea;&nbsp;12 SP4:
   </para>
<screen>FROM registry.suse.com/suse/sles12sp4

RUN zypper ref -s
RUN zypper -n in vim</screen>
   <para>
    When the &docker; host machine is registered against an internal &rmt;
    server, the &docker; image requires the SSL certificate used by &rmt;:
   <remark>
    taroth 2018-08-08: not sure the content of this file is still correct, as
    SMT has been replaced by RMT (Repository Mirroring Tool) meanwhile - @DEV:
    please check</remark>
   </para>
<screen>FROM registry.suse.com/suse/sles12sp4

# Import the crt file of our private SMT server
ADD http://smt.test.lan/smt.crt /etc/pki/trust/anchors/smt.crt
RUN update-ca-certificates

RUN zypper ref -s
RUN zypper -n in vim</screen>
  </sect2>

<sect2 xml:id="sec-docker-sle-images-customizing-the-images-sles15">
   <title>Creating a Custom &slea;&nbsp;15 Image</title>
   <para>
    The following <filename>Dockerfile</filename> creates a simple &docker; image based on
    &slea;&nbsp;15:
   </para>
<screen>FROM registry.suse.com/suse/sle15

RUN zypper ref -s
RUN zypper -n in vim</screen>
   <para>
    When the &docker; host machine is registered against an internal &rmt;
    server, the &docker; image requires the SSL certificate used by &rmt;:
   <remark>
    taroth 2018-08-08: not sure the content of this file is still correct, as
    SMT has been replaced by RMT (Repository Mirroring Tool) meanwhile - @DEV:
    please check</remark></para>
<screen>FROM registry.suse.com/suse/sle15

# Import the crt file of our private SMT server
ADD http://smt.test.lan/smt.crt /etc/pki/trust/anchors/smt.crt
RUN update-ca-certificates

RUN zypper ref -s
RUN zypper -n in vim</screen>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-extensions">
   <title>Adding &slea; Extensions and Modules to Images</title>
   <para>
    You may have subscriptions to &slea; extensions or modules that you would like
    to use in your custom image. To add them to the &docker; image, proceed as
    follows:
   </para>
   <procedure>
    <title>Adding Extension and Modules</title>
    <step>
     <para>
      Add the following into your <filename>Dockerfile</filename>:
     </para>
<screen>ADD *.repo /etc/zypp/repos.d/
ADD *.service /etc/zypp/services.d
RUN zypper refs &amp;&amp; zypper refresh</screen>
    </step>
    <step>
     <para>
      Copy all <filename>.service</filename> and <filename>.repo</filename>
      files that you will use into the directory where you will build the
      &docker; image from the <filename>Dockerfile</filename>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <!-- This section is incomplete as such a solution is not currently supported
 by SLES. -->
 <!--
 <sect1 xml:id="Automating-Images-Builds">
   <title>Automation of Images Building</title>
   <para>
    In enterprise environment you typically need to automate your deployment
    process, from developer's commits to running the application. In case you
    use your own dockerregistry, you need to set up a pipeline between the
    versioning system and your private registry. To set up a pipeline you
    need to perform the following steps:
   </para>
   <orderedlist>
    <listitem>
     <para>
     configure your versioning system to use hooks.
     </para>
    </listitem>
    <listitem>
     <para>
      choose any of continuous integration tools to receive the hooks and
      then to perform the build process.
     </para>
    </listitem>
    <listitem>
     <para>
      upload the built image to your docker registry.
     </para>
    </listitem>
   </orderedlist>
   <sect2 xml:id="Configuring-Versioning-System">
    <title>Configuring Versioning Systems</title>
    <para>
     Most of the currently used versioning systems enables you to configure
     hooks. As soon as you perform a particular action, the versioning system
     sends information to the continuos integration tool that a build should
     be performed. For example, in case of git used with Github, Github sends
     a <literal>POST</literal> request to configured URLs. You can select
     from various types of triggering events or use the default one -
     <literal>push</literal> to a configured branch.
    </para>
    <para>
     Your repository must contain besides your application source code, also
     a particular <filename>Dockerfile<filename> that defines your image.
    </para>
   </sect2>
 </sect1>
 -->
</chapter>
