<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.qemu.monitor">
 <title>Virtual Machine Administration Using &qemu; Monitor</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>
  When &qemu; is running, a monitor console is provided for performing
  interaction with the user. Using the commands available in the monitor
  console, it is possible to inspect the running operating system, change
  removable media, take screenshots or audio grabs and control
  other aspects of the virtual machine.
 </para>
 <note>
  <para>
   The following sections list selected useful &qemu; monitor commands
   and their purpose. To get the full list, enter <command>help</command> in
   the &qemu; monitor command line.
  </para>
 </note>
 <sect1 xml:id="sec.qemu.monitor.access">
  <title>Accessing Monitor Console</title>

  <para>
   You can access the monitor console from &qemu; window either by a
   keyboard shortcut&mdash;press <keycombo><keycap function="control"/>
   <keycap function="alt"/><keycap>2</keycap></keycombo> (to return to
   &qemu;, press <keycombo><keycap function="control"/>
   <keycap function="alt"/><keycap>1</keycap></keycombo>)&mdash;or
   alternatively by clicking <guimenu>View</guimenu> in the &qemu; GUI
   window, then <guimenu>compatmonitor0</guimenu>. The most convenient way
   is to show the &qemu; window tabs with
   <menuchoice><guimenu>View</guimenu> <guimenu>Show
   Tabs</guimenu></menuchoice>. Then you can easily switch between the guest
   screen, monitor screen, and the output of the serial and parallel
   console.
  </para>

  <para>
   To get help while using the console, use <command>help</command> or
   <command>?</command>. To get help for a specific command, use
   <command>help</command> <replaceable>COMMAND</replaceable>.
  </para>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.get">
  <title>Getting Information about the Guest System</title>

  <para>
   To get information about the guest system, use
   <command>info</command>. If used without any option, the list of possible
   options is printed. Options determine which part of the system will be
   analyzed:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>info version</command>
    </term>
    <listitem>
     <para>
      Shows the version of &qemu;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info commands</command>
    </term>
    <listitem>
     <para>
      Lists available QMP commands.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info network</command>
    </term>
    <listitem>
     <para>
      Shows the network state.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info chardev</command>
    </term>
    <listitem>
     <para>
      Shows the character devices.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info block</command>
    </term>
    <listitem>
     <para>
      Information about block devices, such as hard disks, floppy drives,
      or CD-ROMs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info blockstats</command>
    </term>
    <listitem>
     <para>
      Read and write statistics on block devices.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info registers</command>
    </term>
    <listitem>
     <para>
      Shows the CPU registers.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info cpus</command>
    </term>
    <listitem>
     <para>
      Shows information about available CPUs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info history</command>
    </term>
    <listitem>
     <para>
      Shows the command line history.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info irq</command>
    </term>
    <listitem>
     <para>
      Shows the interrupt statistics.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info pic</command>
    </term>
    <listitem>
     <para>
      Shows the i8259 (PIC) state.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info pci</command>
    </term>
    <listitem>
     <para>
      Shows the PCI information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info tlb</command>
    </term>
    <listitem>
     <para>
      Shows virtual to physical memory mappings.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info mem</command>
    </term>
    <listitem>
     <para>
      Shows the active virtual memory mappings.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info jit</command>
    </term>
    <listitem>
     <para>
      Shows dynamic compiler information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info kvm</command>
    </term>
    <listitem>
     <para>
      Shows the KVM information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info numa</command>
    </term>
    <listitem>
     <para>
      Shows the NUMA information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info usb</command>
    </term>
    <listitem>
     <para>
      Shows the guest USB devices.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info usbhost</command>
    </term>
    <listitem>
     <para>
      Shows the host USB devices.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info profile</command>
    </term>
    <listitem>
     <para>
      Shows the profiling information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info capture</command>
    </term>
    <listitem>
     <para>
      Shows the capture (audio grab) information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info snapshots</command>
    </term>
    <listitem>
     <para>
      Shows the currently saved virtual machine snapshots.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info status</command>
    </term>
    <listitem>
     <para>
      Shows the current virtual machine status.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info mice</command>
    </term>
    <listitem>
     <para>
      Shows which guest mice are receiving events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info vnc</command>
    </term>
    <listitem>
     <para>
      Shows the VNC server status.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info name</command>
    </term>
    <listitem>
     <para>
      Shows the current virtual machine name.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info uuid</command>
    </term>
    <listitem>
     <para>
      Shows the current virtual machine UUID.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info usernet</command>
    </term>
    <listitem>
     <para>
      Shows the user network stack connection states.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info migrate</command>
    </term>
    <listitem>
     <para>
      Shows the migration status.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info balloon</command>
    </term>
    <listitem>
     <para>
      Shows the balloon device information.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info qtree</command>
    </term>
    <listitem>
     <para>
      Shows the device tree.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info qdm</command>
    </term>
    <listitem>
     <para>
      Shows the qdev device model list.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info roms</command>
    </term>
    <listitem>
     <para>
      Shows the ROMs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info migrate_cache_size</command>
    </term>
    <listitem>
     <para>
      Shows the current migration xbzrle (<quote>Xor Based Zero Run Length
      Encoding</quote>) cache size.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info migrate_capabilities</command>
    </term>
    <listitem>
     <para>
      Shows the status of the various migration capabilities, such as xbzrle
      compression.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info mtree</command>
    </term>
    <listitem>
     <para>
      Shows the &vmguest; memory hierarchy.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info trace-events</command>
    </term>
    <listitem>
     <para>
      Shows available trace-events and their status.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.vnc_pw">
  <title>Changing VNC Password</title>

  <para>
   To change the VNC password, use the <command>change vnc
   password</command> command and enter the new password:
  </para>

<screen>
(qemu) change vnc password
Password: ********
(qemu)
    </screen>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.manage_dev">
  <title>Managing Devices</title>

  <para>
   To add a new disk while the guest is running (hotplug), use the
   <command>drive_add</command> and <command>device_add</command> commands.
   First define a new drive to be added as a device to bus 0:
  </para>

<screen>(qemu) drive_add 0 if=none,file=/tmp/test.img,format=raw,if=disk1
OK</screen>

  <para>
   You can confirm your new device by querying the block subsystem:
  </para>

<screen>(qemu) info block
[...]
disk1: removable=1 locked=0 tray-open=0 file=/tmp/test.img ro=0 drv=raw \
encrypted=0 bps=0 bps_rd=0 bps_wr=0 iops=0 iops_rd=0 iops_wr=0</screen>

  <para>
   After the new drive is defined, it needs to be connected to a device so
   that the guest can see it. The typical device would be a
   <literal>virtio-blk-pci</literal> or <literal>scsi-disk</literal>. To get
   the full list of available driver values, run:
  </para>

<screen>(qemu) device_add ?
name "VGA", bus PCI
name "usb-storage", bus usb-bus
[...]
name "virtio-blk-pci", bus virtio-bus</screen>

  <para>
   Now add the device
  </para>

<screen>(qemu) device_add virtio-blk-pci,drive=disk1,id=myvirtio1</screen>

  <para>
   and confirm with
  </para>

<screen>(qemu) info pci
[...]
Bus  0, device   4, function 0:
    SCSI controller: PCI device 1af4:1001
      IRQ 0.
      BAR0: I/O at 0xffffffffffffffff [0x003e].
      BAR1: 32 bit memory at 0xffffffffffffffff [0x00000ffe].
      id "myvirtio1"</screen>

  <tip>
   <para>
    Devices added with the <command>device_add</command> command can be
    removed from the guest with <command>device_del</command>. Enter
    <command>help device_del</command> on the &qemu; monitor command line
    for more information.
   </para>
  </tip>

  <para>
   To release the device or file connected to the removable media device,
   use the <command>eject</command> <replaceable>DEVICE</replaceable>
   command. Use the optional <option>-f</option> to force ejection.
  </para>

  <para>
   To change removable media (like CD-ROMs), use the
   <command>change</command> <replaceable>DEVICE</replaceable> command. The
   name of the removable media can be determined using the <command>info
   block</command> command:
  </para>

<screen>
<prompt>(qemu) </prompt><command>info block</command>
ide1-cd0: type=cdrom removable=1 locked=0 file=/dev/sr0 ro=1 drv=host_device
<prompt>(qemu) </prompt><command>change ide1-cd0 /path/to/image</command>
     </screen>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.keyboard">
  <title>Controlling Keyboard and Mouse</title>

  <para>
   It is possible to use the monitor console to emulate keyboard and mouse
   input if necessary. For example, if your graphical user interface
   intercepts some key combinations at low level (such as <keycombo><keycap
   function="control"/><keycap function="alt"/><keycap>F1</keycap></keycombo>
   in X Window), you can still enter them using the <command>sendkey</command>
   <replaceable>KEYS</replaceable>:
  </para>

<screen>sendkey ctrl-alt-f1</screen>

  <para>
   To list the key names used in the <replaceable>KEYS</replaceable> option,
   enter <command>sendkey</command> and press <keycap function="tab"/>.
  </para>

  <para>
   To control the mouse, the following commands can be used:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>mouse_move</command> <replaceable>DX</replaceable> <replaceable>dy</replaceable> [<replaceable>DZ</replaceable>]
    </term>
    <listitem>
     <para>
      Move the active mouse pointer to the specified coordinates dx, dy with
      the optional scroll axis dz.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>mouse_button</command> <replaceable>VAL</replaceable>
    </term>
    <listitem>
     <para>
      Change the state of the mouse buttons (1=left, 2=middle, 4=right).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>mouse_set</command> <replaceable>INDEX</replaceable>
    </term>
    <listitem>
     <para>
      Set which mouse device receives events. Device index numbers can be
      obtained with the <command>info mice</command> command.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.memory">
  <title>Changing Available Memory</title>

  <para>
   If the virtual machine was started with the <option>-balloon
   virtio</option> option (the paravirtualized balloon device is therefore
   enabled), you can change the available memory dynamically. For
   more information about enabling the balloon device, see
   <xref linkend="cha.qemu.guest_inst.qemu-kvm"/>.
  </para>

  <para>
   To get information about the balloon device in the monitor console and to
   determine whether the device is enabled, use the <command>info
   balloon</command> command:
  </para>

<screen>(qemu) info balloon</screen>

  <para>
   If the balloon device is enabled, use the <command>balloon</command>
   <replaceable>MEMORY_IN_MB</replaceable> command to set the requested
   amount of memory:
  </para>

<screen>(qemu) balloon 400</screen>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.virt_memory">
  <title>Dumping Virtual Machine Memory</title>

  <para>
   To save the content of the virtual machine memory to a disk or console
   output, use the following commands:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>memsave</command><replaceable>ADDR</replaceable><replaceable>SIZE</replaceable><replaceable>FILENAME</replaceable>
    </term>
    <listitem>
     <para>
      Saves virtual memory dump starting at <replaceable>ADDR</replaceable>
      of size <replaceable>SIZE</replaceable> to file
      <replaceable>FILENAME</replaceable>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>pmemsave</command><replaceable>ADDR</replaceable><replaceable>SIZE</replaceable><replaceable>FILENAME</replaceable>
    </term>
    <listitem>
     <para>
      Saves physical memory dump starting at <replaceable>ADDR</replaceable>
      of size <replaceable>SIZE</replaceable> to file
      <replaceable>FILENAME</replaceable>-
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>x /<replaceable>FMT</replaceable><replaceable>ADDR</replaceable>
    </term>
    <listitem>
     <para>
      Makes a virtual memory dump starting at address
      <replaceable>ADDR</replaceable> and formatted according to the
      <replaceable>FMT</replaceable> string. The
      <replaceable>FMT</replaceable> string consists of three parameters
      <literal><replaceable>COUNT</replaceable><replaceable>FORMAT</replaceable><replaceable>SIZE</replaceable></literal>:
     </para>
     <para>
      The <replaceable>COUNT</replaceable> parameter is the number of items
      to be dumped.
     </para>
     <para>
      The <replaceable>FORMAT</replaceable> can be <literal>x</literal>
      (hex), <literal>d</literal> (signed decimal), <literal>u</literal>
      (unsigned decimal), <literal>o</literal> (octal), <literal>c</literal>
      (char) or <literal>i</literal> (assembly instruction).
     </para>
     <para>
      The <replaceable>SIZE</replaceable> parameter can be
      <literal>b</literal> (8 bits), <literal>h</literal> (16 bits),
      <literal>w</literal> (32 bits) or <literal>g</literal> (64 bits). On
      x86, <literal>h</literal> or <literal>w</literal> can be specified
      with the <literal>i</literal> format to respectively select 16 or
      32-bit code instruction size.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>xp /<replaceable>FMT</replaceable><replaceable>ADDR</replaceable>
    </term>
    <listitem>
     <para>
      Makes a physical memory dump starting at address
      <replaceable>ADDR</replaceable> and formatted according to the
      <replaceable>FMT</replaceable> string. The
      <replaceable>FMT</replaceable> string consists of three parameters
      <literal><replaceable>COUNT</replaceable><replaceable>FORMAT</replaceable><replaceable>SIZE</replaceable></literal>:
     </para>
     <para>
      The <replaceable>COUNT</replaceable> parameter is the number of the
      items to be dumped.
     </para>
     <para>
      The <replaceable>FORMAT</replaceable> can be <literal>x</literal>
      (hex), <literal>d</literal> (signed decimal), <literal>u</literal>
      (unsigned decimal), <literal>o</literal> (octal), <literal>c</literal>
      (char) or <literal>i</literal> (asm instruction).
     </para>
     <para>
      The <replaceable>SIZE</replaceable> parameter can be
      <literal>b</literal> (8 bits), <literal>h</literal> (16 bits),
      <literal>w</literal> (32 bits) or <literal>g</literal> (64 bits). On
      x86, <literal>h</literal> or <literal>w</literal> can be specified
      with the<literal>i</literal> format to respectively select 16 or
      32-bit code instruction size.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.snapshots">
  <title>Managing Virtual Machine Snapshots</title>

  <para>
   Managing snapshots in QEMU monitor is not officially supported by
   &suse; yet. The information found in this section may be helpful in
   specific cases.
  </para>

  <para>
   <xref linkend="gloss.vt.vm"/> snapshots are snapshots of the complete
   virtual machine including the state of CPU, RAM, and the content of all
   writable disks. To use virtual machine snapshots, you must have at least
   one non-removable and writable block device using the
   <literal>qcow2</literal> disk image format.
  </para>

  <para>
   Snapshots are helpful when you need to save your virtual machine in a
   particular state. For example, after you have configured network services
   on a virtualized server and want to quickly start the virtual machine in
   the same state that was saved last. You can also create a snapshot after
   the virtual machine has been powered off to create a backup state before
   you try something experimental and possibly make &vmguest; unstable.
   This section introduces the former case, while the latter is described in
   <xref linkend="cha.qemu.guest_inst.qemu-img.snapshots"/>.
  </para>

  <para>
   The following commands are available for managing snapshots in &qemu;
   monitor:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>savevm</command><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      Creates a new virtual machine snapshot under the tag
      <replaceable>NAME</replaceable> or replaces an existing snapshot.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>loadvm</command><replaceable>NAME</replaceable>
    </term>
    <listitem>
     <para>
      Loads a virtual machine snapshot tagged
      <replaceable>NAME</replaceable>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>delvm</command>
    </term>
    <listitem>
     <para>
      Deletes a virtual machine snapshot.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>info snapshots</command>
    </term>
    <listitem>
     <para>
      Prints information about available snapshots.
     </para>
<screen>(qemu) info snapshots
Snapshot list:
ID<co xml:id="co.qemu_monitor.snapshot.l.id"/>      TAG<co xml:id="co.qemu_monitor.snapshot.l.tag"/>                 VM SIZE<co xml:id="co.qemu_monitor.snapshot.l.size"/>   DATE<co xml:id="co.qemu_monitor.snapshot.l.date"/>          VM CLOCK<co xml:id="co.qemu_monitor.snapshot.l.clock"/>
1         booting                4.4M 2013-11-22 10:51:10   00:00:20.476
2         booted                 184M 2013-11-22 10:53:03   00:02:05.394
3         logged_in              273M 2013-11-22 11:00:25   00:04:34.843
4         ff_and_term_running    372M 2013-11-22 11:12:27   00:08:44.965</screen>
     <calloutlist>
      <callout arearefs="co.qemu_monitor.snapshot.l.id">
       <para>
        Unique identification number of the snapshot. Usually
        auto-incremented.
       </para>
      </callout>
      <callout arearefs="co.qemu_monitor.snapshot.l.tag">
       <para>
        Unique description string of the snapshot. It is meant as a human
        readable version of the ID.
       </para>
      </callout>
      <callout arearefs="co.qemu_monitor.snapshot.l.size">
       <para>
        The disk space occupied by the snapshot. Note that the more memory
        is consumed by running applications, the bigger the snapshot is.
       </para>
      </callout>
      <callout arearefs="co.qemu_monitor.snapshot.l.date">
       <para>
        Time and date the snapshot was created.
       </para>
      </callout>
      <callout arearefs="co.qemu_monitor.snapshot.l.clock">
       <para>
        The current state of the virtual machine's clock.
       </para>
      </callout>
     </calloutlist>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.suspend">
  <title>Suspending and Resuming Virtual Machine Execution</title>

  <para>
   The following commands are available for suspending and resuming virtual
   machines:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>stop</command>
    </term>
    <listitem>
     <para>
      Suspends the execution of the virtual machine.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>cont</command>
    </term>
    <listitem>
     <para>
      Resumes the execution of the virtual machine.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>system_reset</command>
    </term>
    <listitem>
     <para>
      Resets the virtual machine. The effect is similar to the reset button
      on a physical machine. This may leave the file system in an unclean
      state.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>system_powerdown</command>
    </term>
    <listitem>
     <para>
      Sends an <xref linkend="gloss.vt.acpi"/> shutdown request to the
      machine. The effect is similar to the power button on a physical
      machine.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>q</command> or <command>quit</command>
    </term>
    <listitem>
     <para>
      Terminates &qemu; immediately.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.qemu.monitor.migrate">
  <title>Live Migration</title>

  <para>
   The live migration process allows to transmit any virtual machine from
   one host system to another host system without any interruption in
   availability. It is possible to change hosts permanently or only during
   maintenance.
  </para>

  <para>
   The requirements for live migration:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     All requirements from
     <xref linkend="libvirt.admin.live.migration.requirements"/> are
     applicable.
    </para>
   </listitem>
   <listitem>
    <para>
     Live migration is only possible between &vmhost;s with the same CPU
     features.
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="gloss.vt.storage.ahci"/> interface,
     <xref linkend="gloss.vt.virtfs"/> feature, and the
     <option>-mem-path</option> command line option are not compatible with
     migration.
    </para>
   </listitem>
   <listitem>
    <para>
     The guest on the source and destination hosts must be started in the
     same way.
    </para>
   </listitem>
   <listitem>
    <para>
     <option>-snapshot</option> qemu command line option should not be used
     for migration (and this <command>qemu</command> command line option is
     not supported).
    </para>
   </listitem>
  </itemizedlist>

  <important>
   <title>Support Status</title>
   <para>
    The <literal>postcopy</literal> mode is not yet supported in
    &productname;.  It is released as a technology preview only.  For
    more information about <literal>postcopy</literal>, see <link xlink:href="http://wiki.qemu.org/Features/PostCopyLiveMigration"/>.
   </para>
  </important>


  <para>
   More recommendations can be found at the following Web site:
   <link xlink:href="http://www.linux-kvm.org/page/Migration"/>
  </para>

  <para>
   The live migration process has the following steps:
  </para>

  <procedure>
   <step>
    <para>
     The virtual machine instance is running on the source host.
    </para>
   </step>
   <step>
    <para>
     The virtual machine is started on the destination host in the frozen
     listening mode. The parameters used are the same as on the source host
     plus the <option>-incoming
     tcp:<replaceable>IP</replaceable>:<replaceable>PORT</replaceable></option>
     parameter, where <replaceable>IP</replaceable> specifies the IP address
     and <replaceable>PORT</replaceable> specifies the port for listening to
     the incoming migration. If 0 is set as IP address, the virtual machine
     listens on all interfaces.
    </para>
   </step>
   <step>
    <para>
     On the source host, switch to the monitor console and use the
     <command>migrate -d tcp:</command>
     <replaceable>DESTINATION_IP</replaceable>:<replaceable>PORT</replaceable>
     command to initiate the migration.
    </para>
   </step>
   <step>
    <para>
     To determine the state of the migration, use the <command>info
     migrate</command> command in the monitor console on the source host.
    </para>
   </step>
   <step>
    <para>
     To cancel the migration, use the <command>migrate_cancel</command>
     command in the monitor console on the source host.
    </para>
   </step>
   <step>
    <para>
     To set the maximum tolerable downtime for migration in seconds, use the
     <command>migrate_set_downtime</command>
     <replaceable>NUMBER_OF_SECONDS</replaceable> command.
    </para>
   </step>
   <step>
    <para>
     To set the maximum speed for migration in bytes per second, use the
     <command>migrate_set_speed</command>
     <replaceable>BYTES_PER_SECOND</replaceable> command.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="qemu.monitor.qmp">
  <title>QMP - &qemu; Machine Protocol</title>

  <para>
   QMP is a JSON-based protocol that allows applications&mdash;such as
   &libvirt;&mdash;to communicate with a running &qemu; instance.
   There are several ways you can access the &qemu; monitor using QMP
   commands.
  </para>

  <sect2 xml:id="sec.qemu.monitor.qmp.io">
   <title>Access QMP via Standard Input/Output</title>
   <para>
    The most flexible way to use QMP is by specifying the
    <option>-mon</option> option. The following example creates a QMP
    instance using standard input/output. Note that in the following
    examples, <literal>-&gt;</literal> marks lines with commands sent
    from client to the running &qemu; instance, while
    <literal>&lt;-</literal> marks lines with the output returned from
    &qemu;.
   </para>
<screen>&prompt.sudo;qemu-system-x86_64 [...] \
-chardev stdio,id=mon0 \
-mon chardev=mon0,mode=control,pretty=on

&lt;- {
    "QMP": {
        "version": {
            "qemu": {
                "micro": 0,
                "minor": 0,
                "major": 2
            },
            "package": ""
        },
        "capabilities": [
        ]
    }
}</screen>
   <para>
    When a new QMP connection is established, QMP sends its greeting message
    and enters capabilities negotiation mode. In this mode, only the
    <command>qmp_capabilities</command> command works. To exit capabilities
    negotiation mode and enter command mode, the
    <command>qmp_capabilities</command> command must be issued first:
   </para>
<screen>-&gt; { "execute": "qmp_capabilities" }
&lt;- {
    "return": {
    }
}</screen>
   <para>
    Note that <literal>"return": {}</literal> is a QMP's success response.
   </para>
   <para>
    QMP's commands can have arguments. For example to eject a CD-ROM drive,
    enter the following:
   </para>
<screen>-&gt;{ "execute": "eject", "arguments": { "device": "ide1-cd0" } }
&lt;- {
    "timestamp": {
        "seconds": 1410353381,
        "microseconds": 763480
    },
    "event": "DEVICE_TRAY_MOVED",
    "data": {
        "device": "ide1-cd0",
        "tray-open": true
    }
}
{
    "return": {
    }
}</screen>
  </sect2>

  <sect2 xml:id="sec.qemu.monitor.qmp.telnet">
   <title>Access QMP via Telnet</title>
   <para>
    Instead of the standard input/output, you can connect the QMP interface
    to a network socket and communicate with it via a specified port:
   </para>
<screen>&prompt.sudo;qemu-system-x86_64 [...] \
-chardev socket,id=mon0,host=localhost,port=4444,server,nowait \
-mon chardev=mon0,mode=control,pretty=on</screen>
   <para>
    And then run telnet to connect to port 4444:
   </para>
<screen>&prompt.user;telnet localhost 4444
Trying ::1...
Connected to localhost.
Escape character is '^]'.
&lt;- {
    "QMP": {
        "version": {
            "qemu": {
                "micro": 0,
                "minor": 0,
                "major": 2
            },
            "package": ""
        },
        "capabilities": [
        ]
    }
}</screen>
   <para>
    You can create several monitor interfaces at the same time. The
    following example creates one HMP instance&mdash;human monitor which
    understands 'normal' &qemu; monitor's commands&mdash;on the
    standard input/output, and one QMP instance on localhost port 4444:
   </para>
<screen>&prompt.sudo;qemu-system-x86_64 [...] \
-chardev stdio,id=mon0 -mon chardev=mon0,mode=readline \
-chardev socket,id=mon1,host=localhost,port=4444,server,nowait \
  -mon chardev=mon1,mode=control,pretty=on</screen>
  </sect2>

  <sect2 xml:id="sec.qemu.monitor.qmp.socket">
   <title>Access QMP via Unix Socket</title>
   <para>
    Invoke &qemu; using the <option>-qmp</option> option, and create a
    unix socket:
   </para>
<screen>&prompt.sudo;qemu-system-x86_64 [...] \
-qmp unix:/tmp/qmp-sock,server --monitor stdio

QEMU waiting for connection on: unix:./qmp-sock,server</screen>
   <para>
    To communicate with the &qemu; instance via the
    <literal>/tmp/qmp-sock</literal> socket, use <command>nc</command> (see
    <command>man 1 nc</command> for more information) from another terminal
    on the same host:
   </para>
<screen>&prompt.sudo;nc -U /tmp/qmp-sock
&lt;- {"QMP": {"version": {"qemu": {"micro": 0, "minor": 0, "major": 2} [...]</screen>
  </sect2>

  <sect2 xml:id="sec.qemu.monitor.qmp.virsh">
   <title>Access QMP via &libvirt;'s <command>virsh</command> Command</title>
   <para>
    If you run your virtual machines under &libvirt; (see
    <xref linkend="part.virt.libvirt"/>), you can communicate with its
    running guests by running the <command>virsh
    qemu-monitor-command</command>:
   </para>
<screen>&prompt.sudo;virsh qemu-monitor-command vm_guest1 \
--pretty '{"execute":"query-kvm"}'
&lt;- {
    "return": {
        "enabled": true,
        "present": true
    },
    "id": "libvirt-8"
}</screen>
   <para>
    In the above example, we ran the simple command
    <command>query-kvm</command> which checks if the host is capable of
    running &kvm; and if &kvm; is enabled.
   </para>
   <tip>
    <title>Generating Human-Readable Output</title>
    <para>
     To use the standard human-readable output format of &qemu;
     instead of the JSON format, use the <option>--hmp</option>
     option:
    </para>
<screen>&prompt.sudo;virsh qemu-monitor-command vm_guest1 --hmp "query-kvm"</screen>
   </tip>
  </sect2>
 </sect1>
</chapter>
