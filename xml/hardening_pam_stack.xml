<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1
    version="5.0" xml:id="sec.sec_prot.general.pam"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Leveraging an Effective PAM stack</title>

    <para>
     Linux-PAM (Pluggable Authentication Modules for Linux) is a suite of
     shared libraries that enable the local system administrator to choose
     how applications authenticate users.
    </para>

    <para>
     It is strongly recommended to familiarize oneself with the capabilities
     of PAM and how this architecture can be leveraged to provide the
     best authentication setup for an environment. This configuration can be
     done once – and implemented across all systems (a standard) or can be
     enhanced for individual hosts (enhanced security – by host / service
     / application). The key is to realize how flexible the architecture is.
    </para>

    <para>
     To learn more about the PAM architecture, find PAM documentation in
     the <filename>/usr/share/doc/packages/pam</filename> directory (in
     a variety of formats).
    </para>

    <para>
     The following discussions are examples of how to modify the default PAM
     stacks&mdash;specifically around password policies&mdash;for
     example password strength, password re-use and account locking. While
     these are only a few of the possibilities, they serve as a good start
     and demonstrate PAM's flexibility.
    </para>

    <sect2 xml:id="sec.sec_prot.general.pam.pw_strength">
     <title>Password Strength</title>
     <para>
      &productname; can leverage the
      <systemitem class="library">pam_cracklib</systemitem> library to test
      for weak passwords – and to suggest using a stronger one if it
      determines obvious weakness. The following parameters represent an
      example that could be part of a corporate password policy or something
      required because of audit constraints.
     </para>
     <para>
      The PAM libraries follow a defined flow. The best way to design the
      perfect stack usually is to consider all of the requirements and
      policies and draw out a flow chart.
     </para>
     <table>
      <title>Sample rules/constraints for password enforcement</title>
      <tgroup cols="3">
       <tbody>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>minlen=8</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum length of password is 8
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>lcredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of lowercase letters is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>ucredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of uppercase letters is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>dcredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of digits is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>ocredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of other characters is 1
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <para>
      To set up these password restrictions, use the
      <command>pam-config</command> tool and specify the parameters you want
      to configure. For example, the minimum length parameter could be
      modified like this:
     </para>
<screen>&prompt.user;sudo pam-config -a --cracklib-minlen=8 --cracklib-retry=3 \
--cracklib-lcredit=-1 --cracklib-ucredit=-1 --cracklib-dcredit=-1 \
--cracklib-ocredit=-1 --cracklib</screen>
     <para>
      Now verify that the new password restrictions work for new passwords.
      Simply login to a non-root account and change the password using the
      <command>passwd</command> command. Note that the above requirements
      are not enforced if you run the <command>passwd</command> command
      under root.
     </para>
    </sect2>

    <sect2 xml:id="sec.sec_prot.general.pam.pw_previous">
     <title>Restricting Use of Previous Passwords</title>
     <para>
      The pam_pwhistory module can be used to configure the number of
      previous passwords that cannot be reused. The following command
      implements password restrictions on a system so that a password cannot
      be reused for at least 6 months:
     </para>
     <screen>&prompt.user;sudo pam-config -a --pwhistory --pwhistory-remember=26</screen>
     <para>
      Recall that in the section
      <xref linkend="sec.sec_prot.general.pw_aging"/> we set
      <literal>PASS_MIN_DAYS</literal> to <literal>7</literal>, which
      specifies the minimum number of days allowed between password changes.
      Therefore, if <systemitem>pam_unix</systemitem> is configured to
      remember <literal>26</literal> passwords, then the previously used
      passwords cannot be reused for at least 6 months (26*7 days).
     </para>
     <para>
      The PAM configuration (<filename>/etc/pam.d/common-auth</filename>)
      resulting from the <command>pam-config</command> command looks like the
      following:
     </para>
     <screen>auth      required   pam_env.so
auth      required   pam_unix.so     try_first_pass
account   required   pam_unix.so     try_first_pass
password  requisit   pam_cracklib.so
password  required   pam_pwhistory.so        remember=26
password  optional   pam_gnome_keyring.so    use_authtok
password  required   pam_unix.so     use_authtok nullok shadow try_first_pass
session   required   pam_limits.so
session   required   pam_unix.so     try_first_pass
session   optional   pam_umask.so</screen>
     <tip>
      <para>
       Editing the PAM configuration files directly is not recommended. Use
       the <command>pam-config</command> command as shown above to fine-tune
       PAM. For more information see <command>man 8 pam-config</command>.
      </para>
     </tip>
    </sect2>

    <sect2 xml:id="sec.sec_prot.general.pam.lock_accounts">
     <title>Locking User Accounts After Too Many Login Failures</title>
     <para>
      It is not generally recommend that a host automatically locks system
      and shared accounts after too many failed login or su attempts. This
      could lead to outages if the application's account gets locked because
      of too many login failures like in this example for an Oracle shared
      account:
     </para>
<screen>&prompt.root;su oracle -c id
su: incorrect password</screen>
     <!-- bsc#977984 -->
     <para>
      This could be an easy target for a denial of service attack. The
      following example shows how to lock only individual user accounts
      after too many failed su or login attempts. Add the following line
      to the service files (such as <filename>/etc/pam.d/su</filename>
      or <filename>/etc/pam.d/login</filename>) that you want to
      configure (but not to
      <filename>/etc/pam.d/common-auth</filename>!):
     </para>
     <screen
>auth      required     pam_tally2.so deny=5 unlock_time=1200
[...]</screen>
     <para>
      The line counts failed login and failed su attempts for
      all user accounts except the root account. The accounts will
      be automatically unlocked after 1200 seconds.

      The default location for attempted accesses is recorded in
      <filename>/var/log/tallylog</filename>.
     </para>
     <para>
      If the user is authenticated and the login process continues on
      call to pam_setcred(3) it resets the attempts counter to 0.
     </para>
     <para>
      It is also possible to add the
      <literal>lock_time=<replaceable>N</replaceable></literal> parameter,
      and then optionally the
      <literal>unlock_time=<replaceable>N</replaceable></literal>
      parameter.

      For example, setting the <literal>lock_time=60</literal> would
      deny access for 60 seconds after a failed attempt. The
      <literal>unlock_time=<replaceable>N</replaceable></literal> option
      would then allow access after
      <literal><replaceable>N</replaceable></literal> seconds after an
      account has been locked. If this option is used the user will be
      locked out for the specified amount of time after he exceeded his
      maximum allowed attempts. Otherwise the account is locked until
      the lock is removed by a manual intervention of the system
      administrator. See the <literal>pam_tally2</literal> man page for
      more information.
     </para>
     <para>
      To exempt system and shared accounts from the
      <literal>deny=<replaceable>N</replaceable></literal> parameter,
      the <literal>per_user</literal> parameter was added to the
      module. The <literal>per_user</literal> parameter instructs the module
      <emphasis>not</emphasis> to use the
      <literal>deny=<replaceable>N</replaceable></literal> limit for
      accounts where the maximum number of login failures is set
      explicitly.  For example:
     </para>
<screen>&prompt.root;pam_tally2 -u oracle
Login      Failures Latest failure                 From
oracle     0        Fri Dec 10 23:57:55 -0600 2005 on unknown</screen>
     <para>
      To instruct the module to activate the
      <literal>deny=<replaceable>N</replaceable></literal> limit for this
      account again, run:
     </para>
<screen>pam_tally2 -u oracle deny=n</screen>
     <para>
      By default, the maximum number of login failures for each account is
      set to zero (0) which instructs pam_tally2 to leverage the
      <literal>deny=<replaceable>N</replaceable></literal> parameter. To see
      failed login attempts, run:
     </para>
<screen>pam_tally2</screen>
     <para>
      Test these changes thoroughly on your system using
      <command>ssh</command> and <command>su</command>, and make sure
      the &rootuser; id does not get locked! To lock or unlock accounts
      manually, run one of the following commands:
     </para>
     <variablelist>
      <varlistentry>
       <term>Locking</term>
       <listitem>
<screen>passwd -l <replaceable>USER</replaceable>
usermod -L <replaceable>USER</replaceable></screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Unlocking</term>
       <listitem>
<screen>passwd -u <replaceable>USER</replaceable>
usermod -U <replaceable>USER</replaceable></screen>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect2>
   </sect1>
