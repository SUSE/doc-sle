<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
  [
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="cha-docker-building-images" xml:lang="en"
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Creating Custom Container Images</title>
 <para>
  To create a custom image, you need a base image of &productname;. You can use
  any of the pre-built &productname; images.
 </para>
 <sect1 xml:id="sec-download-prebuild-images">
  <title>Pulling Base &slsa; Images</title>

  <para>
   To obtain a pre-built base image for &sle;&nbsp;12 SP3 and later, use the
   following command:
  </para>

<screen>
      &prompt.user;docker pull registry.suse.com/suse/
      <replaceable>IMAGENAME</replaceable>
    </screen>

  <para>
   For example, for &productname;&nbsp;15, the command is as follows:
  </para>

<screen>&prompt.user;docker pull registry.suse.com/suse/sle15</screen>

  <para>
   <literal>sle2docker</literal> is not required, because the image is being
   pulled from the &dreg;.
  </para>

  <para>
   For information on obtaining specific base images, refer to
   <xref
        linkend="sec-sle-base-images" /> .
  </para>

  <para>
   When the container image is ready, you can customize it as described in
   <xref linkend="sec-customize-prebuild-images"/> .
  </para>
 </sect1>
 <sect1 xml:id="sec-customize-prebuild-images">
  <title>Customizing &slsa; Container Images</title>

  <para>
   The pre-built images do not have any repositories configured and do not
   include any modules or extensions. They contain a
   <link xlink:href="https://github.com/SUSE/container-suseconnect"> zypper
   service </link> that contacts either the &sccreg; or a &rmtool; (&rmt;)
   server, according to the configuration of the &productname; host that runs
   the container. The service obtains the list of repositories available for
   the product used by the container image. You can also directly declare
   extensions in your <filename>Dockerfile</filename> . For more information,
   see
   <xref linkend="sec-docker-sle-images-customizing-the-images-extensions"/> .
  </para>

  <para>
   You do not need to add any credentials to the container image, because the
   machine credentials are automatically injected into the
   <literal>/run/secrets</literal> directory in the container by the
   <systemitem class="daemon">docker</systemitem> daemon. The same applies to
   the <filename>/etc/SUSEConnect</filename> file of the host system, which is
   automatically injected into the <filename>/run/secrets</filename> directory.
  </para>

  <note>
   <title>Credentials and Security</title>
   <para>
    The contents of the <filename>/run/secrets</filename> directory are never
    included in a container image, hence there is no risk of your credentials
    leaking.
   </para>
  </note>

  <note xml:id="note-build-images-different-codebase">
   <title>Building Images on Systems Registered with &rmt;</title>
   <para>
    When the host system used for building container images is registered with
    &rmt;, the default behavior allows only building containers of the same
    code base as the host. For example, if your container host is an
    &slea;&nbsp;15 system, you can only build &slea;&nbsp;15-based images on
    that host by default. To build images for a different &slea; version, for
    example &slea;&nbsp;12 on an &slea;&nbsp;15 host, the host machine
    credentials for the target release can be injected into the container as
    outlined below.
   </para>
   <para>
    When the host system is registered with &scc;, this restriction does not
    apply.
   </para>
  </note>

  <note>
   <title>Building Container Images in On-Demand &slea; Instances in the Public Cloud</title>
   <para>
    Building container images on &slea; instances that were launched as
    so-called <quote>on-demand</quote> or <quote>pay as you go</quote>
    instances on a public cloud (AWS, GCE, or Azure) requires additional steps.
    To install packages and updates, the <quote>on-demand</quote> public cloud
    instances are connected to update infrastructure. This infrastructure is
    based on &rmt; servers operated by &suse; on the various public cloud
    providers.
   </para>
   <para>
    Therefore, your machines need to locate the required services and
    authenticate with them. This can be done using the
    <literal>containerbuild-regionsrv</literal> service. This service is
    available in the public cloud images provided through the marketplaces of
    the various public cloud providers. Before building an image, this service
    must be started on the public cloud instance by running the following
    command:
   </para>
<screen>&prompt.sudo;systemctl start containerbuild-regionsrv</screen>
   <para>
    To start it automatically on system start-up, enable it:
   </para>
<screen>&prompt.sudo;systemctl enable containerbuild-regionsrv</screen>
   <para>
    The Zypper plug-ins provided by the &slea; base images connect to this
    service and retrieve authentication details and information about which
    update server to talk to. For this to work, the container has to be built
    with host networking enabled, for example:
   </para>
<screen>
        &prompt.user;docker build --network host
        <replaceable>build-directory/</replaceable>
      </screen>
   <para>
    Since update infrastructure in the public clouds is based upon &rmt;, the
    restrictions to building &slea; images for &slea; versions different from
    the &slea; version of the host apply as well (see
    <xref linkend="note-build-images-different-codebase"/> ).
   </para>
  </note>

  <para>
   To obtain the list of repositories, use the following command:
  </para>

<screen>&prompt.sudo;zypper ref -s</screen>

  <para>
   This automatically adds all the repositories to the container. For each
   repository added to the system, a new file will be created under
   <filename>/etc/zypp/repos.d</filename> . The URLs of these repositories
   include an access token that automatically expires after 12 hours. To renew
   the token, run the command <command>zypper ref -s</command> . Including
   these files in a container image does not pose any security risk.
  </para>

  <para>
   To use a different set of credentials, put a custom
   <filename>/etc/zypp/credentials.d/SCCcredentials</filename> file inside of
   the container image. It contains the machine credentials that have the
   subscription you want to use. The same applies to the
   <filename>SUSEConnect</filename> file: to override the existing file on the
   host system running the container, add a custom
   <filename>/etc/SUSEConnect</filename> file inside of the container image.
  </para>

  <para>
   Now you can create a custom container image by using a
   <literal>Dockerfile</literal> as described in
   <xref
        linkend="sec-docker-sle-images-customizing-the-images-sles12sp3"/>
  </para>

  <para>
   If you want to move your application to a container, see
   <xref linkend="cha-docker-containerize-app"/> .
  </para>

  <para>
   After you have edited the <filename>Dockerfile</filename> , build the image
   by running the following command in the same directory in which the
   <filename>Dockerfile</filename> resides:
  </para>

<screen>&prompt.user;docker build .</screen>

  <para>
   For more information about <literal>docker build</literal> options, see the
   <link
        xlink:href="https://docs.docker.com/engine/reference/commandline/build/">
   official Docker documentation </link> .
  </para>

  <note>
   <title>Creating Application Images</title>
   <para>
    For information about creating a <filename>Dockerfile</filename> for the
    application you want to run inside a container, see
    <xref linkend="cha-docker-containerize-app"/> .
   </para>
  </note>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-sles12sp3">
   <title>Creating a Custom Image for &slea;&nbsp;12 SP3 and Later</title>
   <para>
    The following <filename>Dockerfile</filename> creates a simple container
    image based on &productname;&nbsp;15:
   </para>
<screen>
        FROM registry.suse.com/suse/sle15

        RUN zypper ref -s
        RUN zypper -n in vim
      </screen>
   <para>
    When the &docker; host machine is registered with an internal &rmt; server,
    the image requires the SSL certificate used by &rmt;:
   </para>
<screen>
        FROM registry.suse.com/suse/sle15

        # Import the crt file of our private SMT server
        ADD http://smt.<replaceable>&exampledomain;</replaceable>/smt.crt /etc/pki/trust/anchors/smt.crt
        RUN update-ca-certificates

        RUN zypper ref -s
        RUN zypper -n in vim
      </screen>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-metainfo">
   <title>Meta Information in &slea; Container Images</title>
   <para>
    Starting with &sle; 12&nbsp;SP3, all base container images include
    information such as a build time-stamp and description. This information is
    provided in the form of labels attached to the base images, and is
    therefore available for derived images and containers (see <xref
    linkend="sec-labels"/> ). This information can be viewed with
    <command>docker inspect</command> :
   </para>
<screen>
        &prompt.user;docker inspect registry.suse.com/suse/sle15
        [...]
        "Labels": {
        "com.suse.sle.base.created": "2019-06-20T18:21:37.729383880Z",
        "com.suse.sle.base.description": "Image containing a minimal environment for containers based on SUSE Linux Enterprise Server 15 SP1.",
        "com.suse.sle.base.disturl": "obs://build.suse.de/SUSE:SLE-15-SP1:Update:CR/images/20efed47827dc48da9537c1aeed4dbe2-sles15-image",
        "com.suse.sle.base.reference": "registry.suse.com/suse/sle15:15.1.6.2.31",
        "com.suse.sle.base.title": "SUSE Linux Enterprise Server 15 SP1 Base Container",
        "com.suse.sle.base.url": "https://www.suse.com/products/server/",
        "com.suse.sle.base.vendor": "SUSE LLC",
        "com.suse.sle.base.version": "15.1.6.2.31",
        "org.openbuildservice.disturl": "obs://build.suse.de/SUSE:SLE-15-SP1:Update:CR/images/20efed47827dc48da9537c1aeed4dbe2-sles15-image",
        "org.opencontainers.image.created": "2019-06-20T18:21:37.729383880Z",
        "org.opencontainers.image.description": "Image containing a minimal environment for containers based on SUSE Linux Enterprise Server 15 SP1.",
        "org.opencontainers.image.title": "SUSE Linux Enterprise Server 15 SP1 Base Container",
        "org.opencontainers.image.url": "https://www.suse.com/products/server/",
        "org.opencontainers.image.vendor": "SUSE LLC",
        "org.opencontainers.image.version": "15.1.6.2.31",
        "org.opensuse.reference": "registry.suse.com/suse/sle15:15.1.6.2.31"
        }
        [...]
      </screen>
   <para>
    All labels are shown twice, to ensure that in derived images, the
    information about the original base image is still visible and not
    overwritten.
   </para>
  </sect2>

  <sect2 xml:id="sec-docker-sle-images-customizing-the-images-extensions">
   <title>Adding &slea; Extensions and Modules to Images</title>
   <para>
    If you have subscriptions to &productname; extensions or modules that you
    would like to use in your custom image, you can add them to the container
    image by specifying the <literal>ADDITIONAL_MODULES</literal> environment
    variable:
   </para>
<screen>ENV ADDITIONAL_MODULES sle-module-desktop-applications,sle-module-development-tools</screen>
  </sect2>
 </sect1>
<!-- This section is incomplete as such a solution is not currently supported
 by SLES. -->
<!--
 <sect1 xml:id="Automating-Images-Builds">
   <title>Automation of Images Building</title>
   <para>
    In enterprise environment you typically need to automate your deployment
    process, from developer's commits to running the application. In case you
    use your own dockerregistry, you need to set up a pipeline between the
    versioning system and your private registry. To set up a pipeline you
    need to perform the following steps:
   </para>
   <orderedlist>
    <listitem>
     <para>
     configure your versioning system to use hooks.
     </para>
    </listitem>
    <listitem>
     <para>
      choose any of continuous integration tools to receive the hooks and
      then to perform the build process.
     </para>
    </listitem>
    <listitem>
     <para>
      upload the built image to your docker registry.
     </para>
    </listitem>
   </orderedlist>
   <sect2 xml:id="Configuring-Versioning-System">
    <title>Configuring Versioning Systems</title>
    <para>
     Most of the currently used versioning systems enables you to configure
     hooks. As soon as you perform a particular action, the versioning system
     sends information to the continuos integration tool that a build should
     be performed. For example, in case of git used with Github, Github sends
     a <literal>POST</literal> request to configured URLs. You can select
     from various types of triggering events or use the default one -
     <literal>push</literal> to a configured branch.
    </para>
    <para>
     Your repository must contain besides your application source code, also
     a particular <filename>Dockerfile<filename> that defines your image.
    </para>
   </sect2>
 </sect1>
 -->
</chapter>
