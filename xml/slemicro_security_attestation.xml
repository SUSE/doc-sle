<?xml version="1.0"?>
<!DOCTYPE chapter [
  <!ENTITY % entities SYSTEM "generic-entities.ent">
  %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-attestation">
 <info xmlns:d="http://docbook.org/ns/docbook">
  <title>Remote attestation using Keylime</title>
  <abstract>
   <para>
    This chapter focuses on the remote attestation of &slema; using the
    <emphasis>Keylime</emphasis> agent.
   </para>
  </abstract>
 <revhistory xml:id="rh-cha-security-attestation">
   <revision>
     <date>2022-10-17</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>
 <para>
  With the growing demand on securing devices against unauthorized changes, the
  use of the security mechanism called <emphasis>remote attestation
  (RA)</emphasis> has been experiencing significant growth. Using RA, a host
  (client) can authenticate its boot chain status and running software on a
  remote host (verifier). <emphasis>Remote attestation</emphasis> is usually
  combined with public-key encryption (by using TPM2), thus the sent
  information can only be read by the services that requested the attestation,
  and the validity of the data can be verified.
 </para>
 <para>
  Throughout this document, the following terms are used:
 </para>
 <variablelist>
  <title>Terminology</title>
  <varlistentry>
   <term>Attestation key (AK)</term>
   <listitem>
    <para>
     is a data signing key that proves that the data comes from a real TPM and
     has not been tampered with.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Core root of trust for measurement</term>
   <listitem>
    <para>
     is a starting point of the boot process that cannot be altered and
     calculates the first hash of the layer above.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Endorsement key (EK)</term>
   <listitem>
    <para>
     is an encryption key that is permanently embedded in the TPM when it is
     manufactured. The public part of the key is used to recognize a genuine
     TPM.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Integrity management architecture (IMA)</term>
   <listitem>
    <para>
     the kernel integrity subsystem that provides a means of detecting
     malicious changes to files.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Measured boot</term>
   <listitem>
    <para>
     in this method, each component in the booting sequence calculates a hash
     of the next one before delegating the execution of the next component. The
     hash extends one or several PCRs of the TPM. An event is created with the
     information about where the measurement took place and what was measured.
     Such events are collected in an event log, and, along with the extended
     PCR values, the events can be compared with the expected values
     representing a healthy system.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Platform Configuration Register (PCR)</term>
   <listitem>
    <para>
     is a memory location in TPM that, for example, stores hashes of booting
     layers. PCR can be updated only by using the non-reversible
     operation&mdash;<literal>extend</literal>. A signed list of current PCR
     values can be obtained by the <command>quote</command> command on TPM, and
     this quote can be verified by a third party during the attestation
     process.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Secure boot</term>
   <listitem>
    <para>
     each step of the booting process checks a cryptographic signature on the
     executable of the next step before launching it.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Trusted Platform Module (TPM)</term>
   <listitem>
    <para>
     is a self-contained security cryptographic processor present in the system
     as hardware or implemented in the firmware that serves as a root of trust.
     TPM provides a PCR for storing the hashes of booting layers. A typical TPM
     provides several functions, like a random number generator, counters, or a
     local clock. It also stores 24 PCRs, grouped by banks per each supported
     cryptographic hash function (SHA1, SHA256, SHA384, or SHA512).
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  Usually, by default, TPM usage is disabled. Therefore, the measured boot does
  not take place. To enable the remote attestation, enable TPM in the EFI/BIOS
  menu.
 </para>
 <section xml:id="sec-keylime-about">
  <title>About <emphasis>Keylime</emphasis></title>
  <para>
   <emphasis>Keylime</emphasis> is a remote attestation solution that enables
   you to monitor the health of remote nodes using a TPM as a root of trust for
   measurement. With <emphasis>Keylime</emphasis>, you can perform several
   tasks like validation of the PCRs extended during the measured boot,
   analysis and assertions of the event log, assertion of the value of any PCR
   in the remote system, and also monitoring the validity of open or executed
   files.
  </para>
  <para>
   <emphasis>Keylime</emphasis> also provides a framework for delivering
   encrypted data to verified nodes. This data is the so-called payload. The
   framework can also execute custom scripts that are triggered when a machine
   fails the attested measurements.
  </para>
  <para>
   <emphasis>Keylime</emphasis> consists of an agent, a verifier, a registrar,
   and a command-line tool (tenant). Agents are on those systems that need to
   be attested. The verifier and registrar are on remote systems that perform
   the registration and attestation of agents. Keep in mind that only the agent
   role is available on &slema;. For details about each component, refer to the
   following sections.
  </para>
  <section xml:id="sec-keylime-agent">
   <title><emphasis>Keylime</emphasis> agent</title>
   <para>
    The agent is a service that runs on the system that needs to be attested.
    The agent sends the event log, IMA hashes, and information about the
    measured boot to the verifier, using the local TPM as a certifier of the
    data validity.
   </para>
   <para>
    When a new agent is started, the agent needs to register itself in the
    registrar first. To do so, the agent needs a TLS certificate to establish
    the connection. The TLS certificate is generated by the registrar, but it
    needs to be installed manually to the agent. After the registration, the
    agent sends its attestation key and the public part of the endorsement key
    to the registrar. The registrar responds to the agent with a challenge in a
    process called credential activation, which will validate the TPM of the
    agent. Once the agent has been registered, it is ready to be enrolled for
    attestation.
   </para>
  </section>
  <section xml:id="sec-keylime-registrar">
   <title><emphasis>Keylime</emphasis> registrar</title>
   <para>
    The registrar is used to register agents that should be attested. The
    registrar collects the agent's attestation key, the public part of the
    endorsement key and the endorsement key certification, and verifies that
    the agent attestation key belongs to the endorsement key.
   </para>
  </section>
  <section xml:id="sec-keylime-verifier">
   <title><emphasis>Keylime</emphasis> verifier</title>
   <para>
    The verifier performs the actual attestation of agents and continuously
    pulls the required attestation data from agents (amongst others, the PCR
    values, IMA logs, and UEFI event logs).
   </para>
  </section>
 </section>
 <section xml:id="sec-setup-verifier">
  <title>Setting up the verifier and registrar</title>
  <para>
   Before you start installing and registering agents, prepare the verifier and
   the registrar on remote hosts as described in the following procedure.
  </para>
  <procedure>
   <step>
    <para>
     Check the content of configuration files in
     <filename>/usr/etc/keylime/*.conf</filename>. The defaults are usually
     sufficient without any changes, but if you need to adjust the
     configuration, add the changes to either
     <filename>/etc/keylime/verifier.conf.d/</filename> or
     <filename>/etc/keylime/registrar.conf.d/</filename>. Set the ownership to
     <literal>keylime:tss</literal> and change the permissions as follows (for
     the verifier node):
    </para>
<screen>&prompt.root;chown -R keylime:tss /etc/keylime/verifier.conf.d/

&prompt.root;chmod -R 600 /etc/keylime/verifier.conf.d/
    </screen>
    <!--
     <itemizedlist>
     <listitem>
     <para>
     <literal>require_ek_cert</literal> in the <literal>[tenant]</literal>
     section - if you do not have the root certificate for the endorsement
     key, set this value to <literal>false</literal>.
     </para>
     </listitem>
     <listitem>
     <para>
     <literal>ek_check_script</literal> if you set
     <literal>require_ek_cert</literal> to <literal>false</literal>, provide
     a script that checks the provided EK against an signed allow list, for
     example, a list of EK public key hashes.
     </para>
     </listitem>
     <listitem>
     <para>
     in the section <literal>[ca]</literal>, edit the options prefixed with
     <literal>cert_</literal> to suit your needs.
     </para>
     </listitem>
     </itemizedlist>
     -->
   </step>
   <step>
    <para>
     Start and enable the verifier service:
    </para>
<screen>&prompt.root;systemctl enable --now keylime_verifier.service</screen>
    <para>
     Starting the service generates certificates that are further required by
     the registrar.
    </para>
   </step>
   <step>
    <para>
     If the previous command completes successfully, you can start and enable
     the registrar service:
    </para>
<screen>&prompt.root;systemctl enable --now keylime_registrar.service</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="sec-install-keylime">
  <title>Installing the <emphasis>Keylime</emphasis> agent</title>
  <para>
   The <emphasis>Keylime</emphasis> agent is not present on &slema; by default,
   you need to install it manually. To install the agent, proceed as follows:
  </para>
  <procedure>
   <step>
    <para>
     Install the <literal>rust-keylime</literal> package as follows:
    </para>
<screen>&prompt.root;transactional-update pkg in rust-keylime</screen>
   </step>
   <step>
    <para>
     Reboot your system.
    </para>
   </step>
   <step>
    <para>
     Adjust the default agent's configuration.
    </para>
    <substeps>
     <step>
      <para>
       Create a directory to store a new configuration file for your changes in
       <filename>/etc/keylime/agent.conf.d/</filename>. The default
       configuration is stored in
       <filename>/usr/etc/keylime/agent.conf</filename>, but we do not
       recommend editing this file, because it might get overwritten with next
       system updates.
      </para>
<screen>&prompt.root;mkdir -p /etc/keylime/agent.conf.d</screen>
     </step>
     <step>
      <para>
       Create a new file
       <filename>/etc/keylime/agent.conf.d/agent.conf</filename>:
      </para>
<screen>&prompt.root;cat &lt;&lt; EOF &gt; /etc/keylime/agent.conf.d/agent.conf
 [agent]
 
 uuid = "d111ec46-34d8-41af-ad56-d560bc97b2e8"
 registrar_ip = "<replaceable>&lt;REMOTE_IP&gt;</replaceable>"
 revocation_notification_ip = "<replaceable>&lt;REMOTE_IP&gt;</replaceable>"
 EOF</screen>
      <para>
       where:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <literal>uuid</literal> is generated each time the agent is run.
         However, you can define a specific value by this option.
        </para>
       </listitem>
       <listitem>
        <para>
         <replaceable>&lt;REMOTE_IP&gt;</replaceable> is an IP address of the
         registrar.
        </para>
       </listitem>
       <listitem>
        <para>
         <replaceable>&lt;REMOTE_IP&gt;</replaceable> is an IP address of the
         verifier.
        </para>
       </listitem>
      </itemizedlist>
     </step>
     <step>
      <para>
       Change the owner of the <filename>/etc/keylime/</filename> directory to
       <literal>keylime:tss</literal>:
      </para>
<screen>&prompt.root;chown -R keylime:tss /etc/keylime</screen>
     </step>
     <step>
      <para>
       Change permissions on the <filename>/etc/keylime/</filename> directory:
      </para>
<screen>&prompt.root;chmod -R 600 /etc/keylime</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Copy the certificates generated by the CA to the agent node. On the agent
     node, run:
    </para>
    <substeps>
     <step>
      <para>
       Prepare a directory for the certificate:
      </para>
<screen>&prompt.root;mkdir -p /var/lib/keylime/cv_ca</screen>
     </step>
     <step>
      <para>
       Copy the certificate to the agent:
      </para>
<screen>&prompt.root;scp <replaceable>CERT_SERVER_ADDRESS</replaceable>:/var/lib/keylime/cv_ca/cacert.crt /var/lib/keylime/cv_ca</screen>
     </step>
     <step>
      <para>
       Change the owner of the certificate to <literal>keylime</literal>:
      </para>
<screen>&prompt.root;chown -R keylime:tss /var/lib/keylime/cv_ca</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Start and enable the <literal>keylime_agent.service</literal>:
    </para>
<screen>&prompt.root;systemctl enable --now keylime_agent.service</screen>
   </step>
  </procedure>
 </section>
 <section xml:id="sec-keyline-registration">
  <title>Registering agents</title>
  <note>
   <title>&slema; does not provide the tenant, registrar or verifier</title>
   <para>
    &slema; provides only the <emphasis>Keylime</emphasis> agent capability,
    therefore, the tasks performed in this chapter cannot be performed from
    your &slema;.
   </para>
  </note>
  <para>
   You can register a new agent either by using the CLI tenant or by editing
   the configuration of the verifier. Using the tenant on the verifier host,
   run the following:
  </para>
<screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
                -t <replaceable>AGENT</replaceable> \
                -u <replaceable>UUID</replaceable> \
                --cert default \
                -c add
                [--include <replaceable>PATH_TO_ZIP_FILE</replaceable>]</screen>
  <para>
   Where:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <replaceable>AGENT</replaceable> is an IP address of the agent to be
     registered.
    </para>
   </listitem>
   <listitem>
    <para>
     <replaceable>UUID</replaceable> is the agent's UUID.
    </para>
   </listitem>
   <listitem>
    <para>
     the file passed by the <option>include</option> option is used to deliver
     secret payload data to the agent. For details, refer to
     <xref linkend="keylime-payload"/>.
    </para>
   </listitem>
  </itemizedlist>
  <!--
   <para>
   Alternatively, to register the agent, add the agent's UUID into the
   verifier's <filename>/etc/keylime.conf</filename> file as follows:
   </para>
   <screen>agent_uuid = d432fbb3-d2f1-4a97-9ef7-75bd81c00000</screen>
   -->
  <para>
   You can list registered agents by using the <command>reglist</command>
   command on the verifier host as follows:
  </para>
<screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
                --cert default \
                -c reglist</screen>
  <para>
   To remove a registered agent, specify the agent using the
   <option>-t</option> and <option>-u</option> options and the <option>-c
   delete</option> command as follows:
  </para>
<screen>&prompt.root;keylime_tenant -v 127.0.0.1 \
              -t <replaceable>AGENT</replaceable> \
              -u <replaceable>UUID</replaceable> \
              -c delete</screen>
 </section>
 <section xml:id="keylime-payload">
  <title>Secure payloads</title>
  <para>
   A secure payload enables you to deliver encrypted data to healthy agents.
   Typically, these payloads are used to provide keys, passwords, certificates,
   configurations, or scripts that are further used by the agent.
  </para>
  <para>
   The secure payload is delivered to the agent in a <filename>zip</filename>
   file that must contain a shell script&mdash;<filename>autorun.sh</filename>.
   The script will be executed only if the agent has been properly registered
   and verified. To deliver the <filename>zip</filename> file, use the
   <option>--include</option> option of the <command>keylime_tenant</command>
   command.
  </para>
  <para>
   The script <filename>autorun.sh</filename> contains steps that will enable
   the use of passwords, certificates and so on. For example, the script can
   create a directory structure and copy SSH keys there:
  </para>
<screen>#!/bin/bash
 
 mkdir -p /root/.ssh/
 cp id_rsa* /root/.ssh/
 chmod 600 /root/.ssh/id_rsa*
 cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys</screen>
  <para>
   In this case, do not forget to include the SSH keys in the
   <filename>zip</filename> file.
  </para>
 </section>
 <section xml:id="enable-ima-tracking">
  <title>Enabling IMA tracking</title>
  <para>
   When using IMA, the kernel calculates a hash of accessed files. The hash is
   then used to extend the PCR 10 in the TPM and also log a list of
   accessed files. The verifier can request a signed quote to the agent for PCR
   10 to get the logs of all accessed files including the file hashes.
   Verifiers then compare the accessed files with a local allowlist of approved
   files. If any of the hashes are not recognized, the system is considered
   unsafe, and a revocation event is triggered.
  </para>
  <para>
   For a high-level overview of IMA/EVM, refer to
   <link xlink:href="https://en.opensuse.org/SDB:Ima_evm#Introduction">IMA/EVM
   introduction</link>.
  </para>
  <para>
   Before <emphasis>Keylime</emphasis> can collect information, IMA/EVM needs
   to be enabled. To enable the process, boot a kernel of the agent with the
   parameters: <literal>ima_appraise=log</literal> and
   <literal>ima_policy=tcb</literal>. To use the boot parameters on boot,
   proceed as follows:
  </para>
  <procedure>
   <step>
    <para>
     Update the <option>GRUB_CMDLINE_LINUX_DEFAULT</option> option with the
     parameters in <filename>/etc/default/grub</filename>:
    </para>
<screen>GRUB_CMDLINE_LINUX_DEFAULT="ima_appraise=log ima_policy=tcb"</screen>
   </step>
   <step>
    <para>
     Regenerate <filename>grub.cfg</filename> by running:
    </para>
<screen>&prompt.root;transactional-update grub.cfg</screen>
   </step>
   <step>
    <para>
     Reboot your system.
    </para>
   </step>
  </procedure>
  <para>
   The procedure above uses the default kernel IMA policy, but we recommend
   creating a new policy to avoid monitoring too many files and therefore
   creating long logs. For details, refer to the
   <link xlink:href="https://keylime-docs.readthedocs.io/en/latest/user_guide/runtime_ima.html"><emphasis>Keylime</emphasis>
   documentation</link>.
  </para>
  <para>
   To indicate the expected hashes, use the <option>--allowlist</option>option
   of the <command>keylime_tenant</command> command when registering the agent.
   To view the excluded or ignored files, use the <option>--exclude</option>
   option of the <command>keylime_tenant</command> command:
  </para>
<screen>&prompt.root;keylime_tenant --allowlist
    -v 127.0.0.1 \
    -u <replaceable>UUID</replaceable> 
  </screen>
 </section>
</chapter>
