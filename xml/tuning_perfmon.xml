<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<!--
 http://perfmon2.sourceforge.net/
 http://kerneltrap.org/node/5997
 http://www.iop.org/EJ/article/1742-6596/119/4/042017/jpconf8_119_042017.pdf

 Info Provider:
 * Tony Jones <tonyj@suse.de>
 * Vojtech Pavlik <vojtech@suse.cz>

 Version:
 * SLE11 SP1: perf-2.6.32.12-2.3.9.x86_64
 * SLE11 SP2: perf-3.0.6-2.6.91.x86_64

-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.tuning.perfmon2">
 <title>Perfmon2&mdash;Hardware-Based Performance Monitoring</title>
 <info>
      <abstract>
        <para>
    Perfmon2 is a standardized, generic interface to access the performance
    monitoring unit (PMU) of a processor. It is portable across all PMU
    models and architectures, supports system-wide and per-thread
    monitoring, counting and sampling.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec.tuning.perfmon2.overview">
  <title>Conceptual Overview</title>

  <para>
   The following subsections give you a brief overview about Perfmon.
  </para>

  <sect2 xml:id="sec.tuning.perfmon2.structure">
   <title>Perfmon2 Structure</title>
   <para>
    Performance monitoring is <quote>the action of collecting information
    related to how an application or system performs</quote>. The
    information can be obtained from the code or the CPU/chipset.
   </para>
   <para>
    Modern processors contain a performance monitoring unit (PMU). The
    design and functionality of a PMU is CPU specific: for example, the
    number of registers, counters and features supported will vary by CPU
    implementation.
   </para>
   <para>
    The Perfmon interface is designed to be generic, flexible and
    extensible. It can monitor at the program (thread) or system levels. In
    either mode, it is possible to count or sample your profile information.
    This uniformity makes it easier to write portable tools.
    <xref linkend="fig.tuning.perfmon2.arch"/> gives an overview.
   </para>
   <figure xml:id="fig.tuning.perfmon2.arch">
    <title>Architecture of perfmon2</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata width="50%" fileref="perfmon.svg"/>
     </imageobject>
     <imageobject role="html">
      <imagedata width="45%" fileref="perfmon.png"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    Each PMU model consists of a set of registers: the performance monitor
    configuration (PMC) and the performance monitor data (PMD). Only PMCs
    are writeable, but both can be read. These registers store configuration
    information and data.
   </para>
   <remark>TODO FUTURE (2010-04-27): Discuss libpfm</remark>
   <remark>toms 2010-04-15: Mention here /sys/kernel/perfmon/*?</remark>
  </sect2>

  <sect2 xml:id="sec.tuning.perfmon2.sample_and_counting">
   <title>Sampling and Counting</title>
   <para>
    Perfmon2 supports two modes where you can run your profiling: sampling
    or counting.
   </para>
   <remark>2010-04-27: From TonyJ:
   Except perfmon doesn'r really support time based sampling,  you
   can emulate it by using an event that has a correlation to time:
   http://www.mail-archive.com/perfmon2-devel@lists.sourceforge.net/msg01067.html
   </remark>
   <para>
    <emphasis>Sampling</emphasis> is usually expressed by an interval of
    time (time-based) or an occurance of a definied number of events
    (event-based). Perfmon indirectly supports time-based sampling by using
    an event-based sample with constant correlation to time (for example,
    <literal>unhalted_reference_cycles</literal>.)
   </para>
   <para>
    In contrast, <emphasis>Counting</emphasis> is expressed in terms of a
    number of occurances of an event.
    <remark>Is counting the same than Event-Based Sampling
     (EBS)?</remark>
   </para>
   <para>
    Both methods store their information into a <emphasis>sample</emphasis>.
    This sample contains information about, for example, where a thread was
    or instruction pointers.
   </para>
   <para>
    The following example demonstrates the counting of the
    <literal>CPU_OP_CYCLES</literal> event and the sampling of this event,
    generating a sample per 100000 occurances of the event:
   </para>
<screen>pfmon --no-cmd-output -e CPU_OP_CYCLES_ALL /bin/ls
1306604 CPU_OP_CYCLES_ALL</screen>
   <para>
    The following command gives the count of a specific function and the
    procentual amount of the total cycles:
   </para>
<screen>pfmon --no-cmd-output --short-smpl-periods=100000   -e CPU_OP_CYCLES_ALL /bin/ls
# results for [28119:28119&lt;-[28102]] (/bin/ls)
# total samples          : 12
# total buffer overflows : 0
#
#                   event00
#     counts   %self    %cum          code addr
           1   8.33%   8.33% 0x2000000000007180
           1   8.33%  16.67% 0x20000000000195a0
           1   8.33%  25.00% 0x2000000000019260
           1   8.33%  33.33% 0x2000000000014e60
           1   8.33%  41.67% 0x20000000001f38c0
           1   8.33%  50.00% 0x20000000001ea481
           1   8.33%  58.33% 0x200000000020b260
           1   8.33%  66.67% 0x2000000000203490
           1   8.33%  75.00% 0x2000000000203360
           1   8.33%  83.33% 0x2000000000203440
           1   8.33%  91.67% 0x4000000000002690
           1   8.33% 100.00% 0x20000000001cfdf1</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.tuning.perfmon2.install">
  <title>Installation</title>

  <para>
   To use Perfmon2, first check the following preconditions:
  </para>

  <variablelist>
   <varlistentry>
    <term>&sle; 11</term>
    <listitem>
     <para>
      Supported architectures are IA64, x86_64. The package
      <systemitem class="resource">perf</systemitem> (Performance Counters
      for Linux) is the supported tool for x86 and PPC64
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&sle; 11 SP1</term>
    <listitem>
     <para>
      Supported architecture is IA64 only
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The <command>pfmon</command> on &sle; 11 supports the following
   processors (taken from
   <filename>/usr/share/doc/packages/pfmon/README</filename>):
  </para>

  <table xml:id="tab.tuning.perfmon2.cpu">
   <title>Supported Processors</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>
        Model
       </para>
      </entry>
      <entry>
       <para>
        Processor
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Intel IA-64
       </para>
      </entry>
      <entry>
       <para>
        Itanium (Merced), Itanium 2 (McKinley, Madison, Deerfield), Itanium
        2 9000/9100 (Montecito, Montvale) and Generic
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        AMD X86
       </para>
      </entry>
      <entry>
       <para>
        Opteron (K8, fam 10h)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Intel X86
       </para>
      </entry>
      <entry>
       <para>
        Intel P6 (Pentium II, Pentium Pro, Pentium III, Pentium M); Yonah
        (Core Duo, Core Solo); Netburst (Pentium 4, Xeon); Core (Merom,
        Penryn, Dunnington) Core 2 and Quad; Atom; Nehalem; architectural
        perfmon v1, v2, v3
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   Install the following packages depending on your architecture:
  </para>

  <table xml:id="tab.tuning.perfmon2.packages">
   <title>Needed Packages</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>
        Architecture
       </para>
      </entry>
      <entry>
       <para>
        Packages
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        ia64
       </para>
      </entry>
      <entry>
       <para>
        <systemitem class="resource">pfmon</systemitem>
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>
 <sect1 xml:id="sec.tuning.perfmon2.using">
  <title>Using Perfmon</title>

  <para>
   To use Perfmon, use the command line tool
   <command>pfmon</command> to get all your information.
  </para>

  <note>
   <title>Mutual Exclusion of Perfmon and &oprof; Sessions</title>
   <para>
    On x86 architectures it is not possible to start a Perfmon session and
    an &oprof; session. Only one can be run at the same time.
   </para>
  </note>

  <sect2 xml:id="sec.tuning.perfmon2.geteventinfo">
   <title>Getting Event Information</title>
   <para>
    To get a list of supported events, use the option <option>-l</option>
    from <command>pfmon</command> to list them. Keep in mind, this list
    depends on the host PMU:
   </para>
   <remark>toms 2010-04-15: What does all the entries mean? Is there any
    link/document available which describes these in detail?</remark>
<screen>pfmon -l
ALAT_CAPACITY_MISS_ALL
ALAT_CAPACITY_MISS_FP
ALAT_CAPACITY_MISS_INT
BACK_END_BUBBLE_ALL
BACK_END_BUBBLE_FE
BACK_END_BUBBLE_L1D_FPU_RSE
...
CPU_CPL_CHANGES_ALL
CPU_CPL_CHANGES_LVL0
CPU_CPL_CHANGES_LVL1
CPU_CPL_CHANGES_LVL2
CPU_CPL_CHANGES_LVL3
CPU_OP_CYCLES_ALL
CPU_OP_CYCLES_QUAL
CPU_OP_CYCLES_HALTED
DATA_DEBUG_REGISTER_FAULT
DATA_DEBUG_REGISTER_MATCHES
DATA_EAR_ALAT
...</screen>
   <para>
    Get an explanation of these entries with the option <option>-i</option>
    and the event name:
   </para>
<screen>pfmon -i CPU_OP_CYCLES_ALL
Name     : CPU_OP_CYCLES_ALL
Code     : 0x12
Counters : [ 4 5 6 7 8 9 10 11 12 13 14 15 ]
Desc     : CPU Operating Cycles -- All CPU cycles counted
Umask    : 0x0
EAR      : None
ETB      : No
MaxIncr  : 1  (Threshold 0)
Qual     : None
Type     : Causal
Set      : None</screen>
<!-- <para>To list sub-events and unit masks, use the <option>-L</option>
    option. The <command>pfmon</command> utility prints event name,
    colon, and one of its unit masks, if available.</para>-->
  </sect2>

  <sect2 xml:id="sec.tuning.perfmon2.systemwidesessions">
   <title>Enabling System-Wide Sessions</title>
   <para>
    Use the <option>--system-wide</option> option to enable monitoring all
    processes that execute on a specific CPU or sets of CPUs. You do not
    need to be &rootuser; to do so; per default, user level is turned on
    for all events (option <option>-u</option>).
   </para>
   <para>
    It is possible that one system-wide session can run concurrently with
    other system-wide sessions as long as they do not monitor the same set
    of CPUs. However, you cannot run a system-wide session together with any
    per-thread session.
   </para>
   <para>
    The following examples are taken from an Itanium IA64 Montecito
    processor. To execute a system-wide session, perform the following
    procedure:
   </para>
   <procedure>
    <step>
     <para>
      Detect your CPU set:
     </para>
<screen>pfmon -v --system-wide
...
selected CPUs (2 CPU in set, 2 CPUs online): CPU0 CPU1</screen>
    </step>
    <step>
     <para>
      Delimit your session. The following list describes options which are
      used in the examples below (refer to the man page for more details):
     </para>
     <variablelist>
      <varlistentry>
       <term><option>-e</option>/<option>--events</option>
       </term>
       <listitem>
        <para>
         Profile only selected events. See
         <xref linkend="sec.tuning.perfmon2.geteventinfo"/> for how to get a
         list.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>--cpu-list</option>
       </term>
       <listitem>
        <para>
         Specifies the list of processors to monitor. Without this option,
         all available processors are monitored.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><option>-t</option>/<option>--session-timeout</option>
       </term>
       <listitem>
        <para>
         Specifies the duration of the monitor session expressed in seconds.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Use one of the three methods to start your profile session.
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        Use the default events:
       </para>
<screen>pfmon --cpu-list=0-2 --system-wide -k -e CPU_OP_CYCLES_ALL,IA64_INST_RETIRED
&lt;press ENTER to stop session&gt;
CPU0                       7670609 CPU_OP_CYCLES_ALL
CPU0                       4380453 IA64_INST_RETIRED
CPU1                       7061159 CPU_OP_CYCLES_ALL
CPU1                       4143020 IA64_INST_RETIRED
CPU2                       7194110 CPU_OP_CYCLES_ALL
CPU2                       4168239 IA64_INST_RETIRED</screen>
       <para/>
      </listitem>
      <listitem>
       <para>
        Use a timeout expressed in seconds:
       </para>
<screen>pfmon --cpu-list=0-2 --system-wide --session-timeout=10 -k -e CPU_OP_CYCLES_ALL,IA64_INST_RETIRED
&lt;session to end in 10 seconds&gt;
CPU0                      69263547 CPU_OP_CYCLES_ALL
CPU0                      38682141 IA64_INST_RETIRED
CPU1                      87189093 CPU_OP_CYCLES_ALL
CPU1                      54684852 IA64_INST_RETIRED
CPU2                      64441287 CPU_OP_CYCLES_ALL
CPU2                      37883915 IA64_INST_RETIRED</screen>
      </listitem>
      <listitem>
       <para>
        Execute a command. The session is automatically started when the
        program starts and automatically stopped when the program is
        finished:
       </para>
<screen>pfmon --cpu-list=0-1 --system-wide -u -e CPU_OP_CYCLES_ALL,IA64_INST_RETIRED -- ls -l /dev/null
crw-rw-rw- 1 root root 1, 3 27. Mär 03:30 /dev/null
CPU0                         38925 CPU_OP_CYCLES_ALL
CPU0                          7510 IA64_INST_RETIRED
CPU1                          9825 CPU_OP_CYCLES_ALL
CPU1                          1676 IA64_INST_RETIRED</screen>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Press the <keycap function="enter"/> key to stop a session:
     </para>
    </step>
    <step>
     <para>
      If you want to aggregate counts, use the <option>-aggr</option> option
      after the previous command:
     </para>
<screen>pfmon --cpu-list=0-1 --system-wide -u -e CPU_OP_CYCLES_ALL,IA64_INST_RETIRED --aggr
&lt;press ENTER to stop session&gt;

                     52655 CPU_OP_CYCLES_ALL
                     53164 IA64_INST_RETIRED</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.tuning.perfmon2.runningtasks">
   <title>Monitoring Running Tasks</title>
   <para>
    Perfmon can also monitor an existing thread. This is useful for
    monitoring system daemons or programs which take a long time to start.
    First determine the process ID you want to monitor:
   </para>
<screen>ps ax | grep foo
<emphasis role="strong">10027</emphasis>  pts/1    R     2:23  foo</screen>
   <para>
    Use the found PID for the <option>--attach-task</option> option of
    <command>pfmon</command>:
   </para>
<screen>pfmon --attach-task=10027
3682190 CPU_OP_CYCLES_ALL</screen>
   <para/>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.tuning.perfmon2.debugfs">
  <title>Retrieving Metrics From DebugFS</title>

  <para>
   Perfmon can collect statistics which are exported through the debug
   interface. The metrics consists of mostly aggregated counts and
   durations.
  </para>

  <para>
   Access the data through mounting the debug file system as &rootuser;
   under <filename>/sys/kernel/debug</filename>
  </para>

  <para>
   The data is located under <filename>/sys/kernel/debug/perfmon/</filename>
   and organized per CPU. Each CPU contains a set of metrics, accessible as
   ASCII file. The following data is taken from the
   <filename>/usr/src/linux/Documentation/perfmon2-debugfs.txt</filename>:
  </para>

  <table xml:id="tab.tuning.perfmon2.metrics">
   <title>Read-Only Files in <filename>/sys/kernel/debug/perfmon/cpu*/</filename></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>
        File
       </para>
      </entry>
      <entry>
       <para>
        Description
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <filename>ctxswin_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of PMU context switch in
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ctxswin_ns</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of nanoseconds spent in the PMU context switch in routine
       </para>
<screen>Average cost of the PMU context switch in =
  ctxswin_ns / ctxswin_count</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ctxswout_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of PMU context switch out
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ctxswout_ns</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of nanoseconds spend in the PMU context switch out routine
       </para>
<screen>Average cost of the PMU context switch out =
  ctxswout_ns / ctxswout_count</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>fmt_handler_calls</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of calls to the sampling format routine that handles PMU
        interrupts (typically the routine that recors a sample)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>fmt_handler_ns</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of nanoseconds spent in the routine that handle PMU interrupt
        in the sampling format
       </para>
<screen>Average time spent in this routine =
  fmt_handler_ns / fmt_handler_calls</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>handle_timeout_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of times the <literal>pfm_handle_timeout()</literal> routine
        is called (used for timeout-based set switching)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>handle_work_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of times <literal>pfm_handle_work()</literal> routine is
        called
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ovl_intr_all_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of PMU interrupts received by the kernel
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ovfl_intr_nmi_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of non maskeable interrupts (NMI) received by the kernel from
        perfmon (only for X86 hardware)
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ovfl_intr_ns</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of nanoseconds spent in the perfmon2 PMU interrupt handler
        routine.
       </para>
<screen>Average time to handle one PMU interrupt =
  ovfl_intr_ns / ovfl_intr_all_count</screen>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ovfl_intr_regular_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of PMU interrupts which are actually processed by the perfmon
        interrupt handler
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>ovfl_intr_replay_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of PMU interrupts which were replayed on the context switch
        in or on event set switching
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>perfom_intr_spurious_count</filename>,
        <filename>ovfl_intr_spurious_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of PMU interrupts which were dropped because there was no
        active context
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>pfm_restart_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of times <literal>pfm_restart()</literal> is called
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>reset_pmds_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of times <literal>pfm_reset_pmds()</literal> is called
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>set_switch_count</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of event set switches
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <filename>set_switch_ns</filename>
       </para>
      </entry>
      <entry>
       <para>
        Number of nanoseconds spent in the set switching rountine
       </para>
<screen>Average cost of switching sets =
  set_switch_ns / set_switch_count</screen>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   This might be useful to compare your metrics before and after the perfmon
   run. For example, collect your data first:
  </para>

<screen>for i in /sys/kernel/debug/perfmon/cpu0/*; do
   echo "$i:"; cat $i
done &gt;&gt; pfmon-before.txt</screen>

  <para>
   Run your performance monitoring, maybe restrict it to a specific CPU:
  </para>

<screen>pfmon --cpu-list=0 ...</screen>

  <para>
   Collect your data again:
  </para>

<screen>for i in /sys/kernel/debug//perfmon/cpu0/*; do
   echo "$i:"; cat $i
done &gt;&gt; pfmon-after.txt</screen>

  <para>
   Compare these two files:
  </para>

<screen>diff -u pfmon-before.txt pfmon-after.txt</screen>
 </sect1>
 <sect1 xml:id="sec.tuning.perfmon2.moreinfo">
  <title>For More Information</title>

  <para>
   This chapter only provides a short overview. Refer to the following links
   for more information:
  </para>

  <variablelist>
   <varlistentry>
    <term><link xlink:href="http://perfmon2.sourceforge.net/"/>
    </term>
    <listitem>
     <para>
      The project home page.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="http://www.iop.org/EJ/article/1742-6596/119/4/042017/jpconf8_119_042017.pdf"/>
    </term>
    <listitem>
     <para>
      A good overview as PDF.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="cha.tuning.oprofile"/>
    </term>
    <listitem>
     <para>
      Consult this chapter for other performance optimizations.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
