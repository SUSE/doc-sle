<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="containers-buildah-overview.xml" xml:id="cha-buildah-overview" xml:lang="zh-cn" version="5.0"> <title>Buildah 概述</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  <link xlink:href="https://buildah.io/">Buildah</link> 是用于构建符合 OCI 标准的容器映像的工具。Buildah 可处理以下任务：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    从头开始或者基于现有映像创建容器。
   </para>
  </listitem>
  <listitem>
   <para>
    基于工作容器或者通过 Dockerfile 创建映像。
   </para>
  </listitem>
  <listitem>
   <para>
    构建 OCI 或 Docker 开源引擎映像格式的映像。
   </para>
  </listitem>
  <listitem>
   <para>
    挂载工作容器的根文件系统以进行操作。
   </para>
  </listitem>
  <listitem>
   <para>
    使用容器根文件系统的已更新内容作为文件系统层来创建新映像。
   </para>
  </listitem>
  <listitem>
   <para>
    删除工作容器或映像，以及重命名本地容器。
   </para>
  </listitem>
 </itemizedlist>
 <para>
  与 Docker 开源引擎相比，Buildah 具有以下几项优势：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    使用该工具可以挂载工作容器的文件系统，使之可供主机访问。
   </para>
  </listitem>
  <listitem>
   <para>
    通过使用 Buildah 子命令的脚本（而不是 Containerfile 或 Dockerfile）可以实现使用 Buildah 构建容器映像的过程的自动化。
   </para>
  </listitem>
  <listitem>
   <para>
    与 Podman 类似，Buildah 不需要运行守护程序，可由非特权用户使用。
   </para>
  </listitem>
  <listitem>
   <para>
    可以在不挂载 Docker 套接字的情况下在容器内部构建映像，这样可以提高安全性。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-podman-buildah">
  <title>Podman 和 Buildah</title>

  <para>
   Podman 和 Buildah 都可用于构建容器映像。虽然 Podman 可让用户使用 Dockerfile 构建映像，但 Buildah 提供的映像构建选项和功能更广泛。
  </para>
 </sect1>
 <sect1 xml:id="cha-buildah-install">
  <title>Buildah 安装</title>

  <para>
   要安装 Buildah，请运行 <command>sudo zypper in buildah</command> 命令。运行 <command>buildah --version</command> 命令检查是否已成功安装 Buildah。
  </para>

  <para>
   如果您已安装 Podman 并将其设置为在无 root 权限模式下使用，则无需进行进一步配置，就能在非特权环境中使用 Buildah。如果需要为 Buildah 启用无 root 权限模式，请运行以下命令：
  </para>

<screen><prompt>tux &gt; </prompt>sudo usermod --add-subuids 200000-201000 --add-subgids 200000-201000 $USER</screen>

  <para>
   此命令将为当前用户启用无 root 权限模式。运行该命令后，注销然后重新登录即可启用更改。
  </para>

  <para>
   以上命令会在主机上定义一系列本地 UID，分配给容器中的用户的 UID 将映射到这些 UID。请注意，为不同用户定义的范围不得重叠。同样重要的是，这些范围不能重复使用任何现有本地用户或组的 UID。默认情况下，在 SLES 15 中使用 <command>useradd</command> 命令添加用户会自动分配 subUID 和 subGID 范围。
  </para>

  <note>
   <title>无 root 权限模式下的 Buildah</title>
   <para>
    在无 root 权限模式下，Buildah 命令必须在用户的已修改用户名称空间中执行。要进入此用户名称空间，请运行 <command>buildah unshare</command> 命令。否则 <command>buildah mount</command> 命令将会失败。
   </para>
  </note>
 </sect1>
 <sect1 xml:id="cha-buildah-build-images">
  <title>使用 Buildah 构建映像</title>

  <para>
   Buildah 使用单独的命令来构建映像，而不使用包含指令的特殊文件。使用 Buildah 构建映像涉及以下几个步骤：基于指定的映像运行容器，编辑容器（安装软件包、配置设置等），配置容器选项，以及将所有更改提交到新映像中。虽然此过程可能包括其他步骤（例如，挂载并使用容器的文件系统），但基本的工作流程逻辑是相同的。
  </para>

  <para>
   下面的示例可让您大致了解如何使用 Buildah 构建映像。
  </para>

  <example>
   <title>构建映像的示例</title>
<screen>container=$(buildah from suse/sle15) <co xml:id="ctr"/>
buildah run $container zypper up <co xml:id="run"/>
buildah copy $container . /usr/src/example/ <co xml:id="copy"/>
buildah config --workingdir /usr/src/example $container
buildah config --port 8000 $container
buildah config --cmd "php -S 0.0.0.0:8000" $container <co xml:id="config"/>
buildah config --label maintainer="Tux" $container
buildah config --label version="0.1" $container <co xml:id="label"/>
buildah commit $container example <co xml:id="commit"/>
buildah rm $container <co xml:id="rm"/>
</screen>
   <calloutlist>
    <callout arearefs="ctr">
     <para>
      基于指定的映像（在本例中为 <literal>sle15</literal>）运行容器（也称为工作容器）。
     </para>
    </callout>
    <callout arearefs="run">
     <para>
      在刚刚创建的工作容器中运行命令。在此示例中，Buildah 运行了 <command>zypper up</command> 命令。
     </para>
    </callout>
    <callout arearefs="copy">
     <para>
      将文件和目录复制到容器中的指定位置。在此示例中，Buildah 将当前目录的全部内容复制到 <filename>/usr/src/example/</filename>。
     </para>
    </callout>
    <callout arearefs="config">
     <para>
      <command>buildah config</command> 命令指定容器选项。其中包括定义工作目录、公开端口以及在容器内部运行命令。
     </para>
    </callout>
    <callout arearefs="label">
     <para>
      <command>buildah config --label</command> 命令用于向容器指派标签。标签可能包括 <literal>maintainer</literal>、<literal>description</literal>、<literal>version</literal> 等。
     </para>
    </callout>
    <callout arearefs="commit">
     <para>
      通过提交所有修改基于工作容器创建映像。
     </para>
    </callout>
    <callout arearefs="rm">
     <para>
      删除工作容器。
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect1>
</chapter>
