<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.kgraft" xml:lang="en">
<?suse-quickstart color="suse"?>
 <title>Live Patching the Linux Kernel Using &kg;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This document describes the basic principles of the &kg; live patching
    technology and provides usage guidelines for the SLE Live Patching service.
   </para>

   <para>
    &kg; is a live patching technology for runtime patching of the Linux
    kernel, without stopping the kernel. This maximizes system uptime, and thus
    system availability, which is important for mission-critical systems. By
    allowing dynamic patching of the kernel, the technology also encourages
    users to install critical security updates without deferring them to a
    scheduled downtime.
   </para>

   <para>
    A &kg; patch is a kernel module, intended for replacing whole functions in
    the kernel. &kg; primarily offers in-kernel infrastructure for integration
    of the patched code with base kernel code at runtime.
   </para>

   <para>
    SLE Live Patching is a service provided on top of regular SUSE Linux
    Enterprise Server maintenance. &kg; patches distributed through SLE Live
    Patching supplement regular SLES maintenance updates. Common update stack
    and procedures can be used for SLE Live Patching deployment.
   </para>

   <para>
    Information provided further are related to the &amd64;/&intel64; architecture only. In case you use a different architecture, the procedures may differ.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec.kgraft.advantages">
  <title>Advantages of &kg;</title>

  <para>
   Live kernel patching using &kg; is especially useful for quick response in
   emergencies (when serious vulnerabilities are known and should be fixed when
   possible or there are serious system stability issues with a known fix). It
   is not used for scheduled updates where time is not critical.
  </para>

  <para>
   Typical use cases for &kg; include systems like memory databases with huge
   amounts of RAM, where boot-up times of 15 minutes or more are not uncommon,
   large simulations that need weeks or months without a restart, or
   infrastructure building blocks providing continuous service to a many
   consumers.
  </para>

  <para>
   The main advantage of &kg; is that it never requires stopping the kernel,
   not even for a short time period.
  </para>

  <para>
   A &kg; patch is a <filename>.ko</filename> kernel module in a RPM
   package. It is inserted into the kernel using the <command>insmod</command>
   command when the package is installed or updated. &kg; replaces whole
   functions in the kernel, even if they are being executed. An updated &kg;
   module can replace an existing patch if necessary.
  </para>

  <para>
   &kg; is also lean&mdash;it contains only a small amount of code, because it
   leverages other standard Linux technologies.
  </para>
 </sect1>
 <sect1 xml:id="sec.kgraft.low-level">
  <title>Low-level Function of &kg;</title>

  <para>
   &kg; uses the ftrace infrastructure to perform patching. The following
   describes the implementation on the &amd64;/&intel64; architecture.
  </para>

  <para>
   To patch a kernel function, &kg; needs some space at the start of the
   function to insert a jump to a new function. This space is allocated during
   kernel compilation by GCC with function profiling turned on. In particular,
   a 5-byte call instruction is injected to the start of kernel functions. When
   such instrumented kernel is booting, profiling calls are replaced by 5-byte
   NOP (no operation) instructions.
  </para>

  <para>
   After patching starts, the first byte is replaced by the INT3 (breakpoint)
   instruction. This ensures atomicity of the 5-byte instruction replacement.
   The other four bytes are replaced by the address to the new function.
   Finally, the first byte is replaced by the JMP (long jump) opcode.
  </para>

  <para>
   Inter-processor non-maskable interrupts (IPI NMI) are used throughout the
   process to flush speculative decoding queues of other CPUs in the system.
   This allows switching to the new function without ever stopping the kernel,
   not even for a very short moment. The interruptions by IPI NMIs can be
   measured in microseconds and are not considered service interruptions as
   they happen while the kernel is running in any case.
  </para>

  <para>
   Callers are never patched. Instead, the callee's NOPs are replaced by a JMP
   to the new function. JMP instructions remain forever. This takes care of
   function pointers, including in structures, and does not require saving any
   old data for the possibility of un-patching.
  </para>

  <para>
   However, these steps alone would not be good enough: since the functions
   would be replaced non-atomically, a new fixed function in one part of the
   kernel could still be calling an old function elsewhere or vice versa. If
   the semantics of the function interfaces changed in the patch, chaos would
   ensue.
  </para>

  <para>
   Thus, until all functions are replaced, &kg; uses an approach based on
   trampolines and similar to RCU (read-copy-update), to ensure a consistent
   view of the world to each user space thread, kernel thread and kernel
   interrupt. A per-thread flag is set on each kernel entry and exit. This way,
   an old function would always call another old function and a new function
   always a new one. Once all processes have the "new universe" flag set,
   patching is complete, trampolines can be removed and the code can operate at
   full speed without performance impact other than an extra-long jump for each
   patched function.
  </para>
 </sect1>
 <sect1 xml:id="sec.kgraft.inst_patches">
  <title>Installing &kg; Patches</title>

  <para>
   This section describes the activation of the SUSE Linux Enterprise Live
   Patching extension and the installation of &kg; patches.
  </para>

  <sect2 xml:id="sec.kgraft.inst_patches.activate">
   <title>Activation of SLE Live Patching</title>
   <para>
    To activate SLE Live Patching on your system, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      If your SLES system is not yet registered, register it. Registration can
      be done during the system installation or later using the &yast;
      <guimenu>Product Registration</guimenu> module (<command>yast2
      registration</command>). After registration, click <guimenu>Yes</guimenu>
      to see the list of available online updates.
     </para>
     <para>
      If your SLES system is already registered, but SLE Live Patching is not
      yet activated, open the &yast; <guimenu>Product Registration</guimenu>
      module (<command>yast2 registration</command>) and click <guimenu>Select
      Extensions</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Select <guimenu>SUSE Linux Enterprise Live Patching 12</guimenu> in the
      list of available extensions and click <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Confirm the license terms and click <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter the SLE Live Patching registration code and click
      <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Check the <guimenu>Installation Summary</guimenu> and selected
      <guimenu>Patterns</guimenu>. The pattern <systemitem>Live
      Patching</systemitem> should be selected for installation.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Accept</guimenu> to complete the installation. This will
      install the base &kg; components on your system together with the initial
      live patch.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.kgraft.inst_patches.update">
   <title>Updating System</title>
   <procedure>
    <step>
     <para>
      SLE Live Patching updates are distributed in a form that allows using
      standard SLE update stack for patch application. The initial live patch
      can be updated using <command>zypper patch</command>, &yast; Online
      Update or equivalent method.
     </para>
    </step>
    <step>
     <para>
      The kernel is patched automatically during the package installation.
      However, invocations of the old kernel functions are not completely
      eliminated until all sleeping processes wake up and get out of the way.
      This can take a considerable amount of time. Despite this, sleeping
      processes that use the old kernel functions are not considered a security
      issue. Nevertheless, in the current version of &kg;, it is not possible
      to apply another &kg; patch until all processes cross the kernel-user
      space boundary to stop using patched functions from the previous patch.
     </para>
     <para>
      To see the global status of patching, check the flag in
      <filename>/sys/kernel/kgraft/in_progress</filename>. The value
      <literal>1</literal> signifies the existence of sleeping processes that
      still need to be woken (the patching is still in progress). The value
      <literal>0</literal> signifies that all processes are using solely the
      patched functions and patching has finished already. Alternatively, use
      the <command>kgr status</command> command to obtain the same information.
     </para>
     <para>
      The flag can be checked on a per-process basis too. Check the number in
      <filename>/proc/<replaceable>PROCESS_NUMBER</replaceable>/kgr_in_progress</filename>
      for each process individually. Again, the value <literal>1</literal>
      signifies sleeping process that still needs to be woken. Alternatively,
      use the <command>kgr blocking</command> command to output the list of
      sleeping processes.
     </para>
    </step>
<!-- 2015-09-09, tbazant: kernel sends the signals automatically now.
    <step>
     <para>
      It is up to the system administrator to decide how to deal with the
      sleeping processes. One possibility is to wait, another possibility is
      to send a SIGSTOP signal followed by a SIGCONT signal to all the
      sleeping processes. It can be achieved easily using the <command>kgr
       poke</command> command. Running processes are not interrupted.
     </para>
    </step>
     -->
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.kgraft.lifecycle">
  <title>Patch Lifecycle</title>
  <para>Expiration dates of live patches can be accessed with <command>zypper
   lifecycle</command>. Make sure that the package
   <package>lifecycle-data-sle-live-patching</package> is installed.
  </para>
  <screen>&prompt.user;<command>zypper lifecycle</command>

Product end of support
Codestream: SUSE Linux Enterprise Server 12             2024-10-31
SUSE Linux Enterprise Server 12 SP2                     n/a*

Extension end of support
SUSE Linux Enterprise Live Patching                     2017-10-31

Package end of support if different from product:
SUSEConnect                              Now, installed 0.2.41-18.1, update available 0.2.42-19.3.1
apache2-utils                            Now


*) See https://www.suse.com/lifecycle  for latest information
</screen>
  <para>When the expiration date of a patch is reached, no
   further live patches for this kernel version will be supplied.
   Plan an update of your kernel before the end of the live patch
   lifecycle period.</para>
 </sect1>
 <sect1 xml:id="sec.kgraft.remove">
  <title>Removing a &kg; Patch</title>

  <para>
   To remove a &kg; patch, use the following procedure:
  </para>

<!--
  <para>
   Due to the way zypper operates, it is not sufficient to simply remove a
   &kg; patch with zypper. Rebuilding initrd and rebooting is required:
  </para>
 -->

  <procedure>
   <step>
    <para>
     First remove the patch itself using Zypper:
    </para>
<screen>zypper rm kgraft-patch-<replaceable>3_12_32-25-default</replaceable></screen>
   </step>
   <step>
    <para>
     Then reboot the machine.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.kgraft.exec_threads">
  <title>Stuck Kernel Execution Threads</title>

  <para>
   Kernel threads need to be prepared to handle &kg;. Third-party software may
   not be ready for &kg; adoption and its kernel modules may spawn
   kernel execution threads. These threads will block the patching process
   indefinitely. As an emergency measure &kg; offers the possibility to force
   finishing of the patching process without waiting for all execution threads
   to cross the safety checkpoint. This can be achieved by writing
   <literal>0</literal> into
   <filename>/sys/kernel/kgraft/in_progress</filename>. Consult SUSE Support
   before performing this procedure.
  </para>

<!--</sect2>
   <sect2>
   <title>Live Patch Removal</title>
   <para>
    As an experimental feature &kg; supports patch removal. The low-level
    procedure is similar to patch installation. After writing
    <literal>1</literal> to
    <filename>/sys/kernel/kgraft/<replaceable>PATCH_NAME</replaceable>/revert</filename>
    the patch removal process starts. Again, processes need to leave kernel and
    kernel execution threads need to pass their checkpoints. After patching is
    finished the corresponding module can be removed from kernel. Please note
    that after performing this procedure support for the system cannot be
    claimed on SUSE.
   </para>
  </sect2>-->
 </sect1>
 <sect1 xml:id="sec.kgraft.kgr">
  <title>The <command>kgr</command> Tool</title>

  <para>
   Several &kg; management tasks can be simplified with the
   <command>kgr</command> tool. The available commands are:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>kgr status</command>
    </term>
    <listitem>
     <para>
      Displays the overall status of &kg; patching (<literal>ready</literal> or
      <literal>in_progress</literal>).
<!--It takes the information from
      <filename>/sys/kernel/kgraft/in_progress</filename>.-->
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>kgr patches</command>
    </term>
    <listitem>
     <para>
      Displays the list of loaded &kg; patches.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>kgr blocking</command>
    </term>
    <listitem>
     <para>
      Lists processes that are preventing &kg; patching from finishing. By
      default only the PIDs are listed. Specifying <option>-v</option> prints
      command lines if available. Another <option>-v</option> displays also
      stack traces.
     </para>
    </listitem>
   </varlistentry>
<!-- 2015-09-09, tbazant: kgr poke is obsolete
   <varlistentry>
    <term><command>kgr poke</command>
    </term>
    <listitem>
     <para>
      Sends SIGSTOP and SIGCONT to all processess that are blocking &kg;
      patching from finishing.
     </para>
    </listitem>
   </varlistentry>
   -->
  </variablelist>

  <para>
   For detailed information, see <command>man kgr</command>.
  </para>
 </sect1>
 <sect1 xml:id="sec.kgraft.scope">
  <title>Scope of &kg; Technology</title>

  <para>
   &kg; is based on replacing functions. Data structure alteration can be
   accomplished only indirectly with &kg;. As a result, changes to kernel data
   structure require special care and, if the change is too large, rebooting
   might be required. &kg; also might not be able to handle situations where
   one compiler is used to compile the old kernel and another compiler is used
   for compiling the patch.
  </para>

  <para>
   Because of the way &kg; works, support for third-party modules that are
   spawning kernel threads is limited.
<!--Sending SIGSTOP and SIGCONT signals to processes in D process state
  (uninterruptible sleep) does not make them to cross the kernel/user space
  boundary and does not have the intended effect.-->
  </para>
 </sect1>
 <sect1 xml:id="sec.kgraft.scope_patching">
  <title>Scope of SLE Live Patching</title>

  <para>
   Fixes for SUSE Common Vulnerability Scoring System (CVSS, SUSE CVSS is
   based on the CVSS v3.0 system) level 7+ vulnerabilities and bug fixes
   related to system stability or data corruption will be shipped in the
   scope of SLE Live Patching. It might not be possible to produce a live
   patch for all kinds of fixes fulfilling the above criteria. SUSE reserves
   the right to skip fixes where production of a kernel live patch is
   unviable because of technical reasons. For more information on CVSS,
   which is the base for the SUSE CVSS rating, see
   <link xlink:href="https://www.first.org/cvss/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.kgraft.support_interaction">
  <title>Interaction with the Support Processes</title>

  <para>
   While resolving a technical difficulty with SUSE Support, you may receive a
   so-called Program Temporary Fix (PTF). PTFs may be issued for various
   packages including those forming the base of SLE Live Patching.
  </para>

  <para>
   &kg; PTFs complying with the conditions described in the previous section
   can be installed as usual and SUSE will ensure that the system in question
   does not need to be rebooted and that future live updates are applied
   cleanly.
  </para>

  <para>
   PTFs issued for the base kernel disrupt the live patching process. First,
   installing the PTF kernel means a reboot as the kernel cannot be replaced as
   a whole at runtime. Second, another reboot is needed to replace the PTF with
   any regular maintenance updates for which the live patches are issued.
  </para>

  <para>
   PTFs for other packages in SLE Live Patching can be treated like regular
   PTFs with the usual guarantees.
  </para>
 </sect1>
</chapter>
