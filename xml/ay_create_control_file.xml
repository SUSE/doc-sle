<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" role="General" 
  xml:id="cha-autoyast-create-control-file"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Creating an &ay; Control File</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

  <sect1 xml:id="Autoinstallation-collectInfo">
   <title>Collecting Information</title>

   <para>
    To create the control file, you need to collect information about the
    systems you are going to install. This includes hardware data and
    network information among other things. Make sure you have the following
    information about the machines you want to install:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Hard disk types and sizes
     </para>
    </listitem>
    <listitem>
     <para>
      Graphical interface and attached monitor, if any
     </para>
    </listitem>
    <listitem>
     <para>
      Network interface and MAC address if known (for example, when using
      DHCP)
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Also verify that both <package>autoyast2-installation</package> and 
    <package>autoyast2</package> are installed.
   </para>
  </sect1>
  
  <sect1 xml:id="CreateProfile-CMS">
   <title>Using the Configuration Management System (CMS)</title>

   <para>
    To create the control file for one or more computers, a configuration
    interface based on &yast; is provided. This system depends on
    existing modules which are usually used to configure a computer in
    regular operation mode, for example, after &productname; is
    installed.
   </para>

   <para>
    The configuration management system lets you easily create control files and
    manage a repository of configurations for use in a networked environment
    with multiple clients.
   </para>

   <figure os="sles;sled">
    <title>Configuration System</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast2-maindialog.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast2-maindialog.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <figure os="osuse">
    <title>Configuration System</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast2-maindialog_kde.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast2-maindialog_kde.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <sect2 xml:id="CreateProfile-CMS-new">
    <title>Creating a New Control File</title>
     <para>
      The easiest way to create an &ay; profile is to use an existing
      &productname; system
      as a template. On an already installed system, start <menuchoice>
      <guimenu>&yast;</guimenu> <guimenu>Miscellaneous</guimenu>
      <guimenu>Autoinstallation</guimenu></menuchoice>. Now select <menuchoice>
      <guimenu>Tools</guimenu> <guimenu>Create Reference Profile</guimenu>
      </menuchoice> from the menu. Choose the system components you want
      to include in the profile. Alternatively, create a profile containing
      the complete system configuration by running <command>sudo yast
      clone_system</command> from the command line.
     </para>

     <para>
      Both methods will create the file
      <filename>/root/autoinst.xml</filename>. The version created on the
      command line can be used to set up an identical clone of the system on
      which the profile was created. However, usually you will want to adjust
      the file to make it possible to install several machines that are very
      similar, but not identical. This can be done by adjusting the profile
      using your favorite text/XML editor.
     </para>

     <warning>
     <title>Sensitive Data in Profiles</title>
      <para>
       Beware that the profile might contain sensitive information such as
       password hashes and registration keys.
      </para>
      <para>
       Carefully review the exported profiles and make sure to keep file permissions
       restrictive.
      </para>
     </warning>

    <para>
     With some exceptions, almost all resources of the control file can be
     configured using the configuration management system. The system offers
     flexibility and the configuration of some resources is identical to the
     one available in the &yast; control center. In addition to the
     existing and familiar modules new interfaces were created for special
     and complex configurations, for example for partitioning, general
     options and software.
    </para>
    <para>
     Furthermore, using a CMS guarantees the validity of the resulting
     control file and its direct use for starting automated installation.
    </para>
    <para>
     Make sure the configuration system is installed (package
     <systemitem class="resource">autoyast2</systemitem>) and call it using
     the &yast; control center or as root with the following command
     (make sure the <envar>DISPLAY</envar> variable is set correctly to
     start the graphical user interface instead of the text-based one):
    </para>
<screen>/sbin/yast2 autoyast</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="CreateProfile-Manual">
   <title>Creating/Editing a Control File Manually</title>

   <para>
    If editing the control file manually, make sure it has a valid syntax.  To
    check the syntax, use the tools already available on the distribution. For
    example, to verify that the file is well-formed (has a valid XML
    structure), use the utility <command>xmllint</command> available with the
    <systemitem>libxml2</systemitem> package:
   </para>

<screen>xmllint &lt;control file&gt;</screen>

   <para>
    If the control file is not well formed, for example, if a tag is not
    closed, <command>xmllint</command> will report the errors.
   </para>


   <para>
    To validate the control file, use the tool <command>jing</command> from the
    package with the same name. During validation, misplaced or missing tags and
    attributes and wrong attribute values are detected. <phrase os="sles">The
    <package>jing</package> package is provided with the &sdk;.</phrase>
   </para>

<screen>jing /usr/share/YaST2/schema/autoyast/rng/profile.rng &lt;control file&gt;</screen>

   <para>
    <literal>/usr/share/YaST2/schema/autoyast/rng/profile.rng</literal> is
    provided by the package <literal>yast2-schema</literal>. This file
    describes the syntax and classes of an &ay; profile.
   </para>

   <note>
    <title>Schema Extensions</title>

    <para>
     &ay; can be extended by other products and modules, but the schema does not
     contain the specification for those extensions. As a consequence, when &ay; 
     is given a profile that uses one of those extensions, it might report the 
     profile as invalid.
    </para>

    <para>
     Thus, starting in &productname; <phrase os="osuse">15.3</phrase><phrase
     os="sles;sled">SP3</phrase>, &ay; does not validate top-level unknown
     sections, and ignores them. For example, in the example below, the
     <literal>&lt;sap-inst&gt;</literal> is not validated. The rest is validated
     as usual.
    </para>

    <screen>&lt;general&gt;
  &lt;mode&gt;
    &lt;confirm config:type="boolean"&gt;true&lt;/confirm&gt;
  &lt;/mode&gt;
&lt;/general&gt;

&lt;sap-inst&gt;
  &lt;!-- this section is not validated -->&gt;
&lt;/sap-inst&gt;
</screen>
   </note>

   <para>
    Before going on with the autoinstallation, fix any errors resulting from
    such checks. The autoinstallation process cannot be started with an
    invalid and not well-formed control file.
   </para>

   <para>
    You can use any XML editor available on your system or any text editor
    with XML support (for example, Emacs, Vim). However, it is not optimal
    to create the control file manually for many machines and it should only
    be seen as an interface between the autoinstallation engine and the
    Configuration Management System (CMS).
   </para>

   <tip>
    <title>Using Emacs as an XML Editor</title>
    <para>
     The built-in nxml-mode turns Emacs into a fully-fledged XML editor with
     automatic tag completion and validation. Refer to the Emacs help for
     instructions on how to set up nxml-mode.
    </para>
   </tip>
  </sect1>
  <sect1 xml:id="CreateProfile-XSLT">
   <title>Creating a Control File via Script with XSLT</title>

   <para>
    If you have a template and want to change a few things via script or
    command line, use an XSLT processor like <literal>xsltproc</literal>.
    For example, if you have an &ay; control file and want to fill out
    the host name via script for any reason. (If doing this often, you
    should consider scripting it.)
   </para>

   <para>
    First, create an XSL file:
   </para>

   <example>
    <title>Example File for Replacing the Host Name/Domain by Script</title>
<screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:y2="http://www.suse.com/1.0/yast2ns"
  xmlns:config="http://www.suse.com/1.0/configns"
  xmlns="http://www.suse.com/1.0/yast2ns"
  version="1.0"&gt;
  &lt;xsl:output method="xml" encoding="UTF-8" indent="yes" omit-xml-declaration="no" cdata-section-elements="source"/&gt;

  &lt;!-- the parameter names --&gt;
  &lt;xsl:param name="hostname"/&gt;
  &lt;xsl:param name="domain"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="@*|node()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="y2:dns"&gt;
    &lt;xsl:copy&gt;
      &lt;!-- where to copy the parameters --&gt;
      &lt;domain&gt;&lt;xsl:value-of select="string($domain)"/&gt;&lt;/domain&gt;
      &lt;hostname&gt;&lt;xsl:value-of select="string($hostname)"/&gt;&lt;/hostname&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;


  &lt;xsl:template match="@*|node()" &gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</screen>
   </example>

   <para>
    This file expects the host name and the domain name as parameters from
    the user.
   </para>

<screen>&lt;xsl:param name="hostname"/&gt;
&lt;xsl:param name="domain"/&gt;</screen>

   <para>
    There will be a copy of those parameters in the DNS section of the
    control file. This means that if there already is a domain element in the
    DNS section, you will get a second one, which will cause conflicts.
   </para>


<!-- FIXME: rewrite these sections using xsltproc
   <para>
    To create a new &ay; control file now from the template plus
    the XSL file, run the following command:
   </para>

<screen>sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain  template.xml</screen>

   <para>
    You will then get a filled out &ay; control file on STDOUT.
   </para>

   <para>
    If you have multiple XSL files you want to apply to a template, do the
    following:
   </para>

<screen>sabcmd add_hd_vg.xsl \$device=/dev/sda \$partition=p2 \$vg=system \
        | sabcmd add_harddisk.xsl \$device=/dev/system \$lvm=true \
        | sabcmd ....
        | sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain</screen>

   <para>
    Pipe the output of each sabcmd to the next sabcmd.
   </para>
-->

   <para>
    For more information about XSLT, go to the official Web page
    <link xlink:href="http://www.w3.org/TR/xslt">www.w3.org/TR/xslt</link>
   </para>
  </sect1>
 </chapter>
