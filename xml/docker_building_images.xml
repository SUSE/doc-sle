<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="docker.building.images" xml:lang="en">
	<title>Creating Custom Images</title>
	
	<para>
	For creating your custom image you need a base docker image of &slsa;. You can use any of the pre-built &slsa; images that you can obtain as described in <xref linkend="Customizing_Pre-build_Images"/>. 
	</para>
	
	 <note>
	 	<title>No &slsa; Images in Docker Hub</title>
	 	<para>
	 	Usually you can pull a variety of  base docker images from the <link xlink:href="https://hub.docker.com/">docker hub</link> but that does not apply for &slsa;. Currently we cannot distribute &slsa; images for Docker because there is no way to associate an End-User License Agreement (EULA) to a Docker image. <literal>sle2docker</literal> enables you to import pre-built &slsa; images that you can use for creating base &slsa; images.
	 	</para>
	 </note>
	 <para>
	 After you obtain your base docker image, you can modify the image by using a <filename>Dockerfile</filename> (usually placed in the build directory). Then use the standard docker building tool to create your custom image:
	 </para>
	 <screen>
	 docker build <emphasis>path_to_build_directory</emphasis>
	 </screen>
	 <para>
	 For more <literal>docker build</literal> options please refer to the <link xlink:href="https://docs.docker.com/engine/reference/commandline/build/">official Docker documentation</link>.
	 </para>
	 <note>
	 	<title>Dockerizing Your Applications</title>
	 	<para>
	 	You may want to write a dockerfile for your own application that should be run inside a docker container. For a procedure refer to <xref linkend="docker.dockerizing.application"/>.
	 	</para>
	 </note>
	 
<!-- This section is commented out after discussion with Frederica as KIWI should not be used for building base images outside SUSE. Even though it is possible, the only supported way is to activate pre-built images of SLES -->
<!-- 
	<sect1 xml:id="Building_Base_Images_KIWI">
		<title>Building Base &slsa; Images with KIWI</title>
		<para>
		 KIWI is a command line tool that enables you to build images in a variety of formats. You can use the tool to build a base docker image of &slsa;. For more details about KIWI installation and usage, please refer to the <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.introduction">KIWI documentation</link>.
		</para>
		<para>
		The procedure of building docker images is given in the <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.docker">Docker Images chapter</link>.
		</para>
	</sect1>
-->
	<sect1 xml:id="Building_Pre-build_Images">
	<title>Obtaining Base &slsa; Images</title>
	<para>
	You can install pre-built images of &slsa; by using Zypper:
	</para>	
	<screen>
	sudo zypper in sles11sp3-docker-image sles12-docker-image
	</screen>
	<para>
	Pre-built images do not have repositories configured. But when the Docker host has an SLE subscription that provides access to the product used in the image, Zypper will automatically have access to the right repositories.
	</para>
	<para>
	After the pre-built images are installed, you need to list them using <literal>sle2docker</literal> to get a proper image name:
	</para>
	<screen>
	sle2docker list
	</screen>
	<para>
	Now you need to activate the pre-built images:
	</para>
	<screen>
	sle2docker activate <emphasis>PRE-BUILT_IMAGE_NAME</emphasis>
	</screen>
	<para>
	After successful activation, <literal>sle2docker</literal> will display the name of the docker image. You can customize the docker image as described in <xref linkend="Customizing_Pre-build_Images"/>.
	</para>
	</sect1>
	<sect1 xml:id="Customizing_Pre-build_Images">
	<title>Customizing &slsa; Docker Images</title>
	 <para>
	 The pre-built images do not have any repository configured. They contain a <link xlink:href="https://github.com/SUSE/container-suseconnect">zypper service</link> that contacts either the SUSE Customer Center (SCC) or your Subscription Management Tool (SMT) server, according to the configuration of the SLE host that runs the Docker container. The service obtains the list of repositories available for the product used by the Docker image.
	 </para>
	 <para>
	 You do not need to add any credentials to the Docker image because the machine credentials are automatically injected into the container by the docker daemon. They are injected inside of the <literal>/run/secrets</literal> directory. The same applies to the <filename>/etc/SUSEConnect</filename> file of the host system, which is automatically injected into the <filename>/run/secrets</filename> directory. 
	 </para>
	 <note>
    <title>Credentials and Security</title>
    <para>
     The contents of the <filename>/run/secrets</filename> directory are
     never committed to a Docker image, hence there is no risk of your
     credentials leaking.
    </para>
   </note>
   <para>
   To obtain the list of repositories use the following command: 
   </para>
   <screen>zypper ref -s</screen>
   <para>
    It will automatically add all the repositories to your container. For
    each repository added to the system a new file will be created
    under <command>/etc/zypp/repos.d</command>. The URLs of these
    repositories include an access token that automatically expires after 12
    hours. To renew the token call the <command>zypper ref -s</command>
    command. It is secure to commit these files to a Docker image.
   </para>
   <para>
    If you want to use a different set of credentials, place a custom
    <filename>/etc/zypp/credentials.d/SCCcredentials</filename> file inside
    of the Docker image. It contains the machine credentials that have the
    subscription you want to use. The same applies to the
    <filename>SUSEConnect</filename> file: to override the file available on
    the host system that is running the Docker container, add a custom
    <filename>/etc/SUSEConnect</filename> file inside of the Docker image.
   </para>
   <para>
   Now you can create a custom Docker image by using a <literal>Dockerfile</literal>. If you want to create a custom &slea;&nbsp;12 image, please refer to <xref linkend="sec.docker.sle_images.customizing_the_images.sles12"/>. If you want to create a custom &slea;&nbsp;11 SP3 Docker image, please refer to <xref linkend="sec.docker.sle_images.customizing_the_images.sles11sp3"/>. In case you would like to move your application to a Docker container, please refer to <xref linkend="docker.dockerizing.application"/>.
   </para>
   <sect2 xml:id="sec.docker.sle_images.customizing_the_images.sles12">
    <title>Creating a Custom &slea;&nbsp;12 Image</title>
    <para>
     The following Docker file creates a simple Docker image based on
     &slea;&nbsp;12:
    </para>
<screen>FROM suse/sles12:latest

RUN zypper --gpg-auto-import-keys ref -s
RUN zypper -n in vim</screen>
    <para>
     When the Docker host machine is registered against an internal &smt;
     server, the Docker image requires the SSL certificate used by &smt;:
    </para>
<screen>FROM suse/sles12:latest

# Import the crt file of our private SMT server
ADD http://smt.test.lan/smt.crt /etc/pki/trust/anchors/smt.crt
RUN update-ca-certificates

RUN zypper --gpg-auto-import-keys ref -s
RUN zypper -n in vim</screen>
   </sect2>
   <sect2 xml:id="sec.docker.sle_images.customizing_the_images.sles11sp3">
    <title>Creating a Custom &slea;&nbsp;11 SP3 Image</title>
    <para>
     The following Docker file creates a simple Docker image based on
     &slea;&nbsp;11 SP3:
    </para>
<screen>FROM suse/sles11sp3:latest

RUN zypper --gpg-auto-import-keys ref -s
RUN zypper -n in vim</screen>
    <para>
     When the Docker host machine is registered against an internal &smt;
     server, the Docker image requires the SSL certificate used by &smt;:
    </para>
<screen>FROM suse/sles11sp3:latest

# Import the crt file of our private SMT server
ADD http://smt.test.lan/smt.crt /etc/ssl/certs/smt.pem
RUN c_rehash /etc/ssl/certs

RUN zypper --gpg-auto-import-keys ref -s
RUN zypper -n in vim</screen>
   </sect2>  
	</sect1>
<!-- This section is incomplete as such a solution is not currently supported by SLES.	
	<sect1 xml:id="Automating.Images.Builds">
		<title>Automation of Images Building</title>
		<para>
		In enterprise environment you typically need to automate your deployment process, from developer's commits to running the application. In case you use your own dockerregistry, you need to set up a pipeline between the versioning system and your private registry. To set up a pipeline you need to perform the following steps:
		</para>
		<orderedlist>
			<listitem>
				<para>
				configure your versioning system to use hooks.
				</para>
			</listitem>
			<listitem>
				<para>
				choose any of continuous integration tools to receive the hooks and then to perform the build process.
				</para>
			</listitem>
			<listitem>
				<para>
				upload the built image to your docker registry.
				</para>
			</listitem>
		</orderedlist>
		<sect2 xml:id="Configuring.Versioning.System">
			<title>Configuring Versioning Systems</title>
			<para>
			Most of the currently used versioning systems enables you to configure hooks. As soon as you perform a particular action, the versioning system sends information to the continuos integration tool that a build should be performed. For example, in case of git used with Github, Github sends a <literal>POST</literal> request to configured URLs. You can select from various types of triggering events or use the default one - <literal>push</literal> to a configured branch. 
			</para>
			<para>
			Your repository must contain besides your application source code, also a particular <filename>Dockerfile<filename> that defines your image.
			</para>
		</sect2>
	</sect1>
	-->
</chapter>
