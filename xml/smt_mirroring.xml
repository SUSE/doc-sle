<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="smt.mirroring">
<!-- ==================================================================== -->
 <title>Mirroring Repositories on the &smt; Server</title>
 <info/>
 <para>
  You can mirror the installation and update repositories on the &smt;
  server. This way, you do not need to download updates on each machine, which saves time and bandwidth.
 </para>
 <important>
  <title>&sls; 9 Repositories</title>
  <para>
   As &sls; 9 is no longer supported, &smt; does not mirror &sls; 9
   repositories.
  </para>
 </important>
 <sect1 xml:id="smt.mirroring.getcredentials">
  <title>Mirroring Credentials</title>

  <para>
   Before you create a local mirror of the repositories, you need appropriate
   organization credentials. You can obtain the credentials from &scc;.
  </para>

  <para>
   To get the credentials from &scc;, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     Visit &scc; at <link xlink:href="http://scc.suse.com"/> and log in.
    </para>
   </step>
   <step>
    <para>
     If you are member of multiple organizations, chose the organization you
     want to work with from the drop-down box in the top-right corner.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Organization</guimenu> in the top menu.
    </para>
   </step>
   <step>
    <para>
     Switch to the <guimenu>Organizational credentials</guimenu> section.
    </para>
   </step>
   <step>
    <para>
     To see the password, click <guimenu>Show password</guimenu>.
    </para>
   </step>
  </procedure>

  <para>
   The obtained credentials should be set with the &yast; &smt; Server
   Configuration module or added directly to the
   <filename>/etc/smt.conf</filename> file. For more information about the
   <filename>/etc/smt.conf</filename> file, see
   <xref
        linkend="smt.config.smtconf"/>.
  </para>

  <tip xml:id="smt.mirror.credential.merge">
   <title>Merging Multiple Organization Site Credentials</title>
   <para>
    &smt; can only work with one mirror credential at a time. Multiple
    credentials are not supported. When a customer creates a new company, this
    generates a new mirror credential. This is not always convenient, as some products
    are available via the first set and other products via the second set. To
    request a merge of credentials, the EMEA-based customers (Europe, the Middle
    East and Africa) are advised to send an e-mail to
    <email>Customer_CenterEMEA@novell.com</email> with the applicable customer
    and site IDs. The EMEA PIC team will verify the records. The contact for
    NALAAP (North America, Latin America, and Asia Pacific) is <email>CustomerResolution@novell.com</email>.
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="smt.mirroring.manage">
  <title>Managing Software Repositories with &smt; Command Line Tools</title>

  <para>
   This section describes tools and procedures for viewing information about
   software repositories available through &smt;, configuring these
   repositories, and setting up custom repositories on the command line. For
   details on the &yast; &smt; Server Management module, see
   <xref linkend="smt.management"/>.
  </para>

  <sect2>
   <title>Updating the Local &smt; Database</title>
   <para>
    The local &smt; database needs to be updated periodically with the information
    downloaded from &scc;. These periodic updates can be configured with the
    &smt; Management module, as described in
    <xref linkend="smt.yast.scheduling"/>.
   </para>
   <para>
    To update the &smt; database manually, use the <command>smt-sync</command>
    command. For more information about the <command>smt-sync</command>
    command, see <xref linkend="smt.scripts.smtsync"/>.
   </para>
  </sect2>

  <sect2>
   <title>Enabled Repositories and Repositories That Can Be Mirrored</title>
   <para>
    The database installed with &smt; contains information about all software
    repositories available on &scc;. However, the used mirror credentials
    determine which repositories can really be mirrored. For more information
    about getting and setting organization credentials, see
    <xref linkend="smt.mirroring.getcredentials"/>.
   </para>
   <para>
    Repositories that can be mirrored have the <literal>MIRRORABLE</literal>
    flag set in the repositories table in the &smt; database. That a
    repository can be mirrored does not mean that it needs to be mirrored. Only
    repositories with the <literal>DOMIRROR</literal> flag set in the &smt;
    database will be mirrored. For more information about configuring which
    repositories should be mirrored,
    seeÂ <xref
          linkend="smt.mirroring.manage.domirror"/>.
   </para>
  </sect2>

  <sect2>
   <title>Getting Information about Repositories</title>
   <para>
    Use the <command>smt-repos</command> command to list available software
    repositories and additional information. Using this command without any
    options lists all available repositories, including repositories that
    cannot be mirrored. In the first column, the enabled repositories
    (repositories set to be mirrored) are marked with <literal>Yes</literal>.
    Disabled repositories are marked with <literal>No</literal>. The other
    columns show ID, type, name, target, and description of the listed
    repositories. The last columns show whether the repository can be mirrored
    and whether staging is enabled.
   </para>
   <para>
    Use the <option>--verbose</option> option, to get additional information
    about the URL of the repository and the path it will be mirrored to.
<!--FIXME-->
   </para>
   <para>
    The repository listing can be limited to the repositories that can be
    mirrored or to the repositories that are enabled. To list the repositories that can be
    mirrored, use the <option>-m</option> or <option>--only-mirrorable</option>
    option: <command>smt-repos -m</command>.
   </para>
   <para>
    To list only enabled repositories, use the <option>-o</option> or
    <option>--only-enabled</option> option: <command>smt-repos -o</command>
    (see <xref linkend="ex.smt.mirroring.repos.o"/>).
   </para>
   <example xml:id="ex.smt.mirroring.repos.o">
    <title>Listing All Enabled Repositories</title>
<screen><?dbsuse-fo font-size="5pt"?>tux:~ # smt-repos -o
.---------------------------------------------------------------------------------------------------------------------.
| Mirr| ID | Type | Name                    | Target        | Description                             | Can be M| Stag|
+-----+----+------+-------------------------+---------------+-----------------------------------------+---------+-----+
| Yes |  1 | zypp | ATI-Driver-SLE11-SP2    | --            | ATI-Driver-SLE11-SP2                    | Yes     | Yes |
| Yes |  2 | zypp | nVidia-Driver-SLE11-SP2 | --            | nVidia-Driver-SLE11-SP2                 | Yes     | No  |
| Yes |  3 | nu   | SLED11-SP2-Updates      | sle-11-x86_64 | SLED11-SP2-Updates for sle-11-x86_64    | Yes     | No  |
| Yes |  4 | nu   | SLES11-SP1-Updates      | sle-11-x86_64 | SLES11-SP1-Updates for sle-11-x86_64    | Yes     | Yes |
| Yes |  5 | nu   | SLES11-SP2-Core         | sle-11-x86_64 | SLES11-SP2-Core for sle-11-x86_64       | Yes     | No  |
| Yes |  6 | nu   | SLES11-SP2-Updates      | sle-11-i586   | SLES11-SP2-Updates for sle-11-i586      | Yes     | No  |
| Yes |  7 | nu   | WebYaST-Testing-Updates | sle-11-i586   | WebYaST-Testing-Updates for sle-11-i586 | Yes     | No  |
'-----+----+------+-------------------------+---------------+-----------------------------------------+---------+-----'
</screen>
   </example>
   <para>
    You can also list only repositories with a specific name or show
    information about a repository with a specific name and target. To list
    repositories with a particular name, use the <command>smt-repos</command>

    <replaceable>REPOSITORY_NAME</replaceable> command. To show information
    about a repository with a specific name and target, use the
    <command>smt-repos</command> <replaceable>repository_name</replaceable>
    <replaceable>TARGET</replaceable> command.
   </para>
   <para>
    To get a list of installation repositories from remote, see
    <xref linkend="smt.clients.repolist"/>.
   </para>
  </sect2>

  <sect2 xml:id="smt.mirroring.manage.domirror">
   <title>Selecting Repositories to Be Mirrored</title>
   <para>
    Only enabled repositories can be mirrored. In the database, the enabled
    repositories have the <literal>DOMIRROR</literal> flag set. Repositories
    can be enabled or disabled using the <command>smt-repos</command> command.
   </para>
   <para>
    To enable one or more repositories, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      To enable all repositories that can be mirrored or to
      choose one repository from the list of all repositories, run the
      <command>smt-repos -e</command> command.
     </para>
     <para>
      You can limit the list of repositories by using the relevant options. To
      limit the list to the repositories that can be mirrored, use the
      <option>-m</option> option: <command>smt-repos -m -e</command>. To limit
      the list to the repositories with a specific name, use the
      <command>smt-repos -e</command>
      <replaceable>REPOSITORY_NAME</replaceable> command. To list a repository
      with a specific name and target, use the <command>smt-repos -e
      <replaceable>REPOSITORY_NAME</replaceable>
      <replaceable>TARGET</replaceable></command> command.
     </para>
     <para>
      To enable all repositories belonging to a specific product,
      use the <option>--enable-by-prod</option> or <option>-p</option> option,
      followed by the name of the product and optionally version,
      architecture, and release:
     </para>
<screen>smt-repos -p <replaceable>product</replaceable>[,<replaceable>version</replaceable>[,<replaceable>architecture</replaceable>[,<replaceable>release</replaceable>]]]</screen>
     <para>
      For example, to enable all repositories belonging to &sls; 10 SP3 for
      PowerPC architecture, use the <command>smt-repos -p
      SUSE-Linux-Enterprise-Server-SP3,10,ppc</command> command. The list of
      known products can be obtained with the
      <command>smt-list-products</command> command.
     </para>
     <tip>
      <title>Installer Self-Update Repository</title>
      <para>
       &smt; supports mirroring the installer self-update repository (find more
       information in <xref linkend="sec.boot_parameters.self_update.process"/>). If
       you need to provide the self-update repository, identify and enable it,
       for example:
      </para>
<screen>$ smt-repos -m | grep Installer
$ smt-repos -e SLES12-SP2-Installer-Updates sle-12-x86_64</screen>
     </tip>
    </step>
    <step>
     <para>
      If more than one repository is listed, choose the one you want to enable:
      specify its ID listed in the repository table and press
      <keycap function="enter"/>. If you want to enable all the listed
      repositories, use <literal>a</literal> and press
      <keycap function="enter"/>.
     </para>
    </step>
   </procedure>
   <para>
    To disable one or more repositories, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      To disable all enabled repositories or just choose one
      repository from the list of all repositories, run the <command>smt-repos
      -d</command> command.
     </para>
     <para>
      To choose the repository to be disabled from a shorter list,
      or to disable all repositories from a limited group, use any of the
      available options to limit the list of repositories. To limit the list to
      the enabled repositories, use the <option>-o</option>
      option: <command>smt-repos -o -d</command>. To limit the list to
      repositories with a particular name, use the <command>smt-repos

      -d</command> <replaceable>REPOSITORY_NAME</replaceable> command. To show a repository with a specific name and target, use the
      <command>smt-repos -d
      <replaceable>REPOSITORY_NAME</replaceable>
      <replaceable>TARGET</replaceable></command> command.
     </para>
    </step>
    <step>
     <para>
      If more than one repository is listed, choose which one you want to
      disable: specify its ID listed in the repository table and
      press <keycap function="enter"/>. If you want to disable all the
      listed repositories, use <literal>a</literal> and press
      <keycap function="enter"/>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2>
<!-- fate#310207 -->
   <title>Deleting Mirrored Repositories</title>
   <para>
    You can delete mirrored repositories that are no longer used. If you delete
    a repository, it will be physically removed from the SMT storage area.
   </para>
   <para>
    Use the <command>smt-repos
    --delete</command> command to delete a repository with a specific name. To
    delete the repository in a namespace, specify the <option>--namespace <replaceable>DIRNAME</replaceable></option>
    option.
   </para>
   <para>
    The <option>--delete</option> option lists all repositories. You can delete the specified
    repositories by entering the ID number or the name and target. To delete all repositories, enter
    <guimenu>a</guimenu>.
   </para>
   <note>
    <title>Detecting Repository IDs</title>
    <para>
     Every repository has an SHA-1 hash that you can use as an ID. You can get the
     repository's hash by calling <command>smt-repos -v</command>.
    </para>
   </note>
  </sect2>

  <sect2>
   <title>Mirroring Custom Repositories</title>
   <para>
    &smt; also makes it possible to mirror repositories that are not available
    at the &scc;. These repositories are called <quote>custom
    repositories</quote>, and they can be mirrored using the
    <command>smt-setup-custom-repos</command> command.  It is also possible to
    delete custom repositories.
   </para>
   <para>
    When adding a new custom repository, the
    <command>smt-setup-custom-repos</command> command inserts a new record in the
    database and sets the <emphasis>mirror</emphasis> flag to
    <replaceable>true</replaceable>. You can disable
    mirroring later, if necessary.
   </para>
   <para>
    To set up a custom repository to be available through &smt;, follow these
    steps:
   </para>
   <procedure>
    <step>
     <para>
      If you do not know the ID of the product the new repositories should
      belong to, use <command>smt-list-products</command> to get the ID. For
      the description of the <command>smt-list-products</command>, see
      <xref linkend="smt.scripts.listproducts"/>.
     </para>
    </step>
    <step>
     <para>
      Run
     </para>
<screen>smt-setup-custom-repos --productid <replaceable>PRODUCT_ID</replaceable> \
--name <replaceable>REPOSITORY_NAME</replaceable> --exturl <replaceable>REPOSITORY_URL</replaceable>
     </screen>
     <para><remark>taroth 2017-09-01:stylecker complains about sentence length,
      better use callouts for this</remark>
      <replaceable>PRODUCT_ID</replaceable> is the ID of the
      product the repository belongs to,
      <replaceable>REPOSITORY_NAME</replaceable> is the name of the
      repository, and <replaceable>REPOSITORY_URL</replaceable> is the URL of the
      repository. If the added repository needs to be
      available for more than one product, specify the IDs of all products that
      should use the added repository.
     </para>
     <para>
      For example, the following command sets <literal>My repository</literal> available at
      <literal>http://example.com/My_repository</literal> to the products with
      the IDs <literal>423</literal>, <literal>424</literal>, and
      <literal>425</literal>:
     </para>
<screen>smt-setup-custom-repositories --productid 423 --productid 424 \
--productid 425 --name 'My_repository' \
--exturl 'http://example.com/My_repository'</screen>
    </step>
   </procedure>
   <note>
    <title>Mirroring Unsigned Repositories</title>
    <para>
     By default, &sle; 10 does not allow the use of unsigned
     repositories. So if you want to mirror unsigned repositories and
     use them on client machines, be aware that the package installation
     tool&mdash;&yast; or <command>zypper</command>&mdash;will ask you whether
     to use repositories that are not signed.
    </para>
   </note>
   <para>
    To remove an existing custom repository from the &smt; database, use
    <command>smt-setup-custom-repositories --delete</command>
    <replaceable>ID</replaceable>, where <replaceable>ID</replaceable>
    is the ID of the repository to be removed.
   </para>
  </sect2>
 </sect1>
 <sect1>
  <title>The Structure of /srv/www/htdocs for SLE 11</title>

  <para>
   The path to the directory containing the mirror is set by the
   <option>MirrorTo</option> option in the <filename>/etc/smt.conf</filename>
   configuration file. For more information about
   <filename>/etc/smt.conf</filename>, see
   <xref
        linkend="smt.config.smtconf"/>. If the
   <option>MirrorTo</option> option is not set to the Apache <filename>htdocs</filename> directory
   <filename>/srv/www/htdocs/</filename>, the following links need to be
   created. If the directories already exist, they need to be removed
   prior to creating the link (the data in these directories will be lost). In
   the following examples, <replaceable>MIRRORTO</replaceable> needs to be
   replaced by the path the option <option>MirrorTo</option> is set to.
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <filename>/srv/www/htdocs/repo/$RCE</filename> must point to
     <filename><replaceable>MIRRORTO</replaceable>/repo/$RCE/</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/srv/www/htdocs/repo/RPMMD</filename> must point to
     <filename><replaceable>MIRRORTO</replaceable>/repo/RPMMD/</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/srv/www/htdocs/repo/testing</filename> must point to
     <filename><replaceable>MIRRORTO</replaceable>/repo/testing/</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/srv/www/htdocs/repo/full</filename> must point to
     <filename><replaceable>MIRRORTO</replaceable>/repo/full/</filename>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The directory specified using the <option>MirrorTo</option> option and the
   subdirectories listed above must exist. Files, directories, and links in
   <replaceable>/MIRRORTO</replaceable> must belong to the
   <systemitem
   class="username">smt</systemitem> user and the
   <systemitem
   class="groupname">www</systemitem> group.
  </para>

  <para>
   Here is an example where the <option>MirrorTo</option> is set to
   <literal>/mirror/data</literal>:
  </para>

<screen>
l /srv/www/htdocs/repo/
total 16
lrwxrwxrwx 1 smt  www    22 Feb  9 14:23 $RCE -&gt; /mirror/data/repo/$RCE/
drwxr-xr-x 4 smt  www  4096 Feb  9 14:23 ./
drwxr-xr-x 4 root root 4096 Feb  8 15:44 ../
lrwxrwxrwx 1 smt  www    23 Feb  9 14:23 RPMMD -&gt; /mirror/data/repo/RPMMD/
lrwxrwxrwx 1 smt  www    22 Feb  9 14:23 full -&gt; /mirror/data/repo/full/
drwxr-xr-x 2 smt  www  4096 Feb  8 11:12 keys/
lrwxrwxrwx 1 smt  www    25 Feb  9 14:23 testing -&gt; /mirror/data/repo/testing/
drwxr-xr-x 2 smt  www  4096 Feb  8 14:14 tools/
</screen>

  <para>
   The links can be created using the <command>ln -s</command> commands. For
   example:
  </para>

  <screen>cd /srv/www/htdocs/repo
for LINK in \$RCE RPMMD full testing; do
 ln -s /mirror/data/repo/${LINK}/ &amp;&amp; chown -h smt.www ${LINK}
done</screen>

  <important>
   <title>The <filename>/srv/www/htdocs/repo</filename> Directory</title>
   <para>
    The <filename>/srv/www/htdocs/repo</filename> directory must not be a
    symbolic link.
   </para>
  </important>
  <important>
   <!-- bsc #990479 -->
   <title>Apache and Symbolic Links</title>
   <para>
    By default Apache on &productname; is configured to not follow symbolic
    links. To enable symbolic links for
    <filename>/srv/www/htdocs/repo/</filename> add the following snippet to
    <filename>/etc/apache2/default-server.conf</filename> (or the respetive
    virtual host configurtion in case you are running &smt; on a virtual host):
   </para>
   <screen>&lt;Directory "/srv/www/htdocs/repo"&gt;
 Options FollowSymLinks
&lt;/Directory&gt;</screen>
   <para>
    After having made the change, test the syntax and reload the Apache
    configuration files to activate the change:
   </para>
   <screen>rcapache2 configtest &amp;&amp; rcapache2 reload</screen>
  </important>

 </sect1>
 <sect1>
  <title>The Structure of /srv/www/htdocs for SLE 12</title>

  <para>
   The repository structure in the <filename>/srv/www/htdocs</filename>
   directory matches the structure specified in &scc;. There are the
   following directories in the structure (selected examples, similar for other
   products and architectures):
  </para>

<screen>
repo/SUSE/Products/SLE-SDK/12/x86_64/product/
</screen>

  <para>
   Contains the -POOL repository of SDK (the GA version of all packages).
  </para>

<screen>
repo/SUSE/Products/SLE-SDK/12/x86_64/product.license/
</screen>

  <para>
   Contains EULA associated with the product.
  </para>

<screen>
repo/SUSE/Updates/SLE-SDK/12/x86_64/update/
repo/SUSE/Updates/SLE-SDK/12/s390x/update/
repo/SUSE/Updates/SLE-SERVER/12/x86_64/update/
</screen>

  <para>
   Contain update repositories for respective products.
  </para>

<screen>
repo/full/SUSE/Updates/SLE-SERVER/12/x86_64/update/
repo/testing/SUSE/Updates/SLE-SERVER/12/x86_64/update/
</screen>

  <para>
   Contain repositories created for staging of respective
   repositories.
  </para>
 </sect1>
 <sect1 xml:id="smt.mirroring.testenv">
  <title>Using the Test Environment</title>

  <para>
   You can mirror repositories to a test environment instead of the production
   environment. The test environment can be used with a limited number of
   client machines before the tested repositories are moved to the production
   environment. The test environment can be run on the main &smt; server.
  </para>

  <para>
   The testing environment uses the same structure as the production
   environment, but it is located in the
   <filename>/srv/www/htdocs/repos/testing/</filename> subdirectory.
  </para>

  <para>
   To mirror a repository to the testing environment, you can use the
   <guimenu>Staging</guimenu> tab in the &yast; &smt; Management module, or the
   command <command>smt-staging</command>.
  </para>

  <para>
   To register a client in the testing environment, modify
   <filename>/etc/SUSEConnect</filename> on the client machine as follows:
  </para>

<screen>namespace: testing</screen>

  <para>
   To move the testing environment to the production environment, manually copy
   or move it using the <command>cp -a</command> or <command>mv</command>
   command.
  </para>

  <para>
   You can enable <quote>staging</quote> for a repository in the
   <guimenu>Repositories</guimenu> tab of the &smt; Management module or with
   the <command>smt-repos</command> command. The mirroring happens
   automatically to <filename>repo/full/</filename>.
  </para>

  <para>
   If you have an SLE11-based update repository with patches, &smt; tools can
   be used to manage them. Using these tools, you can select patches and
   create a snapshot and copy it into <filename>repo/testing/</filename>. After
   tests are finished, you can copy the contents of
   <filename>repo/testing</filename> into the production area
   <filename>/repo</filename>.
  </para>

  <para>
   SLE10-based update repositories are not supported by &smt; tools. Not all of
   these repositories support selective staging. In this case, you must mirror
   the complete package.
  </para>

  <para>
   Recommended workflow:
  </para>

<screen>customer center =&gt; repo/full =&gt; repo/testing, =&gt; repo/production</screen>
 </sect1>
<!-- ==================================================================== -->
 <sect1 xml:id="smt.staging">
  <title>Testing and Filtering Update Repositories with Staging</title>

  <para>
   You can test repositories on any clients using the
   <command>smt-staging</command> command
   before moving them to the production environment. You can select new update
   repositories to be installed on clients.
  </para>

  <para>
   You can either use the <command>smt-staging</command> command or the &yast; &smt; Management module for staging. For more details, see
   <xref linkend="smt.yast.staging.stage"/>.
  </para>

  <figure>
   <title>&smt; Staging Schema</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="smt_staging.svg" width="70%" format="SVG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="smt_staging.png" width="70%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   Repositories with staging enabled are mirrored to the
   <filename>/<replaceable>MIRRORTO</replaceable>/repo/full</filename>
   subdirectory. This subdirectory is usually not used by your clients.
   Incoming new updates are not automatically visible to the clients before you
   get a chance to test them. Later, you can generate a testing environment of
   this repository, which goes to the
   <filename>/<replaceable>MIRRORTO</replaceable>/repo</filename> directory.
  </para>

  <para>
   If you have an SLE 11-based update repository with patches, you can use
   &smt; tools to manage them. Using these tools, you can select patches and
   create a snapshot and put it into <filename>repo/testing/</filename>. After
   tests are finished, you can put the content of
   <filename>repo/testing</filename> into the <filename>/repo</filename>
   production area called the <literal>default</literal> staging
   group. You can create additional staging groups as needed using the
   <command>smt-staging creategroup</command> command.
  </para>

  <note>
   <title>SLE 10-based Update Repositories</title>
   <para>
    SLE 10-based update repositories are not supported by &smt; tools. Not all
    of these repositories support selective staging. In this case, you need to
    mirror the complete package.
   </para>
  </note>

  <variablelist>
   <varlistentry>
    <term>Enabling Staging</term>
    <listitem>
     <para>
      To enable or disable staging, use the <command>smt-repos</command>
      command with the <option>--enable-staging</option> or <option>-s</option>
      options:
     </para>
<screen>smt-repos --enable-staging</screen>
     <para>
      You can enable the required repositories by entering the ID number or by
      entering the name and target. If you want to enable all repositories,
      enter <guimenu>a</guimenu>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Generating Testing and Production Snapshots</term>
    <listitem>
     <para>
      To create the testing repository in the <literal>default</literal> staging
      group, run the following command:
     </para>
<screen>smt-staging createrepo <replaceable>REPOSITORY_ID</replaceable> -âtesting</screen>
     <para>
      You can then test the installation and functionality of the patches in
      testing clients. If testing was successful, create the
      production repository:
     </para>
<screen>smt-staging createrepo <replaceable>REPOSITORY_ID</replaceable> --production</screen>
     <para>
      To create testing and production repositories in a named staging group,
      create the group and the repositories in this group:
     </para>
<screen>smt-staging creategroup <replaceable>GROUPNAME</replaceable> <replaceable>TESTINGDIR</replaceable> <replaceable>PRODUCTIONDIR</replaceable>
smt-staging createrepo --group <replaceable>GROUPNAME</replaceable> <replaceable>REPOSITORY_ID</replaceable> -âtesting
SMT-STAGING createrepo --group <replaceable>GROUPNAME</replaceable> <replaceable>REPOSITORY_ID</replaceable> -âproduction</screen>
     <para>
      This can be useful when you want to combine SLES11-SP1-Updates
      and SLES11-SP2-Updates of the <literal>sle-11-x86_64</literal>
      architecture into one repository of a group:
     </para>
<screen>smt-staging creategroup SLES11SP1-SP2-Up test-sp1-sp2 prod-sp1-sp2
smt-staging createrepo --group SLES11SP1-SP2-Up \
  SLES11-SP1-Updates sle-11-x86_64 --testing
smt-staging createrepo --group SLES11SP1-SP2-Up \
  SLES11-SP2-Updates sle-11-x86_64 --testing
smt-staging createrepo --group SLES11SP1-SP2-Up \
  SLES11-SP1-Updates sle-11-x86_64 --production
smt-staging createrepo --group SLES11SP1-SP2-Up \
  SLES11-SP2-Updates sle-11-x86_64 --production</screen>
     <para>
      Group names can contain the following characters: <literal>-_</literal>,
      <literal>a-z A-Z</literal>, and <literal>0-9</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
    <term>Filtering Patches</term>
    <listitem>
     <para>
      You can allow or forbid all or selected patches using the
      <command>allow</command> or <command>forbid</command> commands:
     </para>
<screen>smt-staging forbid --patch <replaceable>ID</replaceable>
smt-staging forbid --category <replaceable>CATEGORYNAME</replaceable></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Signing Changed Repositories</term>
    <listitem>
     <para>
      Filtering one or more patches from a repository invalidates the original
      signature, and the repository needs to be signed again. The
      <command>smt-staging createrepo</command> command does that
      automatically, provided you configure the &smt; server.
     </para>
     <para>
      To enable signing of changed metadata, the admin needs to generate a new
      signing key. This can be done with GPG like this:
     </para>
<screen>mkdir <replaceable>DIR</replaceable>
gpg --gen-key --homedir <replaceable>DIR</replaceable>
sudo mv <replaceable>DIR</replaceable> /var/lib/smt/.gnupg
sudo chown smt:users -R /var/lib/smt/.gnupg
sudo chmod go-rwx -R /var/lib/smt/.gnupg</screen>
     <para>
      The ID of the newly generated key can be obtained using the <command>gpg
      --gen-key</command> command. The ID must be added to the
      <option>signingKeyID</option> option in the
      <filename>/etc/smt.conf</filename> file.
     </para>
     <para>
      At this point, the clients are not aware of the new key. Import the
      new key to clients during their registration as follows:
     </para>
<screen>sudo -u smt gpg --homedir /var/lib/smt/.gnupg \
  --export -a <replaceable>SIGNING_KEYID</replaceable> \
  &gt; /<replaceable>MIRRORTO</replaceable>/repo/keys/smt-signing-key.key
     </screen>
     <para>
      In this example, <replaceable>MIRRORTO</replaceable> is the base
      directory where repositories will be mirrored. After that, clients can
      import this key during the registration process.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Registering Clients in the Testing Environment</term>
    <listitem>
     <para>
      To register a client in the testing environment, modify the
      <filename>/etc/SUSEConnect</filename> file on the client machine:
     </para>
<screen>namespace: testing</screen>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="smt.repo.preload">
  <title>Repository Preloading</title>

  <para>
   Deploying multiple &smt; servers can take time if each new &smt; server
   must mirror the same repositories.
  </para>

  <para>
   To save time when deploying new &smt; servers, the repositories can be preloaded
   from another server or disk instead. To do this, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     Enable the repositories to be mirrored with the &smt;, for example:
    </para>
<screen>smt-repos -e SLES12-Updates sle-12_x86_64</screen>
   </step>
   <step>
    <para>
     Perform a dry run of <command>smt-mirror</command> to create the required repository
     directories:
    </para>
<screen>smt-mirror -d --dryrun -L /var/log/smt/smt-mirror.log</screen>
    <para>
     The following directories are created based on the repository above and the default <option>MirrorTo</option>:
    </para>
<screen>/srv/www/htdocs/repo/repoindex.xml
/srv/www/htdocs/repo/$RCE/SLES12-Updates/sle-12-x86_64/*</screen>
   </step>
   <step>
    <para>
     Then copy the repositories from another &smt; server, for
     example:
    </para>
<screen>rsync -av 'smt12:/srv/www/htdocs/repo/\$RCE/SLES12-Updates/sle-12-x86_64/' \
 '/srv/www/htdocs/repo/$RCE/SLES12-Updates/sle-12-x86_64/'</screen>
   </step>
   <step>
    <para>
     To get the repository data fixed, run the following command:
    </para>
<screen>smt-mirror -d -L /var/log/smt/smt-mirror.log</screen>
   </step>
  </procedure>

  <important>
   <title>Possible Error Messages</title>
   <para>
    Errors, such as <literal>repomd.xml is the same, but repo is
    not valid. Start mirroring.</literal>, are considered normal.
 They occur because the metadata of the preloaded repositories in
 the server's database remains incorrect until the initial mirror of the repositories has completed.
   </para>
  </important>
 </sect1>
</chapter>
