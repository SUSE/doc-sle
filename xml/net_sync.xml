<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" xml:id="cha-net-rsync"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>File Copying with RSync</title>
 <info>
  <abstract>
   <para>
    Today, a typical user has several computers: home and workplace machines, a
    laptop, a smartphone or a tablet. This makes the task of keeping files and
    documents in synchronization across multiple devices all the more important.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <warning>
  <title>Risk of Data Loss</title>
  <para>
   Before you start using a synchronization tool, you should familiarize
   yourself with its features and functionality. Make sure to back up your
   important files.
  </para>
 </warning>
 <sect1 xml:id="sec-net-rsync-overview">
  <title>Conceptual Overview</title>

  <para>
   For synchronizing a large amount of data over a slow network connection,
   Rsync offers a reliable method of transmitting only changes within files.
   This applies not only to text files but also binary files. To detect the
   differences between files, Rsync subdivides the files into blocks and
   computes check sums over them.
  </para>

  <para>
   Detecting changes requires some computing power. So make sure that machines
   on both ends have enough resources, including RAM.
  </para>

  <para>
   Rsync can be particularly useful when large amounts of data containing only
   minor changes need to be transmitted regularly. This is often the case when
   working with backups. Rsync can also be useful for mirroring staging servers
   that store complete directory trees of Web servers to a Web server in a DMZ.
  </para>

  <para>
   Despite its name, Rsync is not a synchronization tool. Rsync is a tool that
   copies data only in one direction at a time. It does not and cannot do the
   reverse. If you need a bidirectional tool which can synchronize both
   source and destination, use Csync.
  </para>

<!-- Use cases and properties of Rsync? -->
 </sect1>
 <sect1 xml:id="sec-net-rsync-syntax">
  <title>Basic Syntax</title>

  <para>
   Rsync is a command-line tool that has the following basic syntax:
  </para>

<screen>rsync [OPTION] SOURCE [SOURCE]... DEST</screen>

  <para>
   You can use Rsync on any local or remote machine, provided you have access
   and write permissions. It is possible to have multiple
   <replaceable>SOURCE</replaceable> entries. The
   <replaceable>SOURCE</replaceable> and <replaceable>DEST</replaceable>
   placeholders can be paths, URLs, or both.
  </para>

  <para>
   Below are the most common Rsync options:
  </para>

  <variablelist>
   <varlistentry>
    <term><option>-v</option>
    </term>
    <listitem>
     <para>
      Outputs more verbose text
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-a</option>
    </term>
    <listitem>
     <para>
      Archive mode; copies files recursively and preserves time stamps,
      user/group ownership, file permissions, and symbolic links
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-z</option>
    </term>
    <listitem>
     <para>
      Compresses the transmitted data
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <note>
   <title>Trailing Slashes Count</title>
   <para>
    When working with Rsync, you should pay particular attention to trailing
    slashes. A trailing slash after the directory denotes the
    <emphasis>content</emphasis> of the directory. No trailing slash denotes
    the <emphasis>directory itself</emphasis>.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-net-rsync-local-copy">
  <title>Copying Files and Directories Locally</title>

  <para>
   The following description assumes that the current user has write
   permissions to the directory <filename>/var/backup</filename>. To copy a
   single file from one directory on your machine to another path, use the
   following command:
  </para>

<screen>&prompt.user;<command>rsync</command> -avz backup.tar.xz /var/backup/</screen>

  <para>
   The file <filename>backup.tar.xz</filename> is copied to
   <filename>/var/backup/</filename>; the absolute path will be
   <filename>/var/backup/backup.tar.xz</filename>.
  </para>

  <para>
   Do not forget to add the <emphasis>trailing slash</emphasis> after the
   <filename>/var/backup/</filename> directory! If you do not insert the slash,
   the file <filename>backup.tar.xz</filename> is copied to
   <filename>/var/backup</filename> (file) <emphasis>not</emphasis> inside the
   directory <filename>/var/backup/</filename>!
  </para>

  <para>
   Copying a directory is similar to copying a single file. The following
   example copies the directory <filename>&exampleuser_plain;/</filename> and
   its content into the directory <filename>/var/backup/</filename>:
  </para>

<screen>&prompt.user;<command>rsync</command> -avz &exampleuser_plain; /var/backup/</screen>

  <para>
   Find the copy in the absolute path
   <filename>/var/backup/&exampleuser_plain;/</filename>.
  </para>
 </sect1>
 <sect1 xml:id="sec-net-rsync-remote-copy">
  <title>Copying Files and Directories Remotely</title>

  <para>
   The Rsync tool is required on both machines. To copy files from or to remote
   directories requires an IP address or a domain name. A user name is optional
   if your current user names on the local and remote machine are the same.
  </para>

  <para>
   To copy the file <filename>file.tar.xz</filename> from your local host to
   the remote host
   <systemitem
     class="ipaddress">&exampledomain1ip;.1</systemitem> with
   same users (being local and remote), use the following command:
  </para>

<screen>&prompt.user;<command>rsync</command> -avz file.tar.xz  &exampleuser_plain;@&exampledomain1ip;.1:</screen>

  <para>
   Depending on what you prefer, these commands are also possible and
   equivalent:
  </para>

<screen>&prompt.user;<command>rsync</command> -avz file.tar.xz &exampledomain1ip;.1:~
&prompt.user;<command>rsync</command> -avz file.tar.xz &exampledomain1ip;.1:/home/&exampleuser_plain;</screen>

  <para>
   In all cases with standard configuration, you will be prompted to enter your
   passphrase of the remote user. This command will copy
   <filename>file.tar.xz</filename> to the home directory of user &exampleuser;
   (usually <filename>/home/&exampleuser_plain;</filename>).
  </para>

  <para>
   Copying a directory remotely is similar to copying a directory locally. The
   following example copies the directory
   <filename>&exampleuser_plain;/</filename> and its content into the remote
   directory <filename>/var/backup/</filename> on the
   <systemitem class="ipaddress">&exampledomain1ip;.1</systemitem> host:
  </para>

<screen>&prompt.user;<command>rsync</command> -avz &exampleuser_plain; &exampledomain1ip;.1:/var/backup/</screen>

  <para>
   Assuming you have write permissions on the host
   <systemitem class="ipaddress">&exampledomain1ip;.1</systemitem>, you will
   find the copy in the absolute path
   <filename>/var/backup/&exampleuser_plain;</filename>.
  </para>
 </sect1>
 <sect1 xml:id="sec-net-rsync-server">
  <title>Configuring and Using an Rsync Server</title>

  <para>
   Rsync can run as a daemon
   (<systemitem class="daemon"
     >rsyncd</systemitem>) listing on default
   port 873 for incoming connections. This daemon can receive <quote>copying
   targets</quote>.
  </para>

  <para>
   The following description explains how to create an Rsync server on
   <systemitem>&wsI;</systemitem> with a <emphasis>backup</emphasis> target.
   This target can be used to store your backups. To create an Rsync server, do
   the following:
  </para>

  <procedure>
   <title>Setting Up an Rsync Server</title>
   <step xml:id="st-rsync-server-mkdir">
    <para>
     On &wsI;, create a directory to store all your backup files. In this
     example, we use <filename>/var/backup</filename>:
    </para>
<screen>&prompt.root;<command>mkdir</command> /var/backup</screen>
   </step>
   <step>
    <para>
     Specify ownership. In this case, the directory is owned by user
     &exampleuser; in group
     <systemitem class="groupname"
       >users</systemitem>:
    </para>
<screen>&prompt.root;<command>chown</command> &exampleuser_plain;.users /var/backup</screen>
   </step>
   <step>
    <para>
     Configure the rsyncd daemon.
    </para>
    <para>
     We will separate the configuration file into a main file and some
     <quote>modules</quote> which hold your backup target. This makes it easier
     to add additional targets later. Global values can be stored in
     <filename>/etc/rsyncd.d/*.inc</filename> files, whereas your modules are
     placed in <filename>/etc/rsyncd.d/*.conf</filename> files:
    </para>
    <substeps>
     <step>
      <para>
       Create a directory <filename>/etc/rsyncd.d/</filename>:
      </para>
<screen>&prompt.root;<command>mkdir</command> /etc/rsyncd.d/</screen>
     </step>
     <step>
      <para>
       In the main configuration file <filename>/etc/rsyncd.conf</filename>,
       add the following lines:
      </para>
<screen># rsyncd.conf main configuration file
log file = /var/log/rsync.log
pid file = /var/lock/rsync.lock

&amp;merge /etc/rsyncd.d <co xml:id="co-rsync-conf-merge"/>
&amp;include /etc/rsyncd.d <co xml:id="co-rsync-conf-include"/></screen>
      <calloutlist>
       <callout arearefs="co-rsync-conf-merge">
        <para>
         Merges global values from <filename>/etc/rsyncd.d/*.inc</filename>
         files into the main configuration file.
        </para>
       </callout>
       <callout arearefs="co-rsync-conf-include">
        <para>
         Loads any modules (or targets) from
         <filename>/etc/rsyncd.d/*.conf</filename> files. These files should
         not contain any references to global values.
        </para>
       </callout>
      </calloutlist>
     </step>
     <step>
      <para>
       Create your module (your backup target) in the file
       <filename>/etc/rsyncd.d/backup.conf</filename> with the following lines:
      </para>
<screen># backup.conf: backup module
[backup] <co xml:id="co-rsync-conf-target"/>
   uid = &exampleuser_plain; <co xml:id="co-rsync-conf-uid-gid"/>
   gid = users <xref linkend="co-rsync-conf-uid-gid"/>
   path = /var/backup <co xml:id="co-rsync-conf-path"/>
   auth users = &exampleuser_plain;  <co xml:id="co-rsync-conf-authusers"/>
   secrets file = /etc/rsyncd.secrets <co xml:id="co-rsync-conf-secretfiles"/>
   comment = Our backup target</screen>
      <calloutlist>
       <callout arearefs="co-rsync-conf-target">
        <para>
         The <emphasis>backup</emphasis> target. You can use any name you like.
         However, it is a good idea to name a target according to its purpose
         and use the same name in your <filename>*.conf</filename> file.
        </para>
       </callout>
       <callout arearefs="co-rsync-conf-uid-gid">
        <para>
         Specifies the user name or group name that is used when the file
         transfer takes place.
        </para>
       </callout>
       <callout arearefs="co-rsync-conf-path">
        <para>
         Defines the path to store your backups (from
         <xref linkend="st-rsync-server-mkdir"/>).
        </para>
       </callout>
       <callout arearefs="co-rsync-conf-authusers">
        <para>
         Specifies a comma-separated list of allowed users. In its simplest
         form, it contains the user names that are allowed to connect to this
         module. In our case, only user &exampleuser; is allowed.
        </para>
       </callout>
       <callout arearefs="co-rsync-conf-secretfiles">
        <para>
         Specifies the path of a file that contains lines with user names and
         plain passwords.
        </para>
       </callout>
      </calloutlist>
     </step>
     <step>
      <para>
       Create the <filename>/etc/rsyncd.secrets</filename> file with the
       following content and replace <replaceable>PASSPHRASE</replaceable>:
      </para>
<screen># user:passwd
&exampleuser_plain;:<replaceable>PASSPHRASE</replaceable></screen>
     </step>
     <step>
      <para>
       Make sure the file is only readable by &rootuser;:
      </para>
<screen>&prompt.root;<command>chmod</command> 0600 /etc/rsyncd.secrets</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Start and enable the rsyncd daemon with:
    </para>
<screen>&prompt.root;<command>systemctl</command> enable rsyncd
&prompt.root;<command>systemctl</command> start rsyncd</screen>
   </step>
   <step>
    <para>
     Test the access to your Rsync server:
    </para>
<screen>&prompt.user;<command>rsync</command> &wsI;::</screen>
    <para>
     You should see a response that looks like this:
    </para>
<screen>backup          Our backup target</screen>
    <para>
     Otherwise, check your configuration file, firewall and network settings.
    </para>
   </step>
  </procedure>

  <para>
   The above steps create an Rsync server that can now be used to store
   backups. The example also creates a log file listing all connections. This
   file is stored in <filename>/var/log/rsyncd.log</filename>. This is useful
   if you want to debug your transfers.
  </para>

  <para>
   To list the content of your backup target, use the following command:
  </para>

<screen>&prompt.user;rsync -avz &wsI;::backup</screen>

  <para>
   This command lists all files present in the directory
   <filename>/var/backup</filename> on the server. This request is also logged
   in the log file <filename>/var/log/rsyncd.log</filename>. To start an actual
   transfer, provide a source directory. Use <literal>.</literal> for the
   current directory. For example, the following command copies the current
   directory to your Rsync backup server:
  </para>

<screen>&prompt.user;rsync -avz . &wsI;::backup</screen>

  <para>
   By default, Rsync does not delete files and directories when it runs. To
   enable deletion, the additional option <option>--delete</option> must be
   stated. To ensure that no newer files are deleted, the option
   <option>--update</option> can be used instead. Any conflicts that arise must
   be resolved manually.
  </para>
 </sect1>
 <sect1 xml:id="sec-net-rsync-summary">
  <title>For More Information</title>

  <variablelist>
   <varlistentry>
    <term>Csync</term>
    <listitem>
     <para>
      Bidirectional file synchronizer, see
      <link xlink:href="https://www.csync.org/"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>RSnapshot</term>
    <listitem>
     <para>
      Creates incremental backups, see
      <link xlink:href="http://rsnapshot.org"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Unison</term>
    <listitem>
     <para>
      A file synchronizer similar to CSync but with a graphical interface, see
      <link
      xlink:href="http://www.seas.upenn.edu/~bcpierce/unison/"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Rear</term>
    <listitem>
     <para>
      A disaster recovery framework, see the <citetitle>Administration
      Guide</citetitle> of the &sle; &hasi;
      <link
       xlink:href="https://www.suse.com/documentation/sle-ha/"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
