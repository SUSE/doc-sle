<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1
    version="5.0" xml:id="sec-sec-prot-general-pam"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Password and Login Management with PAM</title>

    <para>
     Linux-PAM (Pluggable Authentication Modules for Linux) is a suite of
     shared libraries that enable the local system administrator to choose
     how applications authenticate users.
    </para>

    <para>
     It is strongly recommended to familiarize oneself with the capabilities
     of PAM and how this architecture can be leveraged to provide the
     best authentication setup for an environment. This configuration can be
     done once – and implemented across all systems (a standard) or can be
     enhanced for individual hosts (enhanced security – by host / service
     / application). The key is to realize how flexible the architecture is.
    </para>

    <para>
     To learn more about the PAM architecture, find PAM documentation in
     the <filename>/usr/share/doc/packages/pam</filename> directory (in
     a variety of formats).
    </para>

    <para>
     The following discussions are examples of how to modify the default PAM
     stacks&mdash;specifically around password policies&mdash;for
     example password strength, password re-use and account locking. While
     these are only a few of the possibilities, they serve as a good start
     and demonstrate PAM's flexibility.
    </para>
    <important>
        <title><command>pam-config</command> Limitations</title>
        <para>
            The <command>pam-config</command> tool can be used to configure the 
            common-{account,auth,password,session} PAM configuration files, which
            contain global options. These files include the following comment:
        </para>
        <screen># This file is autogenerated by pam-config. All changes
# will be overwritten.</screen>
        <para>
            Individual service files, such as <filename>login, password, sshd</filename>, 
            and <filename>su</filename> must be edited directly. You may elect to edit 
            all files directly, and not use <command>pam-config</command>, though
            <command>pam-config</command> includes useful features such as converting
            an older configuration, updating your current configuration, and sanity checks. 
            For more information, see <command>man 8 pam-config</command>.
        </para>
    </important>

    <sect2 xml:id="sec-sec-prot-general-pam-pw-strength">
     <title>Password Strength</title>
     <para>
      &productname; can leverage the
      <systemitem class="library">pam_cracklib</systemitem> library to test
      for weak passwords – and to suggest using a stronger one if it
      determines obvious weakness. The following parameters represent an
      example that could be part of a corporate password policy or something
      required because of audit constraints.
     </para>
     <para>
      The PAM libraries follow a defined flow. The best way to design the
      perfect stack usually is to consider all of the requirements and
      policies and draw out a flow chart.
     </para>
     <table>
      <title>Sample rules/constraints for password enforcement</title>
      <tgroup cols="3">
       <tbody>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>minlen=8</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum length of password is 8
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>lcredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of lowercase letters is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>ucredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of uppercase letters is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>dcredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of digits is 1
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <systemitem class="library">pam_cracklib.so</systemitem>
          </para>
         </entry>
         <entry>
          <para>
           <literal>ocredit=-1</literal>
          </para>
         </entry>
         <entry>
          <para>
           Minimum number of other characters is 1
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <para>
      To set up these password restrictions, use the
      <command>pam-config</command> tool to specify the parameters you want
      to configure. For example, the minimum length parameter could be
      modified like this:
     </para>
<screen>&prompt.sudo;pam-config -a --cracklib-minlen=8 --cracklib-retry=3 \
--cracklib-lcredit=-1 --cracklib-ucredit=-1 --cracklib-dcredit=-1 \
--cracklib-ocredit=-1 --cracklib</screen>
     <para>
      Now verify that the new password restrictions work for new passwords.
      Simply login to a non-root account and change the password using the
      <command>passwd</command> command. Note that the above requirements
      are not enforced if you run the <command>passwd</command> command
      under root.
     </para>
    </sect2>

    <sect2 xml:id="sec-sec-prot-general-pam-pw-previous">
     <title>Restricting Use of Previous Passwords</title>
     <para>
      The pam_pwhistory module can be used to configure the number of
      previous passwords that cannot be reused. The following command
      implements password restrictions on a system so that a password cannot
      be reused for at least six months:
     </para>
     <screen>&prompt.sudo;pam-config -a --pwhistory --pwhistory-remember=26</screen>
     <para>
      Recall that in the section
      <xref linkend="sec-sec-prot-general-pw-aging"/> we set
      <literal>PASS_MIN_DAYS</literal> to <literal>7</literal>, which
      specifies the minimum number of days allowed between password changes.
      Therefore, if <systemitem>pam_unix</systemitem> is configured to
      remember <literal>26</literal> passwords, then the previously used
      passwords cannot be reused for at least six months (26*7 days).
     </para>
     <para>
      The PAM configuration (<filename>/etc/pam.d/common-auth</filename>)
      resulting from the <command>pam-config</command> command looks like the
      following:
     </para>
     <screen>auth      required   pam_env.so
auth      required   pam_unix.so     try_first_pass
account   required   pam_unix.so     try_first_pass
password  requisit   pam_cracklib.so
password  required   pam_pwhistory.so        remember=26
password  optional   pam_gnome_keyring.so    use_authtok
password  required   pam_unix.so     use_authtok nullok shadow try_first_pass
session   required   pam_limits.so
session   required   pam_unix.so     try_first_pass
session   optional   pam_umask.so</screen>
    </sect2>

    <sect2 xml:id="sec-sec-prot-general-pam-lock-accounts">
     <title>Locking User Accounts After Too Many Login Failures</title>
     <para>
      Locking accounts after a defined number of failed ssh, login, su, or sudo attempts
      is a common security practice. However, this could lead to outages if an 
      application, admin, or root user is locked out. In effect this
      makes it easy to cause denial-of-service attacks by deliberately creating
      login failures. Fortunately, controlling this with PAM is straightforward.
     </para>
     <para>
      By default, PAM allows all root logins. Use <command>pam_tally2</command>
      to control failed login behavior for all other users, including human and
      system users. Add the following line to the top of
      <filename>/etc/pam.d/login</filename> to lock out all users (except root)
      after six failed logins, and to automatically unlock the account after
      ten minutes:
     </para>
<screen>auth required pam_tally2.so deny=6 unlock_time=600</screen>
     <para>
         This is an example of a complete <filename>/etc/pam.d/login</filename> file:
     </para>
<screen>#%PAM-1.0
auth     requisite      pam_nologin.so
auth     include        common-auth
auth     required       pam_tally2.so deny=6 unlock_time=600
account  include        common-account
account  required       pam_tally2.so
password include        common-password
session  required       pam_loginuid.so
session  include        common-session
#session  optional       pam_lastlog.so nowtmp showfailed
session  optional       pam_mail.so standard</screen>        
     <para>
      You may also lock out root, though obviously you must be very certain
      you want to do this:
     </para>
<screen>auth required pam_tally2.so deny=6 even_deny_root unlock_time=600</screen>
     <para>
      You may define a different lockout time for root:
     </para>
     <screen>auth required pam_tally2.so deny=6 root_unlock_time=120  unlock_time=600</screen>
    <para>
     If you want to require the administrator to unlock accounts, leave off the
     <literal>unlock_time</literal> option. The next two example commands
     display the number of failed login attempts and how to unlock a user
     account:
    </para>
<screen>&prompt.root;<command>pam_tally2 -u <replaceable>username</replaceable></command>
Login           Failures Latest failure     From
username            6    12/17/19 13:49:43  pts/1

&prompt.root;<command>pam_tally2 -r -u <replaceable>username</replaceable></command></screen>      
       
     <para>
      The default location for attempted accesses is recorded in
      <filename>/var/log/tallylog</filename>.
     </para>
     <para>
      If the user succeeds in logging in after the login timeout expires, or after 
      the administrator resets their account, the counter resets to 0.
     </para>
     <para>
      Configure other login services to use <command>pam_tally2</command> in their
      individual configuration files in <filename>/etc/pam.d/</filename>:
      <filename>sshd, su, sudo, sudo-i</filename>, and <filename>su-l</filename>.
     </para>
 </sect2>     
</sect1>
