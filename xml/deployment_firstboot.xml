<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter version="5.0" xml:id="cha.deployment_firstboot"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Deploying Customized Preinstallations</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  Rolling out customized preinstallations of &productname; to many identical
  machines spares you from installing each one of them separately and provides
  a standardized installation for the end users.  With &yast; Firstboot,
  create customized preinstallation images and determine the workflow for the
  final personalizing steps that involve end user interaction (as opposed to
  &ay;, which allows completely automated installations; for more information,
  see <xref linkend="cha.deployment.autoinst"/>).
 </para>
 <para>
  Creating a custom installation, rolling it out to your hardware, and
  personalizing the final product involves the following steps:
 </para>
 <procedure>
  <step>
   <para>
    Prepare the master machine whose disk needs to be cloned to the client
    machines. For more information, refer to
    <xref linkend="sec.fb.master"/>.
   </para>
  </step>
  <step>
   <para>
    Customize the firstboot workflow. For more information, refer to
    <xref linkend="sec.fb.customize"/>.
   </para>
  </step>
  <step>
   <para>
    Clone the master machine's disk and roll this image out to the clients'
    disks. For more information, refer to <xref linkend="sec.fb.clone"/>.
   </para>
  </step>
  <step>
   <para>
    Have the end user personalize the instance of &productname;. For more
    information, refer to <xref linkend="sec.fb.personalize"/>.
   </para>
  </step>
 </procedure>
 <sect1 xml:id="sec.fb.master">
  <title>Preparing the Master Machine</title>

  <para>
   To prepare a master machine for a firstboot workflow, proceed as follows:
  </para>

  <procedure>
   <step xml:id="st.master1">
    <para>
     Insert the installation media into the master machine.
    </para>
   </step>
   <step xml:id="st.master2">
    <para>
     Boot the machine.
    </para>
   </step>
   <step xml:id="st.master3">
    <para>
     Perform a normal installation including all necessary configuration
     steps and wait for the installed machine to boot. Also install the
     <systemitem>yast2-firstboot</systemitem> package.
    </para>
   </step>
   <step xml:id="st.master4">
    <para>
     To define your own workflow of &yast; configuration steps for the
     end user or to add your own &yast; modules to this workflow, proceed
     to <xref linkend="sec.fb.customize"/>. Otherwise proceed directly to
     <xref linkend="st.master5"/>.
    </para>
   </step>
   <step xml:id="st.master5">
    <para>
     Enable firstboot as &rootuser;:
    </para>
    <para>
     Create an empty file
     <filename>/var/lib/YaST2/reconfig_system</filename> to trigger
     firstboot's execution. This file will be deleted after the firstboot
     configuration has been successfully accomplished. Create this file
     using the following command:
    </para>
<screen>touch /var/lib/YaST2/reconfig_system</screen>
   </step>
   <step>
    <para>
     Proceed to <xref linkend="sec.fb.clone"/>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.fb.customize">
  <title>Customizing the Firstboot Installation</title>

  <para>
   Customizing the firstboot installation workflow may involve several
   different components. Customizing them is recommended. If you do not make
   any changes, firstboot performs the installation using the default
   settings. The following options are available:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Customizing messages to the user, as described in
     <xref linkend="sec.fb.customize.msg"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Customizing licenses and license actions, as described in
     <xref linkend="sec.fb.customize.license"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Customizing the release notes to display, as described in
     <xref linkend="sec.fb.customize.rn"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Customizing the order and number of components involved in the
     installation, as described in <xref linkend="sec.fb.customize.wf"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     Configuring additional optional scripts, as described in
     <xref linkend="sec.fb.customize.script"/>.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   To customize any of these components, modify the following configuration
   files:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/etc/sysconfig/firstboot</filename>
    </term>
    <listitem>
     <para>
      Configure various aspects of firstboot (such as release notes,
      scripts, and license actions).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/YaST2/firstboot.xml</filename>
    </term>
    <listitem>
     <para>
      Configure the installation workflow by enabling or disabling
      components or adding custom ones.
     </para>
     <para>
      Provide translations for such a customized installation workflow, as
      described in <xref linkend="sec.fb.provide.trans"/>.
     </para>
     <tip>
      <title>Alternative Location of the Control File</title>
      <para>
       <filename>/etc/YaST2/firstboot.xml</filename> is the default path for
       the control file, installed by the
       <systemitem>yast2-firstboot</systemitem> package. If you need to
       define a different location for the control file, edit
       <filename>/etc/sysconfig/firstboot</filename>, and change the
       <literal>FIRSTBOOT_CONTROL_FILE</literal> variable to your preferred
       location.
      </para>
     </tip>
    </listitem>
   </varlistentry>
  </variablelist>

<!-- bnc#506373: referencing docs about control.xml -->

  <para>
   If you want to customize more than the workflow components, refer to the
   <filename>control.xml</filename> documentation at
   <link xlink:href="http://doc.opensuse.org/projects/YaST/SLES11/tdg/inst_in_general_chap.html#product_control"/>.
  </para>

  <sect2 xml:id="sec.fb.customize.msg">
   <title>Customizing &yast; Messages</title>
   <para>
    By default, an installation of &productname; contains several default
    messages that are localized and displayed at certain stages of the
    installation process. These include a welcome message, a license
    message, and a congratulatory message at the end of installation. You
    can replace any of these with your own versions and include localized
    versions of them in the installation. To include your own welcome
    message, proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Log in as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Open the <filename>/etc/sysconfig/firstboot</filename> configuration
      file and apply the following changes:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Set <envar>FIRSTBOOT_WELCOME_DIR</envar> to the directory path where
        you want to store the files containing the welcome message and the
        localized versions, for example:
       </para>
<screen>FIRSTBOOT_WELCOME_DIR="/usr/share/firstboot/"
</screen>
      </step>
      <step>
       <para>
        If your welcome message has file names other than
        <filename>welcome.txt</filename> and
        <filename>welcome_<replaceable>locale</replaceable>.txt</filename>
        (where <replaceable>locale</replaceable> matches the ISO 639
        language codes such as <quote>cs</quote> or <quote>de</quote>),
        specify the file name pattern in
        <envar>FIRSTBOOT_WELCOME_PATTERNS</envar>. For example:
       </para>
<screen>FIRSTBOOT_WELCOME_PATTERNS="mywelcome.txt"</screen>
       <para>
        If unset, the default value of <filename>welcome.txt</filename> is
        assumed.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Create the welcome file and the localized versions and place them in
      the directory specified in the
      <filename>/etc/sysconfig/firstboot</filename> configuration file.
     </para>
    </step>
   </procedure>
   <para>
    Proceed in a similar way to configure customized license and finish
    messages. These variables are <envar>FIRSTBOOT_LICENSE_DIR</envar> and
    <envar>FIRSTBOOT_FINISH_FILE</envar>.
   </para>
   <para>
    Change the <envar>SHOW_Y2CC_CHECKBOX</envar> to <quote>yes</quote> if
    the user needs to be able to start &yast; directly after performing
    the installation.
   </para>
  </sect2>

  <sect2 xml:id="sec.fb.customize.license">
   <title>Customizing the License Action</title>
   <para>
    You can customize the way the installation system reacts to a user's
    refusal to accept the license agreement. There are three different ways
    which the system could react to this scenario:
   </para>
   <variablelist>
    <varlistentry>
     <term>halt</term>
     <listitem>
      <para>
       The firstboot installation is aborted and the entire system shuts
       down. This is the default setting.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>continue</term>
     <listitem>
      <para>
       The firstboot installation continues.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>abort</term>
     <listitem>
      <para>
       The firstboot installation is aborted, but the system attempts to
       boot.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Make your choice and set <envar>LICENSE_REFUSAL_ACTION</envar> to the
    appropriate value.
   </para>
  </sect2>

  <sect2 xml:id="sec.fb.customize.rn">
   <title>Customizing the Release Notes</title>
   <para>
    Depending on if you have changed the instance of &productname; you
    are deploying with firstboot, you probably need to educate the end users
    about important aspects of their new operating system. A standard
    installation uses release notes (displayed during one of the final
    stages of the installation) to provide important information to the
    users. To have your own modified release notes displayed as part of a
    firstboot installation, proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Create your own release notes file. Use the RTF format as in the
      example file in <filename>/usr/share/doc/release-notes</filename> and
      save the result as <filename>RELEASE-NOTES.en.rtf</filename> (for
      English).
     </para>
    </step>
    <step>
     <para>
      Store optional localized versions next to the original version and
      replace the <literal>en</literal> part of the file name with the
      actual ISO 639 language code, such as <literal>de</literal> for
      German.
     </para>
    </step>
    <step>
     <para>
      Open the firstboot configuration file from
      <filename>/etc/sysconfig/firstboot</filename> and set
      <envar>FIRSTBOOT_RELEASE_NOTES_PATH</envar> to the actual directory
      where the release notes files are stored.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.fb.customize.wf">
   <title>Customizing the Workflow</title>
   <para>
    The provided <filename>/etc/YaST2/firstboot.xml</filename> example defines
    a standard workflow which includes the following enabled components:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Language Selection
     </para>
    </listitem>
    <listitem>
     <para>
      Welcome
     </para>
    </listitem>
<!-- there is an additional firstboot_license_novell -->
    <listitem>
     <para>
      License Agreement
     </para>
    </listitem>
    <listitem>
     <para>
      Time and Date
     </para>
    </listitem>
    <listitem>
     <para>
      Users
     </para>
    </listitem>
    <listitem>
     <para>
      Root Password
     </para>
    </listitem>
    <listitem>
     <para>
      Finish Setup
     </para>
    </listitem>
   </itemizedlist>
   <para>
    But bear in mind that this workflow is just a template. You may adjust
    it properly, editing manually the firstboot configuration file
    <filename>/etc/YaST2/firstboot.xml</filename>. This XML file is a subset
    of the standard <filename>control.xml</filename> file that is used by
    &yast; to control the installation workflow. See <xref linkend="ex.fb.wf"/>
    to learn more about how to configure the workflow section.
   </para>
   <para>
    For an overview about proposals, see <xref linkend="ex.fb.proposal"/>.
    This provides you with enough background to modify the firstboot
    installation workflow. The basic syntax of the firstboot configuration
    file (plus how the key elements are configured) is explained with this
    example.
   </para>
   <example xml:id="ex.fb.proposal">
    <title>Configuring the Proposal Screens</title>
<screen>
    &hellip;
    &lt;proposals config:type="list"&gt;<co xml:id="co.fb.plist"/>
        &lt;proposal&gt;<co xml:id="co.fb.p"/>
            &lt;name&gt;firstboot_hardware&lt;/name&gt;<co xml:id="co.fb.pname"/>
            &lt;mode&gt;installation&lt;/mode&gt;<co xml:id="co.fb.pmode"/>
            &lt;stage&gt;firstboot&lt;/stage&gt;<co xml:id="co.fb.pstage"/>
            &lt;label&gt;Hardware Configuration&lt;/label&gt;<co xml:id="co.fb.plabel"/>
            &lt;proposal_modules config:type="list"&gt;<co xml:id="co.fb.pmodl"/>
                &lt;proposal_module&gt;printer&lt;/proposal_module&gt;<co xml:id="co.fb.pmod"/>
            &lt;/proposal_modules&gt;
        &lt;/proposal&gt;
        &lt;proposal&gt;
        &hellip;
        &lt;/proposal&gt;
    &lt;/proposals&gt;
   </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.fb.plist">
     <para>
      The container for all proposals that should be part of the firstboot
      workflow.
     </para>
    </callout>
    <callout arearefs="co.fb.p">
     <para>
      The container for an individual proposal.
     </para>
    </callout>
    <callout arearefs="co.fb.pname">
     <para>
      The internal name of the proposal.
     </para>
    </callout>
    <callout arearefs="co.fb.pmode">
     <para>
      The mode of this proposal. Do not make any changes here. For a
      firstboot installation, this must be set to
      <literal>installation</literal>.
     </para>
    </callout>
    <callout arearefs="co.fb.pstage">
     <para>
      The stage of the installation process at which this proposal is
      invoked. Do not make any changes here. For a firstboot installation,
      this must be set to <literal>firstboot</literal>.
     </para>
    </callout>
    <callout arearefs="co.fb.plabel">
     <para>
      The label to be displayed on the proposal.
     </para>
    </callout>
    <callout arearefs="co.fb.pmodl">
     <para>
      The container for all modules that are part of the proposal screen.
     </para>
    </callout>
    <callout arearefs="co.fb.pmod">
     <para>
      One or more modules that are part of the proposal screen.
     </para>
    </callout>
   </calloutlist>
   <para>
    The next section of the firstboot configuration file consists of the
    workflow definition. All modules that should be part of the firstboot
    installation workflow must be listed here.
   </para>
   <example xml:id="ex.fb.wf">
    <title>Configuring the Workflow Section</title>
<screen>
    &lt;workflows  config:type="list"&gt;
        &lt;workflow&gt;
            &lt;defaults&gt;
                &lt;enable_back&gt;yes&lt;/enable_back&gt;
                &lt;enable_next&gt;yes&lt;/enable_next&gt;
                &lt;archs&gt;all&lt;/archs&gt;
            &lt;/defaults&gt;
            &lt;stage&gt;firstboot&lt;/stage&gt;
            &lt;label&gt;Configuration&lt;/label&gt;
            &lt;mode&gt;installation&lt;/mode&gt;
            &hellip; &lt;!&ndash;&ndash; list of modules  &ndash;&ndash;&gt;
            &lt;/modules&gt;
        &lt;/workflow&gt;
    &lt;/workflows&gt;
    &hellip;
  </screen>
   </example>
   <para>
    The overall structure of the <literal>workflows</literal> section is
    very similar to that of the <literal>proposals</literal> section. A
    container holds the workflow elements and the workflow elements all
    include stage, label and mode information (just as the proposals
    introduced in <xref linkend="ex.fb.proposal"/>). The most notable
    difference is the <filename>defaults</filename> section, which contains
    basic design information for the workflow components:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>enable_back</literal>
     </term>
     <listitem>
      <para>
       Include the <guimenu>Back</guimenu> button in all dialogs.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>enable_next</literal>
     </term>
     <listitem>
      <para>
       Include the <guimenu>Next</guimenu> button in all dialogs.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>archs</literal>
     </term>
     <listitem>
      <para>
       Specify the hardware architectures on which this workflow should be
       used.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <example xml:id="ex.fb.wfmod">
    <title>Configuring the List of Workflow Components</title>
<screen>
    &lt;modules  config:type="list"&gt;<co xml:id="co.fb.modl"/>
        &lt;module&gt;<co xml:id="co.fb.mod"/>
            &lt;label&gt;Language&lt;/label&gt;<co xml:id="co.fb.label"/>
            &lt;enabled config:type="boolean"&gt;false&lt;/enabled&gt;<co xml:id="co.fb.en"/>
            &lt;name&gt;firstboot_language&lt;/name&gt;<co xml:id="co.fb.name"/>
        &lt;/module&gt;
    &lt;modules&gt;
  </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.fb.modl">
     <para>
      The container for all components of the workflow.
     </para>
    </callout>
    <callout arearefs="co.fb.mod">
     <para>
      The module definition.
     </para>
    </callout>
    <callout arearefs="co.fb.label">
     <para>
      The label displayed with the module.
     </para>
    </callout>
    <callout arearefs="co.fb.en">
     <para>
      The switch to enable or disable this component in the workflow.
     </para>
    </callout>
    <callout arearefs="co.fb.name">
     <para>
      The module name. The module itself must be located under
      <filename>/usr/share/YaST2/clients</filename>.
     </para>
    </callout>
   </calloutlist>
   <para>
    To make changes to the number or order of proposal screens during the
    firstboot installation, proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Open the firstboot configuration file at
      <filename>/etc/YaST2/firstboot.xml</filename>.
     </para>
    </step>
    <step>
     <para>
      Delete or add proposal screens or change the order of the existing
      ones:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        To delete an entire proposal, remove the <literal>proposal</literal>
        element including all its sub-elements from the
        <literal>proposals</literal> section and remove the respective
        <literal>module</literal> element (with sub-elements) from the
        workflow.
       </para>
      </listitem>
      <listitem>
       <para>
        To add a new proposal, create a new <literal>proposal</literal>
        element and fill in all the required sub-elements. Make sure that
        the proposal exists as a &yast; module in
        <filename>/usr/share/YaST2/clients</filename>.
       </para>
      </listitem>
      <listitem>
       <para>
        To change the order of proposals, move the respective
        <literal>module</literal> elements containing the proposal screens
        around in the workflow. Note that there may be dependencies to other
        installation steps that require a certain order of proposals and
        workflow components.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Apply your changes and close the configuration file.
     </para>
    </step>
   </procedure>
   <para>
    You can always change the workflow of the configuration steps when the
    default does not meet your needs. Enable or disable certain modules in
    the workflow (or add your own custom ones).
   </para>
   <para>
    To toggle the status of a module in the firstboot workflow, proceed as
    follows:
   </para>
   <procedure>
    <step>
     <para>
      Open the <filename>/etc/YaST2/firstboot.xml</filename> configuration
      file.
     </para>
    </step>
    <step>
     <para>
      Change the value for the <literal>enabled</literal> element from
      <literal>true</literal> to <filename>false</filename> to disable the
      module or from <literal>false</literal> to <literal>true</literal> to
      enable it again.
     </para>
<screen>
&lt;module&gt;
    &lt;label&gt;Time and Date&lt;/label&gt;
    &lt;enabled config:type="boolean"&gt;true&lt;/enabled&gt;
    &lt;name&gt;firstboot_timezone&lt;/name&gt;
&lt;/module&gt;
</screen>
    </step>
    <step>
     <para>
      Apply your changes and close the configuration file.
     </para>
    </step>
   </procedure>
   <para>
    To add a custom made module to the workflow, proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Create your own &yast; module and store the module file
      <filename><replaceable>module_name</replaceable>.rb</filename> in
      <filename>/usr/share/YaST2/clients</filename>.
     </para>
    </step>
    <step>
     <para>
      Open the <filename>/etc/YaST2/firstboot.xml</filename> configuration
      file.
     </para>
    </step>
    <step>
     <para>
      Determine at which point in the workflow your new module should be
      run. In doing so, make sure that possible dependencies to other steps
      in the workflow are taken into account and resolved.
     </para>
    </step>
    <step>
     <para>
      Create a new <literal>module</literal> element inside the
      <literal>modules</literal> container and add the appropriate
      sub-elements:
     </para>
<screen>&lt;modules config:type="list"&gt;
     &hellip;
     &lt;module&gt;
        &lt;label&gt;<replaceable>my_module</replaceable>&lt;/label&gt;
        &lt;enabled config:type="boolean"&gt;true&lt;/enabled&gt;
        &lt;name&gt;<replaceable>filename_my_module</replaceable>&lt;/name&gt;
     &lt;/module&gt;
&lt;/modules&gt;
</screen>
     <substeps performance="required">
      <step>
       <para>
        Enter the label to be displayed on your module in the
        <literal>label</literal> element.
       </para>
      </step>
      <step>
       <para>
        Make sure that <literal>enabled</literal> is set to
        <literal>true</literal> to have your module included in the
        workflow.
       </para>
      </step>
      <step>
       <para>
        Enter the file name of your module in the <literal>name</literal>
        element. Omit the full path and the <filename>.rb</filename>
        suffix.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Apply your settings and close the configuration file.
     </para>
    </step>
   </procedure>
   <tip>
    <title>
     Finding a Connected Network Interface For Auto-Configuration
    </title>
    <para>
     If the target hardware may feature more than one network interface add
     the <systemitem>network-autoconfig</systemitem> package to the
     application image. <systemitem>network-autoconfig</systemitem> makes
     sure that during firstboot all available Ethernet interfaces are cycled
     until one is successfully configured with DHCP.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec.fb.customize.script">
   <title>Configuring Additional Scripts</title>
   <para>
    Firstboot can be configured to execute additional scripts after the
    firstboot workflow has been completed. To add additional scripts to the
    firstboot sequence, proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Open the <filename>/etc/sysconfig/firstboot</filename> configuration
      file and make sure that the path specified for
      <envar>SCRIPT_DIR</envar> is correct. The default value is
      <filename>/usr/share/firstboot/scripts</filename>.
     </para>
    </step>
    <step>
     <para>
      Create your shell script, store it in the specified directory, and
      apply the appropriate file permissions.
     </para>
    </step>
   </procedure>
  </sect2>

<!-- fate#306986 -->

  <sect2 xml:id="sec.fb.provide.trans">
   <title>Providing Translations of the Installation Workflow</title>
   <para>
    Depending on the end user it could be desirable to offer translations of
    the customized workflow. Those translations could be necessary, if you
    customized the workflow by changing the
    <filename>/etc/YaST2/firstboot.xml</filename> file, as described in
    <xref linkend="sec.fb.customize.wf"/>. This is different from the
    localization of customized &yast; messages, which is already
    described in <xref linkend="sec.fb.customize.msg"/>.
   </para>
   <para>
    If you have changed <filename>/etc/YaST2/firstboot.xml</filename> and
    introduced string changes, generate a new translation template file
    (<filename>.pot</filename> file) and use the
    <systemitem>gettext</systemitem> tool chain to translate and finally
    install the translated files in the &yast; locale directories
    (<filename>/usr/share/YaST2/locale</filename>) as compiled
    <filename>.mo</filename> files. Proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Change the <systemitem>textdomain</systemitem> setting from:
     </para>
<screen>&lt;textdomain&gt;firstboot&lt;/textdomain&gt;</screen>
     <para>
      to, for example,
     </para>
<screen>&lt;textdomain&gt;firstboot-oem&lt;/textdomain&gt;</screen>
    </step>
    <step>
     <para>
      Use <command>xgettext</command> to extract the translatable strings to
      the translation template file (<filename>.pot</filename> file), for
      example to <filename>firstboot-oem.pot</filename>:
     </para>
<screen>xgettext -L Glade -o firstboot-oem.pot /etc/YaST2/firstboot.xml</screen>
    </step>
    <step>
     <para>
      Start the translation process. Then package the translated files
      (<filename>.<replaceable>LL_code</replaceable>.po</filename> files)
      the same way as translations of the other projects and install the
      compiled <filename>firstboot-oem.mo</filename> files.
     </para>
    </step>
   </procedure>
   <para>
    If you need translations for additional or changed &yast; modules,
    provide translations within such a module itself. If you changed an
    existing module, make sure to change also its text-domain statement to
    avoid undesired side effects.
   </para>
   <tip>
    <title>For More Information</title>
    <para>
     For more information about &yast; development, refer to
     <link xlink:href="http://en.opensuse.org/openSUSE:YaST_development"/>.
     Detailed information about &yast; firstboot can be found at
     <link xlink:href="http://doc.opensuse.org/projects/YaST/SLES11/tdg/bk09ch01s02.html"/>.
    </para>
   </tip>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.fb.clone">
  <title>Cloning the Master Installation</title>

  <para>
   Clone the master machine's disk using any of the imaging mechanisms
   available to you, and roll these images out to the target machines. For
   more information about imaging see
   <link xlink:href="http://doc.opensuse.org/projects/kiwi/doc/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.fb.personalize">
  <title>Personalizing the Installation</title>

  <para>
   As soon as the cloned disk image is booted, firstboot starts and the
   installation proceeds exactly as laid out in
   <xref linkend="sec.fb.customize.wf"/>. Only the components included in
   the firstboot workflow configuration are started. All other installation
   steps are skipped. The end user adjusts language, keyboard, network, and
   password settings to personalize the workstation. After this process is
   finished, a firstboot installed system behaves as any other instance of
   &productname;.
  </para>
 </sect1>
</chapter>
