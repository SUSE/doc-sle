<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter version="5.0" role="General" xml:id="cha.deployment.prep_boot"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Preparing the Boot of the Target System</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  &productnamereg; can be installed in different ways. Apart from the usual
  media installation covered in <xref linkend="cha.inst"/>, you can choose from
  various network-based approaches or even take a completely hands-off approach
  to the installation of &productname;.
 </para>
 <para>
  The examples use NFS for serving the installation data. If you want to use
  FTP, SMB or HTTP, see <xref linkend="cha.deployment.instserver" />.
 </para>
 <note>
  <title>Terminology</title>
  <para>
   In the following sections, the system to hold your new &productname;
   installation is called <emphasis>target system</emphasis> or
   <emphasis>installation target</emphasis>. The term
   <emphasis>repository</emphasis> (previously called <quote>installation
   source</quote>) is used for all sources of installation data. This includes
   physical media, such as CD and DVD, and network servers distributing the
   installation data in your network.
  </para>
 </note>
 <para>
  This section covers the configuration tasks needed in complex boot scenarios.
  It contains ready-to-apply configuration examples for DHCP, PXE boot, TFTP,
  and Wake on LAN.
 </para>
 <para>
  The examples assume that the DHCP, TFTP and NFS server reside on the same
  machine with the IP 192.168.1.1. All services can reside on different
  machines without any problems. Make sure to change the IP addresses as
  required.
 </para>
 <sect1 xml:id="sec.deployment.prep_boot.dhcp">
  <title>Setting Up a DHCP Server</title>
  <para>
   All the DHCP server needs to do, apart from providing automatic address
   allocation to your network clients, is to announce the IP address of the
   TFTP server and the file that needs to be pulled in by the installation
   routines on the target machine. The file that has to be loaded depends
   on the architecture of the target machine and whether legacy BIOS or
   UEFI boot is used.
  </para>
  <procedure xml:id="proc.deployment.prep_boot.dhcp.man">
   <step>
    <para>
     Log in as &rootuser; to the machine hosting the DHCP server.
    </para>
   </step>
   <step>
    <para>
     Enable the DHCP server by executing <command>systemctl enable
     dhcpd</command>.
    </para>
   </step>
   <step>
    <para>
     Append the following lines to a subnet configuration of your DHCP
     server's configuration file located under
     <filename>/etc/dhcpd.conf</filename>:
    </para>
<screen># The following lines are optional
option domain-name "my.lab";
option domain-name-servers 192.168.1.1;
option routers 192.168.1.1;
option ntp-servers 192.168.1.1;
ddns-update-style none;
default-lease-time 3600;

# The following lines are required
option arch code 93 = unsigned integer 16; # RFC4578
subnet 192.168.1.0 netmask 255.255.255.0 {
 next-server 192.168.1.1;
 range 192.168.1.100 192.168.1.199;
 default-lease-time 3600;
 max-lease-time 3600;
 if option arch = 00:07 or option arch = 00:09 {
   filename "/EFI/x86/grub.efi";
 }
 else if option arch = 00:0b {
   filename "/EFI/aarch64/bootaa64.efi";
 }
 else  {
   filename "/BIOS/x86/pxelinux.0";
 }
}
</screen>
    <para>
     This configuration example uses the subnet 192.168.1.0/24 with the
     DHCP, DNS and gateway on the server with the IP 192.168.1.1. Make sure
     that all used IP addresses are changed according to your network layout.
     For more information about the options available in <filename>dhcpd.conf</filename>,
     refer to the <systemitem>dhcpd.conf</systemitem> manual page.
    </para>
   </step>
   <step>
    <para>
     Restart the DHCP server by executing <command>systemctl restart
     dhcpd</command>.
    </para>
   </step>
  </procedure>
  <para>
   If you plan on using SSH for the remote control of a PXE and Wake on LAN
   installation, explicitly specify the IP address DHCP should provide to the
   installation target. To achieve this, modify the above mentioned DHCP
   configuration according to the following example:
  </para>
<screen>group {
 host test {
   hardware ethernet <replaceable>mac_address</replaceable>;
   fixed-address <replaceable>some_ip_address</replaceable>;
   }
}
</screen>
  <para>
   The host statement introduces the host name of the installation target. To
   bind the host name and IP address to a specific host, you must know and
   specify the system's hardware (MAC) address. Replace all the variables used
   in this example with the actual values that match your environment.
  </para>
  <para>
   After restarting the DHCP server, it provides a static IP to the host
   specified, enabling you to connect to the system via SSH.
  </para>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.tftp">
  <title>Setting Up a TFTP Server</title>

  <para>
   If using a &suse; based installation, you may use &yast; to set up a TFTP
   Server. Alternatively, set it up manually. The TFTP server delivers the boot
   image to the target system after it boots and sends a request for it.
  </para>

  <sect2 xml:id="sec.deployment.prep_boot.tftp.yast">
   <title>Setting Up a TFTP Server Using &yast;</title>
   <procedure xml:id="proc.deployment.prep_boot.tftp.yast">
    <step>
     <para>
      Log in as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Start <menuchoice> <guimenu>&yast;</guimenu> <guimenu>Network
      Services</guimenu> <guimenu>TFTP Server</guimenu></menuchoice> and
      install the requested package.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Enable</guimenu> to make sure that the server is started
      and included in the boot routines. No further action from your side is
      required to secure this. xinetd starts tftpd at boot time.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Open Port in Firewall</guimenu> to open the appropriate
      port in the firewall running on your machine. If there is no firewall
      running on your server, this option is not available.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Browse</guimenu> to browse for the boot image directory.
      The default directory <filename>/srv/tftpboot</filename> is created and
      selected automatically.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Finish</guimenu> to apply your settings and start the
      server.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.deployment.prep_boot.tftp.man">
   <title>Setting Up a TFTP Server Manually</title>
   <procedure xml:id="proc.deployment.prep_boot.tftp.man">
    <step>
     <para>
      Log in as &rootuser; and install the packages
      <systemitem>tftp</systemitem> and <systemitem>xinetd</systemitem>.
     </para>
    </step>
    <step>
     <para>
      Modify the configuration of xinetd located under
      <filename>/etc/xinetd.d</filename> to make sure that the TFTP server is
      started on boot:
     </para>
     <substeps performance="required">
      <step>
       <para>
        If it does not exist, create a file called <filename>tftp</filename>
        under this directory with <command>touch tftp</command>. Then run
        <command>chmod 755 tftp</command>.
       </para>
      </step>
      <step>
       <para>
        Open the file <filename>tftp</filename> and add the following lines:
       </para>
<screen>service tftp
{
        socket_type            = dgram
        protocol               = udp
        wait                   = yes
        user                   = root
        server                 = /usr/sbin/in.tftpd
        server_args            = -s /srv/tftpboot
        disable                = no
}
</screen>
      </step>
      <step>
       <para>
        Save the file and restart xinetd with <command>systemctl restart
         xinetd</command>.
       </para>
      </step>
     </substeps>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.deployment.pxe">
  <title>Installing Files on TFTP Server</title>
  <para>
   The following procedures describes how to prepare the server for target
   machines with UEFI and BIOS on x86 architectures with 32 and 64 bit.
   The prepared structure also already provides a place for aarch64 systems.
  </para>
  <sect2 xml:id="sec.deployment.prep_boot.pxe">
   <title>Preparing Structure</title>
   <para>
    In this procedure replace <replaceable>OS_version</replaceable> and <replaceable>SP_version</replaceable>
    with the used operating system and service pack version. For example use
    <literal>sles12</literal> and <literal>sp3</literal>.
   </para>
   <procedure>
    <step>
     <para>
      Create a structure in <filename>/srv/tftpboot</filename> to
      support the various options.
     </para>
     <screen>
&prompt.root;mkdir -p /srv/tftpboot/BIOS/x86
&prompt.root;mkdir -p /srv/tftpboot/EFI/x86/boot
&prompt.root;mkdir -p /srv/tftpboot/EFI/aarch64/boot
&prompt.root;mkdir -p /srv/install/x86/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1
&prompt.root;mkdir -p /srv/install/aarch64/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1
     </screen> 
    </step>
    <step>
     <para>
      Download the DVD ISO images of &productname; SP3 from the &suse; website
      for all architectures you need.
     </para>
    </step>
    <step>
     <para>
      Mount the ISO files as described in <xref linkend="sec.deployment.remoteinst.iso" />.
      To have the files available after a reboot, create an entry in the
      <filename>/etc/fstab</filename>. For a standard installation only DVD1 is requried.
     </para>
<screen>&prompt.root;mount -o loop <replaceable>path_to_iso</replaceable> /srv/install/<replaceable>arch</replaceable>/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1/</screen>
     <para>
      Repeat this step for all required architectures and replace
      <replaceable>arch</replaceable> with <literal>x86</literal> or
      <literal>aarch64</literal> and <replaceable>path_to_iso</replaceable>
      with the path to the corresponding iso file.
     </para>
     <para>
     </para>
    </step>
    <step>
     <para>
      Copy the <filename>kernel</filename>, <filename>initrd</filename>
      and <filename>message</filename> files required for x86 BIOS and
      UEFI boot to the appropriate location.
     </para>
     <screen>
&prompt.root;cd /srv/install/x86/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1/boot/x86_64/loader/
&prompt.root;cp -a linux initrd message /srv/tftpboot/BIOS/x86/
     </screen>
    </step>
    <step>
     <para>
      Ensure that the path <filename>/srv/install</filename> is available
      via NFS. For details, see <xref linkend="sec.deployment.instserver.nfs" />.
     </para>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec.deployment.prep_boot.pxelinux">
   <title>BIOS Files for x86</title>
   <procedure>
    <step>
     <para>
      Copy the <filename>pxelinux.0</filename> into the TFTP folder and prepare
      a subfolder for the config file.
     </para>
     <screen>
&prompt.root;cp /usr/share/syslinux/pxelinux.0 /srv/tftpboot/BIOS/x86/
&prompt.root;mkdir /srv/tftpboot/BIOS/x86/pxelinux.cfg
     </screen>
    </step>
    <step>
     <para>
      Create the <filename>/srv/tftpboot/BIOS/x86/pxelinux.cfg/default</filename>
      and add the following lines:
     </para>
     <screen>
default install

# hard disk
label harddisk
 localboot -2
# install
label install
 kernel linux
 append initrd=initrd install=nfs://192.168.1.1:/srv/install/x86/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1

display message
implicit 0
prompt 1
timeout 5
     </screen>
    </step>
    <step>
     <para>
      Edit the file <filename>/srv/tftpboot/BIOS/x86/message</filename>
      to reflect the <filename>default</filename> file you just edited.
     </para>
     <screen>
Welcome to the Installer Environment! 

To start the installation enter 'install' and press &lt;return&gt;.

Available boot options:
 harddisk   - Boot from Hard Disk (this is default)
 install    - Installation
     </screen>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec.deployment.prep_boot.efilinux_x86">
   <title>UEFI Files for x86</title>
   <para>
    In this procedure replace <replaceable>OS_version</replaceable> and <replaceable>SP_version</replaceable>
    with the used operating system and service pack version. For example use
    <literal>sles12</literal> and <literal>sp3</literal>.
   </para>
   <procedure>
    <step>
     <para>
      Copy all required <package>grub2</package> files for UEFI booting.
     </para>
     <screen>
&prompt.root;cd /srv/install/x86/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1/EFI/BOOT
&prompt.root;cp -a bootx64.efi grub.efi MokManager.efi /srv/tftpboot/EFI/x86/
     </screen>
    </step>
    <step>
     <para>
      Copy the kernel and initrd files to the directory structure.
     </para>
     <screen>
&prompt.root;cd /srv/install/x86/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1/boot/x86_64/loader/
&prompt.root;cp -a linux initrd /srv/tftpboot/EFI/x86/boot
     </screen>
    </step>
    <step>
     <para>
     Create the file <filename>/srv/tftpboot/EFI/x86/grub.cfg</filename>
     with at least the following content:
     </para>
     <screen>
set timeout=5
menuentry 'Install <replaceable>OS_version</replaceable> <replaceable>SP_version</replaceable> for x86_64' {
  linuxefi /EFI/x86/boot/linux \
   install=nfs://192.168.1.1/srv/install/x86/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1
  initrdefi /EFI/x86/boot/initrd
}
     </screen>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec.deployment.prep_boot.efilinux_aarch64">
   <title>UEFI Files for AARCH64</title>
   <para>
    In this procedure replace <replaceable>OS_version</replaceable> and <replaceable>SP_version</replaceable>
    with the used operating system and service pack version. For example use
    <literal>sles12</literal> and <literal>sp3</literal>.
   </para>
   <procedure>
    <step>
     <para>
     This is done in a way very similar to the x86_64 EFI environment.
     Start by copying the files required for UEFI booting of a grub2-efi environment.
     </para>
     <screen>
&prompt.root;cd /srv/install/aarch64/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1/EFI/BOOT
&prompt.root;cp -a bootaa64.efi /srv/tftpboot/EFI/aarch64/
     </screen>
    </step>
    <step>
     <para>
      Copy the kernel and initrd to the directory structure
     </para>
     <screen>
&prompt.root;cd /srv/install/aarch64/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1/boot/aarch64
&prompt.root;cp -a linux initrd /srv/tftpboot/EFI/aarch64/boot
     </screen>
    </step>
    <step>
     <para>
      Now create the file <filename>/srv/tftpboot/EFI/grub.cfg</filename> and add
      the following content:
     </para>
     <screen>
menuentry 'Install <replaceable>OS_version</replaceable> <replaceable>SP_version</replaceable>' {
  linux /EFI/aarch64/boot/linux network=1 usessh=1 sshpassword="suse" \
   install=nfs://192.168.1.1:/srv/install/aarch64/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1 \
   console=ttyAMA0,115200n8
  initrd /EFI/aarch64/boot/initrd
}
     </screen>
     <para>
      This addition to the config file has a few other options to enable the
      serial console and allow installation via ssh, which is helpful for
      systems that do not have a standard KVM console interface.  You’ll notice
      that this is specifically setup for a specific ARM platform.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.pxeopts">
  <title>PXELINUX Configuration Options</title>

  <para>
   The options listed here are a subset of all the options available for the
   PXELINUX configuration file.
  </para>

  <variablelist>
   <varlistentry>
    <term><option>APPEND <replaceable>options... </replaceable></option>
    </term>
    <listitem>
     <para>
      Add one or more options to the kernel command line. These are added for
      both automatic and manual boots. The options are added at the very
      beginning of the kernel command line, usually permitting explicitly
      entered kernel options to override them.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>APPEND -</option>
    </term>
    <listitem>
     <para>
      Append nothing. <option>APPEND</option> with a single hyphen as argument
      in a <option>LABEL</option> section can be used to override a global
      <option>APPEND</option>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>DEFAULT <replaceable>kernel options</replaceable>...</option>
    </term>
    <listitem>
     <para>
      Sets the default kernel command line. If PXELINUX boots automatically, it
      acts as if the entries after DEFAULT had been typed in at the boot
      prompt, except the auto option is automatically added, indicating an
      automatic boot.
     </para>
     <para>
      If no configuration file exists or no DEFAULT entry is defined in the
      configuration file, the default is the kernel name <quote>linux</quote>
      with no options.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- FATE#313283 -->
    <term><option>IFAPPEND <replaceable>FLAG</replaceable></option>
    </term>
    <listitem>
     <para>
      Adds a specific option to the kernel command line depending on the
      <replaceable>FLAG</replaceable> value. The <option>IFAPPEND</option>
      option is available only on PXELINUX. <replaceable>FLAG</replaceable>
      expects a value, described in
      <xref linkend="tab.deployment.boot.pxeopts.ifappend"/>:
     </para>
     <table xml:id="tab.deployment.boot.pxeopts.ifappend">
      <title>Generated and Added Kernel Command Line Options from <option>IFAPPEND</option></title>
      <tgroup cols="2">
       <colspec colwidth="1*"/>
       <colspec colwidth="4*"/>
       <thead>
        <row>
         <entry valign="middle">
          <para>
           Argument
          </para>
         </entry>
         <entry>
          <para>
           Generated Kernel Command Line/Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <option>1</option>
          </para>
         </entry>
         <entry>
<screen>ip=<replaceable>CLIENT_IP</replaceable>:<replaceable>BOOT_SERVER_IP</replaceable>:<replaceable>GW_IP</replaceable>:<replaceable>NETMASK</replaceable></screen>
          <para>
           The placeholders are replaced based on the input from the DHCP/BOOTP
           or PXE boot server.
          </para>
          <para>
           Note, this option is not a substitute for running a DHCP client in
           the booted system. Without regular renewals, the lease acquired by
           the PXE BIOS will expire, making the IP address available for reuse
           by the DHCP server.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <option>2</option>
          </para>
         </entry>
         <entry>
<screen>BOOTIF=<replaceable>MAC_ADDRESS_OF_BOOT_INTERFACE</replaceable></screen>
          <para>
           This option is useful if you want to avoid timeouts when the
           installation server probes one LAN interface after the other until
           it gets a reply from a DHCP server. Using this option allows an
           initrd program to determine from which interface the system has been
           booted. linuxrc reads this option and uses this network interface.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <option>4</option>
          </para>
         </entry>
         <entry>
<screen>SYSUUID=<replaceable>SYSTEM_UUID</replaceable></screen>
          <para>
           Adds UUIDs in lowercase hexadecimals, see
           <filename>/usr/share/doc/packages/syslinux/pxelinux.txt</filename>
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>LABEL <replaceable>label</replaceable> KERNEL <replaceable>image</replaceable>
       APPEND <replaceable>options</replaceable>...</option>
    </term>
    <listitem>
     <para>
      Indicates that if <replaceable>label</replaceable> is entered as the
      kernel to boot, PXELINUX should instead boot
      <replaceable>image</replaceable> and the specified
      <option>APPEND</option> options should be used instead of the ones
      specified in the global section of the file (before the first
      <option>LABEL</option> command). The default for
      <replaceable>image</replaceable> is the same as
      <replaceable>label</replaceable> and, if no <option>APPEND</option> is
      given, the default is to use the global entry (if any). Up to 128
      <option>LABEL</option> entries are permitted.
     </para>
<!-- fs 2014-02-07: The following seems unrelated in this context. Whatsmore,
     Legacy GRUB is no longer shipped with SLE

      <para>
       Note that &grub; uses the following syntax:
      </para>
<screen>title mytitle
  kernel <replaceable>my_kernel</replaceable><replaceable>my_kernel_options</replaceable>
  initrd <replaceable>myinitrd</replaceable></screen>
-->
     <para>
      PXELINUX uses the following syntax:
     </para>
<screen>label <replaceable>mylabel</replaceable>
  kernel <replaceable>mykernel</replaceable>
  append <replaceable>myoptions</replaceable></screen>
     <para>
      Labels are mangled as if they were file names and they must be unique
      after mangling. For example, the two labels <quote>v2.6.30</quote> and
      <quote>v2.6.31</quote> would not be distinguishable under PXELINUX
      because both mangle to the same DOS file name.
     </para>
     <para>
      The kernel does not need to be a Linux kernel. It can also be a boot
      sector or a COMBOOT file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>LOCALBOOT <replaceable>type</replaceable></option>
    </term>
    <listitem>
     <para>
      On PXELINUX, specifying <option>LOCALBOOT 0</option> instead of a
      <option>KERNEL</option> option means invoking this particular label and
      causes a local disk boot instead of a kernel boot.
     </para>
     <informaltable frame="topbot" rowsep="0">
      <tgroup cols="2">
<!--<colspec colnum="1" colname="1" colwidth="20"/>
        <colspec colnum="2" colname="2" colwidth="60"/>-->
       <thead>
        <row>
         <entry>
          <para>
           Argument
          </para>
         </entry>
         <entry>
          <para>
           Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <literal>0</literal>
          </para>
         </entry>
         <entry>
          <para>
           Perform a normal boot
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>4</literal>
          </para>
         </entry>
         <entry>
          <para>
           Perform a local boot with the Universal Network Driver Interface
           (UNDI) driver still resident in memory
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>5</literal>
          </para>
         </entry>
         <entry>
          <para>
           Perform a local boot with the entire PXE stack, including the UNDI
           driver, still resident in memory
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
     <para>
      All other values are undefined. If you do not know what the UNDI or PXE
      stacks are, specify <literal>0</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>TIMEOUT <replaceable>time-out</replaceable></option>
    </term>
    <listitem>
     <para>
      Indicates how long to wait at the boot prompt until booting
      automatically, in units of 1/10 second. The time-out is canceled when the
      user types anything on the keyboard, assuming the user will complete the
      command begun. A time-out of zero disables the time-out completely (this
      is also the default). The maximum possible time-out value is 35996 (just
      less than one hour).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>PROMPT<replaceable> flag_val</replaceable></option>
    </term>
    <listitem>
     <para>
      If <option>flag_val</option> is 0, displays the boot prompt only if
      <keycap function="shift"/> or <keycap function="alt"/> is pressed or
      <keycap>Caps Lock</keycap> or <keycap>Scroll Lock</keycap> is set (this
      is the default). If <option>flag_val</option> is 1, always displays the
      boot prompt.
     </para>
<screen>F2  <replaceable>filename</replaceable>
F1  <replaceable>filename</replaceable>
..etc...
F9  <replaceable>filename</replaceable>
F10 <replaceable>filename</replaceable></screen>
     <para>
      Displays the indicated file on the screen when a function key is pressed
      at the boot prompt. This can be used to implement preboot online help
      (presumably for the kernel command line options). For backward
      compatibility with earlier releases, <keycap>F10</keycap> can be also
      entered as <literal>F0</literal>. Note that there is currently no way to
      bind file names to <keycap>F11</keycap> and <keycap>F12</keycap>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.pxeprep">
  <title>Preparing the Target System for PXE Boot</title>

  <para>
   Prepare the system's BIOS for PXE boot by including the PXE option in the
   BIOS boot order.
  </para>

  <warning>
   <title>BIOS Boot Order</title>
   <para>
    Do not place the PXE option ahead of the hard disk boot option in the BIOS.
    Otherwise this system would try to re-install itself every time you boot
    it.
   </para>
  </warning>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.wolprep">
  <title>Preparing the Target System for Wake on LAN</title>

  <para>
   Wake on LAN (WOL) requires the appropriate BIOS option to be enabled prior
   to the installation. Also, note down the MAC address of the target system.
   This data is needed to initiate Wake on LAN.
  </para>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.wol">
  <title>Wake on LAN</title>

  <para>
   Wake on LAN allows a machine to be turned on by a special network packet
   containing the machine's MAC address. Because every machine in the world has
   a unique MAC identifier, you do not need to worry about accidentally turning
   on the wrong machine.
  </para>

  <important>
   <title>Wake on LAN across Different Network Segments</title>
   <para>
    If the controlling machine is not located in the same network segment as
    the installation target that should be awakened, either configure the WOL
    requests to be sent as multicasts or remotely control a machine on that
    network segment to act as the sender of these requests.
   </para>
  </important>

  <para>
   Users of &sls; can use a &yast; module called WOL to easily configure Wake
   on LAN. Users of other versions of &suselinux;-based operating systems can
   use a command line tool.
  </para>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.wolyast">
  <title>Wake on LAN with &yast;</title>

  <procedure xml:id="proc.deployment.prep_boot.wolyast">
   <step>
    <para>
     Log in as &rootuser;.
    </para>
   </step>
   <step>
    <para>
     Start <menuchoice> <guimenu>&yast;</guimenu> <guimenu>Network
     Services</guimenu> <guimenu>WOL</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add</guimenu> and enter the host name and MAC address of
     the target system.
    </para>
   </step>
   <step>
    <para>
     To turn on this machine, select the appropriate entry and click
     <guimenu>Wake up</guimenu>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.mksusecd">
  <title>Booting From CD or USB Drive Instead of PXE</title>
  <para>
   You can also use a CD, DVD or USB drive with a small system image instead
   instead of booting via PXE. The necessary files will be loaded via NFS
   as soon as the kernel and initrd are loaded. A bootable image can be
   created with <command>mksusecd</command>. This can be useful if the target
   machine does not support PXE boot.
  </para>
  <para>
   Install it with <command>sudo zypper in mksusecd</command>.
   Use the following command to create a bootable ISO image:
  </para>
  <screen>&prompt.user;<command>mksusecd</command> --create image.iso \
--net=nfs://192.168.1.1:/srv/install/<replaceable>arch</replaceable>/<replaceable>OS_version</replaceable>/<replaceable>SP_version</replaceable>/cd1  \
/srv/tftpboot/EFI/<replaceable>arch</replaceable>/boot</screen>
  <para>
   Replace <replaceable>arch</replaceable> with the the folder corresponding
   to the target system architecture. Also replace <replaceable>OS_version</replaceable>
   and <replaceable>SP_version</replaceable> according to your paths in
   <xref linkend="sec.deployment.pxe" />.
  </para>
  <para>
   Instead of using the a NFS server for the <option>--net</option> option,
   it is also possible to use an HTTP repository, for example the &opensuse;
   repository:
  </para>
  <screen>&prompt.user;<command>mksusecd</command> --create image.iso \
--net=http://download.opensuse.org/tumbleweed/repo/oss/suse \
/srv/tftpboot/EFI/<replaceable>arch</replaceable>/boot</screen>
  <para>
   The <filename>image.iso</filename> can be written to a DVD or CD, or with
   the help of <command>dd</command> to a USB stick:
  </para>
  <screen>&prompt.root;<command>dd</command> if=image.iso of=/dev/<replaceable>usb_device</replaceable></screen>
  <para>
   Replace <replaceable>usb_device</replaceable> with the device name of your
   USB stick. Check the device name thoroughly to ensure that you are not
   accidentally destroying data on another drive.
  </para>
 </sect1>
</chapter>
