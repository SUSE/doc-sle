<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="apache2.xml" version="5.0" xml:id="cha-apache2">
 <title>Apache HTTP 伺服器</title>
 <info>
  <abstract>
   <para>
    根據 <link xlink:href="http://www.netcraft.com/"/> 和 <link xlink:href="https://w3techs.com/"/> 的調查，Apache HTTP 伺服器 (Apache) 是全球最常用的 Web 伺服器之一。它由 Apache 軟體基金會 (<link xlink:href="http://www.apache.org/"/>) 研發，可在大部分作業系統上使用。<phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 包含 Apache 版本 2.4。本章介紹如何安裝、設定和運作 Apache。此外，本文還介紹了如何使用 SSL 等其他模組，以及如何對 Apache 進行疑難排解。
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-apache2-quickstart">
  <title>快速入門</title>

  <para>
   本節內容有助於您快速設定和啟動 Apache。您必須登入為 <systemitem class="username">root</systemitem> 身分，才能安裝和設定 Apache。
  </para>

  <sect2 xml:id="sec-apache-quickstart-requirements">
   <title>要求</title>
   <para>
    在設定 Apache Web 伺服器之前，請先確定您已符合下列要求：
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      此機器的網路已正確設定。如需有關這個主題的詳細資訊，請參閱 <xref linkend="cha-network"/>。
     </para>
    </listitem>
    <listitem>
     <para>
      此機器的實際系統時間已透過時間伺服器進行同步維護。這是必要動作，因為 HTTP 通訊協定的部分內容會依據正確時間來運作。如需有關這個主題的詳細資訊，請參閱<xref linkend="cha-ntp"/>。
     </para>
    </listitem>
    <listitem>
     <para>
      已安裝最新的安全性更新。如果不清楚是否已安裝，請執行「YaST 線上更新」。
     </para>
    </listitem>
    <listitem>
     <para>
      防火牆中已開啟預設的 Web 伺服器連接埠 (<literal>80</literal>)。為此，請將 <systemitem class="daemon">firewalld</systemitem> 設定為允許在公共區域中使用 <literal>http</literal> 服務。如需詳細資料，請參閱<xref linkend="sec-security-firewall-firewalld-cmd"/>。
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-quickstart-installation">
   <title>安裝</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 預設不會安裝到系統。若要以可<quote>直接</quote>執行的預先定義標準組態進行安裝，請按照以下步驟操作：
   </para>
   <procedure>
    <title>以預設組態安裝 Apache</title>
    <step>
     <para>
      啟動 YaST，然後選取<menuchoice> <guimenu>軟體</guimenu>
      <guimenu> 軟體管理</guimenu> </menuchoice>。
     </para>
    </step>
    <step>
     <para>
      選擇<menuchoice> <guimenu>過濾器</guimenu> <guimenu>模式</guimenu>
      </menuchoice>，然後選取 <guimenu>Web 和 LAMP 伺服器</guimenu>。
     </para>
    </step>
    <step>
     <para>
      請確認安裝個別套件，以完成此安裝程序。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-apache-quickstart-start">
   <title>開始</title>
   <para>
    您可讓 Apache 在開機時自動啟動或者手動將其啟動。
   </para>
   <para>
    為確定 Apache 會在開機期間於目標 <literal>multi-user.target</literal> 與 <literal>graphical.target</literal> 中自動啟動，請執行以下指令：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl enable apache2.service</screen>
  
   <para>
    如需 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中 <systemitem class="daemon">systemd</systemitem> 目標的詳細資訊，以及 YaST <guimenu>服務管理員</guimenu>的描述，請參閱<xref linkend="sec-boot-runlevel-edit"/>。
   </para>
   <para>
    若要使用外圍程序手動啟動 Apache，請執行 <command>systemctl start apache2.service</command>。
   </para>
   <procedure>
    <title>檢查 Apache 是否在執行中</title>
    <para>
     如果您在啟動 Apache 時未接收到錯誤訊息，這通常表示 Web 伺服器正在執行。若要對此進行測試：
    </para>
    <step>
     <para>
      啟動瀏覽器，並開啟 <link xlink:href="http://localhost/"/>。
     </para>
     <para>
      如果 Apache 已啟動且正在執行，系統會顯示<quote>正常運作！</quote>的測試頁面。
     </para>
    </step>
    <step>
     <para>
      如果此頁面沒有出現，請參閱<xref linkend="sec-apache2-troubleeshooting"/>。
     </para>
    </step>
   </procedure>
   <para>
    現在網頁伺服器已經開始執行，您可以加入自己的文件、根據個人需求調整組態，或是安裝模組來新增功能。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-configuration">
  <title>設定 Apache</title>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了兩個組態選項：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   手動設定組態可以提供較詳細的設定，但是缺乏 YaST GUI 提供的方便性。
  </para>

  <important>
   <title>在組態變更後重新載入或重新啟動 Apache</title>
   <para>
    大多數組態變更需要重新載入 (有些還需要重新啟動) Apache 才能生效。請使用 <command>systemctl reload apache2.service</command> 以手動方式重新載入 Apache，或使用<xref linkend="sec-apache2-start-stop"/>中所述的其中一個重新啟動選項。
   </para>
   <para>
    如果使用 YaST 來設定 Apache，依照<xref linkend="sec-apache2-configuration-yast-server-configuration"/>中所述將<guimenu>HTTP 服務</guimenu>設定為<guimenu>已啟用</guimenu>，即可讓上述操作自動完成。
   </para>
  </important>

  <sect2 xml:id="sec-apache2-configuration-manually-configfiles">
   <title>Apache組態檔案</title>
   <para>
    本節提供 Apache 組態檔案的綜覽。如果使用 YaST 進行組態設定，則不需要變更這些檔案，但如果以後要切換到手動組態設定，這些資訊可能非常有用。
   </para>
   <para>
    您可以在下列兩個不同位置找到 Apache 組態檔案：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename> 可控制部分的 Apache 全域設定，例如要載入的模組、要包含的其他組態檔案、伺服器應該啟動的旗標，以及應該新增至指令行的旗標。此檔案對每個組態選項都進行了詳細說明，因此本文不予以介紹。針對一般用途的網頁伺服器，在 <filename>/etc/sysconfig/apache2</filename> 中的設定應該可以符合任何組態需求。
    </para>
   </sect3>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename> 代管了 Apache 的所有組態檔案。以下各節將說明每個檔案的用途。每個檔案都包括數個組態選項 (也稱<emphasis>指令</emphasis>)。在這些檔案中的每個組態選項都會詳加說明，因此本文將不予以介紹。
    </para>
    <para>
     Apache 組態檔案的組織方式如下：
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- global.conf
     |- httpd.conf
     |- listen.conf
     |- loadmodule.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- protocols.conf
     |- server-tuning.conf
     |- ssl-global.conf
     |- ssl.*
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>/etc/apache2/ 中的 Apache 組態檔案</title>
     <varlistentry>
      <term><filename>charset.conv</filename></term>
      <listitem>
       <para>
        指定不同語言所要使用的字元集。請不要編輯此檔案。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename></term>
      <listitem>
       <para>
        組態檔案由其他模組新增。這些組態檔案可以依實際需要包含至虛擬主機組態。如需範例，請參閱 <filename>vhosts.d/vhost.template</filename>。若要執行這個動作，您可以為不同的虛擬主機提供不同的模組組合。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename></term>
      <listitem>
       <para>
        使用合理預設值設定所有虛擬主機的全域組態。這時不是變更組態值，而是採用虛擬主機組態覆寫組態值。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename></term>
      <listitem>
       <para>
        定義 Apache 處理錯誤的方式。若要自訂這些傳送給所有虛擬主機的訊息，請編輯此檔案。另外一種方法是覆寫虛擬主機組態中的這些指示詞。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>global.conf</filename></term>
      <listitem>
       <para>
        主 Web 伺服器程序的一般組態，例如存取路徑、錯誤記錄或記錄層級。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename></term>
      <listitem>
       <para>
        主要的 Apache 伺服器組態檔案。請勿變更此檔案。此檔案主要包含 Include 陳述式和全域設定。為此處列出的相關組態檔案覆寫全域設定。變更虛擬主機組態的主機特定設定 (例如文件根目錄)。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename></term>
      <listitem>
       <para>
        繫結 Apache 至特定的 IP 位址與連接埠在此檔案中也可以設定以名稱為基礎的虛擬主機。如需詳細資料，請參閱<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename></term>
      <listitem>
       <para>
        mime_magic 模組的資料，此模組可協助 Apache 自動判斷不明檔案的 MIME 類型。請不要變更此檔案。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename></term>
      <listitem>
       <para>
        系統已知的 MIME 類型 (實際上是 <filename>/etc/mime.types</filename> 的連結)。請不要編輯此檔案。如果您需要新增這裡未列出的 MIME 類型，請將它們新增到 <filename>mod_mime-defaults.conf</filename>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename></term>
      <listitem>
       <para>
        預設已安裝之模組的組態檔案。如需詳細資訊，請參閱<xref linkend="sec-apache2-modules"/>。請注意，選用模組的組態檔案會存放在 <filename>conf.d</filename> 目錄。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>protocols.conf</filename></term>
      <listitem>
       <para>
        用於透過 HTTP2 連接呈現頁面的組態指令。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename></term>
      <listitem>
       <para>
        包含不同 MPM 的組態指令 (請參閱<xref linkend="sec-apache2-modules-mpm"/>) 和可控制 Apache 效能的一般組態選項。請在變更此檔案之後為網頁伺服器進行適當測試。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> 和 <filename>ssl.*</filename></term>
      <listitem>
       <para>
        全域 SSL 組態和 SSL 證書資料。如需詳細資訊，請參閱<xref linkend="sec-apache2-ssl"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename></term>
      <listitem>
       <para>
        自動從 <filename>/etc/sysconfig/apache2</filename> 產生的組態檔案。請勿改變其中任何檔案 -- 而是編輯 <filename>/etc/sysconfig/apache2</filename>。請不要將其他組態檔案置於此目錄中。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename></term>
      <listitem>
       <para>
        指定要在哪個使用者和群組 ID 之下執行 Apache。請不要變更此檔案。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename></term>
      <listitem>
       <para>
        您的虛擬主機組態應存放於此處。該目錄包含採用或不採用 SSL 之虛擬主機的範本檔案。此目錄中以 <filename>.conf</filename> 結尾的每個檔案都會自動包含在 Apache 組態中。如需詳細資訊，請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-configuration-manually">
   <title>以手動方式設定 Apache</title>
   <para>
    以手動方式設定 Apache 是指以 <systemitem class="username">root</systemitem> 使用者身分來編輯純文字組態檔案。
   </para>
   <sect3 xml:id="sec-apache2-configuration-manually-vhost">
    <title>虛擬主機組態</title>
    <para>
     <emphasis>「虛擬主機」</emphasis>一詞，是形容 Apache 從同一部實體機器提供多個通用資源識別字串 (URI，Universal Resource Identifier) 的能力。這是指同時由一部實體電腦的單一網頁伺服器來執行多個領域 (例如，www.example.com 和 www.example.net)。
    </para>
    <para>
     使用虛擬主機的目的，經常是為了節省管理工作 (只需要維護一部網頁伺服器) 和硬體開銷 (不需要將各個網域安裝在專屬伺服器上)。虛擬主機可以使用名稱、IP 或是連接埠作為基礎。
    </para>
    <para>
     若要列出所有現有的虛擬主機，請使用指令 <command>apache2ctl</command> <option>-S</option>。該指令將輸出一份清單，顯示預設伺服器和所有虛擬主機，以及它們的 IP 位址和監聽埠。此外，該清單還顯示每個虛擬主機在組態檔案中的位置。
    </para>
    <para>
     虛擬主機可依照<xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>中所述透過 YaST 設定，或是手動編輯組態檔案來設定。依預設，系統會根據 <phrase role="productname"><phrase os="sles">/etc/apache2/vhosts.d/</phrase></phrase> 中每部虛擬主機一個組態檔案的設定，為在 SUSE Linux Enterprise Server<filename></filename> 中執行的 Apache 做好準備。此目錄中副檔名為 <filename>.conf</filename> 的所有檔案，都會自動包含至組態中。這個目錄會提供虛擬主機的基本範本 (<filename>vhost.template</filename>，或是適用於提供 SSL 支援之虛擬主機的 <filename>vhost-ssl.template</filename>)。
    </para>
    <tip>
     <title>永遠要建立虛擬主機組態</title>
     <para>
      建議您務必要建立虛擬主機組態檔案，即使網頁伺服器只代管一個網域。如此，您不但可以將網域專屬組態存放在一個檔案中，還可以隨時回復至運作正常的基本組態，只需移動、刪除或重新命名虛擬主機的組態檔案即可。同樣地，您應該也要分別為每個虛擬主機建立組態。
     </para>
     <para>
      使用名稱型虛擬主機時，建議設定預設組態，以便在網域名稱與虛擬主機組態不相符時使用。系統會首先載入預設虛擬主機的組態。由於組態檔案的順序由檔案名稱決定，因此請在預設虛擬主機組態檔案名稱的開頭使用底線字元 (<literal>_</literal>)，以確定讓該檔案最先載入 (例如：<filename>_default_vhost.conf</filename>)。
     </para>
    </tip>
    <para>
     <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem> 區塊包含適用於特定網域的資訊。當 Apache 接收到來自訂義的虛擬主機的用戶端要求時，就會使用本節所包含的指示詞。幾乎所有指示詞都可以用於虛擬主機網路位置。如需更多有關 Apache 組態指示詞的詳細資訊，請參閱<link xlink:href="http://httpd.apache.org/docs/2.4/mod/quickreference.html"/>。
    </para>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>以名稱為基礎的虛擬主機</title>
     <para>
      使用以名稱為基礎的虛擬主機時，每個 IP 位址可以為數個網站提供服務。Apache 會使用用戶端所傳送之 HTTP 標頭中的主機欄位，將要求連接到與其中一個虛擬主機宣告相符的 <systemitem>ServerName</systemitem> 項目。如果沒有找到相符的 <systemitem>ServerName</systemitem>，就會預設使用第一個指定的虛擬主機。
     </para>
     <para>
      第一步是為要提供服務的每一個不同的名稱型主機建立 <literal>&lt;VirtualHost&gt;</literal> 區段。在每個 <literal>&lt;VirtualHost&gt;</literal> 區塊內部，您至少需要一個 <literal>ServerName</literal> 指令來指定要為哪個主機提供服務，並需要一個 <literal>DocumentRoot</literal> 指令來顯示該主機的內容位於檔案系統中的哪個位置。
     </para>
     <example xml:id="ex-apache2-virtual-hosts-name-based">
      <title>基於名稱的 <systemitem>VirtualHost</systemitem> 項目的基本範例</title>
<screen>&lt;VirtualHost *:80&gt;
# This first-listed virtual host is also the default for *:80
ServerName www.example.com
ServerAlias example.com
DocumentRoot /srv/www/htdocs/domain
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
ServerName other.example.com
DocumentRoot /srv/www/htdocs/otherdomain
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      開啟的 <systemitem>VirtualHost</systemitem> 標籤會將 IP 位址 (或完全合格的網域名稱) 當作名稱型虛擬主機組態的引數。連結埠號碼指令是選填項目。
     </para>
     <para>
      允許使用萬用字元 <emphasis>*</emphasis> 做為 IP 位址的替代符號。如果是使用 IPv6 位址，該位址就必須用方括號包住。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-name-based">
      <title>以名稱為基礎的 <systemitem>VirtualHost</systemitem> 指令</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>以 IP 為基礎的虛擬主機</title>
     <para>
      此虛擬主機組態替代方法需要為一台機器設定多個 IP 位址。一個 Apache 例項可裝載多個網域，每個網域都會指定不同的 IP。
     </para>
     <para>
      實體伺服器必須為每部以 IP 為基礎的虛擬主機設定一個 IP 位址。當該電腦沒有安裝多張網路卡時，也可以使用虛擬網路介面 (IP 別名)。
     </para>
     <para>
      以下範例顯示，Apache 正執行於 IP 為 <systemitem class="ipaddress">192.168.3.100</systemitem> 的機器上，並負責代管 IP 位址為 <systemitem class="ipaddress">192.168.3.101</systemitem> 與 <systemitem class="ipaddress">192.168.3.102</systemitem> 的兩個網域。每部虛擬伺服器都必須具備個別的 <systemitem>VirtualHost</systemitem> 區塊。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-ip-based">
      <title>以 IP 為基礎的 <systemitem>VirtualHost</systemitem> 指令</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      這裡出淚的 <systemitem>VirtualHost</systemitem> 指示詞，只能指定給 <systemitem>192.168.3.100</systemitem> 以外的其他介面。如果 <systemitem>192.168.3.100</systemitem> 也有設定 <systemitem>Listen</systemitem> 指示詞，這時就必須建立另一個以 IP 為基礎的虛擬主機，來回應 HTTP 要求給該介面 -- 另一種做法是套用預設伺服器組態 (<filename>/etc/apache2/default-server.conf</filename>) 所顯示的指示詞。
     </para>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>基本虛擬主機組態</title>
     <para>
      每個虛擬主機組態中至少要有下列指令，才能設定虛擬主機。如需瞭解更多選項的詳細資訊，請參閱 <filename>/etc/apache2/vhosts.d/vhost.template</filename>。
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem></term>
       <listitem>
        <para>
         完整網域名稱，其下是應該要建立位址的主機。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem></term>
       <listitem>
        <para>
         目錄路徑，Apache 會從此路徑為此主機提供檔案。基於安全性考量，存取整個檔案系統是預設禁止的動作，所以您必須明確解除鎖定這個位在 <systemitem>Directory</systemitem> 容器中的目錄。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem></term>
       <listitem>
        <para>
         伺服器管理員的電子郵件地址。這個地址可顯示在 Apache 建立的錯誤頁面 (舉例說明)。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem></term>
       <listitem>
        <para>
         此虛擬主機的錯誤記錄檔案。雖然沒必要為每個虛擬主機分別建立錯誤記錄檔案，但是多數人會這樣做，以便除錯更加容易。<filename>/var/log/apache2/</filename> 是 Apache 記錄檔案的預設目錄。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem></term>
       <listitem>
        <para>
         此虛擬主機的存取記錄檔案。雖然沒必要為每個虛擬主機分別建立存取記錄檔案，但是多數人會這樣做，以便分別為每部主機分析存取統計資料。<filename>/var/log/apache2/</filename> 是 Apache 記錄檔案的預設目錄。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      正如前面所述，存取整個檔案系統已因安全性考量而預設為禁止動作。因此，請將 Apache 要處理之檔案所在的目錄明確解除鎖定 — 例如 <systemitem>DocumentRoot</systemitem>。
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
&lt;/Directory&gt;</screen>
     <note>
      <title><literal>Require all granted</literal></title>
      <para>
       在先前版本的 Apache 中，陳述式 <literal>Require all granted</literal> 表達為：
      </para>
<screen>Order allow,deny
Allow from all</screen>
      <para>
       <literal>mod_access_compat</literal> 模組仍然支援這種舊式語法。
      </para>
     </note>
     <para>
      此完整組態看起來如下：
     </para>
     <example xml:id="ex-apache-directives-virtualhost-basic-configuration">
      <title>基本 <systemitem>VirtualHost</systemitem> 組態</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
   </sect3>
  </sect2>



  <xi:include href="apache2_yast_i.xml"/>


 </sect1>
 <sect1 xml:id="sec-apache2-start-stop">
  <title>啟動和停止 Apache</title>

  <remark>taroth 2014-02-11: @file-maintainer: please give the following a
 thorough check - so far I only replaced the rc* commands by the systemctl
 (and where those are not available, by apachectl commands as advised by
 crrodriguez), but the descriptions might need adjustment and some commands
 are probably no longer around, therefore I commented them</remark>

  <para>
   如果已如<xref linkend="sec-apache2-configuration-yast"/>中所述使用 YaST 設定，Apache 會在開機時間在 <systemitem>multi-user.target</systemitem> 與 <systemitem>graphical.target</systemitem> 中啟動。若要變更此行為，可以使用 YaST 的<guimenu>服務管理員</guimenu>或使用 <command>systemctl</command> 指令行工具 (<command>systemctl enable</command> 或 <command>systemctl disable</command>)。
  </para>

  <para>
   若要在執行中的系統上啟動、停止或操作 Apache，請依照下方所述使用 <command>systemctl</command> 或 <command>apachectl</command> 指令。
  </para>

  <para>
   如需 <command>systemctl</command> 指令的一般資訊，請參閱<xref linkend="sec-boot-systemd-basics-services"/>。
  </para>

  <variablelist>
   <varlistentry>
    <term><command>systemctl status apache2.service</command></term>
    <listitem>
     <para>
      檢查 Apache 是否已啟動。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl start apache2.service</command></term>
    <listitem>
     <para>
      啟動尚未執行的 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl stop apache2.service</command></term>
    <listitem>
     <para>
      透過終止父處理程序來停止 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl restart apache2.service</command></term>
    <listitem>
     <para>
      停止 Apache，然後重新啟動。啟動之前並未在執行中的網頁伺服器。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl try-restart apache2.service</command></term>
    <listitem>
     <para>
      若 Apache 已在執行中，則將其停止並重新啟動。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl reload apache2.service</command></term>
    <listitem>
     <para>
      通知所有 Apache 衍生處理程序在關機之前先完成各自的要求，以停止網頁伺服器。每個程序結束後都會被一個新啟動的程序所取代，最終會將 Apache 完全<quote>重新啟動</quote>。
     </para>
     <tip>
      <title>在生產環境中重新啟動 Apache</title>
      <para>
       使用此指令，您無需中斷連接，即可啟用 Apache 組態中的變更。
      </para>
     </tip>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><command>systemctl stop apache2.service</command></term>
    <listitem>
     <para>
      於 <systemitem>GracefulShutdownTimeout</systemitem> 所設定的指定期間後停止 Web 伺服器，以確保系統可以完成現有的要求。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl configtest</command></term>
    <listitem>
     <para>
      在不影響執行中之網頁伺服器的情況下，檢查組態檔案的語法。因為這項檢查會在每次伺服器啟動、重新載入或重新啟動時強制進行，所以通常並不需要明確執行該測試 (如果這時有找到組態錯誤，網頁伺服器就不會完成啟動、重新載入或是重新啟動)。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl status</command> 和 <command>apachectl fullstatus</command></term>
    <listitem>
     <para>
      分別傾印簡要或完整的狀態畫面。需要啟用 <systemitem>mod_status</systemitem> 模組，並安裝文字型瀏覽器 (例如 <command>links</command> 或 <command>w3m</command>)。除此之外，必須將 <literal>STATUS</literal> 新增至 <filename>/etc/sysconfig/apache2</filename> 檔案的 <systemitem>APACHE_SERVER_FLAGS</systemitem>。
     </para>
    </listitem>
   </varlistentry>





  </variablelist>

  <tip>
   <title>其他旗標</title>
   <para>
    如果在指令中指定其他旗標，這些旗標將傳遞到 Web 伺服器。
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-apache2-modules">
  <title>安裝、啟用和設定模組</title>

  <para>
   Apache 軟體採用了模組化設計：除了部分核心任務，其餘所有功能皆由模組處理。這方面的發展很快，甚至連 HTTP 都是由模組 (<systemitem>http_core</systemitem>) 處理。
  </para>

  <para>
   Apache 模組可以在建構時編譯成 Apache 二進位檔案，或在執行時期動態載入。如需瞭解如何動態載入模組的詳細資訊，請參閱<xref linkend="sec-apache2-modules-activating"/>。
  </para>

  <para>
   Apache 模組分為以下幾個類別：
  </para>

  <variablelist>
   <varlistentry>
    <term>基礎模組</term>
    <listitem>
     <para>
      基本模組會依預設編譯到 Apache。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 內僅編譯了 <systemitem>mod_so</systemitem> (載入其他模組時需用到) 和 <systemitem>http_core</systemitem>。所有其他模組均以共用物件的方式提供，即在執行期間加入，而不包含在伺服器二進位檔案中。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>延伸模組</term>
    <listitem>
     <para>
      一般說來，Apache 軟體套件會包含標示為延伸的模組，但是通常不會使用靜態方式將這些模組編譯到伺服器中。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，這類模組以共用物件方式提供，並可在執行時期載入到 Apache。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>外部模組</term>
    <listitem>
     <para>
      標示為外部的模組不會包含於 Apache 正式發行版本中。不過，<phrase role="productname"><phrase os="sles"></phrase></phrase>SUSE Linux Enterprise Server 提供了其中的幾個模組。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>多處理模組 (MPM)</term>
    <listitem>
     <para>
      MPM 會負責接收和處理網頁伺服器所收到的要求，因此屬於網頁伺服器軟體的核心部分。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-apache2-modules-installing">
   <title>模組安裝</title>
   <para>
    如果您已依照<xref linkend="sec-apache2-quickstart-installation"/> 中所述完成預設安裝，則下列模組此時都已安裝：所有基礎模組與延伸模組、多重處理模組 Prefork MPM 以及外部模組 <systemitem>mod_python</systemitem>。
   </para>
   <para>
    您可以啟動 YaST，然後選擇<menuchoice><guimenu>軟體</guimenu> <guimenu> 軟體管理</guimenu></menuchoice>，來安裝其他的外部模組。現在，請選擇<menuchoice><guimenu>檢視</guimenu> <guimenu> 搜尋</guimenu></menuchoice>，然後搜尋 <literal>apache</literal>。結果清單中除其他套件之外，還會包含所有可用的外部 Apache 模組。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-activating">
   <title>啟用和停用</title>
   <para>
    以手動方式或透過 YaST 啟用或停用特定模組。在 YaST 中，需要使用<xref linkend="sec-apache2-configuration-yast-wizard"/>中所述的模組組態來啟用或停用程序檔語言模組 (PHP 8 和 Python)。所有其他模組都可以依據<xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/>說明步驟來啟用或停用。
   </para>
   <para>
    如果您想手動啟用或停用這些模組，請分別使用指令 <command>a2enmod</command> <replaceable>MODULE</replaceable> 或 <command>a2dismod</command> <replaceable>MODULE</replaceable>。<command>a2enmod -l</command> 會輸出目前所有使用中的模組清單。
   </para>
   <important>
    <title>包含外部模組的組態檔案</title>
    <para>
     如果您已經手動啟用外部模組，請確定將其組態檔案載入至所有的虛擬主機組態。外部模組的組態檔案會存放在 <filename>/etc/apache2/conf.d/</filename> 之下，而且預設會載入 <filename>/etc/apache2/default-server.conf</filename>。如需更精細的控制，可以將 <filename>/etc/apache2/default-server.conf</filename> 中的內容設定為備註，並將其僅新增至特定的虛擬主機。如需範例，請參閱 <filename>/etc/apache2/vhosts.d/vhost.template</filename>。
    </para>
   </important>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-base-extension">
   <title>基礎模組和延伸模組</title>
   <para>
    Apache 說明文件中詳細介紹了所有的基本模組和延伸模組。本文件只提供最重要模組的概要說明。如需關於每個模組的詳細資訊，請參閱 <link xlink:href="http://httpd.apache.org/docs/2.4/mod/">http://httpd.apache.org/docs/2.4/mod/</link>。
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem></term>
     <listitem>
      <para>
       提供在需要特定 MIME 類型 (例如 <systemitem>application/pdf</systemitem>)、具有特定副檔名的檔案 (例如 <filename>.rpm</filename>) 或特定要求方法 (例如 <systemitem>GET</systemitem>) 時執行程序檔的方法。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem></term>
     <listitem>
      <para>
       提供 <systemitem>Alias</systemitem> 和 <systemitem>Redirect</systemitem> 指令，供您將 URL 對應到特定目錄 (<systemitem>Alias</systemitem>)，或將所要求的 URL 重新導向到另一個位置。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem></term>
     <listitem>
      <para>
       驗證模組提供了幾種不同的驗證方法：使用 <systemitem>mod_auth_basic</systemitem> 進行基本驗證，或使用 <systemitem>mod_auth_digest</systemitem> 進行摘要驗證。
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem> 和 <systemitem>mod_auth_digest</systemitem> 必須與驗證提供者模組 <systemitem>mod_authn_*</systemitem> (例如，適用於基於文字檔案的驗證的 <systemitem>mod_authn_file</systemitem>) 以及授權模組 <systemitem>mod_authz_*</systemitem> (例如，適用於使用者授權的 <systemitem>mod_authz_user</systemitem>) 結合使用。
      </para>
      <para>
       關於此主題的詳細資訊，請參閱 <link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/> 上的 <citetitle>Authentication HOWTO</citetitle>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth_openidc</systemitem></term>
     <listitem>
      <para>
       在 Apache HTTP 伺服器中使用 OpenID Connect 的唯一認可方式是借助 <systemitem>mod_auth_openidc</systemitem>。(請參閱<link xlink:href="https://openid.net/developers/certified/"/>)。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem></term>
     <listitem>
      <para>
       Autoindex 會在沒有任何索引檔案 (例如，<filename>index.html</filename>) 出現時產生目錄清單。這些索引的外觀可加以設定。這是預設啟用的模組。然而，目錄清單已預設為停用，經由 <systemitem>Options</systemitem> 指示詞來覆寫虛擬主機組態的這項設定。這個模組的預設組態檔案會存放在 <filename>/etc/apache2/mod_autoindex-defaults.conf</filename>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem></term>
     <listitem>
      <para>
       執行 CGI 程序檔時需要使用 <systemitem>mod_cgi</systemitem>。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem></term>
     <listitem>
      <para>
       使用這個模組時，Apache 可以設定成即時壓縮成指定檔案類型之後，再進行傳送。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_dir</systemitem> 可提供 <systemitem>DirectoryIndex</systemitem> 指示詞，供您用來設定當要求目錄 (預設是 <filename>index.html</filename>) 時要自動傳遞哪類檔案。它還提供另一項功能：當目錄要求沒有包含末尾斜線時，就會自動重新導向到正確 URL。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem></term>
     <listitem>
      <para>
       控制傳遞給 CGI 程序檔或 SSI 頁面的環境。可以在呼叫 <systemitem class="daemon">httpd</systemitem> 程序的外圍程序中設定、取消設定或傳遞環境變數。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem></term>
     <listitem>
      <para>
       使用 <systemitem>mod_expires</systemitem> 時，您可以透過傳送 <systemitem>Expires</systemitem> 標頭，來控制代理和瀏覽器快取重新整理文件的頻率。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_http2</systemitem></term>
     <listitem>
      <para>
       透過 <systemitem>mod_http2</systemitem>，Apache 可獲得 HTTP/2 通訊協定支援。在 <systemitem>VirtualHost</systemitem> 中指定 <literal>Protocols h2 http/1.1</literal> 即可實現支援。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_include</systemitem> 可讓您使用 Server Side Include (SSI)，這項工具會提供動態產生 HTML 頁面的基本功能。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem></term>
     <listitem>
      <para>
       可透過 http://localhost/server-info/ 提供伺服器組態的綜合綜覽。基於安全性考量，您應該永遠限制這個 URL 的存取權限。依預設，只有 <systemitem class="domainname">localhost</systemitem> 允許存取這個 URL。可在 <filename>/etc/apache2/mod_info.conf</filename> 中設定 <systemitem>mod_info</systemitem>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem></term>
     <listitem>
      <para>
       使用此模組時，您可以設定 Apache 記錄檔案的外觀。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem></term>
     <listitem>
      <para>
       Mime 模組會根據所傳送檔案的副檔名 (例如，HTML 文件的副檔名為 <systemitem>text/html</systemitem>) 來確定檔案是否包含正確的 MIME 標頭。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem></term>
     <listitem>
      <para>
       內容協商 (Content Negotiation) 所需的模組。如需更多詳細資訊，請參閱 <link xlink:href="http://httpd.apache.org/docs/2.4/content-negotiation.html">http://httpd.apache.org/docs/2.4/content-negotiation.html</link>。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem></term>
     <listitem>
      <para>
       可提供 <systemitem>mod_alias</systemitem> 的功能，但具備更多功能和更大的靈活性。使用 <systemitem>mod_rewrite</systemitem> 時，您可以依據多個規則、要求標頭和其他條件來重新導向 URL。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem></term>
     <listitem>
      <para>
       根據用戶端的要求設定環境變數，如用戶端傳送的瀏覽器字串或用戶端的 IP 位址。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_spelling</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_spelling</systemitem> 會嘗試自動修正 URL 中出現的打字錯誤，例如大小寫錯誤。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem></term>
     <listitem>
      <para>
       啟用網頁伺服器和用戶端之間的加密連接。如需詳細資料，請參閱<xref linkend="sec-apache2-ssl"/>。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem></term>
     <listitem>
      <para>
       可透過 http://localhost/server-status/ 提供有關伺服器活動及效能的資訊。基於安全性考量，您應該永遠限制這個 URL 的存取權限。預設僅允許 <systemitem class="domainname">localhost</systemitem> 存取此 URL。可在 <filename>/etc/apache2/mod_status.conf</filename> 中設定 <systemitem>mod_status</systemitem>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem> 可讓您以不同使用者和群組身分來執行 CGI 程序檔。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem></term>
     <listitem>
      <para>
       啟用 <filename>~<replaceable>USER</replaceable>/</filename> 下使用者特定的目錄。在組態中必須指定 <systemitem>UserDir</systemitem> 指示詞。這是預設啟用的模組。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-mpm">
   <title>多處理模組</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了兩種不同的多重處理模組 (MPM) 來搭配 Apache 使用。
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-modules-mpm-prefork">
    <title>Prefork MPM</title>
    <para>
     Prefork MPM 會實作未產生執行緒、正在進行 Prefork 的 Web 伺服器。這個模組會讓 Web 伺服器以類似 Apache 1.x 版的行為作業。在此版本中，Apache 會透過衍生出獨立的子程序，將各個要求分開處理。這樣發生問題的要求就不會影響其他要求，進而避免網頁伺服器出現鎖定現象。
    </para>
    <para>
     雖然透過這種以處理程序為主的方法可以提供穩定性，但是比起 Worker MPM，Prefork MPM 會耗用較多的系統資源。Unix 作業系統會將 Prefork MPM 當作預設 MPM。
    </para>
    <important>
     <title>本文件中的 MPM</title>
     <para>
      本文件會假設 Apache 是使用 Prefork MPM。
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-modules-mpm-worker">
    <title>Worker MPM</title>
    <para>
     Worker MPM 會提供多執行緒 Web 伺服器。執行緒是<quote>輕量級</quote>的處理程序。執行緒和處理程序相比的優點是，它消耗的資源較少。Worker MPM 不只會衍生子處理程序，它還可使用執行緒和伺服器處理程序，來為要求提供服務。預衍生的子程序具有多重執行緒。這種方法因為耗用比 Prefork MPM 更少的系統資源，因此可以提高 Apache 的執行效能。
    </para>
    <para>
     一個主要缺點就是 Worker MPM 的穩定性：當某執行緒毀損時，處理程序的所有執行緒都會受到影響。最嚴重的情況下，甚至還會造成伺服器當機。尤其是在負載量高的 Apache 上使用通用閘道介面 (CGI) 時，可能就會因執行緒無法與系統資源進行通訊而產生內部伺服器錯誤。在 Apache 上使用 worker MPM 的另外一點爭議，就是並非所有可用的 Apache 模組都能安全地使用執行緒，這樣就無法配合 worker MPM 使用。
    </para>
    <warning>
     <title>將 PHP 模組與 MPM 配合使用</title>
     <para>
      並非所有可用的 PHP 模組都是安全執行緒。強烈建議不要將 worker MPM 與 <systemitem>mod_php</systemitem> 配合使用。
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-external">
   <title>外部模組</title>
   <para>
    此處提供了 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 隨附的所有外部模組的清單。在列出目錄中找出模組的說明文件。
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem></term>
     <listitem>
      <para>
       為 Apache 新增支援，以便對 <systemitem>mod_php5</systemitem> 等模組所處理的個別 CGI 程序檔設定 <phrase>AppArmor</phrase> 限制。
      </para>
      <simplelist><member>
        套件名稱：<systemitem>apache2-mod_apparmor</systemitem></member><member>
        詳細資訊: <xref linkend="part-apparmor"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php8</systemitem></term>
     <listitem>
      <para>
       PHP 是一種伺服器端、跨平台式的 HTML 內嵌程序檔語言。
      </para>
      <simplelist><member>
        套件名稱：<systemitem>apache2-mod_php8</systemitem></member><member>
        組態檔案：<filename>/etc/apache2/conf.d/php8.conf</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem> 允許在 Apache HTTP 伺服器中內嵌 Python，以便大幅提高效能和增加網頁應用程式的設計彈性。
      </para>
      <simplelist><member>
        套件名稱：<systemitem>apache2-mod_python</systemitem></member><member>
        更多資訊：<filename>/usr/share/doc/packages/apache2-mod_python</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem> 提供 Web 應用程式防火牆，用於保護 Web 應用程式免受各種攻擊。此外，它還支援 HTTP 流量監控和即時分析。
      </para>
      <simplelist><member>
        套件名稱：<systemitem>apache2-mod_security2</systemitem></member><member>
        組態檔案：<filename>/etc/apache2/conf.d/mod_security2.conf</filename></member><member>
        更多資訊：<filename>/usr/share/doc/packages/apache2-mod_security2</filename></member><member>
        文件: <link xlink:href="http://modsecurity.org/documentation/"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-building-modules">
   <title>編譯</title>
   <para>
    Apache 允許進階使用者編寫自訂模組進行延伸。若要開發適用於 Apache 的模組或編譯協力廠商模組，需要套件 <systemitem>apache2-devel</systemitem> 以及對應的開發工具。<systemitem>apache2-devel</systemitem> 也包含了 <command>apxs2</command> 工具，這是在編譯 Apache 其他模組時，需要用到的工具。
   </para>
   <para>
    <command>apxs2</command> 可以從原始程式碼進行模組編譯和安裝 (其中包括必要的組態檔案變更)，並建立可於 Runtime 載入 Apache 的<emphasis>動態共用物件</emphasis> (DSO)。
   </para>
   <para>
    <command>apxs2</command> 二進位檔案位在 <filename>/usr/sbin</filename> 下方：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename> — 適合用來建立可配合任何 MPM 使用的延伸模組。安裝位置是 <filename>/usr/lib64/apache2</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename> — 適合用於 prefork MPM 模組。安裝位置是 <filename>/usr/lib64/apache2-prefork</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename> — 適合用於 worker MPM 模組。安裝位置是 <filename>/usr/lib64/apache2-worker</filename>。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    請使用下列指令透過原始碼安裝並啟用模組：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cd /path/to/module/source
<prompt>&gt; </prompt><command>sudo</command> apxs2 -cia <replaceable>MODULE</replaceable>.c</screen>
   <para>
    其中，<option>-c</option> 用於編譯模組，<option>-i</option> 用於安裝模組，<option>-a</option> 用於啟用模組。<systemitem>apxs2(1)</systemitem> man 頁面面中介紹了 <command>apxs2</command> 的其他選項。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-cgi">
  <title>啟用 CGI 程序檔</title>

  <para>
   Apache 的通用閘道介面 (CGI) 可讓您使用程式或程序檔 (通常稱 CGI 程序檔) 建立動態內容。CGI 程序檔可以用任何程式設計語言來編寫。通常使用 PHP 之類的程序檔語言。
  </para>

  <para>
   為了使 Apache 能夠傳遞 CGI 程序檔建立的內容，需要啟用 <systemitem>mod_cgi</systemitem>。另外還需要 <systemitem>mod_alias</systemitem>。這兩種都是預設啟用的模組。如需啟用模組的詳細資訊，請參閱<xref linkend="sec-apache2-modules-activating"/>。
  </para>

  <warning>
   <title>CGI 安全性</title>
   <para>
    允許伺服器執行 CGI 程序檔會產生潛在的安全性弱點。請參考<xref linkend="sec-apache2-security"/>，以取得其他資訊。
   </para>
  </warning>

  <sect2 xml:id="sec-apache2-cgi-configuration">
   <title>Apache 組態</title>
   <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，CGI 程序檔只能在 <filename>/srv/www/cgi-bin/</filename> 目錄中執行。這個位置已設定用來執行 CGI 程序檔。如果您已經建立虛擬主機組態 (請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>) 並想要將程序檔放置到主機特定的目錄，則必須解除鎖定和設定此目錄。
   </para>
   <example xml:id="ex-apache2-cgi-configuration">
    <title>VirtualHost CGI 組態</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co xml:id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co xml:id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co xml:id="co-apache2-cgi-handler"/>
 Require all granted<co xml:id="co-apache2-cgi-order"/>
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       告知 Apache 依照 CGI 程序檔方式來處理位在這個目錄中的所有檔案。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       啟用 CGI 程序檔執行
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       告知伺服器依照 CGI 程序檔方式來處理包含 .pl 和 .cgi 副檔名的檔案。依據個人需要來加以調整。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       <systemitem>Require</systemitem> 指令控制預設存取狀態。在此範例中，授予指定目錄的存取權並無限制。如需驗證和授權的詳細資訊，請參閱 <link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>。
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-example-script">
   <title>執行範例程序檔</title>
   <para>
    CGI 程式設計不同於「一般」程式設計；因為 CGI 程式和程序檔的最前面必須是 MIME-Type 標頭，例如 <literal>Content-type: text/html</literal>。這個標頭會傳送到用戶端，使其瞭解所接收內容的類型。其次，程序檔的輸出必須是用戶端 (通常指網頁瀏覽器) 可了解的內容，例如 HTML (一般情況)、純文字或影像。
   </para>
   <para>
    Apache 套件會在 <filename>/usr/share/doc/packages/apache2/test-cgi</filename> 提供簡單的測試程序檔。這個程序檔會以純文字方式輸出部分環境變數的內容。請將這段程序檔複製到 <filename>/srv/www/cgi-bin/</filename> 或虛擬主機的程序檔目錄 (<filename>/srv/www/www.example.com/cgi-bin/</filename>)，並將其命名為 <filename>test.cgi</filename>。編輯檔案，讓 <literal>#! /bin/sh</literal> 位於第一行。
   </para>
   <para>
    可由 Web 伺服器存取的檔案應該屬於 <systemitem class="username">root</systemitem> 使用者所有。如需其他資訊，請參閱<xref linkend="sec-apache2-security"/>。因為網頁伺服器可由不同使用者身分執行，所以 CGI 程序檔必須具備可供全球執行和可供全球讀取等特性。變更 CGI 目錄和使用 <command>chmod 755 test.cgi</command> 指令，便可套用適當的權限。
   </para>
   <para>
    現在，請呼叫 <literal>http://localhost/cgi-bin/test.cgi</literal> 或 <literal>http://www.example.com/cgi-bin/test.cgi</literal>。這時應該會顯示 <quote>CGI/1.0 測試程序檔報告</quote>。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-troubleshooting">
   <title>CGI 疑難排解</title>
   <para>
    如果這時沒有顯示測試程式的輸出結果，而是出現錯誤訊息，請檢查下列項目：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGI 疑難排解</title>
    <listitem>
     <para>
      <emphasis>您是否有在變更組態之後重新載入伺服器？</emphasis>如果沒有，請使用 <command>systemctl reload apache2.service</command> 重新載入。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>您是否已正確設定自訂的 CGI 目錄 (若有的話)？</emphasis>如果您不確定，請在預設的 CGI 目錄 <filename>/srv/www/cgi-bin/</filename> 中測試此程序檔，並使用 <literal>http://localhost/cgi-bin/test.cgi</literal> 進行呼叫。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>檔案權限是否正確？</emphasis>請切換至 CGI 目錄並執行 <command>ls -l test.cgi</command>。輸出將以下面的字串開頭
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      請確定程序檔沒有包含任何程式設計錯誤。如果您未變更過 <filename>test.cgi</filename>，此情況應該就不會發生，但是如果您是使用自己的程式，請務必確定這些程式中沒有任何程式設計錯誤。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-ssl">
  <title>使用 SSL 設定安全的 Web 伺服器</title>

  <para>
   如果 Web 伺服器和用戶端之間會傳輸信用卡資訊等敏感性資料，最好使用需經過驗證的安全加密連接。<systemitem>mod_ssl</systemitem> 會為用戶端和網頁伺服器之間的 HTTP 通訊，提供使用安全通訊端層 (Secure Sockets Layer, SSL)、以及傳輸層安全性 (Transport Layer Security, TLS) 通訊協定的強式加密。使用 TLS/SSL 時，將在 Web 伺服器與用戶端之間建立私人連接。如此便可確保資料完整性，使用戶端與伺服器可以彼此進行驗證。
  </para>

  <para>
   為了完成這個目的，伺服器會在回覆任何 URL 要求之前，先傳送可證明伺服器有效身分之相關資訊的 SSL 證書。如此即可確保該伺服器是此通訊的唯一正確端點。此外，該證書會在用戶端和伺服器端建立加密連接，以便在沒有洩漏敏感、純文字內容的風險情況下傳輸資訊。
  </para>

  <para>
   <systemitem>mod_ssl</systemitem> 自身不會實作 TLS/SSL 通訊協定，而是充當 Apache 和 SSL 庫之間的介面。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，使用的是 OpenSSL 程式庫。OpenSSL 會自動隨 Apache 完成安裝。
  </para>

  <para>
   使用 <systemitem>mod_ssl</systemitem> 搭配 Apache 的最明顯特徵，就是 URL 的字首都會加上 <literal>https://</literal>，而不是 <literal>http://</literal>。
  </para>

  <sect2 xml:id="sec-apache2-ssl-certificate">
   <title>建立 SSL 證書</title>
   <para>
    若要將 TLS/SSL 與 Web 伺服器搭配使用，您需要建立 SSL 證書。網頁伺服器和用戶端在彼此驗證時要用到這項證書，以便讓任一方可以清楚識別對方。為了確保證書的完整性，其必須由每位使用者信任的一方加以簽章。
   </para>
   <para>
    您可以建立下列三種類型的證書：僅供測試使用的 <quote>虛擬</quote> 證書、供已定義信任圈使用者使用的自我簽發證書，以及由獨立、公開的證書授權機構 (CA) 簽發的證書。
   </para>
   <para>
    證書的建立可分為兩個步驟。首先產生證書授權機構的私密金鑰，接著再使用該金鑰簽發伺服器證書。
   </para>
   <tip>
    <title>更多資訊</title>
    <para>
     若要進一步瞭解 TLS/SSL 的概念和定義，請參閱 <link xlink:href="http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html</link>。
    </para>
   </tip>
   <sect3 xml:id="sec-apache2-ssl-certificate-dummy">
    <title>建立<quote>虛擬</quote>證書</title>
    <para>
     若要產生虛構證書，請呼叫程序檔 <command>/usr/bin/gensslcert</command>。此操作會建立或覆寫下列檔案。使用 <command>gensslcert</command> 的可選參數可以微調證書。如需詳細資訊，可呼叫 <command>/usr/bin/gensslcert </command>
     <option>-h</option>。
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     <filename>ca.crt</filename> 的複製本也會放在 <filename>/srv/www/htdocs/CA.crt</filename> 提供下載。
    </para>
    <important>
     <title>僅用於測試</title>
     <para>
      虛構證書絕對不可用於生產環境系統。這類證書只能用於測試目的。
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-custom">
    <title>建立自行簽署的證書</title>
    <para>
     如果您要設定一個安全 Web 伺服器供內部網路或已定義的一群使用者圈使用，則透過您自己的證書管理中心 (CA) 簽發證書就可能足以有效符合此時的證書需求。請注意，此類網站的造訪者將看到類似<quote>此網站不可信</quote>的警告，因為網頁瀏覽器不能識別自行簽署的證書。
    </para>
    <important>
     <title>自行簽署的證書</title>
     <para>
      僅在供認識您、且信任您為證書管理中心之使用者存取的網頁伺服器上，方可使用自我簽署證書。我們不建議您在公開商店等場所使用此類證書。
     </para>
    </important>
    <para>
     首先您需要產生證書簽署要求 (CSR)。然後使用 <command>openssl</command>，並使用 <literal>PEM</literal> 作為證書格式。在此步驟中，系統會要求您輸入密碼片語並回答若干問題。請記住該密碼片語，日後還將使用。
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> openssl req -new &gt; new.cert.csr
Generating a 1024 bit RSA private key
..++++++
.........++++++
writing new private key to 'privkey.pem'
Enter PEM pass phrase:<co xml:id="co-ssl-self-pass1"/>
Verifying - Enter PEM pass phrase:<co xml:id="co-ssl-self-pass2"/>
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:<co xml:id="co-ssl-self-country"/>
State or Province Name (full name) [Some-State]:<co xml:id="co-ssl-self-state"/>
Locality Name (eg, city) []:<co xml:id="co-ssl-self-city"/>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:<co xml:id="co-ssl-self-org"/>
Organizational Unit Name (eg, section) []:<co xml:id="co-ssl-self-uname"/>
Common Name (for example server FQDN, or YOUR name) []:<co xml:id="co-ssl-self-cname"/>
Email Address []:<co xml:id="co-ssl-self-email"/>

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:<co xml:id="co-ssl-self-challenge"/>
An optional company name []:<co xml:id="co-ssl-self-optional"/></screen>
    <calloutlist>
     <callout arearefs="co-ssl-self-pass1">
      <para>
       填寫您的密碼片語。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-pass2">
      <para>
       再次填寫密碼片語 (並記住它)。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-country">
      <para>
       填寫以 2 個字母表示的國家/地區代碼，例如 <literal>GB</literal> 或 <literal>CZ</literal>。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-state">
      <para>
       填寫您所在的州/省。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-city">
      <para>
       填寫城市名稱，例如 <literal>Prague</literal>。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-org">
      <para>
       填寫您在職的組織機構名稱。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-uname">
      <para>
       填寫您的組織單位，沒有則保留為空白。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-cname">
      <para>
       填寫伺服器的網域名稱，或者您的名字和姓氏。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-email">
      <para>
       填寫您的辦公電子郵件地址。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-challenge">
      <para>
       將挑戰密碼保留空白，否則您每次重新啟動 Apache Web 伺服器時都需要輸入該密碼。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-optional">
      <para>
       填寫選填的公司名稱，或保留為空白。
      </para>
     </callout>
    </calloutlist>
    <para>
     現在，您可以產生證書。您將再次使用 <command>openssl</command>，並且證書的格式是預設 <literal>PEM</literal>。
    </para>
    <procedure>
     <title>產生證書</title>
     <step>
      <para>
       將金鑰的私密部分輸出至 <filename>new.cert.key</filename>。系統將提示您輸入在建立證書簽署要求 (CSR) 時所輸入的密碼片語。
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> openssl rsa -in privkey.pem -out new.cert.key</screen>
     </step>
     <step>
      <para>
       根據您在簽署要求中填寫的資訊產生證書的公開部分。<option>-days</option> 選項指定證書到期之前的時間長度。您可以撤銷證書，或在證書到期之前更換證書。
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> openssl x509 -in new.cert.csr -out new.cert.cert -req \
-signkey new.cert.key -days 365</screen>
     </step>
     <step>
      <para>
       將證書檔案複製到相關的目錄，以便 Apache 伺服器可以讀取這些檔案。請確定私密金鑰 <filename>/etc/apache2/ssl.key/server.key</filename> 無法辨識，而公開 PEM 證書 <filename>/etc/apache2/ssl.crt/server.crt</filename> 則可辨識。
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp new.cert.cert /etc/apache2/ssl.crt/server.crt
<prompt>&gt; </prompt><command>sudo</command> cp new.cert.key /etc/apache2/ssl.key/server.key</screen>
     </step>
    </procedure>
    <tip>
     <title>公用證書位置</title>
     <para>
      最後一個步驟是將公用證書檔案從 <filename>/etc/apache2/ssl.crt/server.crt</filename> 複製到使用者可存取的位置，以便使用者將該檔案納入其網頁瀏覽器已知和信任的 CA 清單中。否則，瀏覽器會報告該證書是由不明授權機構所簽發。
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-official">
    <title>獲取官方簽署的證書</title>
    <para>
     目前有多家可簽署證書的官方證書管理中心。這類證書是由值得信任的協力廠商所簽署，因此可以完全信任。對外運作的安全網頁伺服器通常已取得官方簽發證書。最常用的證書管理中心 (CA) 一覽表可參閱 <link xlink:href="https://en.wikipedia.org/wiki/Certificate_authority#Providers"/>。
    </para>
    <para>
     在要求官方簽署的證書時，您並不需要向 CA 傳送證書，而只需傳送證書簽署要求 (Certificate Signing Request, CSR)。若要建立 CSR，請執行以下指令：
    </para>
<screen><prompt>&gt; </prompt>openssl req -new -newkey rsa:2048 -nodes -keyout newkey.pem -out newreq.pem</screen>
    <para>

     系統會要求您輸入可辨識名稱。這時系統會要求您回答一些問題，例如國家/地區名或組織名稱。請輸入有效資料 -- 您在此時輸入的每項資料將來都會顯示在證書中並用於檢查。您不需要回答每個問題。如果有不適用的問題或是您希望保留空白，請使用 <quote>&#x002E;</quote>。一般名稱是指 CA 本身的名稱 -- 請選擇明顯的名稱，例如 <replaceable>My company</replaceable> CA。最後，必須輸入挑戰密碼和替用的公司名稱。
    </para>
    <para>
     從您呼叫程序檔的目錄中找出此 CSR。這個檔案名稱是 <filename>newreq.pem</filename>。
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-ssl-configuration">
   <title>設定提供 SSL 的 Apache</title>
   <para>
    在 Web 伺服器一端，TLS/SSL 要求的預設連接埠為 443。監聽連接埠 80 的<quote>一般</quote>Apache 與監聽連接埠 443 且支援 TLS/SSL 的 Apache 之間沒有衝突。事實上，HTTP 和 HTTPS 可以執行相同的 Apache 例項。通常這時會使用不同的虛擬主機，將連接埠 80 和連接埠 443 的要求分派到不同的虛擬伺服器。
   </para>
   <important>
    <title>防火牆組態</title>
    <para>
     請不要忘記為連接埠 443 上已啟用 SSL 的 Apache 開啟防火牆。可依<xref linkend="sec-security-firewall-firewalld-cmd"/>中所述透過 <systemitem class="daemon">firewalld</systemitem> 執行此操作。
    </para>
   </important>
   <para>
    在全域伺服器組態中，預設會啟用 SSL 模組。如果主機上停用了該模組，請使用 <command>a2enmod ssl</command> 指令將其啟用。若最終要啟用 SSL，需使用旗標 <quote>SSL</quote> 啟動伺服器。為此，請呼叫 <command>a2enflag SSL</command> (區分大小寫！)。如果選擇使用密碼來加密伺服器證書，您還需要提高 <filename>/etc/sysconfig/apache2</filename> 中 <systemitem>APACHE_TIMEOUT</systemitem> 的設定值，以便您在啟動 Apache 時有足夠的時間輸入該密碼片語。請重新啟動伺服器來確保這些變更生效。只是重新載入並無法保證變更生效。
   </para>
   <para>
    虛擬主機組態目錄包含了範本 <filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename> 和 SSL 特定指示詞 (將提供詳細文件說明)。如需一般虛擬主機組態的詳細資訊，請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>。
   </para>
   <para>
    若要開始設定組態，請將範本複製到 <filename>/etc/apache2/vhosts.d/<replaceable>mySSL-host</replaceable>.conf</filename>，並對其進行編輯。充分調整下列指示詞的值：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-ssl-configuration-name-based">
    <title>基於名稱的虛擬主機和 SSL</title>
    <para>
     依預設，在只有一個 IP 位址的伺服器上，無法同時執行多個啟用了 SSL 的虛擬主機。以名稱為基礎的虛擬主機需要 Apache 瞭解所要求的伺服器名稱。使用 SSL 連接的問題在於，此類要求只能在使用預設虛擬主機建立了 SSL 連接後才能讀取。如此一來，使用者將會收到證書與伺服器名稱不符的警告訊息。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了一項 SSL 通訊協定的延伸：伺服器名稱指示 (Server Name Indication，SNI)。該項延伸會在 SSL 協議中傳送虛擬網域的名稱，以此解決這個問題。這可讓伺服器早些<quote>切換</quote>至正確的虛擬網域，並在瀏覽器中顯示正確的證書。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中預設會啟用 SNI。若要針對 SSL 啟用以名稱為基礎的虛擬主機，請依照<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>中所述設定伺服器 (請注意，您需要對 SSL 使用連接埠 <literal>443</literal> 而非 <literal>80</literal>)。
    </para>
    <important>
     <title>SNI 瀏覽器支援</title>
     <para>
      用戶端上也必須支援 SNI。不過，只有大部分瀏覽器支援 SNI，某些較舊的瀏覽器不支援。如需詳細資訊，請參閱 <link xlink:href="https://en.wikipedia.org/wiki/Server_Name_Indication#Support"/>。
     </para>
     <para>
      若要設定對不支援 SNI 的瀏覽器的處理方式，請使用指令 <systemitem>SSLStrictSNIVHostCheck</systemitem>。若在伺服器組態中設定為 <literal>on</literal>，則不支援 SNI 的瀏覽器對所有虛擬主機的存取都會遭到拒絕。如果 <systemitem>VirtualHost</systemitem> 指令中設定為 <literal>on</literal>，將拒絕存取此特定主機。
     </para>
     <para>
      若在伺服器組態中設定為 <literal>off</literal>，則伺服器將表現為不支援 SNI。將由定義的<emphasis>第一個</emphasis>虛擬主機 (連接埠 443) 來處理 SSL 要求。
     </para>
    </important>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-multiple-instances">
  <title>在同一部伺服器上執行多個 Apache 例項</title>

  <para>
   相較於執行多個虛擬主機 (請參閱<xref linkend="sec-apache2-configuration-manually-vhost"/>)，在同一部伺服器上執行多個 Apache 例項具有以下優勢：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     如果需要將虛擬主機停用一段時間，您需要變更 Web 伺服器組態並將其重新啟動才能使變更生效。
    </para>
   </listitem>
   <listitem>
    <para>
     如果一個虛擬主機出現問題，您需要重新啟動所有的虛擬主機。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   您可以照常執行預設的 Apache 例項：
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2.service</screen>

  <para>
   它將會讀取預設的 <filename>/etc/sysconfig/apache2</filename> 檔案。如果該檔案不存在，或者存在但未設定 <systemitem>APACHE_HTTPD_CONF</systemitem> 變數，則該例項將會讀取 <filename>/etc/apache2/httpd.conf</filename>。
  </para>

  <para>
   若要啟動另一個 Apache 例項，請執行：
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2@<replaceable>INSTANCE_NAME</replaceable></screen>

  <para>
   例如：
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2@example_web.org</screen>

  <para>
   依預設，例項會使用 <filename>/etc/apache2@example_web.org/httpd.conf</filename> 做為主要組態檔案，您可以透過設定 <filename>/etc/sysconfig/apache2@example_web.org</filename> 中的 <systemitem>APACHE_HTTPD_CONF</systemitem> 予以覆寫。
  </para>

  <para>
   下面顯示了一個設定更多 Apache 例項的範例。請注意，您需要以 <systemitem class="username">root</systemitem> 身分執行所有指令。
  </para>

  <procedure>
   <title>設定其他 Apache 例項</title>
   <step>
    <para>
     依據 <filename>/etc/sysconfig/apache2</filename> 建立一個新的組態檔案，例如 <filename>/etc/sysconfig/apache2@example_web.org</filename>：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp /etc/sysconfig/apache2 /etc/sysconfig/apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     編輯檔案 <filename>/etc/sysconfig/apache2@example_web.org</filename>，將包含以下內容的行
    </para>
<screen>APACHE_HTTPD_CONF</screen>
    <para>
     針對
    </para>
<screen>APACHE_HTTPD_CONF="/etc/apache2/httpd@example_web.org.conf"</screen>
   </step>
   <step>
    <para>
     依據 <filename>/etc/apache2/httpd.conf</filename> 建立檔案 <filename>/etc/apache2/httpd@example_web.org.conf</filename>。
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp /etc/apache2/httpd.conf /etc/apache2/httpd@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     編輯 <filename>/etc/apache2/httpd@example_web.org.conf</filename>，將
    </para>
<screen>Include /etc/apache2/listen.conf</screen>
    <para>
     針對
    </para>
<screen>Include /etc/apache2/listen@example_web.org.conf</screen>
    <para>
     檢閱所有指令，並視需要予以變更。您可能需要變更
    </para>
<screen>Include /etc/apache2/global.conf</screen>
    <para>
     並為每個例項建立新的 <filename>global@example_web.org.conf</filename>。建議將
    </para>
<screen>ErrorLog /var/log/apache2/error_log</screen>
    <para>
     針對
    </para>
<screen>ErrorLog /var/log/apache2/error@example_web.org_log</screen>
    <para>
     以便每個例項都有個別的記錄。
    </para>
   </step>
   <step>
    <para>
     依據 <filename>/etc/apache2/listen.conf</filename> 建立 <filename>/etc/apache2/listen@example_web.org.conf</filename>。
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp /etc/apache2/listen.conf /etc/apache2/listen@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     編輯 <filename>/etc/apache2/listen@example_web.org.conf</filename>，將
    </para>
<screen>Listen 80</screen>
    <para>
     變更為要執行新例項的埠號，例如 82：
    </para>
<screen>Listen 82</screen>
    <para>
     若要透過安全通訊協定 (請參閱<xref linkend="sec-apache2-ssl"/>) 執行新的 Apache 例項，還需將下面一行
    </para>
<screen>Listen 443</screen>
    <para>
     (範例) 變更為
    </para>
<screen>Listen 445</screen>
   </step>
   <step>
    <para>
     啟動新的 Apache 例項：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     在網頁瀏覽器中開啟 <literal>http://server_name:82</literal>，檢查伺服器是否正在執行中。如果先前變更了新例項的錯誤記錄檔案名稱，您可以檢查這項變更：
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> tail -f /var/log/apache2/error@example_web.org_log</screen>
   </step>
  </procedure>

  <para>
   下面是在同一部伺服器上設定多個 Apache 例項時要注意的幾點：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <filename>/etc/sysconfig/apache2@<replaceable>INSTANCE_NAME</replaceable></filename> 檔案可以包含與 <filename>/etc/sysconfig/apache2</filename> 相同的變數，包括模組載入和 MPM 設定。
    </para>
   </listitem>
   <listitem>
    <para>
     當有其他例項正在執行時，不需要執行預設的 Apache 例項。
    </para>
   </listitem>
   <listitem>
    <para>
     如果未使用 <systemitem>HTTPD_INSTANCE</systemitem> 環境變數另行指定，Apache 輔助程式公用程式 <command>a2enmod</command>、<command>a2dismod</command> 和 <command>apachectl</command> 將在預設的 Apache 例項上執行。以下範例
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> export HTTPD_INSTANCE=example_web.org
<prompt>&gt; </prompt><command>sudo</command> a2enmod access_compat
<prompt>&gt; </prompt><command>sudo</command> a2enmod status
<prompt>&gt; </prompt><command>sudo</command> apachectl start</screen>
    <para>
     會將 <systemitem>access_compat</systemitem> 和 <systemitem>status</systemitem> 模組新增至 <filename>/etc/sysconfig/apache2@example_web.org</filename> 的 <systemitem>APACHE_MODULES</systemitem> 變數，然後啟動 <literal>example_web.org</literal> 例項。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-apache2-security">
  <title>避免安全性問題</title>

  <para>
   向公用網際網路公開的網頁伺服器，必須持續進行系統管理。軟體和意外的錯誤設定不可避免地會產生安全性問題。下面是可用來處理這些問題的幾項秘訣。
  </para>

  <sect2 xml:id="sec-apache2-security-up-to-date">
   <title>最新軟體</title>
   <para>
    SUSE 會在發現 Apache 軟體弱點時，發出安全性建議事項。其中包含弱點修正指示，應盡可能套用。請由下列位置取得 SUSE 安全性公告：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>網頁</title>
      <para>
       <link xlink:href="https://www.suse.com/support/security/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>郵件清單歸檔</title>
      <para>
       <link xlink:href="https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>安全性聲明清單</title>
      <para>
       <link xlink:href="https://www.suse.com/support/update/"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-security-permissions">
   <title>DocumentRoot 權限</title>
   <para>
    依預設，在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，<systemitem>DocumentRoot</systemitem> 目錄 <filename>/srv/www/htdocs</filename> 與 CGI 目錄 <filename>/srv/www/cgi-bin</filename> 的所有權屬於 <systemitem>root</systemitem> 使用者和群組。這些權限不可變更。如果目錄對所有人開放寫入權限，則任何使用者都可以將檔案放入其中。然後，這些檔案可能會由具有 <systemitem>wwwrun</systemitem> 權限的 Apache 執行，而這種情況可能會造成使用者取得非預期的檔案系統資源存取權限。使用 <filename>/srv/www</filename> 子目錄來存放虛擬主機的 <systemitem>DocumentRoot</systemitem> 和 CGI 目錄，並確定這些目錄所有權屬於 <systemitem class="username">root</systemitem> 使用者和群組。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-filesystem">
   <title>檔案系統存取</title>
   <para>
    依預設，<filename>/etc/apache2/httpd.conf</filename> 已設定成拒絕存取整個檔案系統。切勿覆寫這些指示詞，不過您可以特別啟用 Apache 應當能夠讀取之所有目錄的存取權限。如需詳細資料，請參閱<xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>。如果要執行這個動作，請確保沒有任何重要檔案 (例如密碼或系統組態檔案) 可由外界進行讀取。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-cgi">
   <title>CGI 程序檔</title>
   <para>
    使用 HP、SSI 或任何其他程式設計語言的互動式程序檔基本上可以執行任意指令，因此一般會存在安全性問題。將從伺服器執行的程序檔，只能由伺服器管理員信任的來源進行安裝 -- 通常最好不要讓使用者執行自己的程序檔。同時建議您為所有程序檔進行安全性稽核。
   </para>
   <para>
    為了盡可能簡化程序檔的管理工作，通常建議您限制 CGI 程序檔在特定目錄中執行，而不是全域性開放執行。<systemitem>ScriptAlias</systemitem> 和 <systemitem>Option
    ExecCGI</systemitem> 指令用於組態設定。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的預設組態不允許隨處執行 CGI 程序檔。
   </para>
   <para>
    所有 CGI 程序檔都是以相同使用者身分執行，所以不同的程序檔彼此之間可能會產生衝突。module suEXEC 可讓您以不同使用者和群組身分來執行 CGI 程序檔。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-users">
   <title>使用者目錄</title>
   <para>
    在啟用使用者目錄 (使用 <systemitem>mod_userdir</systemitem> 或 <systemitem>mod_rewrite</systemitem>) 時，您應該審慎考慮不要允許覆寫 <filename>.htaccess</filename> 檔案，因為這會允許使用者覆寫安全性設定。至少您應該使用 <systemitem>AllowOverRide</systemitem> 指示詞來限制使用者的應用範圍。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，<filename>.htaccess</filename> 檔案預設處於啟用狀態，但使用者在使用 <systemitem>mod_userdir</systemitem> (請參閱 <filename>/etc/apache2/mod_userdir.conf</filename> 組態檔案) 時不允許覆寫任何 <systemitem>Option</systemitem> 指令。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-troubleeshooting">
  <title>疑難排解</title>

  <para>
   如果 Apache 未啟動，網頁就無法存取，或者使用者無法連接網頁伺服器，因此找出問題的根源是很重要的工作。下面是您可在其中尋找錯誤原因的幾個常見位置以及需要檢查的重點：
  </para>

  <variablelist>
   <varlistentry>
    <term><systemitem class="service">apache2.service</systemitem> 子指令的輸出：</term>
    <listitem>
     <para>
      不要使用 <filename>/usr/sbin/apache2ctl</filename> 二進位檔案來啟動和停止 Web 伺服器，而應使用 <command>systemctl</command> 指令 (如<xref linkend="sec-apache2-start-stop"/>中所述)。<command>systemctl status apache2.service</command> 詳細描述了錯誤，甚至還提供了解決組態錯誤的提示和技巧。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>記錄檔案和詳細層級</term>
    <listitem>
     <para>
      無論發生了嚴重錯誤還是非嚴重錯誤，都可以檢查 Apache 記錄檔案尋找原因，主要檢查預設位於 <filename>/var/log/apache2/error_log</filename> 的錯誤記錄檔案。此外，如果需要檢視記錄檔案中更多的詳細資訊，還可以透過 <systemitem>LogLevel</systemitem> 指示詞來控制記錄訊息的詳細程度。
     </para>
     <tip>
      <title>一個簡單的測試</title>
      <para>
       使用 <command>tail -F /var/log/apache2/<replaceable>MY_ERROR_LOG</replaceable></command> 指令檢視 Apache 記錄訊息。然後執行 <command>systemctl restart apache2.service</command>。現在，請嘗試連接到瀏覽器，並檢查輸出結果。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>防火牆和連接埠</term>
    <listitem>
     <para>
      一個常見的錯誤是，沒有在伺服器的防火牆組態中開啟 Apache 的連接埠。如果是使用 YaST 來設定 Apache，就要透過其他選項來檢查這個特定問題 (請參閱<xref linkend="sec-apache2-configuration-yast"/>)。如果您要手動設定 Apache，請透過 YaST 防火牆模組來跚
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   如果無法透過這些功能來查出錯誤原因，則請查閱 <link xlink:href="http://httpd.apache.org/bug_report.html"/> 中的線上 Apache 錯誤資料庫。此外，也可以從 <link xlink:href="http://httpd.apache.org/userslist.html"/> 取得可用的郵件清單，聯絡 Apache 使用者社群。
  </para>
 </sect1>
 <sect1 xml:id="sec-apache2-more-information">
  <title>更多資訊</title>

  <para>
   <systemitem>apache2-doc</systemitem> 套件在許多位置包含了完整的 Apache 手冊，用於本地安裝及作為參考文件。這個套件不是預設安裝選項 — 安裝此套件最快的方式就是使用 <command>zypper in apache2-doc</command> 指令。完成安裝之後，<link xlink:href="http://localhost/manual/"/> 中將會有 Apache 手冊可供使用。您也可以從 <link xlink:href="http://httpd.apache.org/docs-2.4/"/> 網站位置來存取這份手冊。<filename>/usr/share/doc/packages/apache2/README.*</filename> 目錄會提供 SUSE 特定組態秘訣資訊。
  </para>

  <sect2 xml:id="sec-apache2-more-information-apache22">
   <title>Apache 2.4</title>
   <para>
    如需 Apache 2.4 最新功能的清單，請參閱 <link xlink:href="http://httpd.apache.org/docs/2.4/new_features_2_4.html"/>。如需從 2.2 升級至 2.4 版的資訊，請參閱下列網址資訊：<link xlink:href="http://httpd.apache.org/docs-2.4/upgrading.html"/>。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-modules">
   <title> Apache 模組 </title>
   <para>
    有關<xref linkend="sec-apache2-modules-external"/> 中簡要介紹的外部 Apache 模組的詳細資訊，可在以下位置找到：
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="https://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php8</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
      <para>
       您可以在包含詳細備註的主組態檔案 <filename>/etc/php8/apache2/php.ini</filename> 中獲得關於 <systemitem>mod_php8</systemitem> 組態的詳細資訊。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-cgi">
   <title>開發</title>
   <para>
    如需更多有關開發 Apache 模組或是參與 Apache 網頁伺服器計畫的詳細資訊，請參閱下列主題內容：
   </para>
   <variablelist>
    <varlistentry>
     <term>Apache 開發人員資訊</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apache 開發人員文件</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/docs/2.4/developer/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-miscellaneous-sources" os="sles;sled">
   <title>其他來源</title>
   <para>
    如果您在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中遇到與 Apache 有關的問題，請查閱「技術資訊搜尋」，網址為：<link xlink:href="https://www.suse.com/support"/>。關於 Apache 的歷程，請參閱 <link xlink:href="https://httpd.apache.org/ABOUT_APACHE.html"/>。此頁面也說明稱伺服器為 Apache 的原因。
   </para>
  </sect2>
 </sect1>
</chapter>
