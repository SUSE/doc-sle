<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
    [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xml:id="cha-podman-overview" xml:lang="en"
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&podman; overview</title>
 <para>
  <link xlink:href="https://podman.io/">Podman</link> is short for Pod Manager
  Tool. It is a daemonless container engine for developing, managing, and
  running Open Container Initiative (OCI) containers on a Linux system, and it
  offers a drop-in alternative for &docker;. &podman; is the default container
  runtime in &opensuse; Kubic&mdash;a certified Kubernetes distribution built
  on top of &opensuse;. &podman; can be used to create OCI-compliant container
  images using a Dockerfile and a range of commands identical to &deng;. For
  example, the <literal>podman build</literal> command performs the same task
  as <literal>docker build</literal>. In other words, &podman; provides a
  drop-in replacement for &deng;.
 </para>
 <para>
  Moving from &deng; to &podman; does not require any changes in the
  established workflow. There is no need to rebuild images, and you can use the
  exact same commands to build and manage images as well as run and
  control containers.
 </para>
 <para>
  &podman; differs from &deng; in two important ways.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    &podman; does not use a daemon, so the container engine interacts directly
    with an image registry, containers, and an image storage. As &podman; does
    not have a daemon, it provides integration with systemd. This makes it
    possible to control containers via systemd units. You can create these units
    for existing containers as well as generate units that can start containers
    if they do not exist in the system. Moreover, &podman; can run systemd
    inside containers.
   </para>
  </listitem>
  <listitem>
   <para>
    Because &podman; relies on several namespaces, which provide an isolation
    mechanism for Linux processes, it does not require root privileges to
    create and run containers. This means that &podman; can run in root
    mode as well as in an unprivileged environment. Moreover, a container
    created by an unprivileged user cannot get higher privileges on the host
    than the container's creator.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-podman-install">
  <title>&podman; installation</title>

  <para>
   To install &podman;, run the command
   <command>sudo zypper in podman</command>. Then run
   <command>podman --version</command> to check whether &podman; has been
   installed successfully.
  </para>

  <para>
  To run &podman; without root privileges, subuids and subgids must be assigned to the user running &podman;. If there is no entry in the <filename>/etc/subuid</filename> file, add an entry using the following command:
  </para>

<screen>&prompt.user; sudo usermod --add-subuids 200000-201000 --add-subgids 200000-201000 $USER</screen>

  <para>
   To enable the change, reboot the machine or stop the session of the current
   user. To do the latter, run 
   <command>loginctl list-sessions | grep $USER</command> and note the session
   ID. Then run
   <command>loginctl kill-session <replaceable>SESSION_ID</replaceable></command>
   to terminate the session.
  </para>

  <para>
   The command above defines a range of local UIDs to which the UIDs allocated
   to users inside the container are mapped on the host. Note that the ranges
   defined for different users must not overlap. It is also important that the
   ranges do not reuse the UID of an existing local user or group. By default,
   adding a user with the <command>useradd</command> command on &slsa;
   &product-ga; automatically allocates subUID and subGID ranges.
  </para>

  <para>
   Running a container with &podman; in rootless mode on &sls; may fail,
   because the container needs read access to the &scc; credentials. For
   example, running a container with the command
   <command>podman run -it --rm registry.suse.com/suse/sle15 bash</command>
   and then executing <command>zypper ref</command> results in the following
   error message:
  </para>

<screen>Refreshing service 'container-suseconnect-zypp'.
Problem retrieving the repository index file for service 'container-suseconnect-zypp':
[container-suseconnect-zypp|file:/usr/lib/zypp/plugins/services/container-suseconnect-zypp] 
Warning: Skipping service 'container-suseconnect-zypp' because of the above error.
Warning: There are no enabled repositories defined.
Use 'zypper addrepo' or 'zypper modifyrepo' commands to add or enable repositories</screen>

  <para>
   To solve the problem, grant the current user the required access rights by
   running the following command on the host:
  </para>

<screen>&prompt.user;sudo setfacl -m u:$USER:r /etc/zypp/credentials.d/*</screen>

  <para>
   Log out and log in again to apply the changes.
  </para>

  <para>
   To give multiple users the required access, create a dedicated group using
   the <command>groupadd <replaceable>GROUPNAME</replaceable></command>
   command. Then use the following command to change the group ownership and
   rights of files in the <filename>/etc/zypp/credentials.d/</filename>
   directory.
  </para>

<screen>&prompt.user;sudo chgrp <replaceable>GROUPNAME</replaceable> /etc/zypp/credentials.d/*
&prompt.user;sudo chmod g+r /etc/zypp/credentials.d/*</screen>

  <para>
   You can then grant a specific user write access by adding them to the
   created group.
  </para>
 </sect1>
 <sect1 xml:id="cha-podman-use">
  <title>&podman; basic usage</title>

  <para>
   Since &podman; is compatible with &deng;, it features the same commands and
   options. For example, the <command>podman pull</command> command fetches a
   container image from a registry, while the <command>podman build</command>
   command is used to build images.
  </para>

  <para>
   One of the advantages of &podman; over &deng; is that &podman; can be
   configured to search multiple registries. To make &podman; search the
   &suseregistry; first and use &dhub; as a fallback, add the following
   configuration to the <filename>/etc/containers/registries.conf</filename>
   file:
  </para>

<screen>[registries.search]
registries = ["registry.suse.com", "docker.io"]</screen>

  <para>
   Similar to &deng;, &podman; can run containers in an interactive mode,
   allowing you to inspect and work with an image. To run
   <literal>suse/sle15</literal> in interactive mode, use the following
   command:
  </para>

<screen>&prompt.user;podman run --rm -ti suse/sle15</screen>

  <sect2 xml:id="cha-podman-build-images">
   <title>Building images with &podman;</title>
   <para>
    &podman; can build images from a Dockerfile. The <command>podman
    build</command> command behaves as <command>docker build</command>, and it
    accepts the same options.
   </para>
   <para>
    &podman;'s companion tool &buildah; provides an alternative way to build
    images. For further information about &buildah;, refer to
    <xref linkend="cha-buildah-overview" />.
   </para>
  </sect2>
 </sect1>
</chapter>
