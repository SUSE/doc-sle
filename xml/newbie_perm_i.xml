<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<sect1 version="5.0" xml:lang="en" xml:id="sec.new.bash.accperm"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>File Access Permissions</title>

 <para>
  In Linux, objects such as files or folders or processes generally belong
  to the user who created or initiated them. There are some exceptions to
  this rule. For more information about the exceptions, refer to
  <xref linkend="cha.security.acls"/>. The group which is associated with a
  file or a folder depends on the primary group the user belongs to when
  creating the object.
 </para>

 <para>
  <remark>taroth 060522: what does determine the access permissions which are
   set when creating a new file? -toms: umask - taroth 061014: no time left,
   explain or refer to in next revision </remark>
  When you create a new file or directory, initial access permissions for
  this object are set according to a predefined scheme. As an owner of a
  file or directory, you can change the access permissions for this object.
  For example, you can protect files holding sensitive data against read
  access by other users and you can authorize the members of your group or
  other users to write, read, or execute several of your files where
  appropriate. As &rootuser;, you can also change the ownership of files or
  folders.
 </para>

 <sect2 xml:id="sec.new.bash.accperm.ugo">
  <title>Permissions for User, Group and Others</title>
  <para>
   Three permission sets are defined for each file object on a Linux system.
   These sets include the read, write, and execute permissions for each of
   three types of users&mdash;the owner, the group, and other users.
  </para>
  <para>
   The following example shows the output of an <command>ls</command>
   <option>-l</option> command in a shell. This command lists the
   contents of a directory and shows the details for each file and folder in
   that directory.
  </para>
  <example xml:id="ex.new.users.accperm.ugo">
   <title>Access Permissions For Files and Folders</title>
<screen>-rw-r----- 1 &exampleuser_plain; &examplegroup_plain;      0 2015-06-23 16:08 checklist.txt
-rw-r--r-- 1 &exampleuser_plain; &examplegroup_plain;  53279 2015-06-21 13:16 gnome_quick.xml
-rw-rw---- 1 &exampleuser_plain; &examplegroup_plain;      0 2015-06-23 16:08 index.htm
-rw-r--r-- 1 &exampleuser_plain; &examplegroup_plain;  70733 2015-06-21 09:35 kde-start.xml
-rw-r--r-- 1 &exampleuser_plain; &examplegroup_plain;  47896 2015-06-21 09:46 kde_quick.xml
drwxr-xr-x 2 &exampleuser_plain; &examplegroup_plain;     48 2015-06-23 16:09 local
-rwxr--r-- 1 &exampleuser_plain; &examplegroup_plain; 624398 2015-06-23 15:43 tux.sh</screen>
  </example>
  <para>
   As shown in the third column, all objects belong to user
   &exampleuser;. They are
   assigned to the group
   &examplegroup; which is the
   primary group the user &exampleuser; belongs to.
   To retrieve the access permissions the first column of the list must be
   examined more closely. Let's have a look at the file
   <filename>kde-start.xml</filename>:
  </para>
  <informaltable>
   <tgroup cols="4">
    <tbody>
     <row>
      <entry>
       <para>
        Type
       </para>
      </entry>
      <entry>
       <para>
        User Permissions
       </para>
      </entry>
      <entry>
       <para>
        Group Permissions
       </para>
      </entry>
      <entry>
       <para>
        Permissions for Others
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>-</literal>
       </para>
      </entry>
      <entry>
       <para>
        <literal>rw-</literal>
       </para>
      </entry>
      <entry>
       <para>
        <literal>r--</literal>
       </para>
      </entry>
      <entry>
       <para>
        <literal>r--</literal>
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
  <para>
   The first column of the list consists of one leading character followed
   by nine characters grouped in three blocks. The leading character
   indicates the file type of the object: in this case, the hyphen
   (<literal>&ndash;</literal>) shows that
   <filename>kde-start.xml</filename> is a file. If you find the character
   <literal>d</literal> instead, this shows that the object is a directory,
   like <filename>local</filename> in
   <xref linkend="ex.new.users.accperm.ugo"/>.
  </para>
  <para>
   The next three blocks show the access permissions for the owner, the
   group and other users (from left to right). Each block follows the same
   pattern: the first position shows read permissions
   (<literal>r</literal>), the next position shows write permissions
   (<literal>w</literal>), the last one shows execute permission
   (<literal>x</literal>). A lack of either permission is indicated by
   <literal>-</literal>. In our example, the owner of
   <filename>kde-start.xml</filename> has read and write access to the file
   but cannot execute it. The &examplegroup; group can read
   the file but cannot write or execute it. The same holds true for the
   other users as shown in the third block of characters.
  </para>
 </sect2>

 <sect2 xml:id="sec.new.bash.accperm.impact">
  <title>Files and Folders</title>
  <para>
   Access permissions have a slightly different impact depending on the type
   of object they apply to: file or directory. The following table shows the
   details:
  </para>
  <table xml:id="tab.new.users.accperm.impact">
   <title>Access Permissions For Files And Directories</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>
       <para>
        Access Permission
       </para>
      </entry>
      <entry>
       <para>
        File
       </para>
      </entry>
      <entry>
       <para>
        Folder
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        Read (r)
       </para>
      </entry>
      <entry>
       <para>
        Users can open and read the file.
       </para>
      </entry>
      <entry>
       <para>
        Users can view the contents of the directory. Without this
        permission, users cannot list the contents of this directory with
        <command>ls</command> <option>-l</option>, for example. However, if
        they only have execute permission for the directory, they can
        nevertheless access certain files in this directory if they know of
        their existence.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Write (w)
       </para>
      </entry>
      <entry>
       <para>
        Users can change the file: They can add or drop data and can even
        delete the contents of the file. However, this does not include the
        permission to remove the file completely from the directory as long
        as they do not have write permissions for the directory where the
        file is located.
       </para>
      </entry>
      <entry>
       <para>
        Users can create, rename or delete files in the directory.
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Execute (x)
       </para>
      </entry>
      <entry>
       <para>
        Users can execute the file. This permission is only relevant for
        files like programs or shell scripts, not for text files. If the
        operating system can execute the file directly, users do not need
        read permission to execute the file. However, if the file must me
        interpreted like a shell script or a perl program, additional read
        permission is needed.
       </para>
      </entry>
      <entry>
       <para>
        Users can change into the directory and execute files there. If they
        do not have read access to that directory they cannot list the files
        but can access them nevertheless if they know of their existence.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   Note that access to a certain file is always dependent on the correct
   combination of access permissions for the file itself
   <emphasis>and</emphasis> the directory it is located in.
  </para>
 </sect2>

 <sect2 xml:id="sec.new.bash.perm">
  <title>Modifying File Permissions</title>
  <para>
   In Linux, objects such as files or folder or processes generally belong
   to the user who created or initiated them. The group which is associated
   with a file or a folder depends on the primary group the user belongs to
   when creating the object. When you create a new file or directory,
   initial access permissions for this object are set according to a
   predefined scheme. For further details refer to
   <xref linkend="sec.new.bash.accperm"/>.
  </para>
  <para>
   As the owner of a file or directory (and, of course, as
   &rootuser;), you can change the
   access permissions to this object.
  </para>
  <para>
   To change object attributes like access permissions of a file or folder,
   use the <command>chmod</command> command followed by the following parameters:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     the users for which to change the permissions,
    </para>
   </listitem>
   <listitem>
    <para>
     the type of access permission you want to remove, set or add and
    </para>
   </listitem>
   <listitem>
    <para>
     the files or folders for which you want to change permissions separated
     by spaces.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The users for which you can change file access permissions fall into the
   following categories: the owner of the file (user, <literal>u</literal>),
   the group that own the file (group, <literal>g</literal>) and the other
   users (others, <literal>o</literal>). You can add, remove or set one or
   more of the following permissions: read, write or execute.
  </para>
  <para>
   As &rootuser;, you can also change the ownership of a file: with the
   command <command>chown</command>
   (change owner) you can transfer ownership to a new user.
  </para>
  <sect3 xml:id="sec.new.bash.perm.ex">
   <title>Examples for Changing Access Permissions and Ownership</title>
   <para>
    The following example shows the output of an <command>ls</command>
    <option>-l</option> command in a shell.
   </para>
   <example xml:id="ex.new.bash.accperm.ugo">
    <title>Access Permissions For Files and Folders</title>
<screen>-rw-r----- 1 &exampleuser_plain; &examplegroup_plain;      0 2015-06-23 16:08 checklist.txt
-rw-r--r-- 1 &exampleuser_plain; &examplegroup_plain;  53279 2015-06-21 13:16 gnome_quick.xml
-rw-rw---- 1 &exampleuser_plain; &examplegroup_plain;      0 2015-06-23 16:08 index.htm
-rw-r--r-- 1 &exampleuser_plain; &examplegroup_plain;  70733 2015-06-21 09:35 kde-start.xml
-rw-r--r-- 1 &exampleuser_plain; &examplegroup_plain;  47896 2015-06-21 09:46 kde_quick.xml
drwxr-xr-x 2 &exampleuser_plain; &examplegroup_plain;     48 2015-06-23 16:09 local
-r-xr-xr-x 1 &exampleuser_plain; &examplegroup_plain; 624398 2015-06-23 15:43 &exampleuser_plain;.jpg</screen>
   </example>
   <para>
    In the example above, user &exampleuser; owns
    the file <filename>kde-start.xml</filename> and has read and write
    access to the file but cannot execute it. The
    &examplegroup; group can read the file but cannot write
    or execute it. The same holds true for the other users as shown by the
    third block of characters.
   </para>
   <procedure>
    <title>Changing Access Permissions</title>
    <para>
     Suppose you are &exampleuser; and want to
     modify the access permissions to your files:
    </para>
    <step>
     <para>
      If you want to grant the &examplegroup; group also
      write access to <filename>kde-start.xml</filename>, enter
     </para>
<screen>chmod g+w kde-start.xml</screen>
    </step>
    <step>
     <para>
      To grant the &examplegroup; group and other users
      write access to <filename>kde-start.xml</filename>, enter
     </para>
<screen>chmod go+w kde-start.xml</screen>
    </step>
    <step>
     <para>
      To remove write access for all users, enter
     </para>
<screen>chmod -w kde-start.xml</screen>
     <para>
      If you do not specify any kind of users, the changes apply to all
      users&mdash; the owner of the file, the owning group and the others.
      Now even the owner &exampleuser; does not
      have write access to the file without first reestablishing write
      permissions.
     </para>
    </step>
    <step>
     <para>
      To prohibit the &examplegroup; group and others to
      change into the directory <filename>local</filename>, enter
     </para>
<screen>chmod go-x local</screen>
    </step>
    <step>
     <para>
      To grant others write permissions for two files, for
      <filename>kde_quick.xml</filename> and
      <filename>gnome_quick.xml</filename>, enter
     </para>
<screen>chmod o+w  kde_quick.xml gnome_quick.xml</screen>
    </step>
   </procedure>
   <procedure>
    <title>Changing Ownership</title>
    <para>
     Suppose you are &exampleuser; and want to
     transfer the ownership of the file <filename>kde_quick.xml</filename>
     to an other user, named &exampleuserII;. In
     this case, proceed as follows:
    </para>
    <step>
     <para>
      Enter the username and password for &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Enter
     </para>
<screen>chown &exampleuserII; kde_quick.xml</screen>
    </step>
    <step>
     <para>
      Check what happened with
     </para>
<screen>ls -l kde_quick.xml</screen>
     <para>
      You should get the following output:
     </para>
<screen>-rw-r--r-- 1 wilber users  47896 2006-06-21 09:46 kde_quick.xml</screen>
    </step>
    <step>
     <para>
      If the ownership is set according to your wishes, switch back to your
      normal user account.
     </para>
    </step>
   </procedure>
  </sect3>
 </sect2>
</sect1>
