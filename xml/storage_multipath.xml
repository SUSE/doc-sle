<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-multipath" xml:lang="en">
 <title>Managing multipath I/O for devices</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  This section describes how to manage failover and path load balancing for
  multiple paths between the servers and block storage devices by using
  Multipath I/O (MPIO).
 </para>
 <sect1 xml:id="sec-multipath-intro">
  <title>Understanding multipath I/O</title>

  <para>
   Multipathing is the ability of a server to communicate with the same
   physical or logical block storage device across multiple physical paths
   between the host bus adapters in the server and the storage controllers for
   the device, typically in Fibre Channel (FC) or iSCSI SAN environments.
  </para>

  <para>
   Linux multipathing provides connection fault tolerance and can provide load
   balancing across the active connections. When multipathing is configured and
   running, it automatically isolates and identifies device connection
   failures, and reroutes I/O to alternate connections.
  </para>

  <para>
   Multipathing provides fault tolerance against connection failures, but not
   against failures of the storage device itself. The latter is achieved with
   complementary techniques like mirroring.
  </para>

  <sect2>
   <title>Multipath terminology</title>
   <variablelist>
    <varlistentry>
     <term>Storage array</term>
     <listitem>
      <para>
       A hardware device with many disks and multiple fabrics connections
       (controllers) that provides SAN storage to clients. Storage arrays
       typically have RAID and failover features and support multipathing.
       Historically, active/passive (failover) and active/active
       (load-balancing) storage array configurations were distinguished. These
       concepts still exist but they are merely special cases of the concepts
       of path groups and access states supported by modern hardware.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Host, host system</term>
     <listitem>
      <para>
       The computer running &productname; which acts as a client system for a
       <emphasis>storage array</emphasis>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Multipath map, multipath device</term>
     <listitem>
      <para>
       A set of <emphasis>path devices</emphasis>. It represents a storage
       volume on a storage array and is seen as a single block device by the
       host system.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Path device</term>
     <listitem>
      <para>
       A member of a multipath map, typically a SCSI device. Each path device
       represents a unique connection between the host computer and the actual
       storage volume, for example, a logical unit from an iSCSI session.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>WWID</term>
     <listitem>
      <para>
       &ldquo;World Wide Identifier&rdquo;.
       <systemitem>multipath-tools</systemitem> uses the WWID to determine
       which low-level devices should be assembled into a multipath map. The
       WWID must be distinguished from the configurable <emphasis>map
       name</emphasis> (see <xref linkend="sec-multipath-names"/>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>uevent, udev event</term>
     <listitem>
      <para>
       An event sent by the kernel to user space and processed by the
       <command>udev</command> subsystem. Uevents are generated when devices
       are added or removed, or when they change their properties.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Device mapper</term>
     <listitem>
      <para>
       A framework in the Linux kernel for creating virtual block devices. I/O
       operations to mapped devices are redirected to the underlying block
       devices. Device mappings may be stacked. The device mapper implements
       its own event signaling, also known as &ldquo;device mapper
       events&rdquo; or &ldquo;dm events&rdquo;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>initramfs</term>
     <listitem>
      <para>
       The initial RAM file system, also referred to as &ldquo;initial RAM
       disk&rdquo; (initrd) for historical reasons (see
       <xref linkend="sec-boot-terminology"/>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ALUA</term>
     <listitem>
      <para>
       &ldquo;Asymmetric Logical Unit Access&rdquo;, a concept introduced with
       the SCSI standard SCSI-3. Storage volumes can be accessed via multiple
       ports, which are organized in port groups with different states (active,
       standby, etc.). ALUA defines SCSI commands to query the port groups and
       their states and change the state of a port group. Modern storage arrays
       that support SCSI usually support ALUA, too.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-hardware">
  <title>Hardware support</title>

  <para>
   The multipathing drivers and tools are available on all architectures
   supported by &productname;. The generic, protocol-agnostic driver works with
   most multipath-capable storage hardware on the market. Some storage array
   vendors provide their own multipathing management tools. Consult the
   vendorâ€™s hardware documentation to determine what settings are required.
  </para>

  <sect2 xml:id="sec-multipath-hardware-implementations">
   <title>Multipath implementations: device mapper and NVMe</title>
   <para>
    The traditional, generic implementation of multipathing under Linux uses
    the device mapper framework. For most device types like SCSI devices,
    device mapper multipathing is the only available implementation. Device
    mapper multipath is highly configurable and flexible.
   </para>
   <para>
    The Linux <emphasis>NVM Express</emphasis> (NVMe) kernel subsystem
    implements multipathing natively in the kernel. This implementation creates
    less computational overhead for NVMe devices, which are typically fast
    devices with very low latencies. Native NVMe multipathing requires no user
    space component. Since &slea; 15, native multipathing has been the default
    for NVMe multipath devices. For details, refer to
    <xref linkend="sec-nvmeof-host-configuration-multipathing"/>.
   </para>
   <para>
    This chapter documents device mapper multipath and its user-space
    component, <systemitem>multipath-tools</systemitem>.
    <systemitem>multipath-tools</systemitem> also has limited support for
    native NVMe multipathing (see
    <xref linkend="sec-multipath-conf-misc" xrefstyle="SecTitleOnPage"/>).
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-hardware-autodetect">
   <title>Storage array autodetection for multipathing</title>
   <para>
    Device mapper multipath is a generic technology. Multipath device detection
    requires only that the low-level (for example, SCSI) devices are detected
    by the kernel, and that device properties reliably identify multiple
    low-level devices as being different &ldquo;paths&rdquo; to the same volume
    rather than actually different devices.
   </para>
   <para>
    The <filename>multipath-tools</filename> package detects storage arrays by
    their vendor and product names. It provides built-in configuration defaults
    for a large variety of storage products. Consult the hardware documentation
    of your storage array: some vendors provide specific recommendations for
    Linux multipathing configuration.
   </para>
   <para>
    If you need to apply changes to the built-in configuration for your storage
    array, read <xref linkend="sec-multipath-conf-file"/>.
   </para>
   <important>
    <title>Disclaimer about built-in hardware properties</title>
    <para>
     <filename>multipath-tools</filename> has built-in presets for many storage
     arrays. The existence of such presets for a given storage product
     <emphasis>does not imply</emphasis> that the vendor of the storage product
     has tested the product with <systemitem>dm-multipath</systemitem>, nor
     that the vendor endorses or supports the use of
     <systemitem>dm-multipath</systemitem> with the product. Always consult the
     original vendor documentation for support-related questions.
    </para>
   </important>
  </sect2>

  <sect2 xml:id="sec-multipath-hardware-handlers">
   <title>Storage arrays that require specific hardware handlers</title>
   <para>
    Some storage arrays require special commands for failover from one path to
    the other, or non-standard error-handling methods. These special commands
    and methods are implemented by hardware handlers in the Linux kernel.
    Modern SCSI storage arrays support the &ldquo;Asymmetric Logical Unit
    Access&rdquo; (ALUA) hardware handler defined in the SCSI standard. Besides
    ALUA, the &slea; kernel contains hardware handlers for Netapp E-Series
    (RDAC), the Dell/EMC CLARiiON CX family of arrays, and legacy arrays from
    HP.
   </para>
   <para>
    Since Linux kernel 4.4, the Linux kernel has automatically detected
    hardware handlers for most arrays, including all arrays supporting ALUA.
    The only requirement is that the device handler modules are loaded at the
    time the respective devices are probed. The
    <systemitem>multipath-tools</systemitem> package ensures this by installing
    appropriate configuration files. Once a device handler is attached to a
    given device, it cannot be changed anymore.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-planning">
  <title>Planning for multipathing</title>

  <para>
   Use the guidelines in this section when planning your multipath I/O
   solution.
  </para>

  <sect2 xml:id="sec-multipath-planning-prereq">
   <title>Prerequisites</title>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The storage array you use for the multipathed device must support
      multipathing. For more information, see
      <xref linkend="sec-multipath-hardware"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      You need to configure multipathing only if multiple physical paths exist
      between host bus adapters in the server and host bus controllers for the
      block storage device.
     </para>
    </listitem>
    <listitem>
     <para>
      For some storage arrays, the vendor provides its own multipathing
      software to manage multipathing for the arrayâ€™s physical and logical
      devices. In this case, you should follow the vendorâ€™s instructions for
      configuring multipathing for those devices.
     </para>
    </listitem>
    <listitem>
     <para>
      When using multipathing in a virtualization environment, the multipathing
      is controlled in the host server environment. Configure multipathing for
      the device before you assign it to a virtual guest machine.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-types">
   <title>Multipath installation types</title>
   <para>
    We distinguish installation types by the way the root device is handled.
    <xref linkend="sec-multipath-installing"/> describes how the different
    setups are created during and after installation.
   </para>
   <sect3 xml:id="sec-multipath-planning-type-root">
    <title>Root file system on multipath (SAN-boot)</title>
    <para>
     The root file system is on a multipath device. This is typically the case
     for diskless servers that use SAN storage exclusively. On such systems,
     multipath support is required for booting, and multipathing must be
     enabled in the initramfs.
    </para>
   </sect3>
   <sect3 xml:id="sec-multipath-planning-type-noroot">
    <title>Root file system on a local disk</title>
    <para>
     The root file system (and possibly some other file systems) is on local
     storage, for example, on a directly attached SATA disk or local RAID, but
     the system additionally uses file systems in the multipath SAN storage.
     This system type can be configured in three different ways:
    </para>
    <variablelist>
     <varlistentry>
      <term>Multipath setup for local disk</term>
      <listitem>
       <para>
        All block devices are part of multipath maps, including the local disk.
        The root device appears as a degraded multipath map with just one path.
        This configuration is created if multipathing was enabled during the
        initial system installation with &yast;.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vl-multipath-planning-type-noroot-ignore">
      <term>Local disk is excluded from multipath</term>
      <listitem>
       <para>
        In this configuration, multipathing is enabled in the initramfs, but
        the root device is explicitly excluded from multipath (see
        <xref linkend="sec-multipath-blacklist"/>).
        <xref linkend="pr-multipath-disable-root"/> describes how to set up
        this configuration.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry xml:id="vl-multipath-planning-type-noroot-noinitrd">
      <term>Multipath disabled in the initramfs</term>
      <listitem>
       <para>
        This setup is created if multipathing was not enabled during the
        initial system installation with &yast;. This configuration is rather
        fragile; consider using one of the other options instead.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-disks">
   <title>Disk management tasks</title>
   <para>
    Use third-party SAN array management tools or the user interface of your
    storage array to create logical devices and assign them to hosts. Make sure
    to configure the host credentials correctly on both sides.
   </para>
   <para>
    You can add or remove volumes to a running host, but detecting the changes
    may require rescanning SCSI targets and reconfiguring multipathing on the
    host. See <xref linkend="sec-multipath-best-practice-scandev"/>.
   </para>
   <note>
    <title>Storage processors</title>
    <para>
     On some disk arrays, the storage array manages the traffic through storage
     processors. One processor is active and the other one is passive until
     there is a failure. If you are connected to the passive storage processor,
     you might not see the expected LUNs, or you might see the LUNs but
     encounter I/O errors when you try to access them.
    </para>
    <para>
     If a disk array has more than one storage processor, ensure that the SAN
     switch has a connection to the active storage processor that owns the LUNs
     you want to access.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-raid">
   <title>Software RAID and complex storage stacks</title>
   <para>
    Multipathing is set up on top of basic storage devices such as SCSI disks.
    In a multi-layered storage stack, multipathing is always the bottom layer.
    Other layers such as software RAID, Logical Volume Management, block device
    encryption, etc. are layered on top of it. Therefore, for each device that
    has multiple I/O paths and that you plan to use in a software RAID, you
    must configure the device for multipathing before you attempt to create the
    software RAID device.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-planning-ha">
   <title>High-availability solutions</title>
   <para>
    High-availability solutions for clustering storage resources run on top of
    the multipathing service on each node. Make sure that the configuration
    settings in the <filename>/etc/multipath.conf</filename> file on each node
    are consistent across the cluster.
   </para>
   <para>
    Make sure that multipath devices have the same name across all devices.
    Refer to <xref linkend="sec-multipath-names"/> for details.
   </para>
   <para>
    The Distributed Replicated Block Device (DRBD) high-availability solution
    for mirroring devices across a LAN runs on top of multipathing. For each
    device that has multiple I/O paths and that you plan to use in a DRDB
    solution, you must configure the device for multipathing before you
    configure DRBD.
   </para>
   <para>
    Special care must be taken when using multipathing together with clustering
    software that relies on shared storage for fencing, such as
    <command>pacemaker</command> with <command>sbd</command>. See
    <xref linkend="sec-multipath-policies-cluster"/> for details.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-installing">
  <title>Installing &productname; on multipath systems</title>

  <para>
   No special installation parameters are required for the installation of
   &productname; on systems with multipath hardware.
  </para>

  <sect2 xml:id="sec-multipath-installing-nomp">
   <title>Installing without connected multipath devices</title>
   <para>
    You may want to perform installation on a local disk, without configuring
    the fabric and the storage first, with the intention to add multipath SAN
    devices to the system later. In this case, the installation will proceed
    like on a non-multipath system. After installation,
    <systemitem>multipath-tools</systemitem> will be installed, but the
    &systemd; service <filename>multipathd.service</filename> will be disabled.
    The system will be configured as described in
    <xref linkend="vl-multipath-planning-type-noroot-noinitrd"/> in
    <xref linkend="sec-multipath-planning-type-noroot"/>. Before adding SAN
    hardware, you will need to enable and start
    <filename>multipathd.service</filename>. We recommend creating a
    <literal>blacklist</literal> entry in the
    <filename>/etc/multipath.conf</filename> for the root device (see
    <xref linkend="sec-multipath-blacklist"/>).
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-installing-mp">
   <title>Installing with connected multipath devices</title>
   <para>
    If multipath devices are connected to the system at installation time,
    &yast; will detect them and display a pop-up window asking you whether
    multipath should be enabled before entering the partitioning stage.
   </para>
   <informalfigure>
    <mediaobject>
     <textobject role="description"><phrase>
          &yast; multipath dialog</phrase>
     </textobject>
     <imageobject role="fo">
      <imagedata fileref="multipath-popup.png" width="50%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="multipath-popup.png" width="50%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <para>
    If you select &ldquo;No&rdquo; at this prompt (not recommended), the
    installation will proceed as in
    <xref linkend="sec-multipath-installing-nomp"/>. In the partitioning stage,
    do not use/edit devices that will later be part of a multipath map.
   </para>
   <para>
    If you select &ldquo;Yes&rdquo; at the multipath prompt,
    <command>multipathd</command> will run during the installation. No device
    will be added to the <literal>blacklist</literal> section of
    <filename>/etc/multipath.conf</filename>, thus all SCSI and DASD devices,
    including local disks, will appear as multipath devices in the partitioning
    dialogs. After installation, all SCSI and DASD devices will be multipath
    devices, as described in
    <xref linkend="sec-multipath-planning-type-root"/>.
   </para>
   <procedure xml:id="pr-multipath-disable-root">
    <title>Disabling multipathing for the root disk after installation</title>
    <para>
     This procedure assumes that you installed on a local disk and enabled
     multipathing during installation, so that the root device is on multipath
     now, but you prefer to set up the system as described in
     <xref linkend="vl-multipath-planning-type-noroot-ignore"/> in
     <xref linkend="sec-multipath-planning-type-noroot"/>.
    </para>
    <step>
     <para>
      Check your system for <filename>/dev/mapper/...</filename> references to
      your local root device, and replace them with references that will still
      work if the device is not a multipath map anymore (see
      <xref linkend="sec-multipath-referring"/>). If the following command
      finds no references, you do not need to apply changes:
     </para>
<screen>&prompt.sudo;grep -rl /dev/mapper/ /etc</screen>
    </step>
    <step>
     <para>
      Switch to <literal>by-uuid</literal> persistent device policy for
      <command>dracut</command> (see
      <xref linkend="sec-multipath-initrd-persistent"/>):
     </para>
<screen>&prompt.user;echo 'persistent_policy="by-uuid"' | \
      sudo tee /etc/dracut.conf.d/10-persistent-policy.conf</screen>
    </step>
    <step>
     <para>
      Determine the WWID of the root device:
     </para>
<screen>&prompt.user;multipathd show paths format "%i %d %w %s"
0:2:0:0 sda 3600605b009e7ed501f0e45370aaeb77f IBM,ServeRAID M5210
...
        </screen>
     <para>
      This command prints all paths devices with their WWIDs and vendor/product
      information. You will be able to identify the root device (here, the
      ServeRAID device) and note the WWID.
     </para>
    </step>
    <step>
     <para>
      Create a blacklist entry in <filename>/etc/multipath.conf</filename> (see
      <xref linkend="sec-multipath-blacklist"/>) with the WWID you just
      determined (do <emphasis>not</emphasis> apply these settings just yet):
     </para>
<screen>blacklist {
    wwid 3600605b009e7ed501f0e45370aaeb77f
}</screen>
    </step>
    <step>
     <para>
      Rebuild the initramfs:
     </para>
<screen>&prompt.sudo;dracut -f</screen>
    </step>
    <step>
     <para>
      Reboot. Your system should boot with a non-multipath root disk.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-offline-update">
  <title>Updating &slea; on multipath systems</title>

  <para>
   When updating your system online, you can proceed as described in
   <xref linkend="cha-upgrade-online"/>.
  </para>

  <para>
   The offline update of your system is similar to the fresh installation as
   described in <xref linkend="sec-multipath-installing"/>. There is no
   <literal>blacklist</literal>, so if the user selects to enable multipath,
   the root device will appear as a multipath device, even if it is normally
   not one. When <command>dracut</command> builds the initramfs during the update
   procedure, it sees a different storage stack than it would see on the booted
   system. See <xref linkend="sec-multipath-initrd-persistent"/> and
   <xref linkend="sec-multipath-referring"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-multipath-mpiotools">
  <title>Multipath management tools</title>

  <para>
   The multipathing support in &productname; is based on the Device Mapper
   Multipath module of the Linux kernel and the
   <systemitem>multipath-tools</systemitem> user space package.
  </para>

  <para>
   The generic multipathing capability is handled by the Device Mapper
   Multipath (DM-MP) module. For details, refer to
   <xref linkend="sec-multipath-mpiotools-dm"/>.
  </para>

  <para>
   The packages <systemitem class="resource">multipath-tools</systemitem> and
   <systemitem class="resource">kpartx</systemitem> provide tools that handle
   automatic path discovery and grouping. The tools are the following:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>multipathd</command></term>
    <listitem>
     <para>
      The daemon to set up and monitor multipath maps, and a command-line
      client to communicate with the daemon process. See
      <xref linkend="sec-multipath-mpiotools-multipathd"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>multipath</command></term>
    <listitem>
     <para>
      The command-line tool for multipath operations. See
      <xref linkend="sec-multipath-mpiotools-multipath"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>kpartx</command></term>
    <listitem>
     <para>
      The command-line tool for managing &ldquo;partitions&rdquo; on multipath
      devices. See <xref linkend="sec-multipath-configuration-partitioning"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>mpathpersist</command></term>
    <listitem>
     <para>
      The command-line tool for managing SCSI persistent reservations. See
      <xref linkend="sec-multipath-mpiotools-mpathpersist"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-multipath-mpiotools-dm">
   <title>Device mapper multipath module</title>
   <para>
    The Device Mapper Multipath (DM-MP) module
    <filename>dm-multipath.ko</filename> provides the generic multipathing
    capability for Linux. DM-MPIO is the preferred solution for multipathing on
    &productname; for SCSI and DASD devices, and can be used for NVMe devices
    as well.
   </para>
   <note>
    <title>Using DM-MP for NVMe devices</title>
    <para>
     Since &productname; 15, native NVMe multipathing (see
     <xref linkend="sec-multipath-hardware-implementations"/>) has been
     recommended for NVMe and used by default. To disable native NVMe
     multipathing and use device mapper multipath instead (<emphasis>not
     recommended</emphasis>), boot with the kernel parameter
     <literal>nvme-core.multipath=0</literal>.
    </para>
   </note>
   <para>
    The Device Mapper Multipath module handles the following tasks:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Distributing load over multiple paths inside the active path group.
     </para>
    </listitem>
    <listitem>
     <para>
      Noticing I/O errors on path devices, and marking these as failed, so that
      no I/O will be sent to them.
     </para>
    </listitem>
    <listitem>
     <para>
      Switching path groups when all paths in the active path group have
      failed.
     </para>
    </listitem>
    <listitem>
     <para>
      Either failing or queuing I/O on the multipath device if all paths have
      failed, depending on configuration.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The following tasks are handled by the user-space components in the
    <systemitem>multipath-tools</systemitem> package, not by the Device Mapper
    Multipath module:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Discovering devices representing different paths to the same storage
      device and assembling multipath maps from them.
     </para>
    </listitem>
    <listitem>
     <para>
      Collecting path devices with similar properties into path groups.
     </para>
    </listitem>
    <listitem>
     <para>
      Monitoring path devices actively for failure or reinstantiation.
     </para>
    </listitem>
    <listitem>
     <para>
      Monitoring of addition and removal of path devices.
     </para>
    </listitem>
    <listitem>
     <para>
      The Device Mapper Multipath module does not provide an easy-to-use user
      interface for setup and configuration.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    For details about the components from the
    <systemitem>multipath-tools</systemitem> package, refer to
    <xref linkend="sec-multipath-mpiotools-multipathd"/>.
   </para>
   <note>
    <title>Failures that multipath prevents</title>
    <para>
     DM-MPIO protects against failures in the paths to the device, and not
     failures in the device itself, such as media errors. The latter kind of
     errors must be prevented by other means, such as replication.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-multipathd">
   <title>The <command>multipathd</command> daemon</title>
   <para>
    <command>multipathd</command> is the most important part of a modern Linux
    device mapper multipath setup. It is normally started through the systemd
    service <filename>multipathd.service</filename> (see
    <xref linkend="sec-multipath-configuration-start"/>).
   </para>
   <para>
    <command>multipathd</command> serves the following tasks (some of them
    depend on the configuration):
   </para>
   <itemizedlist>
    <listitem>
     <para>
      On startup, detects path devices and sets up multipath maps from detected
      devices.
     </para>
    </listitem>
    <listitem>
     <para>
      Monitors uevents and device mapper events, adding or removing path
      mappings to multipath maps as necessary and initiating failover or
      failback operations.
     </para>
    </listitem>
    <listitem>
     <para>
      Sets up new maps on the fly when new path devices are discovered.
     </para>
    </listitem>
    <listitem>
     <para>
      Checks path devices at regular intervals to detect failure, and tests
      failed paths to reinstate them if they become operational again.
     </para>
    </listitem>
    <listitem>
     <para>
      When all paths fail, <command>multipathd</command> either fails the map,
      or switches the map device to queuing mode for a given time interval.
     </para>
    </listitem>
    <listitem>
     <para>
      Handles path state changes and switches path groups or regroups paths, as
      necessary.
     </para>
    </listitem>
    <listitem>
     <para>
      Tests paths for &ldquo;marginal&rdquo; state, i.e. shaky fabrics
      conditions that cause path state flipping between operational and
      non-operational.
     </para>
    </listitem>
    <listitem>
     <para>
      Handles SCSI persistent reservation keys for path devices if configured.
      See <xref linkend="sec-multipath-mpiotools-mpathpersist"/>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    <command>multipathd</command> also serves as a command-line client to
    process interactive commands by sending them to the running daemon. The
    general syntax to send commands to the daemon is as follows:
   </para>
<screen>&prompt.sudo;multipathd <replaceable>COMMAND</replaceable></screen>
   <para>
    or
   </para>
<screen>&prompt.sudo;multipathd -k'<replaceable>COMMAND</replaceable>'</screen>
   <para>
    There is also an interactive mode that allows sending multiple subsequent
    commands:
   </para>
<screen>&prompt.sudo;multipathd -k</screen>
   <note>
    <title>How multipath and multipathd work together</title>
    <para>
     Many <command>multipathd</command> commands have
     <command>multipath</command> equivalents. For example, <command>multipathd
     show topology</command> does the same thing as <command>multipath
     -ll</command>. The notable difference is that the multipathd command
     inquires the internal state of the running <command>multipathd</command>
     daemon, whereas multipath obtains information directly from the kernel and
     I/O operations.
    </para>
    <para>
     If the multipath daemon is running, we recommend making modifications to
     the system by using the <command>multipathd</command> commands. Otherwise,
     the daemon may notice configuration changes and react to them. In some
     situations, the daemon might even try to undo the applied changes.
     <command>multipath</command> automatically delegates certain possibly
     dangerous commands, like destroying and flushing maps, to
     <command>multipathd</command> if a running daemon is detected.
    </para>
   </note>
   <para>
    The list below describes frequently used <command>multipathd</command>
    commands:
   </para>
   <variablelist>
    <varlistentry>
     <term>show topology</term>
     <listitem>
      <para>
       Shows the current map topology and properties. See
       <xref
        linkend="sec-multipath-best-practice-status"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show paths</term>
     <listitem>
      <para>
       Shows the currently known path devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show paths format "<replaceable>FORMAT STRING</replaceable>"</term>
     <listitem>
      <para>
       Shows the currently known path devices using a format string. Use
       <command>show wildcards</command> to see a list of supported format
       specifiers.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show maps</term>
     <listitem>
      <para>
       Shows the currently configured map devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show maps format <replaceable>FORMAT STRING</replaceable></term>
     <listitem>
      <para>
       Shows the currently configured map devices using a format string. Use
       <command>show wildcards</command> to see a list of supported format
       specifiers.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>show config local</term>
     <listitem>
      <para>
       Shows the current configuration that multipathd is using.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>reconfigure</term>
     <listitem>
      <para>
       Rereads configuration files, rescans devices, and sets up maps again.
       This is basically equivalent to a restart of
       <command>multipathd</command>. A few options cannot be modified without
       a restart. They are mentioned in the man page
       <systemitem>multipath.conf(5)</systemitem>. The
       <option>reconfigure</option> command reloads only map devices that have
       changed in some way. To force the reloading of every map device, use
       <command>reconfigure all</command> (available since &sles;&nbsp;15 SP4;
       on previous versions, <option>reconfigure</option> reloaded every map).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>del map <replaceable>MAP DEVICE NAME</replaceable></term>
     <listitem>
      <para>
       Unconfigure and delete the given map device and its partitions.
       <replaceable>MAP DEVICE NAME</replaceable> can be a device node name
       like <filename>dm-0</filename>, a WWID, or a map name. The command fails
       if the device is in use.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>switchgroup map <replaceable>MAP DEVICE NAME</replaceable> group <replaceable>N</replaceable></term>
     <listitem>
      <para>
       Switch to the path group with the given numeric index (starting at 1).
       This is useful for maps with manual failback (see
       <xref linkend="sec-multipath-policies-default"/>).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Additional commands are available to modify path states, enable or disable
    queuing, and more. See <systemitem>multipathd(8)</systemitem> for details.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-multipath">
   <title>The <command>multipath</command> command</title>
   <para>
    Even though multipath setup is mostly automatic and handled by
    <command>multipathd</command>, <command>multipath</command> is still useful
    for some administration tasks. Several examples of the command usage
    follow:
   </para>
   <variablelist>
    <varlistentry>
     <term>multipath</term>
     <listitem>
      <para>
       Detects path devices and configures all multipath maps that it finds.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -d</term>
     <listitem>
      <para>
       Similar to <command>multipath</command>, but does not set up any maps
       (&ldquo;dry run&rdquo;).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath <replaceable>DEVICENAME</replaceable></term>
     <listitem>
      <para>
       Configures a specific multipath device.
       <replaceable>DEVICENAME</replaceable> can denote a member path device by
       its device node name (<filename>/dev/sdb</filename>) or device number in
       <literal>major:minor</literal> format. Alternatively, it can be the WWID
       or name of a multipath map.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -f <replaceable>DEVICENAME</replaceable></term>
     <listitem>
      <para>
       Unconfigures ("flushes") a multipath map and its partition mappings. The
       command will fail if the map or one of its partitions is in use. See
       above for possible values of <replaceable>DEVICENAME</replaceable>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -F</term>
     <listitem>
      <para>
       Unconfigures ("flushes") all multipath maps and their partition
       mappings. The command will fail for maps in use.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -ll</term>
     <listitem>
      <para>
       Displays the status and topology of all currently configured multipath
       devices. See <xref
        linkend="sec-multipath-best-practice-status"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -ll <replaceable>DEVICENAME</replaceable></term>
     <listitem>
      <para>
       Displays the status of a specified multipath device. See above for
       possible values of <replaceable>DEVICENAME</replaceable>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -t</term>
     <listitem>
      <para>
       Shows the internal hardware table and the active configuration of
       multipath. Refer to <systemitem>multipath.conf(5)</systemitem> for
       details about the configuration parameters.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipath -T</term>
     <listitem>
      <para>
       Has a similar function to the <command>multipath -t</command> command
       but shows only hardware entries matching the hardware detected on the
       host.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The option <option>-v</option> controls the verbosity of the output. The
    provided value overrides the <option>verbosity</option> option in
    <filename>/etc/multipath.conf</filename>. See
    <xref linkend="sec-multipath-conf-misc"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-mpathpersist">
   <title>SCSI persistent reservations and <command>mpathpersist</command></title>
   <para>
    The <command>mpathpersist</command> utility is used to manage SCSI
    persistent reservations on Device Mapper Multipath devices. Persistent
    reservations serve to restrict access to SCSI Logical Units to certain SCSI
    initiators. In multipath configurations, it is important to use the same
    reservation keys for all I_T nexuses (paths) for a given volume; otherwise,
    creating a reservation on one path device would cause I/O errors on other
    paths.
   </para>
   <para>
    Use this utility with the <literal>reservation_key</literal> attribute in
    the <filename>/etc/multipath.conf</filename> file to set persistent
    reservations for SCSI devices. If (and only if) this option is set, the
    <command>multipathd</command> daemon checks persistent reservations for
    newly discovered paths or reinstated paths.
   </para>
   <para>
    You can add the attribute to the <literal>defaults</literal> section or the
    <literal>multipaths</literal> section of
    <filename>multipath.conf</filename>. For example:
   </para>
<screen>multipaths {
    multipath {
        wwid             3600140508dbcf02acb448188d73ec97d
        alias            yellow
        reservation_key  0x123abc
    }
}</screen>
   <para>
    After setting the <literal>reservation_key</literal> parameter for all
    mpath devices applicable for persistent management, reload the
    configuration using <command>multipathd reconfigure</command>.
   </para>
   <note>
    <title>Using &ldquo;<option>reservation_key file</option>&rdquo;</title>
    <para>
     If the special value <literal>reservation_key file</literal> is used in
     the <literal>defaults</literal> section of
     <filename>multipath.conf</filename>, reservation keys can be managed
     dynamically in the file <filename>/etc/multipath/prkeys</filename> using
     <command>mpathpersist</command>.
    </para>
    <para>
     This is the recommended way to handle persistent reservations with
     multipath maps. It is available from &productname; 12 SP4.
    </para>
   </note>
   <para>
    Use the command <command>mpathpersist</command> to query and set persistent
    reservations for multipath maps consisting of SCSI devices. Refer to the
    manual page <systemitem>mpathpersist(8)</systemitem> for details. The
    command-line options are the same as those of the
    <command>sg_persist</command> from the <systemitem>sg3_utils</systemitem>
    package. The <systemitem>sg_persist(8)</systemitem> manual page explains
    the semantics of the options in detail.
   </para>
   <para>
    In the following examples, <replaceable>DEVICE</replaceable> denotes a
    device mapper multipath device like
    <filename>/dev/mapper/mpatha</filename>. The commands below are listed with
    long options for better readability. All options have single-letter
    replacements, like in <command>mpathpersist -oGS 123abc
    <replaceable>DEVICE</replaceable></command>.
   </para>
   <variablelist>
    <varlistentry>
     <term>mpathpersist --in --read-keys <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Read the registered reservation keys for the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --in --read-reservation <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Show existing reservations for the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --register --param-sark=123abc <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Register a reservation key for the device. This will add the reservation
       key for all I_T nexuses (path devices) on the host.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --reserve --param-rk=123abc --prout-type=5 <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Create a reservation of type 5 (&ldquo;write exclusive - registrants
       only&rdquo;) for the device, using the previously registered key.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --release --param-rk=123abc --prout-type=5 <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Release a reservation of type 5 for the device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mpathpersist --out --register-ignore --param-sark=0 <replaceable>DEVICE</replaceable></term>
     <listitem>
      <para>
       Delete a previously existing reservation key from the device.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-config">
  <title>Configuring the system for multipathing</title>

  <para/>

  <sect2 xml:id="sec-multipath-configuration-start">
   <title>Enabling, starting, and stopping multipath services</title>
   <para>
    To enable multipath services to start at boot time, run the following
    command:
   </para>
<screen>&prompt.sudo;systemctl enable multipathd</screen>
   <para>
    To manually start the service in the running system, enter:
   </para>
<screen>&prompt.sudo;systemctl start multipathd</screen>
   <para>
    To restart the service, enter:
   </para>
<screen>&prompt.sudo;systemctl restart multipathd</screen>
   <para>
    In most situations, restarting the service is not necessary. To simply have
    <command>multipathd</command> reload its configuration, run:
   </para>
<screen>&prompt.sudo;systemctl reload multipathd</screen>
   <para>
    To check the status of the service, enter:
   </para>
<screen>&prompt.sudo;systemctl status multipathd</screen>
   <para>
    To stop the multipath services in the current session, run:
   </para>
<screen>
&prompt.sudo;systemctl stop multipathd multipathd.socket
   </screen>
   <para>
    Stopping the service does not remove existing multipath maps. To remove
    unused maps, run:
   </para>
<screen>&prompt.sudo;multipath -F</screen>
   <warning>
    <title>Keep <filename>multipathd.service</filename> enabled</title>
    <para>
     We strongly recommend keeping <filename>multipathd.service</filename>
     always enabled and running on systems with multipath hardware. The service
     does support <command>systemd</command>'s socket activation mechanism, but
     we do not recommend that you rely on that. Multipath maps will not be set up
     during boot if the service is disabled.
    </para>
   </warning>
   <note xml:id="ann-multipath-configuration-disable">
    <title>Disabling multipath</title>
    <para>
     If you need to disable multipath despite the warning above, for example,
     because a third-party multipathing software is going to be deployed,
     proceed as follows. Be sure that the system uses no hard-coded references
     to multipath devices (see <xref linkend="sec-multipath-trouble-ref"/>).
    </para>
    <para>
     To disable multipathing <emphasis>just for a single system
     boot</emphasis>, use the kernel parameter
     <literal>multipath=off</literal>. This affects both the booted system and
     the initramfs, which does not need to be rebuilt in this case.
    </para>
    <para>
     To disable multipathd services <emphasis>permanently</emphasis>, so that
     they will not be started on future system boots, run the following
     commands:
    </para>
<screen>&prompt.sudo;systemctl disable multipathd multipathd.socket
&prompt.sudo;dracut --force --omit multipath
</screen>
    <para>
     (Whenever you disable or enable the multipath services, rebuild the
     <systemitem>initramfs</systemitem>. See
     <xref linkend="sec-multipath-initrd-sync"/>.)
    </para>
    <para>
     If you want to make sure multipath devices do not get set up,
     <emphasis>even when running <command>multipath</command>
     manually</emphasis>, add the following lines at the end of
     <filename>/etc/multipath.conf</filename> before rebuilding the initramfs:
    </para>
<screen>blacklist {
    wwid .*
}</screen>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-configuration-sandevs">
   <title>Preparing SAN devices for multipathing</title>
   <para>
    Before configuring multipath I/O for your SAN devices, prepare the SAN
    devices, as necessary, by doing the following:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Configure and zone the SAN with the vendorâ€™s tools.
     </para>
    </listitem>
    <listitem>
     <para>
      Configure permissions for host LUNs on the storage arrays with the
      vendorâ€™s tools.
     </para>
    </listitem>
    <listitem>
     <para>
      If &productname; ships no driver for the host bus adapter (HBA), install
      a Linux driver from the HBA vendor. See the vendorâ€™s specific
      instructions for more details.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    If multipath devices are detected and
    <filename>multipathd.service</filename> is enabled, multipath maps should
    be created automatically. If this does not happen,
    <xref linkend="sec-multipath-trouble-steps" xrefstyle="SecTitleOnPage"/>
    lists some shell commands that can be used to examine the situation. When
    the LUNs are not seen by the HBA driver, check the zoning setup in the SAN.
    In particular, check whether LUN masking is active and whether the LUNs are
    correctly assigned to the server.
   </para>
   <para>
    If the HBA driver can see LUNs, but no corresponding block devices are
    created, additional kernel parameters may be needed. See <citetitle>TID
    3955167: Troubleshooting SCSI (LUN) Scanning Issues</citetitle> in the
    &suse; Knowledge base at
    <link xlink:href="https://www.suse.com/support/kb/doc.php?id=3955167"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-configuration-partitioning">
   <title>Partitions on multipath devices and <command>kpartx</command></title>
   <para>
    Multipath maps can have partitions like their path devices. Partition table
    scanning and device node creation for partitions is done in user space by
    the <command>kpartx</command> tool. <command>kpartx</command> is
    automatically invoked by udev rules; there is usually no need to run it
    manually. See <xref linkend="sec-multipath-referring"/> for ways to refer
    to multipath partitions.
   </para>
   <note>
    <title>Disabling invocation of <command>kpartx</command></title>
    <para>
     The <literal>skip_kpartx</literal> option in
     <filename>/etc/multipath.conf</filename> can be used to disable invocation
     of <command>kpartx</command> on selected multipath maps. This may be
     useful on virtualization hosts, for example.
    </para>
   </note>
   <para>
    Partition tables and partitions on multipath devices can be manipulated as
    usual, using &yast; or tools like <command>fdisk</command> or
    <command>parted</command>. Changes applied to the partition table will be
    noted by the system when the partitioning tool exits. If this does not work
    (usually because a device is busy), try <command>multipathd
    reconfigure</command>, or reboot the system.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-initrd-sync">
   <title>Keeping the initramfs synchronized</title>
   <important>
    <para>
     Make sure that the initial RAM file system (initramfs) and the booted
     system behave consistently regarding the use of multipathing for all block
     devices. Rebuild the initramfs after applying multipath configuration
     changes.
    </para>
   </important>
   <para>
    If multipathing is enabled in the system, it also needs to be enabled in
    the <filename>initramfs</filename> and vice versa. The only exception to
    this rule is the option
    <xref linkend="vl-multipath-planning-type-noroot-noinitrd"/> in
    <xref linkend="sec-multipath-planning-type-noroot"/>.
   </para>
   <para>
    The multipath configuration must be synchronized between the booted system
    and the initramfs. Therefore, if you change any of the files:
    <filename>/etc/multipath.conf</filename>,
    <filename>/etc/multipath/wwids</filename>,
    <filename>/etc/multipath/bindings</filename>, or other configuration files,
    or udev rules related to device identification, rebuild initramfs using the
    command:
   </para>
<screen>&prompt.sudo;dracut -f</screen>
   <para>
    If the <filename>initramfs</filename> and the system are not synchronized,
    the system will not boot properly, and the start-up procedure may result in
    an emergency shell. See <xref linkend="sec-multipath-trouble"/> for
    instructions on how to avoid or repair such a scenario.
   </para>
   <sect3 xml:id="sec-multipath-initrd-disable">
    <title>Enabling or disabling multipathing in the initramfs</title>
    <para>
     Special care must be taken if the initramfs is rebuilt in non-standard
     situations, for example, from a rescue system or after booting with the
     kernel parameter <literal>multipath=off</literal>.
     <command>dracut</command> will automatically include multipathing support
     in the initramfs if and only if it detects that the root file system is on
     a multipath device while the initramfs is being built. In such cases, it
     is necessary to enable or disable multipathing explicitly.
    </para>
    <para>
     To enable multipath support in the <filename>initramfs</filename>, run the
     command:
    </para>
<screen>&prompt.sudo;dracut --force --add multipath</screen>
    <para>
     To disable multipath support in <filename>initramfs</filename>, run the
     command:
    </para>
<screen>&prompt.sudo;dracut --force --omit multipath</screen>
   </sect3>
   <sect3 xml:id="sec-multipath-initrd-persistent">
    <title>Persistent device names in the initramfs</title>
    <para>
     When <command>dracut</command> generates the initramfs, it must refer to
     disks and partitions to be mounted in a persistent manner, to make sure
     the system will boot correctly. When <command>dracut</command> detects
     multipath devices, it will use the DM-MP device names such as
    </para>
<screen>/dev/mapper/3600a098000aad73f00000a3f5a275dc8-part1</screen>
    <para>
     for this purpose by default. This is good if the system
     <emphasis>always</emphasis> runs in multipath mode. But if the system is
     started without multipathing, as described in
     <xref linkend="sec-multipath-initrd-disable"/>, booting with such an
     initramfs will fail, because the <filename>/dev/mapper</filename> devices
     will not exist. See <xref linkend="sec-multipath-referring"/> for another
     possible problem scenario, and some background information.
    </para>
    <para>
     To prevent this from happening, change <command>dracut</command>'s
     persistent device naming policy by using the
     <option>--persistent-policy</option> option. We recommend setting the
     <literal>by-uuid</literal> use policy:
    </para>
<screen>&prompt.sudo;dracut --force --omit multipath --persistent-policy=by-uuid</screen>
    <para>
     See also <xref linkend="pr-multipath-disable-root"/> and
     <xref linkend="sec-multipath-trouble-ref"/>.
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-conf-file">
  <title>Multipath configuration</title>

  <para>
   The built-in <systemitem>multipath-tools</systemitem> defaults work well for
   most setups. If customizations are needed, a configuration file needs to be
   created. The main configuration file is
   <filename>/etc/multipath.conf</filename>. In addition, files in
   <filename>/etc/multipath/conf.d/</filename> are taken into account. See
   <xref linkend="sec-multipath-conf-file-precedence"/> for additional
   information.
  </para>

  <important>
   <title>Vendor recommendations and built-in hardware defaults</title>
   <para>
    Some storage vendors publish recommended values for multipath options in
    their documentation. These values often represent what the vendor has
    tested in their environment and found most suitable for the storage product.
    See the disclaimer in <xref linkend="sec-multipath-hardware-autodetect"/>.
   </para>
   <para>
    <systemitem>multipath-tools</systemitem> has built-in defaults for many
    storage arrays that are derived from the published vendor recommendations.
    Run <command>multipath -T</command> to see the current settings for your
    devices and compare them to vendor recommendations.
   </para>
  </important>

  <sect2 xml:id="sec-multipath-conf-file-create">
   <title>Creating <filename>/etc/multipath.conf</filename></title>
   <para>
    It is recommended that you create a minimal
    <filename>/etc/multipath.conf</filename> that just contains those settings
    you want to change. In many cases, you do not need to create
    <filename>/etc/multipath.conf</filename> at all.
   </para>
   <para>
    If you prefer working with a configuration template that contains all
    possible configuration directives, run:
   </para>
<screen>multipath -T >/etc/multipath.conf</screen>
   <para>
    See also
    <xref linkend="sec-multipath-best-practice-config"
     xrefstyle="SecTitleOnPage"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-conf-file-syntax">
   <title><filename>multipath.conf</filename> syntax</title>
   <para>
    The <filename>/etc/multipath.conf</filename> file uses a hierarchy of
    sections, subsections and option/value pairs.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      White space separates tokens. Consecutive white space characters are
      collapsed into a single space, unless quoted (see below).
     </para>
    </listitem>
    <listitem>
     <para>
      The hash (<literal>#</literal>) and exclamation mark
      (<literal>!</literal>) characters cause the rest of the line to be
      discarded as a comment.
     </para>
    </listitem>
    <listitem>
     <para>
      Sections and subsections are started with a section name and an opening
      brace (<literal>{</literal>) on the same line, and end with a closing
      brace (<literal>}</literal>) on a line on its own.
     </para>
    </listitem>
    <listitem>
     <para>
      Options and values are written on one line. Line continuations are
      unsupported.
     </para>
    </listitem>
    <listitem>
     <para>
      Options and section names must be keywords. The allowed keywords are
      documented in <systemitem>multipath.conf(5)</systemitem>.
     </para>
    </listitem>
    <listitem>
     <para>
      Values may be enclosed in double quotes (<literal>"</literal>). They must
      be enclosed in quotes if they contain white space or comment characters.
      A double quote character inside a value is represented by a pair of
      double quotes (<literal>""</literal>).
     </para>
    </listitem>
    <listitem>
     <para>
      The values of some options are POSIX regular expressions (see
      <systemitem>regex(7)</systemitem>). They are case sensitive and not
      anchored, so &ldquo;<literal>bar</literal>&rdquo; matches
      &ldquo;<literal>rhabarber</literal>&rdquo;, but not &ldquo;Barbie&rdquo;.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The following example illustrates the syntax:
   </para>
<screen>
section {
    subsection {
        option1 value
        option2      "complex value!"
        option3    "value with ""quoted"" word"
    } ! subsection end
} # section end
    </screen>
   <sect3 xml:id="sec-multipath-conf-file-precedence">
    <title>Additional configuration files and precedence rules</title>
    <para>
     After <filename>/etc/multipath.conf</filename>, the tools read files
     matching the pattern <filename>/etc/multipath.conf.d/*.conf</filename>.
     The additional files follow the same syntax rules as
     <filename>/etc/multipath.conf</filename>. Sections and options can occur
     multiple times. If <emphasis>the same option in the same
     section</emphasis> is set in multiple files, or on multiple lines in the
     same file, the last value takes precedence. Separate precedence rules
     apply between <filename>multipath.conf</filename> sections. See below.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-multipath-conf-file-sections">
   <title><filename>multipath.conf</filename> sections</title>
   <para>
    The <filename>/etc/multipath.conf</filename> file is organized into the
    following sections. Some options can occur in more than one section. See
    <systemitem>multipath.conf(5)</systemitem> for details.
   </para>
   <variablelist>
    <varlistentry>
     <term>defaults</term>
     <listitem>
      <para>
       General default settings.
      </para>
      <important>
       <title>Overriding built-in device properties</title>
       <para>
        Built-in hardware-specific device properties take precedence over the
        settings in the <literal>defaults</literal> section. Changes must
        therefore be made in the <literal>devices</literal> section or in the
        <literal>overrides</literal> section.
       </para>
      </important>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>blacklist</term>
     <listitem>
      <para>
       Lists devices to ignore. See
       <xref linkend="sec-multipath-blacklist" xrefstyle="HeadingOnPage"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>blacklist_exceptions</term>
     <listitem>
      <para>
       Lists devices to be multipathed even though they are matched by the
       blacklist. See
       <xref linkend="sec-multipath-blacklist" xrefstyle="HeadingOnPage"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>devices</term>
     <listitem>
      <para>
       Settings specific to the storage controller. This section is a
       collection of <literal>device</literal> subsections. Values in this
       section override values for the same options in the
       <filename>defaults</filename> section, and the built-in settings of
       <systemitem>multipath-tools</systemitem>.
      </para>
      <para>
       <literal>device</literal> entries in the <literal>devices</literal>
       section are matched against the vendor and product of a device using
       regular expressions. These entries will be &ldquo;merged&rdquo;, setting
       all options from matching sections for the device. If the same option is
       set in multiple matching <literal>device</literal> sections, the last
       device entry takes precedence, even if it is less &ldquo;specific&rdquo;
       than preceding entries. This applies also if the matching entries appear
       in different configuration files (see
       <xref linkend="sec-multipath-conf-file-precedence"/>). In the following
       example, a device <literal>SOMECORP STORAGE</literal> will use
       <literal>fast_io_fail_tmo 15</literal>.
      </para>
<screen>
devices {
    device {
        vendor SOMECORP
        product STOR
        fast_io_fail_tmo 10
    }
    device {
        vendor SOMECORP
        product .*
        fast_io_fail_tmo 15
    }
}</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>multipaths</term>
     <listitem>
      <para>
       Settings for individual multipath devices. This section is a list of
       <literal>multipath</literal> subsections. Values override the
       <literal>defaults</literal> and <literal>devices</literal> sections.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>overrides</term>
     <listitem>
      <para>
       Settings that override values from all other sections.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-multipath-conf-file-apply">
   <title>Applying <filename>multipath.conf</filename> modifications</title>
   <para>
    To apply the configuration changes, run:
   </para>
<screen>&prompt.sudo;multipathd reconfigure</screen>
   <para>
    Do not forget to synchronize with the configuration in the initramfs. See
    <xref linkend="sec-multipath-initrd-sync"/>.
   </para>
   <warning>
    <title>Do not apply settings using <command>multipath</command></title>
    <para>
     Do not apply new settings with the <command>multipath</command> command
     while <command>multipathd</command> is running. This may result in an
     inconsistent and possibly broken setup.
    </para>
   </warning>
   <note xml:id="sec-multipath-conf-file-verify">
    <title>Verifying a modified setup</title>
    <para>
     It is possible to test modified settings first before they are applied, by
     running:
    </para>
<screen>&prompt.sudo;multipath -d -v2</screen>
    <para>
     This command shows new maps to be created with the proposed topology, but
     not whether maps will be removed/flushed. To obtain more information, run
     with increased verbosity:
    </para>
<screen>&prompt.sudo;multipath -d -v3 2>&amp;1 | less</screen>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-policies-default">
  <title>Configuring policies for failover, queuing, and failback</title>

  <para>
   The goal of multipath I/O is to provide connectivity fault tolerance between
   the storage system and the server. The desired default behavior depends on
   whether the server is a stand-alone server or a node in a high-availability
   cluster.
  </para>

  <para>
   This section discusses the most important
   <systemitem>multipath-tools</systemitem> configuration parameters for
   achieving fault tolerance.
  </para>

  <variablelist>
   <varlistentry>
    <term>polling_interval</term>
    <listitem>
     <para>
      The time interval (in seconds) between health checks for path devices.
      The default is 5 seconds. Failed devices are checked at this time
      interval. For healthy devices, the time interval may be increased up to
      <literal>max_polling_interval</literal> seconds.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>detect_checker</term>
    <listitem>
     <para>
      If this is set to <literal>yes</literal> (default, recommended),
      <command>multipathd</command> automatically detects the best path
      checking algorithm.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>path_checker</term>
    <listitem>
     <para>
      The algorithm used to check path state. If you need to enable the
      checker, disable <literal>detect_checker</literal> as follows:
     </para>
<screen>
defaults {
          detect_checker no
}</screen>
     <para>
      The following list contains only the most important algorithms. See
      <systemitem>multipath.conf(5)</systemitem> for the full list.
     </para>
     <variablelist>
      <varlistentry>
       <term>tur</term>
       <listitem>
        <para>
         Send TEST UNIT READY command. This is the default for SCSI devices
         with ALUA support.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>directio</term>
       <listitem>
        <para>
         Read a device sector using asynchronous I/O (aio).
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>rdac</term>
       <listitem>
        <para>
         Device-specific checker for NetAPP E-Series and similar arrays.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>none</term>
       <listitem>
        <para>
         No path checking is performed.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>checker_timeout</term>
    <listitem>
     <para>
      If a device does not respond to a path checker command in the given time,
      it is considered failed. The default is the kernel's SCSI command timeout
      for the device (usually 30 seconds).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>fast_io_fail_tmo</term>
    <listitem>
     <para>
      If an error on the SCSI transport layer is detected (for example on a
      Fibre Channel remote port), the kernel transport layer waits for this
      amount of time (in seconds) for the transport to recover. After that, the
      path device fails with &ldquo;transport offline&rdquo; state. This is
      very useful for multipath, because it allows a quick path failover for a
      frequently occurring class of errors. The value must match typical time
      scale for reconfiguration in the fabric. The default value of 5 seconds
      works well for Fibre Channel. Other transports, like iSCSI, may require
      longer timeouts.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>dev_loss_tmo</term>
    <listitem>
     <para>
      If a SCSI transport endpoint (for example a Fibre Channel remote port) is
      not reachable any more, the kernel waits for this amount of time (in
      seconds) for the port to reappear until it removes the SCSI device node
      for good. Device node removal is a complex operation which is prone to
      race conditions or deadlocks and should best be avoided. We therefore
      recommend setting this to a high value. The special value
      <literal>infinity</literal> is supported. The default is 10 minutes. To
      avoid deadlock situations, <command>multipathd</command> ensures that I/O
      queuing (see <literal>no_path_retry</literal>) is stopped before
      <literal>dev_loss_tmo</literal> expires.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>no_path_retry</term>
    <listitem>
     <para>
      Determine what happens if all paths of a given multipath map have failed.
      The possible values are:
     </para>
     <variablelist>
      <varlistentry>
       <term>fail</term>
       <listitem>
        <para>
         Fail I/O on the multipath map. This will cause I/O errors in upper
         layers such as mounted file systems. The affected file systems, and
         possibly the entire host, will enter degraded mode.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>queue</term>
       <listitem>
        <para>
         I/O on the multipath map is queued in the device mapper layer and sent
         to the device when path devices become available again. This is the
         safest option to avoid losing data, but it can have negative effects
         if the path devices do not get reinstated for a long time. Processes
         reading from the device will hang in uninterruptible sleep
         (<literal>D</literal>) state. Queued data occupies memory, which
         becomes unavailable for processes. Eventually, memory will be
         exhausted.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><replaceable>N</replaceable></term>
       <listitem>
        <para>
         <replaceable>N</replaceable> is a positive integer. Keep the map
         device in queuing mode for <replaceable>N</replaceable> polling
         intervals. When the time elapses, <command>multipathd</command> fails
         the map device. If <literal>polling_interval</literal> is 5 seconds
         and <literal>no_path_retry</literal> is 6,
         <command>multipathd</command> will queue I/O for approximately 6 * 5s
         = 30s before failing I/O on the map device.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>flush_on_last_del</term>
    <listitem>
     <para>
      If set to <literal>yes</literal> and all path devices of a map are
      deleted (as opposed to just failed), fail all I/O in the map before
      removing it. The default is <literal>no</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>deferred_remove</term>
    <listitem>
     <para>
      If set to <literal>yes</literal> and all path devices of a map are
      deleted, wait for holders to close the file descriptors for the map
      device before flushing and removing it. If paths reappear before the last
      holder closed the map, the deferred remove operation will be cancelled.
      The default is <literal>no</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="vle-failback">
    <term>failback</term>
    <listitem>
     <para>
      If a failed path device in an inactive path group recovers,
      <command>multipathd</command> reevaluates the path group priorities of
      all path groups (see <xref linkend="sec-multipath-grouping"/>). After the
      reevaluation, the highest-priority path group may be one of the currently
      inactive path groups. This parameter determines what happens in this
      situation.
     </para>
     <important>
      <title>Observe vendor recommendations</title>
      <para>
       The optimal failback policy depends on the property of the storage
       device. It is therefore strongly encouraged to verify
       <option>failback</option> settings with the storage vendor.
      </para>
     </important>
     <variablelist>
      <varlistentry>
       <term>manual</term>
       <listitem>
        <para>
         Nothing happens unless the administrator runs a <command>multipathd
         switchgroup</command> (see
         <xref linkend="sec-multipath-mpiotools-multipathd"/>).
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>immediate</term>
       <listitem>
        <para>
         The highest-priority path group is activated immediately. This is
         often beneficial for performance, especially on stand-alone servers,
         but it should not be used for arrays on which the change of the path
         group is a costly operation.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>followover</term>
       <listitem>
        <para>
         Like <literal>immediate</literal>, but only perform failback when the
         path that has just become active is the only healthy path in its path
         group. This is useful for cluster configurations: It keeps a node from
         automatically failing back when another node requested a failover
         before.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><replaceable>N</replaceable></term>
       <listitem>
        <para>
         <replaceable>N</replaceable> is a positive integer. Wait for
         <replaceable>N</replaceable> polling intervals before activating the
         highest priority path group. If the priorities change again during
         this time, the wait period starts anew.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>eh_deadline</term>
    <listitem>
     <para>
      Set an approximate upper limit for the time (in seconds) spent in SCSI
      error handling if devices are unresponsive and SCSI commands time out
      without error response. When the deadline has elapsed, the kernel will
      perform a full HBA reset.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   After modifying the <filename>/etc/multipath.conf</filename> file, apply
   your settings as described in
   <xref linkend="sec-multipath-conf-file-apply"/>.
  </para>

  <sect2  xml:id="sec-multipath-policies-standalone">
   <title>Queuing policy on stand-alone servers</title>
   <para>
    When you configure multipath I/O for a stand-alone server, a
    <literal>no_path_retry</literal> setting with value
    <literal>queue</literal> protects the server operating system from
    receiving I/O errors as long as possible. It queues messages until a
    multipath failover occurs. If &ldquo;infinite&rdquo; queuing is not desired
    (see above), select a numeric value that is deemed high enough for the
    storage paths to recover under ordinary circumstances (see above).
   </para>
  </sect2>

  <sect2  xml:id="sec-multipath-policies-cluster">
   <title>Queuing policy on clustered servers</title>
   <para>
    When you configure multipath I/O for a node in a high-availability cluster,
    you want multipath to report the I/O failure to trigger the resource
    failover instead of waiting for a multipath failover to be resolved. In
    cluster environments, you must modify the <literal>no_path_retry
    </literal>setting so that the cluster node receives an I/O error in
    relation to the cluster verification process (recommended to be 50% of the
    heartbeat tolerance) if the connection is lost to the storage system. In
    addition, you want the multipath <literal>failback</literal> to be set to
    <literal>manual</literal> or <literal>followover</literal> to avoid a
    ping-pong of resources because of path failures.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-grouping">
  <title>Configuring path grouping and priorities</title>

  <para>
   Path devices in multipath maps are grouped in <emphasis>path
   groups</emphasis>, also called <emphasis>priority groups</emphasis>. Only
   one path group receives I/O at any given time. <command>multipathd</command>
   assigns <emphasis>priorities</emphasis> to path groups. Out of the path
   groups with active paths, the group with the highest priority is activated
   according to the configured failback policy for the map (see
   <xref linkend="sec-multipath-policies-default" xrefstyle="SecTitleOnPage"/>).
   The priority of a path group is the average of the priorities of the active
   path devices in the path group. The priority of a path device is an integer
   value calculated from the device properties (see the description of the
   <literal>prio</literal> option below).
  </para>

  <para>
   This section describes the <filename>multipath.conf</filename> configuration
   parameters relevant for priority determination and path grouping.
  </para>

  <variablelist>
   <varlistentry>
    <term>path_grouping_policy</term>
    <listitem>
     <para>
      Specifies the method used to combine paths into groups. Only the most
      important policies are listed here; see
      <systemitem>multipath.conf(5)</systemitem> for other less frequently used
      values.
     </para>
     <variablelist>
      <varlistentry>
       <term>failover</term>
       <listitem>
        <para>
         One path per path group. This setting is useful for traditional
         &ldquo;active/passive&rdquo; storage arrays.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>multibus</term>
       <listitem>
        <para>
         All paths in one path group. This is useful for traditional
         &ldquo;active/active&rdquo; arrays.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>group_by_prio</term>
       <listitem>
        <para>
         Path devices with the same path priority are grouped together. This
         option is useful for modern arrays that support asymmetric access
         states, like ALUA. Combined with the <literal>alua</literal> or
         <literal>sysfs</literal> priority algorithms, the priority groups set
         up by <command>multipathd</command> will match the primary target port
         groups that the storage array reports through ALUA-related SCSI
         commands.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Using the same policy names, the path grouping policy for a multipath map
      can be changed temporarily with the command:
     </para>
<screen>&prompt.sudo;multipath -p <replaceable>POLICY_NAME</replaceable> <replaceable>MAP_NAME</replaceable></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>marginal_pathgroups</term>
    <listitem>
     <para>
      If set to <literal>on</literal> or <literal>fpin</literal>,
      &ldquo;marginal&rdquo; path devices are sorted into a separate path
      group. This is independent of the path grouping algorithm in use. See
      <xref linkend="sec-multipath-marginal" xrefstyle="SecTitleOnPage"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>detect_prio</term>
    <listitem>
     <para>
      If this is set to <literal>yes</literal> (default, recommended),
      <command>multipathd</command> automatically detects the best algorithm to
      set the priority for a storage device and ignores the
      <literal>prio</literal> setting. In practice, this means using the
      <literal>sysfs</literal> prio algorithm if ALUA support is detected.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>prio</term>
    <listitem>
     <para>
      Determines the method to derive priorities for path devices. If you
      override this, disable <literal>detect_prio</literal> as follows:
     </para>
<screen>
defaults {
          detect_prio no
}
        </screen>
     <para>
      The following list contains only the most important methods. Several
      other methods are available, mainly to support legacy hardware. See
      <systemitem>multipath.conf(5)</systemitem> for the full list.
     </para>
     <variablelist>
      <varlistentry>
       <term>alua</term>
       <listitem>
        <para>
         Uses SCSI-3 ALUA access states to derive path priority values. The
         optional <literal>exclusive_pref_bit</literal> argument can be used to
         change the behavior for devices that have the ALUA &ldquo;preferred
         primary target port group&rdquo; (PREF) bit set:
        </para>
<screen>
        prio alua
        prio_args exclusive_pref_bit
              </screen>
        <para>
         If this option is set, &ldquo;preferred&rdquo; paths get a priority
         bonus over other active/optimized paths. Otherwise, all
         active/optimized paths are assigned the same priority.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>sysfs</term>
       <listitem>
        <para>
         Like <literal>alua</literal>, but instead of sending SCSI commands to
         the device, it obtains the access states from
         <systemitem>sysfs</systemitem>. This causes less I/O load than
         <literal>alua</literal>, but is not suitable for all storage arrays
         with ALUA support.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>const</term>
       <listitem>
        <para>
         Uses a constant value for all paths.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>path_latency</term>
       <listitem>
        <para>
         Measures I/O latency (time from I/O submission to completion) on path
         devices, and assigns higher priority to devices with lower latency.
         See <systemitem>multipath.conf(5)</systemitem> for details. This
         algorithm is still experimental.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>weightedpath</term>
       <listitem>
        <para>
         Assigns a priority to paths based on their name, serial number,
         Host:Bus:Target:Lun ID (HBTL), or Fibre Channel WWN. The priority
         value does not change over time. The method requires a
         <literal>prio_args</literal> argument, see
         <systemitem>multipath.conf(5)</systemitem> for details. For example:
        </para>
<screen>
        prio weightedpath
        prio_args "hbtl 2:.*:.*:.* 10 hbtl 3:.*:.*:.* 20 hbtl .* 1"
              </screen>
        <para>
         This assigns devices on SCSI host 3 a higher priority than devices on
         SCSI host 2, and all others a lower priority.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>prio_args</term>
    <listitem>
     <para>
      Some <literal>prio</literal> algorithms require extra arguments. These
      are specified in this option, with syntax depending on the algorithm. See
      above.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>hardware_handler</term>
    <listitem>
     <para>
      The name of a kernel module that the kernel uses to activate path devices
      when switching path groups. This option has no effect with recent kernels
      because hardware handlers are autodetected. See
      <xref
          linkend="sec-multipath-hardware-handlers" xrefstyle="SecTitleOnPage"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>path_selector</term>
    <listitem>
     <para>
      The name of a kernel module that is used for load balancing between the
      paths of the active path group. The available choices depend on the
      kernel configuration. For historical reasons, the name must always be
      enclosed in quotes and followed by a &ldquo;0&rdquo; in
      <filename>multipath.conf</filename>, like this:
     </para>
<screen>    path_selector "queue-length 0"</screen>
     <variablelist>
      <varlistentry>
       <term>service-time</term>
       <listitem>
        <para>
         Estimates the time pending I/O will need to complete on all paths, and
         selects the path with the lowest value. This is the default.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>historical-service-time</term>
       <listitem>
        <para>
         Estimates future service time based on the historical service time
         (about which it keeps a moving average) and the number of outstanding
         requests. Estimates the time pending I/O will need to complete on all
         paths, and selects the path with the lowest value.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>queue-length</term>
       <listitem>
        <para>
         Selects the path with the lowest number of currently pending I/O
         requests.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>round-robin</term>
       <listitem>
        <para>
         Switches paths in round-robin fashion. The number of requests
         submitted to a path before switching to the next one can be adjusted
         with the options <literal>rr_min_io_rq</literal> and
         <literal>rr_weight</literal>.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>io-affinity</term>
       <listitem>
        <para>
         This path selector currently does not work with
         <systemitem>multipath-tools</systemitem>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   After modifying the <filename>/etc/multipath.conf</filename> file, apply
   your settings as described in
   <xref
    linkend="sec-multipath-conf-file-apply" xrefstyle="SecTitleOnPage"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-multipath-select-devices">
  <title>Selecting devices for multipathing</title>

  <para>
   On systems with multipath devices, you might want to avoid setting up
   multipath maps on some devices (typically local disks).
   <systemitem>multipath-tools</systemitem> offers various means for
   configuring which devices should be considered multipath path devices.
  </para>

  <note>
   <title>multipath on local disks</title>
   <para>
    In general, there is nothing wrong with setting up &ldquo;degraded&rdquo;
    multipath maps with just a single device on top of local disks. It works
    fine and requires no extra configuration. However, some administrators find
    this confusing or generally oppose this sort of unnecessary multipathing.
    Also, the multipath layer causes a slight performance overhead. See also
    <xref linkend="sec-multipath-planning-type-noroot"/>.
   </para>
  </note>

  <para>
   After modifying the <filename>/etc/multipath.conf</filename> file, apply
   your settings as described in
   <xref linkend="sec-multipath-conf-file-apply"/>.
  </para>

  <sect2 xml:id="sec-multipath-blacklist">
   <title>The <literal>blacklist</literal> section in <filename>multipath.conf</filename></title>
   <para>
    The <filename>/etc/multipath.conf</filename> file can contain a
    <literal>blacklist</literal> section that lists all devices that should be
    ignored by <command>multipathd</command> and <command>multipath</command>.
    The following example illustrates possible ways of excluding devices:
   </para>
   <informalexample>
<screen>blacklist {
    wwid 3600605b009e7ed501f0e45370aaeb77f <co xml:id="mp-co-bl-wwid"/>
    device {  <co xml:id="mp-co-bl-device"/>
        vendor ATA
        product .*
    }
    protocol scsi:sas <co xml:id="mp-co-bl-prot"/>
    property SCSI_IDENT_LUN_T10 <co xml:id="mp-co-bl-prop"/>
    devnode "!^dasd[a-z]*" <co xml:id="mp-co-bl-devnode"/>
}</screen>
    <calloutlist>
     <callout arearefs="mp-co-bl-wwid">
      <para>
       <literal>wwid</literal> entries are ideal for excluding specific
       devices, for example, the root disk.
      </para>
     </callout>
     <callout arearefs="mp-co-bl-device">
      <para>
       This <literal>device</literal> section excludes all ATA devices (the
       regular expression for <literal>product</literal> matches anything).
      </para>
     </callout>
     <callout arearefs="mp-co-bl-prot">
      <para>
       Excluding by <literal>protocol</literal> allows excluding devices using
       certain bus types, here SAS. Other common protocol values are
       <literal>scsi:fcp</literal>, <literal>scsi:iscsi</literal>, and
       <literal>ccw</literal>. See <systemitem>multipath.conf(5)</systemitem>
       for more. To see the protocols that paths in your systems are using,
       run:
      </para>
<screen>&prompt.sudo;multipathd show paths format "%d %P"</screen>
      <para>
       This form is supported since &productnameshort;&nbsp;15 SP1 and
       &productnameshort;&nbsp;12 SP5.
      </para>
     </callout>
     <callout arearefs="mp-co-bl-prop">
      <para>
       This <literal>property</literal> entry excludes devices that have a
       certain udev property (no matter what the value of the property is).
      </para>
     </callout>
     <callout arearefs="mp-co-bl-devnode">
      <para>
       Excluding devices by <literal>devnode</literal> is only recommended for
       classes of devices using regular expressions, like in the example, which
       excludes everything but DASD devices. Using this for individual devices
       like <filename>sda</filename> is discouraged because device node names
       are not persistent.
      </para>
      <para>
       The example illustrates special syntax that is only supported in the
       <literal>blacklist</literal> and <literal>blacklist_exceptions</literal>
       sections: Prefixing the regular expression with an exclamation mark
       (<literal>!</literal>) negates the match. Note that the exclamation mark
       must appear within double quotes.
      </para>
     </callout>
    </calloutlist>
   </informalexample>
   <para>
    By default, <systemitem>multipath-tools</systemitem> ignores all devices
    except SCSI, DASD or NVMe. Technically, the built-in devnode exclude list
    is this negated regular expression:
   </para>
<screen>    devnode !^(sd[a-z]|dasd[a-z]|nvme[0-9])</screen>
  </sect2>

  <sect2 xml:id="sec-multipath-blacklist-exceptions">
   <title>The <literal>blacklist exceptions</literal> section in <filename>multipath.conf</filename></title>
   <para>
    Sometimes, it is desired to configure only very specific devices for
    multipathing. In this case, devices are excluded by default, and exceptions
    are defined for devices that should be part of a multipath map. The
    <literal>blacklist_exceptions</literal> section exists for this purpose. It
    is typically used like in the following example, which excludes everything
    except storage with product string &ldquo;NETAPP&rdquo;:
   </para>
<screen>blacklist {
     wwid .*
}
blacklist_exceptions {
     device {
         vendor ^NETAPP$
         product .*
     }
}</screen>
   <para>
    The <literal>blacklist_exceptions</literal> section supports all methods
    described for the <literal>blacklist</literal> section above.
   </para>
   <para>
    The <literal>property</literal> directive in
    <literal>blacklist_exceptions</literal> is mandatory because every device
    <emphasis>must</emphasis> have at least one of the &ldquo;allowed&rdquo;
    udev properties to be considered a path device for multipath (the value of
    the property does not matter). The built-in default for
    <literal>property</literal> is
   </para>
<screen>    property (SCSI_IDENT_|ID_WWN)</screen>
   <para>
    Only devices that have at least one udev property matching this regular
    expression will be included.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-device-select-other">
   <title>Other options affecting device selection</title>
   <para>
    Besides the <literal>blacklist</literal> options, there are several other
    settings in <filename>/etc/multipath.conf</filename> that affect which
    devices are considered multipath path devices.
   </para>
   <variablelist>
    <varlistentry>
     <term>find_multipaths</term>
     <listitem>
      <para>
       This option controls the behavior of <command>multipath</command> and
       <command>multipathd</command> when a device that is not excluded is
       first encountered. The possible values are:
      </para>
      <variablelist>
       <varlistentry>
        <term>greedy</term>
        <listitem>
         <para>
          Every device non-excluded by <literal>blacklist</literal> in
          <filename>/etc/multipath.conf</filename> is included. This is the
          default on &sle;. If this setting is active, the only way to prevent
          devices from being added to multipath maps is setting them as
          excluded.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>strict</term>
        <listitem>
         <para>
          Every device is excluded, even if it is not present in the
          <literal>blacklist</literal> section of
          <filename>/etc/multipath.conf</filename>, unless its WWID is listed
          in the file <filename>/etc/multipath/wwids</filename>. It requires
          manual maintenance of the WWIDs file (see note below).
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>yes</term>
        <listitem>
         <para>
          Devices are included if they meet the conditions for
          <literal>strict</literal>, or if at least one other device with the
          same WWID exists in the system.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>smart</term>
        <listitem>
         <para>
          If a new WWID is first encountered, it is temporarily marked as
          multipath path device. <command>multipathd</command> waits for some
          time for additional paths with the same WWID to appear. If this
          happens, the multipath map is set up as usual. Otherwise, when the
          timeout expires, the single device is released to the system as
          a non-multipath device. The timeout is configurable with the option
          <option>find_multipaths_timeout</option>.
         </para>
         <para>
          This option depends on <command>systemd</command> features which are
          only available on &sles;&nbsp;15.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <note>
       <title>Maintaining <filename>/etc/multipath/wwids</filename></title>
       <para>
        <systemitem>multipath-tools</systemitem> keeps a record of previously
        setup multipath maps in the file
        <filename>/etc/multipath/wwids</filename> (the &ldquo;WWIDs
        file&rdquo;). Devices with WWIDs listed in this file are considered
        multipath path devices. The file is important for multipath device
        selection for all values of <option>find_multipaths</option> except
        <literal>greedy</literal>.
       </para>
       <para>
        If <option>find_multipaths</option> is set to <literal>yes</literal> or
        <literal>smart</literal>, <command>multipathd</command> adds WWIDs to
        <filename>/etc/multipath/wwids</filename> after setting up new maps, so
        that these maps will be detected more quickly in the future.
       </para>
       <para>
        The WWIDs file can be manually modified:
       </para>
       <informalexample>
<screen>
&prompt.sudo;multipath -a 3600a098000aad1e3000064e45f2c2355 <co xml:id="mp-co-wwid-a"/>
&prompt.sudo;multipath -w /dev/sdf <co xml:id="mp-co-wwid-w"/>
       </screen>
        <calloutlist>
         <callout arearefs="mp-co-wwid-a">
          <para>
           This command adds the given WWID to
           <filename>/etc/multipath/wwids</filename>.
          </para>
         </callout>
         <callout arearefs="mp-co-wwid-w">
          <para>
           This command removes the WWID of the given device.
          </para>
         </callout>
        </calloutlist>
       </informalexample>
       <para>
        In the <literal>strict</literal> mode, this is the only way to add new
        multipath devices. After modifying the WWIDs file, run
        <command>multipathd reconfigure</command> to apply the changes. We
        recommend rebuilding the initramfs after applying changes to the WWIDs
        file (see <xref linkend="sec-multipath-initrd-sync"/>).
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>allow_usb_devices</term>
     <listitem>
      <para>
       If this option is set to <literal>yes</literal>, USB storage devices are
       considered for multipathing. The default is <literal>no</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-names">
  <title>Multipath device names and WWIDs</title>

  <para>
   <command>multipathd</command> and <command>multipath</command> internally
   use WWIDs to identify devices. WWIDs are also used as map names by default.
   For convenience, <systemitem>multipath-tools</systemitem> supports assigning
   simpler, more easily memorizable names to multipath devices.
  </para>

  <sect2 xml:id="sec-multipath-conf-file-wwid">
   <title>WWIDs and device Identification</title>
   <para>
    It is crucial for multipath operation to reliably detect devices that
    represent paths to the same storage volume.
    <systemitem>multipath-tools</systemitem> uses the device's World Wide
    Identification (WWID) for this purpose (sometimes also referred to as
    Universally Unique ID (UUID) or Unique ID (UID&mdash;do not confuse with
    &ldquo;User ID&rdquo;)). The WWID of a map device is always the same as the
    WWID of its path devices.
   </para>
   <para>
    By default, WWIDs of path devices are inferred from udev properties of the
    devices, which are determined in udev rules, either by reading device
    attributes from the sysfs file system or by using specific I/O commands. To
    see the udev properties of a device, run:
   </para>
<screen>&prompt.user;udevadm info /dev/<replaceable>sdx</replaceable></screen>
   <para>
    The udev properties used by <systemitem>multipath-tools</systemitem> to
    derive WWIDs are:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>ID_SERIAL</literal> for SCSI devices (do not confuse this with
      the device's &ldquo;serial number&rdquo;)
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ID_UID</literal> for DASD devices
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ID_WWN</literal> for NVMe devices
     </para>
    </listitem>
   </itemizedlist>
   <warning>
    <title>Avoid changing WWIDs</title>
    <para>
     It is impossible to change the WWID of a multipath map which is in use. If
     the WWID of mapped path devices changes because of a configuration change,
     the map needs to be destroyed, and a new map needs to be set up with the
     new WWID. This cannot be done while the old map is in use. In extreme
     cases, data corruption may result from WWID changes. It must therefore be
     <emphasis>strictly avoided</emphasis> to apply configuration changes that
     would cause map WWIDs to change.
    </para>
    <para>
     It is allowed to enable the <literal>uid_attrs</literal> option in
     <filename>/etc/multipath.conf</filename>, see
     <xref linkend="sec-multipath-conf-misc" xrefstyle="SecTitleOnPage"/>.
    </para>
   </warning>
  </sect2>

  <sect2 xml:id="sec-multipath-alias">
   <title>Setting aliases for multipath maps</title>
   <para>
    Arbitrary map names can be set in the <literal>multipaths</literal> section
    of <filename>/etc/multipath.conf</filename> as follows:
   </para>
<screen>multipaths {
    multipath {
        wwid 3600a098000aad1e3000064e45f2c2355
        alias postgres
    }
}</screen>
   <para>
    Aliases are expressive, but they need to be assigned to each map
    individually, which may be cumbersome on large systems.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-user-friendly-names">
   <title>Using autogenerated user-friendly names</title>
   <para>
    <systemitem>multipath-tools</systemitem> also supports autogenerated
    aliases, so-called &ldquo;user-friendly names&rdquo;. The naming scheme of
    the aliases follows the pattern: mpath<replaceable>INDEX</replaceable>,
    where <replaceable>INDEX</replaceable> is a lower case letter (starting
    with <literal>a</literal>). So the first autogenerated alias is
    <literal>mpatha</literal>, the next one is <literal>mpathb</literal>,
    <literal>mpathc</literal> to <literal>mpathz</literal>. After that follows
    <literal>mpathaa</literal>, <literal>mpathab</literal>, and so on.
   </para>
   <para>
    Map names are only useful if they are persistent.
    <systemitem>multipath-tools</systemitem> keeps track of the assigned names
    in the file <filename>/etc/multipath/bindings</filename> (the
    &ldquo;bindings file&rdquo;). When a new map is created, the WWID is first
    looked up in this file. If it is not found, the lowest available
    user-friendly name is assigned to it.
   </para>
   <para>
    Explicit aliases as discussed in <xref linkend="sec-multipath-alias"/> take
    precedence over user-friendly names.
   </para>
   <para>
    The following options in <filename>/etc/multipath.conf</filename> affect
    user-friendly names:
   </para>
   <variablelist>
    <varlistentry>
     <term>user_friendly_names</term>
     <listitem>
      <para>
       If set to <literal>yes</literal>, user-friendly names are assigned and
       used. Otherwise, the WWID is used as a map name unless an alias is
       configured.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>alias_prefix</term>
     <listitem>
      <para>
       The prefix used to create user-friendly names, <literal>mpath</literal>
       by default.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <warning>
    <title>Map names in high-availability clusters</title>
    <para>
     For cluster operations, device names must be identical across all nodes in
     the cluster. The <systemitem>multipath-tools</systemitem> configuration
     must be kept synchronized between nodes. If
     <literal>user_friendly_names</literal> is used,
     <command>multipathd</command> may modify the
     <filename>/etc/multipath/bindings</filename> file at runtime. Such
     modifications must be replicated dynamically to all nodes. The same
     applies to <filename>/etc/multipath/wwids</filename> (see
     <xref linkend="sec-multipath-device-select-other" xrefstyle="SecTitleOnPage"/>).
    </para>
   </warning>
   <note>
    <title>Changing map names at runtime</title>
    <para>
     It is possible to change map names at runtime. Use any of the methods
     described in this section and run <command>multipathd
     reconfigure</command>, and the map names will change without disrupting
     the system operation.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-referring">
   <title>Referring to multipath maps</title>
   <para>
    Technically, multipath maps are Device Mapper devices, which have generic
    names of the form <filename>/dev/dm-<replaceable>n</replaceable></filename>
    with an integer number <replaceable>n</replaceable>. These names are not
    persistent. They should <emphasis>never</emphasis> be used to refer to the
    multipath maps. <command>udev</command> creates various symbolic links to
    these devices, which are more suitable as persistent references. These
    links differ with respect to their invariance against certain configuration
    changes. The following typical example shows various symlinks all pointing
    to the same device.
   </para>
   <informalexample>
<screen>/dev/disk/by-id/dm-name-mpathb<co xml:id="mp-ref-dm-name"/> -> ../../dm-1
/dev/disk/by-id/dm-uuid-mpath-3600a098000aad73f00000a3f5a275dc8<co xml:id="mp-ref-dm-uuid"/> -> ../../dm-1
/dev/disk/by-id/scsi-3600a098000aad73f00000a3f5a275dc8<co xml:id="mp-ref-scsi"/> -> ../../dm-1
/dev/disk/by-id/wwn-0x600a098000aad73f00000a3f5a275dc8<co xml:id="mp-ref-wwn"/> -> ../../dm-1
/dev/mapper/mpathb<co xml:id="mp-ref-mapper"/> -> ../dm-1</screen>
    <calloutlist>
     <callout arearefs="mp-ref-dm-name mp-ref-mapper">
      <para>
       These two links use the map name to refer to the map. Thus, the links
       will change if the map name changes, for example, if you enable or
       disable user-friendly names.
      </para>
     </callout>
     <callout arearefs="mp-ref-dm-uuid">
      <para>
       This link uses the device mapper UUID, which is the WWID used by
       <systemitem>multipath-tools</systemitem> prefixed by the string
       <literal>dm-uuid-mpath-</literal>. It is independent of the map name.
      </para>
      <para>
       The device mapper UUID is the preferred form to ensure that
       <emphasis>only multipath devices</emphasis> are referenced. For example,
       the following line in <filename>/etc/lvm/lvm.conf</filename> rejects all
       devices except multipath maps:
      </para>
<screen>filter = [ "a|/dev/disk/by-id/dm-uuid-mpath-.*|", "r|.*|" ]</screen>
     </callout>
     <callout arearefs="mp-ref-scsi mp-ref-wwn">
      <para>
       These are links that would normally point to path devices. The multipath
       device took them over, because it has a higher udev link priority (see
       <systemitem>udev(7)</systemitem>). When the map is destroyed or
       multipathing is turned off, they will still exist and point to one of
       the path devices instead. This provides a means to reference a device by
       its WWID, whether or not multipathing is active.
      </para>
     </callout>
    </calloutlist>
   </informalexample>
   <para>
    For <emphasis role="bold">partitions</emphasis> on multipath maps created
    by the <command>kpartx</command> tool, there are similar symbolic links,
    derived from the parent device name or WWID and the partition number:
   </para>
   <informalexample>
<screen>/dev/disk/by-id/dm-name-mpatha-part2 -> ../../dm-5
/dev/disk/by-id/dm-uuid-part2-mpath-3600a098000aad1e300000b4b5a275d45 -> ../../dm-5
/dev/disk/by-id/scsi-3600a098000aad1e300000b4b5a275d45-part2 -> ../../dm-5
/dev/disk/by-id/wwn-0x600a098000aad1e300000b4b5a275d45-part2 -> ../../dm-5
/dev/disk/by-partuuid/1c2f70e0-fb91-49f5-8260-38eacaf7992b -> ../../dm-5
/dev/disk/by-uuid/f67c49e9-3cf2-4bb7-8991-63568cb840a4 -> ../../dm-5
/dev/mapper/mpatha-part2 -> ../dm-5
</screen>
   </informalexample>
   <para>
    Note that partitions often have <filename>by-uuid</filename> links, too,
    referring not to the device itself but to the file system it contains.
    These links are often preferable. They are invariant even if the file
    system is copied to a different device or partition.
   </para>
   <warning>
    <title>Map names in the initramfs</title>
    <para>
     When <command>dracut</command> builds an initramfs, it creates hard-coded
     references to devices in the initramfs, using
     <filename>/dev/mapper/$MAP_NAME</filename> references by default. These
     hard-coded references will not be found during boot if the map names used
     in the initramfs do not match the names used during building the
     initramfs, causing boot failure. Normally this will not happen, because
     <command>dracut</command> will add all multipath configuration files to
     the initramfs. But problems can occur if the initramfs is built from a
     different environment, for example, in the rescue system or during an
     offline update. To prevent this boot failure, change
     <command>dracut</command>'s <literal>persistent_policy</literal> setting,
     as explained in <xref linkend="sec-multipath-initrd-persistent"/>.
    </para>
   </warning>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-conf-misc">
  <title>Miscellaneous options</title>

  <para>
   This section lists some useful <filename>multipath.conf</filename> options
   that were not mentioned so far. See
   <systemitem>multipath.conf(5)</systemitem> for a full list.
  </para>

  <variablelist>
   <varlistentry>
    <term>verbosity</term>
    <listitem>
     <para>
      Controls the log verbosity of both <command>multipath</command> and
      <command>multipathd</command>. The command-line option
      <option>-v</option> overrides this setting for both commands. The value
      can be between 0 (only fatal errors) and 4 (verbose logging). The default
      is 2.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>uid_attrs</term>
    <listitem>
     <para>
      This option enables an optimization for processing udev events, so-called
      &ldquo;uevent merging&rdquo;. It is useful in environments in which
      hundreds of path devices may fail or reappear simultaneously. In order to
      make sure that path WWIDs do not change (see
      <xref linkend="sec-multipath-conf-file-wwid"
           xrefstyle="SecTitleOnPage"/>),
      the value should be set exactly like this:
     </para>
<screen>defaults {
     uid_attrs "sd:ID_SERIAL dasd:ID_UID nvme:ID_WWN"
}</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>skip_kpartx</term>
    <listitem>
     <para>
      If set to <literal>yes</literal> for a multipath device (default is
      <literal>no</literal>), do not create partition devices on top of the
      given device (see
      <xref
           linkend="sec-multipath-configuration-partitioning"
           xrefstyle="SecTitleOnPage"/>).
      Useful for multipath devices used by virtual machines. Previous
      &productname; releases achieved the same effect with the parameter
      &ldquo;<literal>features 1 no_partitions</literal>&rdquo;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>max_sectors_kb</term>
    <listitem>
     <para>
      Limits the maximum amount of data sent in a single I/O request for all
      path devices of the multipath map.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ghost_delay</term>
    <listitem>
     <para>
      On active/passive arrays, it can happen that passive paths (in
      &ldquo;ghost&rdquo; state) are probed before active paths. If the map was
      activated immediately and I/O was sent, this would cause a possibly
      costly path activation. This parameter specifies the time (in seconds) to
      wait for active paths of the map to appear before activating the map. The
      default is <literal>no</literal> (no ghost delay).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>recheck_wwid</term>
    <listitem>
     <para>
      If set to <literal>yes</literal> (default is <literal>no</literal>),
      double-checks the WWID of restored paths after failure, and removes them
      if the WWID has changed. This is a safety measure against data
      corruption.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>enable_foreign</term>
    <listitem>
     <para>
      <systemitem>multipath-tools</systemitem> provides a plugin API for other
      multipathing backends than Device Mapper multipath. The API supports
      monitoring and displaying information about the multipath topology using
      standard commands like <command>multipath -ll</command>. Modifying the
      topology is unsupported.
     </para>
     <para>
      The value of <literal>enable_foreign</literal> is a regular expression to
      match against foreign library names. The default value is
      &ldquo;<literal>NONE</literal>&rdquo;.
     </para>
     <para>
      &productname; ships the <literal>nvme</literal> plugin, which adds
      support for the native NVMe multipathing (see
      <xref linkend="sec-multipath-hardware-implementations"
           xrefstyle="SecTitleOnPage"/>).
      To enable the <literal>nvme</literal> plugin, set
     </para>
<screen>defaults {
    enable_foreign nvme
}</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-multipath-marginal">
   <title>Handling unreliable (&ldquo;marginal&rdquo;) path devices</title>
   <para>
    Unstable conditions in the fabric can cause path devices to behave
    erratically. They exhibit frequent I/O errors, recover, and fail again.
    Such path devices are also denoted &ldquo;marginal&rdquo; or
    &ldquo;shaky&rdquo; paths. This section summarizes the options that
    <systemitem>multipath-tools</systemitem> provides to deal with this
    problem.
   </para>
   <note>
    <title>multipathd's marginal path checking algorithm</title>
    <para>
     If a path device exhibits a second failure (good â†’ bad transition) before
     <literal>marginal_path_double_failed_time</literal> elapses after the
     first failure, <command>multipathd</command> starts monitoring the path at
     a rate of 10 requests per second, for a monitoring period of
     <literal>marginal_path_err_sample_time</literal>. If the error rate during
     the monitoring period exceeds
     <literal>marginal_path_err_rate_threshold</literal>, the path is
     classified as marginal. After
     <literal>marginal_path_err_recheck_gap_time</literal>, the path
     transitions to normal state again.
    </para>
    <para>
     This algorithm is used if all four numeric
     <literal>marginal_path_</literal> parameters are set to a positive value,
     and <literal>marginal_pathgroups</literal> is not set to
     <literal>fpin</literal>. It is available since &sles;&nbsp;15&nbsp;SP1 and
     &sles;&nbsp;12&nbsp;SP5.
    </para>
   </note>
   <variablelist>
    <varlistentry>
     <term>marginal_path_double_failed_time</term>
     <listitem>
      <para>
       Maximum time (in seconds) between two path failures that triggers path
       monitoring.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>marginal_path_err_sample_time</term>
     <listitem>
      <para>
       Length (in seconds) of the path monitoring interval.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>marginal_path_err_rate_threshold</term>
     <listitem>
      <para>
       Minimum error rate (per thousand I/Os).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>marginal_path_err_recheck_gap_time</term>
     <listitem>
      <para>
       Time (in seconds) to keep the path in marginal state.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>marginal_pathgroups</term>
     <listitem>
      <para>
       This option is available since &productnameshort;&nbsp;15SP3. Possible
       values are:
      </para>
      <variablelist>
       <varlistentry>
        <term>off</term>
        <listitem>
         <para>
          Marginal state is determined by <command>multipathd</command> (see
          above). Marginal paths are not reinstated as long as they remain in
          marginal state. This is the default, and the behavior in &sles;
          releases before SP3, where the <literal>marginal_pathgroups</literal>
          option was unavailable.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>on</term>
        <listitem>
         <para>
          Similar to the <literal>off</literal> option, but instead of keeping
          them in the failed state, marginal paths are moved to a separate path
          group, which will be assigned a lower priority than all other path
          groups (see
          <xref linkend="sec-multipath-grouping"
                   xrefstyle="SecTitleOnPage"/>).
          Paths in this path group will only be used for I/O if all paths in
          other path groups have failed.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>fpin</term>
        <listitem>
         <para>
          This setting is available from &productnameshort;&nbsp;15SP4.
          Marginal path state is derived from FPIN events (see below). Marginal
          paths are moved into a separate path group, as described
          for<literal>off</literal>. This setting requires no further host-side
          configuration. It is the recommended way to handle marginal paths on
          Fibre Channel fabrics that support FPIN.
         </para>
         <note>
          <title>FPIN-based marginal path detection</title>
          <para>
           <command>multipathd</command> listens for Fibre Channel Performance
           Impact Notifications (FPIN). If an FPIN-LI (Link Integrity) event is
           received for a path device, the path will enter marginal state. This
           state will last until a RSCN or Link up event is received on the
           Fibre channel adapter the device is connected to.
          </para>
         </note>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    A simpler algorithm using the parameters
    <literal>san_path_err_threshold</literal>,
    <literal>san_path_err_forget_rate</literal>, and
    <literal>san_path_err_recovery time</literal> is also available and
    recommended for &sles;&nbsp;15 (GA). See the &ldquo;Shaky paths
    detection&rdquo; section in <systemitem>multipath.conf(5)</systemitem>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-best-practice">
  <title>Best practice</title>

  <sect2 xml:id="sec-multipath-best-practice-config">
   <title>Best practices for configuration</title>
   <para>
    The large number of configuration directives is daunting at first. Usually,
    you can get good results with an empty configuration, unless you are in a
    clustering environment.
   </para>
   <para>
    Here are some general recommendations for stand-alone servers. They are
    <emphasis>not mandatory</emphasis>. See the documentation of the respective
    parameters in the previous sections for background information.
   </para>
<screen>
defaults {
    deferred_remove      yes
    find_multipaths      smart
    enable_foreign       nvme
    marginal_pathgroups  fpin    # 15.4 only, if supported by fabric
}
devices {
    # A catch-all device entry.
    device {
        vendor                .*
        product               .*
        dev_loss_tmo          infinity
        no_path_retry         60            # 5 minutes
        path_grouping_policy  group_by_prio
        path_selector         "historical-service-time 0"
        reservation_key       file          # if using SCSI persistent reservations
    }
    # Follow up with specific device entries below, they will take precedence.
}</screen>
   <para>
    After modifying the <filename>/etc/multipath.conf</filename> file, apply
    your settings as described in
    <xref linkend="sec-multipath-conf-file-apply"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-status">
   <title>Interpreting multipath I/O status</title>
   <para>
    For a quick overview of the multipath subsystem, use <command>multipath
    -ll</command> or <command>multipathd show topology</command>. The output of
    these commands has the same format. The former command reads the kernel
    state, while the latter prints the status of the multipath daemon. Normally
    both states are equal. Here is an example of the output:
   </para>
   <informalexample>
<screen>&prompt.sudo;multipathd show topology
mpatha<co xml:id="mp-co-top-name"/> (3600a098000aad1e300000b4b5a275d45<co xml:id="mp-co-top-wwid"/>) dm-0<co xml:id="mp-co-top-dev"/> NETAPP,INF-01-00<co xml:id="mp-co-top-prod"/>
size=64G features='3 queue_if_no_path pg_init_retries 50'<co xml:id="mp-co-top-feat"/> hwhandler='1 alua'<co xml:id="mp-co-top-hwh"/> wp=rw<co xml:id="mp-co-top-wp"/>
|-+- <co xml:id="mp-co-top-pg"/>policy='historical-service-time 2'<co xml:id="mp-co-top-ps"/> prio=50<co xml:id="mp-co-top-prio"/> status=active<co xml:id="mp-co-top-pgst"/>
| |-<co xml:id="mp-co-top-pp"/> 3:0:0:1<co xml:id="mp-co-top-hbtl"/> sdb 8:16<co xml:id="mp-co-top-sd"/> active<co xml:id="mp-co-top-dmst"/> ready<co xml:id="mp-co-top-st"/> running<co xml:id="mp-co-top-devst"/>
| `- 4:0:0:1 sdf 8:80  active ready running
`-+- policy='historical-service-time 2' prio=10 status=enabled
  `- 4:0:1:1 sdj 8:144 active ready running</screen>
    <calloutlist>
     <callout arearefs="mp-co-top-name">
      <para>
       The map name.
      </para>
     </callout>
     <callout arearefs="mp-co-top-wwid">
      <para>
       The map WWID (if different from the map name).
      </para>
     </callout>
     <callout arearefs="mp-co-top-dev">
      <para>
       The device node name of the map device.
      </para>
     </callout>
     <callout arearefs="mp-co-top-prod">
      <para>
       The vendor and product name.
      </para>
     </callout>
     <callout arearefs="mp-co-top-pg">
      <para>
       A path group. The indented lines below the path group list the path
       devices that belong to it.
      </para>
     </callout>
     <callout arearefs="mp-co-top-ps">
      <para>
       The path selector algorithm used by the path group. The "2" can be
       ignored.
      </para>
     </callout>
     <callout arearefs="mp-co-top-prio">
      <para>
       The priority of the path group.
      </para>
     </callout>
     <callout arearefs="mp-co-top-pgst">
      <para>
       The status of the path group (<literal>active</literal>,
       <literal>enabled</literal> or <literal>disabled</literal>). The active
       path group is the one that I/O is currently sent to.
      </para>
     </callout>
     <callout arearefs="mp-co-top-pp">
      <para>
       A path device.
      </para>
     </callout>
     <callout arearefs="mp-co-top-hbtl">
      <para>
       The bus ID of the device (here, a SCSI Host:Bus:Target:Lun ID).
      </para>
     </callout>
     <callout arearefs="mp-co-top-sd">
      <para>
       The device node name and major/minor number of the path device.
      </para>
     </callout>
     <callout arearefs="mp-co-top-dmst">
      <para>
       The kernel device mapper state of the path (<literal>active</literal> or
       <literal>failed</literal>).
      </para>
     </callout>
     <callout arearefs="mp-co-top-st">
      <para>
       The multipath path device state (see below).
      </para>
     </callout>
     <callout arearefs="mp-co-top-devst">
      <para>
       The state of the path device in the kernel. This is a device-type
       specific value. For SCSI, it is either <literal>running</literal> or
       <literal>offline</literal>.
      </para>
     </callout>
    </calloutlist>
   </informalexample>
   <para>
    The multipath path device states are:
   </para>
   <informaltable>
    <tgroup cols="2">
     <colspec colwidth="1*"/>
     <colspec colwidth="1*"/>
     <tbody>
      <row>
       <entry>
        <para>
         <literal>ready</literal>
        </para>
       </entry>
       <entry>
        <para>
         The path is healthy and up
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>ghost</literal>
        </para>
       </entry>
       <entry>
        <para>
         A passive path in an active/passive array
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>faulty</literal>
        </para>
       </entry>
       <entry>
        <para>
         The path is down or unreachable
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>i/o timeout</literal>
        </para>
       </entry>
       <entry>
        <para>
         A checker command timed out
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>i/o pending</literal>
        </para>
       </entry>
       <entry>
        <para>
         Waiting for the completion of a path checker command
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>delayed</literal>
        </para>
       </entry>
       <entry>
        <para>
         Path reinstantiation is delayed to avoid "flapping"
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>shaky</literal>
        </para>
       </entry>
       <entry>
        <para>
         An unreliable path (emc path checker only)
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </sect2>

  <sect2 xml:id="sec-multipath-lvm">
   <title>Using LVM2 on multipath devices</title>
   <para>
    LVM2 has built-in support for detecting multipath devices. It is activated
    by default in <filename>/etc/lvm/lvm.conf</filename>:
   </para>
<screen>    multipath_component_detection=1</screen>
   <para>
    This works reliably only if LVM2 is also configured to obtain information
    about device properties from udev:
   </para>
<screen>    external_device_info_source="udev"</screen>
   <para>
    This is the default in &sle;&nbsp;15 SP4, but not in earlier releases. It
    is also possible (although normally not necessary) to create a filter
    expression for LVM2 to ignore all devices except multipath devices. See
    <xref linkend="sec-multipath-referring" xrefstyle="SecTitleOnPage"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-io-stalled">
   <title>Resolving stalled I/O</title>
   <para>
    If all paths fail concurrently and I/O is queued, applications may stall
    for a long time. To resolve this, you can use the following procedure:
   </para>
   <procedure>
    <step>
     <para>
      Enter the following command at a terminal prompt:
     </para>
<screen>&prompt.sudo;multipathd disablequeueing map <replaceable>MAPNAME</replaceable></screen>
     <para>
      Replace <literal><replaceable>MAPNAME</replaceable></literal> with the
      correct WWID or mapped alias name for the device.
     </para>
     <para>
      This command immediately causes all queued I/O to fail and propagates the
      error to the calling application. File systems will observe I/O errors
      and switch to read-only mode.
     </para>
    </step>
    <step>
     <para>
      Reactivate queuing by entering the following command:
     </para>
<screen>&prompt.sudo;multipathd restorequeueing <replaceable>MAPNAME</replaceable></screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-mpiotools-mdadm">
   <title>MD RAID on multipath devices</title>
   <para>
    MD RAID arrays on top of multipathing are set up automatically by the
    system's udev rules. No special configuration in
    <filename>/etc/mdadm.conf</filename> is necessary.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-best-practice-scandev">
   <title>Scanning for new devices without rebooting</title>
   <para>
    If your system has already been configured for multipathing and you need to
    add storage to the SAN, you can use the
    <command>rescan-scsi-bus.sh</command> script to scan for the new devices.
    The general syntax for the command follows:
   </para>
<screen>&prompt.sudo;rescan-scsi-bus.sh [-a] [-r] --hosts=2-3,5</screen>
   <para>
    Where the options have the following meaning:
   </para>
   <variablelist>
    <varlistentry>
     <term>-a</term>
     <listitem>
      <para>
       the option ensures that all SCSI targets are scanned, otherwise only
       already existing targets will be scanned for new LUNs.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>-r</term>
     <listitem>
      <para>
       the option enables the removal of devices which have been removed on the
       storage side.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>--hosts</term>
     <listitem>
      <para>
       the option specifies the list of host bus adapters to scan (the default
       is to scan all).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Run <command>rescan-scsi-bus.sh --help</command> for help on additional
    options.
   </para>
   <para>
    If <command>multipathd</command> is running and new SAN devices are
    discovered, they should be automatically set up as multipath maps according
    to the configuration described in
    <xref linkend="sec-multipath-select-devices"/>.
   </para>
   <warning>
    <title>Dell/EMC PowerPath environments</title>
    <para>
     In EMC PowerPath environments, do not use the
     <filename>rescan-scsi-bus.sh</filename> utility provided with the
     operating system or the HBA vendor scripts for scanning the SCSI buses. To
     avoid potential file system corruption, EMC requires that you follow the
     procedure provided in the vendor documentation for EMC PowerPath for
     Linux.
    </para>
   </warning>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-multipath-trouble">
  <title>Troubleshooting MPIO</title>

  <para>
   If a system runs into emergency mode on a system with multipath, printing
   messages about missing devices, the reason is almost always one of these:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Inconsistent configuration of multipath device selection
    </para>
   </listitem>
   <listitem>
    <para>
     Use of non-existing device references
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec-multipath-trouble-select">
   <title>Understanding device selection issues</title>
   <para>
    A block device can only either be part of a multipath map or be used
    directly (mounted as file system, used as swap, LVM physical volume, or
    otherwise). If a device is already mounted, an attempt by multipathd to
    make it part of a multipath map will fail with a &ldquo;Device or resource
    busy&rdquo; error. Vice-versa, the same error results if
    <command>systemd</command> attempts to mount a device that has already
    been made part of a multipath map.
   </para>
   <para>
    Storage device activation during boot is handled by a complex interaction
    between <command>systemd</command>, <systemitem>udev</systemitem>,
    <command>multipathd</command> and some other tools.
    <systemitem>udev</systemitem> rules play a central role. They set device
    properties that indicate to other subsystems how a device should be used.
    The multipath-related udev rules set the following properties for devices
    that are selected for multipathing:
   </para>
<screen>SYSTEMD_READY=0
DM_MULTIPATH_DEVICE_PATH=1</screen>
   <para>
    Partition devices inherit these properties from their parents.
   </para>
   <para>
    If these properties are not set correctly, if some tool does not respect
    them, or if they get set too late, a race condition between
    <command>multipathd</command> and some other subsystem may result. Only one
    of the contenders can win the race; the other one will see a &ldquo;Device
    or resource busy&rdquo; error.
   </para>
   <para>
    One problem in this context is that the tools of the LVM2 suite do not
    evaluate udev properties by default. They rely on their own logic for
    determining whether a device is a multipath component, which sometimes does
    not match the logic of the rest of the system. A workaround for this is
    described in <xref linkend="sec-multipath-lvm"/>.
   </para>
   <note>
    <title>Example of boot deadlock</title>
    <para>
     Consider a system with multipathing where the root device is not
     multipathed, and no devices are excluded from multipath (see
     <xref linkend="vl-multipath-planning-type-noroot-noinitrd"/> in
     <xref linkend="sec-multipath-planning-type-noroot"/>). The root file
     system is mounted in the initramfs. <command>systemd</command> switches to
     the root file system and <command>multipathd</command> starts up. Because
     the device is already mounted, <command>multipathd</command> fails to set
     up the multipath map for it. Because the root device is not configured in
     <literal>blacklist</literal>, it is considered a multipath device, and
     <literal>SYSTEMD_READY=0</literal> is set for it.
    </para>
    <para>
     Later in the boot process, the system attempts to mount additional file
     systems like <filename>/var</filename> and <filename>/home</filename>.
     Usually, these file systems will be on the same device as the root file
     system, by default as BTRFS subvolumes of the root file system itself. But
     systemd cannot mount them because of <literal>SYSTEMD_READY=0</literal>.
     <emphasis>We are in a deadlock</emphasis>: The dm-multipath device cannot
     be created, and the underlying device is blocked for systemd. The
     additional file systems cannot be mounted, resulting in boot failure.
    </para>
    <para>
     <emphasis role="bold">A solution to this problem already
     exists.</emphasis> <command>multipathd</command> detects this situation
     and releases the device to <command>systemd</command> which can then
     proceed mounting the file system. However, it is important to understand
     the general problem, which can still occur in more subtle ways.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-ref">
   <title>Understanding device referencing issues</title>
   <para>
    An example of a device referencing issue has been given in
    <xref linkend="sec-multipath-initrd-persistent"/>. Typically, there are
    multiple symbolic links pointing to a device node (see
    <xref linkend="sec-multipath-referring"/>). But these links do not always
    exist; <command>udev</command> creates them according to the current udev
    rules. For example, if multipathing is off, symbolic links under
    <filename>/dev/mapper/</filename> for multipath devices will be missing.
    Thus, any reference to a <filename>/dev/mapper/</filename> device will
    fail.
   </para>
   <para>
    Such references can appear in various places, notably in
    <filename>/etc/fstab</filename> and <filename>/etc/crypttab</filename>, in
    the initramfs, or even on the kernel command line.
   </para>
   <para>
    The safest way to circumvent this problem is to avoid using the kind of
    device references that are not persistent between boots or depend on system
    configuration. We generally recommend referring to file systems (and
    similar entities like swap space) by properties of the file system itself
    (like UUID or label) rather than the containing device. If such references
    are not available and device references are required, for example, in
    <filename>/etc/crypttab</filename>, the options should be evaluated
    carefully. For example, in <xref linkend="sec-multipath-referring"/>, the
    best option might be the <filename>/dev/disk/by-id/wwn-</filename> link
    because it would also work with <literal>multipath=off</literal>.
   </para>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-steps">
   <title>Troubleshooting steps in emergency mode</title>
   <para>
    As there are many error situations that differ in subtle ways, it is
    impossible to provide a step-by-step recovery guide. But with the
    background knowledge from the previous subsections, you should be able to
    figure out the problem if a system runs into emergency mode because of
    multipathing issues. Before you begin debugging, make sure you have checked
    the following questions:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Is the multipath service enabled?
     </para>
    </listitem>
    <listitem>
     <para>
      Is the multipath dracut module included in the initramfs?
     </para>
    </listitem>
    <listitem>
     <para>
      Is my root device configured as a multipath device? If not, is the root
      device properly excluded from multipath as described in
      <xref linkend="sec-multipath-blacklist"/>, or are you relying on the
      absence of the multipath module in the initramfs (see
      <xref linkend="sec-multipath-planning-type-noroot"/>)?
     </para>
    </listitem>
    <listitem>
     <para>
      Does the system enter emergency mode before or after switching to the
      real root file system?
     </para>
    </listitem>
   </itemizedlist>
   <para>
    If you are unsure with respect to the last question, here is a sample
    dracut emergency prompt as it would be printed before switching root:
   </para>
<screen>Generating "/run/initramfs/rdsosreport.txt"
Entering emergency mode. Exit the shell to continue.
Type "journalctl" to view system logs.

You might want to save "/run/initramfs/rdsosreport.txt" to a USB stick or /boot
after mounting them and attach it to a bug report.

Give root password for maintenance
(or press Control-D to continue):</screen>
   <para>
    The mention of <filename>rdsosreport.txt</filename> is a clear indication
    that the system is still running from the initramfs. If you are still
    uncertain, log in and check for the existence of the file
    <filename>/etc/initrd-release</filename>. This file exists only in an
    initramfs environment.
   </para>
   <para>
    If emergency mode is entered after switching root, the emergency prompt
    looks similar, but <filename>rdsosreport.txt</filename> is not mentioned:
   </para>
<screen>Timed out waiting for device dev-disk-by\x2duuid-c4a...cfef77d.device.
[DEPEND] Dependency failed for Local File Systems.
[DEPEND] Dependency failed for Postfix Mail Transport Agent.
Welcome to emergency shell
Give root password for maintenance
(or press Control-D to continue):</screen>
   <procedure>
    <title>Steps for analyzing the situation in emergency mode</title>
    <step>
     <para>
      Try to figure out what failed by examining failed systemd units and the
      journal.
     </para>
<screen>&prompt.root;systemctl --failed
&prompt.root;journalctl -b -o short-monotonic</screen>
     <para>
      When looking at the journal, determine the <emphasis>first</emphasis>
      failed unit. When you have found the first failure, examine the messages
      before and around that point in time very carefully. Are there any
      warnings or other suspicious messages?
     </para>
     <para>
      Watch out for the root switch ("<literal>Switching root.</literal>") and
      for messages about SCSI devices, device mapper, multipath and LVM2. Look
      for <command>systemd</command> messages about devices and file systems
      ("<literal>Found device</literal>â€¦", "<literal>Mounting</literal>â€¦",
      "<literal>Mounted</literal>â€¦").
     </para>
    </step>
    <step>
     <para>
      Examine the existing devices, both low-level devices and device mapper
      devices (note that some of the commands below may not be available in the
      initramfs):
     </para>
<screen>&prompt.root;cat /proc/partitions
&prompt.root;ls -l /sys/class/block
&prompt.root;ls -l /dev/disk/by-id/* /dev/mapper/*
&prompt.root;dmsetup ls --tree
&prompt.root;lsblk
&prompt.root;lsscsi
</screen>
     <para>
      From the output of the commands above, you should get an idea whether the
      low-level devices were successfully probed, and whether any multipath
      maps and multipath partitions were set up.
     </para>
    </step>
    <step>
     <para>
      If the device mapper multipath setup is not as you expect, examine the
      udev properties, in particular, <literal>SYSTEMD_READY</literal> (see
      above)
     </para>
<screen>&prompt.root;udevadm info -e</screen>
    </step>
    <step>
     <para>
      If the previous step showed unexpected udev properties, something may
      have gone wrong during udev rule processing. Check other properties, in
      particular, those used for device identification (see
      <xref linkend="sec-multipath-conf-file-wwid"
          xrefstyle="SecTitleOnPage"/>).
      If the udev properties are correct, check the journal for
      <command>multipathd</command> messages again. Look for "<literal>Device
      or resource busy</literal>" messages.
     </para>
    </step>
    <step>
     <para>
      If the system failed to mount or otherwise activate a device, it is often
      helpful to try activating this device manually:
     </para>
<screen>&prompt.root;mount /var
&prompt.root;swapon -a
&prompt.root;vgchange -a y</screen>
     <para>
      Mostly, the manual activation will succeed and allow to proceed with
      system boot (usually by simply logging out from the emergency shell) and
      examine the situation further in the booted system.
     </para>
     <para>
      If manual activation fails, you will probably see error messages that
      provide clues about what is going wrong. You can also try the commands
      again with increased verbosity.
     </para>
    </step>
    <step>
     <para>
      At this point, you should have some idea what went wrong (if not, contact
      &suse; support and be prepared to answer most of the questions raised
      above).
     </para>
     <para>
      You should be able to correct the situation with a few shell commands,
      exit the emergency shell, and boot successfully. You will still need to
      adjust your configuration to make sure the same problem will not occur
      again in the future.
     </para>
     <para>
      Otherwise, you will need to boot the rescue system, set up the devices
      manually to <command>chroot</command> into the real root file system, and
      attempt to fix the problem based on the insight you got in the previous
      steps. Be aware that in this situation, the storage stack for the root
      file system may differ from normal. Depending on your setup, you may have
      force addition or omission of dracut modules when building a new
      initramfs. See also
      <xref linkend="sec-multipath-initrd-disable"
          xrefstyle="SecTitleOnPage"/>.
     </para>
    </step>
    <step>
     <para>
      If the problem occurs frequently or even on every boot attempt, try
      booting with increased verbosity in order to get more information about
      the failure. The following kernel parameters, or a combination of them,
      are often helpful:
     </para>
     <informalexample>
<screen>udev.log-priority=debug<co xml:id="mp-co-kparm-udev"/>
systemd.log_level=debug<co xml:id="mp-co-kparm-sl"/>
scsi_mod.scsi_logging_level=020400<co xml:id="mp-co-kparm-sc"/>
rd.debug<co xml:id="mp-co-kparm-rd"/>
          </screen>
      <calloutlist>
       <callout arearefs="mp-co-kparm-udev">
        <para>
         Increase the log level of <command>systemd-udevd</command> and udev
         rule processing.
        </para>
       </callout>
       <callout arearefs="mp-co-kparm-sl">
        <para>
         Increase the log level of <command>systemd</command>.
        </para>
       </callout>
       <callout arearefs="mp-co-kparm-sc">
        <para>
         Increase the logging level of the kernel's SCSI subsystem.
        </para>
       </callout>
       <callout arearefs="mp-co-kparm-rd">
        <para>
         Trace the scripts in the initramfs.
        </para>
       </callout>
      </calloutlist>
     </informalexample>
     <para>
      In addition, it may make sense to enable logging for certain drivers and
      configure a serial console to capture the output during boot.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-multipath-trouble-tids">
   <title>Technical information documents</title>
   <para>
    For more information about troubleshooting multipath I/O issues on SUSE
    Linux Enterprise Server, see the following Technical Information Documents
    (TIDs) in the &suse; Knowledgebase:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="https://www.suse.com/support/kb/doc/?id=000016331"><citetitle>Using
      LVM on local and SAN attached devices</citetitle></link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://www.suse.com/support/kb/doc/?id=000017521"><citetitle>Using
      LVM on Multipath (DM MPIO) Devices</citetitle></link>
     </para>
    </listitem>
    <listitem>
     <para>
      <link xlink:href="https://www.suse.com/support/kb/doc/?id=000017762"><citetitle>HOWTO:
      Add, Resize and Remove LUN without restarting &slsa;</citetitle></link>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
</chapter>
