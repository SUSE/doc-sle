<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.security.auth">
<!-- ============================================================ -->
<!-- ============================================================ -->
<!-- ============================================================ -->
 <title>Setting Up Authentication Servers and Clients Using &yast;</title>
 <info>
  <abstract>
   <para>
    Whereas Kerberos is used for authentication, LDAP is used for authorization
    and identification. Both can work together. The Authentication Server you can
    set up with &yast; is based on LDAP and optionally Kerberos. On
    &productname;, you can configure it with a &yast; wizard.
   </para>

   <para>
    For more information about LDAP, see
    <xref linkend="cha.security.ldap"/>, and about Kerberos, see
    <xref linkend="cha.security.kerberos"/>.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
  </dm:docmanager>
 </info>
<!-- ============================================================ -->
 <sect1 xml:id="sec.security.auth.yast-sled" os="sled">
  <title>Configuring an Authentication Server</title>

  <para>
   For information about configuring an Authentication Server, see the &sls;
   <citetitle>Security Guide</citetitle>, chapter <citetitle>Setting Up
   Authentication Servers and Clients Using &yast;</citetitle>. It is available
   from <link xlink:href="https://www.suse.com/documentation/sles"/>.
  </para>
 </sect1>

<!-- ============================================================ -->
 <sect1 xml:id="sec.security.auth.yast" os="sles;osuse">
  <title>Configuring an Authentication Server with &yast;</title>

  <para/>

  <sect2 xml:id="sec.security.auth.yast.init" os="sles;osuse">
   <title>Initial Configuration of an Authentication Server</title>
   <para>
    To set up an authentication server for user account data, make sure the
    <systemitem>yast2-auth-server</systemitem>,
    <systemitem>389-ds</systemitem>,
    <systemitem>krb5-server</systemitem>, and
    <systemitem>krb5-client</systemitem> packages are installed; &yast; will
    remind you and install them if one of these packages is missing. For
    Kerberos support, the <systemitem>krb5-plugin-kdb-ldap</systemitem>
    package are required.
   </para>
   <para>
    The first part of the Authentication Server configuration with &yast; is
    setting up an LDAP server, then you can enable Kerberos.
   </para>
   <procedure>
    <title>Authentication Server Configuration with &yast;</title>
    <step>
     <para>
      Start &yast; as &rootuser; and select <menuchoice> <guimenu>Network
      Services</guimenu> <guimenu>Authentication Server</guimenu>
      </menuchoice> to invoke the configuration wizard.
     </para>
    </step>
    <step>
     <para>
      Configure the <guimenu>Global Settings</guimenu> of your LDAP server
      (you can change these settings later)&mdash;see
      <xref linkend="fig.auth.y2.wizard.general.settings"/>:
     </para>
     <figure xml:id="fig.auth.y2.wizard.general.settings">
      <title>&yast; Authentication Server Configuration</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_auth_wizard_general_settings.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_auth_wizard_general_settings.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
     <substeps performance="required">
      <step>
       <para>
        Set LDAP to be started.
       </para>
      </step>
      <step>
       <para>
        If the LDAP server should announce its services via SLP, check
        <guimenu>Register at an SLP Daemon</guimenu>.
       </para>
      </step>
      <step>
       <para>
        Configure <guimenu>Firewall Settings</guimenu>.
       </para>
      </step>
      <step>
       <para>
        Click <guimenu>Next</guimenu>.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Select the server type: <guimenu>Stand-alone server</guimenu>,
      <guimenu>Master server in a replication setup</guimenu>, or
      <guimenu>Replica (slave) server</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Select security options (<guimenu>TLS Settings</guimenu>).
     </para>
     <para>
      It is strongly recommended to <guimenu>Enable TLS</guimenu>. For more
      information, see <xref linkend="proc.auth.server.config"/>,
      <xref linkend="step.auth.server.config.tls"/>.
     </para>
      <warning>
       <title>Authentication Without Encryption</title>
       <para>
        When using authentication without enabling transport encryption
        using TLS, the password will be transmitted in the clear.
       </para>
      </warning>
     <para>
      Also consider using LDAP over SSL with certificates.
     </para>
    </step>
    <step>
     <para>
      Confirm <guimenu>Basic Database Settings</guimenu> with entering an
      <guimenu>LDAP Administrator Password</guimenu> and then clicking
      <guimenu>Next</guimenu>&mdash;see
      <xref linkend="fig.auth.y2.wizard.db.settings"/>.
     </para>
     <figure xml:id="fig.auth.y2.wizard.db.settings">
      <title>&yast; LDAP Server&mdash;New Database</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_auth_wizard_db_settings.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_auth_wizard_db_settings.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      In the <guimenu>Kerberos Authentication</guimenu> dialog, decide
      whether to enable Kerberos authentication or not (you can change these
      settings later)&mdash;see
      <xref linkend="fig.auth.y2.wizard.kerberos.yes"/>.
     </para>
     <figure xml:id="fig.auth.y2.wizard.kerberos.yes">
      <title>&yast; Kerberos Authentication</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_auth_wizard_kerberos_yes.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_auth_wizard_kerberos_yes.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      Choose whether Kerberos support is needed or not. If you enable it,
      also specify your <guimenu>Realm</guimenu>. Then confirm with
      <guimenu>Next</guimenu>.
     </para>
     <substeps performance="required">
      <step>
       <para>
        The <guimenu>Advanced Configuration</guimenu> allows you to specify
        various aspects such as <guimenu>Maximum ticket life time</guimenu>
        or ports to use.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Finally, check the <guimenu>Authentication Server Configuration
      Summary</guimenu> and click <guimenu>Finish</guimenu> to exit the
      configuration wizard.
     </para>
    </step>
   </procedure>
  </sect2>

<!-- ============================================================ -->

  <sect2 xml:id="sec.security.auth.yast.edit">
   <title>Editing an Authentication Server Configuration with &yast;</title>
   <para>
    For changes or additional configuration start the Authentication Server
    module again and in the left pane expand <guimenu>Global
    Settings</guimenu> to make subentries visible&mdash;see
    <xref linkend="fig.auth.y2.server.cfg"/>:
   </para>
   <figure xml:id="fig.auth.y2.server.cfg">
    <title>&yast; Editing Authentication Server Configuration</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="yast2_auth_server_cfg.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="yast2_auth_server_cfg.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <procedure xml:id="proc.auth.server.config">
    <title>Editing Authentication Server Configuration</title>
    <step>
     <para>
      With <guimenu>Log Level Settings</guimenu>, configure the degree of
      logging activity (verbosity) of the LDAP server. From the predefined
      list, select or deselect logging options according to your needs. The
      more options are enabled, the larger your log files grow.
     </para>
    </step>
    <step>
     <para>
      Configure which connection types the server should offer under
      <guimenu>Allow/Disallow Features</guimenu>. Choose from:
     </para>
     <variablelist>
      <varlistentry>
       <term>LDAPv2 Bind Requests</term>
       <listitem>
        <para>
         This option enables connection requests (bind requests) from
         clients using the previous version of the protocol (LDAPv2).
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Anonymous Bind When Credentials Not Empty</term>
       <listitem>
        <para>
         Normally, the LDAP server denies any authentication attempts with
         empty credentials, that is, a distinguished name (DN) or a password.
         However, enabling this option
         makes it possible to connect with a password and no DN to establish
         an anonymous connection.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Unauthenticated Bind When DN Not Empty</term>
       <listitem>
        <para>
         Enabling this option makes it possible to connect without
         authentication (anonymously) using a distinguished name (DN) but no
         password.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Unauthenticated Update Options to Process</term>
       <listitem>
        <para>
         Enabling this option allows non-authenticated (anonymous) update
         operations. Access is restricted according to ACLs and other rules.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </step>
    <step>
     <para>
      <guimenu>Allow/Disallow Features</guimenu> also lets you configure the
      server flags. Choose from:
     </para>
     <variablelist>
      <varlistentry>
       <term>Disable Acceptance of Anonymous Bind Requests</term>
       <listitem>
        <para>
         The server will no longer accept anonymous bind requests. Note,
         that this does not generally prohibit anonymous directory access.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Disable Simple Bind Authentication</term>
       <listitem>
        <para>
         Completely disable Simple Bind authentication.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Disable Forcing Session to Anonymous Status upon StartTLS Operation Receipt</term>
       <listitem>
        <para>
         The server will no longer force an authenticated connection back to
         the anonymous state when receiving the StartTLS operation.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Disallow the StartTLS Operation if Authenticated</term>
       <listitem>
        <para>
         The server will disallow the StartTLS operation on already
         authenticated connections.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </step>
    <step xml:id="step.auth.server.config.tls">
     <para>
      To configure secure communication between client and server, proceed
      with <guimenu>TLS Settings</guimenu>:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Activate <guimenu>Enable TLS</guimenu> to enable TLS and SSL
        encryption of the client/server communication.
       </para>
      </step>
      <step>
       <para>
        Either <guimenu>Import Certificate</guimenu> by specifying the exact
        path to its location or enable the <guimenu>Use Common Server
        Certificate</guimenu>. If the <guimenu>Use Common Server
        Certificate</guimenu> is not available, because it has not been
        created during installation, go for <guimenu>Launch CA Management
        Module</guimenu> first&mdash;for more information, see
        <xref linkend="sec.security.yast_ca.module"/>.
       </para>
<!--
      <itemizedlist>
       <listitem>
        <para>If you opted for importing a certificate, &yast; prompts you
         to specify the exact path to its location.</para>
       </listitem>
       <listitem>
        <para>If you opted for using the common server certificate and it has
         not been created during installation, it is subsequently created.
        </para>
       </listitem>
      </itemizedlist>
      -->
      </step>
     </substeps>
    </step>
   </procedure>
   <para>
<!-- bnc#431264 -->
<!-- Accept or modify the schema files included in the server's
     configuration by selecting <guimenu>Schema Files</guimenu> in
     the left part of the dialog.
     -->
    Add Schema files to be included in the server's configuration by
    selecting <guimenu>Schema Files</guimenu> in the left part of the
    dialog. The default selection of schema files applies to the server
    providing a source of &yast; user account data.
   </para>
   <para>
    &yast; allows to add traditional Schema files (usually with a name
    ending in <literal>.schema</literal>) or LDIF files containing Schema
    definitions in OpenLDAP's LDIF Schema format.
   </para>
   <figure xml:id="fig.auth.y2.server.db.cfg">
    <title>&yast; Authentication Server Database Configuration</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="yast2_auth_server_db_cfg.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="yast2_auth_server_db_cfg.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    To configure the databases managed by your LDAP server, proceed as
    follows:
   </para>
   <procedure>
    <step>
     <para>
      Select the <guimenu>Databases</guimenu> item in the left part of the
      dialog.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Add Database</guimenu> to add a new database.
     </para>
    </step>
    <step>
     <para>
      Specify the requested data:
     </para>
     <variablelist>
      <varlistentry>
       <term><guimenu>Base DN</guimenu>
       </term>
       <listitem>
        <para>
         Enter the base DN (distinguished name) of your LDAP server.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Administrator DN</guimenu>
       </term>
       <listitem>
        <para>
         Enter the DN of the administrator in charge of the server. If you
         check <guimenu>Append Base DN</guimenu>, only provide the
         <literal>cn</literal> of the administrator and the system fills in
         the rest automatically.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>LDAP Administrator Password</term>
       <listitem>
        <para>
         Enter the password for the database administrator.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Use This Database as the Default for OpenLDAP Clients</term>
       <listitem>
        <para>
         For convenience, check this option if wanted.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </step>
    <step>
     <para>
      In the next dialog, configure replication settings.
     </para>
    </step>
<!--
     <varlistentry>
      <term>Encryption</term>
      <listitem>
       <para>
        Determine the encryption algorithm to use to secure the password of
        Root DN.
 Choose <guimenu>Crypt</guimenu>,
        <guimenu>smd5</guimenu>, <guimenu>ssha</guimenu>, or
        <guimenu>sha</guimenu>.
        The dialog also includes a <guimenu>Plain</guimenu> option to
        enable the use of plain text passwords, but enabling this is not
        recommended for security reasons. To confirm your settings and return
        to the previous dialog, select <guimenu>OK</guimenu>.
       </para>
      </listitem>
     </varlistentry>
-->
    <step>
     <para>
      In the next dialog, enable enforcement of password policies to provide
      extra security to your LDAP server:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Check <guimenu>Enable Password Policies</guimenu> to be able to
        specify a password policy.
       </para>
      </step>
      <step>
       <para>
        Activate <guimenu>Hash Clear Text Passwords</guimenu> to have clear
        text passwords be hashed before they are written to the database
        whenever they are added or modified.
       </para>
      </step>
      <step>
       <para>
        <guimenu>Disclose "Account Locked" Status</guimenu> provides a
        relevant error message for bind requests to locked accounts.
       </para>
       <warning>
        <title>Locked Accounts in Security Sensitive Environments</title>
        <para>
         Do not use the <guimenu>Disclose "Account Locked" Status</guimenu>
         option if your environment is sensitive to security issues, because
         the <quote>Locked Account</quote> error message provides
         security-sensitive information that can be exploited by a potential
         attacker.
        </para>
       </warning>
      </step>
      <step>
       <para>
        Enter the DN of the default policy object. To use a DN other than
        the one suggested by &yast;, enter your choice. Otherwise, accept
        the default settings.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Complete the database configuration by clicking
      <guimenu>Finish</guimenu>.
     </para>
    </step>
   </procedure>
   <para>
    If you have not opted for password policies, your server is ready to run
    at this point. If you have chosen to enable password policies, proceed
    with the configuration of the password policy in detail. If you have
    chosen a password policy object that does not yet exist, &yast; creates
    one:
   </para>
   <procedure>
    <step>
     <para>
      Enter the LDAP server password. In the navigation tree below
      <guimenu>Databases</guimenu> expand your database object and activate
      the <guimenu>Password Policy Configuration</guimenu> item.
     </para>
    </step>
    <step>
     <para>
      Make sure <guimenu>Enable Password Policies</guimenu> is activated.
      Then click <guimenu>Edit Policy</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Configure the password change policies:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Determine the number of passwords stored in the password history.
        Saved passwords may not be reused by the user.
       </para>
      </step>
      <step>
       <para>
        Determine if users can change their passwords and if
        they will need to change their passwords after a reset by the
        administrator. Require the old password for password changes
        (optional).
       </para>
      </step>
      <step>
       <para>
        Determine whether and to what extent passwords should be subject to
        quality checking. Set the minimum password length that must be met
        before a password is valid. If you select <guimenu>Accept
        Uncheckable Passwords</guimenu>, users are allowed to use encrypted
        passwords, even though the quality checks cannot be performed. If
        you opt for <guimenu>Only Accept Checked Passwords</guimenu> only
        those passwords that pass the quality tests are accepted as valid.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Configure the password time-limit policies:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Determine the minimum password time-limit (the time that needs to
        pass between two valid password changes) and the maximum password
        time limit.
       </para>
      </step>
      <step>
       <para>
        Determine the time between a password expiration warning and the
        actual password expiration.
       </para>
      </step>
      <step>
       <para>
        Set the number of postponement uses of an expired password before
        the password expires permanently.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Configure the lockout policies:
     </para>
     <substeps performance="required">
      <step>
       <para>
        Enable password locking.
       </para>
      </step>
      <step>
       <para>
        Determine the number of bind failures that trigger a password lock.
       </para>
      </step>
      <step>
       <para>
        Determine the duration of the password lock.
       </para>
      </step>
      <step>
       <para>
        Determine the length of time that password failures are kept in the
        cache before they are purged.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Apply your password policy settings with <guimenu>OK</guimenu>.
     </para>
    </step>
   </procedure>
   <para>
    To edit a previously created database, select its base DN in the tree to
    the left. In the right part of the window, &yast; displays a dialog
    similar to the one used for the creation of a new database (with the
    main difference that the base DN entry is grayed out and cannot be
    changed).
   </para>
   <para>
    After leaving the Authentication Server configuration by selecting
    <guimenu>Finish</guimenu>, you are ready to go with a basic working
    configuration for your Authentication Server. To fine-tune this setup,
    use OpenLDAP's dynamic configuration back-end.
   </para>
   <para>
<!-- bnc#754946 -->
    The OpenLDAP's dynamic configuration back-end stores the configuration
    in an LDAP database. That database consists of a set of
    <literal>.ldif</literal> files in
    <filename>/etc/openldap/slapd.d</filename>. There is no need to access
    these files directly. To access the settings you can either use the
    &yast; Authentication Server module (the
    <systemitem>yast2-auth-server</systemitem> package) or an LDAP client
    such as <command>ldapmodify</command> or <command>ldapsearch</command>.
    For more information on the dynamic configuration of OpenLDAP, see the
    <quote>OpenLDAP Administration Guide</quote>.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.auth.yast.ldap_users">
   <title>Editing LDAP Users and Groups</title>
   <para>
    For editing LDAP users and groups with &yast;, see
    <xref linkend="sec.security.ldap.yast.usergr"/>.
   </para>
  </sect2>
 </sect1>
<!-- ============================================================ -->

 <sect1 xml:id="sec.security.auth.yast.client">
  <title>Configuring an Authentication Client with &yast;</title>

  <para>
   &yast; allows setting up authentication to clients using different
   modules:
  </para>

  <xi:include href="security_ldap_kerberos_ad_yast.xml"/>
 </sect1>

 <sect1 xml:id="sec.security.auth.sssd">
  <title>SSSD</title>
  <para>
   Two of the &yast; modules are based on SSSD: <guimenu>User Logon
   Management</guimenu> and <guimenu>LDAP and Kerberos
   Authentication</guimenu>.
  </para>
  <para>
   SSSD stands for System Security Services Daemon. SSSD talks to remote
   directory services that provide user data and provides various
   authentication methods, such as LDAP, &krb;, or &ad; (&ada;). It also
   provides an NSS (Name Service Switch) and PAM (Pluggable Authentication
   Module) interface.
  </para>
  <para>
   SSSD can locally cache user data and then allow users to use the data,
   even if the real directory service is (temporarily) unreachable.
  </para>
  <sect2 xml:id="sec.security.auth.sssd.status">
   <title>Checking the Status</title>
   <para>
    After running one of the &yast; authentication modules, you can check
    whether SSSD is running with:
   </para>
<screen>&prompt.root;<command>systemctl status sssd</command>
sssd.service - System Security Services Daemon
   Loaded: loaded (/usr/lib/systemd/system/sssd.service; enabled)
   Active: active (running) since Thu 2015-10-23 11:03:43 CEST; 5s ago
   [...]</screen>
  </sect2>

  <sect2 xml:id="sec.security.auth.sssd.cache">
   <title>Caching</title>
   <para>
    To allow logging in when the authentication back-end is unavailable, SSSD
    will use its cache even if it was invalidated. This happens until the
    back-end is available again.
   </para>
   <para>
    To invalidate the cache, run <command>sss_cache -E</command> (the
    command <command>sss_cache</command> is part of the package
    <package>sssd-tools</package>).
   </para>
   <para>
    To completely remove the SSSD cache, run:
   </para>
  <screen>&prompt.sudo;<command>systemctl stop sssd</command>
&prompt.sudo;<command>rm -f /var/lib/sss/db/*</command>
&prompt.sudo;<command>systemctl start sssd</command></screen>
  </sect2>

  <sect2 xml:id="sec.security.auth.sssd.more">
   <title>For More Information</title>
   <para>
   <remark>
    taroth 2019-07-03: @wbrown, when we went through this chapter together,
    we wrote down to refer to 'Configuring an LDAP Client with Yast'
    here - should I move the following (former) content of this section to the
    section 'Setting UP SSSD' (manually) in chapter 5 instead? or should I remove
    the following sentences completely? "For more information, see the SSSD man
    pages 'sssd.conf' ('man sssd.conf') and 'sssd '('man sssd').
    There are also man pages for most SSSD modules."
   </remark>
    For more information, see <xref linkend="sec.security.ldap.yast.client"/>.
   </para>
  </sect2>
 </sect1>
</chapter>
