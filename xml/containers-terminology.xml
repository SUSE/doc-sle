<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter version="5.0" xml:id="cha-containers-terminology"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Terminology</title>
 <variablelist>
  <varlistentry xml:id="Container">
   <term>Container</term>
   <listitem>
    <para>
     A <emphasis>container</emphasis> is a running instance based on a
     particular container image. Each <emphasis>container</emphasis> can be
     distinguished by a unique container ID.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle-docker-cgroup">
   <term>Control groups</term>
   <listitem>
    <para>
     <emphasis>Control groups</emphasis>, also called
     <literal>cgroups</literal> , is a Linux kernel feature that allows
     aggregating or partitioning tasks (processes) and all their children into
     hierarchically organized groups to manage their resource limits.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Docker-engine">
   <term>&deng;</term>
   <listitem>
    <para>
     &deng; is a server-client type application that performs all tasks related
     to containers. &deng; comprises the following:
    </para>
    <itemizedlist>
     <listitem>
      <formalpara>
       <title>Daemon:</title>
       <para>
        The server side of &deng;, which manages all &docker; objects (images,
        containers, network connections used by containers, etc.).
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>REST API:</title>
       <para>
        Applications can use this API to communicate directly with the daemon.
       </para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>CLI Client:</title>
       <para>
        Enables you to communicate with the daemon. If the daemon is running on
        a different machine than the CLI client, the CLI client can communicate
        by using network sockets or the REST API provided by &deng;.
       </para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Dockerfile">
   <term>Dockerfile</term>
   <listitem>
    <para>
     A <emphasis>Dockerfile</emphasis> provides instructions on how to build a container image. <xref linkend="Docker-engine"/> reads instructions in the
     <emphasis>Dockerfile</emphasis> and builds a new image according to the
     instructions.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Docker-Image">
   <term>Image</term>
   <listitem>
    <para>
     An <emphasis>image</emphasis> is a read-only template used to create a
     <emphasis>container</emphasis>. A &docker; image is
     made by a series of layers built one over the other. Each layer
     corresponds to a permanent change, for example an update of an
     application. The changes are stored in a file called a
     <emphasis>Dockerfile</emphasis>. For more details, see
     <link xlink:href="http://docs.docker.com/engine/reference/glossary#image">the
     official Docker documentation</link>.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Container Image</term>
   <listitem>
    <para>
     A <emphasis>container image</emphasis> is an unchangeable, static file
     that includes executable code so it can run an isolated process on IT
     infrastructure. The image is comprised of system libraries, system tools,
     and other platform settings a program needs to run on a containerization
     platform. A container image is compiled from file system layers built on
     top of a parent or base image.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Base Image</term>
   <listitem>
    <para>
     A <emphasis>base image</emphasis> is an image that does not have a parent
     image. In a Dockerfile, a base image is identified by the <literal>FROM
     scratch</literal> directive.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Parent Image</term>
   <listitem>
    <para>
     The image that served the basis for another container image. In other
     words, if an image is not a base image, it is derived from a parent image.
     In a Dockerfile, the <literal>FROM</literal> directive is pointing to the
     parent image. Most &docker; containers are created using parent images.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle-docker-namespace">
   <term>Namespaces</term>
   <listitem>
    <para>
     &deng; uses Linux <emphasis>namespaces</emphasis> for its containers, which
     isolates resources reserved for particular containers.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Orchestration</term>
   <listitem>
    <para>
     In a production environment, you typically need a cluster with many
     containers on each cluster node. The containers must cooperate and you
     need a framework that enables you to automatically manage the containers.
     The act of automatic container management is called container
     orchestration and is typically handled by Kubernetes.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Registry</term>
   <listitem>
    <para>
     A <emphasis>registry</emphasis> is storage for already created images. It
     typically contains several <emphasis>repositories</emphasis> There are two
     types of registries:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       public registry: Any (usually registered) user can download and use
       images. A typical example of a public registry is
       <link xlink:href="https://hub.docker.com/">Docker Hub</link>.
      </para>
     </listitem>
     <listitem>
      <para>
       private registry: Access is restricted to particular users, or from a
       particular private network.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Repository</term>
   <listitem>
    <para>
     A <emphasis>repository</emphasis> is storage for images in a
     <emphasis>registry</emphasis>.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</chapter>
