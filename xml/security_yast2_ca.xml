<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--
  toms 2011-10-10: TODO for next release
  According to mc:
  [Proposal]
 * allow to change alternative name in CA proposal (
   default for CA Name is "YaST_Default_CA", for Common Name is
   "YaST Default CA (auckland)" )
 * create country selection combobox editable to allow choose of
   countries not listed

 Test it in a running system with:
 $> yast2 test_proposal service

 2013-02-21: No changes for SP3 according to mc
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.security.yast_ca">
 <title>Managing X.509 Certification</title>
 <info>
      <abstract>
        <para>
    An increasing number of authentication mechanisms are based on
    cryptographic procedures. Digital certificates that assign cryptographic
    keys to their owners play an important role in this context. These
    certificates are used for communication and can also be found, for
    example, on company ID cards. The generation and administration of
    certificates is mostly handled by official institutions that offer this
    as a commercial service. In some cases, however, it may make sense to
    carry out these tasks yourself. For example, if a company does not want
    to pass personal data to third parties.
   </para>
        <para>
    &yast; provides two modules for certification, which offer basic
    management functions for digital X.509 certificates. The following
    sections explain the basics of digital certification and how to use
    &yast; to create and administer certificates of this type.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <indexterm>
 <primary>&yast;</primary>
 <secondary>X.509 certification</secondary></indexterm><indexterm>
 <primary>X.509 certification</primary>
 <secondary>&yast;</secondary></indexterm>
 <sect1 xml:id="sec.security.yast_ca.intro">
  <title>The Principles of Digital Certification</title><indexterm>

  <primary>X.509 certification</primary>

  <secondary>principles</secondary></indexterm>

  <para>
   Digital certification uses cryptographic processes to encrypt and protect
   data from access by unauthorized people. The user data is encrypted using
   a second data record, or <emphasis>key</emphasis>. The key is applied to
   the user data in a mathematical process, producing an altered data record
   in which the original content can no longer be identified. Asymmetrical
   encryption is now in general use (<emphasis>public key
   method</emphasis>). Keys always occur in pairs:
  </para>

  <variablelist>
   <varlistentry>
    <term>Private Key</term>
    <listitem>
     <para>
      The private key must be kept safely by the key owner. Accidental
      publication of the private key compromises the key pair and renders it
      useless.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Public Key</term>
    <listitem>
     <para>
      The key owner circulates the public key for use by third parties.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

<!-- Unsure if that is actually true...
  <para>
   Both keys can be used for encryption and decryption. Depending on the
   application, one of the keys is used for encryption and the other for
   decryption. It should be noted that the <quote>direction</quote> of the
   conversion (in other words <emphasis role="bold">en</emphasis>cryption or
   <emphasis role="bold">de</emphasis>cryption) is only defined by the
   corresponding <quote>counter-operation</quote>. It is quite possible to
   <emphasis role="bold">de</emphasis>crypt an original data record with one of
   the keys, even though the record has not been previously <emphasis
    role="bold">en</emphasis>crypted. The result is an unreadable data record
   which can be made readable again by <emphasis
    role="bold">en</emphasis>crypting it.
 </para>
-->

  <sect2 xml:id="sec.security.yast_ca.intro.keyauth">
   <title>Key Authenticity</title>
   <para>
    Because the public key process is in widespread use, there are many
    public keys in circulation. Successful use of this system requires that
    every user be sure that a public key actually belongs to the assumed
    owner. The assignment of users to public keys is confirmed by
    trustworthy organizations with public key certificates. Such
    certificates contain the name of the key owner, the corresponding public
    key, and the electronic signature of the person issuing the certificate.
   </para>
   <para>
    Trustworthy organizations that issue and sign public key certificates
    are usually part of a certification infrastructure.  This is
    responsible for the other aspects of certificate management, such as
    publication, withdrawal, and renewal of certificates. An infrastructure
    of this kind is generally called a <emphasis>public key
    infrastructure</emphasis> or <emphasis>PKI</emphasis>. One familiar PKI
    is the <emphasis>OpenPGP</emphasis> standard in which users publish
    their certificates themselves without central authorization points.
    These certificates become trustworthy when signed by other parties in
    the <quote>web of trust.</quote>
   </para>
   <para>
    The <emphasis>X.509 Public Key Infrastructure</emphasis> (PKIX) is an
    alternative model defined by the <emphasis>IETF</emphasis> (Internet
    Engineering Task Force) that serves as a model for almost all
    publicly-used PKIs today. In this model, authentication is made by
    <emphasis>certificate authorities</emphasis> (CA) in a hierarchical tree
    structure. The root of the tree is the root CA, which certifies all
    sub-CAs. The lowest level of sub-CAs issue user certificates. The user
    certificates are trustworthy by certification that can be traced to the
    root CA.
   </para>
   <para>
    The security of such a PKI depends on the trustworthiness of the CA
    certificates. To make certification practices clear to PKI customers,
    the PKI operator defines a <emphasis>certification practice
    statement</emphasis> (CPS) that defines the procedures for certificate
    management. This should ensure that the PKI only issues trustworthy
    certificates.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.intro.x509">
   <title>X.509 Certificates</title><indexterm>
   <primary>X.509 certification</primary>
   <secondary>certificates</secondary></indexterm>
   <para>
    An X.509 certificate is a data structure with several fixed fields and,
    optionally, additional extensions. The fixed fields mainly contain the
    name of the key owner, the public key, and the data relating to the
    issuing CA (name and signature). For security reasons, a certificate
    should only have a limited period of validity, so a field is also
    provided for this date. The CA guarantees the validity of the
    certificate in the specified period. The CPS usually requires the PKI
    (the issuing CA) to create and distribute a new certificate before
    expiration.
   </para>
   <para>
    The extensions can contain any additional information. An application is
    only required to be able to evaluate an extension if it is identified as
    <emphasis>critical</emphasis>. If an application does not recognize a
    critical extension, it must reject the certificate. Some extensions are
    only useful for a specific application, such as signature or encryption.
   </para>
   <para>
    <xref linkend="tab.yast.ca.intro.x509" xrefstyle="select:label nopage"/>
    shows the fields of a basic X.509 certificate in version 3.
   </para>
   <table xml:id="tab.yast.ca.intro.x509">
    <title>X.509v3 Certificate</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>
         Field
        </para>
       </entry>
       <entry>
        <para>
         Content
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Version
        </para>
       </entry>
       <entry>
        <para>
         The version of the certificate, for example, v3
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Serial Number
        </para>
       </entry>
       <entry>
        <para>
         Unique certificate ID (an integer)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Signature
        </para>
       </entry>
       <entry>
        <para>
         The ID of the algorithm used to sign the certificate
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Issuer
        </para>
       </entry>
       <entry>
        <para>
         Unique name (DN) of the issuing authority (CA)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Validity
        </para>
       </entry>
       <entry>
        <para>
         Period of validity
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Subject
        </para>
       </entry>
       <entry>
        <para>
         Unique name (DN) of the owner
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Subject Public Key Info
        </para>
       </entry>
       <entry>
        <para>
         Public key of the owner and the ID of the algorithm
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Issuer Unique ID
        </para>
       </entry>
       <entry>
        <para>
         Unique ID of the issuing CA (optional)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Subject Unique ID
        </para>
       </entry>
       <entry>
        <para>
         Unique ID of the owner (optional)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Extensions
        </para>
       </entry>
       <entry>
        <para>
         Optional additional information, such as <quote>KeyUsage</quote> or
         <quote>BasicConstraints</quote>
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.intro.crl">
   <title>Blocking X.509 Certificates</title><indexterm>
   <primary>X.509 certification</primary>
   <secondary>revocation list</secondary></indexterm>
   <para>
    If a certificate becomes untrustworthy before it has expired, it must be
    blocked immediately. This can become necessary if, for example, the
    private key has accidentally been made public. Blocking certificates is
    especially important if the private key belongs to a CA rather than a
    user certificate. In this case, all user certificates issued by the
    relevant CA must be blocked immediately. If a certificate is blocked,
    the PKI (the responsible CA) must make this information available to all
    those involved using a <emphasis>certificate revocation list</emphasis>
    (CRL).
   </para>
   <para>
    These lists are supplied by the CA to public CRL distribution points
    (CDPs) at regular intervals. The CDP can optionally be named as an
    extension in the certificate, so a checker can fetch a current CRL for
    validation purposes. One way to do this is the <emphasis>online
    certificate status protocol</emphasis> (OCSP). The authenticity of the
    CRLs is ensured with the signature of the issuing CA.
    <xref linkend="tab.yast.ca.intro.crl" xrefstyle="select:label       nopage"/>
    shows the basic parts of a X.509 CRL.
   </para>
   <table xml:id="tab.yast.ca.intro.crl">
    <title>X.509 Certificate Revocation List (CRL)</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>
         Field
        </para>
       </entry>
       <entry>
        <para>
         Content
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Version
        </para>
       </entry>
       <entry>
        <para>
         The version of the CRL, such as v2
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Signature
        </para>
       </entry>
       <entry>
        <para>
         The ID of the algorithm used to sign the CRL
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Issuer
        </para>
       </entry>
       <entry>
        <para>
         Unique name (DN) of the publisher of the CRL (usually the issuing
         CA)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         This Update
        </para>
       </entry>
       <entry>
        <para>
         Time of publication (date, time) of this CRL
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Next Update
        </para>
       </entry>
       <entry>
        <para>
         Time of publication (date, time) of the next CRL
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         List of revoked certificates
        </para>
       </entry>
       <entry>
        <para>
         Every entry contains the serial number of the certificate, the time
         of revocation, and optional extensions (CRL entry extensions)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Extensions
        </para>
       </entry>
       <entry>
        <para>
         Optional CRL extensions
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.intro.repository">
   <title>Repository for Certificates and CRLs</title><indexterm>
   <primary>X.509 certification</primary>
   <secondary>repository</secondary></indexterm>
   <para>
    The certificates and CRLs for a CA must be made publicly accessible using
    a <emphasis>repository</emphasis>. Because the signature protects the
    certificates and CRLs from being forged, the repository itself does not
    need to be secured in a special way. Instead, it tries to grant the
    simplest and fastest access possible. For this reason, certificates are
    often provided on an LDAP or HTTP server. Find explanations about LDAP in
    <xref linkend="cha.security.ldap"/>.  <xref os="sles;osuse"
    linkend="cha.apache2"/> contains information about the HTTP server.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.intro.ldap">
   <title>Proprietary PKI</title><indexterm>
   <primary>X.509 certification</primary>
   <secondary>repository</secondary></indexterm>
   <para>
    &yast; contains modules for the basic management of X.509
    certificates. This mainly involves the creation of CAs, sub-CAs, and
    their certificates. The services of a PKI go far beyond simply creating
    and distributing certificates and CRLs. The operation of a PKI requires
    a well-conceived administrative infrastructure allowing continuous
    update of certificates and CRLs. This infrastructure is provided by
    commercial PKI products and can also be partly automated. &yast;
    provides tools for creating and distributing CAs and certificates, but
    cannot currently offer this background infrastructure. To set up a small
    PKI, you can use the available &yast; modules. However, you should
    use commercial products to set up an <quote>official</quote> or
    commercial PKI.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.security.yast_ca.module">
  <title>&yast; Modules for CA Management</title><indexterm>

  <primary>&yast;</primary>

  <secondary>CA management</secondary></indexterm>

  <para>
   &yast; provides two modules for basic CA management. The primary
   management tasks with these modules are explained here.
  </para>

  <sect2 xml:id="sec.security.yast_ca.module.rootca">
   <title>Creating a Root CA</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>root CA</tertiary></indexterm>
   <para>
    <phrase os="sles">After a default installation, &productname;
    contains already a root CA named YaST_Default_CA. Use this module to
    create additional root CAs.</phrase> The first step when setting up a
    PKI is to create a root CA. Do the following:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and go to <menuchoice><guimenu>Security and
      Users</guimenu><guimenu>CA Management</guimenu></menuchoice>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Create Root CA</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter the basic data for the CA in the first dialog, shown in
      <xref linkend="fig.yast.ca.ca_basic" xrefstyle="select:label nopage"/>.
      The text boxes have the following meanings:
     </para>
     <figure xml:id="fig.yast.ca.ca_basic">
      <title>&yast; CA Module&mdash;Basic Data for a Root CA</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_basic.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_basic.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
     <variablelist>
      <varlistentry>
       <term><guimenu>CA Name</guimenu>
       </term>
       <listitem>
        <para>
         Enter the technical name of the CA. Directory names, among other
         things, are derived from this name, which is why only the
         characters listed in the help can be used. The technical name is
         also displayed in the overview when the module is started.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Common Name</guimenu>
       </term>
       <listitem>
        <para>
         Enter the name for use in referring to the CA.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>E-Mail Addresses</guimenu>
       </term>
       <listitem>
        <para>
         Several e-mail addresses can be entered that can be seen by the CA
         user. This can be helpful for inquiries.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Country</guimenu>
       </term>
       <listitem>
        <para>
         Select the country where the CA is operated.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Organization</guimenu>, <guimenu>Organizational Unit</guimenu>,
         <guimenu>Locality</guimenu>, <guimenu>State</guimenu>
       </term>
       <listitem>
        <para>
         Optional values
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Proceed with <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter a password in the second dialog. This password is always
      required when using the CA&mdash;when creating a sub-CA or
      generating certificates. The text boxes have the following meaning:
     </para>
     <variablelist>
      <varlistentry>
       <term><guimenu>Key Length</guimenu>
       </term>
       <listitem>
        <para>
         <guimenu>Key Length</guimenu> contains a meaningful default and
         does not generally need to be changed unless an application cannot
         deal with this key length. The higher the number the more secure
         your password is.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Valid Period (days)</guimenu>
       </term>
       <listitem>
        <para>
         The <guimenu>Valid Period</guimenu> in the case of a CA defaults to
         3650 days (roughly ten years). This long period makes sense because
         the replacement of a deleted CA involves an enormous administrative
         effort.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Clicking <guimenu>Advanced Options</guimenu> opens a dialog for
      setting different attributes from the X.509 extensions
      (<xref linkend="fig.yast.ca.extensions"/>). These values have rational
      default settings and should only be changed if you are really sure of
      what you are doing. Proceed with <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Review the summary. &yast; displays the current settings for
      confirmation. Click <guimenu>Create</guimenu>. The root CA is created
      then appears in the overview.
     </para>
    </step>
   </procedure>
   <tip>
    <para>
     In general, it is best not to allow user certificates to be issued by
     the root CA. It is better to create at least one sub-CA and create the
     user certificates from there. This has the advantage that the root CA
     can be kept isolated and secure, for example, on an isolated computer
     on secure premises. This makes it very difficult to attack the root CA.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.changepw">
   <title>Changing Password</title>
<!-- Documenting FATE #300161 -->
   <para>
    If you need to change your password for your CA, proceed as follows:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open the CA module.
     </para>
    </step>
    <step>
     <para>
      Select the required root CA and click <guimenu>Enter CA</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter the password if you entered a CA the first time. &yast;
      displays the CA key information in the <guimenu>Description</guimenu>
      tab (see
      <xref linkend="fig.yast.ca.usage" xrefstyle="select:label nopage"/>).
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Advanced</guimenu> and select <guimenu>Change CA
      Password</guimenu>. A dialog opens.
     </para>
    </step>
    <step>
     <para>
      Enter the old and the new password.
     </para>
    </step>
    <step>
     <para>
      Finish with <guimenu>OK</guimenu>
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.subca">
   <title>Creating or Revoking a Sub-CA</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>sub-CA</tertiary></indexterm>
   <para>
    A sub-CA is created in the same way as a root CA.
   </para>
   <note>
    <para>
     The validity period for a sub-CA must be fully within the validity
     period of the <quote>parent</quote> CA. A sub-CA is always created
     after the <quote>parent</quote> CA, therefore, the default value leads
     to an error message. To avoid this, enter a permissible value for the
     period of validity.
    </para>
   </note>
   <para>
    Do the following:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open the CA module.
     </para>
    </step>
    <step>
     <para>
      Select the required root CA and click <guimenu>Enter CA</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter the password if you are entering a CA for the first time.
      &yast; displays the CA key information in the tab
      <guimenu>Description</guimenu> (see
      <xref linkend="fig.yast.ca.usage" xrefstyle="select:label nopage"/>).
     </para>
     <figure xml:id="fig.yast.ca.usage">
      <title>&yast; CA Module&mdash;Using a CA</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_usage.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_usage.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      Click <guimenu>Advanced</guimenu> and select <guimenu>Create
      SubCA</guimenu>. This opens the same dialog as for creating a root CA.
     </para>
    </step>
    <step>
     <para>
      Proceed as described in
      <xref linkend="sec.security.yast_ca.module.rootca"/>.
     </para>
<!-- FATE #2612 -->
     <para>
      It is possible to use one password for all your CAs. Enable
      <guimenu>Use CA Password as Certificate Password</guimenu> to give
      your sub-CAs the same password as your root CA. This helps to reduce
      the amount of passwords for your CAs.
     </para>
     <note>
      <title>Check your Valid Period</title>
      <para>
       Take into account that the valid period must be lower than the valid
       period in the root CA.
      </para>
     </note>
    </step>
    <step>
     <para>
      Select the <guimenu>Certificates</guimenu> tab. Reset compromised or
      otherwise unwanted sub-CAs here, using <guimenu>Revoke</guimenu>.
      Revocation alone is not enough to deactivate a sub-CA. You must also
      publish revoked sub-CAs in a CRL. The creation of CRLs is described in
      <xref linkend="sec.security.yast_ca.module.crl"/>.
     </para>
    </step>
    <step>
     <para>
      Finish with <guimenu>OK</guimenu>
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.clientserver">
   <title>Creating or Revoking User Certificates</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>certificates</tertiary></indexterm>
   <para>
    Creating client and server certificates is very similar to creating CAs
    in <xref linkend="sec.security.yast_ca.module.rootca"/>. The same
    principles apply here. In certificates intended for e-mail signature,
    the e-mail address of the sender (the private key owner) should be
    contained in the certificate to enable the e-mail program to assign the
    correct certificate.
   </para>
   <para>
    For certificate assignment during encryption, it is necessary for the
    e-mail address of the recipient (the public key owner) to be included in
    the certificate. In the case of server and client certificates, the host
    name of the server must be entered in the <guimenu>Common Name</guimenu>
    field. The default validity period for certificates is 365 days.
   </para>
   <para>
    To create client and server certificates, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open the CA module.
     </para>
    </step>
    <step>
     <para>
      Select the required root CA and click <guimenu>Enter CA</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter the password if you are entering a CA for the first time.
      &yast; displays the CA key information in the
      <guimenu>Description</guimenu> tab.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Certificates</guimenu> (see
      <xref linkend="fig.yast.ca.cert" xrefstyle="select:label nopage"/>).
     </para>
     <figure xml:id="fig.yast.ca.cert">
      <title>Certificates of a CA</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_cert.png" width="70%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_cert.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      Click <menuchoice> <guimenu>Add</guimenu> <guimenu>Add Server
      Certificate</guimenu> </menuchoice> and create a server certificate.
     </para>
    </step>
    <step>
     <para>
      Click <menuchoice> <guimenu>Add</guimenu> <guimenu>Add Client
      Certificate</guimenu> </menuchoice> and create a client certificate.
      Do not forget to enter an e-mail address.
     </para>
    </step>
    <step>
     <para>
      Finish with <guimenu>OK</guimenu>
     </para>
    </step>
   </procedure>
   <para>
    To revoke compromised or otherwise unwanted certificates, do the
    following:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open the CA module.
     </para>
    </step>
    <step>
     <para>
      Select the required root CA and click <guimenu>Enter CA</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter the password if you are entering a CA for the first time.
      &yast; displays the CA key information in the
      <guimenu>Description</guimenu> tab.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Certificates</guimenu> (see
      <xref linkend="sec.security.yast_ca.module.subca"/>).
     </para>
    </step>
    <step>
     <para>
      Select the certificate to revoke and click <guimenu>Revoke</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Choose a reason to revoke this certificate.
     </para>
    </step>
    <step>
     <para>
      Finish with <guimenu>OK</guimenu>.
     </para>
    </step>
   </procedure>
   <note>
    <para>
     Revocation alone is not enough to deactivate a certificate. Also
     publish revoked certificates in a CRL.
     <xref linkend="sec.security.yast_ca.module.crl"/> explains how to
     create CRLs. Revoked certificates can be completely removed after
     publication in a CRL with <guimenu>Delete</guimenu>.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.defaults">
   <title>Changing Default Values</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>changing default values</tertiary></indexterm>
   <para>
    The previous sections explained how to create sub-CAs, client
    certificates, and server certificates. Special settings are used in the
    extensions of the X.509 certificate. These settings have been given
    rational defaults for every certificate type and do not normally need to
    be changed. However, it may be that you have special requirements for
    these extensions. In this case, it may make sense to adjust the
    defaults. Otherwise, start from scratch every time you create a
    certificate.
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open the CA module.
     </para>
    </step>
    <step>
     <para>
      Enter the required root CA, as described in
      <xref linkend="sec.security.yast_ca.module.subca"/>.
     </para>
    </step>
    <step>
     <para>
      Click <menuchoice> <guimenu>Advanced</guimenu> <guimenu>Edit
      Default</guimenu></menuchoice>.
     </para>
    </step>
    <step>
     <para>
      Choose type of certificate to change and proceed with
      <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      The dialog for changing the defaults as shown in
      <xref linkend="fig.yast.ca.extensions"/> opens.
     </para>
     <figure xml:id="fig.yast.ca.extensions">
      <title>&yast; CA Module&mdash;Extended Settings</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_extensions.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_extensions.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      Change the associated value on the right side and set or delete the
      critical setting with <guimenu>critical</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Next</guimenu> to see a short summary.
     </para>
    </step>
    <step>
     <para>
      Finish your changes with <guimenu>Save</guimenu>.
     </para>
    </step>
   </procedure>
   <note>
    <para>
     All changes to the defaults only affect objects created after this
     point. Already-existing CAs and certificates remain unchanged.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.crl">
   <title>Creating Certificate Revocation Lists (CRLs)</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>creating CRLs</tertiary></indexterm>
   <para>
    If compromised or otherwise unwanted certificates need to be excluded
    from further use, they must first be revoked. The procedure for this is
    explained in <xref linkend="sec.security.yast_ca.module.subca"/> (for
    sub-CAs) and <xref linkend="sec.security.yast_ca.module.clientserver"/>
    (for user certificates). After this, a CRL must be created and published
    with this information.
   </para>
   <para>
    The system maintains only one CRL for each CA. To create or update this
    CRL, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open the CA module.
     </para>
    </step>
    <step>
     <para>
      Enter the required CA, as described in
      <xref linkend="sec.security.yast_ca.module.subca"/>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>CRL</guimenu>. The dialog that opens displays a summary
      of the last CRL of this CA.
     </para>
    </step>
    <step>
     <para>
      Create a new CRL with <guimenu>Generate CRL</guimenu> if you have
      revoked new sub-CAs or certificates since its creation.
     </para>
    </step>
    <step>
     <para>
      Specify the period of validity for the new CRL (default: 30 days).
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>OK</guimenu> to create and display the CRL. Afterward,
      you must publish this CRL.
     </para>
    </step>
   </procedure>
   <note>
    <para>
     Applications that evaluate CRLs reject every certificate if the CRL is
     not available or has expired. As a PKI provider, it is your duty always
     to create and publish a new CRL before the current CRL expires (period
     of validity). &yast; does not provide a function for automating this
     procedure.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.exportldap">
   <title>Exporting CA Objects to LDAP</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>exporting CA objects to LDAP</tertiary></indexterm>
   <para>
    The executing computer should be configured with the &yast; LDAP
    client for LDAP export. This provides LDAP server information at runtime
    that can be used when completing dialog fields. Otherwise (although
    export may be possible), all LDAP data must be entered manually. You
    must always enter several passwords (see
    <xref linkend="tab.yast.ca.ldap.password"/>).
   </para>
   <table xml:id="tab.yast.ca.ldap.password">
    <title>Passwords during LDAP Export</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>
         Password
        </para>
       </entry>
       <entry>
        <para>
         Meaning
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         LDAP Password
        </para>
       </entry>
       <entry>
        <para>
         Authorizes the user to make entries in the LDAP tree.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Certificate Password
        </para>
       </entry>
       <entry>
        <para>
         Authorizes the user to export the certificate.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         New Certificate Password
        </para>
       </entry>
       <entry>
        <para>
         The PKCS12 format is used during LDAP export. This format forces
         the assignment of a new password for the exported certificate.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Certificates, CAs, and CRLs can be exported to LDAP.
   </para>
   <variablelist>
    <varlistentry>
     <term>Exporting a CA to LDAP</term>
     <listitem>
      <para>
       To export a CA, enter the CA as described in
       <xref linkend="sec.security.yast_ca.module.subca"/>. Select
       <menuchoice> <guimenu>Extended</guimenu><guimenu>Export to
       LDAP</guimenu></menuchoice> in the subsequent dialog, which opens the
       dialog for entering LDAP data. If your system has been configured
       with the &yast; LDAP client, the fields are already partly
       completed. Otherwise, enter all the data manually. Entries are made
       in LDAP in a separate tree with the attribute
       <quote>caCertificate</quote>.
      </para>
<!---
      <para>
       An alternative method for sub-CAs is to export from the
       <quote>parent</quote> CA. To do this, enter the CA containing the sub-CA
       you want to export and select <guimenu>Certificates</guimenu>. Then
       select the required sub-CA from the certificate list in the upper part
       of the dialog and select
       <menuchoice><guimenu>Export</guimenu><guimenu>Export To
         LDAP</guimenu></menuchoice>. The LDAP data is entered here in the same
       way as in the first case. This is a useful method if several CAs are to
       be exported in sequence.
     </para>
      -->
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Exporting a Certificate to LDAP</term>
     <listitem>
      <para>
       Enter the CA containing the certificate to export then select
       <guimenu>Certificates</guimenu>. Select the required certificate from
       the certificate list in the upper part of the dialog and select
       <menuchoice> <guimenu>Export</guimenu><guimenu>Export to
       LDAP</guimenu></menuchoice>. The LDAP data is entered here in the
       same way as for CAs. The certificate is saved with the corresponding
       user object in the LDAP tree with the attributes
       <quote>userCertificate</quote> (PEM format) and
       <quote>userPKCS12</quote> (PKCS12 format).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Exporting a CRL to LDAP</term>
     <listitem>
      <para>
       Enter the CA containing the CRL to export and select
       <guimenu>CRL</guimenu>. If desired, create a new CRL and click
       <guimenu>Export</guimenu>. The dialog that opens displays the export
       parameters. You can export the CRL for this CA either once or in
       periodical time intervals. Activate the export by selecting
       <guimenu>Export to LDAP</guimenu> and enter the respective LDAP data.
       To do this at regular intervals, select the <guimenu>Repeated
       Recreation and Export</guimenu> radio button and change the interval,
       if appropriate.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.exportfile">
   <title>Exporting CA Objects as a File</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>exporting CA objects as a file</tertiary></indexterm>
   <para>
    If you have set up a repository on the computer for administering CAs,
    you can use this option to create the CA objects directly as a file at
    the correct location. Different output formats are available, such as
    PEM, DER, and PKCS12. In the case of PEM, it is also possible to choose
    whether a certificate should be exported with or without key and whether
    the key should be encrypted. In the case of PKCS12, it is also possible
    to export the certification path.
   </para>
   <para>
    Export a file in the same way for certificates, CAs as with LDAP,
    described in <xref linkend="sec.security.yast_ca.module.exportldap"/>,
    except you should select <guimenu>Export as File</guimenu> instead of
    <guimenu>Export to LDAP</guimenu>. This then takes you to a dialog for
    selecting the required output format and entering the password and file
    name. The certificate is stored at the required location after clicking
    <guimenu>OK</guimenu>.
   </para>
   <para>
    For CRLs click <guimenu>Export</guimenu>, select <guimenu>Export to
    file</guimenu>, choose the export format (PEM or DER) and enter the
    path. Proceed with <guimenu>OK</guimenu> to save it to the respective
    location.
   </para>
   <tip>
    <para>
     You can select any storage location in the file system. This option can
     also be used to save CA objects on a transport medium, such as a flash
     disk. The <filename>/media</filename> directory generally holds any
     type of drive except the hard disk of your system.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec.security.yast_ca.module.import">
   <title>Importing Common Server Certificates</title><indexterm>
   <primary>&yast;</primary>
   <secondary>X.509 certification</secondary>
   <tertiary>importing general server certificates</tertiary></indexterm>
   <para>
    If you have exported a server certificate with &yast; to your media
    on an isolated CA management computer, you can import this certificate
    on a server as a <emphasis>common server certificate</emphasis>. Do this
    during installation or at a later point with &yast;.
   </para>
   <note>
    <para>
     You need one of the PKCS12 formats to import your certificate
     successfully.
    </para>
   </note>
   <para>
    The general server certificate is stored in
    <command>/etc/ssl/servercerts</command> and can be used there by any
    CA-supported service. When this certificate expires, it can easily be
    replaced using the same mechanisms. To get things functioning with the
    replaced certificate, restart the participating services.
   </para>
   <tip>
    <para>
     If you select <guimenu>Import</guimenu> here, you can select the source
     in the file system. This option can also be used to import certificates
     from removable media, such as a flash disk.
    </para>
   </tip>
   <para>
    To import a common server certificate, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Start &yast; and open <guimenu>Common Server Certificate</guimenu>
      under <guimenu>Security and Users</guimenu>
     </para>
    </step>
    <step>
     <para>
      View the data for the current certificate in the description field
      after &yast; has been started.
     </para>
    </step>
    <step>
     <para>
      Select <guimenu>Import</guimenu> and the certificate file.
     </para>
    </step>
    <step>
     <para>
      Enter the password and click <guimenu>Next</guimenu>. The certificate
      is imported then displayed in the description field.
     </para>
    </step>
    <step>
     <para>
      Close &yast; with <guimenu>Finish</guimenu>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
