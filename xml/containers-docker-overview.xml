<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xml:id="cha-docker-overview" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&deng; Overview</title>
 <para>
  The &deng; is a lightweight virtualization solution to run multiple virtual
  Linux environments (containers) simultaneously on top of a single Linux
  kernel, without a hypervisor. Containers are isolated using Kernel cgroups
  (<xref linkend="vle-docker-cgroup"/>) and <xref linkend="vle-docker-namespace"/>.
 </para>
 <para>
  Full virtualization solutions, such as &xen;, &kvm;, or &libvirt;, are based
  on simulating a complete hardware environment and running multiple operating
  system instances inside these virtual machines. The &deng; provides
  operating-system-level virtualization: a single Linux kernel controls
  multiple isolated containers.
 </para>
 <para>
  The &deng; allows developers and system administrators to manage the complete
  life cycle of images. The &deng; makes it easy to build, ship, and run images
  containing applications.
 </para>
 <para>
  &deng; has the following advantages:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Isolation of applications through containers.
   </para>
  </listitem>
  <listitem>
   <para>
    Near-native performance, as the &deng; manages allocation of resources in
    real time.
   </para>
  </listitem>
  <listitem>
   <para>
    Control network interfaces and resources available inside containers
    through cgroups.
   </para>
  </listitem>
  <listitem>
   <para>
    Versioning of images.
   </para>
  </listitem>
  <listitem>
   <para>
    Building new images based on existing ones.
   </para>
  </listitem>
  <listitem>
   <para>
    Container orchestration.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  &deng; has the following limitations:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Containers run on the host system's kernel and cannot use a different
    kernel.
   </para>
  </listitem>
  <listitem>
   <para>
    Only supports Linux applications and not other operating systems.
   </para>
  </listitem>
  <listitem>
   <para>
    &deng; is not a full virtualization stack like &xen;, &kvm;, or &libvirt;.
   </para>
  </listitem>
  <listitem>
   <para>
    Security depends on the host system. Refer to the
    <link xlink:href="http://docs.docker.com/articles/security/">official
    security documentation</link> for more details.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-docker-architecture">
  <title>&deng; Architecture</title>

  <para>
   &deng; uses a client/server architecture. You can use the <emphasis>CLI
   client</emphasis> to communicate with the <emphasis>daemon</emphasis>. The
   <emphasis>daemon</emphasis> performs operations with containers and manages
   images locally or in registry. The <emphasis>CLI client</emphasis> can run
   on the same server as the host daemon or on a different machine. The
   <emphasis>CLI client</emphasis> communicates with the
   <emphasis>daemon</emphasis> by using network sockets. The architecture is
   shown in <xref linkend="fig-docker-architecture"/>.
  </para>

  <figure xml:id="fig-docker-architecture">
   <title>The &deng; Architecture</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="docker_architecture.png" format="PNG" width="70%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="sec-docker-drivers">
  <title>Product Overview</title>

  <para>
   The following section provides a brief overview of container and storage
   drives used and supported by the &deng;.
  </para>

  <sect2 xml:id="sec-container-drivers">
   <title>Container Drivers</title>
   <para>
    &deng; uses
    <link xlink:href="https://github.com/docker/libcontainer">libcontainer</link>
    as the back-end driver to handle containers.
   </para>
  </sect2>

  <sect2 xml:id="sec-docker-storaged">
   <title>Storage Drivers</title>
   <para>
    &deng; supports different storage drivers:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <systemitem class="resource">vfs</systemitem>: this driver is
      automatically used when the &docker; host file system does not support
      copy-on-write. This driver is simpler than the others listed and does not
      leverage certain advantages of the &deng; such as shared layers. It is a
      reliable but slow driver.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">devicemapper</systemitem>: this driver
      relies on the device-mapper thin provisioning module. It supports
      copy-on-write, so it leverages all the advantages of the &deng;.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">btrfs</systemitem>: this driver relies on
      Btrfs to provide all the features required by the &deng;. To use this
      driver the <filename>/var/lib/docker</filename> directory must be on a
      Btrfs file system.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Since &productname;&nbsp;12, the Btrfs file system is used by default,
    which forces the &deng; to use the
    <systemitem class="resource">btrfs</systemitem> driver.
   </para>
   <para>
    It is possible to specify what driver to use by changing the value of the
    <envar>DOCKER_OPTS</envar> variable defined in the
    <filename>/etc/sysconfig/docker</filename> file. This can be done either
    manually or using &yast; by browsing to <menuchoice>
    <guimenu>System</guimenu> <guimenu>/etc/sysconfig Editor</guimenu>
    <guimenu>System</guimenu> <guimenu>Management</guimenu>
    <guimenu>DOCKER_OPTS</guimenu> </menuchoice> menu and entering the
    <systemitem class="library">-s storage_driver</systemitem> string.
   </para>
   <para>
    For example, to force the usage of the
    <systemitem class="resource">devicemapper</systemitem> driver enter the
    following text:
   </para>
<screen>DOCKER_OPTS="-s devicemapper"</screen>
   <important>
    <title>Mounting <filename>/var/lib/docker</filename></title>
    <para>
     It is recommended to mount <filename>/var/lib/docker</filename> on a
     separate partition or volume. In case of file system corruption, this
     would leave the operating system running the &deng; unaffected.
    </para>
    <para>
     If you choose the Btrfs file system for
     <filename>/var/lib/docker</filename>, it is strongly recommended to create
     a subvolume for it. This ensures that the directory is excluded from file
     system snapshots. If you do not exclude
     <filename>/var/lib/docker</filename> from snapshots, the file system will
     likely run out of disk space soon after you start deploying containers. In
     addition, a rollback to a previous snapshot will also reset the &docker;
     database and images. For more information, see
     <xref linkend="sec-snapper-setup-customizing-new-subvolume"/>.
    </para>
   </important>
  </sect2>
 </sect1>
</chapter>
