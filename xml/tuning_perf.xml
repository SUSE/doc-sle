<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!--
 Version:
 * SLE12 SP1: perf-3.12.48

Info providers:
Tony Jones, Mel Gorman.

-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-perf">
 <title>Hardware-Based Performance Monitoring with Perf</title>
 <info>
  <abstract>
   <para>
    Perf is an interface to access the performance monitoring unit (PMU) of a
    processor and to record and display software events such as page faults.
    It supports system-wide, per-thread, and &kvm; virtualization guest
    monitoring.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
  </dm:docmanager>
 </info>
 <para>
  You can store resulting information in a report.
  This report contains information about, for example, instruction pointers or
  what code a thread was executing.
 </para>
 <para>
  Perf consists of two parts:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Code integrated into the Linux kernel that is responsible for instructing
    the hardware.
   </para>
  </listitem>
  <listitem>
   <para>
    The <command>perf</command> user space utility that allows you to use the
    kernel code and helps you analyze gathered data.
   </para>
  </listitem>
 </itemizedlist>
 <remark>
  TODO: An infographic would be a nice touch. We have event sources for perf here:
  http://www.brendangregg.com/perf_events/perf_events_map.png
  Not exactly sure that that is what we want. - sknorr, 2015-10-16
 </remark>

 <sect1 xml:id="sec-perf-concept">
  <title>Hardware-Based Monitoring</title>

  <para>
   Performance monitoring means collecting information related to how an
   application or system performs.
   This information can be obtained either through software-based means or from
   the CPU or chipset.
   Perf integrates both of these methods.
  </para>
  <para>
   Many modern processors contain a performance monitoring unit (PMU).
   The design and functionality of a PMU is CPU-specific.
   For example, the number of registers, counters and features supported will
   vary by CPU implementation.
  </para>
  <para>
   Each PMU model consists of a set of registers: the performance monitor
   configuration (PMC) and the performance monitor data (PMD).
   Both can be read, but only PMCs are writable.
   These registers store configuration information and data.
  </para>
 </sect1>

 <sect1 xml:id="sec-perf-sample-count">
  <title>Sampling and Counting</title>
  <para>
   Perf supports several profiling modes:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>Counting</title>
     <para>
      Count the number of occurrences of an event.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Event-Based Sampling</title>
     <para>
      A less exact way of counting: A sample is recorded whenever a certain
      threshold number of events has occurred.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Time-Based Sampling</title>
     <para>
      A less exact way of counting: A sample is recorded in a defined frequency.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <!-- See FATE# 315868 -->
     <title>Instruction-Based Sampling (&amd64; only)</title>
     <para>
      The processor follows instructions appearing in a given interval and
      samples which events they produce.
      This allows following up on individual instructions and seeing which of
      them is critical to performance.
     </para>
    </formalpara>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="sec-perf-install">
  <title>Installing Perf</title>

  <para>
   The Perf kernel code is already included with the default kernel.
   To be able to use the user space utility, install the package
   <package>perf</package>.
  </para>
  <!--
    On System z, there may be some more work involved, as you need to
    "activate the cpu measurement facility":
    http://public.dhe.ibm.com/software/dw/linux390/perf/Tools-MK2-V7-Web.pdf#page=124
    - sknorr, 2015-10-08
   -->
 </sect1>

 <sect1 xml:id="sec-perf-subcommand">
  <title>Perf Subcommands</title>

  <para>
   To gather the required information, the <command>perf</command> tool has
   several subcommands. This section gives an overview of the most often used
   commands.
  </para>
  <para>
   To see help in the form of a man page for any of the subcommands, use either
   <command>perf help</command><replaceable>SUBCOMMAND</replaceable>
   or
   <command>man perf-</command><replaceable>SUBCOMMAND</replaceable>.
  </para>

  <variablelist>
   <varlistentry>
    <term><command>perf stat</command></term>
    <listitem>
     <para>
      Start a program and create a statistical overview that is displayed after
      the program quits.
      <command>perf stat</command> is used to count events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>perf record</command></term>
    <listitem>
     <para>
      Start a program and create a report with performance counter information.
      The report is stored as <filename>perf.data</filename> in the current
      directory.
      <command>perf record</command> is used to sample events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>perf report</command></term>
    <listitem>
     <para>
      Display a report that was previously created with
      <command>perf record</command>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>perf annotate</command></term>
    <listitem>
     <para>
      Display a report file and an annotated version of the executed
      code.
      If debug symbols are installed, you will also see the source code
      displayed.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>perf list</command></term>
    <listitem>
     <para>
      List event types that Perf can report with the current kernel and with
      your CPU.
      You can filter event types by category&mdash;for example, to see hardware
      events only, use <command>perf list hw</command>.
     </para>
     <para>
      The man page for <command>perf_event_open</command> has short descriptions
      for the most important events.
      For example, to find a description of the event
      <systemitem>branch-misses</systemitem>, search for
      <literal>BRANCH_MISSES</literal> (note the spelling differences):
     </para>
<screen>&prompt.user;<command>man</command> perf_event_open | <command>grep</command> -A5 <replaceable>BRANCH_MISSES</replaceable></screen>
     <para>
      Sometimes, events may be ambiguous.
      Note that the lowercase hardware event names are not the name of raw
      hardware events but instead the name of aliases created by Perf.
      These aliases map to differently named but similarly defined hardware
      events on each supported processor.
     </para>
     <para>
      For example, the <systemitem>cpu-cycles</systemitem> event is mapped to
      the hardware event <systemitem>UNHALTED_CORE_CYCLES</systemitem> on
      Intel processors.
      On AMD processors, however, it is mapped to the hardware event
      <systemitem>CPU_CLK_UNHALTED</systemitem>.
     </para>
     <para>
      Perf also allows measuring raw events specific to your hardware.
      To look up their descriptions, see the
      Architecture Software Developer's Manual of your CPU vendor.
      The relevant documents for &x86-64; processors are linked to in
      <xref linkend="sec-perf-more"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>perf top</command></term>
    <listitem>
     <para>
      Display system activity as it happens.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>perf trace</command></term>
     <listitem>
      <para>
      This command behaves similarly to <command>strace</command>.
      With this subcommand, you can see which system calls are executed by a
      particular thread or process and which signals it receives.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-perf-event">
  <title>Counting Particular Types of Event</title>
  <para>
   To count the number of occurrences of an event, such as those displayed by
   <command>perf list</command>, use:
  </para>
<screen>&prompt.root;<command>perf</command> stat -e <replaceable>EVENT</replaceable> -a</screen>
  <para>
   To count multiple types of events at once, list them separated by commas.
   For example, to count <systemitem>cpu-cycles</systemitem> and
   <systemitem>instructions</systemitem>, use:
  </para>
<screen>&prompt.root;<command>perf</command> stat -e cpu-cycles,instructions -a</screen>
  <para>
   To stop the session, press
   <keycombo><keycap function="control"/><keycap>C</keycap></keycombo>.
  </para>
  <remark>
    Input from Tony Jones: "perhaps cover case where #events > #pmus so kernel
    time slices (i.e [xx.yy%] in output)" - sknorr, 2015-10-30
  </remark>
  <para>
   You can also count the number of occurrences of an event within a particular
   time:
  </para>
<screen>&prompt.root;<command>perf</command> stat -e <replaceable>EVENT</replaceable> -a -- sleep <replaceable>TIME</replaceable></screen>
  <para>
   Replace <replaceable>TIME</replaceable> by a value in seconds.
  </para>
 </sect1>

 <sect1 xml:id="sec-perf-command">
  <title>Recording Events Specific to Particular Commands</title>
  <para>
   There are various ways to sample events specific to a particular command:
  </para>
  <itemizedlist>
   <listitem>
     <para>
      To create a report for a newly invoked command, use:
     </para>
<screen>&prompt.root;<command>perf</command> record <replaceable>COMMAND</replaceable></screen>
     <para>
      Then, use the started process normally.
      When you quit the process, the Perf session will also stop.
     </para>
   </listitem>
   <listitem>
     <para>
      To create a report for the entire system while a newly invoked command is
      running, use:
     </para>
<screen>&prompt.root;<command>perf</command> record -a <replaceable>COMMAND</replaceable></screen>
     <para>
      Then, use the started process normally.
      When you quit the process, the Perf session will also stop.
     </para>
   </listitem>
   <listitem>
     <para>
      To create a report for an already running process, use:
     </para>
<screen>&prompt.root;<command>perf</command> record -p <replaceable>PID</replaceable></screen>
     <para>
      Replace <replaceable>PID</replaceable> with a process ID.
      To stop the session, press
      <keycombo><keycap function="control"/><keycap>C</keycap></keycombo>.
     </para>
   </listitem>
  </itemizedlist>
  <para>
   Now you can view the gathered data (<filename>perf.data</filename>)
   using:
  </para>
<screen>&prompt.user;<command>perf</command> report</screen>
  <para>
   This will open a pseudo-graphical interface.
   <!-- `perf report` recommends ? for Help, but H works too. `perf annotate`
   only allows H, while ? opens a search window.
   => Use the one that works for both, since you can switch between
   both modes without quitting. - sknorr, 2015-10-14 -->
   To receive help, press <keycap>H</keycap>.
   To quit, press <keycap>Q</keycap>.
  </para>
  <remark>Some more information about interpreting data from this utility might
  be helpful... - sknorr, 2015-10-14</remark>
  <remark>Feedback on this from Mel Gorman: "[D]o not get into this. You could
    write a small book on the subject and still not cover all the details."
    - sknorr, 2015-10-16
  </remark>
  <para>
   If you prefer a graphical interface, try the GTK+ interface of Perf:
  </para>
<screen>&prompt.user;<command>perf</command> report --gtk</screen>
  <para>
    However, note that the GTK+ interface is very limited in functionality.
    <remark>
      It provides a scrollable list and tabs and not much else.
      - sknorr, 2015-10-30
    </remark>
  </para>
 </sect1>

 <sect1 xml:id="sec-perf-more">
  <title>For More Information</title>

  <para>
   This chapter only provides a short overview. Refer to the following links
   for more information:
  </para>

  <variablelist>
   <varlistentry>
    <term><link xlink:href="https://perf.wiki.kernel.org/index.php/Main_Page"/>
    </term>
    <listitem>
     <para>
      The project home page.
      It also features a tutorial on using <command>perf</command>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="http://www.brendangregg.com/perf.html"/>
    </term>
    <listitem>
     <para>
      Unofficial page with many one-line examples of how to use
      <command>perf</command>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="http://web.eece.maine.edu/~vweaver/projects/perf_events/"/>
    </term>
    <listitem>
     <para>
      Unofficial page with several resources, mostly relating to the Linux
      kernel code of Perf and its API.
      This page includes, for example, a CPU compatibility table and a
      programming guide.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="https://www-ssl.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-2-manual.pdf"/>
    </term>
    <listitem>
     <para>
      The <citetitle>Intel Architectures Software Developer's Manual,
      Volume 3B</citetitle>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="https://support.amd.com/TechDocs/24593.pdf"/>
    </term>
    <listitem>
     <para>
      The <citetitle>AMD Architecture Programmer's Manual, Volume 2</citetitle>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><xref linkend="cha-tuning-oprofile"/>
    </term>
    <listitem>
     <para>
      Consult this chapter for other performance optimizations.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
