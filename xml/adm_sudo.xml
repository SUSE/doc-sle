<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.adm.sudo"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>sudo <!-- TODO: Better title --></title>
  <subtitle><quote>With great power comes great responsibility</quote></subtitle>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker></dm:bugtracker>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>

  <para>
    Many commands and system utilities need to be run as &rootuser;
    to modify files and/or perform tasks that only the super user is allowed to.

    For security purposes and to avoid running dangerous commands accidentially,
    it is generally disregarded to log in as &rootuser; directly.
    Instead, it is recommended to work as a normal, unprivileged, user and
    use the &sudo; command to run commands with elevated privileges.
  </para>

  <sect1 xml:id="sec.adm.sudo.intro.sudovssu">
    <title>Difference between &sudo; and <command>su</command></title>
    <para>
      In its default configuration, &sudo; is, apart of different options,
      similiar to <command>su</command>.
      Compared to <command>su</command>, &sudo; offers the possibility to allow users
      to run commands with privileges of any other user in a highly configurable manner.
      While <command>su</command> always uses PAM for authenticating as target user,
      &sudo; makes it possible to authenticate with your own credentials.
      This increases security by not having to share the &rootuser; password.

      For instance, you can allow members of the group &examplegroup; to run a command <command>frobnicate</command>
      as &exampleuserII;, with the restriction that no arguments are specified.
      This can be used to assign roles with specific abilities to certain users and groups.
    </para>
  </sect1>

  <sect1 xml:id="sec.adm.sudo.usage">
    <title>Basic &sudo; usage</title>

    <para>
      &sudo; is simple to use, yet very powerful.
    </para>

    <sect2 xml:id="sec.adm.sudo.usage.cmd">
      <title>Running a single command</title>
      <para>
        Logged in as normal user, you can run any command as &rootuser; by prepending it with &sudo;.
        It will prompt for the root password and, if authenticated sucessfully, run the command as &rootuser;:
      </para>

      <screen>
&prompt.user;id -un<co xml:id="co.sudo.usage.id"/>
tux
&prompt.user;sudo id -un
root's password:<co xml:id="co.sudo.usage.pw"/>
root
&prompt.user;id -un
tux<co xml:id="co.sudo.usage.after"/>
&prompt.user;sudo id -un
<co xml:id="co.sudo.usage.nopw"/>
root
</screen>

      <calloutlist>
        <callout arearefs="co.sudo.usage.id">
          <para>The <command>id</command> command prints information about a user, the current one if not specified.</para>
        </callout>
        <callout arearefs="co.sudo.usage.pw">
          <para>The password is not shown during input, neither as clear text nor as bullets.</para>
        </callout>
        <callout arearefs="co.sudo.usage.after">
          <para>Only the single command is run with elevated privileges, those after &sudo;
          are run as normal user again.</para>
        </callout>
        <callout arearefs="co.sudo.usage.nopw">
          <para>For a limited amount of time you do not need to enter the &rootuser; password again.</para>
        </callout>
      </calloutlist>

      <tip>
        <title>I/O redirection</title>
        <para>
          I/O redirection does not directly work that way:
        </para>

        <screen>
&prompt.user; sudo echo s &gt; /proc/sysrq-trigger 
bash: /proc/sysrq-trigger: Permission denied
&prompt.user; sudo cat &lt; /proc/1/maps
bash: /proc/1/maps: Permission denied
</screen>

        <para>
          Only the <command>echo</command>/<command>cat</command> binary is run with elevated privileges,
          while the redirection is performed by the user's shell.

          You can either start a shell like in <xref linkend="sec.sudo.shell"/>
          or use the <command>dd</command> utility instead:
        </para>

        <screen>
echo s | sudo dd of=/proc/sysrq-trigger
sudo dd if=/proc/1/maps | cat <!-- TODO: Better example! -->
</screen>
      </tip>
    </sect2>

    <sect2 xml:id="sec.sudo.shell">
      <title>Starting a shell</title>
      <para>
        Having to prepend &sudo; to every command can be cumbersome.
        While you can specify a shell as a command: <command>sudo bash</command>,
        there are two options specifically for this purpose.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <literal>sudo -s (&lt;command&gt;)</literal>
          </term>
          <listitem>
            <para>
              Starts a shell specified by the <envar>SHELL</envar> environment variable or the target user's settings.
              If a command is given, it is passed to the shell (with the <option>-c</option> option),
              else the shell is run in interactive mode.
            </para>
            <screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -i
root's password:
<prompt>root:/home/tux # </prompt>exit
<prompt>&exampleuser_plain;:~ &gt; </prompt>
</screen>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <literal>sudo -i (&lt;command&gt;)</literal>
          </term>
          <listitem>
            <para>
              Like <option>-s</option>, but start the shell as login shell.
              This means that the shell's start-up files (<filename>.profile</filename> etc.) are read
              and the current working directory is set to the target user's <envar>HOME</envar>.
            </para>
            <screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -i
root's password:
<prompt>root:~ # </prompt>exit
<prompt>&exampleuser_plain;:~ &gt; </prompt>
            </screen>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="sec.adm.sudo.usage.env">
      <title>Environment variables</title>
      <para>By default, &sudo; does not propagate environment variables:</para>
      <screen>
&prompt.user;ENVVAR=test env | grep ENVVAR
ENVVAR=test
&prompt.user;ENVVAR=test sudo env | grep ENVVAR
root's password:
<co xml:id="co.sudo.env.novar"/>
&prompt.user;
      </screen>
      <calloutlist>
        <callout arearefs="co.sudo.env.novar">
          <para>
            The empty output shows that the environment variable <envar>ENVVAR</envar>
            did not exist in the context of the command run with &sudo;.
          </para>
        </callout>
      </calloutlist>

      <para>This behaviour can be changed by the <literal>env_reset</literal> option, see <xref linkend="tab.adm.sudo.options"/>.</para>
    </sect2>
  </sect1>

  <sect1 xml:id="sec.sudo.conf">
    <title>Configuring &sudo;</title>

    <para>
      &sudo; is a very flexible tool with extensive configuration.
    </para>

    <sect2 xml:id="sec.sudo.conf.edit">
      <title>Editing the configuration files</title>
      <para>
        The main policy configuration file for &sudo; is <filename>/etc/sudoers</filename>.
        As it is possible to lock yourself out of the system if there are any errors in that file, it is
        strongly recommended to use <command>visudo</command> for editing.
        It will prevent simultaneous changes to the opened file and check for syntax errors before saving.
      </para>
      <para>
        Despite its name, you can also use editors other than vi by setting the <envar>EDITOR</envar>
        environment variable, for example:
      </para>
      <screen>sudo EDITOR=<replaceable>/usr/bin/nano</replaceable> visudo</screen>

      <para>
        However, the <filename>/etc/sudoers</filename> file itself is supplied by the system packages and
        modifications may break on updates. Therefore, it is recommended to put any custom configuration into
        the <filename>/etc/sudoers.d/</filename> directory. Any file in there is automatically included.
        To edit a file in that subdirectory, run:
        </para>
      <screen>sudo visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable></screen>

      <para>Or with <command>nano</command> as editor:</para>
      <screen>sudo EDITOR=<replaceable>/usr/bin/nano</replaceable> visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable></screen>

      <para>For more info on the <command>visudo</command> command, run <command>man visudo</command>.</para>
    </sect2>

    <sect2 xml:id="sec.sudo.conf.syntax">
      <title>Basic sudoers syntax</title>
      <para>
        The most important syntax constructs for <filename>/etc/sudoers</filename>
        and files under <filename>/etc/sudoers.d</filename> are:
      </para>

      <screen>
# Everything on a line after a # gets ignored <co xml:id="co.sudo.syntax.comment"/>
Defaults !insults # Disable the insults flag <co xml:id="co.sudo.syntax.flag"/>
Defaults env_keep += "DISPLAY HOME" # Add DISPLAY and HOME to env_keep
&exampleuser_plain;<co xml:id="co.sudo.syntax.user"/> ALL = NOPASSWD: /usr/bin/frobnicate<co xml:id="co.sudo.syntax.cmds"/>, PASSWD: /usr/bin/journalctl <co xml:id="co.sudo.syntax.passwd"/>
&exampleuser_plain; ALL = /usr/bin/journalctl # Same as above, but without /usr/bin/frobnicate
</screen>

      <calloutlist>
        <callout arearefs="co.sudo.syntax.comment">
          <para>
            There are two exceptions: <literal>#include</literal> and <literal>#includedir</literal> are normal commands. Followed by digits, it specifies a UID.
          </para>
        </callout>
        <callout arearefs="co.sudo.syntax.flag">
          <para>
            Remove the <literal>!</literal> to enable the flag.
          </para>
        </callout>
        <callout arearefs="co.sudo.syntax.user">
          <para>
            The user name can also be in the form of <literal>#<replaceable>UID</replaceable></literal> or <literal>%<replaceable>GROUPNAME</replaceable></literal>.
          </para>
        </callout>
        <callout arearefs="co.sudo.syntax.cmds">
          <para>
            Commands need to be absolute paths. There can be multiple, seperated by <literal>,</literal>.
          </para>
        </callout>
        <callout arearefs="co.sudo.syntax.passwd">
          <para>
            This line allows &exampleuser; to run <command>/usr/bin/frobnicate</command> without being prompted for a password
            and <command>/usr/bin/journalctl</command> only after successful password entry.
          </para>
        </callout>
      </calloutlist>

      <warning>
        <title>Dangerous constructs</title>

        <para>Constructs of the kind</para>
        <screen>ALL ALL = ALL</screen>            
        <para>
          <emphasis>must not</emphasis> be used without <literal>Defaults targetpw</literal>, otherwise anyone can run commands as &rootuser;
        </para>
      </warning>

      <table xml:id="tab.adm.sudo.options">
        <title>Useful flags and options</title>
        <tgroup cols="3">
          <thead>
            <row><entry><para>Option name</para></entry><entry><para>Description</para></entry><entry><para>Example</para></entry></row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>targetpw</literal>
              </entry>
              <entry>
                <para>
                  This flag controls whether the invoking user is required to enter the password of the target user (&rootuser;) (ON),
                  or his own password (OFF). The default is ON.
                </para>
              </entry>
              <entry>
                <screen>Defaults targetpw # Turn targetpw flag ON</screen>
              </entry>
            </row>
            <row>
              <entry>
                <literal>rootpw</literal>
              </entry>
              <entry>
                <para>
                  If set, &sudo; will prompt for the &rootuser; password instead of the target user's or the invoker's.
                  The default is OFF.
                </para>
              </entry>
              <entry>
                <screen>Defaults !rootpw # Turn rootpw flag OFF</screen>
              </entry>
            </row>
            <row>
              <entry>
                <literal>env_reset</literal>
              </entry>
              <entry>
                <para>
                  If set, &sudo; constructs a minimal environment with only
                  <envar>TERM</envar>, <envar>PATH</envar>, <envar>HOME</envar>,
                  <envar>MAIL</envar>, <envar>SHELL</envar>, <envar>LOGNAME</envar>,
                  <envar>USER</envar>, <envar>USERNAME</envar> and <envar>SUDO_*</envar> set.
                  Additionally, variables listed in <literal>env_keep</literal> get imported from the calling environment.
                  The default is ON.
                </para>
              </entry>
              <entry>
                <screen>Defaults env_reset # Turn env_reset flag ON</screen>
              </entry>
            </row>
            <row>
              <entry>
                <literal>env_keep</literal>
              </entry>
              <entry>
                <para>
                  List of environment variables to keep when the <literal>env_reset</literal> flag is ON.
                </para>
              </entry>
              <entry>
                <screen>
# Set env_keep to contain EDITOR and PROMPT
Defaults env_keep = "EDITOR PROMPT"
Defaults env_keep += "JRE_HOME" # Add JRE_HOME
Defaults env_keep -= "JRE_HOME" # Remove JRE_HOME
</screen>
              </entry>
            </row>
            <row>
              <entry>
                <literal>env_delete</literal>
              </entry>
              <entry>
                <para>
                  List of environment variables to remove when the <literal>env_reset</literal> flag is OFF.
                </para>
              </entry>
              <entry>
                <screen>
# Set env_delete to contain EDITOR and PROMPT
Defaults env_delete = "EDITOR PROMPT"
Defaults env_delete += "JRE_HOME" # Add JRE_HOME
Defaults env_delete -= "JRE_HOME" # Remove JRE_HOME
</screen>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        The <literal>Defaults</literal> token can also be used to create aliases for a collection
        of users, hosts and commands.
        Furthermore, it is possible to apply an option setting only to a specific set of users.
      </para>

      <para>
        For detailed information about the <filename>/etc/sudoers</filename> configuration file, consult
        <command>man 5 sudoers</command>.
      </para>
    </sect2>
  </sect1>
  
  <sect1 xml:id="sec.sudo.usecases">
    <title>Common use cases</title>
    
    <para>
      Although the default configuration is often enough for simple setups and desktops,
      custom configurations can be very useful.
    </para>
    
    <sect2 xml:id="sec.sudo.usecases.ownpw">
      <title>&sudo; without &rootuser; password</title>
      <para>
        In cases with special restrictions (<quote>user X can only run command Y as &rootuser;</quote>)
        it is not possible. In other cases, it is still favorable to have some kind of separation.
      </para>

      <para>
        To make authentication with the invoking user's password the default, a single line needs to be added.        
        Create the file <filename>/etc/sudoers.d/userpw</filename> with <command>visudo</command>
        (see <xref linkend="sec.sudo.conf.edit"/>) and add:
      </para>
      <screen>Defaults !targetpw</screen>

      <para>
        The default rule allowing any user to run commands:
      </para>
      <screen>ALL     ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'!</screen>
      <para>
        in <filename>/etc/sudoers</filename> needs to be replaced by a more restrictive one.
        By convention, the group <systemitem class="groupname">wheel</systemitem> is used for this purpose.
        Depending on whether you want users to re-enter their passwords, uncomment the specific line
        in <filename>/etc/sudoers</filename> and comment out the default rule.
      </para>

      <screen>
## Uncomment to allow members of group wheel to execute any command
# %wheel ALL=(ALL) ALL

## Same thing without a password
# %wheel ALL=(ALL) NOPASSWD: ALL
</screen>

      <warning>
        <title>Dangerous rule in sudoers</title>
        <para>Do not forget to remove the</para>
        <screen>ALL     ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'!</screen>
        <para>
          line in <filename>/etc/sudoers</filename>.
          Otherwise <emphasis>any</emphasis> user can execute <emphasis>any</emphasis>
          command as &rootuser;!
        </para>
      </warning>
    </sect2>

    <sect2 xml:id="sec.sudo.usecases.xorg">
      <title>&sudo; for &xvendor; applications</title>
      <para>
        When starting graphical applications with &sudo;, you will encounter the following error:
      </para>

      <screen>
&prompt.user; sudo xterm
xterm: Xt error: Can't open display: %s
xterm: DISPLAY is not set
      </screen>

      <para>
        &yast; will pick the ncurses interface instead of the graphical one.
      </para>

      <para>
        To use &xvendor; in applications started with &sudo;, the environment variables
        <envar>DISPLAY</envar> and <envar>XAUTHORITY</envar> need to be propagated.
        To configure this, create the file <filename>/etc/sudoers.d/xorg</filename>,
        (see <xref linkend="sec.sudo.conf.edit"/>) and add the following line:
      </para>

      <screen>Defaults env_keep += "DISPLAY XAUTHORITY"</screen>

      <para>
        If not set already, set the <envar>XAUTHORITY</envar> variable as follows:
        <screen>export XAUTHORITY=~/.Xauthority</screen>
        Now &xvendor; applications can be run as usual:
      </para>
      
      <screen>sudo yast2</screen>
      <warning>
        <title>Potential security issue</title>
        <para>
          As every &xvendor; client can control other &xvendor; clients on the same display.
          A malicious application can thus use the program to perform actions with elevated privileges.
        </para>
      </warning>
    </sect2>
  </sect1>
    
  <sect1 xml:id="sec.adm.sudo.moreinfo">
    <title>More Information</title>

    <para>
    A quick overview about the available command line switches can be retrieved
    by <command>sudo --help</command>. An explanation and other important information
    can be found in the man page: <command>man 8 sudo</command>, while the configuration
    is documented on <command>man 5 sudoers</command>.
    </para>
  </sect1>
</chapter>
