<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<!-- toms 2014-02-24: GUIs for GNOME and KDE removed as they are not
     existant anymore :-(
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-policykit">
 <title>Authorization with &pk;</title>
 <info>
      <abstract>
        <para>
    &pk; (formerly known as PolicyKit) is an application framework that
    acts as a negotiator between the unprivileged user session and the
    privileged system context. Whenever a process from the user session
    tries to carry out an action in the system context, &pk; is queried.
    Based on its configuration&mdash;specified in a so-called
    <quote>policy</quote>&mdash;the answer could be <quote>yes</quote>,
    <quote>no</quote>, or <quote>needs authentication</quote>. Unlike
    classical privilege authorization programs such as sudo, &pk; does
    not grant &rootuser; permissions to an entire session, but only to
    the action in question.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-security-policykit-oview">
  <title>Conceptual Overview</title>

  <para>
<!--&pk; is a framework for defining and handling
     authorizations to grant access to privileged operations for unprivileged
     applications.-->
   &pk; works by limiting specific actions by users, by group, or by
   name. It then defines how those users are allowed to perform this
   action.
  </para>

  <remark>toms 2013-10-02: Add graphic about system architecture</remark>

  <sect2 xml:id="sec-security-policykit-agents">
   <title>Available Authentication Agents</title>
   <para>
    When a user starts a session (using the graphical environment or on the
    console), each session consists of the
    <emphasis>authority</emphasis> and an <emphasis>authentication
    agent</emphasis>. The authority is implemented as a service on the
    system message bus, whereas the authentication agent is used to
    authenticate the current user, which started the session. The current
    user needs to prove their authenticity, for example, using a passphrase.
   </para>
   <para>
    Each desktop environment has its own authentication agent. Usually it is
    started automatically, whatever environment you choose.
   </para>
<!--<table>
      <title>Authentication Agents for Desktop Environments</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>
              <para>Desktop</para>
            </entry>
            <entry>
              <para>Package</para>
            </entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>&gnome;</para>
            </entry>
            <entry>
              <para><systemitem>gconf-polkit</systemitem></para>
            </entry>
          </row>
          <row>
            <entry>
              <para>KDE</para>
            </entry>
            <entry>
              <para><systemitem>polkit-kde-agent-1</systemitem></para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>-->
  </sect2>

  <sect2 xml:id="sec-security-policykit-structure">
   <title>Structure of &pk;</title>
   <para>
    &pk;'s configuration depends on <emphasis>actions</emphasis> and
    <emphasis>authorization rules</emphasis>:
   </para>
   <variablelist>
    <varlistentry>
     <term>Actions (file extension <filename>*.policy</filename>)</term>
     <listitem>
      <para>
       Written as XML files and located in
       <filename>/usr/share/polkit-1/actions</filename>. Each file defines
       one or more actions, and each action contains descriptions and
       default permissions. Although a system administrator can write their
       own rules, &pk;'s files must not be edited.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Authorization Rules (file extension <filename>*.rules</filename>)</term>
     <listitem>
      <para>
       Written as JavaScript files and located in two places:
       <filename>/usr/share/polkit-1/rules.d </filename> is used for third
       party packages and <filename>/etc/polkit-1/rules.d</filename> for
       local configurations. Each rule file refers to the action specified
       in the action file. A rule determines what restrictions are allowed
       to a subset of users. For example, a rule file could overrule a
       restrictive permission and allow some users to allow it.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-policykit-oview-commands">
   <title>Available Commands</title>
   <para>
    &pk; contains several commands for specific tasks (see also the
    specific man page for further details):
   </para>
   <variablelist>
    <varlistentry>
     <term><command>pkaction</command>
     </term>
     <listitem>
      <para>
       Get details about a defined action. See
       <xref linkend="sec-security-policykit-query"/> for more
       information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkcheck</command>
     </term>
     <listitem>
      <para>
       Checks whether a process is authorized, specified by either
       <option>--process</option> or <option>--system-bus-name</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkexec</command>
     </term>
     <listitem>
      <para>
       Allows an authorized user to execute the specific program as another
       user.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkttyagent</command>
     </term>
     <listitem>
      <para>
       Starts a textual authentication agent. This agent is used if a
       desktop environment does not have its own authentication agent.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-policykit-oview-authorizations">
   <title>Available Policies and Supported Applications</title>
   <para>
    At the moment, not all applications requiring privileges use
    &pk;. Find the most important policies available on
    &productnamereg; below, sorted into the categories where they are
    used.
   </para>
   <variablelist>
    <varlistentry>
     <term>PulseAudio</term>
     <listitem>
      <simplelist>
       <member>Set scheduling priorities for the PulseAudio daemon</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>CUPS</term>
     <listitem>
      <simplelist>
       <member>Add, remove, edit, enable or disable printers</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry os="sled;osuse">
     <term>Backup Manager</term>
     <listitem>
      <simplelist>
       <member>Modify schedule</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&gnome;</term>
     <listitem>
      <simplelist>
       <member>Modify system and mandatory values with GConf</member>
       <member>Change the system time</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry os="sles;osuse">
     <term>libvirt</term>
     <listitem>
      <simplelist>
       <member>Manage and monitor local virtualized systems</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry os="sled;osuse">
     <term>&nm;</term>
     <listitem>
      <simplelist>
       <member>Apply and modify connections</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&pk;</term>
     <listitem>
      <simplelist>
       <member>Read and change privileges for other users</member>
       <member>Modify defaults</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>PackageKit</term>
     <listitem>
      <simplelist>
       <member>Update and remove packages</member>
       <member>Change and refresh repositories</member>
       <member>Install local files</member>
       <member>Rollback</member>
       <member>Import repository keys</member>
       <member>Accepting EULAs</member>
       <member>Setting the network proxy</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>System</term>
     <listitem>
      <simplelist>
       <member>Wake on LAN</member>
       <member>Mount or unmount fixed, hotpluggable and encrypted
       devices</member>
       <member>Eject and decrypt removable media</member>
       <member>Enable or disable WLAN</member>
       <member>Enable or disable Bluetooth</member>
       <member>Device access</member>
       <member>Stop, suspend, hibernate and restart the system</member>
       <member>Undock a docking station</member>
       <member>Change power-management settings</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&yast;</term>
     <listitem>
      <simplelist>
       <member>Register product</member>
       <member>Change the system time and language</member>
      </simplelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-policykit-types">
  <title>Authorization Types</title>

  <para>
   Every time a &pk;-enabled process carries out a privileged operation,
   &pk; is asked whether this process is entitled to do so. &pk;
   answers according to the policy defined for this process. The answers can
   be <literal>yes</literal>, <literal>no</literal>, or
   <literal>authentication needed</literal>. By default, a policy contains
   <literal>implicit</literal> privileges, which automatically apply to all
   users. It is also possible to specify <literal>explicit</literal>
   privileges which apply to a specific user.
  </para>

  <sect2 xml:id="sec-security-policykit-policies-implicit">
   <title>Implicit Privileges</title>
   <para>
    Implicit privileges can be defined for any active and inactive sessions.
    An active session is the one in which you are currently working. It
    becomes inactive when you switch to another console for example. When
    setting implicit privileges to <quote>no</quote>, no user is authorized,
    whereas <quote>yes</quote> authorizes all users. However, usually
    it is useful to demand authentication.
   </para>
   <para>
    A user can either authorize by authenticating as &rootuser; or by
    authenticating as self. Both authentication methods exist in four
    variants:
   </para>
   <variablelist>
    <varlistentry>
     <term>Authentication</term>
     <listitem>
      <para>
       The user always needs to authenticate.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>One Shot Authentication</term>
     <listitem>
      <para>
       The authentication is bound to the instance of the program currently
       running. After the program is restarted, the user is required to
       authenticate again.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Keep Session Authentication</term>
     <listitem>
      <para>
       The authentication dialog offers a check button <guimenu>Remember
       authorization for this session</guimenu>. If checked, the
       authentication is valid until the user logs out.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Keep Indefinitely Authentication</term>
     <listitem>
      <para>
       The authentication dialog offers a check button <guimenu>Remember
       authorization</guimenu>. If checked, the user needs to authenticate
       only once.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-policykit-policies-explicit">
   <title>Explicit Privileges</title>
   <para>
    Explicit privileges can be granted to specific users. They can either be
    granted without limitations, or, when using constraints, limited to an
    active session and/or a local console.
   </para>
   <para>
    It is not only possible to grant privileges to a user, a user can also
    be blocked. Blocked users cannot carry out an action
    requiring authorization, even though the default implicit policy allows
    authorization by authentication.
   </para>
  </sect2>

  <sect2 xml:id="sec-security-policykit-policies-default">
   <title>Default Privileges</title>
   <para>
    Each application supporting &pk; comes with a default set of implicit
    policies defined by the application's developers. Those policies are the
    so-called <quote>upstream defaults</quote>. The privileges defined by
    the upstream defaults are not necessarily the ones that are activated by
    default on &suse; systems. &productname; comes with a predefined
    set of privileges that override the upstream defaults:
   </para>
   <variablelist>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.standard</filename>
     </term>
     <listitem>
      <para>
       Defines privileges suitable for most desktop
       systems<phrase os="sled">. It is active by default.</phrase>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.restrictive</filename>
     </term>
     <listitem>
      <para>
       Designed for machines administrated centrally<phrase os="sles">. It
       is active by default.</phrase>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To switch between the two sets of default privileges, adjust the value
    of <varname>POLKIT_DEFAULT_PRIVS</varname> to either
    <literal>restrictive</literal> or <literal>standard</literal> in
    <filename>/etc/sysconfig/security</filename>. Then run the command
    <command>set_polkit_default_privs</command> as &rootuser;.
   </para>
   <para>
    Do not modify the two files in the list above. To define your
    own custom set of privileges, use
    <filename>/etc/polkit-default-privs.local</filename>. For details, refer
    to
    <xref linkend="sec-security-policykit-change-modify-config-implicit"/>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-policykit-query">
  <title>Querying Privileges</title>

  <para>
   To query privileges use the command <command>pkaction</command> included
   in &pk;.
  </para>

  <para>
   &pk; comes with command line tools for changing privileges and
   executing commands as another user (see
   <xref linkend="sec-security-policykit-oview-commands"/> for a short
   overview). Each existing policy has a speaking, unique name with which it
   can be identified. List all available policies with the command
   <command>pkaction</command>. See <command>man pkaction</command> for more
   information.
  </para>

  <para>
   If you want to display the needed authorization for a given policy (for
   example, <literal>org.freedesktop.login1.reboot</literal>) use
   <command>pkaction</command> as follows:
  </para>

<screen>&prompt.user;pkaction -v --action-id=org.freedesktop.login1.reboot
org.freedesktop.login1.reboot:
  description:       Reboot the system
  message:           Authentication is required to allow rebooting the system
  vendor:            The systemd Project
  vendor_url:        http://www.freedesktop.org/wiki/Software/systemd
  icon:
  implicit any:      auth_admin_keep
  implicit inactive: auth_admin_keep
  implicit active:   yes</screen>

  <para>
   The keyword <literal>auth_admin_keep</literal> means that users need to
   enter a passphrase.
  </para>

  <note>
   <title>Restrictions of <command>pkaction</command> on &productname;</title>
   <para>
    <command>pkaction</command> always operates on the upstream defaults.
    Therefore it cannot be used to list or restore the defaults shipped with
    &productname;. To do so, refer to
    <xref linkend="sec-security-policykit-change-defaults"/>.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-security-policykit-change-modify-config">
  <title>Modifying Configuration Files</title>

  <para>
   Adjusting privileges by modifying configuration files is useful when you
   want to deploy the same set of policies to different machines, for
   example to the computers of a specific team. It is possible to change
   implicit and explicit privileges by modifying configuration files.
  </para>

  <sect2 xml:id="sec-security-policykit-change-modify-config-actions">
   <title>Adding Action Rules</title>
   <para>
    The available actions depend on what additional packages you have
    installed on your system. For a quick overview, use
    <command>pkaction</command> to list all defined rules.
   </para>
   <para>
    To get an idea, the following example describes how the command
    <command>gparted</command> (<quote>&gnome; Partition Editor</quote>)
    is integrated into &pk;.
   </para>
   <para>
    The file
    <filename>/usr/share/polkit-1/actions/org.opensuse.policykit.gparted.policy</filename>
    contains the following content:
   </para>
<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd"&gt;
&lt;policyconfig&gt; <co xml:id="co-polkit-actions-policyconfig"/>

  &lt;action id="org-opensuse-policykit-gparted"&gt; <co xml:id="co-polkit-actions-action"/>
    &lt;message&gt;Authentication is required to run the GParted Partition Editor&lt;/message&gt;
    &lt;icon_name&gt;gparted&lt;/icon_name&gt;
    &lt;defaults&gt; <co xml:id="co-polkit-actions-defaults"/>
      &lt;allow_any&gt;auth_admin&lt;/allow_any&gt;
      &lt;allow_inactive&gt;auth_admin&lt;/allow_inactive&gt;
     &lt; allow_active&gt;auth_admin&lt;/allow_active&gt;
    &lt;/defaults&gt;
    &lt;annotate <co xml:id="co-polkit-actions-annotate"/>
      key="org.freedesktop.policykit.exec.path"&gt;/usr/sbin/gparted&lt;/annotate&gt;
    &lt;annotate <xref linkend="co-polkit-actions-annotate"/>
      key="org.freedesktop.policykit.exec.allow_gui"&gt;true&lt;/annotate&gt;
  &lt;/action&gt;

&lt;/policyconfig&gt;</screen>
   <calloutlist>
    <callout arearefs="co-polkit-actions-policyconfig">
     <para>
      Root element of the policy file.
     </para>
    </callout>
    <callout arearefs="co-polkit-actions-action">
     <para>
      Contains one single action.
     </para>
    </callout>
    <callout arearefs="co-polkit-actions-defaults">
     <para>
      The <literal>defaults</literal> element contains several permissions
      used in remote sessions like SSH, VNC (element
      <literal>allow_inactive</literal>), when logged directly into the
      machine on a TTY or X display (element
      <literal>allow_active</literal>), or for both (element
      <literal>allow_any</literal>). The value <literal>auth_admin</literal>
      indicates authentication is required as an administrative user.
     </para>
    </callout>
    <callout arearefs="co-polkit-actions-annotate">
     <para>
      The <literal>annotate</literal> element contains specific information
      regarding how &pk; performs an action. In this case, it contains
      the path to the executable and states whether a GUI is allowed to open
      a X display.
     </para>
    </callout>
   </calloutlist>
   <para>
    To add your own policy, create a <filename>.policy</filename> file with
    the structure above, add the appropriate value into the
    <literal>id</literal> attribute, and define the default permissions.
   </para>
  </sect2>

  <sect2 xml:id="sec-security-policykit-change-modify-config-authrules">
   <title>Adding Authorization Rules</title>
   <para>
    Your own authorization rules overrule the default settings. To add your
    own settings, store your files under
    <filename>/etc/polkit-1/rules.d/</filename>.
   </para>
   <para>
    The files in this directory start with a two-digit number, followed by a
    descriptive name, and end with <filename>.rules</filename>. Functions
    inside these files are executed in the order they have been sorted in.
    For example, <filename>00-foo.rules</filename> is sorted (and hence
    executed) before <filename>60-bar.rules</filename> or even
    <filename>90-default-privs.rules</filename>.
   </para>
   <para>
    Inside the file, the script checks for the specified action ID, which is
    defined in the <filename>.policy</filename> file. For example, if you
    want to allow the command <command>gparted</command> to be executed by
    any member of the <systemitem class="groupname">admin</systemitem>
    group, check for the action ID
    <literal>org.opensuse.policykit.gparted</literal>:
   </para>
<screen>/* Allow users in admin group to run GParted without authentication */
polkit.addRule(function(action, subject) {
    if (action.id == "org.opensuse.policykit.gparted" &amp;&amp;
        subject.isInGroup("admin")) {
        return polkit.Result.YES;
    }
});</screen>
   <para>
    Find the description of all classes and methods of the functions in the
    &pk; API at
    <link xlink:href="http://www.freedesktop.org/software/polkit/docs/latest/ref-api.html"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-security-policykit-change-modify-config-implicit">
   <title>Modifying Configuration Files for Implicit Privileges</title>
   <para>
    &productname; ships with two sets of default authorizations, located
    in <filename>/etc/polkit-default-privs.standard</filename> and
    <filename>/etc/polkit-default-privs.restrictive</filename>. For more
    information, refer to
    <xref linkend="sec-security-policykit-policies-default"/>.
   </para>
   <para>
    Custom privileges are defined in
    <filename>/etc/polkit-default-privs.local</filename>. Privileges defined
    here will always take precedence over the ones defined in the other
    configuration files. To define your custom set of privileges,
    do the following:
   </para>
   <procedure>
    <step>
     <para>
      Open <filename>/etc/polkit-default-privs.local</filename>. To define a
      privilege, add a line for each policy with the following format:
     </para>
<screen><replaceable>&lt;privilege_identifier&gt;</replaceable>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<replaceable>&lt;any session&gt;</replaceable>:<replaceable>&lt;inactive session&gt;</replaceable>:<replaceable>&lt;active session&gt;</replaceable></screen>
     <para>
      For example:
     </para>
<screen>org.freedesktop.policykit.modify-defaults&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auth_admin_keep_always</screen>
     <para>
      The following values are valid for the
      <replaceable>SESSION</replaceable> placeholders:
     </para>
     <variablelist>
      <varlistentry>
       <term><literal>yes</literal>
       </term>
       <listitem>
        <para>
         grant privilege
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>no</literal>
       </term>
       <listitem>
        <para>
         block
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>auth_self</literal>
       </term>
       <listitem>
        <para>
         user needs to authenticate with own password every time the
         privilege is requested
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>auth_self_keep_session</literal>
       </term>
       <listitem>
        <para>
         user needs to authenticate with own password once per session,
         privilege is granted for the whole session
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>auth_self_keep_always</literal>
       </term>
       <listitem>
        <para>
         user needs to authenticate with own password once, privilege is
         granted for the current and for future sessions
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>auth_admin</literal>
       </term>
       <listitem>
        <para>
         user needs to authenticate with &rootuser; password every time
         the privilege is requested
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>auth_admin_keep_session</literal>
       </term>
       <listitem>
        <para>
         user needs to authenticate with &rootuser; password once per
         session, privilege is granted for the whole session
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>auth_admin_keep_always</literal>
       </term>
       <listitem>
        <para>
         user needs to authenticate with &rootuser; password once,
         privilege is granted for the current and for future sessions
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </step>
    <step>
     <para>
      Run as &rootuser; for changes to take effect:
     </para>
<screen># /sbin/set_polkit_default_privs</screen>
    </step>
    <step>
     <para>
      Optionally check the list of all privilege identifiers with the
      command <command>pkaction</command>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-policykit-change-defaults">
  <title>Restoring the Default Privileges</title>

  <para>
   &productname; comes with a predefined set of privileges that is
   activated by default and thus overrides the upstream defaults. For
   details, refer to
   <xref linkend="sec-security-policykit-policies-default"/>.
  </para>

  <para>
   Since the graphical &pk; tools and the command line tools always
   operate on the upstream defaults, &productname; includes an additional
   command-line tool, <command>set_polkit_default_privs</command>. It resets
   privileges to the values defined in
   <filename>/etc/polkit-default-privs.*</filename>. However, the command
   <command>set_polkit_default_privs</command> will only reset policies that
   are set to the upstream defaults.
  </para>

  <procedure>
   <title>Restoring the &productname; Defaults</title>
   <step>
    <para>
     Make sure <filename>/etc/polkit-default-privs.local</filename> does not
     contain any overrides of the default policies.
    </para>
    <important>
     <title>Custom Policy Configuration</title>
     <para>
      Policies defined in
      <filename>/etc/polkit-default-privs.local</filename> will be applied
      on top of the defaults during the next step.
     </para>
    </important>
   </step>
   <step>
    <para>
     To reset all policies to the upstream defaults first and then apply the
     &productname; defaults:
    </para>
<screen>&prompt.sudo;rm -f /var/lib/polkit/* &amp;&amp; set_polkit_default_privs</screen>
   </step>
  </procedure>
 </sect1>
</chapter>
