<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.update-preparation"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Preparing the Upgrade</title>
 <info>
  <abstract>
   <para>
    Before starting the upgrade procedure, make sure your system is properly
    prepared. Among others, preparation involves backing up data and checking
    the release notes.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <sect1 xml:id="sec.update-preparation.update">
  <title>Make Sure the Current System is Up-To-Date</title>
  <para>
   Upgrading the system is only supported from the most recent
   patch-level. Make sure the latest system updates are installed by either
   running <command>zypper patch</command> or by starting the &yast; module
   <guimenu>Online-Update</guimenu>.
  </para>
 </sect1>

 <sect1 xml:id="sec.update-preparation.relnotes">
  <title>Read the Release Notes</title>
  <para>
   In the release notes you can find additional information on changes
   since the previous release of &productname;. Check the release notes
   to see whether:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     your hardware needs special considerations;
    </para>
   </listitem>
   <listitem>
    <para>
     any used software packages have changed significantly;
    </para>
   </listitem>
   <listitem>
    <para>
     special precautions are necessary for your installation.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The release notes also provide information that could not make it
   into the manual on time. They also contain notes about known issues.
  </para>
  <para os="sles">
   If you are skipping one or more Service Packs, check the release
   notes of the skipped Service Packs as well. The release notes
   usually only contain the changes between two subsequent releases.
   You can miss important changes if you are only reading the
   current release notes.
  </para>
  <para>
   Find the release notes locally in the directory
   <filename>/usr/share/doc/release-notes</filename> or online at
   <link
     xlink:href="https://www.suse.com/releasenotes/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.update-preparation.backup">
  <title>Make a Backup</title>
  <para>
   Before updating, copy existing configuration files to a separate medium
   (such as tape device, removable hard disk, etc.) to back up the data. This
   primarily applies to files stored in <filename>/etc</filename> and some
   directories and files in <filename>/var</filename> and
   <filename>/opt</filename>. You may also want to write the user data in
   <filename>/home</filename> (the <envar>HOME</envar> directories) to a
   backup medium. Back up this data as &rootuser;. Only &rootuser; has read
   permissions for all local files.
  </para>
  <para>
   If you have selected <guimenu>Update an Existing System</guimenu> as the
   installation mode in &yast;, you can choose to do a (system) backup at a
   later point in time. You can choose to include all modified files and files
   from the <filename>/etc/sysconfig</filename> directory. However, this is
   not a complete backup, as all the other important directories mentioned
   above are missing. Find the backup in the
   <filename>/var/adm/backup</filename> directory.
  </para>
  <sect2 xml:id="sec.update-preparation.backup.packagelist">
   <title>Listing Installed Packages and Repositories</title>
   <para>
    It is often useful to have a list of installed packages,
    for example when doing a fresh install of a new major &slea; release or reverting
    to the old version.
   </para>
   <para>
    Be aware that not all installed packages or used repositories are
    available in newer releases of &sle;. Some may have been renamed and
    others replaced. It is also possible that some packages are still
    available for legacy purposes while another package is used by
    default. Therefore some manual editing of the files might be
    necessary. This can be done with any text editor.
   </para>
   <para>
    Create a file named <filename>repositories.bak.repo</filename> containing a
    list of all used repositories:
   </para>
   <screen>&prompt.root;<command>zypper</command> lr -e repositories.bak</screen>
   <para>
    Also create a file named <filename>installed-software.bak</filename>
    containing a list of all installed packages:
   </para>
   <screen>&prompt.root;<command>rpm</command> -qa --queryformat '%{NAME}\n' > installed-software.bak</screen>
   <para>
    Back up both files. The repositories and installed packages can be
    restored with the following commands:
   </para>
   <screen>&prompt.root;<command>zypper</command> ar repositories.bak.repo
&prompt.root;<command>zypper</command> install $(cat installed-software.bak)</screen>

   <note xml:id="note.update.prep.backup.package_amount">
    <title>
     Amount of Packages Increases with an Update to a new Major Release
    </title>
    <para>
     A system upgraded to a new major version
     (SLE&nbsp;<replaceable>X+1</replaceable>) may contain more packages than
     the initial system (SLE&nbsp;<replaceable>X</replaceable>). It will also
     contain more packages than a fresh installation of
     SLE&nbsp;<replaceable>X+1</replaceable> with the same pattern
     selection. Reasons for this are:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Packages got split to allow a more fine-grained package selection. For
       example, 37 <package>texlive</package> packages on SLE 11 were split
       into 422 packages on SLE 12.
      </para>
     </listitem>
     <listitem>
      <para>
       When a package got split into other packages all new packages are
       installed in the upgrade case to retain the same functionality as with
       the previous version. However, the new default for a fresh installation
       of SLE&nbsp;<replaceable>X+1</replaceable> may be to not install all
       packages.
      </para>
     </listitem>
     <listitem>
      <para>
       Legacy packages from SLE&nbsp;<replaceable>X</replaceable> may be kept
       for compatibility reasons.
      </para>
     </listitem>
     <listitem>
      <para>
       Package dependencies and the scope of patterns may have changed.
      </para>
     </listitem>
    </itemizedlist>
   </note>
  </sect2>
 </sect1>

 <sect1 os="sles" xml:id="sec.update-preparation.sle11">
  <title>Upgrading from &productname; 11 SP4</title>
  <para>
   If you are using MySQL, PostgreSQL or Java MD5 based certificates on
   &productname; 11 SP4, prepare your system as described in the following
   sections.
  </para>
  <sect2 xml:id="sec.update-preparation.sle11.mariadb">
   <title>Migrate your MySQL Database</title>
   <remark>toms 2015-09-03: already reviewed by Ondrej and Krist√Ωna.</remark>
   <para>
    As of &sle; 12, &suse; switched from MySQL to MariaDB. Before you start any
    upgrade, it is highly recommended to back up your database.
   </para>
   <para>
    To perform the database migration, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Log in to your &sle; 11 machine.
     </para>
    </step>
    <step>
     <para>
      Create a dump file:
     </para>
     <screen>&prompt.root;<command>mysqldump</command> -u root -p --all-databases > mysql_backup.sql</screen>
     <para>
      By default, <command>mysqldump</command> does not dump the
      <literal>INFORMATION_SCHEMA</literal> or
      <literal>performance_schema</literal> database. For more details refer to
      <link xlink:href="https://dev.mysql.com/doc/refman/5.5/en/mysqldump.html"/>.
     </para>
    </step>
    <step>
     <para>
      Store your dump file, the configuration file
      <filename>/etc/my.cnf</filename>, and the directory
      <filename>/etc/mysql/</filename> for later investigation
      (<emphasis>NOT</emphasis> installation!) in a safe place.
     </para>
    </step>
    <step>
     <para>
      Perform your upgrade. After the upgrade, your former configuration file
      <filename>/etc/my.cnf</filename> is still intact. You can find the new
      configuration in the file <filename>/etc/my.cnf.rpmnew</filename>.
     </para>
    </step>
    <step>
     <para>
      Configure your MariaDB database to your needs. Do
      <emphasis>NOT</emphasis> use the former configuration file and directory,
      but use it as a reminder and adapt it.
     </para>
    </step>
    <step>
     <para>
      Make sure you start the MariaDB server:
     </para>
     <screen>&prompt.root;<command>systemctl</command> start mysql</screen>
     <para>
      If you want to start the MariaDB server on every boot, enable the
      service:
     </para>
     <screen>&prompt.root;<command>systemctl</command> enable mysql</screen>
    </step>
    <step>
     <para>
      Verify that MariaDB is running properly by connecting to the database:
     </para>
     <screen>&prompt.root;<command>mysql</command> -u root -p</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update-preparation.sle11.postgresql">
   <title>Migrate your &postgresql; Database</title>
   <remark>tbazant 2017-11-06: FATE#323154</remark>
   <para>
    &slea;15 gets a newer version of the &postgresql; database. Because of the
    required migration work of the database, there is no automatic upgrade
    process. As such, the switch from one version to another needs to be done
    manually.
   </para>
   <para>
    The migration process is conducted by the <command>pg_upgrade</command>
    command which is an alternative method of the classic dump and reload. In
    comparison with the <quote>dump &amp; reload</quote> method,
    <command>pg_upgrade</command> makes the migration less time-consuming.
   </para>
   <para>
    Each &postgresql; version stores its files in different, version-dependent
    directories. After the update the directories will change from
    <filename>/usr/lib/postgresql96/</filename> to
    <filename>/usr/lib/postgresql10/</filename>.
   </para>
   <para>
    To perform the database migration, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Make sure the following preconditions are fulfilled:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        If not already done, upgrade any package of the old &postgresql;
        version to the latest release through a maintenance update.
       </para>
      </listitem>
      <listitem>
       <para>
        Create a backup of your existing database.
       </para>
      </listitem>
      <listitem>
       <para>
        Install the packages of the new &postgresql; major version. For
        &slea;15 this means to install
        <package>postgresql10-server</package>
        and all the packages it depends on.
       </para>
      </listitem>
      <listitem>
       <para>
        Install the package
        <package>postgresql10-contrib</package>
        which contains the command <command>pg_upgrade</command>.
       </para>
      </listitem>
      <listitem>
       <para>
        Make sure you have enough free space in your &postgresql; data area,
        which is <filename>/var/lib/pgsql/data</filename> by default. If space
        is tight, try to reduce size with the following SQL command on each
        database (can take very long!):
       </para>
       <screen>VACUUM FULL</screen>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Stop the &postgresql; server:
     </para>
     <screen>&prompt.root;systemctl stop postgresql.service</screen>
    </step>
    <step>
     <para>
      Rename your old data directory:
     </para>
     <screen>&prompt.root;<command>mv</command> /var/lib/pgsql/data /var/lib/pgsql/data.old</screen>
    </step>
    <step>
     <para>
      Create a new data directory:
     </para>
     <screen>&prompt.root;<command>mkdir</command> -p /var/lib/pgsql/data</screen>
    </step>
    <step>
     <para>
      If you have changed your configuration files in the old version, copy the
      files <filename>postgresql.conf</filename>
      <filename>pg_hba.conf</filename> to your new <filename>data</filename>
      directory:
     </para>
<screen>&prompt.root;<command>cp</command> /var/lib/pgsql/data.old/*.conf \
    /var/lib/pgsql/data</screen>
    </step>
    <step>
     <para>
      Initialize your new database instance either manually with
      <command>initdb</command> or by starting and stopping &postgresql;, which
      will do it automatically:
     </para>
<screen>&prompt.root;systemctl start postgresql.service
&prompt.root;systemctl stop postgresql.service</screen>
    </step>
    <step>
     <para>
      Start the migration process:
     </para>
<screen>&prompt.root;<command>pg_upgrade</command> \
  --old-datadir "/var/lib/pgsql/data.old" \
  --new-datadir "/var/lib/pgsql/data" \
  --old-bindir "/usr/lib/postgresqli96/bin/" \
  --new-bindir "/usr/lib/postgresql10/bin/"</screen>
    </step>
    <step>
     <para>
      Start your new database instance:
     </para>
     <screen>&prompt.root;systemctl start postgresql.service</screen>
    </step>
    <step>
     <para>
      Check if the migration was successful. There is no general tool to
      automate this step. It depends on your use case how much and what you
      want to test.
     </para>
    </step>
    <step>
     <para>
      Remove any old &postgresql; packages and your old data directory:
     </para>
<screen>&prompt.root;<command>zypper</command> search -s postgresql94 | xargs zypper rm -u
&prompt.root;<command>rm</command> -rf /var/lib/pgsql/data.old</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update-preparation.sle11.ssl">
   <title>Create Non-MD5 Server Certificates for Java Applications</title>
   <remark>toms 2016-07-27: from bsc#970153, c#24</remark>
   <para>
    During the update from SP1 to SP2, MD5-based certificates were disabled as
    part of a security fix. If you have certificates created as MD5, re-create
    your certificates with the following steps:
   </para>

   <procedure>
    <step>
     <para>
      Open a terminal and log in as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Create a private key:
     </para>
     <screen>&prompt.root;<command>openssl</command> genrsa -out server.key 1024</screen>
     <para>
      If you want a stronger key, replace <literal>1024</literal> with a
      higher number, for example, <literal>4096</literal>.
     </para>
    </step>
    <step>
     <para>
      Create a certificate signing request (CSR):
     </para>
     <screen>&prompt.root;<command>openssl</command> req -new -key server.key -out server.csr</screen>
    </step>
    <step>
     <para>
      Self-sign the certificate:
     </para>
     <screen>&prompt.root;<command>openssl</command> x509 -req -days 365 -in <!--
     -->server.csr -signkey server.key -out server.crt</screen>
    </step>
    <step>
     <para>
      Create the PEM file:
     </para>
     <screen>&prompt.root;<command>cat</command> server.key server.crt > server.pem</screen>
    </step>
    <step>
     <para>Place the files <filename>server.crt</filename>,
      <filename>server.csr</filename>, <filename>server.key</filename>, and
      <filename>server.pem</filename> in the respective directories where
      the keys can be found. For Tomcat, for example, this directory is
      <filename>/etc/tomcat/ssl/</filename>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.update-preparation.vms">
  <title>Shut Down Virtual Machine Guests</title>
  <para>
   If your machine serves as a &vmhost; for &kvm; or &xen;, make sure to
   properly shut down all running &vmguest;s prior to the update. Otherwise
   you may not be able to access the guests after the update.
  </para>
 </sect1>

 <sect1 xml:id="sec.update-preparation.smt">
  <title>Check the <command>clientSetup4SMT.sh</command> Script on SMT Clients</title>
  <para>
   If you are migrating your client OS that is registered against an &smt; server, you need to check if the version
   of the <command>clientSetup4SMT.sh</command> script on your host is up to date.
<command>clientSetup4SMT.sh</command> from older versions of &smt; cannot manage &smt; 12 clients.
   If you apply software patches regularly on your SMT server, you can always find the latest version
   of <command>clientSetup4SMT.sh</command> at <filename>&lt;SMT_HOSTNAME&gt;/repo/tools/clientSetup4SMT.sh</filename>.
  </para>
 </sect1>

 <sect1 xml:id="sec.update-preparation.disk">
  <title>Disk Space</title>

  <para>
   Software tends to grow from version to version. Therefore,
   take a look at the available partition space before updating. If you suspect
   you are running short of disk space, back up your data before increasing the
   available space by resizing partitions, for example. There is no general
   rule regarding how much space each partition should have. Space requirements
   depend on your particular partitioning profile and the software selected.
  </para>

  <note>
   <title>Automatic Check for Enough Space in &yast;</title>
   <para>
    During the update procedure, &yast; will check how much free disk space is
    available and display a warning to the user if the installation may exceed
    the available amount. In that case, performing the update may lead to an
    <emphasis>unusable system</emphasis>! Only if you know exactly what you are
    doing (by testing beforehand), you can skip the warning and continue the
    update.
   </para>
  </note>

  <sect2 xml:id="sec.update-preparation.disk.space">
   <title>Checking Disk Space on Non-Btrfs File Systems</title>
   <para>
    Use the <command>df</command> command to list available disk space. For
    example, in <xref linkend="aus.update.df"/>, the root partition is
    <filename>/dev/sda3</filename> (mounted as <filename>/</filename>).
   </para>
   <example xml:id="aus.update.df">
    <title>List with <command>df -h</command></title>
<screen os="sled">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       39G  1.6G   37G   4% /windows/C
/dev/sda2      4.6G  2.6G  2.1G  57% /windows/D</screen>
<screen os="sles">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       44G    4G   40G   9% /data</screen>
   </example>
  </sect2>

  <sect2 xml:id="sec.update-preparation.disk.btrfs-on-root">
   <title>Checking Disk Space on Btrfs Root File Systems</title>
   <para>
    If you use Btrfs as root file systems on your machine, make sure there is
    enough free space. In the worst case, an upgrade needs as much disk space as the current root
    file system (without <filename>/.snapshot</filename>) for a new snapshot.
    To display available disk space use the command:
   </para>
<screen>&prompt.root;<command>df</command> -h /</screen>
   <para>
    Check the available space on all other mounted partitions as well. The
    following recommendations have been proven:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      For all file systems including Btrfs you need enough free disk space to
      download and install big RPMs. The space of old RPMs are only freed after
      new RPMs are installed.
     </para>
    </listitem>
    <listitem>
     <para>
      For Btrfs with snapshots, you need at minimum as much free space as your
      current installation takes. We recommend to have twice as much free
      space as the current installation.
     </para>
     <para>
      If you do not have enough free space, you can try to delete old snapshots
      with <command>snapper</command>:
     </para>
<screen>&prompt.root;<command>snapper</command> list
&prompt.root;<command>snapper</command> delete NUMBER</screen>
     <para>
      However, this may not help in all cases. Before migration, most snapshots
      occupy only little space.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update-preparation.multiversion">
  <title>Temporarily Disabling Kernel Multiversion Support</title>
  <para>
   &productname; allows installing multiple kernel versions by enabling the
   respective settings in <filename>/etc/zypp/zypp.conf</filename>. Support
   for this feature needs to be temporarily disabled to upgrade to a service
   pack. When the update has successfully finished, multiversion support can be
   re-enabled. To disable multiversion support, comment the respective
   lines in <filename>/etc/zypp/zypp.conf</filename>. The result should look
   similar to:
  </para>
<screen>#multiversion = provides:multiversion(kernel)
#multiversion.kernels = latest,running</screen>
  <para>
   To re-activate this feature after a successful update, remove the comment
   signs. For more information about multiversion support, refer to
   <xref linkend="sec.tuning.multikernel.enable"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.update-preparation.zseries" os="sles">
  <title>Upgrading on IBM &zseries;</title>
  <para>Upgrading a &sle; installation on &zseries; requires the
   <command>Upgrade=1</command> kernel parameter, for example via the
   parmfile. See <xref linkend="sec.appdendix.parm" xrefstyle="HeadingOnPage"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.update-preparation.ppc" os="sles" arch="power">
  <title>IBM &ppc;: Starting an X Server</title>
  <para>
   On &slsa; 12 for IBM &ppc; the display manager is configured not to start a
   local X Server by default. This setting was reversed on &slsa; 12
   SP1&mdash;the display manager now starts an X Server.
  </para>
  <para>
   To avoid problems during upgrade, the &productname; setting is not changed
   automatically. If you want the display manager to start an X Server after
   the upgrade, change the setting of
   <envar>DISPLAYMANAGER_STARTS_XSERVER</envar> in
   <filename>/etc/sysconfig/displaymanager</filename> as follows:
  </para>
  <screen>DISPLAYMANAGER_STARTS_XSERVER="yes"</screen>
 </sect1>
</chapter>
