<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter version="5.0" role="General"
 xml:id="cha-sec-cron-at"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Restricting &crond; and <systemitem class="daemon">at</systemitem></title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This chapter explains how to restrict access to the &crond; and <systemitem
     class="daemon">at</systemitem> daemons to improve the security of a system.
   </para>
  </abstract>
 </info>
 <sect1>
  <title>Restricting the &crond; daemon</title>
  <para>
   The &crond; system is used to automatically run commands in the background at
   predefined times. For more information about &crond;, refer to the <xref
    linkend="sec-suse-packages-cron"/>.
  </para>
  <para>
   The <filename>cron.allow</filename> file specifies a list of users that are
   allowed to execute jobs via &crond;. The file does not exist by default, so
   all users can create &crond; jobs&mdash;except for those listed in
   <filename>cron.deny</filename>.
  </para>
  <procedure>
   <para>
    To prevent users except for &rootuser; from creating &crond; jobs, perform
    the following steps.
   </para>
   <step>
    <para>
     Create an empty file <filename>/etc/cron.allow</filename>:
    </para>
<screen>&prompt.user1.sudo;<command>touch</command> /etc/cron.allow</screen>
   </step>
   <step>
    <para>
     Allow users to create &crond; jobs by adding their user names to the file:
    </para>
<screen>&prompt.user1.sudo;<command>echo</command> "&exampleuser_plain;" >> /etc/cron.allow</screen>
   </step>
   <step>
    <para>
     To verify, try creating a &crond; job as non-root user listed in
     <filename>cron.allow</filename>. You should see the message:
    </para>
<screen>&prompt.user1;<command>crontab -e</command>
no crontab for &exampleuser_plain; - using an empty one</screen>
    <para>
     Quit the crontab editor and try the same with a user
     <emphasis>not</emphasis> listed in the file (or before adding them in step
     2 of this procedure):
    </para>
<screen>&prompt.user2;<command>crontab -e</command>
You (&exampleuserII_plain;) are not allowed to use this program (crontab)
See crontab(1) for more information</screen>
   </step>
  </procedure>
  <important>
   <title>Existing &crond; jobs</title>
   <para>
    Implementing <function>cron.allow</function> only prevents users from
    creating new &crond; jobs. Existing jobs run, even for users
    listed in <filename>cron.deny</filename>. To prevent this, create the file
    as described and remove existing user crontabs from the directory
    <filename>/var/spool/cron/tabs</filename> to ensure they are not run
    anymore.
   </para>
  </important>
  <note>
   <title>Switching to &systemd; timer units</title>
   <para>
    You should also consider switching to &systemd; timer units, as they allow
    for more powerful and reliable task execution. By default, users cannot use
    them to run code when they are not logged in. This limits the way users can
    interact with the system while not being connected to it.
   </para>
   <para>
    For more information about &systemd; timer units, refer to <xref
     linkend="sec-boot-systemd-timer-units"/>.
   </para>
  </note>
 </sect1>

 <sect1>
  <title>Restricting the <systemitem class="daemon">at</systemitem> scheduler</title>
  <para>
   The <systemitem class="daemon">at</systemitem> job execution system allows
   users to scheduled one-time running jobs. The <filename>at.allow</filename>
   file specifies a list of users that are allowed to schedule jobs via
   <systemitem class="daemon">at</systemitem>. The file does not exist by
   default, so all users can schedule <systemitem class="daemon">at</systemitem>
   jobs&mdash;except for those listed in <filename>at.deny</filename>)
  </para>
  <procedure>
   <para>
    To prevent users except for &rootuser; from scheduling jobs with <systemitem
     class="daemon">at</systemitem>, perform the following steps.
   </para>
   <step>
    <para>
     Create an empty file <filename>/etc/at.allow</filename>:
    </para>
<screen>&prompt.user1.sudo;<command>touch</command> /etc/at.allow</screen>
   </step>
   <step>
    <para>
     Allow users to schedule jobs with <systemitem
      class="daemon">at</systemitem> by adding their user names to the file:
    </para>
<screen>&prompt.user1.sudo;<command>echo</command> "&exampleuser_plain;" >> /etc/at.allow</screen>
   </step>
   <step>
    <para>
     To verify, try scheduling a job as non-root user listed in
     <filename>at.allow</filename>:
    </para>
<screen>&prompt.user1;<command>at 00:00</command>
at></screen>
    <para>
     Quit the <systemitem class="daemon">at</systemitem>prompt with
     <keycombo><keycap function="control"/><keycap>C</keycap></keycombo> and
     try the same with a user <emphasis>not</emphasis> listed in the file (or
     before adding them in step 2 of this procedure):
    </para>
<screen>&prompt.user2;<command>at 00:00</command>
You do not have permission to use at.</screen>
   </step>
  </procedure>
   <note>
   <title>Uninstalling <systemitem class="daemon">at</systemitem></title>
   <para>
    <systemitem class="daemon">at</systemitem> is not widely used anymore.
    If you do not have valid use cases, consider uninstalling the daemon instead
    of just restricting its access.
   </para>
  </note>
 </sect1>

</chapter>
