<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
  [
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-containers-basics">
 <title>Introduction to Linux Containers</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
  </dm:docmanager>
 </info>
 <para>
  Linux containers offer a lightweight virtualization method to run multiple
  virtual environments (containers) simultaneously on a single host. Unlike
  technologies like &xen; or &kvm;, where the processor simulates a complete
  hardware environment and a hypervisor controls virtual machines, containers
  provide virtualization at the operating system level, where the kernel
  controls the isolated containers.
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <title>Advantages of Using Containers</title>
  <listitem>
   <para>
    Containers make it possible to isolate applications in self-contained
    units.
   </para>
  </listitem>
  <listitem>
   <para>
    Containers provide near-native performance. Depending on the runtime, a
    container can use the host kernel directly, thus minimizing overhead.
   </para>
  </listitem>
  <listitem>
   <para>
    It is possible to control network interfaces and apply resources inside
    containers through <xref linkend="gloss-vt-lxc-cgroups"/>.
   </para>
  </listitem>
 </itemizedlist>
 <itemizedlist mark="bullet" spacing="normal">
  <title>Limitations of Containers</title>
  <listitem>
   <para>
    Containers run on the host system's kernel, so they cannot use different
    kernels or different kernel versions.
   </para>
  </listitem>
  <listitem>
   <para>
    Only Linux-based applications can be containerized.
   </para>
  </listitem>
  <listitem>
   <para>
    Containers are not secure, and the overall security depends on the host
    system. Containerized applications can be secured through &aa; or &selnx;
    profiles. Securing containers is harder than securing virtual machines, due
    to the larger attack surface.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="sec-concepts-workflow">
  <title>Key Concepts and Brief Introduction to &podman;</title>

  <para>
   Although &deng; is a popular choice for working with images and containers,
   &podman; provides a drop-in replacement for &docker; that offers several
   advantages. While <xref linkend="cha-podman-overview"/> provides more
   information on &podman;, this chapter offers a quick introduction to key
   concepts and a basic procedure of creating a container image and using it to
   run a container.
  </para>

  <para>
   The basic &podman; workflow is as follows:
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="container-workflow.png" width="80%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="container-workflow.png" width="100%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <para>
   Running a container, either on a local machine or cloud service, usually
   involves the following steps:
  </para>

  <orderedlist>
   <listitem>
    <para>
     Fetch a base image by pulling it from a registry to your local machine
    </para>
   </listitem>
   <listitem>
    <para>
     Create a Dockerfile and use it to build a custom image on top of the base
     image
    </para>
   </listitem>
   <listitem>
    <para>
     Use the created image to start one or more containers
    </para>
   </listitem>
  </orderedlist>

  <para>
   To run a container, you need an image. An image includes all the
   dependencies needed to run the application. For example, the &slea; base
   image contains the &slea; distribution with a minimal package selection.
  </para>

  <para>
   While it is possible to create an image from scratch, few applications would
   work in such an empty environment. Thus, using an existing base image is
   more practical in most situations. A base image has no parent, meaning it is
   not based on another image.
  </para>

  <para>
   Although you can use a base image for running containers, the main purpose
   of base images is to serve as foundations for creating custom images that
   can run containers with specific applications, servers, services, and so on.
  </para>

  <para>
   Both base and custom images are usually available through a repository of
   images called registry. Unless a registry is explicitly specified, &podman;
   pulls images from the &dhub; registry. While you can fetch a base image
   manually, &podman; can do that automatically when building a custom image.
  </para>

  <para>
   To build a custom image, you need to create a special file called
   Containerfile or Dockerfile, containing building instructions. For example,
   a Dockerfile can contain instructions to update the system software, install
   the desired application, open specific network ports, run commands, etc.
  </para>

  <para>
   You can build images not only from base images, but also on top of custom
   images. So you can have an image consisting of multiple layers:
  </para>

  <informalfigure>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="container-image-layers.png" width="50%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="container-image-layers.png" width="100%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </informalfigure>

  <sect2 xml:id="sec-container-example">
   <title>Practical Example</title>
   <para>
    The following procedure shows how to build a custom &docker; image that can
    be used to run a container with a simple PHP application called
    <literal>example</literal>, served using the built-in PHP development
    server.
   </para>
   <procedure>
    <title>Building an Image and Running a Container</title>
    <step>
     <para>
      Install &podman;:
     </para>
<screen>&prompt.sudo;zypper in podman</screen>
    </step>
    <step>
     <para>
      Switch to the PHP project's directory and create a file named
      <filename>Dockerfile</filename> :
     </para>
<screen>&prompt.user;cd example
&prompt.user;touch Dockerfile</screen>
    </step>
    <step>
     <para>
      Open the <filename>Dockerfile</filename> file for editing, and add the
      following:
     </para>
<screen>
FROM php:7.4-cli
COPY . /usr/src/example
WORKDIR /usr/src/example
EXPOSE 8000
CMD [ "php", "-S", "0.0.0.0:8000" ]</screen>
    </step>
    <step>
     <para>
      Build a container image:
     </para>
<screen>&prompt.sudo;podman build -t example .</screen>
    </step>
    <step>
     <para>
      Run a container:
     </para>
<screen>&prompt.sudo;podman run -it -p8000:8000 --rm example</screen>
    </step>
    <step>
     <para>
      Point the browser to <literal>localhost:8000</literal> to access the
      application running in the container.
     </para>
    </step>
   </procedure>
   <para>
    Note that &suse; does not provide support for third-party images, such as
    the one used in this example.
   </para>
  </sect2>
 </sect1>
</chapter>
