<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.security">
 <title>Security and Confidentiality</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
  </dm:docmanager>
  <abstract>
   <para>
    This chapter introduces some basic concepts of computer security.
    Threats and basic mitigation techniques are described. The chapter
    also provides links to other chapters, guides and websites with
    further information.
   </para>
  </abstract>
 </info>

 <sect1 xml:id="sec.security.overview">
  <title>Overview</title>
  <para>
   One main characteristics of Linux is its ability to handle multiple
   users at the same time (multiuser) and to allow these users to
   simultaneously perform tasks (multitasking) on the same computer.
   Moreover, the operating system is network transparent. For the user
   it is indistinguishable whether accessed data is stored locally or on
   the network.
  </para>
  <para>
   Due to the multiuser capability, data from different users has to be
   stored separately to guarantee security and privacy. Also important
   is the ability to keep data available in spite of a lost or otherwise
   damaged data medium, for example a hard disk.
  </para>
  <para>
   This chapter is primarily focused on confidentiality and privacy. But
   a comprehensive security concept includes a regularly updated,
   workable, and tested backup. Without this, it can be very hard to get
   the data back&mdash;not only in the case of a hardware defect, but
   also in the case of tampered files due to unauthorized access.
  </para>
  <para>
   There are several ways of accessing data, for all of which a user
   should be authenticated before being granted access:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     communication with individuals that have access to the data
    </para>
   </listitem>
   <listitem>
    <para>
     physical access to the computer which contains the data
    </para>
   </listitem>
   <listitem>
    <para>
     network connection to the computer which contains the data
    </para>
   </listitem>
  </itemizedlist>

  <para>
   In the list above, the first case is the one with the highest amount
   of human interaction. An example is contacting a bank employee and
   that requires proof of ownership of a bank account. This is usually
   achieved with a signature PIN, or password.
  </para>

  <para>
   In some cases these passwords are birth dates, addresses or phone
   numbers. It might be possible to elicit this information from an
   informed person by mentioning known bits and pieces to win the
   confidence of that person. The informed person could be led to
   reveal gradually more information, maybe without even being aware
   of it. This method of extracting information is called
   <emphasis>social engineering</emphasis>. The only guard against
   such methods is educating organization members. You can only guard
   against this kind of attack by educating people with access to the
   data. Before breaking into computer systems, attackers often try to
   target receptionists, service people working with the company, or
   even family members without technical expertise.
  </para>

  <para>
   A person wanting to obtain unauthorized access to data could also
   try to access the hardware directly. Therefore, the machine should
   be protected against any tampering so that no one can remove,
   replace, or cripple its components. This also applies to backups
   and even any network cables or power cords. Also secure the boot
   procedure by enabling a password protected <emphasis>secure
   boot</emphasis>.
  </para>

  <para>
   Serial terminals connected to serial ports are still used in many
   places. Unlike network interfaces, they do not rely on network
   protocols to communicate with the host. A simple cable or an
   infrared port is used to send plain characters back and forth
   between the devices. The cable itself is the weakest point of such
   a system: with an older printer connected to it, it is easy to
   record any data being transferred that way. What can be achieved
   with a printer can also be accomplished in other ways, depending on
   the effort that goes into the attack.
  </para>

  <para>
   Reading a file locally on a host requires additional access rules
   than opening a network connection with a server on a different host.
   There is a distinction between local security and network security.
   The line is drawn where data must be put into packets to be sent
   somewhere else.
  </para>

  <para>
   Unauthorized access to data on networked computers is sometimes
   possible due to bad configuration of services or user negligence.
   Clearly defined processes and rules can help to mitigate such
   problems. In some cases software bugs are vulnerabilities and can
   be used to gain access. Best practices for mitigation include
   frequently installing updates and reducing the exposed cross
   section, for example by closing ports or removing unused services.
  </para>

  <para>
   Security for computer systems should have a <emphasis>defense in
   depth</emphasis> approach. It is likely that no mitigation technique
   alone can protect data or systems from unauthorized access. More
   layers of defense make a successful attack much harder. Components
   for a defense in depth can be:
  </para>

  <itemizedlist>
   <listitem>
    <para>Encrypting passwords</para>
   </listitem>
   <listitem>
    <para>Encrypting data</para>
   </listitem>
   <listitem>
    <para>Logging, monitoring and intrusion detection</para>
   </listitem>
   <listitem>
    <para>Firewall</para>
   </listitem>
   <listitem>
    <para>Antivirus scanners</para>
   </listitem>
   <listitem>
    <para>Defined and documented emergency procedures</para>
   </listitem>
   <listitem>
    <para>Backups</para>
   </listitem>
   <listitem>
    <para>Physical security</para>
   </listitem>
   <listitem>
    <para>Audits, security scans and intrusion tests</para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="sec.security.local">
  <title>Local Security</title>
  <para>
   Local security starts with the physical environment of a computer.
   Set up your machine in a place where security is in line with your
   expectations and needs. The main goal of local security is to keep
   users separate from each other, so no user can assume the
   permissions or the identity of another. This rule should be
   followed in general. But it is especially true for the user
   &rootuser;, who holds system administration privileges. &rootuser;
   can take on the identity of any other local user and read any
   locally-stored file without being prompted for the password.
  </para>
  <sect2 xml:id="sec.security.local.passwords">
   <title>Passwords</title>
   <para>
    On a Linux system, passwords are not stored as plain text and the
    entered text string is not simply matched with the saved pattern.
    If this were the case, all accounts on your system would be
    compromised when someone got access to the file storing the
    passwords. Instead, the stored password is encrypted. On entering
    login credentials, the entered password is also encrypted and the
    encrypted string is then compared with the password file. This
    only provides more security if the encrypted password cannot be
    reverse-computed into the original text string.
   </para>
   <para>
    This is achieved by a special kind of algorithm, which is based on
    a <emphasis>trapdoor function</emphasis>. A trapdoor function only
    works in one direction. An attacker who has obtained the encrypted
    string is not able to get your password by simply applying the
    same algorithm again. Instead, it would be necessary to test all
    the possible character combinations until a combination is found
    that looks like your password when encrypted. With passwords eight
    characters long, there are many combinations to calculate.
   </para>
   <para>
    Because restoring passwords is possible with powerful computers,
    encrypted passwords should not be visible to regular users.
    Passwords are threfore stored in the file
    <filename>/etc/shadow</filename>, which cannot be read by normal
    users. It is even more important that passwords are not easy to
    guess, in case the password is leaked.
   </para>
   <para>
    Replacing some letters of a word with similar looking numbers
    (like writing the password <quote>tantalize</quote> as
    <quote>t@nt@1lz3</quote>) is not sufficient. Password cracking
    programs that use dictionaries to guess words also play with
    substitutions like that. A better way is to make up a word that
    only makes sense to you personally, like the first letters of the
    words of a sentence or the title of a book, such as <quote>The
    Name of the Rose</quote> by Umberto Eco. This would give the
    following safe password: <quote>TNotRbUE9</quote>. In contrast,
    passwords like <quote>beerbuddy</quote> or
    <quote>jasmine76</quote> are easily guessed even by someone who
    has only some casual knowledge about you.
   </para>
   <para>
    For even stronger security, additional authentication factors can
    be used. Additional options are, for example, <emphasis>one-time
    passwords</emphasis> (OTP) or hardware authentication devices.
   </para>
   <para>
    The <emphasis>National Institute of Standards and
    Technology</emphasis> (<emphasis>NIST</emphasis>) publishes a
    guideline for passwords, which is available at <link
    xlink:href="https://pages.nist.gov/800-63-3/sp800-63b.html#sec5"
    />
   </para>
  </sect2>
  <sect2 xml:id="sec.security.local.boot">
   <title>The Boot Procedure</title>
   <para>
    Configure your system so it cannot be booted from a removable
    device, either by removing the drives entirely or by setting a
    UEFI password and configuring the UEFI to allow booting from a
    hard disk only. To make the boot procedure more tamper resistant,
    enable the UEFI <emphasis>secure boot</emphasis> feature.
    Normally, a Linux system is started by a boot loader, allowing you
    to pass additional options to the booted kernel. Prevent others
    from using such parameters during boot by setting an additional
    password for the boot loader. This is crucial to your system's
    security. Not only does the kernel itself run with &rootuser;
    permissions, but it is also the first authority to grant
    &rootuser; permissions at system start-up. For more details about
    secure boot, refer to <xref linkend="cha.uefi"/>. For more details
    about setting a password in the boot loader, refer to
    <xref linkend="sec.grub2.password"/>.
   </para>
  </sect2>
  <sect2 xml:id="sec.security.local.permissions">
   <title>File Permissions</title>
   <para>
    As a general rule, always work with the most restrictive
    privileges possible for a given task. For example, it is
    definitely not necessary to be &rootuser; to read or write e-mail.
    If the mail program has a bug, this bug could be exploited for an
    attack that acts with exactly the permissions of the program when
    it was started. By following the above rule, minimize the possible
    damage.
   </para>
   <para>
    The permissions of all files included in &productname; are
    carefully chosen. When installing additional software or files,
    take great care when setting the permissions. Always use the
    <option>-l</option> option with the command <command>ls</command>
    to detect any incorrect file permissions immediately. An incorrect
    file attribute does not only mean that files could be changed or
    deleted. Modified files could be executed by &rootuser; or
    services can be hijacked by modifying configuration files. This
    significantly increases the danger of an attack.
   </para>
   <para>
    An &productnamereg; system includes the files
    <filename>permissions</filename>,
    <filename>permissions.easy</filename>,
    <filename>permissions.secure</filename>, and
    <filename>permissions.paranoid</filename>, all in the directory
    <filename>/etc</filename>. The purpose of these files is to define
    special permissions, such as world-writable directories or, for
    files, the setuser ID bit. Programs with the setuser ID bit set do
    not run with the permissions of the user that has launched it, but
    with the permissions of the file owner, usually &rootuser;. An
    administrator can use the file
    <filename>/etc/permissions.local</filename> to add his own
    settings.
   </para>
   <para>
    To define one of the available profiles, select <guimenu>Local
    Security</guimenu> in the <guimenu>Security and Users</guimenu>
    section of &yast;. To learn more about the topic, read the
    comments in <filename>/etc/permissions</filename> or consult
    <command>man chmod</command>.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.security.network">
  <title>Network Security</title>
  <para>
   Network security is important for protecting from an attack that is
   started outside the network. The typical login procedure requiring a
   user name and a password for user authentication is still a local
   security issue. In the particular case of logging in over a network,
   differentiate between the two security aspects. What happens until the
   actual authentication is network security and anything that happens
   afterward is local security.
  </para>
  <sect2 xml:id="sec.security.network.x11">
   <title>X Window System and X Authentication</title>
   <para>
    As mentioned at the beginning, network transparency is one of the
    central characteristics of a Unix system. X, the windowing system of
    Unix operating systems, can use this feature in an impressive
    way. With X, it is no problem to log in to a remote host and start a
    graphical program that is then sent over the network to be displayed on
    your computer.
   </para>
   <para>
    When an X client needs to be displayed remotely using an X server, the
    latter should protect the resource managed by it (the display) from
    unauthorized access. In more concrete terms, certain permissions must
    be given to the client program. With the X Window System, there are two
    ways to do this, called host-based access control and cookie-based
    access control. The former relies on the IP address of the host where
    the client should run. The program to control this is xhost. xhost
    enters the IP address of a legitimate client into a database belonging
    to the X server. However, relying on IP addresses for authentication is
    not very secure. For example, if there were a second user working on
    the host sending the client program, that user would have access to the
    X server as well&mdash;like someone stealing the IP address. Because
    of these shortcomings, this authentication method is not described in
    more detail here, but you can learn about it with
    <command>man</command>&nbsp;<option>xhost</option>.
   </para>
   <para>
    In the case of cookie-based access control, a character string is
    generated that is only known to the X server and to the legitimate
    user, like an ID card of some kind. This cookie is stored on login in
    the file <filename>.Xauthority</filename> in the user's home directory
    and is available to any X client wanting to use the X server to display
    a window. The file <filename>.Xauthority</filename> can be examined by
    the user with the tool <command>xauth</command>. If you rename
    <filename>.Xauthority</filename>, or if you delete the file from your
    home directory by accident, you would not be able to open any new
    windows or X clients.
   </para>
   <para>
    SSH (secure shell) can be used to encrypt a network connection and forward it to an X server transparently. This is also called X
    forwarding. X forwarding is achieved by simulating an X server on the
    server side and setting a DISPLAY variable for the shell on the remote
    host. Further details about SSH can be found in
    <xref linkend="cha.ssh"/>.
   </para>
   <warning>
    <title>X Forwarding Can Be Insecure</title>
    <para>
     <remark>sknorr, 2014-08-22: "The host where you log in" is ambiguous: does
      this mean the computer that you are logging in to or the computer that
      you are logging in from?</remark>
     If you do not consider the host where you log in to be a secure host,
     do not use X forwarding. If X forwarding is enabled, an attacker could
     authenticate via your SSH connection. The attacker could then intrude
     on your X server and, for example, read your keyboard input.
    </para>
   </warning>
  </sect2>
  <sect2 xml:id="sec.security.network.dos">
   <title>Denial of Service</title>
   <para>
    The purpose of a denial of service (DoS) attack is to block a server
    program or even an entire system. This can be achieved in several ways: overloading the server, keeping it busy with garbage
    packets, or exploiting a remote buffer overflow. Often, a DoS attack is
    made with the sole purpose of making the service disappear. However,
    when a given service has become unavailable, communications could
    become vulnerable to <emphasis>man-in-the-middle attacks</emphasis>
    (sniffing, TCP connection hijacking, spoofing) and DNS poisoning.
   </para>
  </sect2>
  <sect2 xml:id="sec.security.network.mitm">
   <title>Man in the Middle: Sniffing, Hijacking, Spoofing</title>
   <para>
    In general, any remote attack performed by an attacker who puts himself
    between the communicating hosts is called a <emphasis>man-in-the-middle
    attack</emphasis>. What almost all types of man-in-the-middle attacks
    have in common is that the victim is usually not aware that there is
    something happening. There are many variants. For example, the
    attacker could pick up a connection request and forward that to the
    target machine. Now the victim has unwittingly established a connection
    with the wrong host, because the other end is posing as the legitimate
    destination machine.
   </para>
   <para>
    The simplest form of a man-in-the-middle attack is called
    <emphasis>sniffer</emphasis> (the attacker is <quote>only</quote>
    listening to the network traffic passing by). As a more complex attack,
    the <quote>man in the middle</quote> could try to take over an already
    established connection (hijacking). To do so, the attacker would need
    to analyze the packets for some time to be able to predict the TCP
    sequence numbers belonging to the connection. When the attacker finally
    seizes the role of the target host, the victims notice this, because
    they get an error message saying the connection was terminated because
    of a failure. That there are protocols not secured against
    hijacking through encryption (which only perform a simple
    authentication procedure upon establishing the connection) makes it
    easier for attackers.
   </para>
   <para>
    <emphasis>Spoofing</emphasis> is an attack where packets are modified
    to contain counterfeit source data, usually the IP address. Most active
    forms of attack rely on sending out such fake packets (something that,
    on a Linux machine, can only be done by the superuser
    (<systemitem class="username">root</systemitem>)).
   </para>
   <para>
    Many of the attacks mentioned are carried out in combination with a
    DoS. If an attacker sees an opportunity to bring down a certain host
    abruptly, even if only for a short time, it makes it easier for him to
    push the active attack, because the host cannot interfere
    with the attack for some time.
   </para>
  </sect2>
  <sect2 xml:id="sec.security.network.dns">
   <title>DNS Poisoning</title>
   <para>
    DNS poisoning means that the attacker corrupts the cache of a DNS
    server by replying to it with spoofed DNS reply packets, trying to get
    the server to send certain data to a victim who is requesting
    information from that server. Many servers maintain a trust
    relationship with other hosts, based on IP addresses or host names. The
    attacker needs a good understanding of the actual structure of the
    trust relationships among hosts to disguise itself as one of the
    trusted hosts. Usually, the attacker analyzes some packets received
    from the server to get the necessary information. The attacker often
    needs to target a well-timed DoS attack at the name server as well.
    Protect yourself by using encrypted connections that can verify
    the identity of the hosts to which to connect.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.security.encryption">
  <title>Encryption</title>
  <para>
   If you use suspend to disk, consider configuring the suspend image
   encryption using the <command>configure-suspend-encryption.sh</command>
   script. The program creates the key, copies it to
   <filename>/etc/suspend.key</filename>, and modifies
   <filename>/etc/suspend.conf</filename> to use encryption for suspend
   images.
   </para>
 </sect1>
 <sect1 xml:id="sec.security.vulnerabilities">
  <title>Software Vulnerabilities</title>
  <para>
   Software vulnerabilities are a class of software bugs that can be
   exploited by attackers to obtain unauthorized access to data or use
   attacked systems in unintended ways. Especially for remote services,
   for example HTTP servers, vulnerabilities can be very critical. In
   current computer environments, vulnerabilities have to be expected.
   Usually it is the obligation of programmers to fix these issues when
   they become known. It is then the administrators task to quickly and
   safely install provided updates to protect the systems.
  </para>
  <para>
   Many vulnerabilities are usually announced on centralized
   databases, for example the <emphasis>National Vulnerability
   Database</emphasis>, maintained by the US government.
   Administrators can subscribe to feeds to stay informed about newly
   discovered vulnerabilities. In many cases the problems induced by
   the bugs can be mitigated until a software update is provided.
   Vulnerabilities are assigned a <emphasis>Common Vulnerabilities
   and Exposures</emphasis> (<emphasis>CVE</emphasis>) number and a
   <emphasis>Common Vulnerability Scoring System</emphasis>
   (<emphasis>CVSS</emphasis>) score. The score helps identifying
   the severity of vulnerabilities.
  </para>
  <para>
   &suse; provides a feed of security advisories. It is available at
   <link xlink:href="https://www.suse.com/en-us/support/update/" />.
   There is also a list of security updates by CVE number available at
   <link xlink:href="https://www.suse.com/en-us/security/cve/" />.
  </para>
  <para>
   In general, administrators should be prepared for severe
   vulnerabilities in their systems. This includes hardening all
   computers as far as possible. Also, we recommend to have predefined
   procedures in place for quickly installing updates for severe
   vulnerabilities.
  </para>
  <para>
   To reduce the damage of possible attacks, use restrictive file
   permissions. See <xref linkend= "sec.security.local.permissions" />.
   &suse; provides a guide to harden &productname;.<phrase
   os="sles">For details, see <xref
   linkend="book.hardening"/>.</phrase>
  </para>
  <para>
   Other useful links:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <link
     xlink:href="http://lists.opensuse.org/opensuse-security-announce/"/>
     , mailing list with &opensuse; security announcements.
    </para>
   </listitem>
   <listitem>
    <para><link
     xlink:href="https://nvd.nist.gov/home"
    />, the National Vulnerability Database</para>
   </listitem>
   <listitem>
    <para><link
     xlink:href="https://cve.mitre.org/"
    />, MITRE's CVE database</para>
   </listitem>
   <listitem>
    <para><link
    xlink:href="https://www.bsi.bund.de/DE/Service/Aktuell/Cert_Bund_Meldungen/cert_bund_meldungen_node.html"
    />, <emphasis>German Federal Office for Information
    Security</emphasis> vulnerability feed</para>
   </listitem>
   <listitem>
    <para>
    <link
    xlink:href="https://www.first.org/cvss/"
    />, Information about the Common Vulnerability Scoring System
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.security.malware">
  <title>Malware</title>
  <para>
   <emphasis>Malware</emphasis> refers to software that is intended to
   interrupt the normal functioning of a computer or steal data.
   Sometimes malware uses software vulnerabilities to attack a computer.
   However, in many cases it is accidentally executed by a user,
   especially when installing third party software from unknown sources.
   &productname; provides an extensive list of packages (RPMs) in its
   download repositories. While the packages are supported, &suse;
   provides security updates for them. Also, all packages provided by
   &suse; are signed. Zypper, the package manager of &productname; will
   check the signatures after the download. This ensures that packages
   cannot be tampered with.
  </para>
  <para>
   The command <command>rpm</command>&nbsp;<option>--checksig
   <replaceable>RPM_FILE</replaceable></option> shows whether the
   checksum and the signature of an uninstalled package are correct.
   Find the key on the first CD of the distribution and on most key
   servers worldwide.
  </para>
  <para>
   You can use &clamav; antivirus software to detect malware on your
   system. &clamav; can be integrated into several services, for example
   mail servers or HTTP proxies. This can be used to filter malware
   before it arrives at the user.
  </para>
 </sect1>

 <sect1 xml:id="sec.security.tips">
  <title>Important Security Tips</title>

  <para>
   The following tips are a quick summary of the sections above:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Stay informed about the latest security issues. Get and install
     the updated packages recommended by security announcements as
     quickly as possible.
    </para>
   </listitem>
   <listitem>
    <para>
     Avoid using &rootuser; privileges whenever possible. Set
     restrictive file permissions.
    </para>
   </listitem>
   <listitem>
    <para>
     Only use encrypted protocols for network communication.
    </para>
   </listitem>
   <listitem>
    <para>
     Disable any network services you do not absolutely require for your
     server to work properly.
    </para>
   </listitem>
   <listitem>
    <para>
     Conduct regular security audits. For example, scan your network for
     open ports.
    </para>
   </listitem>
   <listitem>
    <para>
     Monitor the integrity of files on your systems with
     <literal>AIDE</literal> (Advanced Intrusion Detection
     Environment).
    </para>
   </listitem>
   <listitem>
    <para>
     Take proper care when installing any third-party software.
    </para>
   </listitem>
   <listitem>
    <para>
     Check all your backups regularly.
    </para>
   </listitem>
   <listitem>
    <para>
     Check your log files. Write a small script to search for
     suspicious entries.
    </para>
   </listitem>
   <listitem>
    <para>
     Configure the firewall to block all ports that are not explicitly
     whitelisted.
    </para>
   </listitem>
   <listitem>
    <para>
     Design your security measures to be redundant: a message seen
     twice is much better than no message.
    </para>
   </listitem>
   <listitem>
    <para>
     Use encryption where possible, for example for hard disks of mobile
     computers.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.security.general.report">
  <title>Reporting Security Issues</title>

  <para>
   If you discover a security-related problem, first check the
   available update packages. If no update is available, write an
   e-mail to <email>security@suse.de</email>. Include a detailed
   description of the problem and the version number of the package
   concerned. &suse; will try to send a reply when possible. We
   encourage to encrypt e-mails with GPG.
  </para>

  <para>
   You can find a current version of the SUSE GPG key on
   <link xlink:href="https://www.suse.com/support/security/contact/"/>.
  </para>
 </sect1>
</chapter>
