<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 version="5.0" xml:id="CreateProfile-ConfigurationManagement"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Configuration Management</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
      &ay; allows delegating part of the configuration to a
      <emphasis>configuration management tool</emphasis> like Salt. &ay; takes
      care of the basic system installation (partitioning, network setup, etc.)
      and the remaining configuration tasks can be delegated.
    </para>

   <note>
    <title>Only Salt is Officially Supported</title>
    <para>
      Although Puppet is mentioned in this document, only Salt is officially
      supported. Nevertheless, feel free to report any problem you might find with Puppet.
    </para>
   </note>

    <para>
     &ay; supports two different approaches:
    </para>

    <itemizedlist>
     <listitem>
      <para>
       Using a configuration management server. In this case, &ay; sets up a
       configuration management tool. It connects to a master server to
       get the instructions to configure the system.
      </para>
     </listitem>
     <listitem>
      <para>
       Getting the configuration from elsewhere (for example, an HTTP server or
       a flash disk like a USB stick) and running the configuration management tool in stand-alone mode.
      </para>
     </listitem>
    </itemizedlist>

    <sect2 xml:id="CreateProfile-ConfigurationManagement-Server">
     <title>Connecting to a Configuration Management Server</title>

     <para>
      This approach is especially useful when a configuration management
      server (a <emphasis>master</emphasis> in Salt and Puppet jargon) is already
      in place. In this case, the hardest part might be to set up a proper
      authentication mechanism.
     </para>

     <para>
      Both Salt and Puppet support the following authentication methods:
     </para>

     <itemizedlist>
      <listitem>
       <para>
        Manual authentication on the fly. When &ay; starts the client, a new
        authentication request is generated. The administrator can manually
        accept this request on the server. &ay; will retry the connection. If
        the key was accepted meanwhile, &ay; continues the installation.
       </para>
      </listitem>
      <listitem>
       <para>
        Using a preseed key. Refer to the documentation of your configuration
        management system of choice to find out how to generate them. Use the
        <literal>keys_url</literal> option to tell &ay; where to look for them.
       </para>
      </listitem>
     </itemizedlist>

     <para>
      With the configuration example below, &ay; will launch the client to generate
      the authentication request. It will try to connect up to three times,
      waiting 15 seconds between each try.
     </para>

     <example xml:id="configuration-management-manual-authentication">
      <title>Client/Server with Manual Authentication</title>
<screen>&lt;configuration_management&gt;
    &lt;type&gt;salt&lt;/type&gt;
    &lt;master&gt;my-salt-server.example.net&lt;/master&gt;
    &lt;auth_attempts config:type="integer"&gt;3&lt;/auth_attempts&gt;
    &lt;auth_time_out config:type="integer"&gt;15&lt;/auth_time_out&gt;
&lt;/configuration_management&gt;</screen>
     </example>

     <para>
      However, with the following example, &ay; will retrieve the keys from a
      flash disk (for example, a USB stick) and will use them to connect to the
      master server.
     </para>

     <example xml:id="configuration-management-preseed-keys">
      <title>Client/Server with Preseed Keys</title>
<screen>&lt;configuration_management&gt;
    &lt;type&gt;salt&lt;/type&gt;
    &lt;master&gt;my-salt-server.example.net&lt;/master&gt;
    &lt;keys_url&gt;usb:/&lt;/keys_url&gt;
&lt;/configuration_management&gt;</screen>
     </example>

     <para>
      The table below summarizes the supported options for these scenarios.
     </para>

     <informaltable>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>
          <para>
           Attributes
          </para>
         </entry>
         <entry>
          <para>
           Value
          </para>
         </entry>
         <entry>
          <para>
           Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <literal>type</literal>
          </para>
         </entry>
         <entry>
          <para>
           String
          </para>
         </entry>
         <entry>
          <para>
           Configuration management name. Currently only <literal>salt</literal>
           is officially supported.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>master</literal>
          </para>
         </entry>
         <entry>
          <para>
           String
          </para>
         </entry>
         <entry>
          <para>
           Host name or IP address of the configuration management server.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>auth_attempts</literal>
          </para>
         </entry>
         <entry>
          <para>
           Integer
          </para>
         </entry>
         <entry>
          <para>
           Maximum attempts to connect to the server. The default is three
           attempts.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>auth_time_out</literal>
          </para>
         </entry>
         <entry>
          <para>
           Integer
          </para>
         </entry>
         <entry>
          <para>
           Time (in seconds) between attempts to connect to the server.
           The default is 15 seconds.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>keys_url</literal>
          </para>
         </entry>
         <entry>
          <para>
           URL of used key
          </para>
         </entry>
         <entry>
          <para>
           Path to an HTTP server, hard disk, flash drive or similar with
           the files <literal>default.key</literal> and
           <literal>default.pub</literal>. This key must be known to
           the configuration management master.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>enable_services</literal>
          </para>
         </entry>
         <entry>
          <para>
           True/False
          </para>
         </entry>
         <entry>
          <para>
           Enables the configuration management services on the client
           side after the installation. The default is <literal>true</literal>.
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </sect2>

    <sect2 xml:id="CreateProfile-ConfigurationManagement-Masterless">
     <title>Running in Stand-alone Mode</title>
     <para>
       For simple scenarios, deploying a configuration management server is
       unnecessary. Instead, use Salt or Puppet in
       <emphasis>stand-alone</emphasis> (or <emphasis>masterless</emphasis>)
       mode.
     </para>

     <para>
      As there is no server, &ay; needs to know where to get the configuration
      from. Put the configuration into a TAR archive and store it anywhere
      (for example, on a flash drive, an HTTP/HTTPS server, an NFS/SMB share).
     </para>

     <para>
      The TAR archive must have the same layout that is expected under
      <literal>/srv</literal> in a Salt server. This means that you need to
      place your Salt states in a <filename>salt</filename> directory and your
      formulas in a separate <filename>formulas</filename> directory.
     </para>

     <para>
      Additionally, you can have a <filename>pillar</filename> directory
      containing the pillar data. Alternatively, you can provide that data in a
      separate TAR archive by using the <literal>pillar_url</literal> option.
     </para>

     <example xml:id="configuration-management-masterless">
      <title>Standalone Mode</title>
<screen>&lt;configuration_management&gt;
    &lt;type&gt;salt&lt;/type&gt;
    &lt;states_url&gt;my-salt-server.example.net&lt;/states_url&gt;
    &lt;pillar_url&gt;my-salt-server.example.net&lt;/pillar_url&gt;
&lt;/configuration_management&gt;</screen>
     </example>

     <informaltable>
      <tgroup cols="3">
       <thead>
        <row>
         <entry>
          <para>
           Attributes
          </para>
         </entry>
         <entry>
          <para>
           Value
          </para>
         </entry>
         <entry>
          <para>
           Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <literal>type</literal>
          </para>
         </entry>
         <entry>
          <para>
           String
          </para>
         </entry>
         <entry>
          <para>
           Configuration management name. Currently only <literal>salt</literal>
           is officially supported.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>states_url</literal>
          </para>
         </entry>
         <entry>
          <para>
           URL
          </para>
         </entry>
         <entry>
          <para>
           Location of the Salt states TAR archive. It may include formulas and pillars.
           Files must be located in a <filename>salt</filename> directory.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>pillar_url</literal>
          </para>
         </entry>
         <entry>
          <para>
           URL
          </para>
         </entry>
         <entry>
          <para>
           Location of the TAR archive that contains the pillars.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>modules_url</literal>
          </para>
         </entry>
         <entry>
          <para>
           URL
          </para>
         </entry>
         <entry>
          <para>
           Location of Puppet modules.
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </sect2>

    <sect2 xml:id="CreateProfile-ConfigurationManagement-SUMAFormulasSupport">
     <title>&susemgr; Salt Formulas Support</title>

     <para>
      &ay; offers support for &susemgr; Salt Formulas when running in stand-alone
      mode. In case a formula is found in the states TAR archive, &ay;
      displays a screen which allows the user to select and configure the formulas to apply.
     </para>

     <para>
      Bear in mind that this feature defeats the &ay; purpose of performing an unattended
      installation, as &ay; will wait for the user's input.
     </para>
    </sect2>
  </sect1>
