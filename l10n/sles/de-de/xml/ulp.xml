<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ulp.xml" version="5.0" xml:id="cha-ulp" xml:lang="de">
 <title>Userspace-Live-Patching</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    In diesem Dokument werden die Grundlagen und die Verwendung des Userspace-Live-Patchings erläutert.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec-ulp">
  <title>Informationen zum Userspace-Live-Patching</title>

  <para>
   Das Userspace-Live-Patching (ULP) bezeichnet die Anwendung von Patches auf Bibliotheken, die von laufenden Prozessen verwendet werden, ohne diese zu unterbrechen. Live-Patching-Vorgänge werden mit dem Werkzeug <systemitem>ulp</systemitem> durchgeführt, das Teil von <systemitem>libpulp</systemitem> ist.
  </para>

  <para>
   Das Framework <systemitem>libpulp</systemitem> bildet den Rahmen für das Userspace-Live-Patching. Es besteht aus der Bibliothek <systemitem>libpulp.so</systemitem> und aus Werkzeugen, die die Bibliotheken livepatchfähig machen und die Live-Patches anwenden (die Binärdatei <systemitem>ulp</systemitem>).
  </para>

  <sect2 xml:id="sec-ulp-prereqs">
   <title>Voraussetzungen</title>
   <para>
    Für das ULP müssen zwei Anforderungen erfüllt sein.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Eine Bibliothek muss mit dem GCC-Flag <option>-fpatchable-function-entry</option> kompiliert und damit livepatchfähig gemacht werden. Änderungen am Quellcode der Bibliothek fallen nicht an.
     </para>
    </listitem>
    <listitem>
     <para>
      Prozesse müssen die Bibliothek <systemitem>libpulp.so</systemitem> vorab laden.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-ulp-libpulp">
   <title>Verwenden von libpulp</title>
   <para>
    Zur Verwendung von <systemitem>libpulp</systemitem> mit einer Anwendung gehen Sie wie folgt vor:
   </para>
   <orderedlist>
    <listitem>
     <para>
      Machen Sie eine Bibliothek livepatchfähig.
     </para>
    </listitem>
    <listitem>
     <para>
      Wenn Sie die Anwendung starten, laden Sie <systemitem>libpulp</systemitem> vorab mit dem Kommando <command>LD_PRELOAD=/usr/lib64/libpulp.so ./<replaceable>ANWENDUNG</replaceable></command>.
     </para>
    </listitem>
   </orderedlist>
   <sect3 xml:id="sec-ulp-prep-lib">
    <title>Vorbereiten der Live-Patch-Fähigkeit einer Bibliothek</title>
    <para>
     Damit eine Bibliothek livepatchfähig ist, müssen ihre Funktionsaufrufe allesamt den Prolog <literal>NOP</literal> enthalten. GCC ab Version 8 (und die in SUSE Linux Enterprise Server enthaltene GCC-Version) bietet speziell für diesen Zweck das Flag <option>-fpatchable-function-entry</option>. Auf der AMD64/Intel 64-Architektur reicht es daher aus, eine in C geschriebene Bibliothek mit dem Flag <option>&#x2011;fpatchable-function-entry=16,14</option> zu kompilieren, um sie livepatchfähig zu machen.
    </para>
    <para>
     Die Bibliotheken glibc, libssl.so.1.1 und libcrypto.so.1.1 sind unter SUSE Linux Enterprise 15 SP4 bereits livepatchfähig.
    </para>
   </sect3>
   <sect3 xml:id="sec-ulp-livepatch-check">
    <title>Prüfen der Live-Patch-Fähigkeit einer Bibliothek</title>
    <para>
     Prüfen Sie mit dem folgenden Kommando, ob eine Bibliothek livepatchfähig ist:
    </para>
<screen>ulp livepatchable <replaceable>LIBRARY</replaceable></screen>
   </sect3>
   <sect3 xml:id="sec-ulp-apply-livepatch">
    <title>Anwenden von Live-Patches</title>
    <para>
     Live-Patches werden mit dem Kommando <systemitem>ulp trigger</systemitem> angewendet, beispielsweise:
    </para>
<screen>ulp trigger -p <replaceable>PID</replaceable> <replaceable>LIVEPATCH</replaceable>.ulp</screen>
    <para>
     In diesem Beispiel bezeichnet <literal>PID</literal> die PID des laufenden Prozesses, der die zu patchende Bibliothek enthält, und <literal>LIVEPATCH.ulp</literal> ist die eigentliche Live-Patch-Datei.
    </para>
    <para>
     Die Meldung <literal>live patching succeeded</literal> (Live-Patching erfolgreich) weist darauf hin, dass der Live-Patching-Vorgang erfolgreich abgeschlossen wurde.
    </para>
   </sect3>
   <sect3 xml:id="sec-ulp-revert-livepatch">
    <title>Zurücksetzen von Live-Patches</title>
    <para>
     Live-Patches können mit <command>ulp trigger</command> zurückgesetzt werden. Für das Zurücksetzen von Live-Patches stehen zwei Möglichkeiten zur Auswahl. Sie können einen Live-Patch durch Anwendung des zugehörigen <filename>.rev</filename>-Patch zurücksetzen:
    </para>
<screen>ulp trigger -p <replaceable>PID</replaceable> <replaceable>LIVEPATCH</replaceable>.rev</screen>
    <para>
     Alternativ können Sie alle Patches einer bestimmten Bibliothek zurücksetzen. Beispiel:
    </para>
<screen>ulp trigger -p <replaceable>PID</replaceable> --revert-all=<replaceable>LIBRARY</replaceable></screen>
    <para>
     Im obigen Beispiel steht <replaceable>LIBRARY</replaceable> (BIBLIOTHEK) für die eigentliche Bibliothek, z. B. <systemitem>libcrypto.so.1.1</systemitem>.
    </para>
    <para>
     Das zweite Verfahren kann von Nutzen sein, wenn der Quellcode des ursprünglichen Live-Patches nicht verfügbar ist oder wenn Sie einen bestimmten älteren Patch entfernen und einen neuen anwenden möchten, ohne dass die Zielanwendung potenziell unsicheren Code ausführt. Beispiel:
    </para>
<screen>ulp trigger -p <replaceable>PID</replaceable>  --revert-all=libcrypto.so.1.1 new_livepatch2.ulp</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-ulp-info">
  <title>Weitere Informationen</title>

  <para>
   Weitere Informationen zu <systemitem>libpulp</systemitem> finden Sie im <link xlink:href="https://github.com/SUSE/libpulp">Git-Repository</link> des Projekts.
  </para>
 </sect1>
</chapter>
