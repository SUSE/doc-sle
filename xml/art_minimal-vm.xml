<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
[
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<article version="5.2" xml:id="article-minimal-vm" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>&sle_minvm_guide;</title>
  <productname>&minvm;</productname>
  <productnumber>&productnumber;</productnumber>
  <date><?dbtimestamp format="B d, Y"?></date>
  <meta name="task" its:translate="no">
   <phrase>Virtualization</phrase>
  </meta>
  <meta name="series" its:translate="no">Product Documentation</meta>

  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    The following document provides an overview of &minvm; (formerly known
    as &jeos;) and describes the setup procedure.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec-introduction">
  <title>Introduction</title>

  <para>
   &minvm; refers to a minimal customizable
   operating system that is tailored for a specific usage scenario: a container
   host, a virtual machine guest, an appliance base, or a small server image.
   &minvm; acts as a foundation for building systems for use in a data center,
   creating desired virtual application images or appliances. You can choose
   what packages and components to install based on a specific use case. To
   that end, &minvm; provides access to all regular software repositories.
  </para>

  <para>
   If you already have &sls; certification, you are automatically certified for
   &minvm;, as it is derived from the same code base. &minvm; allows you to
   reduce the operating system to the packages essential for the specific usage
   scenario. This minimizes the number of packages and patches that need to be
   managed and applied. By removing unnecessary packages, you also reduce the
   number of potential vulnerabilities, thus making the resulting system more
   secure. Reducing the system's footprint also results in lower resource
   consumption and improved performance.
  </para>

  <para>
   &minvm; is delivered as preconfigured and ready-to-run virtual machine
   images. The system comes with the <systemitem>&jeosfirstboot;</systemitem>
   wizard for configuring system locales and the &rootuser; password during the first
   boot. &minvm; ships with the SSH server enabled and excluded from the
   firewall configuration. The supplied &kiwi; templates make it possible to
   create customized &minvm; images.
  </para>

  <para>
   &minvm; provides ready-to-deploy server images on the &x86-64; architecture
   for the following usage scenarios:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     &kvm;/&xen; with HVM
    </para>
   </listitem>
   <listitem>
    <para>
     &xen; Paravirtualized
    </para>
   </listitem>
   <listitem>
    <para>
     &hyperv;
    </para>
   </listitem>
   <listitem>
    <para>
     &vmware;
    </para>
   </listitem>
   <listitem>
    <para>
     OpenStack Cloud
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec-system-requirements">
   <title>System requirements</title>
   <para>
    The minimum &minvm; system requirements are similar to &sls;. For more
    information, refer to <xref
   linkend="sec-x86-requirements"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-minvm-sles-diff">
   <title>Differences between &minvm; and &sls;</title>
   <para>
    There are several significant differences between &minvm; and &sls;.
   </para>
   <variablelist xml:id="vl-minvm-sles-diff">
    <title>Differences between &minvm; and &sls;</title>
    <varlistentry>
     <term>&jeosfirstboot;</term>
     <listitem>
      <para>
       &minvm; comes with the <package>&jeosfirstboot;</package> tool, which can
       be used to configure basic settings during the first boot. This includes
       keyboard layout and language, time zone, and &rootuser; password.
      </para>
      <para>
       The default network configuration is set to use DHCP, and the system
       automatically creates a Btrfs snapshot of the initial configuration.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><package>kernel-default-base</package></term>
     <listitem>
      <para>
       Because of size constraints, &minvm; images use the
       <package>kernel-default-base</package> as the default kernel. Since the
       kernel does not contain drivers for bare metal, this allows for a
       smaller footprint.
      </para>
      <para>
       If a specific usage scenario requires any of the omitted modules,
       install the <package>kernel-default</package> package to get a full tree
       of the kernel modules. This is the same kernel used by a regular &sls;
       installation.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>No repositories by default</term>
     <listitem>
      <para>
       When installing a &sls; from the installation media, the system
       automatically sets the installation media as the default offline
       channel.
      </para>
      <para>
       &minvm; has no channel by default, and you need to register your system to
       access online channels. Refer to <xref
       linkend="sec-register-sle-system-suseconnect"/> for further information.
      </para>
      <note>
      <para>
      The <package>&jeosfirstboot;</package>, <package>jeos-licenses</package> and <package>live-langset-data</package> packages receive updates only if the Development Tools Module is enabled. However, these packages are not essential for running &minvm; instances, so they can be removed or left untouched.
      </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Zypper configuration</term>
     <listitem>
      <para>
       &minvm; is a slimmed-down version of &sls;. The reduction in size is
       achieved in part by enabling the following two options in
       <filename>/etc/zypp/zypp.conf</filename>:
       <literal>rpm.install.excludedocs = yes</literal> (excludes all files
       marked as documentation from being installed by default) and
       <literal>solver.onlyRequires = true</literal> (disables installation of
       suggested and recommended packages by default).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Base packages</term>
     <listitem>
      <para>
       &minvm; images are built using the &kiwi; tool. &kiwi;'s configuration
       files, called templates, explicitly list packages that must be included
       in the images. Keep in mind that these base packages pull their
       dependencies during the image building process. Therefore, the list of
       preinstalled packages in an image usually contains more packages than
       the list of base packages.
      </para>
      <para>
       The &kiwi; configuration files used to create the official &minvm; images
       are available from the openSUSE Build Service at
       <link
      xlink:href="https://build.opensuse.org/package/view_file/SUSE:SLE-15-SP4:GA/kiwi-templates-Minimal/Minimal.kiwi?expand=1">https://build.opensuse.org/</link>.
      </para>
      <note>
       <title>Specific host tools packages</title>
       <para>
        Each &minvm; flavor contains certain host tools packages. Refer to
        the specific flavors section in the documentation for further
        information.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Disk layout</term>
     <listitem>
      <para>
       Unlike &sls;, which calculates the disk layout during installation,
       &minvm; features the following fixed virtual image partitioning scheme:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         2&nbsp;MB BIOS boot
        </para>
       </listitem>
       <listitem>
        <para>
         33&nbsp;MB EFI system
        </para>
       </listitem>
       <listitem>
        <para>
         24&nbsp;GB Linux file system
        </para>
       </listitem>
      </itemizedlist>
      <para>
       To get additional disk space, you can either extend the existing disk
       from the virtual host or add a secondary disk to the virtual machine. If
       you choose the latter option, you must partition and format it manually.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>systemd-coredump disabled</term>
     <listitem>
      <para>
       Due to the limited amount of memory and disk space available by default
       on &minvm; images, systemd-coredump is disabled by default on &minvm; images.
       To collect application core dumps necessary for troubleshooting, follow
       these steps:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         Install the <package>systemd-coredump</package> package, which
         contains <filename>/usr/lib/sysctl.d/50-coredump.conf</filename>
        </para>
       </listitem>
       <listitem>
        <para>
         To apply the configuration changes to your system, reboot or use the
         <command>sysctl --system</command> command.
        </para>
       </listitem>
      </itemizedlist>
      <para>
       For further information, refer to
       <link xlink:href="https://documentation.suse.com/sles/html/SLES-all/cha-tuning-systemd-coredump.html"/>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-available-image-flavors">
  <title>Available image flavors</title>

  <para>
   Ready-to-use &minvm; images are available for the x86_64 architecture only.
   You can download &minvm; for the following deployment targets:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Fully Virtual &minvm; for &kvm; and &xen; (FV/HVM)
    </para>
   </listitem>
   <listitem>
    <para>
     &minvm; for &vmware;
    </para>
   </listitem>
   <listitem>
    <para>
     &minvm; for &hyperv;
    </para>
   </listitem>
   <listitem>
    <para>
     &minvm; for OpenStack
    </para>
   </listitem>
   <listitem>
    <para>
     Paravirtual &minvm; for &xen; (PV)
    </para>
   </listitem>
  </itemizedlist>

  <important>
   <title>Supported virtualization hosts (hypervisors)</title>
   <para>
    &minvm; can run as a virtualization guest on the same virtualization hosts
    (hypervisors) as &sls;.
   </para>
  </important>

  <sect2 xml:id="sec-openstack-cloud">
   <title>&minvm; Image for OpenStack Cloud</title>
   <para>
    &minvm; for OpenStack Cloud is an image designed specifically for use in an
    OpenStack environment.
   </para>
   <para>
    Instead of the <package>&jeosfirstboot;</package> tool, &minvm; for OpenStack
    Cloud uses
    <link xlink:href="https://cloudinit.readthedocs.io/en/latest/#">cloud-init</link>
    for configuring the image. The image also uses the XFS file system and the
    following kernel configuration:
   </para>
<screen>"plymouth.enable=0 console=ttyS0,115200 console=tty0 net.ifnames=0"</screen>
   <para>
    This means that the image ships without packages required by
    <package>&jeosfirstboot;</package> and Btrfs.
   </para>
   <para>
    &minvm; for OpenStack Cloud includes several OpenStack-related packages,
    such as <package>cloud-init</package>,
    <package>cloud-init-config-suse</package>, and <package>xfsprogs</package>.
   </para>
   <sect3 xml:id="sec-cloud-init-intro">
    <title><command>cloud-init</command> basics</title>
    <para>
     <command>cloud-init</command> automatically applies custom configuration
     to running instances. The tool features a wide range of configuration
     modules, and it can execute specific commands in the image during the boot
     phase.
    </para>
    <para>
     The default configuration for cloud-init is part of the
     <package>cloud-init-config-suse</package> package, and it is located in
     the <filename>/etc/cloud/cloud.cfg</filename> directory.
    </para>
   </sect3>
   <sect3 xml:id="sec-cloud-init-config-examples">
    <title>cloud-init configuration examples</title>
    <para>
    By default, cloud-init does not set a root password. Instead, it creates a user account called <systemitem class="username">sles</systemitem> that acts as the default user and has sudo rights. Use the following example to create passwords for both users.
    </para>
    <example xml:id="cloud-init-passwd">
     <title>Add passwords</title>
<screen>
#cloud-config
chpasswd:
  list: |
    root:$6$SalTsaLt$miA./Q1i1mKR0sYicn/yAzNHP6y32JjOdVIn5agAiaEKaSaZdC3X6CVTW2d/xslQfevCc20teWLurq12x8mbe1
    sles:$6$SalTsaLt$.cuqsgjNGxHJZSLmVqkI/j9.kWIiUQHqjlRswbHjTw9hIXdPomgey2DHzmp6Ho6wgqIKz3ufbOIKdQCnQHPSA1
  expire: False</screen>
    </example>
    <para>
     To create the SHA-512 hashes used in the example, run the command:
     <command>openssl passwd -6 -salt SalTsaLt
     <replaceable>PASSWORD</replaceable></command>.
    </para>
    <warning>
     <title>User passwords</title>
     <para>
      To avoid potential security risks, do not use passwords in production
      environments. Even when using hashed passwords, you are exposed to
      dictionary attacks. For better security, use SSH authentication instead
      of passwords.
     </para>
    </warning>
    <para>
     When creating users, keep in mind that logging in with a password is
     disabled by default, and that the newly created users do not have sudo
     rights.
    </para>
    <para>
     The following examples show configurations for creating various users.
    </para>
    <example xml:id="cloud-init-user1">
     <title>New user with password and sudo</title>
<screen>#cloud-config
users:
  - default
  - name: <replaceable>USER</replaceable>
    shell: /bin/bash
    groups: users
    # lock_passwd: Disable password login. Defaults to true
    lock_passwd: false
    passwd: $6$SalTsaLt$.cuqsgjNGxHJZSLmVqkI/j9.kWIiUQHqjlRswbHjTw9hIXdPomgey2DHzmp6Ho6wgqIKz3ufbOIKdQCnQHPSA1
    sudo: ALL=(ALL) NOPASSWD:ALL</screen>
    </example>
    <example xml:id="cloud-init-user2">
     <title>New user with SSH keys and sudo</title>
<screen>#cloud-config
users:
  - name: <replaceable>USER</replaceable>
    shell: /bin/bash
    groups: users
    ssh_import_id: None
    lock_passwd: true
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - <replaceable>SSH_PUBLIC_KEY_1</replaceable>
      - <replaceable>SSH_PUBLIC_KEY_2</replaceable></screen>
    </example>
    <para>
     To connect and register with the &sumaa;, &rmt;, or &suseconnect;, use the
     <literal>runcmd</literal> module to run the desired commands, for example:
    </para>
<screen>#cloud-config
runcmd:
  - SUSEConnect -r <replaceable>REGISTRATION_CODE</replaceable> -e <replaceable>EMAIL_ADDRESS</replaceable></screen>
    <para>
     For further information, see
     <link
xlink:href="https://documentation.suse.com/sles/html/SLES-all/cha-register-sle.html"/>.
    </para>
    <para>
     For &rmt;, the configuration is as follows:
    </para>
<screen>#cloud-config
runcmd:
  - curl http://<replaceable>RMT_SERVER</replaceable>/tools/rmt-client-setup \ --output rmt-client-setup
  - sh rmt-client-setup https://<replaceable>RMT_SERVER/</replaceable></screen>
    <para>
     For further information, see
     <link xlink:href="https://documentation.suse.com/sles/html/SLES-all/cha-rmt-client.html"/>.
    </para>
    <para>
     For &sumaa;, the configuration is as follows:
    </para>
<screen>#cloud-config
runcmd:
  - curl -O http://suma01/pub/bootstrap/bootstrap.sh
  - /bin/bash bootstrap.sh</screen>
    <para>
     For further information, see
     <link xlink:href="https://documentation.suse.com/external-tree/en-us/suma/4.0/suse-manager/client-configuration/registration-bootstrap.html"/>.
    </para>
    <para>
     Finally, the following example shows a configuration that installs a
     package and starts a service during the first boot.
    </para>
<screen>#cloud-config
packages:
  - qemu-guest-agent
runcmd:
  - systemctl enable qemu-guest-agent.service
  - systemctl start --no-block qemu-guest-agent.service</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-kvmxen-xen">
   <title>&kvm;/&xen; and &xen; flavor</title>
   <para>
    The &minvm; image for &kvm;/&xen; and &xen; ships with the following
    packages:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      xen-tools-domU
     </para>
    </listitem>
    <listitem>
     <para>
      grub2-x86_64-xen
     </para>
    </listitem>
    <listitem>
     <para>
      xen-libs
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-ms-hyperv">
   <title>&hyperv; flavor</title>
   <para>
    The &minvm; image for &hyperv; ships with <package>hyper-v</package>.
   </para>
  </sect2>

  <sect2 xml:id="sec-vmware">
   <title>&vmware; flavor</title>
   <para>
    The &minvm; image for &vmware; ships with <package>open-vm-tools</package>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-minvm-kvm">
  <title>Installing and running &minvm; on &kvm;</title>

  <para>
   Provided you have &kvm; installed on your local machine, you can use a
   ready-made &minvm; image to create a virtual machine. This allows you to
   experiment with &minvm; safely.
  </para>

  <para>
   Download a 60-day trial &minvm; image for &kvm; at
   <link xlink:href=
    "https://www.suse.com/products/server/jeos/"></link>.
  </para>

  <para>
   Refer to the following procedure to create a &minvm; virtual machine in
   &kvm;.
  </para>

  <procedure>
   <title>Creating a &minvm; virtual machine</title>
   <step>
    <para>
     Launch Virtual Machine Manager and choose
     <menuchoice><guimenu>File</guimenu> <guimenu>New Virtual
     Machine</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Select <guimenu>Import existing disk image</guimenu> and click
     <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Browse</guimenu> button next to the <guimenu>Provide
     the existing storage path</guimenu> field.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Add Pool</guimenu> button, and in the <guimenu>Create
     Storage Volume</guimenu> dialog box, give the new pool a name, and select
     <guimenu>dir: Filesystem Directory</guimenu> from the
     <guimenu>Type</guimenu> drop-down list. Leave the <guimenu>Target Path</guimenu> option at its default value. Click <guimenu>Finish</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject>
       <imagedata width="80%" fileref="minvm_add_pool.png"/>
      </imageobject>
      <textobject><phrase>Add a new storage pool</phrase>
      </textobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     Select the created storage pool, click the <guimenu>Browse Local</guimenu> button, and select the &minvm; qcow2
     image. Specify the correct operating system in the <guimenu>Choose the operating system you are installing</guimenu> field, and click <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     When prompted, set the RAM value to 1024, and the number of CPUs to 1.
     Click <guimenu>Forward</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject>
       <imagedata width="80%" fileref="minvm_ram_cpu.png"/>
      </imageobject>
      <textobject><phrase>Specify RAM and CPU settings</phrase>
      </textobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     Give the new virtual machine a name (for example, <literal>Minimal
     VM</literal>) and click <guimenu>Finish</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject>
       <imagedata width="80%" fileref="minvm_finish.png"/>
      </imageobject>
      <textobject><phrase>&minvm; virtual machine configuration</phrase>
      </textobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     If prompted to start the virtual network, click <guimenu>Yes</guimenu>.
    </para>
   </step>
  </procedure>

  <para>
   After the system is booted, &jeosfirstboot; guides you through the initial
   system setup.
  </para>

  <procedure xml:id="pro-rpi-firstboot-minvm">
   <note>
    <title>Change locale</title>
    <para>
     The &minvm; image comes with the <literal>en_US</literal> locale only. You
     can install and select the desired system locale after the setup is
     completed by installing the <package>glibc-locale</package> package and
     running the <command>localectl set-locale
     LANG=<replaceable>LOCALE</replaceable></command> command (replace
     <replaceable>LOCALE</replaceable> with the desired language locale, for
     example, <literal>de_DE.UTF-8</literal>).
    </para>
   </note>
   <step>
    <para>
     As the first step, you are prompted to select the appropriate keyboard
     layout using the keyboard selection dialog.
    </para>
   </step>
   <step>
    <para>
     Next, read and accept the License Agreement. You cannot proceed without
     accepting the license agreement.
    </para>
   </step>
   <step>
    <para>
     Specify the desired time zone.
    </para>
   </step>
   <step>
    <para>
     When prompted, specify and confirm the desired root password.
    </para>
   </step>
   <step>
    <para>
     As the last step, you are instructed to register your system. If you only
     plan to test &minvm;, you can skip registration.
    </para>
   </step>
   <step>
    <para>
     After the initial configuration is completed, you can log in to the system
     as <literal>root</literal>, using the password you specified during the
     setup procedure.
    </para>
   </step>
  </procedure>

  <tip>
   <title>Installing product patches after first boot</title>
   <para>
    After &minvm; has been successfully installed and registered, we highly
    recommend to install the latest available online updates.
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-minvm-kvm-combustion">
  <title>Using &combustion; with &minvm;</title>
  <para>
&minvm; comes with the &combustion; configuration tool that makes it possible to configure the system on first boot using a dedicated script file. Using &combustion; instead of &jeosfirstboot; allows you to automatically apply identical configuration to multiple &minvm; instances.
  </para>
  <para> 
    To trigger the &combustion; tool in &kvm;, use the <command>qemu</command> command with the <parameter>fw_cfg</parameter> parameter that specifies the location of the <filename>script</filename> file.
  </para>
  <para>
    To see how this works in practice, you can use a simple &combustion; script that automatically adds the &rootuser; user to the &minvm; instance running in &qemu;.
  </para>
    <para>
      First, generate a hash of the desired &rootuser; password. This can be done using the <command>openssl passwd -6</command> command. Add the following instruction to the <filename>script</filename> file (replace the example hash with the generated one):
     </para>
<screen>echo 'root:$5$.wn2BZHlEJ5R3B1C$TAHEchlU.h2tvfOpOki54NaHpGYKwdNhjaBuSpDotD7' | chpasswd -e</screen>
  <para>
    Run a new virtual machine based on &minvm; in &qemu; using the following command (replace <replaceable>IMAGE</replaceable> and <replaceable>SCRIPT</replaceable> with the path name of the <filename>.qcow2</filename> image and the <filename>script</filename> file):
  </para>
<screen>&prompt.user;qemu-system-x86_64 \
  -enable-kvm \
  -m 1G \
  -smp 1 \
  -drive if=virtio,format=qcow2,file=<replaceable>IMAGE</replaceable>.qcow2 \
  -nographic \
  -netdev user,id=net0,hostfwd=tcp::2222-:22 \
  -device virtio-net-pci,netdev=net0 \
  -fw_cfg name=opt/org.opensuse.combustion/script,file=<replaceable>SCRIPT</replaceable>
  </screen>
  <para>
    Keep in mind that when &combustion; is running, it does not provide any feedback or output. The only indication that the configuration has been performed correctly is the fact that the system does not launch &jeosfirstboot; tool, and you can log in to the system as &rootuser; using the password you generated earlier.
  </para>
  </sect1>
 <xi:include href="common_copyright_quick.xml"/>
 <xi:include href="common_license_gfdl1.2.xml"/>
</article>
