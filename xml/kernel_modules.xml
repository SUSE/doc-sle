<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.mod">
 <title>Managing Kernel Modules</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
   Although Linux is a monolithic kernel, it can be extended using kernel
   modules. These are special objects that can be inserted into the kernel and
   removed on demand. In practical terms, kernel modules make it possible to
   add and remove drivers and interfaces that are not included in the kernel
   itself. Linux provides several commands for managing kernel modules.
 </para>
 <sect1 xml:id="sec.mod.lsmod">
  <title>Listing Loaded Modules with lsmod and modinfo</title>
  <para>
    Use the <command>lsmod</command> command to view what kernel modules are
    currently loaded. The output of the command may look as follows:
  </para>
  <screen>$ lsmod
Module                  Size  Used by
snd_usb_audio         188416  2 
snd_usbmidi_lib        36864  1 snd_usb_audio
hid_plantronics        16384  0 
snd_rawmidi            36864  1 snd_usbmidi_lib
snd_seq_device         16384  1 snd_rawmidi
fuse                  106496  3 
nfsv3                  45056  1 
nfs_acl                16384  1 nfsv3</screen>
  <para>
    The output is divided into three columns. The "Module" column lists the names
    of the modules, while the "Size" column displays the size of each
    module. The "Used by" column shows the number of referring
    modules and their names. Note that this list may be incomplete.
  </para>
  <para>
    To view detailed information about a specific kernel module, use the
    <command>modinfo <replaceable>MODULE_NAME</replaceable></command> command, where
    <replaceable>MODULE_NAME</replaceable> is the name of the desired kernel
    module. On &productname;, the <command>modinfo</command> command requires
    root privileges:
  </para>
  <screen>$ sudo modinfo kvm
filename:       /lib/modules/4.4.57-18.3-default/kernel/arch/x86/kvm/kvm.ko
license:        GPL
author:         Qumranet
srcversion:     BDFD8098BEEA517CB75959B
depends:        irqbypass
intree:         Y
vermagic:       4.4.57-18.3-default SMP mod_unload modversions 
signer:         openSUSE Secure Boot Signkey
sig_key:        03:32:FA:9C:BF:0D:88:BF:21:92:4B:0D:E8:2A:09:A5:4D:5D:EF:C8
sig_hashalgo:   sha256
parm:           ignore_msrs:bool
parm:           min_timer_period_us:uint
parm:           kvmclock_periodic_sync:bool
parm:           tsc_tolerance_ppm:uint
parm:           lapic_timer_advance_ns:uint
parm:           halt_poll_ns:uint
parm:           halt_poll_ns_grow:int
parm:           halt_poll_ns_shrink:int</screen>
  </sect1>
  <sect1 xml:id="sec.mod.modprobe">
    <title>Adding and Removing Kernel Modules</title>
    <para>
      The <systemitem>insmod</systemitem> and <systemitem>rmmod</systemitem>
      utilities make it possible to add and remove kernel modules by running
      the appropriate command as root followed by the module's
      name. For example:
    </para>
      <screen>sudo insmod fuse
sudo rmmod acpi</screen>
    <para>
      While these utilities provide basic functionality for adding and removing
      kernel modules, it is recommended to use the
      <systemitem>modprobe</systemitem> tool instead, as it offers several
      important advantages. This includes automatic dependency resolution and
      blacklisting.
    </para>
    <para>
      When used without any parameters, the <systemitem>modprobe</systemitem>
      command installs the specified kernel module. Similar to
      <systemitem>insmod</systemitem> and <systemitem>rmmod</systemitem>,
      <systemitem>modprobe</systemitem> must be run with root privileges:
    </para>
    <screen>sudo modprobe acpi</screen>
    <para>
      To remove a kernel module, use the <command>-r</command> parameter:
    </para>
    <screen>sudo modeprobe -r acpi</screen>
    <sect2 xml:id="sec.mod.modprobe.blacklist">
    <title>Blacklisting Kernel Modules with modprobe</title>
    <para>
      Blacklisting a kernel module prevents it from loading during the boot
      process. This can be useful when you want to disable a module that you
      suspect causing problems on your system. Note that you can still load
      blacklisted kernel modules manually using the
      <systemitem>insmod</systemitem> or <systemitem>modprobe</systemitem> tools.
    </para>
    <para>
      To blacklist a module, add the
      <literal>blacklist <replaceable>MODULE_NAME</replaceable></literal> line
      to the <filename>/etc/modprobe.d/50-blacklist.conf</filename> file. For example:
    </para>
    <screen>blacklist nouveau</screen>
    <para>
      Run the <command>mkinitrd</command> command as root to generate a new <systemitem>initrd</systemitem>
      image, then reboot your machine. These steps can be performed using the following command:
    </para>
    <screen>su
echo "blacklist nouveau" >> /etc/modprobe.d/50-blacklist.conf &amp;&amp; mkinitrd &amp;&amp; reboot</screen>
    </sect2>
 </sect1>
</chapter>
