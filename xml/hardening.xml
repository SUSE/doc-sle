<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE book
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<?provo dirname="security/"?>
<book version="5.0" xml:lang="en" xml:id="book.hardening"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    <dm:assignee>fs@suse.com</dm:assignee>
   </dm:bugtracker>
  </dm:docmanager>
  <title>Hardening Guide</title><productname>&productname;</productname>
  <productnumber>&productnumber;</productnumber><date>
<?dbtimestamp format="B d, Y"?></date>
  <xi:include href="common_copyright_gfdl.xml"/>
  <abstract>
   <para>
    &abstract_hardening;
   </para>
  </abstract>
 </info>
 <preface xml:id="pre.hardening.about">
 <title>About This Guide</title>
 <para>
  The &productname; Hardening Guide deals with the particulars of
  installation and set up of a secure &productname; and additional
  post-install processes required to further secure and harden that
  installation. Security and hardening elements and procedures are best
  applied to a server both during installation and post-installation and aim
  to improve the fitness of the system for the purposes demanded by its
  administrator.
 </para>
 <para>
  This guide supports administrator in making security related choices and
  decisions. The individual steps and procedures should be seen as proposals,
  not as strict rules. You will often need to evaluate the usefulness of
  measures for your organization yourself.
 </para>
 <para>
  The objective is to improve the security value of the system. Definitions
  about the meaning of the term security vary, but we want to settle on one
  that is both simple and abstract:
 </para>
 <para>
  <emphasis>A good system does what it is expected to do, and it does it
  well.</emphasis>
 </para>
 <para>
  <emphasis>A secure system is a good system that does nothing
  else.</emphasis>
 </para>
 <para>
  The focus of this guide lies on doing <quote>nothing else</quote>. The Linux
  system is constructed in such way that security policies are enforced. These
  policies consist of the following concepts (fairly generic and incomplete
  list):
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    DAC (Discretionary Access Control): File and directory permissions, as set
    by <command>chmod</command> and <command>chown</command>.
   </para>
  </listitem>
  <listitem>
   <para>
    Privileged ports: TCP and UDP ports 0-1023 and raw sockets can only be
    used by &rootuser;.
   </para>
  </listitem>
  <listitem>
   <para>
    Other privileged operations: Loading kernel modules, configuring network
    interfaces, all security relevant settings of the Linux kernel. These are
    operations that can only be done by the root user, that is the user with
    the user ID 0, or any other process with the necessary capabilities.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Attacking a system means to attempt to overcome privilege boundaries, for
  example by circumventing or breaking them. That means the administrator or
  programmer of the system has not anticipated this scenario.
 </para>
 <para>
  A hardened system raises the bar by reducing the area that the system
  exposes to the attacker (often called attack surface). A hardened system can
  also provide measures to reduce the impact of vulnerabilities in the parts
  of the systems that must be exposed to a potential attacker.
 </para>
 <para>
  Security is about decisions, and whenever security is in (apparent)
  opposition to function, these decisions become trade-offs. While it can be
  argued that all systems should be set up to be as securely as possible, some
  levels of security and hardening may very well be overkill in some cases.
  Each system's operational environment has its own security requirements
  derived from business drivers or regulatory compliance mandates. &sls; can,
  for example, be configured to comply with security standards, such as SOX,
  HIPAA and PCIDSS. It can also be set up to fulfill the requirements from the
  German Federal Office of Information Security (Bundesamt f√ºr Sicherheit in
  der Informationstechnik) as described in BSI TR-02102-1. An effective
  business requirements analysis should be performed to determine the right
  level of security and hardening to be applied to a server or defined as part
  of a baseline server build.
 </para>
 <para>
  As a final note before we begin: You may encounter individual requirements
  in regulatory compliance frameworks that may not make sense from a technical
  perspective, or they do not serve the purpose of improving security. It may
  be a productive attitude to simply implement what is required, but whenever
  there is a contradiction to security, an informed discussion in the
  documentation serves the overall purpose of your regulative compliance
  framework much more than blindly obeying the specifications. Feel encouraged
  to dispute list items that you think are counterproductive.
 </para>
 <sect1 xml:id="pre.hardening.about.assumptions">
  <title>Assumptions and Scope</title>

  <para>
   References in this document will usually be made to a single server target
   or host, however the scope can generally be applied to more than one
   machine. We generally assume that the security target can cover one or more
   systems running &productname;.
  </para>

  <para>
   We explicitly do <emphasis>not</emphasis> make any assumptions about the
   hostility of the network that the systems are connected to, or the
   cooperative nature of the users that leverage the services provided by the
   systems.
  </para>

  <para>
   In turn, this means that you partially define your context on your own when
   reading through this document. You will need to broaden the meaning of
   individual portions to adapt it to your environment. In some cases, such as
   the use case of a server that is exposed to the Internet, this document may
   even be insufficient or incomplete; however, it may still serve as a good
   starting point on your journey toward an increased level of confidence that
   your system will behave like you want it to.
  </para>

  <para>
   About trust: Trust relationships exist among all systems that participate
   in networked transactions. In this way, the trust relationship between the
   people that use the systems is transported across these systems. The chain
   that is formed by your trust relationships is only as strong as the weakest
   link. It is good practice to graphically visualize the trust relationships
   with the services in a schematic overview or map of your network.
   Generally, it is up to the owner of a resource to enforce the policies
   imposed on that resource; this would usually be the server that provides
   the resource. The client that opens a connection to request the resource
   can only be made responsible for the actions that it performs. This refers
   to the action of opening the connection to start with, but to nothing else
   as such.
  </para>

  <para>
   The case of hostile users is special and unique: The Human Resources
   department may be able to solve some security problems in your computing
   environment; in addition, some technical measures can be taken. Make sure
   that the necessary regulations in your environment fit your needs, and that
   they back your intentions instead of obstructing them if you need to work
   around a missing support from your HR department (and your management).
  </para>

  <para>
   Persons that have administrative privileges on a system are automatically
   considered trusted.
  </para>

  <para>
   A Linux system&mdash;without any additional security frameworks such as
   &selnx;&mdash;is a single level security system: From a security policy
   perspective there is only the superuser (root) and non-privileged users.
   System users are non-root user IDs that have access to files specific to
   their purpose. The separation of administrative duties is complicated by
   this simplicity. Some tools help: Use sudo(8) for administrative tasks, but
   be aware that after the privilege boundary is crossed, a program running
   with root privileges does not enforce any file access policies for
   non-privileged users anymore. vi(1) that runs as root can read and write to
   any file in the system.
  </para>

  <para>
   Another tool to mitigate the risk of abuse or accidental misuse of
   administrative privileges is NetIQ's Privileged User Manager product. More
   information is available here:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <link xlink:href="https://www.netiq.com/products/privileged-user-manager/"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Physical security of the server is another assumption made here, where the
   server is protected from theft and manipulation by unauthorized persons. A
   common sobering thought among security professionals is the
   <quote>ten-second Denial of Service</quote>: Unplug the wires and reboot
   the server. Physical security must be ensured and physical access must be
   controlled. Otherwise, all assumptions about at least the availability of
   these systems are void.
  </para>

  <note>
   <title>Cryptography</title>
   <para>
    The use of cryptography to protect the confidentiality of transactions
    with the services that your system provides is generally encouraged. The
    need to implement cryptographic enhancements is strongly dependent on the
    operational environments of all participating systems. Keep in mind that
    you need to verify all of the possible security benefits that cryptography
    can provide, for all of your services, and that these benefits are not
    delivered automatically by turning on the <quote>encrypt</quote> option of
    your service (if you can enjoy the idyllic situation where encryption is
    available as a button to check):
   </para>
   <variablelist>
    <varlistentry>
     <term>Confidentiality</term>
     <listitem>
      <para>
       Protection against reading the content of a transaction
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Privacy</term>
     <listitem>
      <para>
       Protection against knowing that a transaction exists, and some
       properties that it may have, such as size, identities of involved
       parties, their presence, etc.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Integrity</term>
     <listitem>
      <para>
       Protection against alteration of content. Be aware that cryptography
       does not automatically provide this kind of protection.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Authenticity</term>
     <listitem>
      <para>
       Protection against identity fraud. Cryptography that does not know
       about identities of participating entities cannot deliver this value.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Keep in mind that encryption of data for confidentiality purposes can
    merely reduce the size of the data to protect from the actual size to the
    size of the key that is used to encrypt the data. This results in a key
    exchange problem for encrypted transactions, and in a key management
    problem for encrypted data storage. Since data is (typically, there are
    exceptions!) processed in clear, you need your vault unlocked while data
    within is being worked with. The encryption of such data on the file
    system or block device layer helps against the theft of the system, but it
    does not help the confidentiality of the data while the system is running.
   </para>
  </note>

  <para>
   If you want to implement a consistent security policy covering multiple
   hosts on a network then organizational procedures <emphasis>must</emphasis>
   ensure that all those hosts can be trusted and are configured with
   compatible security configurations enforcing an organization wide security
   policy. Isolation of groups of systems that maintain data of the same trust
   domain can provide an adequate means of control; ultimately, the access
   controls to these systems, both for end users and for other systems, need
   to be carefully designed, configured, inspected and monitored.
  </para>

  <important>
   <title>Trusting Data</title>
   <para>
    Data can only be trusted to the degree that is associated with the domain
    it comes from. If data leaves the domain in which security policies can be
    enforced, it should consequently be associated with the trust of the
    target domain.
   </para>
  </important>

  <para>
   For a review of industry best practices on security, the development of
   sound security processes, controls, development, reviews, audit practices
   and incident management, you can review a public RFC (request for
   comments). RFC 2196 is the ongoing work of the world-wide community and
   individual security and process experts. You can review it online here:
   <link xlink:href="http://www.faqs.org/rfcs/rfc2196.html"/>. An RFC is an
   open and living document that invites comments and review. Enhancements and
   improvements are welcome; you will find instructions on where to send those
   suggestions within the document itself.
  </para>

  <para>
   This guide provides initial guidance on how to set up and secure a
   &productname; installation but it is not intended to be the only
   information required for a system administrator to learn how to operate
   Linux securely. Assumptions are made within this guide that the reader has
   knowledge and understanding of operating security principles in general,
   and of Linux administrative commands and configuration options in
   particular.
  </para>
 </sect1>
 <sect1 xml:id="sec.content_hardening">
  <title>Contents of this Book</title>

  <para>
   <xref linkend="cha.common_criteria"/> contains a reference to Common
   Criteria and &productname;. <xref linkend="cha.security_protection"/> contains more
   general system security and service protection schemes.
  </para>
 </sect1>
 <xi:include href="common_intro_available_doc_i.xml"/>
 <xi:include href="common_intro_feedback_i.xml"/>
 <xi:include href="common_intro_typografie_i.xml"/>
</preface>
 <chapter xml:id="cha.common_criteria">
  <title>Common Criteria</title>
  <info>
   <abstract>
    <para></para>
   </abstract>
  </info>
  <sect1 xml:id="sec.common_criteria.introduction">
   <title>Introduction</title>

   <para>
    Common Criteria is the best known and most widely used methodology to
    evaluate and measure the security value of an IT product. The methodology
    aims to be independent, as an independent laboratory conducts the
    evaluation, which a certification body will certify afterward. Security
    Functional Requirements (SFR) are summarized in so-called Protection
    Profiles (PP), which allows the comparison of security functions of
    different products if the definition of the Security Target (ST) (which
    typically uses a reference to the PP if one exists that fits the purpose
    of the product) and the Evaluation Assurance Levels are comparable.
   </para>

   <para>
    A clear definition of security in IT products is challenging. Security
    should be considered a process that never ends, not a static condition
    that can be met or not. A Common Criteria certificate (below EA7) does not
    make a clear statement about error proneness of the system (while many of
    the flaws that exist specifically in operating systems are
    security-relevant), but it adds an important value to the product that
    cannot be described with the presence of technology alone: That someone
    has independently inspected the design of the system in such way that it
    corresponds to the claims that are made, and that explicit care has been
    taken in producing and maintaining the product.
   </para>

   <para>
    The certificate states a degree of maturity of both the product with its
    security functions and the processes of the company that has designed,
    built and engineered the product, and that will maintain the product
    across its lifecycle. As such, Common Criteria aims to be fairly holistic
    with its approach to take everything into account that is relevant for the
    security of an IT product.
   </para>

   <para>
    The Evaluation Assurance Level (EAL) shall denote the degree of confidence
    that the product fulfills the described claims. The levels are from 1
    through 7:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      EAL1: Functionally tested
     </para>
    </listitem>
    <listitem>
     <para>
      EAL2: Structurally tested
     </para>
    </listitem>
    <listitem>
     <para>
      EAL3: Methodically tested and checked
     </para>
    </listitem>
    <listitem>
     <para>
      EAL4: Methodically designed, tested and reviewed
     </para>
    </listitem>
    <listitem>
     <para>
      EAL5: Semi-formally designed and tested
     </para>
    </listitem>
    <listitem>
     <para>
      EAL6: Semi-formally verified design and tested
     </para>
    </listitem>
    <listitem>
     <para>
      EAL7: Formally verified design and tested
     </para>
    </listitem>
   </itemizedlist>

   <para>
    While EAL1 only provides basic assurance for products to meet security
    requirements, EAL2 to 4 are medium assurance levels. EAL5-EAL7 describe
    medium-to-high and high assurance; EAL4 is expected to be the highest
    level of assurance that a product can have if it has not been designed
    from the start to achieve a higher level of assurance.
   </para>

   <para>
    Many commonly known General Purpose/Utility Computing operating systems
    have been awarded a Common Criteria certificate at EAL4. A "+" after the
    assurance level denotes an augmentation to the EAL, an addition that is
    useful for the articulation of security value, but formally not needed at
    the corresponding EAL.
   </para>

   <para>
    The &productname; version 8 was the first Linux system to achieve EAL3+
    (Augmentation: Basic Flaw Remediation) in 2003; Version 9 of SLES was the
    first Linux based operating system to reach EAL4+ in 2004. More
    certifications and re-certifications have followed targeting SLES 9 and
    SLES 10-SP1, until the &productname; version Service Pack 2 was evaluated
    in 2011/2012.
   </para>

   <para>
    The Common Criteria evaluations inspect a specific configuration of the
    product in an evaluated setup. The <quote>Administrator's Guide</quote> is
    a document that comes with a Common Criteria certified product and
    describes the individual steps that need to be taken to install and
    configure the product to a state like it was evaluated.
   </para>

   <para>
    Very often, the evaluated configuration is used as a reference for the
    secure installation of the &productname;. It is however incorrect to
    understand the evaluated configuration as a hardened configuration: the
    removal of setuid bits and the prescription of administrative procedures
    after installation is there to reach a specific configuration that is
    sane, but this process is clearly insufficient for a hardening claim.
   </para>

   <para>
    Earlier versions of this document have contained a substantial part that
    links to Common Criteria evaluated configurations. For clarity and to
    avoid confusion these chapters have been removed.
   </para>

   <para>
    Instead, this guide recommends the lecture the documentation that comes
    with the Common Criteria certificate to understand the Common Criteria
    evaluation of &productname; in general, the security functions that are in
    place within the operating system and how these security functions are
    relevant for the mitigation of threats. The High Level Design
    documentation encompasses the design specifics of the &productname;:
    Authentication mechanisms, access controls, audit subsystem and system log
    files, to name a few of them. The accumulated knowledge contained in the
    documentation allows decision making for hardening purposes at an informed
    level&mdash;find it at <link xlink:href="http://www.suse.com/security/"/>.
   </para>

   <para>
    Apart from the valuable documentation that comes with the Common Criteria
    effort, the following manual pages may be of greater interest to the
    inclined reader:
   </para>

   <para>
    <quote>pam(8), pam(5)</quote>
   </para>

   <para>
    <quote>apparmor(7)</quote> and referred man pages
   </para>

   <para>
    <quote>rsyslogd(8), syslog(8), syslogd(8)</quote>
   </para>

   <para>
    <quote>fstab(5), mount(8), losetup(8), cryptsetup(8)</quote>
   </para>

   <para>
    <quote>haveged(8), random(4)</quote>
   </para>

   <para>
    <quote>ssh(1), sshd(8), ssh_config(5), sshd_config(5), ssh-agent(1),
    ssh-add(1), ssh-keygen(1)</quote>
   </para>

   <para>
    <quote>cron(1), crontab(5), at(1), atd(8)</quote>
   </para>

   <para>
    <quote>systemctl(1), daemon(7), systemd.unit(5), systemd.special(5),
    kernel-command-line(7), bootup(7), systemd.directives</quote>
   </para>


  </sect1>
  <sect1 xml:id="sec.common_criteria.principles">
   <title>Generic Guiding Principles</title>

   <para>
    The following guiding principles motivate much of the advice in this
    guide, and security processes in general, and should also influence any
    configuration decisions that are not explicitly covered.
   </para>

   <variablelist>
    <varlistentry>
     <term>Use Data Encryption Whenever Possible</term>
     <listitem>
      <para>
       Refer to the <xref linkend="pre.hardening.about"/> section of this
       guide. In <xref linkend="pre.hardening.about.assumptions"/>, the
       limitations of cryptography are briefly outlined.
      </para>
      <para>
       Be aware that cryptography is certainly useful, but only for the
       specific purposes that it is good for. It is not a generic recipe for
       better security in a system, its use may even impose additional risk on
       the system. Make informed decisions about the use of cryptography, and
       feel obliged to have a reason for your decisions, no matter if they are
       for or against cryptography. A false sense of security can be more
       harmful than the weakness itself.
      </para>

      <para>
       &productname; supports encryption for:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         Network connections (the
         <command>openssl</command> command,
         <command>stunnel</command>), for remote login
         (<command>openssh</command>, <command>man ssh(1)</command>)
        </para>
       </listitem>
       <listitem>
        <para>
         Files (<command>gpg</command>)
        </para>
       </listitem>
       <listitem>
        <para>
         Entire file systems at block layer
         (<literal>dm-crypt</literal>, <command>cryptsetup</command>)
        </para>
       </listitem>
       <listitem>
        <para>
         VPN (<command>ipsec</command>, <command>openvpn</command>)
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Minimal Package Installation</term>
     <listitem>
      <para>
       Generally, an RPM software package consists of the package's meta data
       that is written to the RPM database upon installation, the package's
       files and directories and scripts that are being executed before and
       after installation and removal.
      </para>
      <para>
       Packages generally do not impose any security risk to
       the system if they do <emphasis>not</emphasis> contain:
      </para>
      <orderedlist spacing="normal">
       <listitem>
        <para>
         setuid or setgid bits on any of the installed files
        </para>
       </listitem>
       <listitem>
        <para>
         group- or world-writable files or directories
        </para>
       </listitem>
       <listitem>
        <para>
         a service that is activated upon installation/activated by default.
        </para>
       </listitem>
      </orderedlist>
      <para>
       Under the above condition, the package is merely a
       collection of files, and their use shall not be automatically assumed
       if you do not have any local users on your system. Since the
       installation of such packages does not have any influence on the
       security value of the system, uninstalling them should neither.
      </para>
      <para>
       However, a fairly simple reason to keep to a minimal set of packages in
       your installation is that something that is not present cannot get
       used. Binaries not installed cannot be executed.
      </para>
      <para>
       A straight forward way of keeping to a minimal set of packages begins
       with the installation of the system. You can start the installation of
       your system by deselecting all packages and then select only those that
       you want to use. As an example, the selection of the apache2-mod_perl
       package in &yast; would automatically cause all packages to be selected
       for installation that are needed for the Apache package to operate.
       Dependencies have often been artificially cut down to be able to handle
       the system's dependency tree more flexibly. You should be safe if you
       chose the minimal system, and build the dependency tree from there with
       your (leaf) package selection.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Service Isolation&mdash;Run Different Services on Separate
     Systems</term>
     <listitem>
      <para>
       Whenever possible, a server should be dedicated to serving exactly one
       service or application. This limits the number of other services that
       could be compromised in the event an attacker can successfully exploit
       a software flaw in one service (assuming that flaw allows access to
       others).
      </para>
      <para>
       This point can lead to healthy and robust dialog on system sizing and
       even further to consolidation or virtualization. The intent with this
       guidance is to reduce the fault domain and risk where possible.
      </para>
      <para>
       The use of AppArmor for services that are provided on a system is an
       effective means of containment. Refer to the AppArmor documentation on
       your system to learn more. <command>man apparmor</command> is a good
       starting point.
      </para>
      <para>
       The use of virtualization technology with &kvm; or with &xen; is
       supported with the &productname; version &productnumber;. While
       virtualization is generally designed for server consolidation purposes,
       its usefulness for service isolation is another good argument. Be aware
       that the capability of the hypervisor to separate virtual machines is
       not higher or stronger than the Linux kernel's capability to separate
       processes and their address spaces. The granularity at which
       virtualization technology tackles separation may however come with its
       benefits, being resource-hungry and somewhat clumsy on the other hand.
      </para>
      <note>
       <para>
        Virtualization technology cannot match or substitute the separation
        strength that is given by running services on different physical
        machines!
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      System fingerprinting and backups
     </term>
     <listitem>
      <para>
       In the case of the suspicion of an attack against the system, nothing
       can provide more comfort than
      </para>
      <orderedlist spacing="normal">
       <listitem>
        <para>
         a backup
        </para>
       </listitem>
       <listitem>
        <para>
         a fingerprint of your system to detect modifications
        </para>
       </listitem>
       <listitem>
        <para>
         having done your homework.
        </para>
       </listitem>
      </orderedlist>
      <para>
       Several tools exist on &productname; &productnumber; which can be
       effectively used for the detection of unknown, but yet successful
       attacks. These tools come at the cost of relatively little
       configuration effort, but with the benefit of being able to actually
       know what has been changed in your system.
      </para>
      <para>
       In particular, the use of
       <systemitem class="resource">AIDE</systemitem> is strongly encouraged.
       <systemitem class="resource">AIDE</systemitem>, when run for
       initialization, creates a hash database of all files in the system that
       are listed in its configuration file. This allows to verify the
       integrity of all cataloged files at a later time.
      </para>
      <note>
       <para>
        You need to copy the hash database that AIDE creates to a place that
        is inaccessible for potential attackers. Otherwise, the attacker may
        modify the integrity database after planting a backdoor, thereby
        defeating the purpose of the integrity measurement.
       </para>
      </note>
      <note>
       <para>
        An attacker may have planted a backdoor in the kernel. This has an
        entire variety of consequences: Apart from being very hard to detect,
        the kernel-based backdoor can effectively remove all traces of the
        system compromise to the degree that system alterations are almost
        invisible. By consequence, an integrity check needs to be done from a
        rescue system (or any other system where an independent system runs,
        and the target system's file systems are mounted manually).
       </para>
      </note>
      <note>
       <para>
        Security is a lively process. Essentially, in this context, this means
        that the application of security updates invalidates the integrity
        database. <command>rpm</command> <option>-qlv packagename</option>
        lists the files that are contained in a package. Generally spoken, the
        RPM subsystem is very powerful with the data that it maintains, and
        that is accessible with the <option>--queryformat</option> command
        line option. A differential update of integrity database with the
        changed files becomes more manageable with some fine-grained usage of
        RPM.
       </para>
      </note>
      <para>
       A fast and directly accessible backup adds distinct confidence about
       the integrity of your system and can substitute an integrity check such
       as described above with AIDE. It is important, though, that the backup
       mechanism/solution has adequate versioning support so that you can
       trace changes in the system. As an example: The installation times of
       packages (<command>rpm</command> <option>-q</option>
       <option>--queryformat='%{INSTALLTIME} %{NAME}\n'</option>
       <replaceable>PACKAGE NAME</replaceable>) must correspond to the changed
       files in the backup log files.
      </para>
      <note>
       <para>
        Make it an integral part of your security routine to verify that your
        backups work.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect1>
 </chapter>

 <chapter xml:id="cha.security_protection">
  <title>Linux Security and Service Protection Methods</title>
  <info>
   <abstract>
    <para>
     In <xref linkend="cha.common_criteria"/> we mentioned the Common Criteria
     EAL 4+ certified installation and setup that was sponsored by IBM for a
     select subset of hardware. This certified build is a great first step for
     customers wanting to build a secure and hardened base system, yet might not
     address all of the services and software specifics that many customers
     would be interested in.
    </para>
    <para>
     This next part will present a more general view and give recommendations
     and guidance for &productname; system security. Some topics may seem
     repeated here (from the previous part) yet the context is very different.
     More detail will be provided in some sections and certainly some more
     general examples for a greater number of services.
    </para>
   </abstract>
  </info>
  <para>
   This portion of the guide will only give basic recommendations instead of
   strict rules. The procedures and examples here should give you the ability
   to apply security enhancement techniques to a wider variety of server-based
   services and programs.
  </para>
  <para>
   Some subjects of this chapter have been discussed before. However, you will
   find more details and explanations in this chapter. Selected general topics
   are:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Physical Security ‚Äì Protection of the server from environmental threats
     (people, places, things).
    </para>
   </listitem>
   <listitem>
    <para>
     Security Policies and Procedures ‚Äì Server lifecycle management,
     disk/media reclamation, backup and archive security.
    </para>
   </listitem>
   <listitem>
    <para>
     Systems Monitoring ‚Äì Procedures around event notification/management.
    </para>
   </listitem>
   <listitem>
    <para>
     Systems Automation ‚Äì Mechanisms and/or procedures for automatic
     security measures. Heuristics, account control, security reporting and
     remediation, automated shutdown, etc.
    </para>
   </listitem>
   <listitem>
    <para>
     Systems Management ‚Äì Methods to obtaining packages, verification and
     signing keys, patching procedures and recommendations.
    </para>
   </listitem>
   <listitem>
    <para>
     Securing Network ‚Äì Addition programs, ports and service wrappers ‚Äì
     iptables, tcpwrappers, services.
    </para>
   </listitem>
   <listitem>
    <para>
     Remote Access ‚Äì extra SSH information and key federation. CA
     integration.
    </para>
   </listitem>
   <listitem>
    <para>
     Common Services ‚Äì mail, NFS and automount.
    </para>
   </listitem>
   <listitem>
    <para>
     Securing the kernel and init Process ‚Äì parameters, systemd targets, and
     boot scripts.
    </para>
   </listitem>
   <listitem>
    <para>
     Access Control ‚Äì user/groups/permissions.
    </para>
   </listitem>
   <listitem>
    <para>
     Password Security and Warnings ‚Äì Proper setup of passwords and banners.
    </para>
   </listitem>
   <listitem>
    <para>
     Miscellaneous Security ‚Äì Assorted security settings and miscellany.
    </para>
   </listitem>
   <listitem>
    <para>
     Resources ‚Äì Web links, documentation and example references, howtos and
     general information, product links.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   The sections will again be organized by a topical hierarchy for
   continuity-sake. Refer to the main table of contents for easy reference.
  </para>
  <sect1 xml:id="sec.sec_prot.general.physical">
   <title>Physical Security</title>

   <para>
    Physical security should be one of the utmost concerns. Linux production
    servers should be in locked data centers where only people have access
    that have passed security checks. Depending on the environment and
    circumstances, you can also consider boot loader passwords.
   </para>

   <para>
    Additionally, consider questions like:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Who has direct physical access to the host?
     </para>
    </listitem>
    <listitem>
     <para>
      Of those that do, should they?
     </para>
    </listitem>
    <listitem>
     <para>
      Can the host be protected from tampering and should it be?
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The amount of physical security needed on a particular system depends on
    the situation, and can also vary widely by available funds.
   </para>

   <sect2 xml:id="sec.sec_prot.general.physical.locks">
    <title>System Locks</title>
    <para>
     Most server racks in data centers include a locking feature. Usually this
     will be a hasp/cylinder lock on the front of the rack that allows you to
     turn an included key to a locked or unlocked position ‚Äì granting or
     denying entry. Cage locks can help prevent someone from tampering or
     stealing devices/media from the servers, or opening the cases and
     directly manipulating/sabotaging the hardware. Preventing system reboots
     or the booting from alternate devices is also important (for example
     CD/DVDs/USB drives/etc.).
    </para>
    <para>
     Some servers also have case locks. These locks can do different things
     according to the designs of the system vendor and construction. Many
     systems are designed to self-disable if attempts are made to open the
     system without unlocking. Others have device covers that will not let you
     plug in or unplug keyboards or mice. While locks are sometimes a useful
     feature, they are usually lower quality and easily defeated by attackers
     with ill intent.
    </para>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.bios">
   <title>Locking Down the BIOS</title>

   <tip>
    <title>Secure Boot</title>
    <para>
     This section describes only basic methods to secure the boot process. To
     find out about more advanced boot protection using UEFI and the
     secure boot feature, see <xref linkend="sec.uefi.secboot"/>.
    </para>
   </tip>

   <para>
    The BIOS (Basic Input/Output System) or its successor UEFI (Unified
    Extensible Firmware Interface) is the lowest level of software/firmware
    on PC class systems. Other hardware types (&ipseries;, &zseries;) that run
    Linux also have low-level firmware that performs similar functions as the
    PC BIOS. When this document references the BIOS, it usually means BIOS
    and/or UEFI.
    The BIOS dictates system configuration, puts the system into a well
    defined state and provides routines for accessing low-level hardware.
    The BIOS executes the configured Linux boot loader (like &grub;) to
    boot the host.
   </para>

   <para>
    Most BIOS implementations can be configured to prevent unauthorized users
    from manipulating system and boot settings. This is typically done by
    setting a BIOS admin or boot password. The admin password only needs to
    be entered for changing the system configuration but the boot password
    will be required during every normal boot. For most use cases it is
    enough to set an admin password and restrict booting to the built-in
    hard disk. This way an attacker will not be able to simply boot a Linux
    live CD or USB thumb drive, for example. Although this does not provide a
    high level of security (a BIOS can be reset, removed or modified ‚Äì
    assuming case access), it can be another deterrent.
   </para>

   <para>
    Many BIOS firmwares have various other security related settings. Check
    with the system vendor, the system documentation or examine the BIOS
    during a system boot to find out more.
   </para>

   <important>
    <title>Booting when a BIOS Boot Password Is Set</title>
    <para>
     If a system has been set up with a boot password, the host will not boot
     up unattended (for example in case of a system reboot or power failure).
     This is a trade-off.
    </para>
   </important>
   <important>
    <title>Losing the BIOS Admin Password</title>
    <para>
     Once a system is set up for the first time, the BIOS admin password will
     not be required often. Don't forget the password or you will need to clear
     the BIOS memory via hardware manipulation to get access again.
    </para>
   </important>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.bootloader">
   <title>Security via the Boot Loaders</title>

   <para>
    The Linux boot loader &grub;, which is used by default in &productname;,
    can have a boot passwords set. It also provides a password feature, so
    that only administrators can start the interactive operations (for example
    editing menu entries and entering the command line interface). If a
    password is specified, &grub; will disallow any interactive control until
    you press the key <keycap>C</keycap> and <keycap>E</keycap> and enter a
    correct password.
   </para>

   <para>
    You can refer to the &grub; man page for examples.
   </para>

   <para>
    It is very important to keep in mind that when setting these passwords
    they will need to be remembered! Also, enabling these passwords might
    merely slow an intrusion, not necessarily prevent it. Again, someone could
    boot from a removable device, and mount your root partition. If you are
    using BIOS-level security and a boot loader, it is a good practice to
    disable the ability to boot from removable devices in your computer's
    BIOS, and then also password-protecting the BIOS itself.
   </para>

   <para>
    Also keep in mind that the boot loader configuration files will need to be
    protected by changing their mode to <literal>600</literal> (read/write for
    &rootuser; only), or others will be able to read your passwords or hashes!
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.seccheck">
   <title>Verifying Security Action with <command>seccheck</command></title>

   <para>
    It is highly recommended to have scripts in place which can verify that
    security actions or procedures have been run. Even the best systems
    administrators can make errors or forget something. If you have a small or
    large Linux installation or environment, you should consider the use of
    the <command>seccheck</command> scripts.
   </para>

   <para>
    <command>seccheck</command> is the &suse; Security Checker. It is a set of
    several shell scripts designed to check the local security of the system
    on a regular basis. There are three main scripts that are executed at
    different time intervals. They are <literal>security-daily,</literal>
    <literal>security-weekly</literal> and
    <literal>security-monthly</literal>. If <command>seccheck</command> is not
    installed on your system, install it with <command>sudo zypper in
    seccheck</command>. These scripts all have schedule entries that get
    placed in cron that determine when they run. Although cron scheduling is
    the default behavior, this can be controlled via configuration settings
    (see next section). The daily script runs at midnight, and if changes are
    detected since the last run (the night before), an e-mail noting the
    differences will be sent. The weekly script runs every Monday at 1:00 am,
    and only if changes to the last run (the week before) are found, a mail
    with the differences will be sent. The monthly script runs every on every
    1st of the month and sends the full last daily and weekly report via
    e-mail.
   </para>

   <sect2 xml:id="sec.sec_prot.general.seccheck.config">
    <title>Seccheck Configuration</title>
    <para>
     Note that you can change the receiver of the seccheck mails from root to
     anyone else if you add an entry like this one to
     <filename>/etc/sysconfig/seccheck</filename>:
    </para>
<screen>SECCHK_USER="firewall" # exchange firewall is an admin user's account name</screen>
    <para>
     Also note that the <envar>START_SECCHK</envar> variable from
     <filename>/etc/sysconfig/seccheck</filename> controls whether the
     security check will be run from cron. (It is ignored if you call
     <command>security-control</command> manually.)
    </para>
    <para>
     The following daily checks are done:
    </para>
    <informaltable>
     <tgroup cols="2">
      <colspec colname="c1"/>
      <colspec colname="c2"/>
      <tbody>
       <row>
        <entry>
         <para>
          <filename>/etc/passwd</filename> check
         </para>
        </entry>
        <entry>
         <para>
          length/number/contents of fields, accounts with same UID accounts
          with UID/GID of 0 or 1 beside root and bin
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/shadow</filename> check
         </para>
        </entry>
        <entry>
         <para>
          length/number/contents of fields, accounts with no password
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/group</filename> check
         </para>
        </entry>
        <entry>
         <para>
          length/number/contents of fields
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          user root checks
         </para>
        </entry>
        <entry>
         <para>
          secure umask and <envar>PATH</envar>
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/ftpusers</filename>
         </para>
        </entry>
        <entry>
         <para>
          checks if important system users are put there
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>/etc/aliases</filename>
         </para>
        </entry>
        <entry>
         <para>
          checks for mail aliases which execute programs
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <filename>.rhosts</filename> check
         </para>
        </entry>
        <entry>
         <para>
          checks if users' <filename>.rhosts</filename> file contain + signs
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          home directory
         </para>
        </entry>
        <entry>
         <para>
          checks if home directories are writable or owned by someone else
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          dot-files check
         </para>
        </entry>
        <entry>
         <para>
          checks many dot-files in the home directories if they are writable
          or owned by someone else
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          mailbox check
         </para>
        </entry>
        <entry>
         <para>
          checks if user mailboxes are owned by user and are readable
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          NFS export check
         </para>
        </entry>
        <entry>
         <para>
          exports should not be exported globally
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          NFS import check
         </para>
        </entry>
        <entry>
         <para>
          NFS mounts should have the <option>nosuid</option> option set
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          promisc check
         </para>
        </entry>
        <entry>
         <para>
          checks if network cards are in promiscuous mode
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          list modules
         </para>
        </entry>
        <entry>
         <para>
          lists loaded modules
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          list sockets
         </para>
        </entry>
        <entry>
         <para>
          lists open ports
         </para>
        </entry>
       </row>
       <row>
        <entry namest="c1" nameend="c2">
         <para>
          Weekly Checks are as follows:
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          password check
         </para>
        </entry>
        <entry>
         <para>
          runs <command>john</command> to crack the password file, user will
          receive an e-mail notice to change their password
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          RPM md5 check
         </para>
        </entry>
        <entry>
         <para>
          checks for changed files via RPM's MD5 checksum feature
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          suid/sgid check
         </para>
        </entry>
        <entry>
         <para>
          lists all suid and sgid files
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          exec group write
         </para>
        </entry>
        <entry>
         <para>
          lists all executables which are group/world-writable
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          writable check
         </para>
        </entry>
        <entry>
         <para>
          lists all files which are world-writable (including executables)
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          device check
         </para>
        </entry>
        <entry>
         <para>
          lists all devices
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <para>
     Additional monthly checks are also run, however the key difference is
     mainly that the monthly file is not a diff like the daily/weekly ones but
     the full reports in one file.
    </para>
    <important>
     <title>Auditing Passwords with <command>john</command></title>
     <para>
      To enable password auditing, it is necessary to first install the
      package <package>john</package>. The package is available on the &osbs; at
      <link xlink:href="https://build.opensuse.org/package/show/security/john"/>.
     </para>
    </important>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.seccheck.autologout">
    <title>Automatic Logout</title>
    <para>
     The <systemitem>seccheck</systemitem> package provides an automatic
     logout feature. It is a script that runs every 10 minutes and checks both
     remote or local terminal sessions for inactivity, and terminates them if
     an idle time is exceeded.
    </para>
    <para>
     You can configure the functionality in the
     <filename>/etc/security/autologout.conf</filename> file. Parameters
     include default idle and logout delay times, and the configuration for
     limiting maximum idle times specific to users, groups, TTY devices and
     SSH sessions. <filename>/etc/security/autologout.conf</filename> also
     includes several configuration examples.
    </para>
    <tip>
     <para>
      The automatic logout feature is not enabled by default. To enable it,
      edit <filename>/etc/cron.d/autologout</filename> and uncomment the
      example cron line.
     </para>
    </tip>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.retiring">
   <title>Retiring Linux Servers with Sensitive Data</title>

   <para>
<!-- As mentioned in <xref linkend="sec.setup_for_eal.operating.mount"/> -->
    Security policies usually contain some procedures for the treatment of
    storage media that is going to be retired or disposed of. Disk and media
    wipe procedures are frequently prescribed as is complete destruction of
    the media. You can find several free tools on the Internet. A search of
    <quote>dod disk wipe utility</quote> will yield several variants. To
    retire servers with sensitive data, it is important to ensure that data
    cannot be recovered from the hard disks. To ensure that all traces of data
    are removed, a wipe utility&mdash;such as
    <command>scrub</command>&mdash;can be used. Many wipe utilities overwrite
    the data several times. This assures that even sophisticated methods are
    not able to retrieve any parts of the wiped data. Some tools can even be
    operated from a bootable removable device and remove data according to the
    U.S. Department of Defense (DoD) standards. Note that many government
    agencies specify their own standards for data security. Some standards are
    stronger than others, yet may require more time to implement.
   </para>

   <important>
    <title>Wiping Wear Leveling Devices</title>
    <para>
     Some devices, like SSDs, use wear leveling and do not necessarily write
     new data in the same physical locations. Such devices usually provide
     their own erasing functionality.
    </para>
   </important>

   <sect2 xml:id="sec.sec_prot.general.retiring.scrub">
    <title>scrub: Disk Overwrite Utility</title>
    <para>
     <command>scrub</command> overwrites hard disks, files, and other devices
     with repeating patterns intended to make recovering data from these
     devices more difficult. It operates in three basic modes: on a character
     or block device, on a file, or on a directory specified. For more
     information, set the manual page <command>man 1 scrub</command>.
    </para>
    <variablelist>
     <title>Supported Scrub Methods</title>
     <varlistentry>
      <term>nnsa</term>
      <listitem>
       <para>
        4-pass NNSA Policy Letter NAP-14.1-C (XVI-8) for sanitizing removable
        and non-removable hard disks, which requires overwriting all locations
        with a pseudo random pattern twice and then with a known pattern: ran-
        dom(x2), 0x00, verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>dod</term>
      <listitem>
       <para>
        4-pass DoD 5220.22-M section 8-306 procedure (d) for sanitizing
        removable and non-removable rigid disks which requires overwriting all
        addressable locations with a character, its complement, a random
        character, then verify. Note: scrub performs the random pass first to
        make verification easier: random, 0x00, 0xff, verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>bsi</term>
      <listitem>
       <para>
        9-pass method recommended by the German Center of Security in
        Information Technologies
        (<link xlink:href="http://www.bsi.bund.de"/>): 0xff, 0xfe, 0xfd, 0xfb,
        0xf7, 0xef, 0xdf, 0xbf, 0x7f.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>gutmann</term>
      <listitem>
       <para>
        The canonical 35-pass sequence described in Gutmann's paper cited
        below.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>schneier</term>
      <listitem>
       <para>
        7-pass method described by Bruce Schneier in "Applied Cryptography"
        (1996): 0x00, 0xff, random(x5)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>pfitzner7</term>
      <listitem>
       <para>
        Roy Pfitzner's 7-random-pass method: random(x7).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>pfitzner33</term>
      <listitem>
       <para>
        Roy Pfitzner's 33-random-pass method: random(x33).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>usarmy</term>
      <listitem>
       <para>
        US Army AR380-19 method: 0x00, 0xff, random. (Note: identical to DoD
        522.22-M section 8-306 procedure (e) for sanitizing magnetic core
        memory).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>fillzero</term>
      <listitem>
       <para>
        1-pass pattern: 0x00.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>fillff</term>
      <listitem>
       <para>
        1-pass pattern: 0xff.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>random</term>
      <listitem>
       <para>
        1-pass pattern: random(x1).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>random2</term>
      <listitem>
       <para>
        2-pass pattern: random(x2).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>old</term>
      <listitem>
       <para>
        6-pass pre-version 1.7 scrub method: 0x00, 0xff, 0xaa, 0x00, 0x55,
        verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>fastold</term>
      <listitem>
       <para>
        5-pass pattern: 0x00, 0xff, 0xaa, 0x55, verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>custom=string</term>
      <listitem>
       <para>
        1-pass custom pattern. String may contain C-style numerical escapes:
        \nnn (octal) or \xnn (hex).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.backups">
   <title>Backups</title>

   <para>
    If your system is compromised, backups can be used to restore a prior
    system state. When bugs or accidents occur, backups can also be used to
    compare the current system against an older version. For production
    systems, it is very important to take some backups off-site for cases like
    disasters (for example off-site storage of tapes/recordable media, or
    off-site initiated).
   </para>

   <para>
    For legal reasons, some firms and organizations must be careful about
    backing up too much information and holding it too long. If your
    environment has a policy regarding the destruction of old paper files, you
    might need to extend this policy to Linux backup tapes as well.
   </para>

   <para>
    The rules about physical security of servers apply to backups as well.
    Additionally it is advisable to encrypt backup data. This can be done
    either per individual backup archive or for the complete backup file
    system, if applicable. Should a backup medium ever be lost, for example
    during transportation, the data will be protected against unauthorized
    access. The same applies if a backup system itself is compromised. To
    some extent encryption also ensures the integrity of the backups.  Keep
    in mind, however, that the appropriate people need to be able to decrypt
    backups in emergency situations. Also, the case that an encryption key
    itself is compromised and needs to be replaced should be considered.
   </para>

   <para>
    If a system is known to be compromised or suspected to be compromised,
    then it is vital to determine the integrity status of backups. If a
    system compromise has not been detected for a longer time, then it is
    possible that backups already include manipulated configuration files or
    malicious programs. Keeping a long enough history of backups allows to
    inspect for possible unwarranted differences.
   </para>

   <para>
    Even in the absence of any known security breach, a regular inspection of
    differences among important configuration files in backups can help with
    finding security issues (maybe even accidental misconfigurations). This
    approach is best suited for files and environments where the content
    doesn't change too frequently.
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.partitions">
   <title>Disk Partitions</title>

   <para>
    Servers should have separate file systems for at least
    <filename>/</filename>, <filename>/boot</filename>,
    <filename>/usr</filename>, <filename>/var</filename>,
    <filename>/tmp</filename>, and <filename>/home</filename>. This prevents,
    for example, that logging space and temporary space under
    <filename>/var</filename> and <filename>/tmp</filename> fill up the root
    partition. Third-party applications should be on separate file systems as
    well, for example under <filename>/opt</filename>.
   </para>

   <para>
    Another advantage of separate file systems is the possibility to choose
    special mount options that are only suitable for certain regions in the
    file system hierarchy. A number of interesting mount options are:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <literal>noexec</literal>: prevents execution of files.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nodev</literal>: prevents character or block special devices
      from being usable.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nosuid</literal>: prevents the <literal>set-user-ID</literal>
      or <literal>set-group-ID</literal> bits from being effective.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ro</literal>: mounts the file system
      <literal>read-only</literal>.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Each of these options needs to be carefully considered before applying
    it to a partition mount. Applications may stop working, or the support
    status may be violated. When applied correctly, mount options can help
    against some types of security attacks or misconfigurations. For
    example, there should be no need for <literal>set-user-ID</literal>
    binaries to be placed in <filename>/tmp</filename>.
   </para>

   <para>
    You are advised to review <xref linkend="cha.common_criteria"/>. It is
    important to understand the need to separate the partitions that could
    impact a running system (for example, log files filling up
    <filename>/var/log</filename> are a good reason to separate
    <filename>/var</filename> from the <filename>/</filename> partition).
    Another thing to keep in mind is that you will likely need to leverage LVM
    or another volume manager or at the very least the extended partition type
    to work around the limit of four primary partitions on PC class systems.
   </para>

   <para>
    Another capability in &productname; is encrypting a partition or even a
    single directory or file as a container. Refer to
    <xref linkend="cha.security.cryptofs"/> for details.
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.firewall">
   <title>Firewall (iptables)</title>

   <para>
    Setting up a Linux firewall from scratch will not be covered in detail in
    this guide. Most companies use dedicated firewalls or appliances to
    protect their servers in a production network. This is strongly
    recommended for secure environments.
   </para>

   <para>
    &productname; also includes &firewalld;. This is a
    firewall daemon that can be configured from the command line using
    <command>firewall-cmd</command> or in a graphical user interface
    using <command>firewall-config</command>. Basic settings of &firewalld;
    can also be configured via the &yast; firewall interface. For detailed
    information on how &firewalld; works, refer to <link
    xlink:href="http://www.firewalld.org/documentation/" />.
   </para>

   <para>
    If you are also interested in directly scripting firewall rules using
    <command>iptables</command>, there are many guides on the Internet. See
    the Appendix for resources. For lots of iptables tutorials and examples,
    see <link xlink:href="http://www.linuxguruz.com/iptables/"/>.
    There is also the next generation Linux firewall implementation called
    <command>nftables</command>. Using it can be simpler and more powerful
    when scripting firewall rules. You can find more information about
    <command>nftables</command> in
    <link xlink:href="https://wiki.nftables.org/wiki-nftables/index.php/Main_Page" />.
   </para>

  </sect1>
  <sect1 xml:id="sec.sec_prot.general.kernel">
   <title>Security Features in the Kernel</title>

   <para>
    The following list shows tunable kernel parameters you can use to secure
    your Linux server against attacks. Some are defaults already within the
    SLE distributions. To check the current status of any of these settings,
    you can query the kernel (<filename>/proc/sys/...</filename> contents).
    For example, the Source Routing setting is located in the
    <filename>/proc/sys/net/ipv4/conf/all/accept_source_route</filename> file.
    Simply display the contents of a file to see how the current running
    kernel is set up.
   </para>

   <para>
    For each tunable kernel parameter shown, the change to the entry that
    needs to be affected can be modified or added to the
    <filename>/etc/sysctl.conf</filename> configuration file to make the
    change persistent after a reboots.
   </para>

   <para>
    You can get a list of current kernel settings by using the command:
   </para>

<screen>&prompt.root;sysctl -a</screen>

   <para>
    It is even a very good idea to store the output of the kernel settings
    (for comparison or reference) by redirecting the output of the sysctl
    command to a file, for example
   </para>

<screen>&prompt.root;sysctl -A &gt; /root/sysctl.settings.store</screen>

   <para>
    Because &productname; includes, by default, security-focused kernel tuning
    parameters, you will find the existing
    <filename>/etc/sysctl.conf</filename> file to be sparsely populated. You
    may choose to use the above mentioned <quote>catalog</quote> method of
    storing the complete gamut of kernel settings and then choose those
    parameters you want to be reset at reboot. You can place these in the
    <filename>/etc/sysctl.conf</filename> file where they will be picked up
    upon a reboot or they can be inserted immediately (into the running
    kernel) by running the command <command>sysctl</command>
    <option>-p</option>.
   </para>

   <para>
    Many third-party applications like Oracle, SAP, DB2, Websphere, etc.
    recommend changing kernel parameters to ensure high performance for I/O or
    CPU processing. Having a full list of current settings can be helpful for
    reference.
   </para>

   <sect2 xml:id="sec.sec_prot.general.kernel_syn_cookie">
    <title>Enable TCP SYN Cookie Protection (default in &productname; &productnumber;)</title>
    <para>
     A SYN attack is a denial of service attack that consumes all the
     resources on a machine. Any server that is connected to a network is
     potentially subject to this attack. To enable TCP SYN Cookie Protection,
     edit the <filename>/etc/sysctl.conf</filename> file and ensure the
     following line and value exists:
    </para>
<screen>net.ipv4.tcp_syncookies = 1</screen>
    <note>
     <para>
      Despite the name of the configuration option, it applies to IP version 6
      as well.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.route">
    <title>Disable IP Source Routing (default in &productname; &productnumber;)</title>
    <para>
     Source Routing is used to specify a path or route through the network
     from source to destination. This feature can be used by network people
     for diagnosing problems. However, if an intruder was able to send a
     source routed packet into the network, then they could intercept the
     replies and your server might not know that it is not communicating with
     a trusted server.
    </para>
<screen>net.ipv4.conf.all.accept_source_route = 0</screen>
    <para>
     or
    </para>
<screen>net.ipv6.conf.all.accept_source_route = 0</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.icpm_redirect">
    <title>Disable ICMP Redirect Acceptance</title>
    <para>
     ICMP redirects are used by routers to tell the server that there is a
     better path to other networks than the one chosen by the server. However,
     an intruder could potentially use ICMP redirect packets to alter the
     host's routing table by causing traffic to use a path you did not intend.
     To disable ICMP Redirect Acceptance, edit the
     <filename>/etc/sysctl.conf</filename> file and add the following line:
    </para>
<screen>net.ipv4.conf.all.accept_redirects = 0</screen>
    <para>
     or
    </para>
<screen>net.ipv6.conf.all.accept_redirects = 0</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.ip_spoofing">
    <title>Enable IP Spoofing Protection (default in &productname; &productnumber;)</title>
    <remark>krahmer 2014-08-14: IPv6 should be handled separately</remark>
    <para>
     IP spoofing is a technique where an intruder sends out packets which
     claim to be from another host by manipulating the source address. IP
     spoofing is very often used for denial of service attacks. For more
     information on IP Spoofing, see
     <link xlink:href="http://en.wikipedia.org/wiki/IP_address_spoofing"/>
    </para>
<screen>net.ipv4.conf.all.rp_filter = 1</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.icpm_ignore">
    <title>Enable Ignoring to ICMP Requests</title>
    <para>
     If you want or need Linux to ignore <command>ping</command> requests,
     edit the <filename>/etc/sysctl.conf</filename> file and add the following
     line:
    </para>
<screen>net.ipv4.icmp_echo_ignore_all = 1</screen>
    <para>
     This cannot be done in many environments, as some monitoring systems use
     a rudimentary ICMP (ping) to determine the health of the device on the
     network (or at least its ability to respond).
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.broadcast">
    <title>Enable Ignoring Broadcasts Request (default in &productname; &productnumber;)</title>
    <para>
     If you want or need Linux to ignore broadcast requests.
    </para>
<screen>net.ipv4.icmp_echo_ignore_broadcasts = 1</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.errormsg">
    <title>Enable Bad Error Message Protection (default in &productname; &productnumber;)</title>
    <para>
     To alert you about bad error messages in the network.
    </para>
<screen>net.ipv4.icmp_ignore_bogus_error_responses = 1</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.logging">
    <title>Enable Logging of Spoofed Packets, Source Routed Packets, Redirect Packets</title>
    <para>
     To turn on logging for Spoofed Packets, Source Routed Packets, and
     Redirect Packets, edit the <filename>/etc/sysctl.conf</filename> file and
     add the following line:
    </para>
<screen>net.ipv4.conf.all.log_martians = 1</screen>
    <note>
     <para>
      Because of the way &productname; is set up (with rsyslog) for network
      event tracking, keep in mind that this can cause a large amount of
      messages to be logged.
     </para>
    </note>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.add_random">
    <title>Buffer Overflow Attack Mitigation</title>
    <para>
     Starting with the 2.6.x kernel releases, Linux offers <emphasis>Address
     Space Layout Randomization</emphasis> (ASLR) and the
     <emphasis>No-eXecute</emphasis> (NX bit) for mitigation of buffer
     overflow attacks. For more information, see:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <link xlink:href="http://searchenterpriselinux.techtarget.com/tip/Linux-virtual-address-randomization-and-impacting-buffer-overflows"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <link xlink:href="https://en.wikipedia.org/wiki/Address_space_layout_randomization"/>
      </para>
     </listitem>
     <listitem>
      <para>
       <link xlink:href="https://en.wikipedia.org/wiki/NX_bit"/>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Since version 12, &productname; already comes with some buffer overflow
     attack mitigation techniques being enabled by default.
    </para>
    <para>
     ASLR is enabled by default. This can be verified with the output of the
     following command. The expected result is 2:
    </para>
<screen>&prompt.user;cat /proc/sys/kernel/randomize_va_space
2</screen>
    <para>
     This randomizes the heap, stack, and load addresses of dynamically linked
     libraries. Programs that run privileged or process network data are
     already built using special compiler flags (PIE and _FORTIFY_SOURCE) to
     take even more advantage of randomizing the text and data segments as
     well.
    </para>
    <para>
     Executable space protection prevents the execution of memory space that
     is not intended for execution. Linux makes use of the <emphasis>No
     eXecute bit</emphasis>. This is enabled by default on the &productname;
     kernel for the &x86; and &x86-64; architecture. Use of the NX bit has to
     be supported by each individual program. You can check if your system
     supports the NX bit:
    </para>
<screen>&prompt.user;dmesg | grep '[NX|DX]*protection'
[    0.000000] NX (Execute Disable) protection: active</screen>
    <para>
     If NX is disabled, check your BIOS or UEFI for a setting that enables it
     and make sure that it is supported by your CPU.
    </para>
    <para>
     Furthermore, since version 12, &productname; prevents leaking of internal
     kernel addresses to make kernel exploits harder by setting the
     <literal>kptr_restrict</literal>:
    </para>
<screen>&prompt.user;cat /proc/sys/kernel/kptr_restrict
1</screen>
    <para>
     On CPU's that support it (newer &x86-64; CPUs) the kernel also uses the
     SMEP protection by default that prevents direct execution of user space
     code from inside the kernel. This is often used by kernel exploits and
     therefore a good hardening measure.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.file_system">
    <title>File system hardening</title>
    <para>
     To mitigate vulnerabilities based on insecure file system access by
     privileged programs (tmp-races, TOCTOU) the Linux kernel offers two
     <command>sysctl</command> variables which should already be enabled by
     default on &productname; &productnumber;:
     <literal>fs.protected_hardlinks</literal> and
     <literal>fs.protected_symlinks</literal> or their corresponding
     <filename>/proc</filename> entries:
    </para>
<screen>&prompt.user;cat /proc/sys/fs/protected_hardlinks
1</screen>
    <para>
     By setting this to <literal>1</literal>, users can no longer create soft
     or hard links to files which they do not own. This mitigates a commonly
     used exploitation vector for programs which call open(2), creat(2) or
     similar functions without care.
    </para>
<screen>&prompt.user;cat /proc/sys/fs/protected_symlinks
1</screen>
    <para>
     By setting this to <literal>1</literal>, symbolic links are permitted to
     be followed only when outside a sticky world-writable directory, or when
     the uid of the link and follower match, or when the directory owner
     matches the symbolic link's owner.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.dmesg">
    <title>Increased <command>dmesg</command> Restrictions</title>
    <para>
     <command>dmesg</command> provides all kinds of system internal
     information, such as kernel addresses, crashes of services, and similar
     things that could be used by local attackers. This is why the access to
     <command>dmesg</command> is restricted to &rootuser; by default. The
     behavior is controlled by the <literal>kernel.dmesg_restrict</literal>
     option (defaults to 1). If set to 0, any user can view the output of
     <command>dmesg</command>.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.devmem">
    <title>Filter access to <filename>/dev/mem</filename> (default in &productname; 12)</title>
    <para>
     <filename>/dev/mem</filename> hosts an image of the system's main memory,
     including kernel and user space memory. Allowing unfiltered access to
     this information is dangerous and therefore the kernel on &productname;
     has been compiled with <envar>CONFIG_STRICT_DEVMEM</envar> enabled. This
     setting restricts user space access to <filename>/dev/mem</filename> to
     memory mapped peripherals.
    </para>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.aa">
   <title>&aa;</title>

   <para>
    Included with &productname;, &aa; is an application security tool designed
    to provide an easy-to-use security framework for your applications. &aa;
    proactively protects the operating system and applications from external
    or internal threats, even zero-day attacks, by enforcing a specified
    behavior and preventing some unknown application flaws from being
    exploited. &aa; security policies, called <quote>profiles</quote>,
    completely define which system resources and files can be accessed by each
    application. The profiles also define the access mode, for example read or
    write. Several default profiles are included with &aa;, and using a
    combination of advanced static analysis and learning-based tools, &aa;
    profiles for even very complex applications can be deployed successfully
    in a matter of hours.
   </para>

   <para>
    &aa; consists of:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      A kernel extension which enforces the security profiles.
     </para>
    </listitem>
    <listitem>
     <para>
      A collection of RPMs, also shipped with &productname; that provides:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        A set of &aa; profiles for numerous programs that ship with
        &productname;.
       </para>
      </listitem>
      <listitem>
       <para>
        Tools to create and manage new and existing &aa; profiles.
       </para>
      </listitem>
      <listitem>
       <para>
        A &yast; user interface to manage reports and notification of security
        events.
       </para>
      </listitem>
      <listitem>
       <para>
        Documentation about the &aa; tools.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
   <para>
    It is best to reboot a system after completing installation, so that &aa;
    can confine all system daemons.
   </para>
   <para>
    For additional details and step-by-step instructions on the usage and
    configuration of &aa; you can also refer to
    <xref linkend="part.apparmor"/>.
   </para>
  </sect1>

  <sect1 xml:id="sec.sec_prot.general.selinux">
   <title>&selnx;</title>

   <para>
    &selnx; is an advanced technology for securing Linux systems. It is
    included with <quote>basic enablement</quote> in &productname;
    &productnumber;, and is included with some other distributions by default.
    Hardening Linux using &selnx; technology, on its own, warrants its own
    security HOWTO and is out of scope for this guide. The book
    <link
    xlink:href="http://shop.oreilly.com/product/9780596007164.do">&selnx;:
    NSA's Open Source Security Enhanced Linux</link> contains a very good
    description of its setup and usage. As part of the <quote>basic
    enablement</quote>, &selnx; will not be officially supported, but packages
    have now been added to &productname; &productnumber; to enable its usage
    with minimal effort. While &aa; is much easier to use and has a similar
    feature set, knowing both will most certainly be beneficial.
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.remote">
   <title>FTP, <command>telnet</command>, and <command>rlogin</command> (rsh)</title>

   <para>
    The programs/protocols of FTP, <command>telnet</command>, and
    <command>rlogin</command> (<command>rsh</command>) are vulnerable to
    eavesdropping, which is one of the main reasons secure alternatives such
    as <command>ssh</command>, <command>scp</command> or
    <command>sftp</command> should be used instead. It is highly recommended
    not to run these insecure services. Because of the high risk, this guide
    does not cover these services (other than vsftp). It would also be a good
    idea (and part of our guidance, see next section) not to have FTP and
    Telnet server RPMs installed on the system. Note that the EAL 4+
    evaluation had vsftp installed. The <quote>vs</quote> stands for
    <quote>very secure</quote>, which is a differentiator here when
    compared to normal FTP.
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.remove_packs">
   <title>Removing Unnecessary Software Packages (RPMs)</title>

   <para>
    A very important step in securing a Linux system is to determine the
    primary function(s) or role(s) of the Linux server. Otherwise, it can be
    difficult to understand what needs to be secured and securing these Linux
    systems can prove ineffective. Therefore, it is critical to look at the
    default list of software packages and remove any unnecessary packages or
    packages that do not comply with your defined security policies.
   </para>

   <para>
    Doing this will result in fewer packages that require updates and will
    simplify maintenance efforts when security alerts and patches are
    released. It is a best practice not to install, among others, development
    packages or desktop software packages (for example, an X Server) on
    production servers. If you do not need them, you should also not install,
    for example, the Apache Web server or Samba file sharing server.
   </para>

   <important>
    <title>Requirements of Third-party Installers</title>
    <para>
     Many third-party vendors like Oracle and IBM require a desktop
     environment and development libraries to run installers. To avoid this
     from having an impact on the security of their production servers, many
     organizations work around this by creating a silent installation
     (response file) in a development lab.
    </para>
   </important>

   <para>
    Also, other packages like FTP and Telnet daemons should not be installed
    as well unless there is a justified business reason for it.
    <command>ssh</command>, <command>scp</command> or <command>sftp</command>
    should be used as replacements, see
    <xref linkend="sec.sec_prot.general.remote"/>.
   </para>

   <para>
    One of the first action items should be to create a Linux image that
    <emphasis>only</emphasis> contains RPMs needed by the system and
    applications, and those needed for maintenance and troubleshooting
    purposes. A good approach is to start with a minimum list of RPMs and then
    add packages as needed. This process is time-consuming but usually worth
    the effort.
   </para>

   <tip>
    <title>Just Enough Operating System (JeOS)</title>
    <para>
     The &suse; Appliance Program includes a component called JeOS (Just
     Enough Operating System). JeOS has a very small footprint and can be
     customized to fit the specific needs of a system developer. Main uses of
     JeOS are for hardware/software appliance or virtual machine development.
     Key benefits of JeOS are efficiency, higher performance, increased
     security and simplified management.
    </para>
    <para>
     If JeOS is not an option for you, a good choice is the minimal
     installation pattern.
    </para>
   </tip>

   <para>
    To generate a list of all installed packages, use the following command:
   </para>

<screen>&prompt.root;zypper packages -i</screen>

   <para>
    To retrieve details about a particular package, run:
   </para>

<screen>&prompt.root;zypper info <replaceable>PACKAGE_NAME</replaceable></screen>

   <para>
    To check for and report potential conflicts and dependencies when deleting
    a package, run:
   </para>

<screen>&prompt.root;zypper rm -D <replaceable>PACKAGE_NAME</replaceable></screen>

   <para>
    This can be very useful, as running the removal command without a test can
    often yield a lot of complaints and require manual recursive dependency
    hunting.
   </para>

   <important>
    <title>Removal of Essential System Packages</title>
    <para>
     When removing packages, be careful not to remove any essential system
     packages. This could put your system into a broken state in which it can
     no longer be booted or repaired. If you are uncertain about this, then it
     is best to do a complete backup of your system before you start to
     remove any packages.
    </para>
   </important>

   <para>
    For the final removal of one or more packages use the following
    <command>zypper</command> command with the added <quote>-u</quote>
    switch, which causes any dependencies that are becoming unused by
    removing the named packages, to be removed as well:
   </para>

   <screen>&prompt.root;zypper rm -u <replaceable>PACKAGE_NAME</replaceable></screen>

  </sect1>
  <sect1 xml:id="sec.sec_prot.general.patching">
   <title>Patching Linux Systems</title>

   <para>
    Building an infrastructure for patch management is another very important
    part of a proactive and secure production Linux environment.
   </para>

   <para>
    It is recommended to have a written security policy and procedure to
    handle Linux security updates and issues. For example, a security policy
    should detail the time frame for assessment, testing, and roll out of
    patches. Network related security vulnerabilities should get the highest
    priority and should be addressed immediately within a short time frame.
    The assessment phase should occur within a testing lab, and initial roll
    out should occur on development systems first
   </para>

   <para>
    A separate security log file should contain details on which Linux
    security announcements have been received, which patches have been
    researched and assessed, when patches have been applied, etc.
   </para>

   <para>
    &suse; releases their patches in three categories, security, recommended
    and optional. There are a few options that can be used to keep systems
    patched, up to date and secure. Each system can register and then retrieve
    updates via the &suse; Update Web site using the included &yast;
    tool&mdash;&yast; Online Update. &suse; has also created the &rmtool;
    (&rmt;), an efficient way to maintain a local repository of
    available/released patches/updates/fixes that systems can then pull from
    (reducing Internet traffic). &suse; also offers &susemgr; for the
    maintenance, patching, reporting and centralized management of Linux
    systems, not only &suse;, but other distributions as well.
   </para>

   <sect2 xml:id="sec.sec_prot.general.patching.you">
    <title>&yast; Online Update</title>
    <para>
     On a per-server basis, installation of important updates and improvements
     is possible using the &yast; Online Update tool. Current updates for the
     &sle; family are available from the product specific update catalogs
     containing patches. Installation of updates and improvements is
     accomplished using &yast; and selecting <guimenu>Online Update</guimenu>
     in the <guimenu>Software</guimenu> Group. All new patches (except the
     optional ones) that are currently available for your system will already
     be marked for installation. Clicking <guimenu>Accept</guimenu> will then
     automatically install these patches.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.patching.auto">
    <title>Automatic Online Update</title>
    <para>
     &yast; also offers the possibility to set up an automatic update. Select
     <menuchoice> <guimenu>Software</guimenu> <guimenu> Automatic Online
     Update</guimenu></menuchoice>. Configure a Daily or a Weekly update. Some
     patches, such as kernel updates, require user interaction, which would
     cause the automatic update procedure to stop. Check <guimenu>Skip
     Interactive Patches</guimenu> for the update procedure to proceed
     automatically.
    </para>
    <para>
     In this case, run a manual Online Update from time to install patches
     that require interaction.
    </para>
    <para>
     When <guimenu>Only Download Patches</guimenu> is checked, the patches are
     downloaded at the specified time but not installed. They must be
     installed manually using <command>rpm</command>or
     <command>zypper</command>.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.patching.smt">
    <title>&rmtool;&mdash;&rmt;</title>
    <para>
     The &rmtool; for &sle; goes one step further than the Online Update
     process by establishing a proxy system with repository and registration
     targets. This helps customers centrally manage software updates within
     the firewall on a per-system basis, while maintaining their corporate
     security policies and regulatory compliance.
    </para>
    <para>
     The downloadable &rmt; (<link xlink:href="http://download.suse.com/"/>)
     is integrated with &scc; (<link xlink:href="&sccurl;"/>) and provides a
     repository and registration target that is synchronized with it. This can
     be very helpful in tracking entitlements in large deployments. The &rmt;
     maintains all the capabilities of &scc;, while allowing a more secure
     centralized deployment. It is included with every &sle; subscription and
     is therefore fully supported.
    </para>
    <para>
     The &rmt; provides an alternative to the default configuration, which
     requires opening the firewall to outbound connections for each device to
     receive updates. That requirement often violates corporate security
     policies and can be seen as a threat to regulatory compliance by some
     organizations. Through its integration with &scc;, the &rmt; ensures that
     each device can receive its appropriate updates without the need to open
     the firewall, and without any redundant bandwidth requirements.
    </para>
    <para>
     The &rmt; also enables customers to locally track their &sle; devices
     (that is servers, desktops, or Point of Service terminals) throughout
     their enterprise. Now they can easily determine how many entitlements are
     in need of renewal at the end of a billing cycle without having to
     physically walk through the data center to manually update spreadsheets.
    </para>
    <para>
     The &rmt; informs the &sle; devices of any available software updates.
     Each device then obtains the required software updates from the &rmt;.
     The introduction of the &rmt; improves the interaction among &sle;
     devices within the network and simplifies how they receive their system
     updates. The &rmt; enables an infrastructure for several hundred &sle;
     devices per instance of each installation (depending on the specific
     usage profile). This offers more accurate and efficient server tracking.
    </para>
    <para>
     In a nutshell, the &rmtool; for &sle; provides customers with:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Assurance of firewall and regulatory compliance
      </para>
     </listitem>
     <listitem>
      <para>
       Reduced bandwidth usage during software updates
      </para>
     </listitem>
     <listitem>
      <para>
       Full support under active subscription from &suse;
      </para>
     </listitem>
     <listitem>
      <para>
       Maintenance of existing customer interface with &ncc;
      </para>
     </listitem>
     <listitem>
      <para>
       Accurate server entitlement tracking and effective measurement of
       subscription usage
      </para>
     </listitem>
     <listitem>
      <para>
       Automated process to easily tally entitlement totals (no more
       spreadsheets!)
      </para>
     </listitem>
     <listitem>
      <para>
       Simple installation process that automatically synchronizes server
       entitlement with &ncc;
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.patching.suma">
    <title>&susemgr;</title>
    <para>
     &susemgr; automates Linux server management, allowing you to provision
     and maintain your servers faster and more accurately. It monitors the
     health of each Linux server from a single console so you can identify
     server performance issues before they impact your business. And it lets
     you comprehensively manage your Linux servers across physical, virtual
     and cloud environments while improving data center efficiency. &susemgr;
     delivers complete lifecycle management for Linux:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Asset management
      </para>
     </listitem>
     <listitem>
      <para>
       Provisioning
      </para>
     </listitem>
     <listitem>
      <para>
       Package management
      </para>
     </listitem>
     <listitem>
      <para>
       Patch management
      </para>
     </listitem>
     <listitem>
      <para>
       Configuration management
      </para>
     </listitem>
     <listitem>
      <para>
       Redeployment
      </para>
     </listitem>
    </itemizedlist>
    <para>
     For more information on &susemgr; refer to
     <link
     xlink:href="https://www.suse.com/products/suse-manager/"/>.
    </para>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.ports">
   <title>Securing the Network&mdash;Open Network Ports Detection</title>

   <para>
    Securing a server requires that you know what it is serving; what services
    are running. Default server installations may have services running that
    aren't self apparent and open network ports that they are using. One
    of the most important tasks is to detect and close network ports that are
    not needed. To get a list of listening network ports (TCP and UDP
    sockets), you can use the <command>netstat</command> service run the
    following command:
   </para>

<screen>&prompt.root;ss -tulpn</screen>

   <para>
    Be aware that <command>ss</command> output can be wider than a
    default terminal screen. If the screen is too narrow, the options
    described above will likely cause the output to wrap and be less legible.
   </para>

   <para>
    Below is an example of output from the above command:
   </para>

<screen>Netid  State  Recv-Q Send-Q Local Address:Port  Peer Address:Port
udp    UNCONN 0      0        0.0.0.0%eth0:68         0.0.0.0:*   users:(("wickedd-dhcp4",pid=541,fd=8))
tcp    LISTEN 0      128           0.0.0.0:22         0.0.0.0:*   users:(("sshd",pid=1562,fd=3))
tcp    LISTEN 0      100         127.0.0.1:25         0.0.0.0:*   users:(("master",pid=1701,fd=13))
tcp    LISTEN 0      128              [::]:22            [::]:*   users:(("sshd",pid=1562,fd=4))
tcp    LISTEN 0      100             [::1]:25            [::]:*   users:(("master",pid=1701,fd=14))</screen>

   <para>
    From the output above you can see that 2 TCP-based and 1 UDP-based
    services are running and listening: master, sshd, and wickedd. Not
    required services should be stopped. Use port scans from other
    machines for confirmation. But make sure to obtain proper
    permissions to scan a machine on a production network.
   </para>

   <important>
    <para>
     Some organizations consider port scans without permission a security
     offense.
    </para>
   </important>

   <para>
    Using the <command>nmap</command> command, such a scan can be conducted:
   </para>

<screen>&prompt.root;nmap -sS -sU <replaceable>REMOTE_HOST</replaceable>
Starting nmap 3.70 ( http://www.insecure.org/nmap/ ) at 2004-12-10 22:51 CST
Interesting ports on &wsII; (&wsIIip;):
(The 3131 ports scanned but not shown below are in state: closed)
PORT     STATE         SERVICE
22/tcp   open          ssh
69/tcp   open          auth

Nmap run completed -- 1 IP address (1 host up) scanned in 221.669 seconds</screen>

   <para>
    Note that running the <command>nmap</command> command will only scan
    certain well-known ports by default. If you want to scan all ports you need
    to specify <command>-p 1-65535</command>. Doing this will slow down the
    scan considerably. Especially for UDP scans the use of an asynchronous
    scanner such as masscan (<link
    xlink:href="https://software.opensuse.org/package/masscan"/>) is
    recommended.
   </para>

<screen>&prompt.root;masscan <replaceable>REMOTE_HOST</replaceable>/32 -p 1-65535

Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2017-11-28 10:51:58 GMT
 -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth
Initiating SYN Stealth Scan
Scanning 1 hosts [65535 ports/host]
Discovered open port 222/tcp on 192.168.1.2
Discovered open port 443/tcp on 192.168.1.2
Discovered open port 25/tcp on 192.168.1.2
Discovered open port 9030/tcp on 192.168.1.2
Discovered open port 587/tcp on 192.168.1.2
Discovered open port 80/tcp on 192.168.1.2</screen>

   <para>
    If you want to scan UDP, specify the ports with a <command>U:</command>
    prefix: <command>masscan <replaceable>REMOTE_HOST</replaceable>/32 -p
    U:1-65535</command>.
   </para>

   <para>
    The results of the scans can vary widely and might not show
    all listening network sockets, depending on the status of the
    firewall.
   </para>

   <para>
    From the first sample run above, you see that the
    <systemitem class="daemon">tftpd</systemitem> daemon is listening on
    port auth (port 69) for <literal>IDENT</literal>. You can also see that
    sendmail is not listening for remote incoming network connections.
   </para>

   <para>
    Another method to list all of the TCP and UDP sockets to which programs
    are listening (on a host) is to use the <command>lsof</command> command
    ‚Äì which lists open files:
   </para>

<screen>&prompt.root;lsof -i -n | egrep 'COMMAND|LISTEN|UDP'
COMMAND  PID   USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME
sshd     2317  root   3u   IPv6    6579   0t0      TCP *:ssh (LISTEN)
tftpd    2328  root   5u   IPv4    6698   0t0      TCP *:auth (LISTEN)
sendmail 2360  root   3u   IPv4    6729   0t0      TCP 127.0.0.1:smtp (LISTEN)</screen>

   <para>
    You should always check the results you get from a command run on a machine
    with an external scan.
   </para>

  </sect1>
  <sect1 xml:id="sec.sec_prot.general.postfix">
   <title>Securing Postfix</title>

   <para>
    Postfix is a replacement for Sendmail and has several security advantages
    over Sendmail. Postfix is the default mail system in &productname; and
    consists of several small programs that each perform their own small
    task&mdash;most of these programs run in a chroot jail. This is one of the
    reasons Postfix is recommended over Sendmail.
   </para>

   <para>
    Linux servers that are not dedicated mail or relay servers should not
    accept external e-mails. However, it is important for production servers
    to send local e-mails to a relay server&mdash;some security setups (for
    example the seccheck scripts) can be configured to send e-mails to someone
    other than &rootuser;, even off the local system.
   </para>

   <para>
    Verify the following parameters in
    <filename>/etc/postfix/main.cf</filename> are set to ensure that Postfix
    accepts only local e-mails for delivery (look toward the bottom of the
    file as the top portion is mostly commented-out example entries and
    explanations):
   </para>

<screen>mydestination = $myhostname, localhost.$mydomain, localhost
inet_interfaces = localhost</screen>

   <para>
    The <literal>mydestination</literal> parameter lists all domains to
    receive e-mails for. The <literal>inet_interfaces</literal> parameter
    specifies the network to listen on. After reconfiguring Postfix, a restart
    of the mail system is necessary:
   </para>

<screen>&prompt.root;systemctl restart postfix</screen>

   <para>
    Verify that Postfix is not listening for network requests (incoming) by
    running one of these commands from another host:
   </para>

<screen>nmap -sT -p 25 <replaceable>REMOTE_HOST</replaceable>
telnet &lt;remote_host&gt; 25</screen>

   <note>
    <para>
     Running these commands on the local host will provide inaccurate results
     because Postfix is supposed to accept connections from the local node.
     Use an external host for correct results.
    </para>
   </note>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.nfs">
   <title>File Systems: Securing NFS</title>

   <para>
    NFS (Network File System) allows servers to share files over a network.
    But like all network services using NFS involves risks.
   </para>

   <para>
    Here are some basic rules:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      NFS should not be enabled if not needed.
     </para>
    </listitem>
    <listitem>
     <para>
      If NFS is truly needed, use a TCP wrapper to restrict remote access.
     </para>
    </listitem>
    <listitem>
     <para>
      Ensure to export only to those hosts that really need access.
     </para>
    </listitem>
    <listitem>
     <para>
      Use a fully qualified domain name to diminish any spoofing attempts.
     </para>
    </listitem>
    <listitem>
     <para>
      Export only as read-only whenever possible.
     </para>
    </listitem>
    <listitem>
     <para>
      Use NFS only over TCP.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    If you do not have shared directories to export, then ensure that the NFS
    service is <emphasis>not</emphasis> enabled nor running on the system:
   </para>

   <para>
    Check the NFS service status:
   </para>

<screen>&prompt.root;systemctl status nfsserver</screen>

   <para>
    Check the current targets:
   </para>

<screen>&prompt.root;ls /etc/systemd/system/*.wants/nfsserver.service</screen>

   <sect2 xml:id="sec.sec_prot.general.nfs.start">
    <title>Enabling and Starting NFS Server</title>
    <para>
     If NFS must be used, it can be activated using the following commands on
     &productname; or more simply and securely with the &yast; plug-in
     (ncurses). Access it directly from command line with <command>yast
     nfs_server</command> or <command>yast nfs_client</command> ‚Äì or
     manually:
    </para>
<screen>&prompt.root;systemctl enable nfs
systemctl start nfs</screen>
    <para>
     Portmapper information:
    </para>
<screen>&prompt.root;rpcinfo -p <replaceable>SERVERNAME</replaceable>
   program vers proto   port
    100000    2   tcp    111  portmapper
    100000    2   udp    111  portmapper
    100003    2   udp   2049  nfs
    100003    3   udp   2049  nfs
    100003    2   tcp   2049  nfs
    100003    3   tcp   2049  nfs
    100005    1   udp    623  mountd
    100005    1   tcp    626  mountd
    100005    2   udp    623  mountd
    100005    2   tcp    626  mountd
    100005    3   udp    623  mountd
    100005    3   tcp    626  mountd</screen>
    <para>
     If you run it from an "untrusted" server or network, you should get the
     following output:
    </para>
<screen>&prompt.root;rpcinfo -p <replaceable>SERVERNAME</replaceable>
No remote programs registered.</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.nfs.export">
    <title>Exporting NFS</title>
    <para>
     To allow a client access to a file system or directory, the
     <filename>/etc/exports</filename> file serves as the access control list.
     To give the network "network.&exampledomain;" read-only access to
     <filename>/pub</filename>, the entries in
     <filename>/etc/exports</filename> would look like as follows:
    </para>
    <screen>      /pub *.network.&exampledomain;(ro,sync)</screen>
    <para>
     It is very important <emphasis>not</emphasis> to give write access to NFS
     clients if not absolutely needed! Entries in
     <filename>/etc/exports</filename> are exported read-only
     (<option>ro</option> option) by default. To allow servers
     <systemitem class="systemname">sles-ha1</systemitem>,
     <systemitem class="systemname">sles-ha2</systemitem> and
     <systemitem class="systemname">sles-ha3</systemitem> read-write access to
     the <filename>/data/MYSQL</filename> directory, the entries in
     <filename>/etc/exports</filename> would look like as follows:
    </para>
    <screen>/data/MYSQL sles-ha1.&exampledomain;(rw,sync) sles-ha2.&exampledomain;(rw,sync) sles-ha3.&exampledomain;(rw,sync)</screen>
    <para>
     Note that the options <emphasis>must not</emphasis> be separated from the
     host names or networks with whitespace(s). Also, fully qualified domain
     names should <emphasis>always</emphasis> be used to diminish spoofing
     attempts. All entries in <filename>/etc/exports</filename> are exported
     with the <option>root_squash</option> option (<quote>root
     squashing</quote>) by default. This means that a root user on a client
     machine does not have root privileges (root access) to files on exported
     NFS. It is not recommended to turn <quote>root squashing</quote> off
     using the <option>no_root_squash</option> option! After you have made all
     your entries in <filename>/etc/exports</filename>, you can export all
     file systems/directories using the following command:
    </para>
    <screen>&prompt.root;exportfs -a</screen>
    <para>
     To unexport all shared file systems/directories, run:
    </para>
    <screen>&prompt.root;exportfs -ua</screen>
    <para>
     To see all shared file systems/directories, run:
    </para>
<screen>&prompt.root;showmount -e localhost
Export list for localhost:

/pub *.network.&exampledomain;/data/MYSQL
sles-ha1.&exampledomain;,sles-ha2.&exampledomain;,sles-ha3.&exampledomain;</screen>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.nfs.tcp">
    <title>Using NFS over TCP</title>
    <para>
     If you need NFS, it is recommended to use NFS only over TCP since NFS
     over UDP is not secure. All 2.4 and later kernels support NFS over TCP on
     the client side. Server support for TCP appeared in later 2.4 kernels and
     beyond. To mount a shared directory using NFS over TCP, it is necessary
     to use the <option>proto=tcp</option> mount option:
    </para>
    <screen>&prompt.root;mount -o proto=tcp <replaceable>SERVERNAME</replaceable>:/pub /usr/local/pub
    </screen>
    <para>
     Verify that the target directory, in this case
     <filename>/usr/local/pub</filename>, exists on the client:
    </para>
<screen>&prompt.root;mount [...] <replaceable>SERVERNAME</replaceable>:/pub on
/usr/local/pub type nfs (rw,proto=tcp,addr=&nfsip;)</screen>
    <para>
     To have the shared directory mounted on the client at boot time, use the
     <filename>/etc/fstab</filename> file. For the above example, the
     <filename>/etc/fstab</filename> entry could look like this:
    </para>
    <screen><replaceable>SERVERNAME</replaceable>:/pub /usr/local/pub nfs rsize=8192,wsize=8192,timeo=14,intr,tcp 0 0
    </screen>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.scp">
   <title>Copying Files Using SSH Without Providing Login Prompts</title>

   <para>
    This example is needed in some cases to enable files to be copied over the
    network using SSH without providing an interactive login prompt. This
    allows trusted hosts to be set up&mdash;an example of federation.
   </para>

   <para>
    SSH can allow a forced command using the <quote>command</quote> option.
    Using this option it is possible to disable scp (secure copy) and enforce
    every passed <command>ssh</command> command to be ignored. On the server
    side where you want to retrieve the file from, add the following entry to
    the beginning of the SSH key in the
    <filename>~/.ssh/authorized_keys</filename> file (the
    <filename>~</filename> represents a particular users home directory ‚Äì
    &rootuser;'s home directory is <filename>/root</filename> ‚Äì other users
    typically reside in
    <filename>/home/<replaceable>USERNAME</replaceable></filename>):
   </para>

   <screen>command="/bin/cat ~/&lt;file_name&gt;" ssh-rsa AAAAB3N...{etc}</screen>

   <para>
    To copy now the file from the remote server, run the following command:
   </para>

   <para>
    ssh <replaceable>USER</replaceable>@<replaceable>SERVERNAME</replaceable>
    <replaceable>LOCAL_FILE</replaceable>
   </para>

   <para>
    Since <command>/bin/cat</command> is run on the server side, its output
    needs to be redirected to the local file.
   </para>

   <para>
    Another approach is to replace the <command>/bin/cat</command> (referenced
    above) with your own script that checks the passed SSH commands by reading
    the environment variable <envar>$SSH_ORIGINAL_COMMAND</envar>. For
    example:
   </para>

<screen>#!/bin/ksh
 if [[ $SSH_ORIGINAL_COMMAND = "File1" ||
       $SSH_ORIGINAL_COMMAND = "File2" ]]
 then
     /bin/cat $SSH_ORIGINAL_COMMAND
 else
     echo "Invalid file name!"
     exit 1
 fi</screen>

   <para>
    So you replace the <command>/bin/cat</command> portion with the script
    name in <filename>~/.ssh/authorized_keys</filename>, and run the following
    command to copy <filename>Foo1</filename>:
   </para>

<screen>&prompt.user;ssh <replaceable>USER</replaceable>@<replaceable>SERVERNAME</replaceable> Foo1 &gt; <replaceable>LOCAL_FILE</replaceable></screen>

   <para>
    To copy <filename>Foo 2</filename>, run:
   </para>

<screen>&prompt.user;ssh <replaceable>USER</replaceable>@<replaceable>SERVERNAME</replaceable> Foo2 &gt; <replaceable>LOCAL_FILE</replaceable></screen>

   <para>
    With the modifications above, every other variety of passed parameters
    will return errors.
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.check_perms">
   <title>Checking File Permissions and Ownership</title>

   <para>
    The following sections deal with some ways the default permissions and
    file settings can be modified to enhance the security of a host. It is
    important to note that the use of the default &productname; utilities like
    <command>seccheck</command> - can be run to lock down and improve the
    general file security and user environment. However, it is beneficial to
    understand how to modify these things.
   </para>

   <para>
    &productname; hosts include three defaults settings for file permissions:
    <filename>permissions.easy</filename>,
    <filename>permissions.secure</filename>, and
    <filename>permissions.paranoid</filename>, all located in the
    <filename>/etc</filename> directory. The purpose of these files is to
    define special permissions, such as world-writable directories or, for
    files, the setuser ID bit (programs with the setuser ID bit set do not run
    with the permissions of the user that has launched it, but with the
    permissions of the file owner, usually &rootuser;).
   </para>

   <para>
    Administrators can use the file
    <filename>/etc/permissions.local</filename> to add their own settings. The
    easiest way to implement one of the default permission rule-sets above is
    to use the <guimenu>Local Security</guimenu> module in &yast;.
   </para>

   <para>
    Each of the following topics will be modified by a selected rule-set, but
    the information is important to understand on its own.
   </para>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.umask">
   <title>Default umask</title>

   <para>
    The <command>umask</command> (user file-creation mode mask) command is a
    shell built-in command which determines the default file permissions for
    newly created files and directories. This can be overwritten by system calls but many
    programs and utilities use <command>umask</command>. By default,
    <command>umask</command> is set to <literal>022</literal>. You can modify
    this globally by changing the value in <filename>/etc/profile</filename>
    or for each user in the startup files of the shell.
   </para>

   <para>
    To determine the active umask, use the <command>umask</command>
    command:
   </para>

<screen>&prompt.user;umask
022</screen>

   <para>
   The umask is subtracted from the access mode <literal>777</literal> if at
   least one bit is set.
   </para>

   <para>
    With the default umask you see the behavior most users expect to see on a Linux system.
   </para>

<screen>
&prompt.user;touch a
&prompt.user;mkdir b
&prompt.user;ls -on
total 16
-rw-r--r--. 1 17086    0 Nov 29 15:05 a
drwxr-xr-x. 2 17086 4096 Nov 29 15:05 b
</screen>

   <para>
    You can specify arbitrary umask values, depending on your needs.
   </para>
<screen>
&prompt.user;umask 111
&prompt.user;touch c
&prompt.user;mkdir d
&prompt.user;ls -on
total 16
-rw-rw-rw-. 1 17086    0 Nov 29 15:05 c
drw-rw-rw-. 2 17086 4096 Nov 29 15:05 d
</screen>

   <para>
    Based on your thread model you can use a stricter umask like <literal>037</literal>
    to prevent accidental data leakage.
   </para>
<screen>
&prompt.user;umask 037
&prompt.user;touch e
&prompt.user;mkdir f
&prompt.user;ls -on
total 16
-rw-r-----. 1 17086    0 Nov 29 15:06 e
drwxr-----. 2 17086 4096 Nov 29 15:06 f
</screen>

  </sect1>
  <sect1 xml:id="sec.sec_prot.general.s-bit">
   <title>SUID/SGID Files</title>

   <para>
    When the SUID (set user ID) or SGID (set group ID) bits are set on an
    executable, it executes with the UID or GID of the owner of the executable
    rather than that of the person executing it. This means that, for example,
    all executables that have the SUID bit set and are owned by &rootuser; are
    executed with the UID of &rootuser;. A good example is the <command>passwd</command> command that
    allows ordinary users to update the password field in the <filename>/etc/shadow</filename> file
    which is owned by &rootuser;.
   </para>

   <para>
    But SUID/SGID bits can be misused when the executable has a
    security hole. Therefore, you should search the entire system for
    SUID/SGID executables and document it. To search the entire system for SUID or SGID files, you can run the
    following command:
   </para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -type f -perm '/6000' -ls</screen>

   <para>
    You might need to extend the list of directories that are searched if you
    have a different file system structure.
   </para>


   <para>
    &suse; only sets the SUID/SGID bit on binary if it is really necessary.
    Ensure that code
    developers do not set SUID/SGID bits on their programs if it is not an
    absolute requirement. Very often you can use workarounds like removing the
    executable bit for world/others. However, a better approach is to change
    the design of the software or use capabilities.
   </para>

   <para>
    &productname; supports file capabilities to allow more fine grained
    privileges to be given to programs rather than the full power of &rootuser;:
   </para>

<screen>&prompt.root;getcap -v /usr/bin/ping
      /usr/bin/ping = cap_new_raw+eip</screen>

   <para>
    The previous command only grants the CAP_NET_RAW capability to whoever
    executes <command>ping</command>. In case of vulnerabilities inside
    <command>ping</command>, an attacker can gain at most this capability in
    contrast with full &rootuser;.  Whenever possible, file capabilities should
    be chosen in favor of the SUID bit. But this only applies when the binary
    is suid to &rootuser;, not to other users such as <literal>news</literal>,
    <literal>lp</literal> and similar.
   </para>

  </sect1>
  <sect1 xml:id="sec.sec_prot.general.filepermissions">
   <title>World-Writable Files</title>

   <para>
    World-writable files are a security risk since they can be modified by any
    user on the system. Additionally, world-writable directories allow anyone to add or
    delete files. To locate world-writable files and directories, you can use
    the following command:
   </para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -type f -perm -2 ! -type l -ls</screen>

   <para>
   You might need to extend the list of directories that are searched if you
   have a different file system structure.
   </para>

   <para>
    The <option>! -type l</option> parameter skips all symbolic links since
    symbolic links are always world-writable. However, this is not a problem
    as long as the target of the link is not world-writable, which is checked
    by the above find command.
   </para>

   <para>
    World-writable directories with the sticky bit such as the <filename>/tmp</filename>
    directory do not allow anyone except the owner of a file to delete or rename it in
    this directory.
    The sticky bit makes files stick to the user who created it and it prevents other users from
    deleting and renaming the files. Therefore, depending on the purpose of
    the directory, world-writable directories with sticky are usually not an
    issue. An example is the <filename>/tmp</filename> directory:
   </para>

<screen>&prompt.user;ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>

   <para>
    The <literal>t</literal> mode bit in the output denotes the sticky bit.
   </para>

  </sect1>
  <sect1 xml:id="sec.sec_prot.general.orphaned">
   <title>Orphaned or Unowned Files</title>

   <para>
    Files not owned by any user or group might not necessarily be a security
    problem in itself. However, unowned files could pose a security problem in
    the future. For example, if a new user is created and the new users
    happens to get the same UID as the unowned files have, then this new user
    will automatically become the owner of these files.
   </para>

   <para>
    To locate files not owned by any user or group, use the following command:
   </para>

    <screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -nouser -o -nogroup</screen>

   <para>
   You might need to extend the list of directories that are searched if you
   have a different file system structure.
   </para>

   <para>
    A different problem is files that were not installed via the packaging
    system and therefore don't receive updates. You can check for such files
    with the following command:
   </para>

   <screen>&prompt.user;find /bin /lib /lib64 /usr -path /usr/local -prune -o -type f -a -exec /bin/sh -c "rpm -qf {} &amp;> /dev/null || echo {}" \;</screen>

   <para>
    Run this command as an untrusted user (for example nobody) since crafted
    file names might lead to command
    execution. This shouldn't be a problem since these directories should only be writeable by &rootuser;, but
    it's still a good security precaution.
   </para>

   <para>
    This will show you all files under <filename>/bin</filename>,
    <filename>/lib</filename>, <filename>/lib64</filename> and
    <filename>/usr</filename> (with the
    exception of files in <filename>/usr/local</filename>) that are not tracked
    by the package manager. These files might not represent a security issue, but
    you should be aware of what is not tracked and take the necessary precautions to
    keep these files up to date.
   </para>
  </sect1>
<!-- ============================================================== -->
  <sect1 xml:id="sec.sec_prot.general.removable_media">
   <title>Restricting Access to Removable Media</title>

<!-- fate#312966 -->

   <para>
    In some environments it is required to restrict access to removable media
    such as USB storage or optical devices. The tools coming with the
    <systemitem>udisks2</systemitem> package help with such a configuration.
   </para>

   <procedure>
    <step>
     <para>
      Create a rules file
      <filename>/etc/polkit-1/rules.d/01-restrict-removable-media.rules</filename>
      similar to the following:
     </para>
<screen>// Allow users in group 'mmedia_all' to mount/unmount all type of drives
// Allow users in group 'mmedia_removable' to mount/umount USB storage drives
// Allow users in group 'mmedia_optical' to mount/unmount Optical drives
polkit.addRule(function(action, subject) {
  if (/^org\.freedesktop\.udisks2\.filesystem-.*mount.*$/.test(action.id) &amp;&amp;
  action.lookup("drive.removable") == "true") {
    if (subject.isInGroup("mmedia_all")) {
      return polkit.Result.YES;
    } else {
      if (/.*optical.*/.test(action.lookup("drive.removable.media"))) {
        if (subject.isInGroup("mmedia_optical"))
        return polkit.Result.YES;
      } else if (action.lookup("drive.removable.bus") == "usb") {
        if (subject.isInGroup("mmedia_removable"))
        return polkit.Result.YES;
      }
      return polkit.Result.NO;
    }
  }
});</screen>
     <important>
      <title>Naming of the Rules File</title>
      <para>
       Rules files are processed in alphabetical order. Functions are called
       in the order they were added until one of the functions returns a
       value. Hence, to add an authorization rule that is processed before
       other rules, put it in a file in /etc/polkit-1/rules.d with a name that
       sorts before other rules files, for example
       <filename>01-restrict-removable-media.rules</filename>. Each function
       should return a value from <literal>polkit.Result</literal>.
      </para>
      <para>
<!-- http://doccomments.provo.novell.com/comments/29432 -->
       The name of a rules file must start with a digit, otherwise it will be
       ignored.
      </para>
     </important>
    </step>
    <step>
     <para>
      Restart <systemitem>udisks2</systemitem>:
     </para>
     <screen>&prompt.root;systemctl restart udisks2</screen>
    </step>
    <step>
     <para>
      Restart <systemitem>polkit</systemitem>
     </para>
     <screen>&prompt.root;systemctl restart polkit</screen>
    </step>
    <step>
     <para>
      In &yast;, click <menuchoice><guimenu>Security and
      Users</guimenu><guimenu>User and Group
      Management</guimenu><guimenu>Groups</guimenu></menuchoice> to create the
      three groups <literal>mmedia_all</literal>,
      <literal>mmedia_optical</literal>, and
      <literal>mmedia_removable</literal>. Then add the users to these groups
      as wanted.
     </para>
    </step>
   </procedure>
  </sect1>
<!-- ============================================================== -->
  <sect1 xml:id="sec.sec_prot.general.accounts">
   <title>Various Account Checks</title>

   <para/>

   <sect2 xml:id="sec.sec_prot.general.accounts.unlocked">
    <title>Unlocked Accounts</title>
    <para>
     It is important that all system and vendor accounts that are not used for
     logins are locked. To get a list of unlocked accounts on your system, you
     can check for accounts that do <emphasis>not</emphasis> have an encrypted
     password string starting with <literal>!</literal> or
     <literal>*</literal> in the <filename>/etc/shadow</filename> file. If you
     lock an account using <command>passwd</command> <option>-l</option>, it
     will put a <literal>!!</literal> in front of the encrypted password,
     effectively disabling the password. If you lock an account using
     <command>usermod</command> <option>-L</option>, it will put a
     <literal>!</literal> in front of the encrypted password. Many system and
     shared accounts are usually locked by default by having a
     <literal>*</literal> or <literal>!!</literal> in the password field which
     renders the encrypted password into an invalid string. Hence, to get a
     list of all unlocked (encryptable) accounts, run
     (<command>egrep</command> is used to allow use of regular-expressions):
    </para>
    <screen>&prompt.root;egrep -v ':\*|:\!' /etc/shadow | awk -F: '{print $1}'</screen>
    <para>
     Also make sure all accounts have a <literal>x</literal> in the password
     field in <filename>/etc/passwd</filename>. The following command lists
     all accounts that do not have a <literal>x</literal> in the password
     field:
    </para>
    <screen>&prompt.root;grep -v ':x:' /etc/passwd</screen>
    <para>
     An <literal>x</literal> in the password fields means that the password
     has been shadowed, for example the encrypted password needs to be looked
     up in the <filename>/etc/shadow</filename> file. If the password field in
     <filename>/etc/passwd</filename> is empty, then the system will not look
     up the shadow file and it will not prompt the user for a password at the
     login prompt.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.general.accounts.unused">
    <title>Unused Accounts</title>
    <para>
     All system or vendor accounts that are not being used by users,
     applications, by the system or by daemons should be removed from the
     system. You can use the following command to find out if there are any
     files owned by a specific account:
    </para>
    <screen>&prompt.root;find / -path /proc -prune -o -user <replaceable>ACCOUNT</replaceable> -ls</screen>
    <para>
     The <option>-prune</option> option in this example is used to skip the
     /proc file system. If you are sure that an account can be deleted, you
     can remove the account using the following command:
    </para>
    <screen>&prompt.root;userdel -r <replaceable>ACCOUNT</replaceable></screen>
    <para>
     Without the <option>-r</option> option <command>userdel</command> will
     not delete the user's home directory and mail spool
     (<filename>/var/spool/mail/<replaceable>USER</replaceable></filename>).
     Note that many system accounts have no home directory.
    </para>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.pw_aging">
   <title>Enabling Password Aging</title>

   <para>
    Password expiration is a general best practice&mdash;but might need to
    be excluded for some system and shared accounts (for example Oracle,
    etc.). Expiring password on those accounts could lead to system outages if
    the application account expires.
   </para>

   <para>
    Typically a corporate policy should be developed that dictates
    rules/procedures regarding password changes for system and shared
    accounts. However, normal user account passwords should expire
    automatically. The following example shows how password expiration can be
    set up for individual user accounts.
   </para>

   <para>
    The following files and parameters in the table can be used when a new
    account is created with the <command>useradd</command> command. Settings
    such as these are stored for each user account in the
    <filename>/etc/shadow</filename> file. If using the &yast; tool
    (<guimenu>User and Group Management</guimenu>) to add users, the settings
    are available on a per-user basis. Here are the various
    settings&mdash;some of which can also be system-wide (for example
    modification of <filename>/etc/login.defs</filename> and
    <filename>/etc/default/useradd</filename>):
   </para>

   <informaltable>
    <tgroup cols="3">
     <tbody>
      <row>
       <entry>
        <para>
         <filename>/etc/login.defs</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>PASS_MAX_DAYS</literal>
        </para>
       </entry>
       <entry>
        <para>
         Maximum number of days a password is valid.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/login.defs</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>PASS_MIN_DAYS</literal>
        </para>
       </entry>
       <entry>
        <para>
         Minimum number of days before a user can change the password since
         the last change.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/login.defs</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>PASS_WARN_AGE</literal>
        </para>
       </entry>
       <entry>
        <para>
         Number of days when the password change reminder starts.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/default/useradd</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>INACTIVE</literal>
        </para>
       </entry>
       <entry>
        <para>
         Number of days after password expiration that account is disabled.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/default/useradd</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>EXPIRE</literal>
        </para>
       </entry>
       <entry>
        <para>
         Account expiration date in the format YYYY-MM-DD.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <note>
    <para>
     Users created prior to these modifications will not be affected.
    </para>
   </note>

   <para>
    Ensure that the above parameters are changed in the
    <filename>/etc/login.defs</filename> and
    <filename>/etc/default/useradd</filename> files. Review of the
    <filename>/etc/shadow</filename> file will show how these settings get
    stored after adding a user.
   </para>

   <para>
    To create a new user account, execute the following command:
   </para>

   <screen>&prompt.root;useradd -c "<replaceable>TEST_USER</replaceable>" -g <replaceable>USERS</replaceable> <replaceable>TEST</replaceable></screen>

   <para>
    The <option>-g</option> option specifies the primary group for this
    account:
   </para>

<screen>&prompt.root;id <replaceable>TEST</replaceable>
uid=509(test) gid=100(users) groups=100(users)</screen>

   <para>
    The settings in <filename>/etc/login.defs</filename> and
    <filename>/etc/default/useradd</filename> are recorded for the test user
    in the <filename>/etc/shadow</filename> file as follows:
   </para>

<screen>&prompt.root;grep <replaceable>TEST</replaceable> /etc/shadow
test:!!:12742:7:60:7:14::</screen>

   <para>
    Password aging can be modified at any time by use of the
    <command>chage</command> command. To disable password aging for system and
    shared accounts, you can run the following <command>chage</command>
    command:
   </para>

   <screen>&prompt.root;chage -M -1 <replaceable>SYSTEM_ACCOUNT_NAME</replaceable></screen>

   <para>
    To get password expiration information:
   </para>

   <screen>&prompt.root;chage -l <replaceable>SYSTEM_ACCOUNT_NAME</replaceable></screen>

   <para>
    For example:
   </para>

<screen>&prompt.root;chage -l <replaceable>TEST</replaceable>
Minimum: 7
Maximum: 60
Warning: 7
Inactive: 14
Last Change: Jan 11, 2015
Password Expires: Mar 12, 2015
Password Inactive: Mar 26, 2015
Account Expires: Never</screen>
  </sect1>
  <sect1 xml:id="sec.sec_prot.general.pw_strength">
   <title>Stronger Password Enforcement</title>

   <para>
    On an audited system it is important to restrict people from using simple
    passwords that can be cracked too easily. Writing down complex passwords
    is all right as long as they are stored securely. Some will argue that
    strong passwords protect you against dictionary attacks and those type of
    attacks can be defeated by locking accounts after a few failed attempts.
    However, this is not always an option. If set up like this, locking system
    accounts could bring down your applications and systems which would be
    nothing short of a denial of service attack ‚Äì another issue.
   </para>

   <para>
    At any rate, it is important to practice effective password management
    safety. Most companies require that passwords have at the very least a
    number, one lowercase letter, and one uppercase letter. Policies vary, but
    maintaining a balance between password strength/complexity and management
    is sometimes difficult.
   </para>
  </sect1>
  <xi:include href="hardening_pam_stack.xml"/>
  <sect1 xml:id="sec.sec_prot.dos">
   <title>Preventing Accidental Denial of Service</title>

   <para>
    Linux allows you to set limits on the amount of system resources that
    users and groups can consume. This is also very handy if bugs in programs
    cause them to use up too much resources (for example memory leaks), slow
    down the machine, or even render the system unusable. Incorrect settings
    can allow programs to use too many resources which may make the server
    unresponsive to new connections or even local logins (for example if a
    program uses up all available file handles on the host). This can also be
    a security concern if someone is allowed to consume all system resources
    and therefore cause a denial of service attack ‚Äì either unplanned or
    worse, planned. Setting resource limits for users and groups may be an
    effective way to protect systems, depending on the environment.
   </para>

   <sect2 xml:id="sec.sec_prot.dos_restrict_ressources">
    <title>Example for Restricting System Resources</title>
    <para>
     The following example demonstrates the practical usage of setting or
     restricting system resource consumption for an Oracle user account. For a
     list of system resource settings, see
     <filename>/etc/security/limits.conf</filename> or <command>man
     limits.conf</command>.
    </para>
    <para>
     Most shells like Bash provide control over various resources (for example
     the maximum allowable number of open file descriptors or the maximum
     number of processes) that are available on a per/user basis. To examine
     all current limits in the shell execute:
    </para>
    <screen>&prompt.root;ulimit -a</screen>
    <para>
     For more information on <command>ulimit</command> for the Bash shell,
     examine the Bash man pages.
    </para>
    <important>
     <title>Setting Limits for SSH Sessions</title>
     <para>
      Setting "hard" and "soft" limits might not behave as expected when using
      an SSH session. To see valid behavior it may be necessary to login as
      root and then su to the id with limits (for example,
      <literal>oracle</literal> in these examples). Resource limits should
      also work assuming the application has been started automatically during
      the boot process. It may be necessary to set
      <option>UsePrivilegeSeparation</option> in
      <filename>/etc/ssh/sshd_config</filename> to "no" and restart the SSH
      daemon (<command>systemctl restart sshd</command>) if it seems that the
      changes to resource limits are not working (via SSH). However this is
      not generally recommended ‚Äì as it weakens a systems security.
     </para>
    </important>
    <tip>
     <title>Disabling Password Logins via <command>ssh</command></title>
     <para>
      You can add some extra security to your server by disabling password
      authentication for SSH. Remember that you need to have SSH keys
      configured, otherwise you cannot access the server. To disable password
      login, add the following lines to
      <filename>/etc/ssh/sshd_config</filename>:
     </para>
<screen>UseLogin no
UsePAM no
PasswordAuthentication no
PubkeyAuthentication yes</screen>
    </tip>
    <para>
     In this example, a change to the number of file handles or open files
     that the user <literal>oracle</literal> can use is made by editing
     <filename>/etc/security/limits.conf</filename> as &rootuser; making the
     following changes:
    </para>
<screen>oracle           soft    nofile          4096
oracle           hard    nofile          63536</screen>
    <para>
     The soft limit in the first line defines the limit on the number of file
     handles (open files) that the
     <systemitem class="username">oracle</systemitem> user will have after
     login. If the user sees error messages about running out of file handles,
     then the user can increase the number of file handles like in this
     example up to the hard limit (in this example 63536) by executing:
    </para>
    <screen>&prompt.root;ulimit -n 63536</screen>
    <para>
     You can set the soft and hard limits higher if necessary.
    </para>
    <note>
     <para>
      It is important to be judicious with the usage of ulimits. Allowing a
      "hard" limit for <quote>nofile</quote> for a user that equals the kernel
      limit (<filename>/proc/sys/fs/file-max</filename>) is very bad! If the
      user consumes all the available file handles, the system cannot initiate
      new logins as accessing (opening) PAM modules which are required for
      performing a login will not be possible.
     </para>
    </note>
    <para>
     You also need to ensure that <literal>pam_limits</literal> is either
     configured globally in <filename>/etc/pam.d/common-auth</filename>, or
     for individual services like SSH, su, login, and telnet in:
    </para>
    <simplelist>
     <member><filename>/etc/pam.d/sshd</filename> (for SSH)</member>
     <member><filename>/etc/pam.d/su</filename> (for su)</member>
     <member><filename>/etc/pam.d/login</filename> (local logins and telnet)</member>
    </simplelist>
    <para>
     If you do not want to enable it for all logins, there is a specific PAM
     module that will read the <filename>/etc/security/limits.conf</filename>
     file. Entries in pam configuration directives will have entries like:
    </para>
<screen>session     required      /lib/security/pam_limits.so
session     required      /lib/security/pam_unix.so</screen>
    <para>
     It is important to note that changes are not immediate and require a new
     login session:
    </para>
<screen>&prompt.root;su ‚Äì oracle
&prompt.user;ulimit -n
4096</screen>
    <para>
     Note that these examples are specific to the Bash shell -
     <command>ulimit</command> options are different for other shells. The
     default limit for the user <literal>oracle</literal> is
     <literal>4096</literal>. To increase the number of file handles the user
     <literal>oracle</literal> can use to <literal>63536</literal>, do:
    </para>
<screen>&prompt.root;su ‚Äì oracle
&prompt.user;ulimit -n
4096
&prompt.user;ulimit -n 63536
&prompt.user;ulimit -n
63536</screen>
    <para>
     Making this permanent requires the addition of the setting,
     <literal>ulimit -n 63536</literal>, (again, for Bash) to the users
     profile (<filename>~/.bashrc</filename> or
     <filename>~/.profile</filename> file) which is the user start-up file for
     the Bash shell on &productname; (to verify your shell run: echo
     <envar>$SHELL</envar>). To do this you could simply type (or copy/paste
     ‚Äì if you are reading this on the system) the following commands for the
     Bash shell of the user <literal>oracle</literal>:
    </para>
<screen>&prompt.root;su - oracle
&prompt.user;cat &gt;&gt; ~oracle/.bash_profile &lt;&lt; EOF
ulimit -n 63536
EOF</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="sec.sec_prot.banners">
   <title>Displaying Login Banners</title>

   <para>
    It is often necessary to place a banner on login screens on all servers
    for legal/audit policy reasons or to give security instructions to
    users.
   </para>

   <para>
    If you want to print a login banner <emphasis>after</emphasis> a user
    logs in on a text based terminal for example using SSH or on a local
    console, you can leverage the file <filename>/etc/motd</filename> (motd =
    message of the day). The file exists by default on &productname;, but
    it is empty. Simply add content to the file that is applicable/required
    by the organization.
   </para>

   <note>
    <title>Banner Length</title>
    <para>
     Try to keep the login banner content to a single terminal page (or
     less), as it will scroll the screen if it does not fit, making it more
     difficult to read.
    </para>
   </note>

   <para>
    You can also have a login banner printed <emphasis>before</emphasis> a
    user logs in on a text based terminal. For local console
    logins you can edit the <filename>/etc/issue</filename> file, which will
    cause the banner to be displayed before the login prompt. For logins via
    SSH you can edit the <quote>Banner</quote> parameter in the
    <filename>/etc/ssh/sshd_config</filename> file, which will then
    appropriately display the banner text before the SSH login prompt.
   </para>

   <para>
    For graphical logins via GDM, you can follow
    <link xlink:href="https://help.gnome.org/admin/system-admin-guide/stable/login-banner.html.en">
    the GNOME admin guide</link> to set up a login banner. Furthermore
    you can make the following changes to require a user to acknowledge the
    legal banner by selecting <guimenu>Yes</guimenu> or <guimenu>No</guimenu>.
    Edit the <filename>/etc/gdm/Xsession</filename> file and add the
    following lines at the <emphasis>beginning</emphasis> of the script:
   </para>

<screen>if ! /usr/bin/gdialog --yesno '\n<replaceable>This system is classified...</replaceable>\n' 10 10; then
    /usr/bin/gdialog --infobox 'Aborting login'
    exit 1;
fi</screen>

   <para>
    The text <replaceable>This system is classified...</replaceable> needs to
    be replaced with the desired banner text. It is important to note that
    this dialog will not prevent a login from progressing. For more
    information about GDM scripting, refer to the
    <link xlink:href="https://help.gnome.org/admin/gdm/stable/configuration.html.en#scripting">
    GDM Admin Manual</link>.
   </para>

  </sect1>
  <sect1 xml:id="sec.sec_prot.misc">
   <title>Miscellaneous</title>

   <para/>

   <sect2 xml:id="sec.sec_prot.misc.aide">
    <title>Host-Based Linux Monitoring and Intrusion Detection</title>
    <para>
     Before you place a host into production or even on a network, consider
     the use of a system integrity checker, like <command>seccheck</command>
     (already discussed in <xref linkend="sec.sec_prot.general.seccheck"/>),
     so in case of unauthorized changes, notifications will be issued. Also
     consider the use of an intrusion detection environment, like AIDE, the
     Advanced Intrusion Detection Environment.
    </para>
    <para>
     AIDE is a GPL licensed and open source intrusion detection system. It
     could be considered a system fingerprinting mechanism. AIDE works by
     creating a database containing information about the files on your
     system. The database is created from rules laid out in the configuration
     file aide.conf. When AIDE is run, this database is referenced to check
     for changes (or created for the first time). Assuming a comparison check
     is being run, any changes not permitted by the configuration file are
     reported.
    </para>
    <para>
     By leveraging AIDE&mdash;storing a copy of the host's database in a
     secure location&mdash;and comparing it (on a scheduled basis or as part
     of a forensic effort), system integrity/insurance can be a matter of
     heuristics and procedure. If an intruder compromises your system, the
     comparison effort will enable an administrator or security officer to
     know what has changed on the host. The initial database should be created
     as a final step&mdash;<emphasis>before</emphasis> a system gets deployed
     into production.
    </para>
    <para>
     It is outside the scope of this article to cover Linux Monitoring and
     detailed Intrusion Detection systems (IDS) or solutions, however there is
     a plethora of information about configuring AIDE or other solutions and
     many informative articles on the Web.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.misc.account_utils">
    <title>Connect Accounting Utilities</title>
    <para>
     Here is a list of commands you can use to get data about user logins:
    </para>
    <formalpara>
     <title><command>who</command></title>
     <para>
      Lists currently logged in users.
     </para>
    </formalpara>
    <formalpara>
     <title><command>w</command></title>
     <para>
      Shows who is logged in and what they are doing.
     </para>
    </formalpara>
    <formalpara>
     <title><command>last</command></title>
     <para>
      Shows a list of last logged in users, including login time, logout time,
      login IP address, etc.
     </para>
    </formalpara>
    <formalpara>
     <title><command>lastb</command></title>
     <para>
      Same as <command>last</command>, except that by default it shows
      <filename>/var/log/btmp</filename>, which contains all the bad login
      attempts.
     </para>
    </formalpara>
    <formalpara>
     <title><command>lastlog</command></title>
     <para>
      This command reports data maintained in
      <filename>/var/log/lastlog</filename>, which is a record of the last
      time a user logged in.
     </para>
    </formalpara>
    <formalpara>
     <title><command>ac</command></title>
     <para>
      Available after installing the <systemitem>acct</systemitem> package.
      Prints the connect time in hours on a per-user basis or daily basis,
      etc. This command reads <filename>/var/log/wtmp</filename>.
     </para>
    </formalpara>
    <formalpara>
     <title><command>dump-utmp</command></title>
     <para>
      Converts raw data from /var/run/utmp or
      <filename>/var/log/wtmp</filename> into ASCII-parseable format.
     </para>
    </formalpara>
    <para>
     Also check the <filename>/var/log/messages</filename> file, or the output
     of <command>journalctl</command> if no logging facility is running. See
     <xref linkend="cha.journalctl"/> for more information on the &systemd;
     journal.
    </para>
   </sect2>

   <sect2 xml:id="sec.sec_prot.misc.other">
    <title>Other</title>
    <para>
     Finally, the following items are relevant to the system security as well,
     and misconfiguration can cause many problems ‚Äì and should be reviewed:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       Resolver (<filename>/etc/hosts</filename>,
       <filename>/var/run/netconfig/resolv.conf</filename>,
       <filename>/etc/nsswitch.conf</filename>).
      </para>
      <para>
       <filename>/etc/resolv.conf</filename> is a symbolic link to
       <filename>/run/netconfig/resolv.conf</filename>.
      </para>
     </listitem>
     <listitem>
      <para>
       NTP configuration (<filename>/etc/chrony.conf</filename>).
      </para>
     </listitem>
    </itemizedlist>
   </sect2>
  </sect1>
 </chapter>
 <!--
 <appendix xml:id="app.hardening.docupdates">
<!-/-list of xrefs, latest date sorted upmost-/->
  <title>Documentation Updates</title>
  <info/>
  <para>
   This chapter lists content changes for this document since the release of
   &productnamereg; 11 SP3.
  </para>
  <para>
   This manual was updated on the following dates:
  </para>
<!-/-list of xrefs, latest date sorted upmost-/->
  <itemizedlist>
   <listitem>
    <para>
     <xref linkend="sec.hardening.docupdates.sle12_sp2_ga" xrefstyle="SectTitleOnPage"/>
    </para>
   </listitem>
  </itemizedlist>
  <sect1 xml:id="sec.hardening.docupdates.sle12_sp2_ga">
   <title>November 2016 (Initial Release of &productname; 12 SP2)</title>

   <variablelist>
    <varlistentry>
     <term>All sections</term>
     <listitem>
      <para>

     </listitem>
    </varlistentry>
   </variablelist>
  </sect1>
 </appendix>-->
</book>
