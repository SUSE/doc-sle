<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="containers-docker-overview.xml" xml:id="cha-docker-overview" xml:lang="zh-cn" version="5.0">
 <info>
  <title>Docker 开源引擎概述</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  Docker 开源引擎是一个轻量的虚拟化解决方案，无需超级管理程序即可基于单个 Linux 内核同时运行多个虚拟 Linux 环境（容器）。容器通过内核 cgroup（<xref linkend="vle-docker-cgroup"/>）和<xref linkend="vle-docker-namespace"/>来隔离。
 </para>
 <para>
  Xen、KVM 和 <systemitem class="library">libvirt</systemitem> 等全虚拟化解决方案基于模拟整个硬件环境，并在这些虚拟机内部运行多个操作系统实例实现。Docker 开源引擎可提供操作系统级别的虚拟化：由单个 Linux 内核控制多个隔离的容器。
 </para>
 <para>
  Docker 开源引擎可让开发人员和系统管理员管理映像的整个生命周期。使用 Docker 开源引擎可以轻松构建、交付和运行包含应用程序的映像。
 </para>
 <para>
  Docker 开源引擎具有以下优势：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    通过容器隔离应用程序。
   </para>
  </listitem>
  <listitem>
   <para>
    近乎本机的性能，因为 Docker 开源引擎可实时管理资源分配。
   </para>
  </listitem>
  <listitem>
   <para>
    通过 cgroup 控制容器内部可用的网络接口和资源。
   </para>
  </listitem>
  <listitem>
   <para>
    对映像进行版本控制。
   </para>
  </listitem>
  <listitem>
   <para>
    基于现有映像构建新映像。
   </para>
  </listitem>
  <listitem>
   <para>
    容器编制。
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Docker 开源引擎存在以下限制：
 </para>
 <itemizedlist>
  <listitem>
   <para>
    容器在主机系统的内核中运行，无法使用不同的内核。
   </para>
  </listitem>
  <listitem>
   <para>
    仅支持 Linux 应用程序，不支持其他操作系统。
   </para>
  </listitem>
  <listitem>
   <para>
    Docker 开源引擎不是像 Xen、KVM 或 <systemitem class="library">libvirt</systemitem> 那样的全虚拟化堆栈。
   </para>
  </listitem>
  <listitem>
   <para>
    安全性取决于主机系统。有关更多细节，请参见<link xlink:href="http://docs.docker.com/articles/security/">官方安全性文档</link>。
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="cha-docker-architecture">
  <title>Docker 开源引擎体系结构</title>

  <para>
   Docker 开源引擎使用客户端/服务器体系结构。您可以使用 <emphasis>CLI 客户端</emphasis>来与<emphasis>守护程序</emphasis>通讯。<emphasis>守护程序</emphasis>负责对容器执行操作，并在本地或注册表中管理映像。<emphasis>CLI 客户端</emphasis>可以在主机守护程序所在的同一台服务器上运行，也可以在不同的计算机上运行。<emphasis>CLI 客户端</emphasis>使用网络套接字来与<emphasis>守护程序</emphasis>通讯。<xref linkend="fig-docker-architecture"/>中显示了体系结构。
  </para>

  <figure xml:id="fig-docker-architecture">
   <title>Docker 开源引擎体系结构</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="docker_architecture.png" width="70%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
</chapter>
