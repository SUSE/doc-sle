<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="suse_sw_packages.xml" version="5.0" xml:id="sec-suse-packages"> <title>特殊软件包的相关信息</title>

 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  后续章节提供了有关以下工具的基本信息：<systemitem class="resource">bash</systemitem>、<systemitem class="resource">cron</systemitem>、<systemitem class="resource">logrotate</systemitem>、<systemitem class="resource">locate</systemitem>、<systemitem class="resource">ulimit</systemitem> 和 <systemitem class="resource">free</systemitem>。

 </para>

 <sect2 xml:id="sec-suse-packages-bash">
  <title><systemitem class="resource">bash</systemitem> 软件包和 <filename>/etc/profile</filename></title>
  <para>
   Bash 是默认的系统外壳。在用作登录外壳时，它将读取几个初始化文件。Bash 按照这些文件在列表中出现的顺序处理它们：
  </para>
  <orderedlist spacing="normal">
   <listitem>
    <para>
     <filename>/etc/profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/etc/bash.bashrc</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.bashrc</filename>
    </para>
   </listitem>
  </orderedlist>
  <para>
   在 <filename>~/.profile</filename> 或 <filename>~/.bashrc</filename> 中进行自定义设置。要确保正确处理这些文件，需要将基本设置从 <filename>/etc/skel/.profile</filename> 或 <filename>/etc/skel/.bashrc</filename> 复制到用户的主目录中。建议在更新后从 <filename>/etc/skel</filename> 复制这些设置。执行以下外壳命令可防止个人调整的损失：
  </para>
<screen><prompt>tux &gt; </prompt>mv ~/.bashrc ~/.bashrc.old
<prompt>tux &gt; </prompt>cp /etc/skel/.bashrc ~/.bashrc
<prompt>tux &gt; </prompt>mv ~/.profile ~/.profile.old
<prompt>tux &gt; </prompt>cp /etc/skel/.profile ~/.profile</screen>
  <para>
   然后从 <literal>*.old</literal> 文件将个人调整复制过来。
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-packages-cron">
  <title><phrase>cron</phrase> 软件包</title>
  <para>
   使用 <systemitem class="daemon">cron</systemitem> 可在预定义的时间自动在后台运行命令。<systemitem class="daemon">cron</systemitem> 使用格式经过特别设置的时间表，并且该工具随附了几个默认的时间表。用户也可以根据需要指定自定义的表。
  </para>
  <para>
   cron 表位于 <filename>/var/spool/cron/tabs</filename> 中。<filename>/etc/crontab</filename> 用作系统范围的 cron 表。输入在时间表之后且在此命令之前运行此命令的用户名。在<xref linkend="ex-suse-packages-cron"/> 中，输入的是 <systemitem class="username">root</systemitem>。位于 <filename>/etc/cron.d</filename> 中的软件包特定的表具有相同的格式。请参见 <command>cron</command> 手册页 (<command>man cron</command>)。
  </para>
  <example xml:id="ex-suse-packages-cron">
   <title>/etc/crontab 中的项</title>
<screen>1-59/5 * * * *   root   test -x /usr/sbin/atrun &amp;&amp; /usr/sbin/atrun</screen>
  </example>
  <para>
   不能通过调用命令 <filename>crontab -e</filename> 来编辑 <command>/etc/crontab</command>。必须直接将此文件装载到编辑器中，然后对其进行修改并保存。
  </para>
  <para>
   有些软件包会将外壳脚本安装到 <filename>/etc/cron.hourly</filename>、<filename>/etc/cron.daily</filename>、<filename>/etc/cron.weekly</filename> 和 <filename>/etc/cron.monthly</filename> 目录中，这些脚本的执行由 <filename>/usr/lib/cron/run-crons</filename> 控制。<filename>/usr/lib/cron/run-crons</filename> 每隔 15 分钟在主表 (<filename>/etc/crontab</filename>) 中运行一次。这样可以确保在适当的时间运行可能被忽略的进程。
  </para>
  <para>
   要按自定义时间运行 <filename>hourly</filename>、<filename>daily</filename> 或其他定期维护脚本，请使用 <filename>/etc/crontab</filename> 项目定期去除时戳文件（请参见<xref linkend="ex-suse-packages-cron-time"/>，它会在每个整点之前去除 <filename>hourly</filename> 时戳文件，在每天的早上 2:14 去除 <filename>daily</filename> 时戳文件，等等）。
  </para>
  <example xml:id="ex-suse-packages-cron-time">
   <title>/etc/crontab：去除时戳文件</title>
<screen>59 *  * * *     root  rm -f /var/spool/cron/lastrun/cron.hourly
14 2  * * *     root  rm -f /var/spool/cron/lastrun/cron.daily
29 2  * * 6     root  rm -f /var/spool/cron/lastrun/cron.weekly
44 2  1 * *     root  rm -f /var/spool/cron/lastrun/cron.monthly</screen>
  </example>
  <para>
   或者，在 <filename>/etc/sysconfig/cron</filename> 中将 <literal>DAILY_TIME</literal>设置为应启动 <filename>cron.daily</filename> 的时间。<literal>MAX_NOT_RUN</literal> 的设置确保即使用户很长一段时间都未在指定的 <literal>DAILY_TIME</literal> 打开计算机，日常任务仍被触发运行。<literal>MAX_NOT_RUN</literal> 的最大值为 14 天。
  </para>
  <para>
   为了清楚起见，将日常系统维护任务分布在多个脚本中。这些脚本包含在软件包 <systemitem class="resource">aaa_base</systemitem> 中。例如，<filename>/etc/cron.daily</filename> 包含组件 <filename>suse.de-backup-rpmdb</filename>、<filename>suse.de-clean-tmp</filename> 或 <filename>suse.de-cron-local</filename>。<remark role="trans">"suse.de" is just a prefix to avoid naming clashes with
   third party provided scripts; read it as: these are scripts provided by
   SUSE.  They are not German packages and you must not localize these filename
   in any way.</remark>
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-packages-cronstatus">
  <title>停止 Cron 状态消息</title>
  <para>
   要避免 Cron 状态消息导致的邮件泛滥，请将新安装的 <filename>/etc/sysconfig/cron</filename> 中 <literal>SEND_MAIL_ON_NO_ERROR</literal> 的默认值设为“<literal>no</literal>”。即使将此设置设为“<literal>no</literal>”，cron 数据输出仍然会发送到 <literal>MAILTO</literal> 地址，如 cron 手册页中所述。
  </para>
  <para>
   在更新时，建议根据需要设置这些值。
  </para>
 </sect2>

 <xi:include href="suse_logfiles.xml"/>

 <sect2 xml:id="sec-suse-locate">
  <title><command>locate</command> 命令</title>

  <para>
   <command>locate</command> 是一个用于查找文件的命令，它不包括在已安装软件的标准范围内。如果需要，请安装 <systemitem>mlocate</systemitem> 软件包，它是 <systemitem>findutils-locate</systemitem> 软件包的后继者。updatedb<systemitem class="daemon"> 进程将在每天晚上或引导系统约 15 分钟后自动启动。</systemitem>
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-ulimit">
  <title><command>ulimit</command> 命令</title>
  <para>
   使用 <command>ulimit</command>（<emphasis>用户限制</emphasis>）命令可以为系统资源的使用设置限制并使其显示出来。<command>ulimit</command> 对于限制应用程序的可用内存尤其有用。设置可用内存限制后，可以防止应用程序占用过多系统资源，而导致操作系统变慢甚至挂起。
  </para>
  <para>
   <command>可以对 </command>ulimit 使用多个选项。要限制使用内存，请使用<xref linkend="tab-suse-packages-ulimit"/> 中列出的选项。
  </para>
  <table xml:id="tab-suse-packages-ulimit">
   <title><command>ulimit</command>：为用户设置资源</title>

   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>-m</option>
       </para>
      </entry>
      <entry>
       <para>
        最大驻留集大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-v</option>
       </para>
      </entry>
      <entry>
       <para>
        外壳可用虚拟内存的最大量
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-s</option>
       </para>
      </entry>
      <entry>
       <para>
        堆栈的最大大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-c</option>
       </para>
      </entry>
      <entry>
       <para>
        创建的核心文件的最大大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-a</option>
       </para>
      </entry>
      <entry>
       <para>
        所有当前限制均已报告
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   系统范围的默认项在 <filename>/etc/profile</filename> 中设置。建议不要直接编辑此文件，因为系统升级期间会覆盖所做的更改。要自定义系统范围的配置文件设置，请使用 <filename>/etc/profile.local</filename>。各用户的设置应该在 <filename>~<replaceable>USER</replaceable>/.profile</filename> 中配置。
  </para>
  <example xml:id="ex-u-ulimit-bashrc">
   <title><command>ulimit</command>：<filename>~/.bashrc</filename> 中的设置</title>
<screen># Limits maximum resident set size (physical memory):
ulimit -m 98304

# Limits of virtual memory:
ulimit -v 98304</screen>
  </example>
  <para>
   必须以 KB 为单位指定内存分配。有关详细信息，请参见 <command>man bash</command>。
  </para>
  <important>
   <title><command>ulimit</command> 支持</title>
   <para>
    并非所有外壳都支持 <command>ulimit</command> 指令。PAM（例如 <literal>pam_limits</literal>）作为替代 <command>ulimit</command> 的方法，提供了全面的调整功能。
   </para>
  </important>
 </sect2>

 <sect2 xml:id="sec-suse-free">
  <title><command>free</command> 命令</title>
  <para>
   <command>free</command> 命令显示系统中总的可用内存、已用物理内存和交换空间，以及内核占用的缓冲区和缓存。<emphasis>可用 RAM </emphasis>的概念可追溯到统一内存管理之前。可用内存不是好的内存<emphasis>这种说法非常适用于 Linux。</emphasis>因此，Linux 一直在平衡缓存方面下功夫，不允许实际上存在可用或未使用的内存。
  </para>
  <para>
   内核对任何应用程序或用户数据都没有直接的了解。而是在一个<emphasis>页缓存</emphasis>中管理应用程序和用户数据。如果内存不足，它的某些部分会被写入交换分区或文件中，这样，使用 <command>mmap</command> 命令便可一开始就从这些交换分区或文件中读取这些部分（请参见 <command>man mmap</command>）。
  </para>
  <para>
   此外，内核中还包含其他缓存，如 <emphasis>slab 缓存</emphasis>，其中储存着用于网络访问的缓存。这也许能够解释 <filename>/proc/meminfo</filename> 中计数器之间的差异。通过 <filename>/proc/slabinfo</filename> 可以访问大多数（但并非全部）上述缓存。
  </para>
  <para>
   但是如果您的目的是找出当前所用的 RAM 量，则在 <filename>/proc/meminfo</filename> 中查找此信息。
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-manpages">
  <title>手册页和信息页</title>
  <para>
   对于某些 GNU 应用程序（如 tar），已不再保留手册页。对于这些命令，可使用 <option>--help</option> 选项快速查看信息页，这些页面中提供了更多深入说明。Info 是 GNU 的超文本系统。通过输入 <command>info</command> <option>info</option> 可以看到此系统的介绍。通过输入 <command>emacs</command> <option> -f Info</option> 可使用 Emacs 查看信息页，也可以在控制台中使用 <command>info</command> 直接查看信息页。还可以使用 tkinfo、xinfo 或帮助系统来查看信息页。
  </para>
 </sect2>



 <sect2 xml:id="sec-suse-packages-man">
  <title>使用 <command>man</command> 命令选择手册页</title>
  <para>
   要阅读手册页，请输入 <command>man</command>
   <replaceable>MAN_PAGE</replaceable>。如果不同章节存在同名手册页，所有手册页都会带相应部分编号列出。选择要显示的一个手册页。如果在数秒内未输入部分编号，将显示第一个手册页。
  </para>
  <para>
   要将此行为更改为默认系统行为，请在外壳初始化文件（如 <literal>~/.bashrc</literal>）中设置 <filename>MAN_POSIXLY_CORRECT=1</filename>。
  </para>
 </sect2>

 <xi:include href="suse_emacs.xml"/>
</sect1>
