<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE appendix
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
  <!ENTITY productnamex "<phrase xmlns='http://docbook.org/ns/docbook' os='sles;sled;osuse'>&productname;</phrase><phrase xmlns='http://docbook.org/ns/docbook' os='article'>&sls;</phrase>">
  <!ENTITY productnumberx "<phrase xmlns='http://docbook.org/ns/docbook' os='sles;sled;osuse'>&productnumber;</phrase><phrase xmlns='http://docbook.org/ns/docbook' os='article'>15</phrase>">
]>

<!--
  IMPORTANT: When editing this file, make sure to keep the article version
  (art_amd-sev.xml) up-to-date.
-->

<appendix xml:id="app.amd-sev"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>AMD Secure Encrypted Virtualization</title>
 <info>
  <abstract>
   <para>
    AMD's Secure Encrypted Virtualization (SEV) adds a facility to Linux's
    built-in Kernel-based Virtual Machine (&kvm;) hypervisor, which allows the
    memory assigned to running virtual machines to be encrypted for increased
    security.
   </para>
  </abstract>
 </info>

 <para>
  This document aims to provide a basic understanding of how SEV works, how to
  enable and configure it, and some of the limitations and restrictions that its
  use causes as compared to non-encrypted virtualization.
 </para>
 <sect1 xml:id="sec.amd-sev.intro">
  <title>Introducing SEV</title>
  <para>
   Encryption of computer data stored on disk is a widely-deployed feature.
   However, data in RAM is stored in the clear. This can leave that data
   vulnerable to software or hardware probing by intruders into the host system.
   New persistent-memory technology exacerbates this problem, since an NVDIMM
   (non-volatile memory module) could be physically removed from a system and
   the data on it will remain intact, similarly to that on a hard drive or SSD.
   Without encryption, any stored information - such as sensitive data,
   passwords, or secret keys - could easily be compromised.
  </para>
  <para>   
   AMD's SEV (Secure Encrypted Virtualization) is a technology to protect Linux
   KVM virtual machines by transparently encrypting the memory of each VM with a
   unique key. SEV can also calculate a signature of the memory contents, which
   can be sent to the VM's owner as an attestation that the memory was encrypted
   correctly by the firmware. SEV is particularly applicable to cloud computing
   since it can reduce the amount of trust VMs need to place in the hypervisor
   and administrator of their host system.
  </para>
  <para>
   In &sle; 12 SP4 and above, and a forthcoming maintenance release of &sle; 15,
   the kernel, QEMU, and <literal>libvirt</literal> support creating and
   managing VMs whose memory is encrypted using AMD's SEV technology. Currently
   the technology is only available as technical preview, but it will be fully
   supported in future versions of &sle;.
  </para>
 </sect1>
 
 <sect1 xml:id="sec.amd-sev.hostreqs">
  <title>VM Host Requirements</title>
  <para>
   The VM host hardware must support AMD's SEV technology. Support for SEV can
   be detected by checking that the <literal>sev</literal> attribute is present
   in the capabilities of <literal>libvirt</literal> and that its value is set
   appropriately:
  </para>
<screen><![CDATA[
<domainCapabilities>
 ...
 <features>
  ...
  <sev supported='yes'/>
  ...
  </sev>
 </features>
</domainCapabilities>
]]></screen>
  <para>
   Additionally, ensure that the <literal>kvm_amd</literal> kernel module has
   the <literal>sev</literal> parameter enabled:
  </para>
  <screen>/sys/module/kvm_amd/parameters/sev = 1</screen>
 </sect1>
 
 <sect1 xml:id="sec.amd-sev.vmreqs">
  <title>Virtual Machine Requirements</title>
  <para>
   The VM must be the modern <literal>Q35</literal> machine type and must use
   UEFI firmware.
  </para>
  <note>
   <para>
    The Q35 machine type does not have an IDE controller and does not support IDE disks.
   </para>
  </note>
  <para>
   Currently <literal>virtio-blk</literal> disks are not supported. <literal>virtio-scsi</literal>
   and SATA disks are supported and work as expected. All <literal>virtio</literal>
   devices need to be configured with the <literal>iommu='on'</literal>
   attribute in their <literal>&lt;driver&gt;</literal> configuration. In
   addition, all memory regions used by the VM must be locked for DMA and to
   prevent swapping.
  </para>
  <para>
   As an example, an SEV-encrypted VM configured with 4 GB of memory would
   contain the following XML configuration:
  </para>
<screen><![CDATA[
<domain type='kvm'>
  <memory unit='KiB'>4194304</memory>
  <currentMemory unit='KiB'>4194304</currentMemory>
  <os>
    <type arch='x86_64' machine='pc-q35-2.11'>hvm</type>
    <loader readonly='yes' type='pflash'>/usr/share/qemu/ovmf-x86_64-ms-4m-code.bin</loader>
    <nvram>/var/lib/libvirt/qemu/nvram/sles15-sev-guest_VARS.fd</nvram>
    <boot dev='hd'/>
  </os>
  <launchSecurity type='sev'>
    <cbitpos>47</cbitpos>
    <reducedPhysBits>1</reducedPhysBits>
    <policy>0x0037</policy>
  </launchSecurity>
  <memtune>
    <hard_limit unit='KiB'>4718592</hard_limit>
    ...
  </memtune>
  <devices>
   <disk type='file' device='disk'>
     <driver name='qemu' type='raw'/>
     <target dev='sda' bus='scsi'/>
     <source file='/vmimages/sev-guest-disk.raw'/>
   </disk>
   <controller type='scsi' model='virtio-scsi'>
     <driver iommu='on'/>
   </controller>
    <rng model='virtio'>
      <driver iommu='on'/>
      ...
    </rng>
    <memballoon model='virtio'>
      <driver iommu='on' />
      ...
    </memballoon>
    <video>
      <model type='qxl' ram='65536' vram='65536' vgamem='16384' heads='1'  primary='yes'/>
    </video>
    ...
  </devices>
  ...
</domain>
]]></screen>
  <para>
   The <literal>&lt;launchSecurity type='sev'&gt;</literal> element and its
   contents enable encryption of the VM's memory contents.
  </para>
  <para>
   When memory encryption is enabled, one of the physical address bits (also
   known as the "C-bit") is used to mark if a memory page is protected. The
   required <literal>&lt;cbitpos&gt;</literal> element provides the location of
   the C-bit in a guest page table entry. For example, the value <literal>47</literal>
   indicates that bit position 47 in a page table entry will determine whether
   that page is encrypted or not. The C-bit number is read from the host's CPUID
   and is thus hardware-dependant. The value of <literal>cbitpos</literal> is
   hypervisor-dependent, and can be obtained through the <literal>&lt;sev&gt;</literal>
   element in the capabilities of the domain.
  </para>
  <para>
   When memory encryption is enabled, we lose certain bits of the physical
   address space. The required <literal>&lt;reducedPhysBits&gt;</literal> element
   provides this physical address bit reduction. Similarly to <literal>cbitpos</literal>,
   the value of <literal>reducedPhysBits</literal> is processor-family-dependent
   and can be obtained through the <literal>&lt;sev&gt;</literal> element in
   domain capabilities.
  </para>
  <para>
   The required <literal>&lt;policy&gt;</literal> element provides the guest
   policy which must be maintained by the SEV firmware. This policy is enforced
   by the firmware, and restricts what configuration and operational commands
   can be performed on the VM by the hypervisor. The guest policy provided when
   starting the VM is bound to that VM and cannot be changed throughout its
   lifetime. The guest policy is four unsigned bytes with the following
   definition:
  </para>
  <table xml:id="table.guestpolicy">
   <title>Guest Policy Definitions</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>
       <para>Bit(s)</para>
      </entry>
      <entry>
       <para>Definition</para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>0</para>
      </entry>
      <entry>
       <para>
        Debugging of the guest is disallowed when set
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>1</para>
      </entry>
      <entry>
       <para>
        Sharing keys with other guests is disallowed when set
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>2</para>
      </entry>
      <entry>
       <para>
        SEV-ES is required when set
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>3</para>
      </entry>
      <entry>
       <para>
        Sending the guest to another platform is disallowed when set
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>4</para>
      </entry>
      <entry>
       <para>
        The guest must not be transmitted to another platform that is not in the
        domain when set
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>5</para>
      </entry>
      <entry>
       <para>
        The guest must not be transmitted to another platform that is not
        SEV-capable when set
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>6-15</para>
      </entry>
      <entry>
       <para>
        Reserved
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>16-32 </para>
      </entry>
      <entry>
       <para>
        The guest must not be transmitted to another platform with a lower
        firmware version
       </para>
      </entry>
     </row>
    </tbody>
    </tgroup>
  </table>
  <para>
   The optional <literal>&lt;dhCert&gt;</literal> element provides the guest
   owner's base64-encoded Diffie-Hellman (DH) key. The key is used to negotiate
   a master secret key between the SEV firmware and guest owner. This master
   secret key is then used to establish a trusted channel between SEV firmware
   and guest owner.
  </para>
  <para>
   The optional <literal>&lt;session&gt;</literal> element provides the guest
   owner's base64-encoded session blob, as defined in the SEV API spec. See the
   LAUNCH_START section of the SEV specification for the session-blob format.
  </para>
  <para>
   In addition to the <literal>&lt;launchSecurity&gt;</literal> settings,
   SEV-encrypted VMs must have the <literal>iommu='on'</literal> attribute set
   in each <literal>virtio</literal> device, as shown in the example
   configuration. This attribute is required in order to enable DMA APIs for
   the device within QEMU.
  </para>
  <para>
   SEV-encrypted VMs must also have all of their memory regions locked to allow
   DMA and prevent swapping. This includes not only the VM's RAM, but also
   ROM(s), pflash, and video memory. Using the example configuration, the memory
   regions needing to be locked total to 4352592 kB, which exceeds the default
   <literal>memlock</literal> limit. The <literal>memlock</literal> limit for a
   virtual machine process can be increased using the <literal>&lt;hard_limit&gt;</literal>
   subelement of <literal>&lt;memtune&gt;</literal>. The value 4352592 kB was
   determined using the following formula:
  </para>
  <screen>hard_limit = VM RAM + VM video memory + ROMs/ACPI tables</screen>
  <para>
   where:
  </para>
<screen>    4096 kB (UEFI ROM)
 +  4096 kB (UEFI variable store)
 +   128 kB (PC ROM)
 +   128 kB (ISA BIOS) 
 +  2384 kB (ACPI tables)
 = 10832 kB (total of all ROMs/ACPI tables)</screen>
  <para>
   Although 10832 kB for ROMs and ACPI tables should be sufficient in most
   cases, it is recommended to add a few hundred kilobytes of padding. ROM sizes
   have been known to change and adding some padding here will accommodate that.
   Using the virtual machine RAM and video memory values from the example
   configuration:
  </para>
<screen>  4194304 kB (virtual machine RAM) 
+   65536 kB (qlx RAM) 
+   65536 kB (qlx video RAM) 
+   16384 kB (qlx VGA memory)
+   10832 kB (ROMs/ACPI tables)
= 4352592 kB hard_limit</screen>
  <para>
   Calculating the <literal>memlock</literal> limit and setting it via 
   <literal>&lt;hard_limit&gt;</literal> can be avoided by configuring the
   virtual machine to use <literal>hugepages</literal>. For more information on
   using hugepages with VMs, refer to the <citetitle>Virtualization Best Practices Guide</citetitle>, 
   Chapter "Configuring the VM Host Server and the VM Guest to use Huge Pages":
   <link xlink:href="https://www.suse.com/documentation/sles-15/book_quickstarts/data/sec_vt_best_hostlevel.html#sec_vt_best_mem_huge_pages"/>.
   </para>
  <para>
   Whilst the overhead incurred is no different to that required for
   non-SEV VMs, it is much more important to get the hard limit right
   when pinning memory. If the limit is too low, the VM will get killed.
  </para>
 </sect1>
 <sect1>
  <title>Current Limitations</title>
  <itemizedlist>
   <listitem>
    <para>
     The guest operating system running inside an SEV-encrypted VM must contain
     SEV support. Currently, &sls; 12 SP4 and &sls; 15 provide this.
    </para>
   </listitem>
   <listitem>
    <para>
     Any operations that involve saving and restoring the memory and state of an
     instance are currently not supported. This means that SEV-encrypted VMs
     cannot be resumed from snapshots, and live migration is not possible.
     Encrypted VMs can be shutdown and restarted on another host as normal.
    </para>
   </listitem>
   <listitem>
    <para>
     SEV-encrypted VMs cannot contain directly-accessible host devices (that is,
     PCI passthrough).
    </para>
   </listitem>
   <listitem>
    <para>
     <literal>virtio-blk</literal> disks are not supported. <literal>virtio-scsi</literal>
     and SATA disks are supported and work as expected.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   These limitations will be removed in the future as the hardware, firmware,
   and various layer of software receive new features.
  </para>
 </sect1>
 <sect1>
  <title>For More Information</title>
  <itemizedlist>
   <listitem>
    <para>
     <link xlink:href="https://developer.amd.com/sev"/>
     &mdash; AMD-SEV landing page
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://developer.amd.com/wp-content/resources/55766.PDF"/>
     &mdash; AMD SEV-KM API Specification (PDF)
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://github.com/AMDESE/AMDSEV/"/>
     &mdash; AMD SEV github repository containing examples and tools
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="https://libvirt.org/formatdomain.html#sev"/>
     &mdash; libvirt SEV configuration settings
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://events17.linuxfoundation.org/sites/events/files/slides/AMD%20SEV-ES.pdf"/>
     &mdash; Slides from the 2017 Linux Security Summit describing SEV and
     preliminary performance results (PDF)
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</appendix>
