<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec.network.manconf">
 <title>Configuring a Network Connection Manually</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  Manual configuration of the network software should be the last alternative.
  Using &yast; is recommended. However, this background information about the
  network configuration can also assist your work with &yast;.
 </para>

 <sect2 xml:id="sec.network.manconf.wicked">
<!--
      initially and heavily based on
      /usr/share/doc/packages/wicked/README
      The version of that README used here, I stored at
      background_information/wicked-readme
  -->
  <title>The <command>wicked</command> Network Configuration</title>
  <para>
   The tool and library called <command>wicked</command> provides a new
   framework for network configuration.
  </para>
  <para>
   One of the challenges with traditional network interface management is that
   different layers of network management get jumbled together into one single
   script, or at most two different scripts. These scripts interact with each other in a
   way that is not well-defined. This leads to unpredictable issues, obscure
   constraints and conventions, etc. Several layers of special hacks for a variety of different scenarios increase the maintenance
   burden. Address configuration protocols are being used that are implemented
   via daemons like dhcpcd, which interact rather poorly with the rest of the
   infrastructure. Funky interface naming schemes that require heavy udev
   support are introduced to achieve persistent identification of interfaces.
  </para>
  <para>
   The idea of wicked is to decompose the problem in several ways. None of them
   is entirely novel, but trying to put ideas from different projects together
   is hopefully going to create a better solution overall.
  </para>
  <para>
   One approach is to use a client/server model. This allows wicked to define
   standardized facilities for things like address configuration that are well
   integrated with the overall framework. For example, using a specific address
   configuration, the administrator may request that an interface should be
   configured via DHCP or IPv4 zeroconf. In this case, the address configuration
   service simply obtains the lease from its server and passes it on to the
   wicked server process that installs the requested addresses and routes.
  </para>
  <para>
   The other approach to decomposing the problem is to enforce the layering
   aspect. For any type of network interface, it is possible to define a dbus
   service that configures the network interface's device layer&mdash;a VLAN, a
   bridge, a bonding, or a paravirtualized device. Common functionality, such
   as address configuration, is implemented by joint services that are layered
   on top of these device specific services without having to implement them
   specifically.
  </para>
  <para>
   The wicked framework implements these two aspects by using a variety of dbus
   services, which get attached to a network interface depending on its type.
   Here is a rough overview of the current object hierarchy in wicked.
  </para>
  <para>
   Each network interface is represented via a child object of
   <systemitem>/org/opensuse/Network/Interfaces</systemitem>. The name of the
   child object is given by its ifindex. For example, the loopback interface,
   which usually gets ifindex 1, is
   <systemitem>/org/opensuse/Network/Interfaces/1</systemitem>, the first
   Ethernet interface registered is
   <systemitem>/org/opensuse/Network/Interfaces/2</systemitem>.
  </para>
  <para>
   Each network interface has a <quote>class</quote> associated with it, which
   is used to select the dbus interfaces it supports. By default, each network
   interface is of class <literal>netif</literal>, and
   <systemitem
    class="daemon">wickedd</systemitem> will automatically
   attach all interfaces compatible with this class. In the current
   implementation, this includes the following interfaces:
  </para>
  <variablelist>
   <varlistentry>
    <term>org.opensuse.Network.Interface</term>
    <listitem>
     <para>
      Generic network interface functions, such as taking the link up or down,
      assigning an MTU, etc.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>org.opensuse.Network.Addrconf.ipv4.dhcp</term>
    <term>org.opensuse.Network.Addrconf.ipv6.dhcp</term>
    <term>org.opensuse.Network.Addrconf.ipv4.auto</term>
<!-- not jet implemented
    <term>org.opensuse.Network.Addrconf.ipv6.auto</term>
    -->
    <listitem>
     <para>
      Address configuration services for DHCP,
<!-- IPv6 autoconf, -->
      IPv4 zeroconf, etc.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   Beyond this, network interfaces may require or offer special configuration
   mechanisms. For an Ethernet device, for example, you should be able to
   control the link speed, offloading of checksumming, etc. To achieve this,
   Ethernet devices have a class of their own, called
   <literal>netif-ethernet</literal>, which is a subclass of
   <literal>netif</literal>. As a consequence, the dbus interfaces assigned to
   an Ethernet interface include all the services listed above, plus the
   <systemitem>org.opensuse.Network.Ethernet</systemitem> service available only to objects belonging to the <literal>netif-ethernet</literal>
   class.
  </para>
  <para>
   Similarly, there exist classes for interface types like bridges, VLANs,
   bonds, or infinibands.
  </para>
  <para>
   How do you interact with an interface like VLAN (which is really a virtual network interface that
   sits on top of an Ethernet device) that needs to be created
   first? For this, wicked defines factory
   interfaces, such as
   <systemitem>org.opensuse.Network.VLAN.Factory</systemitem>. Such a factory
   interface offers a single function that lets you create an interface of the
   requested type. These factory interfaces are attached to the
   <systemitem>/org/opensuse/Network/Interfaces</systemitem> list node.
  </para>
  <sect3 xml:id="sec.network.manconf.supported">
   <title><literal>wicked</literal> Architecture and Features</title>
   <para>
    The <literal>wicked</literal> service comprises several parts as depicted
    in <xref linkend="wicked.architecture"/>.
   </para>
   <figure xml:id="wicked.architecture">
    <title><literal>wicked</literal> architecture</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="wicked_scheme.png" format="PNG"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="wicked_scheme.png" format="PNG" width="80%"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    <literal>wicked</literal> currently supports the following:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Configuration file back-ends to parse SUSE style
      <filename>/etc/sysconfig/network</filename> files.
     </para>
    </listitem>
    <listitem>
     <para>
      An internal configuration back-end to represent network interface
      configuration in XML.
<!--
      according to mt, that's nowerdays misleading:
      -->
<!-- The syntax evolved out of what netcf uses. -->
     </para>
    </listitem>
    <listitem>
     <para>
      Bring up and shutdown of <quote>normal</quote> network interfaces such as
      Ethernet or InfiniBand, VLAN, bridge, bonds, tun, tap, dummy, macvlan,
      macvtap, hsi, qeth, iucv, and wireless (currently limited to one
      wpa-psk/eap network) devices.
     </para>
    </listitem>
    <listitem>
     <para>
      A built-in DHCPv4 client and a built-in DHCPv6 client.
     </para>
    </listitem>
    <listitem>
     <para>
      The nanny daemon (enabled by default) helps to automatically bring up
      configured interfaces when the device is available (interface
      hotplugging) and set up the IP configuration when a link (carrier) is
      detected. See <xref linkend="sec.network.manconf.using_nanny"/> for more
      information.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>wicked</literal> was implemented as a group of DBus services
      that are integrated with systemd. So the usual
      <command>systemctl</command> commands will apply to
      <literal>wicked</literal>.
     </para>
    </listitem>
   </itemizedlist>
  </sect3>
  <sect3 xml:id="sec.network.manconf.using_wicked">
   <title>Using <literal>wicked</literal></title>
   <para os="sles;sled">
    On &sle;, <literal>wicked</literal> is running by default. If you want
    to check what is currently enabled and whether it is running, call:
   </para>
   <para>
    On &opensuse; Leap <literal>wicked</literal> is running by default on
    desktop or server hardware. On mobile hardware &nm; is running by
    default. If you want to check what is currently enabled and whether it is
    running, call:
   </para>
<screen>systemctl status network</screen>
   <para>
    If <literal>wicked</literal> is enabled, you will see something along these
    lines:
   </para>
<!-- 2nd line of the output is intentionally indented! -->
<screen>wicked.service - wicked managed network interfaces
    Loaded: loaded (/usr/lib/systemd/system/wicked.service; enabled)
    ...</screen>
   <para>
    In case something different is running (for example, &nm;) and you want to
    switch to <literal>wicked</literal>, first stop what is running and then
    enable <literal>wicked</literal>:
   </para>
<screen>systemctl is-active network &amp;&amp; \
systemctl stop      network
systemctl enable --force wicked</screen>
   <para>
    This enables the wicked services, creates the
    <filename>network.service</filename> to <filename>wicked.service</filename>
    alias link, and starts the network at the next boot.
   </para>
   <para>
    Starting the server process:
   </para>
<screen>systemctl start wickedd</screen>
   <para>
    This starts <command>wickedd</command> (the main server) and associated
    supplicants:
   </para>
<screen>/usr/lib/wicked/bin/wickedd-auto4 --systemd --foreground
/usr/lib/wicked/bin/wickedd-dhcp4 --systemd --foreground
/usr/lib/wicked/bin/wickedd-dhcp6 --systemd --foreground
/usr/sbin/wickedd --systemd --foreground
/usr/sbin/wickedd-nanny --systemd --foreground</screen>
   <para>
    Then bringing up the network:
   </para>
<screen>systemctl start wicked</screen>
   <para>
    Alternatively use the <filename>network.service</filename> alias:
   </para>
<screen>systemctl start network</screen>
   <para>
    These commands are using the default or system configuration sources as
    defined in <filename>/etc/wicked/client.xml</filename>.
   </para>
   <para>
    To enable debugging, set <literal>WICKED_DEBUG</literal> in
    <filename>/etc/sysconfig/network/config</filename>, for example:
   </para>
<screen>WICKED_DEBUG="all"</screen>
   <para>
    Or, to omit some:
   </para>
<screen>WICKED_DEBUG="all,-dbus,-objectmodel,-xpath,-xml"</screen>
   <para>
    Use the client utility to display interface information for all interfaces
    or the interface specified with <replaceable>IFNAME</replaceable>:
   </para>
<screen>wicked show all
wicked show <replaceable>IFNAME</replaceable></screen>
   <para>
    In XML output:
   </para>
<screen>wicked show-xml all
wicked show-xml <replaceable>IFNAME</replaceable></screen>
   <para>
    Bringing up one interface:
   </para>
<screen>wicked ifup eth0
wicked ifup wlan0
...</screen>
   <para>
    Because there is no configuration source specified, the wicked client
    checks its default sources of configuration defined in
    <filename>/etc/wicked/client.xml</filename>:
   </para>
   <orderedlist>
    <listitem>
<!-- yes, the colon (:) is part of the attribution value in
          client.xml -->
     <para>
      <literal>firmware:</literal> iSCSI Boot Firmware Table (iBFT)
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>compat:</literal> <literal>ifcfg</literal>
      files&mdash;implemented for compatibility
     </para>
    </listitem>
   </orderedlist>
   <para>
    Whatever <literal>wicked</literal> gets from those sources for a given
    interface is applied. The intended order of importance is
    <literal>firmware</literal>, then <literal>compat</literal>&mdash;this may
    be changed in the future.
   </para>
<!--
   <para>
    Now let's bring up something interesting, for example a sample VLAN
    interface:
   </para>
<screen>wicked ifup -\-ifconfig ./samples/wicked/vlan-static.xml eth0.42</screen>
   <para>
    This should bring up a VLAN interface named <quote>eth0.42</quote>, with
    a VLAN tag of 42, and a few statically assigned IP addresses. To see
    whether it worked, try:
   </para>
<screen>ip addr show
ip route show</screen>
   <para>
    The above command retrieves the description of all interfaces from the
    specified file, and brings up the one named <quote>eth0.42</quote>.
    Because the file contains only one interface, you could have used
    <literal>all</literal> instead of the interface name. As the name
    implies, this brings up all interfaces listed in the file.
   </para>
   <para>
    To bring up a single interface the client executes several server
    methods and arguments from XML elements, telling the server to
    transition the desired interface state to <quote>up</quote>. This
    operation will create the VLAN interface on the fly if it is not yet
    there.
   </para>
   <para>
    Use the analogous approach to bring down the interface:
   </para>
<screen>wicked ifdown eth0.42</screen>
   <para>
    To bring down and delete the interface, use:
   </para>
<screen>wicked ifdown -\-delete -\-ifconfig ./samples/wicked/vlan-static.xml eth0.42</screen>
-->
   <para>
    For more information, see the <command>wicked</command> man page.
   </para>
  </sect3>
  <sect3 xml:id="sec.network.manconf.using_nanny">
   <title>Nanny</title>
   <para>
    Nanny is an event and policy driven daemon that is responsible for
    asynchronous or unsolicited scenarios such as hotplugging devices. Thus the
    nanny daemon helps with starting or restarting delayed or temporarily gone
    devices. Nanny monitors device and link changes, and integrates new devices
    defined by the current policy set. Nanny continues to set up even if
    <command>ifup</command> already exited because of specified timeout
    constraints.
   </para>
   <para>
    By default, the nanny daemon is active on the system. It is enabled in the
    <filename>/etc/wicked/common.xml</filename> configuration file:
   </para>
<screen>&lt;config&gt;
  ...
  &lt;use-nanny&gt;true&lt;/use-nanny&gt;
&lt;/config&gt;</screen>
   <para>
    This setting causes ifup and ifreload to apply a policy with the effective
    configuration to the nanny daemon; then, nanny configures
    <systemitem
    class="daemon">wickedd</systemitem> and thus ensures
    hotplug support. It waits in the background for events or changes (such as
    new devices or carrier on).
   </para>
  </sect3>
<!-- ============================================================== -->
  <sect3 xml:id="sec.network.manconf.multiple">
   <title>Bringing Up Multiple Interfaces</title>
   <para>
    For bonds and bridges, it may make sense to define the entire device
    topology in one file (ifcfg-bondX), and bring it up in one go. wicked then
    can bring up the whole configuration if you specify the top level interface
    names (of the bridge or bond):
   </para>
<screen>wicked ifup br0</screen>
   <para>
    This command automatically sets up the bridge and its dependencies in the
    appropriate order without the need to list the dependencies (ports, etc.)
    separately.
   </para>
   <para>
    To bring up multiple interfaces in one command:
   </para>
<screen>wicked ifup bond0 br0 br1 br2</screen>
   <para>
    Or also all interfaces:
   </para>
<screen>wicked ifup all</screen>
  </sect3>
<!-- ============================================================== -->
  <sect3 xml:id="sec.network.manconf.tunnel">
   <title>Using Tunnels with Wicked</title>
   <para>
    When you need to use tunnels with Wicked, the <envar>TUNNEL_DEVICE</envar>
    is used for this. It permits to specify an optional device name to bind
    the tunnel to the device. The tunneled packets will only be routed via this
    device.
   </para>
   <para>
    For more information, refer to <command>man 5 ifcfg-tunnel</command>.
   </para>
  </sect3>
<!-- ============================================================== -->
  <sect3 xml:id="sec.network.manconf.incremental">
   <title>Handling Incremental Changes</title>
   <para>
    With <command>wicked</command>, there is no need to actually take down an
    interface to reconfigure it (unless it is required by the kernel). For
    example, to add another IP address or route to a statically configured
    network interface, add the IP address to the interface definition, and do
    another <quote>ifup</quote> operation. The server will try hard to update
    only those settings that have changed. This applies to link-level options
    such as the device MTU or the MAC address, and network-level settings, such
    as addresses, routes, or even the address configuration mode (for example,
    when moving from a static configuration to DHCP).
   </para>
   <para>
    Things get tricky of course with virtual interfaces combining several real
    devices such as bridges or bonds. For bonded devices, it is not possible to
    change certain parameters while the device is up. Doing that will result in
    an error.
   </para>
   <para>
    However, what should still work, is the act of adding or removing the child
    devices of a bond or bridge, or choosing a bond's primary interface.
   </para>
  </sect3>
<!-- ============================================================== -->
  <sect3 xml:id="sec.network.manconf.address_config">
   <title>Wicked Extensions: Address Configuration</title>
   <para>
    <command>wicked</command> is designed to be extensible with shell scripts.
    These extensions can be defined in the <filename>config.xml</filename>
    file.
   </para>
   <para>
    Currently, several classes of extensions are supported:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      link configuration: these are scripts responsible for setting up a
      device's link layer according to the configuration provided by the
      client, and for tearing it down again.
     </para>
    </listitem>
    <listitem>
     <para>
      address configuration: these are scripts responsible for managing a
      device's address configuration. Usually address configuration and DHCP
      are managed by <command>wicked</command> itself, but can be implemented
      by means of extensions.
     </para>
    </listitem>
    <listitem>
     <para>
      firewall extension: these scripts can apply firewall rules.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Typically, extensions have a start and a stop command, an optional
    <quote>pid file</quote>, and a set of environment variables that get passed
    to the script.
   </para>
   <para>
    To illustrate how this is supposed to work, look at a firewall extension
    defined in <filename>etc/server.xml</filename>:
   </para>
<screen>&lt;dbus-service interface="org.opensuse.Network.Firewall"&gt;
 &lt;action name="firewallUp"   command="/etc/wicked/extensions/firewall up"/&gt;
 &lt;action name="firewallDown" command="/etc/wicked/extensions/firewall down"/&gt;

 &lt;!-- default environment for all calls to this extension script --&gt;
 &lt;putenv name="WICKED_OBJECT_PATH" value="$object-path"/&gt;
 &lt;putenv name="WICKED_INTERFACE_NAME" value="$property:name"/&gt;
 &lt;putenv name="WICKED_INTERFACE_INDEX" value="$property:index"/&gt;
&lt;/dbus-service&gt;</screen>
   <para>
    The extension is attached to the
    <tag class="starttag">dbus-service</tag>
    tag and defines commands to execute for the actions of this interface.
    Further, the declaration can define and initialize environment variables
    passed to the actions.
   </para>
  </sect3>
<!-- ============================================================== -->
  <sect3 xml:id="sec.network.manconf.configuration_files">
   <title>Wicked Extensions: Configuration Files</title>
   <para>
    You can extend the handling of configuration files with scripts as well.
    For example, DNS updates from leases are ultimately handled by the
    <filename>extensions/resolver</filename> script, with behavior configured
    in <filename>server.xml</filename>:
   </para>
<screen>&lt;system-updater name="resolver"&gt;
 &lt;action name="backup" command="/etc/wicked/extensions/resolver backup"/&gt;
 &lt;action name="restore" command="/etc/wicked/extensions/resolver restore"/&gt;
 &lt;action name="install" command="/etc/wicked/extensions/resolver install"/&gt;
 &lt;action name="remove" command="/etc/wicked/extensions/resolver remove"/&gt;
&lt;/system-updater&gt;</screen>
   <para>
    When an update arrives in <systemitem>wickedd</systemitem>, the system
    updater routines parse the lease and call the appropriate commands
    (<literal>backup</literal>, <literal>install</literal>, etc.) in the
    resolver script. This in turn configures the DNS settings using
    <command>/sbin/netconfig</command>, or by manually writing
    <filename>/etc/resolv.conf</filename> as a fallback.
   </para>
  </sect3>
 </sect2>

 <xi:include href="net_config_files.xml"/>

 <sect2 xml:id="sec.network.manconf.testing">
  <title>Testing the Configuration</title>
  <para>
   Before you write your configuration to the configuration files, you can test
   it. To set up a test configuration, use the <command>ip</command> command.
   To test the connection, use the <command>ping</command> command.
  </para>
  <para>
   The command <command>ip</command> changes the network configuration directly
   without saving it in the configuration file. Unless you enter your
   configuration in the correct configuration files, the changed network
   configuration is lost on reboot.
  </para>
  <note>
   <title><command>ifconfig</command> and <command>route</command> Are Obsolete</title>
   <para>
    The <command>ifconfig</command> and <command>route</command> tools are
    obsolete. Use <command>ip</command> instead. <command>ifconfig</command>,
    for example, limits interface names to 9 characters.
   </para>
  </note>
  <sect3 xml:id="sec.network.manconf.ip">
   <title>Configuring a Network Interface with <command>ip</command></title>
   <remark>
From: Marius Tomaschewski mt@suse.de&gt;
Subject: Re: Manual Network Config
To: Karl Eichwalder ke@suse.de&gt;
Date: Mon, 24 Aug 2009 14:21:44 +0200

Das ifconfig utility ist obsolete und unterstützt nur Interface-
Namen bis 9 Zeichen, z.B. "foo012345". Die restlichen Zeichen
werden abgeschnitten und nicht angezeigt.
Das "ip" utility unterstützt hingegen die derzeit volle Länge von
15 Zeichen, z.B. "foo012345678901".

Statt "ifconfig" sollte "ip addr" und "ip link" verwendet werden,
um routing zu konfigurieren, sollte nicht "route", sondern "ip route"
verwendendet werden.

...

IMO besser wäre es die Beispiel-Ausgaben von route und ifconfig zu
entfernen und stattdessen Beispiel-Ausgaben von:

"ip link show", "ip addr show",
"ip -4 route show", "ip -6 route show"
(und ggf. auch "ip rule show")

im "Configuring a Network Interface with ip" zu bringen. Eventuell
mit ein Paar Beispielen als eine Art Kurzanleitung, in etwa:

ip link set up dev eth0

ip addr add 192.168.0.100/24 dev eth0
ip addr add 2001:DB8:cafe::dead/64 dev eth0

ip route add 192.168.1.0/24 via 192.168.0.200 dev eth0
ip route add 2001:DB8:cafe:1::/64 via 2001:DB8:cafe::feed dev eth0

ip route add default via 192.168.0.254 dev eth0
ip route add default via 2001:DB8:cafe::beef dev eth0

ip addr show dev eth0
ip -4 route show # dev eth0
ip -6 route show # dev eth0

ip route del 192.168.1.0/24 via 192.168.0.200 dev eth0
ip route del 2001:DB8:cafe:1::/64 via 2001:DB8:cafe::feed dev eth0

ip route del default via 192.168.0.254 dev eth0
ip route del default via 2001:DB8:cafe::beef dev eth0

ip addr del 192.168.0.100/24 dev eth0
ip addr del 2001:DB8:cafe::dead/64 dev eth0

ip link set down dev eth0
</remark>
   <remark>
 ke 2014-05-15: ifconfig and route is removed sind quite some time.
 Maybe, we should add more ip examples as Marius proposes...
</remark>
   <para>
    <command>ip</command> is a tool to show and configure network devices,
    routing, policy routing, and tunnels.
   </para>
   <para>
    <command>ip</command> is a very complex tool. Its common syntax is
    <command>ip</command>&nbsp;<option><replaceable>OPTIONS</replaceable>
    <replaceable>OBJECT</replaceable>
    <replaceable>COMMAND</replaceable></option>. You can work with the
    following objects:
   </para>
   <variablelist>
    <varlistentry>
     <term>link</term>
     <listitem>
      <para>
       This object represents a network device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>address</term>
     <listitem>
      <para>
       This object represents the IP address of device.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>neighbor</term>
     <listitem>
      <para>
       This object represents an ARP or NDISC cache entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>route</term>
     <listitem>
      <para>
       This object represents the routing table entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rule</term>
     <listitem>
      <para>
       This object represents a rule in the routing policy database.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>maddress</term>
     <listitem>
      <para>
       This object represents a multicast address.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>mroute</term>
     <listitem>
      <para>
       This object represents a multicast routing cache entry.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>tunnel</term>
     <listitem>
      <para>
       This object represents a tunnel over IP.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    If no command is given, the default command is used (usually
    <command>list</command>).
   </para>
   <para>
    Change the state of a device with the command <command>ip link
    set</command>&nbsp;<option><replaceable>DEVICE_NAME</replaceable></option>&nbsp;<command/>
    . For example, to deactivate device eth0, enter <command>ip link
    set</command> <option>eth0 down</option>. To activate it again, use
    <command>ip link set</command> <option>eth0 up</option>.
   </para>
   <para>
    After activating a device, you can configure it. To set the IP address, use
    <command>ip addr
    add</command>&nbsp;<option><replaceable>IP_ADDRESS</replaceable> + dev
    <replaceable>DEVICE_NAME</replaceable></option>. For example, to set the
    address of the interface eth0 to 192.168.12.154/30 with standard broadcast
    (option <option>brd</option>), enter <command>ip
    addr</command>&nbsp;<option>add 192.168.12.154/30 brd + dev eth0</option>.
   </para>
   <para>
    To have a working connection, you must also configure the default gateway.
    To set a gateway for your system, enter <command>ip route
    add</command>&nbsp;<option>gateway_ip_address</option>. To translate one IP
    address to another, use <command>nat</command>: <command>ip route add
    nat</command>&nbsp;<option>ip_address</option>&nbsp;<command>via</command>&nbsp;<option>other_ip_address</option>.
   </para>
   <para>
    To display all devices, use <command>ip link ls</command>. To display the
    running interfaces only, use <command>ip link ls up</command>. To print
    interface statistics for a device, enter <command>ip -s link
    ls</command>&nbsp;<option>device_name</option>. To view addresses of your
    devices, enter <command>ip addr</command>. In the output of the <command>ip
    addr</command>, also find information about MAC addresses of your devices.
    To show all routes, use <command>ip route show</command>.
   </para>
   <para>
    For more information about using <command>ip</command>, enter
    <command>ip</command>&nbsp;<option>help</option> or see the
    <systemitem>ip(8)</systemitem> man page. The <option>help</option> option
    is also available for all <command>ip</command> subcommands. If, for
    example, you need help for
    <command>ip</command>&nbsp;<option>addr</option>, enter
    <command>ip</command>&nbsp;<option>addr help</option>. Find the
    <command>ip</command> manual in
    <filename>/usr/share/doc/packages/iproute2/ip-cref.pdf</filename>.
   </para>
  </sect3>
  <sect3 xml:id="sec.network.manconf.testingping">
   <title>Testing a Connection with ping</title>
   <para>
    The <command>ping</command> command is the standard tool for testing
    whether a TCP/IP connection works. It uses the ICMP protocol to send a
    small data packet, ECHO_REQUEST datagram, to the destination host,
    requesting an immediate reply. If this works, <command>ping</command>
    displays a message to that effect. This indicates that the network link is
    functioning.
   </para>
   <para>
    <command>ping</command> does more than only test the function of the
    connection between two computers: it also provides some basic information
    about the quality of the connection. In
    <xref linkend="ex.basicnet.manconf.ping"/>, you can see an example of the
    <command>ping</command> output. The second-to-last line contains
    information about the number of transmitted packets, packet loss, and total
    time of <command>ping</command> running.
   </para>
   <para>
    As the destination, you can use a host name or IP address, for example,
    <command>ping</command>&nbsp;<option>&exampledomain;</option> or
    <command>ping</command>&nbsp;<option>&wwwip;</option>. The program sends
    packets until you press
    <keycombo><keycap function="control"/><keycap>C</keycap></keycombo>.
   </para>
   <para>
    If you only need to check the functionality of the connection, you can
    limit the number of the packets with the <option>-c</option> option. For
    example to limit ping to three packets, enter
    <command>ping</command>&nbsp;<option>-c 3 &exampledomain;</option>.
   </para>
   <example xml:id="ex.basicnet.manconf.ping">
    <title>Output of the Command ping</title>
<screen>ping -c 3 &exampledomain;
PING &exampledomain; (&wwwip;) 56(84) bytes of data.
64 bytes from &exampledomain; (&wwwip;): icmp_seq=1 ttl=49 time=188 ms
64 bytes from &exampledomain; (&wwwip;): icmp_seq=2 ttl=49 time=184 ms
64 bytes from &exampledomain; (&wwwip;): icmp_seq=3 ttl=49 time=183 ms
--- &exampledomain; ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2007ms
rtt min/avg/max/mdev = 183.417/185.447/188.259/2.052 ms</screen>
   </example>
   <para>
    The default interval between two packets is one second. To change the
    interval, ping provides the option <option>-i</option>. For example, to
    increase the ping interval to ten seconds, enter
    <command>ping</command>&nbsp;<option>-i 10 &exampledomain;</option>.
   </para>
   <para>
    In a system with multiple network devices, it is sometimes useful to send
    the ping through a specific interface address. To do so, use the
    <option>-I</option> option with the name of the selected device, for
    example, <command>ping</command>&nbsp;<option>-I wlan1
    &exampledomain;</option>.
   </para>
   <para>
    For more options and information about using ping, enter
    <command>ping</command>&nbsp;<option>-h</option> or see the
    <systemitem>ping (8)</systemitem> man page.
   </para>
   <tip>
    <title>Pinging IPv6 Addresses</title>
    <para>
     For IPv6 addresses use the <command>ping6</command> command. Note, to ping
     link-local addresses, you must specify the interface with
     <option>-I</option>. The following command works, if the address is
     reachable via <literal>eth1</literal>:
    </para>
<screen>ping6 -I eth1 fe80::117:21ff:feda:a425</screen>
   </tip>
  </sect3>
 </sect2>

 <sect2 xml:id="sec.network.manconf.scripts">
  <title>Unit Files and Start-Up Scripts</title>
  <para>
   Apart from the configuration files described above, there are also systemd
   unit files and various scripts that load the network services while the
   machine is booting. These are started when the system is switched to the
   <systemitem>multi-user.target</systemitem> target. Some of these unit files
   and scripts are described in <xref linkend="var.net.start.scripts"/>. For
   more information about <systemitem>systemd</systemitem>, see
   <xref linkend="cha.systemd"/> and for more information about the
   <systemitem>systemd</systemitem> targets, see the man page of
   <systemitem>systemd.special</systemitem> (<command>man
   systemd.special</command>).
  </para>
  <variablelist xml:id="var.net.start.scripts">
   <title>Some Unit Files and Start-Up Scripts for Network Programs</title>
   <varlistentry>
    <term><systemitem>network.target</systemitem>

<!--ix-->
    </term>
    <listitem>
     <para>
      <systemitem>network.target</systemitem> is the systemd target for
      networking, but its mean depends on the settings provided by the system
      administrator.
     </para>
     <para>
      For more information, see
      <link xlink:href="http://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>multi-user.target</systemitem>
    </term>
    <listitem>
     <para>
      <systemitem>multi-user.target</systemitem> is the systemd target for a
      multiuser system with all required network services.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>rpcbind</systemitem>
    </term>
    <listitem>
     <para>
      Starts the rpcbind utility that converts RPC program numbers to universal
      addresses. It is needed for RPC services, such as an NFS server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>ypserv</systemitem>
    </term>
    <listitem>
     <para>
      Starts the NIS server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>ypbind</systemitem>
    </term>
    <listitem>
     <para>
      Starts the NIS client.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/init.d/nfsserver</filename>
    </term>
    <listitem>
     <para>
      Starts the NFS server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/init.d/postfix</filename>
    </term>
    <listitem>
     <para>
      Controls the postfix process.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
<!-- FIXME: consider to add wicked related files. -->
 </sect2>
</sect1>
