<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_images_ignition.xml" version="5.0" xml:id="cha-images-ignition">
  <title>Ignitionを使用した設定</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
    <abstract>
      <para>
        この章では、マシンのセットアップに使用されるIgnitionプロビジョニングツールに関する詳細について説明します。ここでは、マシン定義に使用される必要な設定ファイルの提供方法を学習します。
      </para>
    </abstract>
  </info>
  <sect1 xml:id="sec-about-ignition">
    <title>Ignitionについて</title>

    <para>
      Ignitionは、最初のブート時に仕様に従ってシステムを設定できるプロビジョニングツールです。システムが最初にブートすると、Ignitionは<filename>initramfs</filename>の一部としてロードされ、(USBフラッシュディスク上、またはURLを指定できる)特定のディレクトリ内の設定ファイルを検索します。すべての変更は、カーネルが一時ファイルシステムから実際のルートファイルシステムに切り替わる前に(<literal>switch_root</literal>コマンドが発行される前に)実行されます。
    </para>

    <para>
      Ignitionは、JSON形式の設定ファイルを使用します。ファイルは<filename>config.ign</filename>と呼ばれます。
    </para>
  </sect1>
  <sect1 xml:id="sec-ignition-configuration">
    <title><filename>config.ign</filename></title>

    <para>
      <filename>config.ign</filename>はIgnitionを規定するJSON設定ファイルです。JSONで手動でファイルを作成するか、Fuel Ignitionツール(<link xlink:href="https://opensuse.github.io/fuel-ignition/"/>)を使用して規定の基本セットを生成できます。Fuel Ignitionツールはオプションの完全なセットを提供していないため、ファイルを手動で変更する必要がある場合があることに注意してください。
    </para>

    <para>
      または、人間が理解できるようにするため、YAMLで<filename>config.fcc</filename>ファイルを作成し、そのファイルをJSONにトランスパイルすることもできます。詳細については、<xref linkend="sec-converting-config"/>を参照してください。
    </para>

    <para>
      ベアメタルにインストールする場合、設定ファイル<filename>config.ign</filename>は、<literal>ignition</literal>というラベルの付いた設定メディアの<filename>ignition</filename>サブディレクトリに存在する必要があります。ディレクトリ構造は次のようになる必要があります。
    </para>

<screen>
&lt;root directory&gt;
└── ignition
    └── config.ign

 </screen>

    <para>
      QEMU/KVM仮想マシンを設定する場合は、<command>qemu</command>コマンドの属性として<filename>config.ign</filename>へのパスを提供します。例:
    </para>

<screen>
-fw_cfg name=opt/com.coreos/config,file=<replaceable>PATH_TO_config.ign</replaceable>
 </screen>

    <para>
      <filename>config.ign</filename>には、オブジェクト、文字列、整数、ブール値、オブジェクトのリストなど、さまざまなデータ型が含まれています。仕様の全詳細については、<link xlink:href="https://coreos.github.io/ignition/configuration-v3_3/">Ignition
      specification v3.3.0</link>を参照してください。
    </para>

    <para>
      <literal>version</literal>属性は必須です。SLE Microの場合、その値は<literal>3.3.0</literal>またはそれ以前のバージョンに設定する必要があります。そのように設定しない場合、Ignitionは失敗します。
    </para>

    <para>
      ルートとしてシステムにログインする場合は、少なくとも<systemitem class="username">root</systemitem>のパスワードを含める必要があります。ただし、SSHキーを使用してアクセスを確立することをお勧めします。パスワードを設定する場合は、必ずセキュアなパスワードを使用してください。ランダムに生成されたパスワードを使用する場合は、少なくとも10文字を使用してください。パスワードを手動で作成する場合は、10文字以上を使用し、大文字と小文字、および数字を組み合わせます。
    </para>

    <sect2 xml:id="sec-ignition-examples">
      <title>設定例</title>
      <para>
        このセクションでは、JSONおよびYAML形式のIgnition設定の一般的な例をいくつか示します。YAML形式で設定を作成する場合は、<xref linkend="sec-converting-config"/>で説明されているように、設定をJSONにトランスパイルする必要があります。
      </para>
      <important>
        <title>デフォルトのサブボリューム外のコンテンツの宣言</title>
        <para>
          <xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>の外部でファイルを作成する場合は、<literal>filesystem</literal>属性を使用してディレクトリを定義する必要があることに注意してください。
        </para>
      </important>
      <note>
        <title><literal>version</literal>属性は必須です</title>
        <para>
          バージョン仕様を<filename>config.ign</filename> (バージョン3.3.0以前)にそれぞれ含めます。<filename>config.fcc</filename> (バージョン1.4.0以前)。
        </para>
      </note>
      <sect3 xml:id="sec-ignition-storage">
        <title>ストレージの設定</title>
        <para>
          <literal>storage</literal>属性は、パーティションの設定、RAID、ファイルシステムの定義、ファイルの作成などに使用されます。パーティションを定義するには、<literal>disks</literal>属性を使用します。<literal>filesystem</literal>属性は、パーティションのフォーマット、特定パーティションのマウントポイントの定義に使用されます。<literal>files</literal>属性は、ファイルシステムのファイルの作成に使用できます。先に述べた属性のそれぞれについて、次のセクションで説明します。
        </para>
        <sect4 xml:id="sec-storage-disks">
          <title><literal>disks</literal>属性</title>
          <para>
            <literal>disks</literal>属性は、これらのデバイス上でパーティションを定義できるデバイスのリストです。<literal>disks</literal>属性には、少なくとも1つの<literal>device</literal>属性が含まれている必要があります。その他の属性はオプションです。次の例では、単一の仮想デバイスを使用し、ディスクを4つのパーティションに分けます。
          </para>
<screen>
    {
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "disks": [
            {
                "device": "/dev/vda",
                "wipe_table": true,
                "partitions": [
                    {
                        "label": "root",
                        "number": 1,
                        "type_guid": "4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709"
                    },
                    {
                        "label": "boot",
                        "number": 2,
                        "type_guid": "BC13C2FF-59E6-4262-A352-B275FD6F7172"
                    },
                    {
                        "label": "swap",
                        "number": 3,
                        "type_guid": "0657FD6D-A4AB-43C4-84E5-0933C84B4F4F"
                    },
                    {
                        "label": "home",
                        "number": 4,
                        "type_guid": "933AC7E1-2EB4-4F13-B844-0E14E2AEF915"
                    }
                ]
            }
        ]
    }
}
     </screen>
          <para>
            YAML形式の同じ例:
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  disks:
    - device: "/dev/vda"
      wipeTable: true
      partitions: 
        - label: root
          number: 1
          typeGuid: 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709
        - label: boot
          number: 2
          typeGuid: BC13C2FF-59E6-4262-A352-B275FD6F7172
        - label: swap
          number: 3
          typeGuid: 0657FD6D-A4AB-43C4-84E5-0933C84B4F4F
        - label: home
          number: 4
          typeGuid: 933AC7E1-2EB4-4F13-B844-0E14E2AEF915
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-raid">
          <title><literal>raid</literal>属性</title>
          <para>
            <literal>raid</literal>は、RAIDアレイのリストです。<literal>raid</literal>の次の属性は必須です:
          </para>
          <variablelist>
            <varlistentry>
              <term>level</term>
              <listitem>
                <para>
                  特定のRAIDアレイのレベル(linear、raid0、raid1、raid2、raid3、raid4、raid5、raid6)
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>devices</term>
              <listitem>
                <para>
                  絶対パスで参照されるアレイ内のデバイスのリスト
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>name</term>
              <listitem>
                <para>
                  mdデバイスに使用される名前
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
<screen>
      {
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "raid": [
            {
                "name": "system",
                "level": "raid1",
                "devices": [
                    "/dev/sda",
                    "/dev/sdb"
                ]
            }
        ]
    }
}
     </screen>
          <para>
            YAML形式の同じ例:
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  - raid: data
    name: system
    level: raid1
    devices: "/dev/sda", "/dev/sdb"
      
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-filesystem">
          <title><literal>filesystem</literal>属性</title>
          <para>
            <literal>filesystem</literal>には次の属性が含まれている必要があります:
          </para>
          <variablelist>
            <varlistentry>
              <term>device</term>
              <listitem>
                <para>
                  デバイスへの絶対パス。通常、物理ディスクの場合は<literal>/dev/sda</literal>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>format</term>
              <listitem>
                <para>
                  ファイルシステム形式(btrfs、ext4、xfs、vfatまたはswap)
                </para>
                <note>
                  <para>
                    SLE Microの場合、<literal>root</literal>ファイルシステムはbtrfsにフォーマットされる必要があります。
                  </para>
                </note>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            次の例は、<literal>filesystem</literal>属性の使用方法を示しています。<filename>/opt</filename>ディレクトリは、<literal>/dev/sda1</literal>パーティションにマウントされ、btrfsにフォーマットされます。パーティションテーブルは消去されません。
          </para>
<screen>
{
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "filesystems": [
            {
                "path": "/opt",
                "device": "/dev/sda1",
                "format": "btrfs",
                "wipe_filesystem": false
            }
        ]
    }
}
</screen>
          <para>
            YAML形式の同じ例:
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  filesystems:
    - path: /opt
      device: "/dev/sda1"
      format: btrfs
      wipe_filesystem: false
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-files">
          <title><literal>files</literal>属性</title>
          <para>
            <literal>files</literal>属性を使用して、マシンに任意のファイルを作成できます。<xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>の外部でファイルを作成する場合は、<literal>filesystem</literal>属性を使用してディレクトリを定義する必要があることに注意してください。
          </para>
          <para>
            次の例では、ホスト名が<literal>files</literal>属性を使用して作成されます。ファイル<filename>/etc/hostname</filename>は<emphasis>slemicro-1</emphasis>ホスト名で作成されます。
          </para>
          <note>
            <title>JSONとYAMLの異なる数値システム</title>
            <para>
              JSONでは10進数のシステムを使用しているため、<literal>mode</literal>値はアクセス権の10進数表記です。8進数表記を使用するには、この場合はYAMLを使用します。
            </para>
          </note>
<screen>
{
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "files": [
            {
                "path": "/etc/hostname",
                "mode": 420,
                "overwrite": true,
                "contents": {
                    "inline": "slemicro-1"
                }
            }
        ]
    }
}
</screen>
          <para>
            YAMLの同じ例:
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  files:
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: "slemicro-1"
 </screen>
        </sect4>
        <sect4 xml:id="sec-storage-directories">
          <title><literal>directories</literal>属性</title>
          <para>
            <literal>directories</literal>属性は、ファイルシステムに作成されるディレクトリのリストです。<literal>directories</literal>属性には、少なくとも1つの<literal>path</literal>属性が含まれている必要があります。
          </para>
<screen>
{
    "variant": "fcos",
    "version": "3.3.0",
    "storage": {
        "directories": [
            {
                "path": "/mnt/backup",
                "user": {
                    "name": "tux"
                }
            }
        ]
    }
}
</screen>
          <para>
            YAMLの同じ例:
          </para>
<screen>
variant: fcos
version: 1.4.0
storage:
  directories:
    - path: /mnt/backup
      user: 
       - name: tux    
 </screen>
        </sect4>
      </sect3>
      <sect3 xml:id="sec-ignition-users">
        <title>ユーザ管理</title>
        <para>
          <literal>passwd</literal>属性は、ユーザを追加するために使用されます。システムにログインする場合は、<systemitem class="username">root</systemitem>の作成、<systemitem class="username">root</systemitem>パスワードの設定、および/またはSSHキーのIgnition設定への追加を行います。たとえば、<command>openssl</command>コマンドを使用して、<systemitem class="username">root</systemitem>パスワードをハッシュする必要があります。
        </para>
<screen>
 openssl passwd -6
 </screen>
        <para>
          コマンドは、選択するパスワードのハッシュを作成します。このハッシュを<literal>password_hash</literal>属性の値として使用します。
        </para>
<screen>
variant: fcos
version: 1.0.0
passwd:
  users:
   - name: root
     password_hash: "$6$PfKm6Fv5WbqOvZ0C$g4kByYM.D2B5GCsgluuqDNL87oeXiHqctr6INNNmF75WPGgkLn9O9uVx4iEe3UdbbhaHbTJ1vpZymKWuDIrWI1"
     ssh_authorized_keys: 
       - ssh-rsa long...key user@host
 </screen>
        <para>
          <literal>users</literal>属性には、少なくとも1つの<literal>name</literal>属性が含まれている必要があります。<literal>ssh_authorized_keys</literal>は、ユーザのsshキーのリストです。
        </para>
        <note>
          <title><systemitem class="username">root</systemitem>以外の他のユーザの作成</title>
          <para>
            <systemitem class="username">root</systemitem>以外の他のユーザを作成する場合は、ユーザの<filename>/home</filename>ディレクトリを定義する必要があります。これらのディレクトリは(通常<filename>/home/<replaceable>USER_NAME</replaceable></filename>)デフォルトではマウントされないためです。したがって、<literal>storage</literal>/<literal>filesystem</literal>属性を使用してこれらのディレクトリを宣言します。たとえば、tuxの場合、この例は次のようになります。
          </para>
<screen>
        {
  "ignition": {
    "version": "3.2.0"
  },
  "passwd": {
    "users": [
      {
        "name": "tux",
        "passwordHash": "$2a$10$US9XSqLOqMmGq/OnhlVjPOwuZREh2.iEtlwD5LI7DKgV24NJU.wO6"
      }
    ]
  },
  "storage": {
    "filesystems": [
      {
        "device": "/dev/disk/by-label/ROOT",
        "format": "btrfs",
        "mountOptions": [
          "subvol=/@/home"
        ],
        "path": "/home",
        "wipeFilesystem": false
      }
    ]
  }
}
      </screen>
          <para>
            YAMLの同じ例:
          </para>
<screen>
version: 1.2.0
passwd:
  users:
    - name: tux
      passwordHash: $2a$10$US9XSqLOqMmGq/OnhlVjPOwuZREh2.iEtlwD5LI7DKgV24NJU.wO6
storage:
  filesystems:
    - device: /dev/disk/by-label/ROOT
      format: btrfs
      mountOptions:
        - subvol=/@/home
      path: /home
      wipeFilesystem: false
      </screen>
        </note>
      </sect3>
      <sect3 xml:id="sec-ignition-systemd">
        <title><literal>systemd</literal>サービスの有効化</title>
        <para>
          <literal>systemd</literal>属性で指定して、<systemitem class="daemon">systemd</systemitem>サービスを有効にできます。<literal>name</literal>は、有効にするサービスの正確な名前(サフィックスを含む)である必要があります。
        </para>
<screen>
variant: fcos
version: 1.0.0
systemd:
  units:
  - name: sshd.service
    enabled: true
 </screen>
<screen>
  {
  "ignition": {
    "version": "3.0.0"
  },
  "systemd": {
    "units": [
      {
        "enabled": true,
        "name": "sshd.service"
      }
    ]
  }
}
 </screen>
        <para>
          YAMLの同じ例:
        </para>
<screen>
variant: fcos
version: 1.0.0
systemd:
  units:
  - name: sshd.service
    enabled: true
 </screen>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-converting-config">
      <title>YAML <literal>fcc</literal>ファイルをJSON <literal>ign</literal>に変換する</title>
      <para>
        Ignition設定を人間が理解できるようにするため、2段階設定を使用することができます。最初に、YAMLの設定を<literal>fcc</literal>ファイルとして準備し、この設定をJSONにトランスパイルします。トランスパイルは、<literal>butane</literal>ツールによって実行できます。
      </para>
      <para>
        トランスパイル中に、<literal>butane</literal>はYAMLファイルの構文も検証して、構造内の潜在的なエラーをキャッチします。<literal>butane</literal>ツールの最新バージョンの場合は、次のリポジトリを追加します:
      </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command>  zypper ar -f \
  https://download.opensuse.org/repositories/devel:/kubic:/ignition/<replaceable>DISTRIBUTION</replaceable>/ \
  devel_kubic_ignition
 </screen>
      <para>
        ここで、<replaceable>DISTRIBUTION</replaceable>は、次のいずれかです(ディストリビューションによって異なります):
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>openSUSE_Tumbleweed</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>openSUSE_Leap_$release_number</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>15.a</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        これで、<literal>butane</literal>ツールをインストールできるようになりました。
      </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command>  zypper in butane
 </screen>
      <para>
        次のコマンドを実行して、<literal>butane</literal>を呼び出すことができます。
      </para>
<screen>
<prompt>&gt; </prompt> butane -p -o config.ign config.fcc
 </screen>
      <para>
        各要素の説明
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <filename>config.fcc</filename>は、YAML設定ファイルへのパスです
          </para>
        </listitem>
        <listitem>
          <para>
            <filename>config.ign</filename>は、出力JSON設定ファイルへのパスです
          </para>
        </listitem>
        <listitem>
          <para>
            <option>-p</option>コマンドオプションを使用すると、出力ファイルに改行が追加されるため、読みやすくなります。
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
</chapter>
