<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml"
                 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<?provo dirname="auditquick/"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art-auditquick" xml:lang="en">
<?suse-quickstart color="suse"?>
 <title>Linux Audit Quick Start</title>
 <subtitle>&productname; &productnumber;</subtitle>
 <info>
      <productname>&productname;</productname>
      <productnumber>&productnumber;</productnumber>
      <abstract>
        <para>
    Linux audit allows you to comprehensively log and track access to files,
    directories, system calls and resources. It enables you to monitor your
    system for application misbehavior or code malfunctions. By creating a
    sophisticated set of rules including file watches and system call
    auditing, you can make sure that any violation of your security policies
    is noted and properly addressed.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
      </dm:docmanager>
    </info>
    <?suse-quickstart color="suse"?>
 <para>
  To set up Linux audit on your system, proceed as follows:
 </para>
 <procedure>
  <step>
   <para>
    Stop the default audit daemon with the <command>systemctl stop
    auditd</command> command.
   </para>
  </step>
  <step>
   <para>
    Adjust the system configuration for audit and enable audit.
   </para>
  </step>
  <step>
   <para>
    Configure the audit daemon.
   </para>
  </step>
  <step>
   <para>
    Determine which system components to audit and set up audit rules.
   </para>
  </step>
  <step>
   <para>
    Optionally configure plug-in applications you intend to use with the
    audit dispatcher.
   </para>
  </step>
  <step>
   <para>
    Start the audit daemon after you have completed the configuration of the
    audit system using the <command>systemctl start auditd</command>
    command.
   </para>
  </step>
  <step>
   <para>
    Determine which reports to run and configure these reports.
   </para>
  </step>
  <step>
   <para>
    Analyze the audit logs and reports.
   </para>
  </step>
  <step>
   <para>
    (Optional) Analyze individual system calls with autrace.
   </para>
  </step>
 </procedure>
 <important>
  <title>Users Entitled to Work with Audit</title>
  <para>
   The audit tools, configuration files, and logs are only available to
   &rootuser;. This protects audit from ordinary users of the system. To
   manipulate any aspect of audit, you must be logged in as &rootuser;.
  </para>
 </important>
 <sect1 xml:id="sec-audit-qs-enable">
  <title>Enabling Audit</title>

  <para>
   Your first task for enabling audit is to activate system call auditing,
   since system call auditing capabilities are needed even when you are only
   configuring plain file or directory watches:
  </para>

  <variablelist>
   <varlistentry>
    <term>Enabling System Call Auditing for One Session Only</term>
    <listitem>
     <para>
      Enable with <command>auditctl</command> <option>-e 1</option> and
      disable with <command>auditctl</command> <option>-e 0</option>. These
      settings are valid for the current session only, and do not survive a
      reboot.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Enabling System Call Auditing Permanently</term>
    <listitem>
     <para>
      Permanently enable audit contexts for system calls by changing
      <envar>AUDITD_DISABLE_CONTEXTS</envar> in
      <filename>/etc/sysconfig/auditd</filename> from <literal>yes</literal>
      to <literal>no</literal>. To permanently disable audit contexts for
      system calls, revert this setting to <literal>yes</literal>. This
      configuration will be applied with the next start of the audit daemon.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-audit-qs-conf">
  <title>Configuring Audit</title>

  <para>
   The configuration of the audit daemon is contained in the
   <filename>/etc/audit/auditd.conf</filename> configuration file. The
   default settings as shipped with &productname; should be sufficient
   for most setups.
  </para>

<screen>log_file = /var/log/audit/audit.log
log_format = RAW
log_group = root
priority_boost = 4
flush = INCREMENTAL
freq = 20
num_logs = 4
disp_qos = lossy
dispatcher = /usr/sbin/audispd
name_format = NONE
#name = mydomain
max_log_file = 5
max_log_file_action = ROTATE
space_left = 75
space_left_action = SYSLOG
action_mail_acct = root
admin_space_left = 50
admin_space_left_action = SUSPEND
disk_full_action = SUSPEND
disk_error_action = SUSPEND
#tcp_listen_port =
tcp_listen_queue = 5
#tcp_client_ports = 1024-65535
tcp_client_max_idle = 0</screen>

  <para>
   Most of the settings in this file apply the audit log files and how the
   logging is done. The most important settings apply to the actions the
   daemon should take when encountering certain critical conditions or
   errors (system low on disk space, system out of disk space, or disk
   error) and when to warn the administrator about these conditions. These
   actions are customizable and range from a mere warning in syslog to a
   complete halt of the system. For more information about
   <filename>/etc/audit/auditd.conf</filename>, refer to <emphasis>The Linux
   Audit Framework</emphasis> manual and the manual page of
   <filename>auditd.conf</filename> (<command>man 5 auditd.conf</command>).
  </para>
 </sect1>
 <sect1 xml:id="sec-audit-qs-rules">
  <title>Setting Up Audit Rules</title>

  <para>
   Audit rules are used to specify which components of your system are
   audited. There are three basic types of audit rules:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Basic audit system parameters
    </para>
   </listitem>
   <listitem>
    <para>
     File and directory watches
    </para>
   </listitem>
   <listitem>
    <para>
     System call audits
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Before creating an audit rule set and before rolling it out to your
   system, carefully determine which components to audit. Extensive auditing
   causes a substantial logging load. Make sure that your system provides
   enough disk space to store large audit logs and test your audit rule set
   extensively before rolling it out to production.
  </para>

  <para>
   Audit rules can either be passed to the audit system by the command line
   using <command>auditctl</command> or bundled into a rules file located
   under <filename>/etc/audit/audit.rules</filename> that is read during the
   start of the audit daemon:
  </para>

<screen>
# basic audit system parameters
-D
-b 8192
-f 1
-e 1

# some file and directory watches
-w /var/log/audit/
-w /etc/audit/auditd.conf -p rxwa
-w /etc/audit/audit.rules -p rxwa

-w /etc/passwd -p rwxa
-w /etc/sysconfig/

# an example system call rule
-a entry,always -S umask
</screen>

  <para>
   The basic audit system parameters include a rule to delete any
   preexisting rules (<option>-D</option>) (to avoid clashes with the new
   rules), a rule that sets the number of outstanding audit buffers
   (<option>-b</option>), the failure flag (<option>-f</option>), and the
   enable flag (<option>-e</option>):
  </para>

  <variablelist>
   <varlistentry>
    <term><option>-b</option>
    </term>
    <listitem>
     <para>
      Depending on the audit load of your system, increase or decrease the
      number of outstanding audit buffers. If there are no more buffers
      left, the kernel checks the failure flag for action.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-f</option>
    </term>
    <listitem>
     <para>
      The failure flag controls the kernel's reaction to critical errors.
      Possible values are <literal>0</literal> (silent),
      <literal>1</literal> (printk, print a failure message), and
      <literal>2</literal> (panic, bring the system down&mdash;no clean
      shutdown and risk of data loss or corruption).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-e</option>
    </term>
    <listitem>
     <para>
      If set to <literal>1</literal>, this enables audit and audit contexts
      for system calls. Setting it to <literal>2</literal> does the same,
      but also locks down the configuration. Set to <literal>0</literal>,
      audit is disabled. This flag is used to enable or disable audit
      temporarily.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   File system watches can be added whenever you want to track files or
   directories for unauthorized access. Typical examples would include
   watching the audit configuration and logs and user and security
   databases. Use permission filtering to focus on those system calls
   requesting the permissions in which you are interested:
  </para>

<screen>
-w /etc/audit/audit.rules -p rxwa
</screen>

  <para>
   The <option>-p</option> flag enables permission filtering. This example
   has permission filtering turned on for read, write, execute, and
   attribute change permissions.
  </para>

  <para>
   Note the following limitations to file system watches:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Directory watches produce less verbose logs than exact file watches.
     When in need of detailed file-related records, enable separate file
     watches for all files of interest.
    </para>
   </listitem>
   <listitem>
    <para>
     Path name globbing of any kind is not supported by audit. Always use the
     exact path names.
    </para>
   </listitem>
   <listitem>
    <para>
     Auditing can only be performed on existing files. Any files added while
     the audit daemon is already running are ignored until the audit rule
     set is updated to watch the new files.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Assigning keys to your audit rules helps you to identify any records
   related to this rule in the logs. An example rule plus key:
  </para>

<screen>-w /var/log/audit/ -k LOG_audit
</screen>

  <para>
   The <option>-k</option> option attaches a text string to any event that
   is recorded in the logs because of this rule. Using the
   <command>ausearch</command> log analyzer, you can easily filter for any
   events related to this particular rule.
  </para>

  <para>
   A sample system call audit rule could look like the following:
  </para>

<screen>-a entry,always -S umask
</screen>

  <para>
   This adds the rule to the system call entry list (<option>-a</option>)
   and logs an event whenever this system call is used
   (<option>entry,always</option>). The <option>-S</option> option precedes
   the actual system call, <command>umask</command> in this example. Using
   <option>-F</option>, you could add optional filtering to this rule. For
   more information about audit rules, refer to <emphasis>The Linux Audit
   Framework</emphasis> and the manual page of <command>auditctl</command>
   (<command>auditctl(8)</command>).
  </para>
 </sect1>
 <sect1 xml:id="sec-audit-qs-reps">
  <title>Generating Reports</title>

  <para>
   Every audit event is recorded in the audit log,
   <filename>/var/log/audit/audit.log</filename>. To avoid having to read
   the raw audit log, configure custom audit reports with aureport and run
   them regularly. Use the aureport tool to create various types of reports
   filtering for different fields of the audit records in the log. The
   output of any <command>aureport</command> command is printed in column
   format and can easily be piped to other commands for further processing.
   Because the aureport commands are scriptable, you can easily create
   custom report scripts to run at certain intervals to gather the audit
   information for you.
  </para>

  <variablelist>
   <varlistentry>
    <term><command>aureport</command><option>--summary</option>
    </term>
    <listitem>
     <para>
      Run this report to get a rough overview of the current audit
      statistics (events, logins, processes, etc.). To get detailed
      information about any of the event categories listed, run individual
      reports for the event type.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command><option>--success</option>
    </term>
    <listitem>
     <para>
      Run this report to get statistics of successful events on your system.
      This report includes the same event categories as the summary report.
      To get detailed information for a particular event type, run the
      individual report adding the <option>--success</option> option to
      filter for successful events of this type, for example,
      <command>aureport</command> <option>-f --success</option> to display
      all successful file-related events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command><option>--failed</option>
    </term>
    <listitem>
     <para>
      Run this report to get statistics of failed events on your system.
      This report includes the same event categories as the summary report.
      To get detailed information for a particular event type, run the
      individual report adding the <option>--failed</option> option to
      filter for failed events of this type, such as
      <command>aureport</command> <option>-f --failed</option> to display
      all failed file-related events.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command><option>-l</option>
    </term>
    <listitem>
     <para>
      Run this command to generate a numbered list of all login-related
      events. The report includes date, time, audit ID, host and terminal
      used, name of the executable, success or failure of the
      attempt, and an event ID.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command><option>-p</option>
    </term>
    <listitem>
     <para>
      Run this report to generate a numbered list of all process-related
      events. This command generates a numbered list of all process events
      including date, time, process ID, name of the executable, system call,
      audit ID, and event number.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command><option>-f</option>
    </term>
    <listitem>
     <para>
      Run this report to generate a numbered list of all file-related
      events. This command generates a numbered list of all process events
      including date, time, process ID, name of the executable, system call,
      audit ID and event number.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command><option>-u</option>
    </term>
    <listitem>
     <para>
      Run this report to find out which users are running what executables
      on your system. This command generates a numbered list of all
      user-related events including date, time, audit ID, terminal used,
      host, name of the executable, and an event ID.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Use the <option>-ts</option> and <option>-te</option> (for start time and
   end time) options with any of the above commands to limit your reports to
   a certain time frame. Use the <option>-i</option> option with any of
   these commands to transform numeric entities to human-readable text. The
   following command creates a file report for the time between 8 am and
   5:30 pm on the current day and converts numeric entries to text.
  </para>

<screen><command>aureport</command> <option>-ts 8:00 -te 17:30 -f -i</option></screen>
 </sect1>
 <sect1 xml:id="sec-audit-qs-logs">
  <title>Analyzing Audit Log Files and Reports</title>

  <para>
   While aureport helps you generate custom reports focusing on a certain
   area, ausearch helps you find the detailed log entry of individual
   events:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>ausearch</command><option>-a <replaceable>AUDIT_EVENT_ID</replaceable></option>
    </term>
    <listitem>
     <para>
      Run this search to view all records carrying a particular audit event
      ID. Each audit event message is logged, along with a message ID
      consisting of a UNIX epoch time stamp plus a unique event ID,
      separated by a colon. All events that are logged from one
      application's system call have the same event ID. For example, use
      <command>ausearch</command> <option>-a 1234</option> to display all
      audit events carrying this audit event ID. As one application's system
      call may trigger several events to be logged, you are likely to
      retrieve more than one record from the log.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ausearch</command><option>-ul <replaceable>LOGIN_ID</replaceable></option>
    </term>
    <listitem>
     <para>
      Run this search to view records associated with a particular login
      user ID. It displays any records related to the user login ID
      specified, provided that user had been able to log in successfully.
      For example, use <command>ausearch</command> <option>-ul root</option>
      to list all processes owned by the given login user ID.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ausearch</command><option>-k <replaceable>KEY</replaceable></option>
    </term>
    <listitem>
     <para>
      Run this search to find records that contain a certain key assigned in
      the audit rule set. For example, use <command>ausearch</command>
      <option>-k CFG_etc</option> to display any records containing the
      <literal>CFG_etc</literal> key.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ausearch</command><option>-m <replaceable>MESSAGE_TYPE</replaceable></option>
    </term>
    <listitem>
     <para>
      Run this search to find records related to a particular message type.
      Examples of valid message types include <literal>PATH</literal>,
      <literal>SYSCALL</literal>, <literal>USER_LOGIN</literal>. Invoking
      <command>ausearch</command> <option>-m</option> without a message type
      displays a list of all message types.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ausearch</command><option>-f <replaceable>FILENAME</replaceable></option>
    </term>
    <listitem>
     <para>
      Run this search to find records containing a certain file name. For
      example, run <command>ausearch</command> <option>-f /foo/bar</option>
      for all records related to the <filename>/foo/bar</filename> file.
      Using the file name alone would work as well, but using relative paths
      would not.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ausearch</command><option>-p <replaceable>PROCESS_ID</replaceable></option>
    </term>
    <listitem>
     <para>
      Run this to search for records related to a certain process ID. For
      example, use <command>ausearch</command> <option>-p 13368</option> to
      search for all records related to this process ID.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Use the <option>-ts</option> and <option>-te</option> (start time and end
   time) options with any of these commands to limit your reports to a
   certain time frame. Use the <option>-i</option> option with any of these
   to transform numeric entities to human readable text. The following
   command searches for any file event related to
   <filename>audit.log</filename> that took place any time between 8 am and
   5:30 pm on the current day and converts numeric entries to text.
  </para>

<screen><command>ausearch</command> <option>-ts 8:00 -te 17:30 -f audit.log -i</option></screen>
 </sect1>
 <sect1 xml:id="sec-audit-qs-trace">
  <title>Analyzing Individual System Calls</title>

  <para>
   Perform dedicated audits of individual processes using the autrace
   command. autrace works similarly to the strace command, but gathers
   slightly different information. The output of autrace is written to
   <filename>/var/log/audit/audit.log</filename> and does not look any
   different from the standard audit log entries.
  </para>

  <para>
   When performing an autrace on a process, make sure that any audit rules
   are purged from the queue to avoid having these rules clash with the ones
   that autrace adds. Delete the audit rules with the
   <command>auditctl</command> <option>-D</option> command.
  </para>

<screen>autrace /usr/bin/less /etc/sysconfig/auditd

Waiting to execute: /usr/bin/less
Cleaning up...
No rules
Trace complete. You can locate the records
with 'ausearch -i -p 7642'
</screen>

  <para>
   Always use the full path to the executable with autrace. After the trace
   is complete, autrace provides you with the event ID of the trace, so you
   can analyze the entire data trail with ausearch. To restore the audit
   system to use the audit rule set again, just restart the audit daemon by
   calling <command>systemctl restart auditd</command>.
  </para>
 </sect1>
 <sect1 xml:id="sec-audit-qs-tools">
  <title>Audit Tool Set</title>

  <variablelist>
   <varlistentry>
    <term><command>auditctl</command>
    </term>
    <listitem>
     <para>
      Controls the audit system. Check the audit daemon's status and rule
      set, delete rules, or create new ones.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aureport</command>
    </term>
    <listitem>
     <para>
      Create various types of reports from the audit daemon logs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ausearch</command>
    </term>
    <listitem>
     <para>
      Create custom queries to search the audit daemon logs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>autrace</command>
    </term>
    <listitem>
     <para>
      Add audit rules to trace a process. Similar to
      <command>strace</command>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>auditd</command>
    </term>
    <listitem>
     <para>
      Controls the audit init script.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-audit-qs-files">
  <title>Files</title>

  <variablelist>
   <varlistentry>
    <term><filename>/etc/audit/auditd.conf</filename>
    </term>
    <listitem>
     <para>
      Contains configuration options specific to the audit daemon, such as
      log file location, log rotation, maximum size of the log file, and
      various actions to be taken when the system starts to run low on disk
      space.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/sysconfig/auditd</filename>
    </term>
    <listitem>
     <para>
      Controls configuration aspects of auditd that are not covered in
      <filename>/etc/audit/auditd.conf</filename>, such as the locale to use
      with audit, the use of audit contexts with system calls, and if rules
      and watches should be deleted on shutdown of the system.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/audit/audit.rules</filename>
    </term>
    <listitem>
     <para>
      Controls the rules auditd processes to track system calls and file and
      directory access.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/var/log/audit/audit.log</filename>
    </term>
    <listitem>
     <para>
      The audit log file.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-audit-qs-more">
  <title>For More Information</title>

  <para>
   For a more detailed introduction to the Linux audit framework, refer to
   the <emphasis>The Linux Audit Framework</emphasis> manual that is
   available at
   <phrase os="sles"><link xlink:href="&dsc;/sles-12/html/SLES-all/part-audit.html"/></phrase><phrase os="sled"><link xlink:href="&dsc;/sled-12/12-SP4/html/SLED-all/part-audit.html"/></phrase>.
  </para>
 </sect1>
 <xi:include href="common_copyright_quick.xml"/>
 <xi:include href="common_gfdl1.2_i.xml"/>
</article>
