<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" role="General" 
  xml:id="cha-physical-security"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Physical Security</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <para>
    Physical security should be one of the utmost concerns. Linux production
    servers should be in locked data centers where only people have access
    that have passed security checks. Depending on the environment and
    circumstances, you can also consider boot loader passwords.
   </para>

   <para>
    Additionally, consider questions like:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      Who has direct physical access to the host?
     </para>
    </listitem>
    <listitem>
     <para>
      Of those that do, should they?
     </para>
    </listitem>
    <listitem>
     <para>
      Can the host be protected from tampering and should it be?
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The amount of physical security needed on a particular system depends on
    the situation, and can also vary widely by available funds.
   </para>

   <sect1 xml:id="sec-sec-prot-general-physical-locks">
    <title>System Locks</title>
    <para>
     Most server racks in data centers include a locking feature. Usually this
     will be a hasp/cylinder lock on the front of the rack that allows you to
     turn an included key to a locked or unlocked position – granting or
     denying entry. Cage locks can help prevent someone from tampering or
     stealing devices/media from the servers, or opening the cases and
     directly manipulating/sabotaging the hardware. Preventing system reboots
     or the booting from alternate devices is also important (for example
     CD/DVDs/USB drives/etc.).
    </para>
    <para>
     Some servers also have case locks. These locks can do different things
     according to the designs of the system vendor and construction. Many
     systems are designed to self-disable if attempts are made to open the
     system without unlocking. Others have device covers that will not let you
     plug in or unplug keyboards or mice. While locks are sometimes a useful
     feature, they are usually lower quality and easily defeated by attackers
     with ill intent.
    </para>
  </sect1>
    <sect1 xml:id="sec-sec-prot-general-bios">
   <title>Locking Down the BIOS</title>

   <tip>
    <title>Secure Boot</title>
    <para>
     This section describes only basic methods to secure the boot process. To
     find out about more advanced boot protection using UEFI and the
     secure boot feature, see <xref linkend="sec-uefi-secboot"/>.
    </para>
   </tip>

   <para>
    The BIOS (Basic Input/Output System) or its successor UEFI (Unified
    Extensible Firmware Interface) is the lowest level of software/firmware
    on PC class systems. Other hardware types (&ipseries;, &zseries;) that run
    Linux also have low-level firmware that performs similar functions as the
    PC BIOS. When this document references the BIOS, it usually means BIOS
    and/or UEFI.
    The BIOS dictates system configuration, puts the system into a well
    defined state and provides routines for accessing low-level hardware.
    The BIOS executes the configured Linux boot loader (like &grub;) to
    boot the host.
   </para>

   <para>
    Most BIOS implementations can be configured to prevent unauthorized users
    from manipulating system and boot settings. This is typically done by
    setting a BIOS admin or boot password. The admin password only needs to
    be entered for changing the system configuration but the boot password
    will be required during every normal boot. For most use cases it is
    enough to set an admin password and restrict booting to the built-in
    hard disk. This way an attacker will not be able to simply boot a Linux
    live CD or USB thumb drive, for example. Although this does not provide a
    high level of security (a BIOS can be reset, removed or modified –
    assuming case access), it can be another deterrent.
   </para>

   <para>
    Many BIOS firmwares have various other security related settings. Check
    with the system vendor, the system documentation or examine the BIOS
    during a system boot to find out more.
   </para>

   <important>
    <title>Booting when a BIOS Boot Password Is Set</title>
    <para>
     If a system has been set up with a boot password, the host will not boot
     up unattended (for example in case of a system reboot or power failure).
     This is a trade-off.
    </para>
   </important>
   <important>
    <title>Losing the BIOS Admin Password</title>
    <para>
     Once a system is set up for the first time, the BIOS admin password will
     not be required often. Don't forget the password or you will need to clear
     the BIOS memory via hardware manipulation to get access again.
    </para>
   </important>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-bootloader">
   <title>Security via the Boot Loaders</title>

   <para>
    The Linux boot loader &grub;, which is used by default in &productname;,
    can have a boot passwords set. It also provides a password feature, so
    that only administrators can start the interactive operations (for example
    editing menu entries and entering the command line interface). If a
    password is specified, &grub; will disallow any interactive control until
    you press the key <keycap>C</keycap> and <keycap>E</keycap> and enter a
    correct password.
   </para>

   <para>
    You can refer to the &grub; man page for examples.
   </para>

   <para>
    It is very important to keep in mind that when setting these passwords
    they will need to be remembered! Also, enabling these passwords might
    merely slow an intrusion, not necessarily prevent it. Again, someone could
    boot from a removable device, and mount your root partition. If you are
    using BIOS-level security and a boot loader, it is a good practice to
    disable the ability to boot from removable devices in your computer's
    BIOS, and then also password-protecting the BIOS itself.
   </para>

   <para>
    Also keep in mind that the boot loader configuration files will need to be
    protected by changing their mode to <literal>600</literal> (read/write for
    &rootuser; only), or others will be able to read your passwords or hashes!
   </para>
  </sect1>
  
    <sect1 xml:id="sec-sec-prot-general-retiring">
   <title>Retiring Linux Servers with Sensitive Data</title>

   <para>
<!-- As mentioned in <xref linkend="sec-setup-for-eal-operating-mount"/> -->
    Security policies usually contain some procedures for the treatment of
    storage media that is going to be retired or disposed of. Disk and media
    wipe procedures are frequently prescribed as is complete destruction of
    the media. You can find several free tools on the Internet. A search of
    <quote>dod disk wipe utility</quote> will yield several variants. To
    retire servers with sensitive data, it is important to ensure that data
    cannot be recovered from the hard disks. To ensure that all traces of data
    are removed, a wipe utility&mdash;such as
    <command>scrub</command>&mdash;can be used. Many wipe utilities overwrite
    the data several times. This assures that even sophisticated methods are
    not able to retrieve any parts of the wiped data. Some tools can even be
    operated from a bootable removable device and remove data according to the
    U.S. Department of Defense (DoD) standards. Note that many government
    agencies specify their own standards for data security. Some standards are
    stronger than others, yet may require more time to implement.
   </para>

   <important>
    <title>Wiping Wear Leveling Devices</title>
    <para>
     Some devices, like SSDs, use wear leveling and do not necessarily write
     new data in the same physical locations. Such devices usually provide
     their own erasing functionality.
    </para>
   </important>

   <sect2 xml:id="sec-sec-prot-general-retiring-scrub">
    <title>scrub: Disk Overwrite Utility</title>
    <para>
     <command>scrub</command> overwrites hard disks, files, and other devices
     with repeating patterns intended to make recovering data from these
     devices more difficult. It operates in three basic modes: on a character
     or block device, on a file, or on a directory specified. For more
     information, set the manual page <command>man 1 scrub</command>.
    </para>
    <variablelist>
     <title>Supported Scrub Methods</title>
     <varlistentry>
      <term>nnsa</term>
      <listitem>
       <para>
        4-pass NNSA Policy Letter NAP-14.1-C (XVI-8) for sanitizing removable
        and non-removable hard disks, which requires overwriting all locations
        with a pseudo random pattern twice and then with a known pattern: ran-
        dom(x2), 0x00, verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>dod</term>
      <listitem>
       <para>
        4-pass DoD 5220.22-M section 8-306 procedure (d) for sanitizing
        removable and non-removable rigid disks which requires overwriting all
        addressable locations with a character, its complement, a random
        character, then verify. Note: scrub performs the random pass first to
        make verification easier: random, 0x00, 0xff, verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>bsi</term>
      <listitem>
       <para>
        9-pass method recommended by the German Center of Security in
        Information Technologies
        (<link xlink:href="http://www.bsi.bund.de"/>): 0xff, 0xfe, 0xfd, 0xfb,
        0xf7, 0xef, 0xdf, 0xbf, 0x7f.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>gutmann</term>
      <listitem>
       <para>
        The canonical 35-pass sequence described in Gutmann's paper cited
        below.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>schneier</term>
      <listitem>
       <para>
        7-pass method described by Bruce Schneier in "Applied Cryptography"
        (1996): 0x00, 0xff, random(x5)
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>pfitzner7</term>
      <listitem>
       <para>
        Roy Pfitzner's 7-random-pass method: random(x7).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>pfitzner33</term>
      <listitem>
       <para>
        Roy Pfitzner's 33-random-pass method: random(x33).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>usarmy</term>
      <listitem>
       <para>
        US Army AR380-19 method: 0x00, 0xff, random. (Note: identical to DoD
        522.22-M section 8-306 procedure (e) for sanitizing magnetic core
        memory).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>fillzero</term>
      <listitem>
       <para>
        1-pass pattern: 0x00.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>fillff</term>
      <listitem>
       <para>
        1-pass pattern: 0xff.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>random</term>
      <listitem>
       <para>
        1-pass pattern: random(x1).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>random2</term>
      <listitem>
       <para>
        2-pass pattern: random(x2).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>old</term>
      <listitem>
       <para>
        6-pass pre-version 1.7 scrub method: 0x00, 0xff, 0xaa, 0x00, 0x55,
        verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>fastold</term>
      <listitem>
       <para>
        5-pass pattern: 0x00, 0xff, 0xaa, 0x55, verify.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>custom=string</term>
      <listitem>
       <para>
        1-pass custom pattern. String may contain C-style numerical escapes:
        \nnn (octal) or \xnn (hex).
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
  </sect1>
  
    <sect1 xml:id="sec-sec-prot-general-removable-media">
    <title>Restricting Access to Removable Media</title>
    <para>
     In some environments it is required to restrict access to removable
     media such as USB storage or optical devices. The tools coming with the
     <systemitem>udisks2</systemitem> package help with such a
     configuration.
    </para>

    <procedure>
     <step>
      <para>
       Create a user group whose users will be allowed to mount and eject
       removable devices, for example <replaceable>mmedia_all</replaceable>:
      </para>
<screen>&prompt.sudo;groupadd <replaceable>mmedia_all</replaceable></screen>
     </step>
     <step>
      <para>
       Add a specific user &exampleuser; to the new group:
      </para>
<screen>&prompt.sudo;usermod -a -G <replaceable>mmedia_all</replaceable> &exampleuser;</screen>
     </step>
     <step>
      <para>
       Create the <filename>/etc/polkit-1/rules.d/10-mount.rules</filename>
       file with the following content:
      </para>
<screen>
&prompt.user;cat /etc/polkit-1/rules.d/10-mount.rules
polkit.addRule(function(action, subject) {
 if (action.id =="org.freedesktop.udisks2.eject-media"
  &amp;&amp; subject.isInGroup("<replaceable>mmedia_all</replaceable>")) {
   return polkit.Result.YES;
  }
});

polkit.addRule(function(action, subject) {
 if (action.id =="org.freedesktop.udisks2.filesystem-mount"
  &amp;&amp; subject.isInGroup("<replaceable>mmedia_all</replaceable>")) {
   return polkit.Result.YES;
  }
});
</screen>
      <important>
       <title>Naming of the Rules File</title>
       <para>
        The name of a rules file must start with a digit, otherwise it
        will be ignored.
       </para>
       <para>
        Rules files are processed in alphabetical order. Functions are called
        in the order they were added until one of the functions returns a
        value. Therefore, to add an authorization rule that is processed before
        other rules, put it in a file in /etc/polkit-1/rules.d with a name
        that sorts before other rules files, for example
        <filename>/etc/polkit-1/rules.d/10-mount.rules</filename>. Each function
        should return a value from <literal>polkit.Result</literal>.
       </para>
      </important>
     </step>
     <step>
      <para>
       Restart <systemitem>udisks2</systemitem>:
      </para>
<screen>&prompt.root;systemctl restart udisks2</screen>
     </step>
     <step>
      <para>
       Restart <systemitem>polkit</systemitem>
      </para>
<screen>&prompt.root;systemctl restart polkit</screen>
     </step>
    </procedure>
   </sect1>
  </chapter>