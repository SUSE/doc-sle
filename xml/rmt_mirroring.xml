<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-rmt-mirroring">
<!-- ==================================================================== -->
 <title>Mirroring Repositories on the &rmt; Server</title>
 <info/>
 <para>
  You can mirror the installation and update repositories on the &rmt;
  server. This way, you do not need to download updates on each
  machine, which saves time and bandwidth.
 </para>
 <para>
  In its default configuration, &rmt; mirrors enabled product
  repositories automatically once every night.
 </para>
 <para>
   By default, the mirrored repositories are stored in
   <filename>/var/lib/rmt/public/repo</filename>.
 </para>
 
 <note>
   <title>Change default location of the mirrored repositories</title>
   <para>
     To change the default location of the mirrored repositories,
     point the <filename>/usr/share/rmt/public/repo</filename>
     symbolic link to the desired directory. This can be done using
     the <command>ln -sfn <replaceable>TARGET</replaceable> /usr/share/rmt/public/repo
     </command> command (replace
     <literal>TARGET</literal> with the desired destination). Make
     sure that the target must have read and write permissions for the
     <literal>rmt</literal> user and <literal>nginx</literal> group.
     If you prefer to store mirrored repositories in a different
     directory, or on a different storage device,
   </para>
   </note>
 <para>
  When enabled repositories are fully mirrored, you can register
  your client systems against &rmt; by running <command>SUSEConnect
  --url https://<replaceable>&rmt;_HOSTNAME</replaceable></command> on
  the client machine. After successful registration, the repositories
  from the &rmt; server will be used by Zypper on the client machine.
 </para>
 <important>
  <title>&sls; 11 Clients</title>
  <para>
   &rmt; does not support clients with &sls; versions 11 and below.
  </para>
 </important>
 <sect1 xml:id="sec-rmt-mirroring-credentials">
  <title>Mirroring Credentials</title>

  <para>
   Before you create a local mirror of the &sle; repositories,
   you need appropriate organization credentials. You can obtain the
   credentials from &scc;.
  </para>

  <para>
   To get the credentials from &scc;, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     Visit &scc; at <link xlink:href="http://scc.suse.com"/> and log in.
    </para>
   </step>
   <step>
    <para>
     If you are a member of multiple organizations, select the organization you
     want to work with from the sidebar on the left.
    </para>
   </step>
   <step>
    <para>
     Select <guimenu>Proxies</guimenu> in the top menu.
    </para>
   </step>
   <step>
    <para>
     The credentials are displayed in the top right corner.
    </para>
   </step>
   <step>
    <para>
     To see the password, select the eye symbol.
    </para>
   </step>
  </procedure>

  <para>
   The obtained credentials should be set with the &yast; &rmt; Server
   Configuration module or added directly to the
   <filename>/etc/rmt.conf</filename> file. For more information about the
   <filename>/etc/rmt.conf</filename> file, see
   <xref linkend="sec-rmt-config-rmtconf"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-rmt-mirroring-synchronization">
  <title>Synchronizing Repository Metadata</title>
  <para>
   The local &rmt; database needs to be updated periodically with the
   information downloaded from &scc;. This includes information about
   available products and repositories.
  </para>
  <para>
   The synchronization is done with the &systemd; timer
   <literal>rmt-server-sync.timer</literal>. To view the status, for
   example the next running time, use <command>systemctl status</command>:
  </para>
<screen>&prompt.root;<command>systemctl status rmt-server-sync.timer</command>
● rmt-server-sync.timer - RMT Sync timer
   Loaded: loaded (/usr/lib/systemd/system/rmt-server-sync.timer; enabled; vendor preset: disabled)
   Active: active (waiting) since Fri 2018-06-22 04:22:34 EDT; 2h 34min ago
  Trigger: Sat 2018-06-23 03:53:00 EDT; 20h left

Jun 22 04:22:34 d31 systemd[1]: Started RMT Sync timer.</screen>
  <para>
   To update the &rmt; database manually, use the <command>rmt-cli sync</command>
   command. For details, see <xref linkend="sec-rmt-tools-rmt-cli-sync"/>.
  </para>
 </sect1>

 <sect1 xml:id="sec-rmt-mirroring-mirroring">
  <title>Mirroring Packages</title>
  <para>
   Packages for enabled repositories are mirrored on your &rmt; server.
   Packages are downloaded periodically once a day. But the download
   can also be triggered manually at any time.
  </para>
  <para>
   The periodic mirroring is done by the &systemd; timer
   <literal>rmt-server-mirror.timer</literal>. To show the status, for
   example the next running time, use <command>systemctl
   status</command>:
  </para>
<screen>&prompt.root;<command>systemctl status rmt-server-mirror.timer</command>
● rmt-server-mirror.timer - RMT Mirror timer
   Loaded: loaded (/usr/lib/systemd/system/rmt-server-mirror.timer; enabled; vendor preset: disabled)
   Active: active (waiting) since Fri 2018-06-22 04:22:34 EDT; 2h 34min ago
  Trigger: Sat 2018-06-23 02:17:57 EDT; 19h left

Jun 22 04:22:34 d31 systemd[1]: Started RMT Mirror timer.</screen>
  <para>
   To update the mirrored packages manually, use the <command>rmt-cli
   mirror</command> command. For details, see <xref
   linkend="sec-rmt-tools-rmt-cli-mirror"/>.
  </para>
 </sect1>

 <sect1 xml:id="sec-rmt-mirroring-enable-disable">
  <title>Enabling and Disabling Mirroring of Repositories</title>
  <para>
   Mirroring of repositories can be enabled or disabled individually or by
   stating a product. You can specify one or more repositories or products at
   once. When repositories are enabled, their packages are downloaded and
   updated during the mirroring process. To enable or disable mirroring of
   repositories, you either need the product string or ID, or the repository
   name or ID. In general, enabling or disabling a product is desired, because
   this automatically enables or disables all repositories associated with the
   product.
  </para>
  <sect2 xml:id="sec-rmt-mirroring-enable-disable-product">
   <title>Using Products</title>
   <para>
    To enable or disable all repositories of a product, use the
    <command>rmt-cli products enable
    <replaceable>ID</replaceable></command> and <command>rmt-cli product
    disable <replaceable>ID</replaceable></command> commands. To
    retrieve an ID for a disabled but available product, use the
    <command>rmt-cli products list --all</command> command. To retrieve an
    ID for an enabled product, use the <command>rmt-cli product
    list</command> command.
   </para>
   <para>
    Example:
   </para>
<screen>&prompt.sudo;<command>rmt-cli products list --all</command>
+------+----------------------+---------+--------+--------------+---------------
| ID   | Product              | Version | Arch   | Mirror?      | Last mirrored
+------+----------------------+---------+--------+--------------+---------------
[...]
| 1743 | SUSE Package Hub     | 15      | x86_64 | Don't Mirror |
|      | PackageHub/15/x86_64 |         |        |              |
[...]

&prompt.sudo;<command>rmt-cli products enable 1743</command>
Found product by target 1743: SUSE Package Hub 15 x86_64.
Enabling SUSE Package Hub 15 x86_64:
  SUSE Package Hub 15 x86_64:
    Enabled repository SLE-Module-Packagehub-Subpackages15-Pool.
    Enabled repository SLE-Module-Packagehub-Subpackages15-Updates.
    Enabled repository SUSE-PackageHub-15-Pool.
    Enabled repository SUSE-PackageHub-15-Standard-Pool..

&prompt.sudo;<command>rmt-cli products disable 1743</command>
Found product by target 1743: SUSE Package Hub 15 x86_64.
Disabling SUSE Package Hub 15 x86_64:
  SUSE Package Hub 15 x86_64:
    Disabled repository SLE-Module-Packagehub-Subpackages15-Pool.
    Disabled repository SLE-Module-Packagehub-Subpackages15-Updates.
    Disabled repository SUSE-PackageHub-15-Pool.
    Disabled repository SUSE-PackageHub-15-Standard-Pool.

 To clean up downloaded files, run 'rmt-cli repos clean'</screen>
<tip>
 <title>Enabling and Disabling Multiple Products at Once</title>
 <para>
  To enable or disable multiple products at once, specify a space delimited
  list of their IDs or product strings, for example:
 </para>
<screen>&prompt.sudo;<command>rmt-cli products enable 1743 SLES/15/x86_64 SLES/12</command>
Found product by target 1743: SUSE Package Hub 15 x86_64.
Enabling SUSE Package Hub 15 x86_64:
  SUSE Package Hub 15 x86_64:
    Enabled repository SLE-Module-Packagehub-Subpackages15-Pool.
    Enabled repository SLE-Module-Packagehub-Subpackages15-Updates.
    Enabled repository SUSE-PackageHub-15-Pool.
    Enabled repository SUSE-PackageHub-15-Standard-Pool.
Found product by target SLES/15/x86_64: SUSE Linux Enterprise Server 15 x86_64.
Enabling SUSE Linux Enterprise Server 15 x86_64:
  SUSE Linux Enterprise Server 15 x86_64:
    Enabled repository SLE-Product-SLES15-Pool.
    Enabled repository SLE-Product-SLES15-Updates.
    Enabled repository SLE15-Installer-Updates.
  Basesystem Module 15 x86_64:
    Enabled repository SLE-Module-Basesystem15-Pool.
    Enabled repository SLE-Module-Basesystem15-Updates.
  Server Applications Module 15 x86_64:
    Enabled repository SLE-Module-Server-Applications15-Pool.
    Enabled repository SLE-Module-Server-Applications15-Updates.
Found product by target SLES/12: SUSE Linux Enterprise Server 12 x86_64.
Enabling SUSE Linux Enterprise Server 12 x86_64:
  SUSE Linux Enterprise Server 12 x86_64:
    Enabled repository SLES12-Pool.
    Enabled repository SLES12-Updates.</screen>
</tip>

  </sect2>
  <sect2 xml:id="sec-rmt-mirroring-enable-disable-repository">
   <title>Using Repositories</title>
   <para>
    To enable or disable mirroring of specific repositories, use the
    <command>rmt-cli repos enable
    <replaceable>ID</replaceable></command> and <command>rmt-cli repos
    disable <replaceable>ID</replaceable></command> commands. To
    retrieve an ID for a disabled but available repository, use the
    <command>rmt-cli repos list --all</command> command. To retrieve an
    ID for an enabled repository, use the <command>rmt-cli repos
    list</command> command.
   </para>
   <para>
    Example:
   </para>
<screen>&prompt.sudo;<command>rmt-cli repos list --all</command>
+--------+-------------------------+-------------------------------------------+
| ID     | Name                    | Description                               |
+--------+-------------------------+-------------------------------------------+
[...]
| 3061   | SUSE-PackageHub-15-Pool | SUSE-PackageHub-15-Pool for sle-15-x86_64 |
[...]
+--------+-------------------------+-------------------------------------------+

&prompt.sudo;<command>rmt-cli repos enable 3061</command>
Repository by ID 3061 successfully enabled.

&prompt.sudo;<command>rmt-cli repos disable 3061</command>
Repository by ID 3061 successfully disabled.

To clean up downloaded files, please run 'rmt-cli repos clean'
</screen>
<tip>
 <title>Enabling and Disabling Multiple Repositories at Once</title>
 <para>
  To enable or disable multiple repositories at once, specify a space delimited
  list of their IDs, for example:
 </para>
<screen>&prompt.sudo;<command>rmt-cli repos enable 2526 3263</command>
Repository by ID 2526 successfully enabled.
Repository by ID 3263 successfully enabled.

&prompt.sudo;<command>rmt-cli repos disable 2526 3263</command>
Repository by ID 2526 successfully disabled.
Repository by ID 3263 successfully disabled.

To clean up downloaded files, please run 'rmt-cli repos clean'
</screen>
</tip>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-rmt-mirroring-delete">
  <title>Deleting Mirrored Data</title>
  <para>
   After you disable the mirroring of a repository or product as described in <xref linkend="sec-rmt-mirroring-enable-disable"/>, the mirrored data still remains on your local hard disk. This includes the mirrored RPM packages.
  </para>
  <para>
   To delete disabled repository's data, use the command <command>rmt-cli repos clean</command>. With this command, RMT
   verifies that only enabled repositories are mirrored and provides a way to delete invalid data.
  </para>
  <para>
   Before removing any data, the command lists the affected repositories and requires the user to input "yes" to continue.
  </para>
   <screen>&prompt.sudo;<command>rmt-cli repos clean</command>
RMT found locally mirrored files from the following repositories which are not marked to be mirrored:

SLE-Product-SLES15-Updates for sle-15-x86_64
SLE-Product-SLES15-Pool for sle-15-x86_64
SLE15-Installer-Updates for sle-15-x86_64

Would you like to continue and remove the locally mirrored files of these repositories?
Only 'yes' will be accepted.

Enter a value:  yes

Deleted locally mirrored files from repository 'SLE-Product-SLES15-Updates for sle-15-x86_64'.
Deleted locally mirrored files from repository 'SLE-Product-SLES15-Pool for sle-15-x86_64'.
Deleted locally mirrored files from repository 'SLE15-Installer-Updates for sle-15-x86_64'.

Clean finished. An estimated 157 MB were removed.
   </screen>
  <tip>
   <title>Manually Remove Repository Data</title>
   <para>To delete disabled repository data, manually remove its corresponding directory:</para>
   <screen>&prompt.sudo;<command>rm -r /usr/share/rmt/public/repo/SUSE/Products/<replaceable>PRODUCT</replaceable>/<replaceable>VERSION</replaceable>/<replaceable>ARCHITECTURE</replaceable>/</command></screen>
  </tip>
 </sect1>

 <sect1 xml:id="sec-rmt-mirroring-custom-repository">
  <title>Adding Custom Repositories</title>
  <para>
   You can mirror custom repositories with the &rmt; server. These
   repositories are not provided by the &scc;. Repositories can be
   provided by, for example, the &obs;, third-party vendors, or created
   with <command>createrepo</command>.
  </para>
  <para>
   Custom repositories can either be stand-alone, or you can attach them to
   products. This allows you to connect multiple repositories with one command
   on a client registered to the &rmt; server.
  </para>
  <para>
   The following example procedure illustrates the mirroring of a
   third-party repository.
  </para>
  <procedure>
   <step>
    <para>
     Add the remote repository to the &rmt; server. Replace <replaceable>URL</replaceable> with the URL to the repository.
     Replace <replaceable>NAME</replaceable> with a name of your choice for the repository.
    </para>
    <screen>&prompt.root;<command>rmt-cli repos custom add <replaceable>URL</replaceable> <replaceable>NAME</replaceable></command></screen>
   </step>
   <step>
    <para>
     List all custom repositories to get the ID of the new repository.
    </para>
    <screen>&prompt.root;<command>rmt-cli repos custom list</command></screen>
   </step>
   <step>
    <para>
     Optionally attach the new custom repository to a product. For
     example, if the new custom repository is required by all desktop
     clients, it can be attached to the <literal>&sled;</literal> product.
    </para>
    <screen>&prompt.root;<command>rmt-cli repos custom attach <replaceable>REPOSITORY_ID</replaceable> <replaceable>PRODUCT_ID</replaceable></command></screen>
    <para>
     Replace <replaceable>REPOSITORY_ID</replaceable> with the ID of
     the new custom repository. Replace
     <replaceable>PRODUCT_ID</replaceable> with the ID of a product you
     want the repository to be attached to. If you need to retrieve the
     <replaceable>PRODUCT_ID</replaceable>, use the command
     <command>rmt-cli products list --all</command>.
    </para>
   </step>
   <step>
    <para>
     Enable mirroring of the new custom repository.
    </para>
    <screen>&prompt.root;<command>rmt-cli repos custom enable <replaceable>REPOSITORY_ID</replaceable></command></screen>
   </step>
  </procedure>
  <para>
   To get a list of all available custom repositories commands, see
   <xref linkend="sec-rmt-tools-rmt-cli-repos" />.
  </para>
 </sect1>

 <sect1 xml:id="sec-rmt-mirroring-export-import">
  <title>Exporting and Importing Repositories</title>
  <para>
   &rmt; has built-in functions to import and export data about
   available repositories and the mirrored packages. For example, this
   can be used to speed up the setup of a new &rmt; server by locally
   copying already mirrored RPM packages.
  </para>
  <para>
   Another use case is the <emphasis>offline mode</emphasis>. It allows
   the transfer of data to a disconnected &rmt; server, for example to
   provide updates to computers in an air-gapped network.
  </para>
  <para>
   The following procedure describes the transfer of data and mirrored
   RPMs between two &rmt; servers with a USB drive. The server
   <literal>sun</literal> is connected to the &scc;, while
   <literal>sirius</literal> is a server in an air-gapped network.
  </para>
  <procedure>
   <step>
    <para>
     Log in on the server <literal>sun</literal>.
    </para>
<screen>&prompt.root.sun;<command>rmt-cli sync</command>
&prompt.root.sun;<command>rmt-cli mirror</command></screen>
   </step>
   <step>
    <para>
     Connect a USB drive, assumed to be <filename>/dev/sdb</filename> and mount it, for example in
     <filename>/mnt/external</filename>.
    </para>
    <screen>&prompt.root.sun;<command>mount /dev/sdb1 /mnt/external</command></screen>
   </step>
   <step>
    <substeps>
     <step>
      <para>
       Export the data about available repositories and products.
      </para>
      <screen>&prompt.root.sun;<command>rmt-cli export data /mnt/external/</command></screen>
     </step>
     <step>
      <para>
       Export the list of enabled repositories. The exported file is
       required for exporting the repositories in the next step.
      </para>
      <screen>&prompt.root.sun;<command>rmt-cli export settings /mnt/external/</command></screen>
     </step>
     <step>
      <para>
       Export mirrored RPM packages. Depending on the size of mirrored
       repositories, this can take a long time.
      </para>
      <screen>&prompt.root.sun;<command>rmt-cli export repos /mnt/external/</command></screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Unmount and unplug the disk from <literal>sun</literal> and go to
     <literal>sirius</literal>.
    </para>
    <screen>&prompt.root.sun;<command>umount /mnt/external</command></screen>
   </step>
   <step>
    <para>
     Connect the USB drive to <literal>sirius</literal> and
     mount it in <filename>/mnt/external</filename>.
    </para>
    <screen>&prompt.root.sirius;<command>mount /dev/sdb1 /mnt/external</command></screen>
   </step>
   <step>
    <substeps>
     <step>
      <para>
       Import the meta data about available repositories and products.
      </para>
      <screen>&prompt.root.sirius;<command>rmt-cli import data /mnt/external/</command></screen>
     </step>
     <step>
      <para>
       Import mirrored RPM packages. Depending on the size of mirrored
       repositories, this can take a long time.
      </para>
      <screen>&prompt.root.sirius;<command>rmt-cli import repos /mnt/external/</command></screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Enable repositories as required on the <literal>sirius</literal>.
     For details, see <xref linkend="sec-rmt-mirroring-enable-disable"
     />.
    </para>
   </step>
  </procedure>
  <note>
   <title>Exporting Enabled Settings from Air-Gapped Server</title>
   <para>
    If your air-gapped server (<literal>sirius</literal>) has many
    enabled repositories, or if the enabled repositories change
    frequently, we recommend to export the repository settings from
    this server.
   </para>
   <para>
    The server connected to the &scc; (<literal>sun</literal>) can then import
    the exported settings. This ensures that
    <literal>sun</literal> downloads all data required by
    <literal>sirius</literal>.
   </para>
  </note>
 </sect1>
</chapter>
