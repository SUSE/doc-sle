<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="chap-guestfs" xml:lang="en">
 <title>libguestfs</title>
 <info>
      <abstract>
        <para>
          <xref linkend="gloss-vt-vm"/>s consist of disk images and definition
    files. Manually accessing and manipulating these guest components
    (outside of normal hypervisor processes) is possible, but inherently
    dangerous and risks compromising data integrity. libguestfs is a C
    library and a corresponding set of tools designed for safely accessing and
    modifying <xref linkend="gloss-vt-vm"/> disk images&mdash;outside of normal
    hypervisor processes, but without the risk normally associated with
    manual editing.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-guestfs-intro">
  <title>&vmguest; Manipulation Overview</title>

  <para/>

  <sect2 xml:id="sec-guestfs-intro-risk">
   <title>&vmguest; Manipulation Risk</title>
   <para>
    As disk images and definition files are simply another type of file in a
    Linux environment, it is possible to use many tools to access,
    edit and write to these files. When used correctly, such tools can be an
    important part of guest administration. However, even correct usage of
    these tools is not without risk. Risks that should be considered when
    manually manipulating guest disk images include:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <emphasis>Data Corruption</emphasis>: Concurrently accessing images,
      by the host machine or another node in a cluster, can cause changes to
      be lost or data corruption to occur if virtualization protection
      layers are bypassed.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Security</emphasis>: Mounting disk images as loop devices
      requires root access. While an image is loop mounted, other users and
      processes can potentially access the disk contents.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Administrator Error</emphasis>: Bypassing virtualization
      layers correctly requires advanced understanding of virtual components
      and tools. Failing to isolate the images or failing to clean up
      properly after changes have been made can lead to further problems
      once back in virtualization control.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-guestfs-intro-design">
   <title>libguestfs Design</title>
   <para>
    libguestfs C library has been designed to safely and securely create,
    access and modify virtual machine (&vmguest;) disk images. It also
    provides additional language bindings: for
    <link xlink:href="http://libguestfs.org/guestfs-perl.3.html">Perl</link>,
    <link xlink:href="http://libguestfs.org/guestfs-python.3.html">Python</link>,
    PHP (only for 64-bit machines), and
    <link xlink:href="http://libguestfs.org/guestfs-ruby.3.html">
    Ruby</link>. libguestfs can access &vmguest; disk images without
    needing root and with multiple layers of defense against rogue disk
    images.
   </para>
   <para>
    libguestfs provides many tools designed for accessing and
    modifying &vmguest; disk images and contents. These tools provide
    such capabilities as: viewing and editing files inside guests, scripting
    changes to &vmguest;s, monitoring disk used/free statistics, creating
    guests, doing V2V or P2V migrations, performing backups, cloning &vmguest;s,
    formatting disks, and resizing disks.
   </para>
   <warning>
    <title>Best Practices</title>
    <para>
     You must not use libguestfs tools on live virtual machines. Doing so
     will probably result in disk corruption in the &vmguest;. libguestfs
     tools try to stop you from doing this, but cannot catch all cases.
    </para>
    <para>
     However most command have the <option>--ro</option> (read-only) option.
     With this option, you can attach a command to a live virtual machine.
     The results might be strange or inconsistent at times but you will not
     risk disk corruption.
    </para>
   </warning>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-guestfs-package">
  <title>Package Installation</title>

  <para>
   libguestfs is shipped through 4 packages:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <systemitem class="resource">libguestfs0</systemitem>: which provides
     the main C library
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">guestfs-data</systemitem>: which contains
     the appliance files used when launching images (stored in
     <filename>/usr/lib64/guestfs</filename>)
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">guestfs-tools</systemitem>: the core guestfs
     tools, man pages, and the <filename>/etc/libguestfs-tools.conf</filename>
     configuration file.
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">guestfs-winsupport</systemitem>: provides
     support for Windows file guests in the guestfs tools. This package only
     needs to be installed to handle Windows guests, for example when
     converting a Windows guest to KVM.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   To install guestfs tools on your system run:
  </para>

<screen>&prompt.sudo;zypper in guestfs-tools</screen>
 </sect1>
 <sect1 xml:id="sec-guestfs-tools">
  <title>Guestfs Tools</title>

  <para/>

  <sect2 xml:id="sec-guestfs-tools-intro">
   <title>Modifying Virtual Machines</title>
   <para>
    The set of tools found within the guestfs-tools package is used for
    accessing and modifying virtual machine disk images. This functionality
    is provided through a familiar shell interface with built-in safeguards
    which ensure image integrity. Guestfs tools shells expose all
    capabilities of the guestfs API, and create an appliance on the fly
    using the packages installed on the machine and the files found in
    <filename>/usr/lib64/guestfs</filename>.
   </para>
  </sect2>

  <sect2 xml:id="sec-guestfs-tools-supportedfs">
   <title>Supported File Systems and Disk Images</title>
   <para>
    Guestfs tools support various file systems including:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Ext2, Ext3, Ext4
     </para>
    </listitem>
    <listitem>
     <para>
      Xfs
     </para>
    </listitem>
    <listitem>
     <para>
      Btrfs
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Multiple disk image formats are also supported:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      raw
     </para>
    </listitem>
    <listitem>
     <para>
      qcow2
     </para>
    </listitem>
   </itemizedlist>
   <warning>
    <title>Unsupported File System</title>
    <para>
     Guestfs may also support Windows* file systems (VFAT, NTFS), BSD* and
     Apple* file systems, and other disk image formats (VMDK, VHDX...).
     However, these file systems and disk image formats are unsupported on
     &productname;.
    </para>
   </warning>
  </sect2>

  <sect2 xml:id="sec-guestfs-tools-virt-rescue">
   <title><command>virt-rescue</command></title>
   <para>
    <command>virt-rescue</command> is similar to a rescue CD, but for
    virtual machines, and without the need for a CD. virt-rescue presents
    users with a rescue shell and some simple recovery tools which can be
    used to examine and correct problems within a virtual machine or disk
    image.
   </para>
<screen>&prompt.user;virt-rescue -a sles.qcow2
Welcome to virt-rescue, the libguestfs rescue shell.

Note: The contents of / are the rescue appliance.
You need to mount the guest's partitions under /sysroot
before you can examine them. A helper script for that exists:
mount-rootfs-and-do-chroot.sh /dev/sda2

&gt;&lt;rescue&gt;
[   67.194384] EXT4-fs (sda1): mounting ext3 file system
using the ext4 subsystem
[   67.199292] EXT4-fs (sda1): mounted filesystem with ordered data
mode. Opts: (null)
mount: /dev/sda1 mounted on /sysroot.
mount: /dev bound on /sysroot/dev.
mount: /dev/pts bound on /sysroot/dev/pts.
mount: /proc bound on /sysroot/proc.
mount: /sys bound on /sysroot/sys.
Directory: /root
Thu Jun  5 13:20:51 UTC 2014
(none):~ #
   </screen>
   <para>
    You are now running the &vmguest; in rescue mode:
   </para>
<screen>(none):~ # cat /etc/fstab
devpts  /dev/pts          devpts  mode=0620,gid=5 0 0
proc    /proc             proc    defaults        0 0
sysfs   /sys              sysfs   noauto          0 0
debugfs /sys/kernel/debug debugfs noauto          0 0
usbfs   /proc/bus/usb     usbfs   noauto          0 0
tmpfs   /run              tmpfs   noauto          0 0
/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1 / ext3 defaults 1 1</screen>
  </sect2>

  <sect2 xml:id="sec-guestfs-tools-virt-resize">
   <title><command>virt-resize</command></title>
   <para>
    <command>virt-resize</command> is used to resize a virtual machine disk,
    making it larger or smaller overall, and resizing or deleting any
    partitions contained within.
   </para>
   <procedure xml:id="pro-guestfs-tools-virt-resize">
    <title>Expanding a Disk</title>
    <para>
     Full step-by-step example: How to expand a virtual machine disk
    </para>
    <step>
     <para>
      First, with virtual machine powered off, determine the size of the
      partitions available on this virtual machine:
     </para>
<screen>&prompt.user;virt-filesystems --long --parts --blkdevs -h -a sles.qcow2
Name       Type       MBR  Size  Parent
/dev/sda1  partition  83   16G   /dev/sda
/dev/sda   device     -    16G   -</screen>
    </step>
    <step>
     <para>
      <command>virt-resize</command> cannot do in-place disk
      modifications&mdash;there must be sufficient space to store the
      resized output disk. Use the <command>truncate</command> command to
      create a file of suitable size:
     </para>
<screen>&prompt.user;truncate -s 32G outdisk.img</screen>
    </step>
    <step>
     <para>
      Use <command>virt-resize</command> to resize the disk image.
      <command>virt-resize</command> requires two mandatory parameters for
      the input and output images:
     </para>
<screen>&prompt.user;virt-resize --expand /dev/sda1 sles.qcow2 outdisk.img
Examining sles.qcow2 ...
**********
Summary of changes:

/dev/sda1: This partition will be resized from 16,0G to 32,0G.  The
    filesystem ext3 on /dev/sda1 will be expanded using the 'resize2fs'
    method.

**********
Setting up initial partition table on outdisk.img ...
Copying /dev/sda1 ...
◐ 84%
⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒════════⟧ 00:03
Expanding /dev/sda1 using the 'resize2fs' method ...

Resize operation completed with no errors.  Before deleting the old
disk, carefully check that the resized disk boots and works correctly.</screen>
    </step>
    <step>
     <para>
      Confirm the image was resized properly:
     </para>
<screen>&prompt.user;virt-filesystems --long --parts --blkdevs -h -a outdisk.img
Name       Type       MBR  Size  Parent
/dev/sda1  partition  83   32G   /dev/sda
/dev/sda   device     -    32G   -</screen>
    </step>
    <step>
     <para>
      Bring up the &vmguest; using the new disk image and confirm correct
      operation before deleting the old image.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-guestfs-tools-others">
   <title>Other virt-* Tools</title>
   <para>
    There are guestfs tools to simplify administrative
    tasks&mdash;such as viewing and editing files, or obtaining
    information on the virtual machine.
   </para>
   <sect3 xml:id="sec-guestfs-tools-others-filesystem">
    <title><command>virt-filesystems</command></title>
    <para>
     This tool is used to report information regarding file systems,
     partitions, and logical volumes in a disk image or virtual machine.
    </para>
<screen>&prompt.user;virt-filesystems -l -a sles.qcow2
Name       Type        VFS   Label  Size         Parent
/dev/sda1  filesystem  ext3  -      17178820608  -</screen>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-ls">
    <title><command>virt-ls</command></title>
    <para>
     <command>virt-ls</command> lists file names, file sizes, checksums,
     extended attributes and more from a virtual machine or disk image.
     Multiple directory names can be given, in which case the output from
     each is concatenated. To list directories from a libvirt guest, use the
     <option>-d</option> option to specify the name of the guest. For a disk
     image, use the <option>-a</option> option.
    </para>
    <screen>&prompt.user;virt-ls -h -lR -a sles.qcow2 /var/log/
d 0755        776 /var/log
- 0640          0 /var/log/NetworkManager
- 0644        23K /var/log/Xorg.0.log
- 0644        23K /var/log/Xorg.0.log.old
d 0700        482 /var/log/YaST2
- 0644        512 /var/log/YaST2/_dev_vda
- 0644         59 /var/log/YaST2/arch.info
- 0644        473 /var/log/YaST2/config_diff_2017_05_03.log
- 0644       5.1K /var/log/YaST2/curl_log
- 0644       1.5K /var/log/YaST2/disk_vda.info
- 0644       1.4K /var/log/YaST2/disk_vda.info-1
[...]</screen>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-cat">
    <title><command>virt-cat</command></title>
    <para>
     <command>virt-cat</command> is a command line tool to display the
     contents of a file that exists in the named virtual machine (or disk
     image). Multiple file names can be given, in which case they are
     concatenated together. Each file name must be a full path, starting at
     the root directory (starting with '/').
    </para>
<screen>&prompt.user;virt-cat -a sles.qcow2 /etc/fstab
devpts /dev/pts devpts mode=0620,gid=5 0 0
proc   /proc    proc   defaults        0 0</screen>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-df">
    <title><command>virt-df</command></title>
    <para>
     <command>virt-df</command> is a command line tool to display free space on
     virtual machine file systems. Unlike other tools, it not only displays the
     size of disk allocated to a virtual machine, but can look inside disk
     images to show how much space is actually being used.
    </para>
<screen>&prompt.user;virt-df -a sles.qcow2
Filesystem                           1K-blocks       Used  Available  Use%
sles.qcow2:/dev/sda1                  16381864     520564   15022492  4%</screen>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-edit">
    <title><command>virt-edit</command></title>
    <para>
     <command>virt-edit</command> is a command line tool capable of editing
     files that reside in the named virtual machine (or disk image).
    </para>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-tar">
    <title><command>virt-tar-in/out</command></title>
    <para>
     <command>virt-tar-in</command> unpacks an uncompressed TAR archive into a
     virtual machine disk image or named libvirt domain.
     <command>virt-tar-out</command> packs a virtual machine disk image
     directory into a TAR archive.
    </para>
<screen>&prompt.user;virt-tar-out -a sles.qcow2 /home homes.tar</screen>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-copy">
    <title><command>virt-copy-in/out</command></title>
    <para>
     <command>virt-copy-in</command> copies files and directories from the
     local disk into a virtual machine disk image or named libvirt domain.
     <command>virt-copy-out</command> copies files and directories out of a
     virtual machine disk image or named libvirt domain.
    </para>
<screen>&prompt.user;virt-copy-in -a sles.qcow2 data.tar /tmp/
virt-ls -a sles.qcow2 /tmp/
.ICE-unix
.X11-unix
data.tar</screen>
   </sect3>
   <sect3 xml:id="sec-guestfs-tools-others-log">
    <title><command>virt-log</command></title>
    <para>
     <command>virt-log</command> shows the log files of the named libvirt
     domain, virtual machine or disk image. If the package
     <package>guestfs-winsupport</package> is installed
     it can also show the event log of a Windows virtual machine disk image.
    </para>
    <screen>&prompt.user;virt-log -a windows8.qcow2
<![CDATA[<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<Events>
<Event xmlns="http://schemas.microsoft.com/win/2004/08/events/event"><System><Provider Name="EventLog"></Provider>
<EventID Qualifiers="32768">6011</EventID>
<Level>4</Level>
<Task>0</Task>
<Keywords>0x0080000000000000</Keywords>
<TimeCreated SystemTime="2014-09-12 05:47:21"></TimeCreated>
<EventRecordID>1</EventRecordID>
<Channel>System</Channel>
<Computer>windows-uj49s6b</Computer>
<Security UserID=""></Security>
</System>
<EventData><Data><string>WINDOWS-UJ49S6B</string>
<string>WIN-KG190623QG4</string>
</Data>
<Binary></Binary>
</EventData>
</Event>]]>

...
</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-guestfs-guestfish">
   <title><command>guestfish</command></title>
   <para>
    <command>guestfish</command> is a shell and command line tool for
    examining and modifying virtual machine file systems. It uses libguestfs
    and exposes all of the functionality of the guestfs API.
   </para>
   <para>
    Examples of usage:
   </para>
<screen>&prompt.user;guestfish -a disk.img &lt;&lt;EOF
run
list-filesystems
EOF</screen>
<screen>guestfish

Welcome to guestfish, the guest filesystem shell for
editing virtual machine filesystems and disk images.

Type: 'help' for help on commands
      'man' to read the manual
      'quit' to quit the shell

&gt;&lt;fs&gt; add sles.qcow2
&gt;&lt;fs&gt; run
&gt;&lt;fs&gt; list-filesystems
/dev/sda1: ext3
&gt;&lt;fs&gt; mount /dev/sda1 /
 cat /etc/fstab
devpts  /dev/pts          devpts  mode=0620,gid=5 0 0
proc    /proc             proc    defaults        0 0
sysfs   /sys              sysfs   noauto          0 0
debugfs /sys/kernel/debug debugfs noauto          0 0
usbfs   /proc/bus/usb     usbfs   noauto          0 0
tmpfs   /run              tmpfs   noauto          0 0
/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1 / ext3 defaults 1 1</screen>
  </sect2>

  <sect2 xml:id="sec-guestfs-p2v">
   <title>Converting a Physical Machine into a &kvm; Guest</title>

   <para>
    Libguestfs provides tools to help converting &xen; virtual machines or
    physical machines into &kvm; guests. <phrase os="sles">The &xen; to &kvm;
    conversion scenario is covered by the <xref
    linkend="xen2kvm-migration"/>.</phrase> The following section will
    cover a special use case: converting a bare metal machine into a &kvm; one.
   </para>

   <para>
      Converting a physical machine into a &kvm; one is not yet supported
      in &productname;.  This feature is released as a technology
      preview only.
   </para>

   <para>
    Converting a physical machine requires collecting information about
    it and transmitting this to a conversion server. This is achieved by
    running a live system prepared with <command>virt-p2v</command> and
    <command>kiwi</command> tools on the machine.
   </para>

   <procedure xml:id="pro-guestfs-p2v-kiwi">
    <title>Using virt-p2v</title>
    <step>
     <para>
      Install the needed packages with the command:
     </para>
<screen>&prompt.sudo;zypper in virt-p2v kiwi-desc-isoboot</screen>

     <note>
      <para>
       These steps will document how to create an ISO image to create a
       bootable DVD.  Alternatively, you can create a PXE boot image
       instead; for more information about building PXE images with
       &kiwi;, see <command>man virt-p2v-make-kiwi</command>.
      </para>
     </note>
    </step>

    <step>
     <para>
      Create a &kiwi; configuration:
     </para>

     <screen>&prompt.user;virt-p2v-make-kiwi -o <replaceable>/tmp/p2v.kiwi</replaceable></screen>

     <para>
      The <option>-o</option> defines where to create the &kiwi; configuration.
     </para>
    </step>

    <step>
     <para>
      Edit the <filename>config.xml</filename> file in the generated
      configuration if needed.  For example, in
      <filename>config.xml</filename> adjust the keyboard layout of the
      live system.
     </para>
    </step>

    <step>
     <para>
      Build the ISO image with <command>kiwi</command>:
     </para>

<screen>&prompt.user;kiwi --build <replaceable>/tmp/p2v.kiwi</replaceable><co xml:id="p2v-config"/> \
     -d <replaceable>/tmp/build</replaceable><co xml:id="p2v-target"/> \
     --ignore-repos \
     --add-repo <replaceable>http://URL/TO/SLE/REPOSITORIES</replaceable><co xml:id="p2v-repo"/> \
     --type iso</screen>
     <calloutlist>
      <callout arearefs="p2v-config">
       <para>
        The directory where the &kiwi; configuration was generated in the
        previous step.
       </para>
      </callout>
      <callout arearefs="p2v-target">
       <para>
        The directory where &kiwi; will place the generated ISO image and other
        intermediary build results.
       </para>
      </callout>
      <callout arearefs="p2v-repo">
       <para>
        The URLs to the package repositories as found with
        <command>zypper lr -d</command>.
       </para>

       <para>
        Use one <option>--add-repo</option> parameter per repository.
       </para>
      </callout>
     </calloutlist>
    </step>

    <step>
     <para>
      Burn the ISO on a DVD or a USB stick.  With such a medium, boot
      the machine to be converted.
     </para>
    </step>

    <step>
     <para>
      After the system is started, you will be asked for the connection
      details of the <emphasis>conversion server</emphasis>. This server
      is a machine with the <systemitem
      class="resource">virt-v2v</systemitem> package installed.
     </para>

     <para>
      If the network setup is more complex than a DHCP client, click the
      <guimenu>Configure network</guimenu> button to open the &yast;
      network configuration dialog.
     </para>

     <para>
      Click the <guimenu>Test connection</guimenu> button to allow
      moving to the next page of the wizard.
     </para>
    </step>

    <step>
     <para>
      Select the disks and network interfaces to be converted and define
      the VM data like the amount of allocated CPUs, memory and the
      Virtual Machine name.
     </para>

     <note>
      <para>
       If not defined, the created disk image format will be <emphasis>raw</emphasis>
       by default. This can be changed by entering the desired format in the
       <guimenu>Output format</guimenu> field.
      </para>
     </note>

     <para>
      There are two possibilities to generate the virtual machine:
      either using the <emphasis>local</emphasis> or the
      <emphasis>libvirt</emphasis> output. The first one will place the
      Virtual Machine disk image and configuration in the path defined
      in the <guimenu>Output storage</guimenu> field. These can then be
      used to define a new libvirt-handled guest using
      <command>virsh</command>. The second method will create a new
      libvirt-handled guest with the disk image placed in the pool
      defined in the <guimenu>Output storage</guimenu> field.
     </para>

     <para>
      Click <guimenu>Start conversion</guimenu> to start it.
     </para>
    </step>
   </procedure>
  </sect2>

 </sect1>
 <sect1 xml:id="sec-guestfs-trouble">
  <title>Troubleshooting</title>

  <para/>

  <sect2 xml:id="sec-guestfs-trouble-btrfs">
   <title>Btrfs-related Problems</title>
   <para>
    When using the guestfs tools on an image with Btrfs root partition (the
    default with &productname;) the following error message may be displayed:
   </para>
   <screen>&prompt.user;virt-ls -a /path/to/sles12sp2.qcow2 /
virt-ls: multi-boot operating systems are not supported

If using guestfish '-i' option, remove this option and instead
use the commands 'run' followed by 'list-filesystems'.
You can then mount filesystems you want by hand using the
'mount' or 'mount-ro' command.

If using guestmount '-i', remove this option and choose the
filesystem(s) you want to see by manually adding '-m' option(s).
Use 'virt-filesystems' to see what filesystems are available.

If using other virt tools, multi-boot operating systems won't work
with these tools.  Use the guestfish equivalent commands
(see the virt tool manual page).
</screen>
   <para>
    This is usually caused by the presence of snapshots in the guests. In this
    case guestfs does not know which snapshot to bootstrap. To force the
    use of a snapshot, use the <option>-m</option> parameter as follows:
   </para>
   <screen>&prompt.user;virt-ls -m /dev/sda2:/:subvol=@/.snapshots/2/snapshot -a /path/to/sles12sp2.qcow2 /</screen>
  </sect2>

  <sect2 xml:id="sec-guestfs-trouble-env">
   <title>Environment</title>
   <para>
    When troubleshooting problems within a libguestfs appliance, the
    environment variable <emphasis>LIBGUESTFS_DEBUG=1</emphasis> can be used
    to enable debug messages. To output each command/API call in a format
    that is similar to guestfish commands, use the environment variable
    <emphasis>LIBGUESTFS_TRACE=1</emphasis>.
   </para>
  </sect2>

  <sect2 xml:id="sec-guestfs-trouble-tools">
   <title><command>libguestfs-test-tool</command></title>
   <para>
    <command>libguestfs-test-tool</command> is a test program that checks if
    basic libguestfs functionality is working. It will print a large amount
    of diagnostic messages and details of the guestfs environment, then
    create a test image and try to start it. If it runs to completion
    successfully, the following message should be seen near the end:
   </para>
<screen>===== TEST FINISHED OK =====</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-guestfs-external-doc">
  <title>External References</title>

  <para/>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <link xlink:href="http://libguestfs.org">libguestfs.org</link>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://libguestfs.org/guestfs-faq.1.html">libguestfs
     FAQ</link>
    </para>
   </listitem>
<!--   <listitem>
    <para>
     <ulink url="http://libguestfs.org/guestfs-release-notes.1.html">guestfs
     release notes</ulink>
    </para>
   </listitem> -->
  </itemizedlist>
 </sect1>
</chapter>
