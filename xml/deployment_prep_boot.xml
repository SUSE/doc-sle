<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter version="5.0" role="General" xml:id="cha.deployment.prep_boot"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Preparing the Boot of the Target System</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  &productnamereg; can be installed in different ways. Apart from the usual
  media installation covered in <xref linkend="cha.inst"/>, you can choose
  from various network-based approaches or even take a completely hands-off
  approach to the installation of &productname;.
 </para>
 <para>
  Each method is introduced by means of two short checklists: one listing
  the prerequisites for this method and the other illustrating the basic
  procedure. More detail is then provided for all the techniques used in
  these installation scenarios.
 </para>
 <note>
  <title>Terminology</title>
  <para>
   In the following sections, the system to hold your new &productname;
   installation is called <emphasis>target system</emphasis> or
   <emphasis>installation target</emphasis>. The term
   <emphasis>repository</emphasis> (previously called <quote>installation
   source</quote>) is used for all sources of installation data. This
   includes physical media, such as CD and DVD, and network servers
   distributing the installation data in your network.
  </para>
 </note>
 <para>
  This section covers the configuration tasks needed in complex boot
  scenarios. It contains ready-to-apply configuration examples for DHCP, PXE
  boot, TFTP, and Wake on LAN.
 </para>
 <sect1 xml:id="sec.deployment.prep_boot.dhcp">
  <title>Setting Up a DHCP Server</title>

  <para>
   There are two ways to set up a DHCP server. For &productname;, &yast;
   provides a graphical interface to the process. Users can also manually
   edit the configuration files.<phrase os="sles"> For more information
   about DHCP servers, see also <xref linkend="cha.dhcp"/>.</phrase>
  </para>

  <sect2 xml:id="sec.deployment.prep_boot.dhcp.yast">
   <title>Setting Up a DHCP Server with &yast;</title>
   <para>
    To announce the TFTP server's location to the network clients and
    specify the boot image file the installation target should use, add two
    declarations to your DHCP server configuration.
   </para>
   <procedure xml:id="proc.deployment.prep_boot.dhcp.yast">
    <step>
     <para>
      Log in as &rootuser; to the machine hosting the DHCP server.
     </para>
    </step>
    <step>
     <para>
      Start <menuchoice> <guimenu>&yast;</guimenu> <guimenu>Network
      Services</guimenu> <guimenu>DHCP Server</guimenu></menuchoice>.
     </para>
    </step>
    <step>
     <para>
      Complete the setup wizard for basic DHCP server setup.
     </para>
    </step>
    <step xml:id="st.deployment.prep_boot.dhcp.yast.expert">
     <para>
      Select <guimenu>Expert Settings</guimenu> and select
      <guimenu>Yes</guimenu> when warned about leaving the start-up dialog.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Configured Declarations</guimenu> dialog, select the
      subnet in which the new system should be located and click
      <guimenu>Edit</guimenu>.
     </para>
    </step>
    <step>
     <para>
      In the <guimenu>Subnet Configuration</guimenu> dialog select
      <guimenu>Add</guimenu> to add a new option to the subnet's
      configuration.
     </para>
    </step>
    <step>
     <para>
      Select <option>filename</option> and enter
      <literal>pxelinux.0</literal> as the value.
     </para>
    </step>
    <step>
     <para>
      Add another option (<option>next-server</option>) and set its value to
      the address of the TFTP server.
     </para>
    </step>
    <step>
     <para>
      Select <guimenu>OK</guimenu> and <guimenu>Finish</guimenu> to complete
      the DHCP server configuration.
     </para>
    </step>
   </procedure>
   <para>
    To configure DHCP to provide a static IP address to a specific host,
    enter the <guimenu>Expert Settings</guimenu> of the DHCP server
    configuration module
    (<xref linkend="st.deployment.prep_boot.dhcp.yast.expert" xrefstyle="StepOnPage"/>)
    and add a new declaration of the host type. Add the options
    <option>hardware</option> and <option>fixed-address</option> to this
    host declaration and provide the appropriate values.
   </para>
  </sect2>

  <sect2 xml:id="sec.deployment.prep_boot.dhcp.man">
   <title>Setting Up a DHCP Server Manually</title>
   <para>
    All the DHCP server needs to do, apart from providing automatic address
    allocation to your network clients, is to announce the IP address of the
    TFTP server and the file that needs to be pulled in by the installation
    routines on the target machine.
   </para>
   <procedure xml:id="proc.deployment.prep_boot.dhcp.man">
    <step>
     <para>
      Log in as &rootuser; to the machine hosting the DHCP server.
     </para>
    </step>
    <step>
     <para>
      Append the following lines to a subnet configuration of your DHCP
      server's configuration file located under
      <filename>/etc/dhcpd.conf</filename>:
     </para>
<screen><!--adjust to standard network example-->subnet 192.168.1.0 netmask 255.255.255.0 { 
  range dynamic-bootp 192.168.1.200 192.168.1.228;
  # PXE related settings
  #
  # "next-server" defines the TFTP server that will be used
  next-server <replaceable>ip_tftp_server</replaceable>;
  #
  # "filename" specifies the pxelinux image on the TFTP server
  # the server runs in chroot under /srv/tftpboot
  filename  "pxelinux.0";
}</screen>
     <para>
      Replace
<!--adjust to standard network example-->
      <replaceable>ip_of_the_tftp_server</replaceable> with the actual IP
      address of the TFTP server. For more information about the options
      available in <filename>dhcpd.conf</filename>, refer to the
      <systemitem>dhcpd.conf</systemitem> manual page.
     </para>
    </step>
    <step>
     <para>
      Restart the DHCP server by executing <command>systemctl restart
      dhcpd</command>.
     </para>
    </step>
   </procedure>
   <para>
    If you plan on using SSH for the remote control of a PXE and Wake on LAN
    installation, explicitly specify the IP address DHCP should provide to
    the installation target. To achieve this, modify the above mentioned
    DHCP configuration according to the following example:
   </para>
<screen>group {
  # PXE related settings
  # 
  # "next-server" defines the TFTP server that will be used 
  next-server <replaceable>ip_tftp_server</replaceable>:
  # 
  # "filename" specifies the pxelinux image on the TFTP server 
  # the server runs in chroot under /srv/tftpboot
  filename "pxelinux.0";
  host test {
    hardware ethernet <replaceable>mac_address</replaceable>; 
    fixed-address <replaceable>some_ip_address</replaceable>;
    }
}
</screen>
   <para>
    The host statement introduces the host name of the installation target.
    To bind the host name and IP address to a specific host, you must know
    and specify the system's hardware (MAC) address. Replace all the
    variables used in this example with the actual values that match your
    environment.
   </para>
   <para>
    After restarting the DHCP server, it provides a static IP to the host
    specified, enabling you to connect to the system via SSH.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.tftp">
  <title>Setting Up a TFTP Server</title>

  <para>
   If using a &suse; based installation, you may use &yast; to set up a TFTP
   Server. Alternatively, set it up manually. The TFTP server delivers the
   boot image to the target system after it boots and sends a request for
   it.
  </para>

  <sect2 xml:id="sec.deployment.prep_boot.tftp.yast">
   <title>Setting Up a TFTP Server Using &yast;</title>
   <procedure xml:id="proc.deployment.prep_boot.tftp.yast">
    <step>
     <para>
      Log in as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Start <menuchoice> <guimenu>&yast;</guimenu> <guimenu>Network
      Services</guimenu> <guimenu>TFTP Server</guimenu></menuchoice> and
      install the requested package.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Enable</guimenu> to make sure that the server is
      started and included in the boot routines. No further action from your
      side is required to secure this. xinetd starts tftpd at boot time.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Open Port in Firewall</guimenu> to open the appropriate
      port in the firewall running on your machine. If there is no firewall
      running on your server, this option is not available.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Browse</guimenu> to browse for the boot image
      directory. The default directory <filename>/tftpboot</filename> is
      created and selected automatically.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Finish</guimenu> to apply your settings and start the
      server.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.deployment.prep_boot.tftp.man">
   <title>Setting Up a TFTP Server Manually</title>
   <procedure xml:id="proc.deployment.prep_boot.tftp.man">
    <step>
     <para>
      Log in as &rootuser; and install the packages
      <systemitem>tftp</systemitem> and <systemitem>xinetd</systemitem>.
     </para>
    </step>
    <step>
     <para>
      If unavailable, create <filename>/srv/tftpboot</filename> and
      <filename>/srv/tftpboot/pxelinux.cfg</filename> directories.
     </para>
    </step>
    <step>
     <para>
      Add the appropriate files needed for the boot image as described in
      <xref linkend="sec.deployment.prep_boot.pxe"/>.
     </para>
    </step>
    <step>
     <para>
      Modify the configuration of xinetd located under
      <filename>/etc/xinetd.d</filename> to make sure that the TFTP server
      is started on boot:
     </para>
     <substeps performance="required">
      <step>
       <para>
        If it does not exist, create a file called <filename>tftp</filename>
        under this directory with <command>touch tftp</command>. Then run
        <command>chmod 755 tftp</command>.
       </para>
      </step>
      <step>
       <para>
        Open the file <filename>tftp</filename> and add the following lines:
       </para>
<screen>service tftp 
{ 
        socket_type            = dgram
        protocol               = udp 
        wait                   = yes 
        user                   = root 
        server                 = /usr/sbin/in.tftpd 
        server_args            = -s /srv/tftpboot 
        disable                = no 
}
</screen>
      </step>
      <step>
       <para>
        Save the file and restart xinetd with <command>rcxinetd
        restart</command>.
<!--taroth 2014-03-19: systemd - 
          according to fcrozat, xinetd is *not* managed by  systemd, so let's keep 
          this rc* command for now... <command>systemctl restart
         xinetd</command>-->
       </para>
      </step>
     </substeps>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.pxe">
  <title>Using PXE Boot</title>

  <para>
   Some technical background information and PXE's complete specifications
   are available in the Preboot Execution Environment (PXE) Specification
   (<link xlink:href="http://www.pix.net/software/pxeboot/archive/pxespec.pdf"/>).
  </para>

  <procedure xml:id="proc.deployment.prep_boot.pxe">
   <step>
    <para>
     Change to the directory
     <filename>boot/&lt;architecture&gt;/loader</filename> of your
     installation repository and copy the <filename>linux</filename>,
     <filename>initrd</filename>, <filename>message</filename>,
     <filename>biostest</filename>, and <filename>memtest</filename> files
     to the <filename>/srv/tftpboot</filename> directory by entering the
     following:
    </para>
<screen>cp -a linux initrd message biostest memtest /srv/tftpboot</screen>
   </step>
   <step>
    <para>
     Install the <systemitem>syslinux</systemitem> package directly from
     your installation DVDs with &yast;.
    </para>
   </step>
   <step>
    <para>
     Copy the <filename>/usr/share/syslinux/pxelinux.0</filename> file to
     the <filename>/srv/tftpboot</filename> directory by entering the
     following:
    </para>
<screen>cp -a /usr/share/syslinux/pxelinux.0 /srv/tftpboot
     </screen>
   </step>
   <step>
    <para>
     Change to the directory of your installation repository and copy the
     <filename>isolinux.cfg</filename> file to <filename>
     /srv/tftpboot/pxelinux.cfg/default</filename> by entering the
     following:
    </para>
<screen>cp -a boot/&lt;architecture&gt;/loader/isolinux.cfg /srv/tftpboot/pxelinux.cfg/default
     </screen>
   </step>
   <step>
    <para>
     Edit the <filename>/srv/tftpboot/pxelinux.cfg/default</filename> file
     and remove the lines beginning with <literal>readinfo</literal> and
     <literal>framebuffer</literal>.
    </para>
   </step>
   <step>
    <para>
<!-- bg 2008-10-24: I guess this is not necessary anymore. -->
     Insert the following entries in the append lines of the default
     <option>failsafe</option> and <option>apic</option> labels:
    </para>
    <variablelist>
     <varlistentry>
      <term><option>insmod=<replaceable>kernel module</replaceable></option>
      </term>
      <listitem>
       <para>
        By means of this entry, enter the network Kernel module needed to
        support network installation on the PXE client. Replace
        <replaceable>kernel module</replaceable> with the appropriate module
        name for your network device.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><option>netdevice=<replaceable>interface</replaceable></option>
      </term>
      <listitem>
       <para>
        This entry defines the client's network interface that must be used
        for the network installation. It is only necessary if the client is
        equipped with several network cards and must be adapted accordingly.
        In case of a single network card, this entry can be omitted.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
<!--adjust to standard network example--><option>install=nfs://<replaceable>ip_instserver</replaceable>/<replaceable>path_to_repository</replaceable>/DVD1</option>
      </term>
      <listitem>
       <para>
        This entry defines the NFS server and the repository for the client
        installation. Replace
<!--adjust to standard network example-->
        <replaceable>ip_instserver</replaceable> with the actual IP address
        of your installation server.
        <replaceable>path_to_repository</replaceable> should be replaced
        with the actual path to the repository. HTTP, FTP, or SMB
        repositories are addressed in a similar manner, except for the
        protocol prefix, which should read <literal>http</literal>,
        <literal>ftp</literal>, or <literal>smb</literal>.
       </para>
       <important>
        <title>Adding Boot Options</title>
        <para>
         If you need to pass other boot options to the installation
         routines, such as SSH or VNC boot parameters, append them to the
         <option>install</option> entry. An overview of parameters and some
         examples are given in
         <xref linkend="sec.deployment.remoteinst.bootinst"/>.
        </para>
       </important>
      </listitem>
     </varlistentry>
    </variablelist>
    <tip>
     <title>Changing Kernel and initrd File Names</title>
     <para>
      It is possible to use different file names for Kernel and initrd
      images. This is useful if you want to provide different operating
      systems from the same boot server. However, you should be aware that
      only one dot is permitted in the file names that are provided by TFTP
      for the PXE boot.
     </para>
    </tip>
    <para>
     An example <option>/srv/tftpboot/pxelinux.cfg/default</option> file
     follows. Adjust the protocol prefix for the repository to match your
     network setup and specify your preferred method of connecting to the
     installer by adding the <literal>vnc</literal> and
     <literal>VNCPassword</literal> or the <literal>ssh</literal> and
     <literal>ssh.password</literal> options to the
     <literal>install</literal> entry. The lines separated by
     <literal>\</literal> must be entered as one continuous line without a
     line break and without the <literal>\</literal>.
    </para>
<screen>default harddisk 
        
# default
label linux 
  kernel linux 
  append initrd=initrd ramdisk_size=65536 \
     install=nfs://<replaceable>ip_instserver</replaceable>/<replaceable>path_to_repository</replaceable>/<replaceable>product</replaceable>/DVD1 
	    
# repair
label repair
  kernel linux
  append initrd=initrd splash=silent repair=1 showopts

# rescue 
label rescue 
  kernel linux 
  append initrd=initrd ramdisk_size=65536 rescue=1 

# bios test
label firmware
  kernel linux
  append initrd=biostest,initrd splash=silent install=exec:/bin/run_biostest showopts

#  memory test 
label memtest 
  kernel memtest 

#  hard disk 
label harddisk
  localboot 0

implicit     0 
display      message
prompt       1 
timeout      100</screen>
   </step>
   <step>
    <para>
     Replace
<!--adjust to standard network example-->
     <replaceable>ip_instserver</replaceable> and
     <replaceable>path_to_repository</replaceable> with the values used in
     your setup.
    </para>
    <para>
     The following section serves as a short reference to the PXELINUX
     options used in this setup. Find more information about the options
     available in the documentation of the <systemitem>syslinux</systemitem>
     package located under
     <filename>/usr/share/doc/packages/syslinux/</filename>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.pxeopts">
  <title>PXELINUX Configuration Options</title>

  <para>
   The options listed here are a subset of all the options available for the
   PXELINUX configuration file.
  </para>

  <variablelist>
   <varlistentry>
    <term><option>APPEND <replaceable>options... </replaceable></option>
    </term>
    <listitem>
     <para>
      Add one or more options to the Kernel command line. These are added
      for both automatic and manual boots. The options are added at the very
      beginning of the Kernel command line, usually permitting explicitly
      entered Kernel options to override them.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>APPEND -</option>
    </term>
    <listitem>
     <para>
      Append nothing. <option>APPEND</option> with a single hyphen as
      argument in a <option>LABEL</option> section can be used to override a
      global <option>APPEND</option>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>DEFAULT <replaceable>kernel options</replaceable>...</option>
    </term>
    <listitem>
     <para>
      Sets the default Kernel command line. If PXELINUX boots automatically,
      it acts as if the entries after DEFAULT had been typed in at the boot
      prompt, except the auto option is automatically added, indicating an
      automatic boot.
     </para>
     <para>
      If no configuration file exists or no DEFAULT entry is defined in the
      configuration file, the default is the Kernel name
      <quote>linux</quote> with no options.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- FATE#313283 -->
    <term><option>IFAPPEND <replaceable>FLAG</replaceable></option>
    </term>
    <listitem>
     <para>
      Adds a specific option to the kernel command line depending on the
      <replaceable>FLAG</replaceable> value. The <option>IFAPPEND</option>
      option is available only on PXELINUX. <replaceable>FLAG</replaceable>
      expects a value, described in
      <xref linkend="tab.deployment.boot.pxeopts.ifappend"/>:
     </para>
     <table xml:id="tab.deployment.boot.pxeopts.ifappend">
      <title>Generated and Added Kernel Command Line Options from <option>IFAPPEND</option></title>
      <tgroup cols="2">
       <colspec colwidth="1*"/>
       <colspec colwidth="4*"/>
       <thead>
        <row>
         <entry valign="middle">
          <para>
           Argument
          </para>
         </entry>
         <entry>
          <para>
           Generated Kernel Command Line / Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <option>1</option>
          </para>
         </entry>
         <entry>
<screen>ip=<replaceable>CLIENT_IP</replaceable>:<replaceable>BOOT_SERVER_IP</replaceable>:<replaceable>GW_IP</replaceable>:<replaceable>NETMASK</replaceable></screen>
          <para>
           The placeholders are replaced based on the input from the
           DHCP/BOOTP or PXE boot server.
          </para>
          <para>
           Note, this option is not a substitute for running a DHCP client
           in the booted system. Without regular renewals, the lease
           acquired by the PXE BIOS will expire, making the IP address
           available for reuse by the DHCP server.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <option>2</option>
          </para>
         </entry>
         <entry>
<screen>BOOTIF=<replaceable>MAC_ADDRESS_OF_BOOT_INTERFACE</replaceable></screen>
          <para>
           This option is useful if you want to avoid timeouts when the
           installation server probes one LAN interface after the other
           until it gets a reply from a DHCP server. Using this option
           allows an initrd program to determine from which interface the
           system has been booted. linuxrc reads this option and uses this
           network interface.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <option>4</option>
          </para>
         </entry>
         <entry>
<screen>SYSUUID=<replaceable>SYSTEM_UUID</replaceable></screen>
          <para>
           Adds UUIDs in lowercase hexadecimals, see
           <filename>/usr/share/doc/packages/syslinux/pxelinux.txt</filename>
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>LABEL <replaceable>label</replaceable> KERNEL <replaceable>image</replaceable>
       APPEND <replaceable>options</replaceable>...</option>
    </term>
    <listitem>
     <para>
      Indicates that if <replaceable>label</replaceable> is entered as the
      Kernel to boot, PXELINUX should instead boot
      <replaceable>image</replaceable> and the specified
      <option>APPEND</option> options should be used instead of the ones
      specified in the global section of the file (before the first
      <option>LABEL</option> command). The default for
      <replaceable>image</replaceable> is the same as
      <replaceable>label</replaceable> and, if no <option>APPEND</option> is
      given, the default is to use the global entry (if any). Up to 128
      <option>LABEL</option> entries are permitted.
     </para>
<!-- fs 2014-02-07: The following seems unrelated in this context. Whatsmore,
     Legacy GRUB is no longer shipped with SLE

      <para>
       Note that &grub; uses the following syntax:
      </para>
<screen>title mytitle 
  kernel <replaceable>my_kernel</replaceable><replaceable>my_kernel_options</replaceable> 
  initrd <replaceable>myinitrd</replaceable></screen>
-->
     <para>
      PXELINUX uses the following syntax:
     </para>
<screen>label <replaceable>mylabel</replaceable> 
  kernel <replaceable>mykernel</replaceable> 
  append <replaceable>myoptions</replaceable></screen>
     <para>
      Labels are mangled as if they were file names and they must be unique
      after mangling. For example, the two labels <quote>v2.6.30</quote> and
      <quote>v2.6.31</quote> would not be distinguishable under PXELINUX
      because both mangle to the same DOS file name.
     </para>
     <para>
      The Kernel does not need to be a Linux Kernel; it can be a boot sector
      or a COMBOOT file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>LOCALBOOT <replaceable>type</replaceable></option>
    </term>
    <listitem>
     <para>
      On PXELINUX, specifying <option>LOCALBOOT 0</option> instead of a
      <option>KERNEL</option> option means invoking this particular label
      and causes a local disk boot instead of a Kernel boot.
     </para>
     <informaltable frame="topbot" rowsep="0">
      <tgroup cols="2">
<!--<colspec colnum="1" colname="1" colwidth="20"/>
	<colspec colnum="2" colname="2" colwidth="60"/>-->
       <thead>
        <row>
         <entry colname="1">
          <para>
           Argument
          </para>
         </entry>
         <entry colname="2">
          <para>
           Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry colname="1">
          <para>
           <literal>0</literal>
          </para>
         </entry>
         <entry colname="2">
          <para>
           Perform a normal boot
          </para>
         </entry>
        </row>
        <row>
         <entry colname="1">
          <para>
           <literal>4</literal>
          </para>
         </entry>
         <entry colname="2">
          <para>
           Perform a local boot with the Universal Network Driver Interface
           (UNDI) driver still resident in memory
          </para>
         </entry>
        </row>
        <row>
         <entry colname="1">
          <para>
           <literal>5</literal>
          </para>
         </entry>
         <entry colname="2">
          <para>
           Perform a local boot with the entire PXE stack, including the
           UNDI driver, still resident in memory
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
     <para>
      All other values are undefined. If you do not know what the UNDI or
      PXE stacks are, specify <literal>0</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>TIMEOUT <replaceable>time-out</replaceable></option>
    </term>
    <listitem>
     <para>
      Indicates how long to wait at the boot prompt until booting
      automatically, in units of 1/10 second. The time-out is canceled as
      soon as the user types anything on the keyboard, assuming the user
      will complete the command begun. A time-out of zero disables the
      time-out completely (this is also the default). The maximum possible
      time-out value is 35996 (just less than one hour).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>PROMPT<replaceable> flag_val</replaceable></option>
    </term>
    <listitem>
     <para>
      If <option>flag_val</option> is 0, displays the boot prompt only if
      <keycap function="shift"/> or <keycap function="alt"/> is pressed or
      <keycap>Caps Lock</keycap> or <keycap>Scroll Lock</keycap> is set
      (this is the default). If <option>flag_val</option> is 1, always
      displays the boot prompt.
     </para>
<screen>F2  <replaceable>filename</replaceable>
F1  <replaceable>filename</replaceable> 
..etc... 
F9  <replaceable>filename</replaceable>
F10 <replaceable>filename</replaceable></screen>
     <para>
      Displays the indicated file on the screen when a function key is
      pressed at the boot prompt. This can be used to implement preboot
      online help (presumably for the Kernel command line options). For
      backward compatibility with earlier releases, <keycap>F10</keycap> can
      be also entered as <literal>F0</literal>. Note that there is currently
      no way to bind file names to <keycap>F11</keycap> and
      <keycap>F12</keycap>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.pxeprep">
  <title>Preparing the Target System for PXE Boot</title>

  <para>
   Prepare the system's BIOS for PXE boot by including the PXE option in the
   BIOS boot order.
  </para>

  <warning>
   <title>BIOS Boot Order</title>
   <para>
    Do not place the PXE option ahead of the hard disk boot option in the
    BIOS. Otherwise this system would try to re-install itself every time
    you boot it.
   </para>
  </warning>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.wolprep">
  <title>Preparing the Target System for Wake on LAN</title>

  <para>
   Wake on LAN (WOL) requires the appropriate BIOS option to be enabled
   prior to the installation. Also, note down the MAC address of the target
   system. This data is needed to initiate Wake on LAN.
  </para>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.wol">
  <title>Wake on LAN</title>

  <para>
   Wake on LAN allows a machine to be turned on by a special network packet
   containing the machine's MAC address. Because every machine in the world
   has a unique MAC identifier, you do not need to worry about accidentally
   turning on the wrong machine.
  </para>

  <important>
   <title>Wake on LAN across Different Network Segments</title>
   <para>
    If the controlling machine is not located in the same network segment as
    the installation target that should be awakened, either configure the
    WOL requests to be sent as multicasts or remotely control a machine on
    that network segment to act as the sender of these requests.
   </para>
  </important>

  <para>
   Users of &sls; can use a &yast; module called WOL to easily configure
   Wake on LAN. Users of other versions of &suselinux;-based operating
   systems can use a command line tool.
  </para>
 </sect1>
 <sect1 xml:id="sec.deployment.prep_boot.wolyast">
  <title>Wake on LAN with &yast;</title>

  <procedure xml:id="proc.deployment.prep_boot.wolyast">
   <step>
    <para>
     Log in as &rootuser;.
    </para>
   </step>
   <step>
    <para>
     Start <menuchoice> <guimenu>&yast;</guimenu> <guimenu>Network
     Services</guimenu> <guimenu>WOL</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add</guimenu> and enter the host name and MAC address of
     the target system.
    </para>
   </step>
   <step>
    <para>
     To turn on this machine, select the appropriate entry and click
     <guimenu>Wake up</guimenu>.
    </para>
   </step>
  </procedure>
 </sect1>
</chapter>
