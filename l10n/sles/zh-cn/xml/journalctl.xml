<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="journalctl.xml" version="5.0" xml:id="cha-journalctl"> <title><command>journalctl</command>：查询 <systemitem class="daemon">systemd</systemitem> 日志</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  <systemitem class="daemon">systemd</systemitem> 具有自己的日志记录系统，称作<emphasis>日志</emphasis>。由于所有系统事件都会写入日志，因此不需要运行基于 <systemitem>syslog</systemitem> 的服务。
 </para>
 <para>
  日志本身是 <systemitem class="daemon">systemd</systemitem> 管理的系统服务，全名为 <literal>systemd-journald.service</literal>。它会根据从内核、用户进程、标准输入和系统服务错误收到的日志记录信息，维护结构化的索引日志，并以此方式来收集和储存日志记录数据。<literal>systemd-journald</literal> 服务默认处于启用状态。
 </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl status systemd-journald
systemd-journald.service - Journal Service
   Loaded: loaded (/usr/lib/systemd/system/systemd-journald.service; static)
   Active: active (running) since Mon 2014-05-26 08:36:59 EDT; 3 days ago
     Docs: man:systemd-journald.service(8)
           man:journald.conf(5)
 Main PID: 413 (systemd-journal)
   Status: "Processing requests..."
   CGroup: /system.slice/systemd-journald.service
           └─413 /usr/lib/systemd/systemd-journald
[...]</screen>
 <sect1 xml:id="sec-journalctl-persistent">
  <title>将日志设为永久</title>

  <para>
   默认情况下，日志在 <filename>/run/log/journal/</filename> 中储存日志数据。由于 <filename>/run/</filename> 目录具有易失本性，因此，在重引导时会丢失日志数据。要永久保存日志数据，<filename>/var/log/journal/</filename> 目录必须存在且具有正确的所有权和权限，使 systemd-journald 服务能够储存其数据。<systemitem class="daemon">systemd</systemitem> 将为您创建该目录，如果您执行以下操作，它将会切换到永久日志记录：
  </para>

  <procedure>
   <step>
    <para>
     以 <systemitem class="username">root</systemitem> 身份打开 <filename>/etc/systemd/journald.conf</filename> 进行编辑。
    </para>
<screen><prompt role="root">root # </prompt>vi /etc/systemd/journald.conf</screen>
   </step>
   <step>
    <para>
     将包含 <literal>Storage=</literal> 的行取消注释，并将它更改为
    </para>
<screen>[...]
[Journal]
Storage=persistent
#Compress=yes
[...]</screen>
   </step>
   <step>
    <para>
     保存该文件，然后重启动 systemd-journald：
    </para>
<screen><prompt role="root">root # </prompt>systemctl restart systemd-journald</screen>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-journalctl-switches">
  <title><command>journalctl</command>：有用开关</title>

  <para>
   本节介绍了一些可用来增强 <command>journalctl</command> 默认行为的常见有用选项。<command>journalctl</command> 手册页 <command>man 1 journalctl</command> 中介绍了所有开关。
  </para>

  <tip>
   <title>与特定可执行文件相关的消息</title>
   <para>
    要显示与特定可执行文件相关的所有日志消息，请指定该可执行文件的完整路径：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl /usr/lib/systemd/systemd</screen>
  </tip>

  <variablelist>
   <varlistentry>
    <term>-f</term>
    <listitem>
     <para>
      仅显示最近的日志消息，另外，在将新的日志项添加到日志时会列显这些新项。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term/>
    <listitem>
     <para>
      列显消息并跳转到日志末尾，以便在页导航中显示最新的项。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-r</term>
    <listitem>
     <para>
      以倒序列显日志消息，让最新的项列在最前面。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-k</term>
    <listitem>
     <para>
      仅显示内核消息。这等效于字段匹配 <literal>_TRANSPORT=kernel</literal>（参见<xref linkend="sec-journalctl-filter-fields"/>）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-u</term>
    <listitem>
     <para>
      仅显示指定 <systemitem class="daemon">systemd</systemitem> 单元的消息。这等效于字段匹配 <literal>_SYSTEMD_UNIT=<replaceable>UNIT</replaceable></literal>（参见 <xref linkend="sec-journalctl-filter-fields"/>）。
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl -u apache2
[...]
Jun 03 10:07:11 pinkiepie systemd[1]: Starting The Apache Webserver...
Jun 03 10:07:12 pinkiepie systemd[1]: Started The Apache Webserver.</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <para/>
 </sect1>
 <sect1 xml:id="sec-journalctl-filter">
  <title>过滤日志输出</title>

  <para>
   如果不结合任何开关调用 <command>journalctl</command>，它将显示日志的整个内容，最旧的项列在最前面。您可按特定的开关和字段过滤输出。
  </para>

  <sect2 xml:id="sec-journalctl-filter-boot">
   <title>根据引导编号过滤</title>
   <para>
    <command>journalctl</command> 可以根据特定的系统引导过滤消息。要列出所有可用引导，请运行
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl --list-boots
-1 097ed2cd99124a2391d2cffab1b566f0 Mon 2014-05-26 08:36:56 EDT—Fri 2014-05-30 05:33:44 EDT
 0 156019a44a774a0bb0148a92df4af81b Fri 2014-05-30 05:34:09 EDT—Fri 2014-05-30 06:15:01 EDT</screen>
   <para>
    第一列列出引导偏移：<literal>0</literal> 表示当前引导，<literal>-1</literal> 表示上一次引导，<literal>-2</literal> 表示再上一次引导，以此类推。第二列包含引导 ID，其后是特定引导的限制时间戳。
   </para>
   <para>
    显示当前引导中的所有消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl -b</screen>
   <para>
    如果需要查看来自前一引导的日志消息，请加一个偏移参数。下面的示例将输出前一引导的消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl -b -1</screen>
   <para>
    另一种方法是根据引导 ID 列出引导消息。要实现此目的，请使用 _BOOT_ID 字段：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _BOOT_ID=156019a44a774a0bb0148a92df4af81b</screen>
  </sect2>

  <sect2 xml:id="sec-journalctl-filter-time">
   <title>根据时间间隔过滤</title>
   <para>
    您可通过指定开始日期和/或结束日期来过滤 <command>journalctl</command> 的输出。日期规范应采用类似于“2014-06-30 9:17:16”的格式。如果省略时间部分，则会假设为午夜。如果省略秒，则会假设为“:00”。如果省略日期部分，则会假设为当日。您也可以不采用数字表示，而是指定关键字“yesterday”、“today”或“tomorrow”。它们表示当日前一天、当日或者当日后一天的午夜。如果指定“now”，则表示当前时间。您还可以指定以 <literal>-</literal> 或 <literal>+</literal> 为前缀的相对时间，分别表示当前时间之前或之后的特定时间。
   </para>
   <para>
    仅显示从现在开始生成的新消息，并持续更新输出：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl --since "now" -f</screen>
   <para>
    显示从昨天午夜到 3:20AM 的所有消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl --since "today" --until "3:20"</screen>
  </sect2>

  <sect2 xml:id="sec-journalctl-filter-fields">
   <title>根据字段过滤</title>
   <para>
    您可以按特定的字段过滤日志输出。要匹配的字段语法为 <literal>FIELD_NAME=MATCHED_VALUE</literal>，例如 <literal>_SYSTEMD_UNIT=httpd.service</literal>。您可以在单个查询中指定多个匹配条件，以进一步过滤输出消息。有关默认字段的列表，请参见 <command>man 7 systemd.journal-fields</command>。
   </para>
   <para>
    显示特定进程 ID 生成的消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _PID=1039</screen>
   <para>
    显示属于特定用户 ID 的消息：
   </para>
<screen># journalctl _UID=1000</screen>
   <para>
    显示来自内核环缓冲区的消息（与 <command>dmesg</command> 的生成结果相同）：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _TRANSPORT=kernel</screen>
   <para>
    显示来自服务的标准输出或错误输出的消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _TRANSPORT=stdout</screen>
   <para>
    仅显示指定服务生成的消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _SYSTEMD_UNIT=avahi-daemon.service</screen>
   <para>
    如果指定了两个不同的字段，则仅显示同时与两个表达式匹配的项：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _SYSTEMD_UNIT=avahi-daemon.service _PID=1488</screen>
   <para>
    如果两个匹配条件引用了相同的字段，则显示与两个表达式中任意一个匹配的所有项：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _SYSTEMD_UNIT=avahi-daemon.service _SYSTEMD_UNIT=dbus.service</screen>
   <para>
    您可以使用“+”分隔符将两个表达式组合成一个逻辑“OR”。以下示例将显示来自进程 ID 为 1480 的 Avahi 服务进程的所有消息，以及来自 D-Bus 服务的所有消息：
   </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl _SYSTEMD_UNIT=avahi-daemon.service _PID=1480 + _SYSTEMD_UNIT=dbus.service</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-journalctl-investigate">
  <title>调查 <systemitem class="daemon">systemd</systemitem> 错误</title>

  <para>
   本节将介绍一个简单的示例，演示如何找出并修复在 <command>apache2</command> 启动期间 <systemitem class="daemon">systemd</systemitem> 报告的错误。
  </para>

  <procedure>
   <step>
    <para>
     尝试启动 apache2 服务：
    </para>
<screen># systemctl start apache2
Job for apache2.service failed. See 'systemctl status apache2' and 'journalctl -xn' for details.</screen>
   </step>
   <step>
    <para>
     我们来看看该服务的状态如何：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl status apache2
apache2.service - The Apache Webserver
   Loaded: loaded (/usr/lib/systemd/system/apache2.service; disabled)
   Active: failed (Result: exit-code) since Tue 2014-06-03 11:08:13 CEST; 7min ago
  Process: 11026 ExecStop=/usr/sbin/start_apache2 -D SYSTEMD -DFOREGROUND \
           -k graceful-stop (code=exited, status=1/FAILURE)</screen>
    <para>
     导致错误的进程 ID 为 11026。
    </para>
   </step>
   <step>
    <para>
     显示与进程 ID 11026 相关的详细消息：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> journalctl -o verbose _PID=11026
[...]
MESSAGE=AH00526: Syntax error on line 6 of /etc/apache2/default-server.conf:
[...]
MESSAGE=Invalid command 'DocumenttRoot', perhaps misspelled or defined by a module
[...]</screen>
   </step>
   <step>
    <para>
     修复 <filename>/etc/apache2/default-server.conf</filename> 中的拼写错误，启动 apache2 服务，然后列显其状态：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start apache2 &amp;&amp; systemctl status apache2
apache2.service - The Apache Webserver
   Loaded: loaded (/usr/lib/systemd/system/apache2.service; disabled)
   Active: active (running) since Tue 2014-06-03 11:26:24 CEST; 4ms ago
  Process: 11026 ExecStop=/usr/sbin/start_apache2 -D SYSTEMD -DFOREGROUND
           -k graceful-stop (code=exited, status=1/FAILURE)
 Main PID: 11263 (httpd2-prefork)
   Status: "Processing requests..."
   CGroup: /system.slice/apache2.service
           ├─11263 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11280 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11281 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11282 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11283 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           └─11285 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
</screen>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-journalctl-config">
  <title>Journald 配置</title>

  <para>
   通过修改 <filename>/etc/systemd/journald.conf</filename> 可调整 systemd-journald 服务的行为。本节只介绍了基本的选项设置。有关完整的文件描述，请参见 <command>man 5 journald.conf</command>。请注意，要使更改生效，需要使用以下命令重启动日志
  </para>

<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl restart systemd-journald</screen>

  <sect2 xml:id="sec-journalctl-config-systemmaxuse">
   <title>更改日志大小限制</title>
   <para>
    如果将日志日志数据保存到永久位置（参见<xref linkend="sec-journalctl-persistent"/>），这些数据最多会占用 <filename>/var/log/journal</filename> 所在文件系统空间的 10%。例如，如果 <filename>/var/log/journal</filename> 位于一个 30 GB <filename>/var</filename> 的分区中，则日志最多会占用 3 GB 磁盘空间。要更改此限制，请更改（并取消注释）<option>SystemMaxUse</option> 选项：
   </para>
<screen>SystemMaxUse=50M</screen>
  </sect2>

  <sect2 xml:id="sec-journalctl-config-ttypath">
   <title>将日志转发到 <filename>/dev/ttyX</filename></title>
   <para>
    您可以将日志转发到终端设备，以便在首选的终端屏幕（例如 <literal>/dev/tty12</literal>）上了解相关的系统消息。将以下 journald 选项更改为
   </para>
<screen>ForwardToConsole=yes
TTYPath=/dev/tty12</screen>
  </sect2>

  <sect2 xml:id="sec-journalctl-config-forwardtosyslog">
   <title>将日志转发到系统日志工具</title>
   <para>
    Journald 与传统的系统日志实现工具（例如 <systemitem>rsyslog</systemitem>）向后兼容。请确保满足以下条件：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      已安装 rsyslog。
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> rpm -q rsyslog
rsyslog-7.4.8-2.16.x86_64</screen>
    </listitem>
    <listitem>
     <para>
      已启用 rsyslog 服务。
     </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl is-enabled rsyslog
enabled</screen>
    </listitem>
    <listitem>
     <para>
      已在 <filename>/etc/systemd/journald.conf</filename> 中启用转发到 syslog 设置。
     </para>
<screen>ForwardToSyslog=yes</screen>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-journalctl-yast">
  <title>使用 YaST 过滤 <systemitem class="daemon">systemd</systemitem> 日志</title>

  <para>
   过滤 systemd 日志的简单方法（无需处理 journalctl 语法）是使用 YaST 日志模块。使用 <command>sudo zypper in yast2-journal</command> 安装该模块后，请在 YaST 中选择<menuchoice> <guimenu> 系统</guimenu>
   <guimenu> Systemd 日志</guimenu> </menuchoice> 启动该模块。也可以在命令行中输入 <command>sudo yast2 journal</command> 来启动该模块。
  </para>

  <figure xml:id="fig-journalctl-yast">
   <title>YaST systemd 日志</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="yast2_journal.png" width="80%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="yast2_journal.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   模块将在表中显示日志项。使用顶部的搜索框可以搜索包含特定字符的项，这类似于使用 <command>grep</command>。要按日期和时间、单位、文件或优先级过滤项，请单击<guimenu>更改过滤器</guimenu>，然后设置相应的选项。
  </para>
 </sect1>
 <sect1 xml:id="sec-journalctl-gnome-logs">
  <title>在 GNOME 中查看日志</title>
  <para>
   您可以使用 <emphasis>GNOME 日志</emphasis>来查看日志。可从应用程序菜单启动它。要查看系统日志消息，需要以 root 身份运行它，例如使用 <command>xdg-su gnome-logs</command>。按 <keycombo> <keycap function="alt"/>
   <keycap>F2</keycap></keycombo> 时可执行此命令。
  </para>
 </sect1>
</chapter>
