<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ay_pre_scripts.xml" version="5.0" xml:id="pre-scripts">

 <title>合并 ERB 模板和脚本</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>是</dm:translation>
  </dm:docmanager>
 </info>

  <para>
    <xref linkend="pre-install-scripts"/>已介绍了如何使用前脚本修改当前配置文件。简而言之，如果该脚本创建了 <filename>/tmp/profile/modified.xml</filename> 文件，AutoYaST 便会导入该配置文件并忽略最初的那个文件。
  </para>

  <para>
    这种方法非常灵活，唯一的局限是，您需要依赖于安装媒体中提供的语言和库。
  </para>

  <sect1 xml:id="erb-and-scripts">
   <title>在脚本中嵌入 ERB</title>

   <para>
    可以将 ERB 模板与脚本合并，这与<emphasis>规则</emphasis>不同。AutoYaST 将会在运行脚本前评估您在脚本中包含的任何 ERB 标记。此行为仅适用于在配置文件内定义的脚本，不适用于外部脚本。
   </para>

   <para>
    下面的示例中的脚本会下载一个名称基于 MAC 地址的配置文件。将该文件保存为 <filename>/tmp/profile/modified.xml</filename> 将会使 AutoYaST 下载并使用下载的配置文件。
   </para>

   <example xml:id="combining-erb-and-scripts">
    <title>使用 MAC 地址获取配置文件</title>
    <screen>&lt;scripts&gt;
  &lt;pre-scripts config:type="list"&gt;
    &lt;script&gt;
      &lt;interpreter&gt;shell&lt;/interpreter&gt;
      &lt;filename&gt;load_profile.sh&lt;/filename&gt;
      &lt;% mac = network_cards.first &gt;
      &lt;source&gt;&lt;![CDATA[#!/bin/bash
wget -O /tmp/profile/modified.xml http://myserver/&lt;%= network_cards.first[:mac] %&gt;.xml
]]&gt;&lt;/source&gt;
    &lt;/script&gt;
  &lt;/pre-scripts&gt;
&lt;/scripts&gt;</screen>
   </example>
  </sect1>

  <sect1 xml:id="erb-helpers-in-scripts">
   <title>通过 Ruby 脚本访问 ERB 帮助程序</title>

   <para>
    可以在 Ruby 脚本中使用 ERB 帮助程序要使用这些帮助程序，您需要 <emphasis>require</emphasis> <filename>yast</filename> 和 <filename>autoinstall/y2erb</filename> 库，并使用 <literal>Y2Autoinstall::Y2ERB::TemplateEnvironment</literal> 类访问它们。
   </para>

   <example xml:id="ruby-script-erb-helpers">
    <title>通过 Ruby 脚本访问 ERB 帮助程序</title>

    <screen>
&lt;scripts&gt;
  &lt;pre-scripts config:type="list"&gt;
    &lt;script&gt;
      &lt;interpreter&gt;/usr/bin/ruby&lt;/interpreter&gt;
      &lt;filename&gt;load_profile.sh&lt;/filename&gt;
      &lt;source&gt;&lt;![CDATA[#!/bin/bash
require "yast"
require "autoinstall/y2erb"
helpers = Y2Autoinstallation::Y2ERB::TemplateEnvironment.new
# Now you can use the TemplateEnvironment instance to call the helpers
disk_devices = helpers.disks.map { |d| d[:device] }
File.write("/root/disks.txt", disk_devices.join("\n"))
]]&gt;&lt;/source&gt;
    &lt;/script&gt;
  &lt;/pre-scripts&gt;
&lt;/scripts&gt;</screen>
   </example>
  </sect1>
 </chapter>
