<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml"
                 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="article-administration-slemicro" xml:lang="en">
 <title>&admin;</title>
 <info>
  <productnumber>&productnumber;</productnumber><productname>&productname;</productname><date>
<?dbtimestamp format="B d, Y"?></date>
  <abstract>
   <para>
    This guide describes the administration of &slem;.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <section xml:id="sec-snapshots">
  <title>Snapshots</title>
  <warning>
   <title>Snapshots are mandatory</title>
   <para>
    As snapshots are crucial for the correct functioning of &slema;, do not
    disable the feature, and ensure that the root partition is big enough to
    store the snapshots.
   </para>
  </warning>
  <para>
   When a snapshot is created, both the snapshot and the original point to the
   same blocks in the file system. So, initially a snapshot does not occupy
   additional disk space. If data in the original file system is modified,
   changed data blocks are copied while the old data blocks are kept for the
   snapshot.
  </para>
  <para>
   Snapshots always reside on the same partition or subvolume on which the
   snapshot has been taken. It is not possible to store snapshots on a
   different partition or subvolume. As a result, partitions containing
   snapshots need to be larger than partitions which do not
   contain snapshots. The
   exact amount depends strongly on the number of snapshots you keep and the
   amount of data modifications. As a rule of thumb, give partitions twice as
   much space as you normally would. To prevent disks from running out of
   space, old snapshots are automatically cleaned up.
  </para>
  <para>
   Snapshot that are known to be working properly are marked as
   <emphasis>important</emphasis>.
  </para>
  <section xml:id="sec-exclude-directories">
   <title>Directories excluded from snapshots</title>
   <para>
    As some directories store user specific or volatile data, these directories
    are excluded from snapshots:
   </para>
   <variablelist>
    <varlistentry>
     <term><filename>/home</filename></term>
     <listitem>
      <para>
       Contains users' data. Excluded so that the data will not be included in
       snapshots and thus potentially overwritten by a rollback operation.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/root</filename></term>
     <listitem>
      <para>
       Contains root's data. Excluded so that the data will not be included in
       snapshots and thus potentially overwritten by a rollback operation.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/opt</filename></term>
     <listitem>
      <para>
       Third-party products usually get installed to <filename>/opt</filename>.
       Excluded so that these applications are not uninstalled during rollbacks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv</filename></term>
     <listitem>
      <para>
       Contains data for Web and FTP servers. Excluded in order to avoid data
       loss on rollbacks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/usr/local</filename></term>
     <listitem>
      <para>
       This directory is used when manually installing software. It is excluded
       to avoid uninstalling these installations on rollbacks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/var</filename></term>
     <listitem>
      <para>
       This directory contains many variable files, including logs, temporary
       caches, third-party products in <filename>/var/opt</filename>, and is
       the default location for virtual machine images and databases.
       Therefore, a separate subvolume is created with Copy-On-Write disabled,
       so as to exclude all of this variable data from snapshots.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/tmp</filename></term>
     <listitem>
      <para>
       The directory contains temporary data.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>the architecture-specific <filename>/boot/grub2</filename> directory</term>
     <listitem>
      <para>
       Rollback of the boot loader binaries is not supported.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <section xml:id="sec-snapshot-size">
   <title>Showing exclusive disk space used by snapshots</title>
   <para>
    Snapshots share data, for efficient use of storage space, so using ordinary
    commands like <command>du</command> and <command>df</command> won't measure
    used disk space accurately. When you want to free up disk space on Btrfs
    with quotas enabled, you need to know how much exclusive disk space is used
    by each snapshot, rather than shared space. The <command>btrfs</command>
    command provides a view of space used by snapshots:
   </para>
<screen>
&prompt.root;btrfs qgroup show -p /
qgroupid         rfer         excl parent  
--------         ----         ---- ------  
0/5          16.00KiB     16.00KiB ---     
[...]    
0/272         3.09GiB     14.23MiB 1/0     
0/273         3.11GiB    144.00KiB 1/0     
0/274         3.11GiB    112.00KiB 1/0     
0/275         3.11GiB    128.00KiB 1/0     
0/276         3.11GiB     80.00KiB 1/0     
0/277         3.11GiB    256.00KiB 1/0     
0/278         3.11GiB    112.00KiB 1/0     
0/279         3.12GiB     64.00KiB 1/0     
0/280         3.12GiB     16.00KiB 1/0     
1/0           3.33GiB    222.95MiB --- 
</screen>
   <para>
    The <literal>qgroupid</literal> column displays the identification number
    for each subvolume, assigning a qgroup level/ID combination.
   </para>
   <para>
    The <literal>rfer</literal> column displays the total amount of data
    referred to in the subvolume.
   </para>
   <para>
    The <literal>excl</literal> column displays the exclusive data in each
    subvolume.
   </para>
   <para>
    The <literal>parent</literal> column shows the parent qgroup of the
    subvolumes.
   </para>
   <para>
    The final item, <literal>1/0</literal>, shows the totals for the parent
    qgroup. In the above example, 222.95 MiB will be freed if all subvolumes
    are removed. Run the following command to see which snapshots are
    associated with each subvolume:
   </para>
<screen>&prompt.root;btrfs subvolume list -st /</screen>
  </section>
 </section>
 <section xml:id="sec-transactional-udate">
  <title>Administration using transactional updates</title>
  <para>
   &slema; was designed to use a read-only root file system. This means that
   after the deployment is complete, you are not able to perform direct
   modifications to the root file system, e.g. by using
   <command>zypper</command>. Instead, &slem; introduces the concept of
   transactional updates which enables you to modify your system and keep it up
   to date.
  </para>
  <para>
   The key features of transactional updates are the following:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     They are atomic - the update is applied only if it completes successfully.
    </para>
   </listitem>
   <listitem>
    <para>
     Changes are applied in a separate snapshot and so do not influence the
     running system.
    </para>
   </listitem>
   <listitem>
    <para>
     Changes can easily be rolled back.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Each time you call the <command>transactional-update</command> command to
   change your system&mdash;either to install a package, perform an update or
   apply a patch&mdash;the following actions take place:
  </para>
  <procedure>
   <title>Modifying the root file system</title>
   <step>
    <para>
     A new read-write snapshot is created from your current root file system,
     or from a snapshot that you specified.
    </para>
   </step>
   <step>
    <para>
     All changes are applied (updates, patches or package installation).
    </para>
   </step>
   <step>
    <para>
     The snapshot is switched back to read-only mode.
    </para>
   </step>
   <step>
    <para>
     The new root file system snapshot is prepared, so that it will be active
     after you reboot.
    </para>
   </step>
   <step>
    <para>
     After rebooting, the new root file system is set as the default snapshot.
    </para>
    <note>
     <para>
      Bear in mind that without rebooting your system, the changes will not be
      applied.
     </para>
    </note>
   </step>
  </procedure>
  <warning>
  <para>
   In case you do not reboot your machine before performing further changes,
    the <command>transactional-update</command> command will create a new
    snapshot from the current root file system. This means that you will end up
    with several parallel snapshots, each including that particular change but
    not changes from the other invocations of the command. After reboot, the
    most recently created snapshot will be used as your new root file system,
    and it will not include changes done in the previous snapshots.
  </para>
  </warning>
  <section xml:id="sec-command-list">
   <title><command>transactional-update</command> usage</title>
   <para>
    The <command>transactional-update</command> command enables atomic
    installation or removal of updates; updates are applied only if all of them
    can be successfully installed. <command>transactional-update</command>
    creates a snapshot of your system and use it to update the system. Later
    you can restore this snapshot. All changes become active only after reboot.
   </para>
   <para>
    The <command>transactional-update</command> command syntax is as
    follows:
   </para>
<screen>
transactional-update <option>[option]</option> <replaceable>[general_command]</replaceable> <replaceable>[package_command]</replaceable> <replaceable>standalone_command</replaceable>
</screen>
   <note>
    <title>Running <command>transactional-update</command> without arguments.</title>
    <para>
     If you do not specify any command or option while running the
     <command>transactional-update</command> command, the system updates
     itself.
    </para>
   </note>
   <para>
    Possible command parameters are described further.
   </para>
   <variablelist>
    <title><command>transactional-update</command> options</title>
    <varlistentry>
     <term><literal>--interactive, -i</literal></term>
     <listitem>
      <para>
       Can be used along with a package command to turn on interactive mode.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--non-interactive, -n</literal></term>
     <listitem>
      <para>
       Can be used along with a package command to turn on non-interactive
       mode.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--continue [<replaceable>number</replaceable>], -c</literal></term>
     <listitem>
      <para>
       The <command>--continue</command> option is for making multiple changes
       to an existing snapshot without rebooting.
      </para>
      <para>
       The default <command>transactional-update</command> behavior is to
       create a new snapshot from the current root file system. If you forget
       something, such as installing a new package, you have to reboot to apply
       your previous changes, run <command>transactional-update</command> again
       to install the forgotten package, and reboot again. You cannot run the
       <command>transactional-update</command> command multiple times without
       rebooting to add more changes to the snapshot, because this will create
       separate independent snapshots that do not include changes from the
       previous snapshots.
      </para>
      <para>
       Use the <command>--continue</command> option to make as many changes as
       you want without rebooting. A separate snapshot is made each time, and
       each snapshot contains all the changes you made in the previous
       snapshots, plus your new changes. Repeat this process as many times as
       you want, and when the final snapshot includes everything you want,
       reboot the system, and your final snapshot becomes the new root file
       system.
      </para>
      <para>
       Another useful feature of the <command>--continue</command> option is
       you may select any existing snapshot as the base for your new snapshot.
       The following example demonstrates running
       <command>transactional-update</command> to install a new package in a
       snapshot based on snapshot 13, and then running it again to install
       another package:
      </para>
<screen>&prompt.root;<command>transactional-update pkg install <replaceable>package_1</replaceable></command></screen>
<screen>&prompt.root;<command>transactional-update --continue 13 pkg install <replaceable>package_2</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--no-selfupdate</literal></term>
     <listitem>
      <para>
       Disables self updating of <command>transactional-update</command>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--drop-if-no-change, -d</literal></term>
     <listitem>
      <para>
       Discards the snapshot created by <command>transactional-update</command>
       if there were no changes to the root file system. If there are some
       changes to the <filename>/etc</filename> directory, those changes merged
       back to the current file system.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--quiet</literal></term>
     <listitem>
      <para>
       The <command>transactional-update</command> command will not output to
       <literal>stdout</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--help, -h</literal></term>
     <listitem>
      <para>
       Prints help for the <command>transactional-update</command> command.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--version</literal></term>
     <listitem>
      <para>
       Displays the version of the <command>transactional-update</command>
       command.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The general commands are the following:
   </para>
   <variablelist>
    <title>General commands</title>
    <varlistentry>
     <term><literal>cleanup-snapshots</literal></term>
     <listitem>
      <para>
       The command marks all unused snapshots that are intended to be removed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>cleanup-overlays</literal></term>
     <listitem>
      <para>
       The command removes all unused overlay layers of
       <filename>/etc</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>cleanup</literal></term>
     <listitem>
      <para>
       The command combines the <literal>cleanup-snapshots</literal> and
       <literal>cleanup-overlays</literal> commands. For more details refer to
       <xref linkend="sec-cleanup-algorithm"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>grub.cfg</literal></term>
     <listitem>
      <para>
       Use this command to rebuild the GRUB boot loader configuration file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>bootloader</literal></term>
     <listitem>
      <para>
       The command reinstall the boot loader.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>initrd</literal></term>
     <listitem>
      <para>
       Use the command to rebuild <literal>initrd</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>kdump</literal></term>
     <listitem>
      <para>
       In case you perform changes to your hardware or storage, you may need to
       rebuild the kdump initrd.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>shell</literal></term>
     <listitem>
      <para>
       Opens a read-write shell in the new snapshot before exiting. The command
       is typically used for debugging purposes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>reboot</literal></term>
     <listitem>
      <para>
       The system reboots after the transactional-update is complete.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>run </literal><replaceable>&lt;command&gt;</replaceable></term>
     <listitem>
      <para>
       Runs the provided command in a new snapshot.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>setup-selinux</literal></term>
     <listitem>
      <para>
       Installs and enables targeted SELinux policy.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The package commands are the following:
   </para>
   <variablelist>
    <title>Package commands</title>
    <varlistentry>
     <term><literal>dup</literal></term>
     <listitem>
      <para>
       Performs upgrade of your system. The default option for this command is
       <literal>--non-interactive</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>migration</literal></term>
     <listitem>
      <para>
       The command migrates your system to a selected target. Typically it is
       used to upgrade your system if it has been registered via &scc;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>patch</literal></term>
     <listitem>
      <para>
       Checks for available patches and installs them. The default option for
       this command is <literal>--non-interactive</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pkg install</literal></term>
     <listitem>
      <para>
       Installs individual packages from the available channels using the
       <command>zypper install</command> command. This command can also be used
       to install Program Temporary Fix (PTF) RPM files. The default option for
       this command is <literal>--interactive</literal>.
      </para>
<screen>&prompt.root;<command>transactional-update pkg install <replaceable>package_name</replaceable></command></screen>
      <para>
       or
      </para>
<screen>&prompt.root;<command>transactional-update pkg install <replaceable>rpm1 rpm2</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pkg remove</literal></term>
     <listitem>
      <para>
       Removes individual packages from the active snapshot using the
       <command>zypper remove</command> command. This command can also be used
       to remove PTF RPM files. The default option for this command is
       <literal>--interactive</literal>.
      </para>
<screen>&prompt.root;<command>transactional-update pkg remove <replaceable>package_name</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pkg update</literal></term>
     <listitem>
      <para>
       Updates individual packages from the active snapshot using the
       <command>zypper update</command> command. Only packages that are part of
       the snapshot of the base file system can be updated. The default option
       for this command is <literal>--interactive</literal>.
      </para>
<screen>&prompt.root;<command>transactional-update pkg update <replaceable>package_name</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>register</literal></term>
     <listitem>
      <para>
       The register command enables you to register/deregister your system. For
       a complete usage description, refer to
       <xref linkend="sec-register-command"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>up</literal></term>
     <listitem>
      <para>
       Updates installed packages to newer versions. The default option for
       this command is <literal>--non-interactive</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The standalone commands are the following:
   </para>
   <variablelist>
    <title>Standalone commands</title>
    <varlistentry>
     <term><literal>rollback</literal> <replaceable>&lt;snapshot number&gt;</replaceable></term>
     <listitem>
      <para>
       This sets the default subvolume. The current system is set as the new
       default root file system. If you specify a number, that snapshot is used
       as the default root file system. On a read-only file system, it does not
       create any additional snapshots.
      </para>
<screen>&prompt.root;<command>transactional-update rollback <replaceable>snapshot_number</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>rollback last</literal></term>
     <listitem>
      <para>
       This command sets the last known to be working snapshot as the default.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>status</literal></term>
     <listitem>
      <para>
       This prints a list of available snapshots. The currently booted one is
       marked with an asterisk, the default snapshot is marked with a plus
       sign.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <section xml:id="sec-register-command">
    <title>The <literal>register</literal> command</title>
    <para>
     The <literal>register</literal> command enables you to handle all tasks
     regarding registration and subscription management. You can supply the
     following options:
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>--list-extensions</literal></term>
      <listitem>
       <para>
        With this option, the command will list available extensions for your
        system. You can use the output to find a product identifier for product
        activation.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-p, --product</literal></term>
      <listitem>
       <para>
        Use this option to specify a product for activation. The product
        identifier has the following format:
        <emphasis>&lt;name&gt;/&lt;version&gt;/&lt;architecture&gt;</emphasis>,
        for example <literal>sle-module-live-patching/15.3/x86_64</literal>.
        The appropriate command will then be the following:
       </para>
<screen>&prompt.root;transactional-update register -p sle-module-live-patching/15.3/x86_64</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-r, --regcode</literal></term>
      <listitem>
       <para>
        Register your system with the provided registration code. The command
        will register the subscription and enable software repositories.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-d, --de-register</literal></term>
      <listitem>
       <para>
        The option deregisters the system, or when used along with the
        <literal>-p</literal> option, deregisters an extension.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-e, --email</literal></term>
      <listitem>
       <para>
        Specify an email address that will be used in &scc; for registration.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--url</literal></term>
      <listitem>
       <para>
        Specify the URL of your registration server. The URL is stored in
        the configuration and will be used in subsequent command invocations. For
        example:
       </para>
<screen>&prompt.root;transactional-update register --url https://scc.suse.com</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-s, --status</literal></term>
      <listitem>
       <para>
        Displays the current registration status in JSON format.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--write-config</literal></term>
      <listitem>
       <para>
        Writes the provided options value to the
        <filename>/etc/SUSEConnect</filename> configuration file.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--cleanup</literal></term>
      <listitem>
       <para>
        Removes old system credentials.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--version</literal></term>
      <listitem>
       <para>
        Prints the version.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--help</literal></term>
      <listitem>
       <para>
        Displays usage of the command.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
  </section>
  <section xml:id="sec-cleanup-algorithm">
   <title>Snapshots cleanup</title>
   <para>
    If you run the command <command>transactional-update cleanup</command>, all
    old snapshots without a cleanup algorithm will have one set. All important
    snapshots are also marked. The command also removes all unreferenced (and
    thus unused) <filename>/etc</filename> overlay directories in
    <filename>/var/lib/overlay</filename>.
   </para>
   <para>
    The snapshots with the set <literal>number</literal> cleanup algorithm will
    be deleted according to the rules configured in
    <filename>/etc/snapper/configs/root</filename> by the following parameters:
   </para>
   <variablelist>
    <varlistentry>
     <term>NUMBER_MIN_AGE</term>
     <listitem>
      <para>
       Defines the minimum age of a snapshot (in seconds) that can be
       automatically removed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>NUMBER_LIMIT/NUMBER_LIMIT_IMPORTANT</term>
     <listitem>
      <para>
       Defines the maximum count of stored snapshots. The cleaning algorithms
       delete snapshots above the specified maximum value, without taking the
       snapshot and file system space into account. The algorithms also delete
       snapshots above the minimum value until the limits for the snapshot and
       file system are reached.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <section xml:id="sec-rollback-procedure">
   <title>System rollback</title>
   <para>
    GRUB 2 enables booting from btrfs snapshots and thus allows you to use any
    older functional snapshot in case that the new snapshot does not work
    correctly.
   </para>
   <para>
    When booting a snapshot, the parts of the file system included in the
    snapshot are mounted read-only; all other file systems and parts that are
    excluded from snapshots are mounted read-write and can be modified.
   </para>
   <tip>
    <title>Rolling back to a specific installation state</title>
    <para>
     An initial bootable snapshot is created at the end of the initial system
     installation. You can go back to that state at any time by booting this
     snapshot. The snapshot can be identified by the description <literal>after
     installation</literal>.
    </para>
   </tip>
   <para>
    There are two methods how you can perform a system rollback.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      From a running system you can set the default snapshot, see more in
      <xref linkend="proc-running-snapshot"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Especially in cases where the current snapshot is broken, you can boot to
      the new snapshot and set it then default, for details refer to
      <xref linkend="proc-boot-snapshot"/>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    In case your current snapshot is functional, you can use the following
    procedure for system rollback.
   </para>
   <procedure xml:id="proc-running-snapshot">
    <title>Rollback from a running system</title>
    <step>
     <para>
      Choose the snapshot that should be set as default, run:
     </para>
<screen>&prompt.root;transactional-update status</screen>
     <para>
      to get a list of available snapshots. Note the number of the snapshot to
      be set as default.
     </para>
    </step>
    <step>
     <para>
      Set the snapshot as the default by running:
     </para>
<screen>&prompt.root;transactional-update rollback <replaceable>snapshot_number</replaceable></screen>
     <para>
      If you omit the <replaceable>snapshot number</replaceable>, the current
      snapshot will be set as default.
     </para>
    </step>
    <step>
     <para>
      Reboot your system to boot in to the new default snapshot.
     </para>
    </step>
   </procedure>
   <para>
    The following procedure is used in case the current snapshot is broken and
    you are not able to boot into it.
   </para>
   <procedure xml:id="proc-boot-snapshot">
    <title>Rollback to a working snapshot</title>
    <step>
     <para>
      Reboot your system and select <literal>Start bootloader from a read-only
      snapshot</literal>
     </para>
    </step>
    <step>
     <para>
      Choose a snapshot to boot. The snapshots are sorted according to the date
      of creation, with the latest one at the top.
     </para>
    </step>
    <step>
     <para>
      Log in to your system and check whether everything works as expected.
      Data written to directories excluded from the snapshots will stay
      untouched.
     </para>
    </step>
    <step>
     <para>
      If the snapshot you booted into is not suitable for rollback, reboot your
      system and choose another one.
     </para>
     <para>
      If the snapshot works as expected, you can perform rollback by running
      the following command:
     </para>
<screen>&prompt.root;<command>transactional-update rollback</command></screen>
     <para>
      And reboot afterwards.
     </para>
    </step>
   </procedure>
  </section>
  <section xml:id="sec-automatic-updates">
   <title>Managing automatic transactional updates</title>
   <para>
    Automatic updates are controlled by a <command>systemd.timer</command> that
    runs once per day. This applies all updates, and informs
    <command>rebootmgrd</command> that the machine should be rebooted. You may
    adjust the time when the update runs, see systemd.timer(5) documentation.
   </para>
   <para>
    You can disable automatic transactional updates with this command:
   </para>
<screen>&prompt.root;<command>systemctl --now disable transactional-update.timer</command></screen>
  </section>
 </section>
 
 <section xml:id="sec-health-checker">
  <title>Health checker</title>
  <para>
   Health checker is a program delivered with &slema; that checks whether
   services are running properly during booting of your system.
  </para>
  <para>
   During the boot process, <literal>systemd</literal> calls Health checker,
   which in turn calls its plugins. Each plugin checks a particular service or
   condition. If each check passes, a status
   file (<filename>/var/lib/misc/health-checker.state</filename>) is
   created. The status file marks the current root file system as correct.
  </para>
  <para>
   If any of the health checker plugins reports an error, the action taken
   depends on a particular condition, as described below:
  </para>
  <variablelist>
   <varlistentry>
    <term><emphasis>The snapshot is booted for the first time.</emphasis></term>
    <listitem>
     <para>
      If the current snapshot is different from the last one that worked
      properly, an automatic rollback to the last working snapshot is
      performed. This means that the last change performed to the file system
      broke the snapshot.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>The snapshot has already booted correctly in the past.</emphasis></term>
    <listitem>
     <para>
      There could be just a temporary problem, and the system is rebooted
      automatically.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>The reboot of a previously correctly booted snapshot has failed.</emphasis></term>
    <listitem>
     <para>
      If there was already a problem during boot and automatic reboot has been
      triggered, but the problem still persists, then the system is kept running
      to enable to the administrator to fix the problem. The services that are
      tested by the health checker plugins are stopped if possible.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <section xml:id="sec-health-plugins">
   <title>Adding custom plugins</title>
   <para>
    Health checker supports the addition of your own plugins to check services
    during the boot process. Each plugin is a bash script that must fulfill
    the following requirements:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Plugins are located within a specific
      directory&mdash;<filename>/usr/libexec/health-checker</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      The service that will be checked by the particular plugin must be defined
      in the <literal>Unit</literal> section of the
      <filename>/usr/lib/systemd/system/health-checker.service</filename> file.
      For example, the <literal>etcd</literal> service is defined as follows:
     </para>
<screen>
[Unit]
...
After=etcd.service
...
</screen>
    </listitem>
    <listitem>
     <para>
      Each plugin must have functions called <literal>run.checks</literal> and
      <literal>stop_services</literal> defined. The
      <literal>run.checks</literal> function checks whether a particular
      service has started properly. Bear in mind that service that has not been
      enabled by systemd, should be ignored. The function
      <literal>stop_services</literal> is called to stop the particular service in case the service has not been
      started properly. You can use the plugin
      template for your reference.
     </para>
    </listitem>
   </itemizedlist>
  </section>
 </section>
 <section xml:id="sec-admin-cockpit">
  <title>&slema; administration using Cockpit</title>
  <para>
   Cockpit is a web-based graphical interface that enables you to manage your
   &slema; deployments from one place. Cockpit is included in the delivered raw
   images, or can be installed if you are installing your own instances
   manually. For the Cockpit installation process refer to
   <xref linkend="sec-settings-software"/>.
  </para>
  <para>
   In case Cockpit is not installed in your system. You can install it
   additionally by running:
  </para>
<screen>&prompt.root;transactional-update pkg install cockpit</screen>
  <para>
   After reboot, Cockpit will be available in your system.
  </para>
  <para>
   Before running Cockpit on you machine, you need to enable the cockpit socket
   in systemd by running:
  </para>
<screen>&prompt.root;systemctl enable --now cockpit.socket</screen>
  <para>
   In case you have enabled the firewall, you also must open the firewall for
   Cockpit as follows:
  </para>
<screen>&prompt.root;firewall-cmd --permanent --zone=public --add-service=cockpit</screen>
  <para>
   And then reload the firewall configuration by running:
  </para>
<screen>&prompt.root;firewall-cmd --reload</screen>
  <para>
   Now you can access the Cockpit web interface by opening the following
   address in your web browser:
  </para>
<screen>https://<replaceable>IP_ADDRESS_OF_MACHINE</replaceable>:9090</screen>
  <para>
   A login screen opens. To login, use the same credentials as you use to login
   to your machine via console or SSH.
  </para>
  <figure>
   <title>Cockpit login screen</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata  fileref="cockpit_login_screen.png" width="100%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cockpit_login_screen.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>
  <para>
   After successful login, an overview of your machine opens. Here you can view
   and administer your system's performance, network interfaces, Podman
   containers, services, and logs. You can also access your machine using shell
   in a terminal emulator.
  </para>
  <figure>
   <title>Cockpit dashboard</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="cockpit_dashboard.png" width="100%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cockpit_dashboard.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </section>
 <section xml:id="sec-admin-toolbox">
  <title><literal>toolbox</literal> for &slema; debugging</title>
  <para>
   &slema; uses the <command>transactional-update</command> command to apply
   changes to the system, but the changes are applied only after reboot. That
   solution has several benefits, but it also has some disadvantages. If you
   need to debug your system and install a new tool, the tool will be available
   only after reboot. Therefore you are not able to debug the current file
   system. For this reason a utility called <literal>toolbox</literal> has been
   developed.
  </para>
  <para>
   <literal>toolbox</literal> is a small script that pulls a container image
   and runs a privileged container based on that image. In the toolbox
   container you can install any tool you want with <command>zypper</command>
   and then use the tool without rebooting your system.
  </para>
  <para>
   To start the <literal>toolbox</literal> container, run the following:
  </para>
<screen>&prompt.root;/usr/bin/toolbox</screen>
  <para>
   If the script completes successfully, you will see the
   <literal>toolbox</literal> container prompt.
  </para>
  <note>
   <title>Obtaining the <literal>toolbox</literal> image</title>
   <para>
    You can also use Podman or Cockpit to pull the <literal>toolbox</literal>
    image and start a container based on that image.
   </para>
  </note>
 </section>
</article>
