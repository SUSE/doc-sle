<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="uefi-httpboot-server.xml" version="5.0" xml:id="cha-deployment-prep-uefi-httpboot">
 <title>Configurazione di un UEFI HTTP Boot server</title>
 <info>
  <abstract>
   <para>
    In questo capitolo viene descritto come configurare un UEFI HTTP Boot server.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>sì</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="httpboot-intro">
  <title>Introduzione</title>

  <para>
   L'avvio HTTP combina DHCP, DNS e HTTP per consentire l'avvio e la distribuzione di sistemi nella rete. È possibile utilizzare l'avvio HTTP come meccanismo sostitutivo a prestazioni elevate di PXE. L'avvio HTTP consente l'avvio di un server da un URI su HTTP, per il trasferimento rapido di file di grandi dimensioni come il kernel Linux e il file system root dai server esterni alla rete locale.
  </para>

  <sect2 xml:id="httpboot-client">
   <title>Configurazione del computer client</title>
   <para>
    L'abilitazione dell'avvio HTTP su un computer client fisico varia in base all'hardware specifico. Consultare la documentazione per ulteriori informazioni su come abilitare l'avvio HTTP sul proprio computer.
   </para>
  </sect2>

  <sect2 xml:id="httpboot-preparation">
   <title>Preparazione</title>
   <para>
    Per la configurazione descritta in questo documento vengono utilizzate come esempio le sottoreti IP 192.168.111.0/24 (IPv4) e 2001:db8:f00f:cafe::/64 (IPv6) e gli indirizzi IP del server sono 192.168.111.1(IPv4) e 2001:db8:f00f:cafe::1/64 (IPv6). Modificare questi valori in base alla configurazione specifica.
   </para>
   <para>
    Installare i seguenti pacchetti sul computer che si intende utilizzare come server di avvio HTTP: <package>dhcp-server</package>,
    <package>apache2</package> (oppure <package>lighttpd</package>), e
    <package>dnsmasq</package>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="httpboot-configure-server">
  <title>Configurazione del server</title>

  <sect2 xml:id="httpboot-dns-server">
   <title>Server DNS</title>
   <para>
    La configurazione del server DNS è facoltativa, ma consente di assegnare un nome intuitivo al server di avvio HTTP. Per configurare il server DNS, aggiungere quanto riportato di seguito al file <filename>/etc/dnsmasq.conf</filename>:
   </para>
<screen>interface=eth0
addn-hosts=/etc/dnsmasq.d/hosts.conf</screen>
   <para>
    Assegnare un nome di dominio agli indirizzi IP nel file <filename>/etc/dnsmasq.d/hosts.conf</filename>:
   </para>
<screen>192.168.111.1 www.httpboot.local
2001:db8:f00f:cafe::1 www.httpboot.local</screen>
   <para>
    Avviare il server DNS.
   </para>
<screen>systemctl start dnsmasq</screen>
   <note>
    <title>utilizzo del boot loader <phrase role="productname">shim</phrase></title>
    <para>
     Per via di una modifica in UEFI 2.7, è consigliabile utilizzare un boot loader shim di SLE 15 o versione successiva per evitare potenziali errori causati dal nodo DNS aggiuntivo.
    </para>
   </note>
   <sect3 xml:id="httpboot-dhcpv4-server">
    <title>Configurazione del server DHCPv4</title>
    <para>
     Prima di configurare i server DHCP, specificarne l'interfaccia di rete in <filename>/etc/sysconfig/dhcpd</filename>:
    </para>
<screen>DHCPD_INTERFACE="eth0"
DHCPD6_INTERFACE="eth0"</screen>
    <para>
     In questo modo i server DHCP forniscono il servizio solo sull'interfaccia <literal>eth0</literal>.
    </para>
    <para>
     Per configurare un server DHCPv4 per l'avvio PXE e l'avvio HTTP, aggiungere la seguente configurazione al file <filename>/etc/dhcpd.conf</filename>:
    </para>
<screen>option domain-name-servers 192.168.111.1;
option routers 192.168.111.1;
default-lease-time 14400;
ddns-update-style none;
  subnet 192.168.111.0 netmask 255.255.255.0 {
    range dynamic-bootp 192.168.111.100 192.168.111.120;
    default-lease-time 14400;
    max-lease-time 172800;
    class "pxeclients"{
      match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
      next-server 192.168.111.1;
      filename "/bootx64.efi";
    }
    class "httpclients" {
      match if substring (option vendor-class-identifier, 0, 10) = "HTTPClient";
      option vendor-class-identifier "HTTPClient";
      filename "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
    }
}</screen>
    <para>
     Il server DHCPv4 deve utilizzare il parametro <literal>HTTPClient</literal> per l'ID classe fornitore, poiché il client lo utilizza per identificare un'offerta di avvio HTTP.
    </para>
    <para>
     Avviare il daemon DHCP:
    </para>
    <para>
     <literal>systemctl start dhcpd</literal>
    </para>
   </sect3>
   <sect3 xml:id="httpboot-dhcpv6-server">
    <title>Configurazione del server DHCPv6</title>
    <para>
     Per configurare il server DHCPv6, aggiungere la seguente configurazione al file <filename>/etc/dhcpd6.conf</filename>:
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};
subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
        option dhcp6.name-servers 2001:db8:f00f:cafe::1;
        option dhcp6.vendor-class 0 10 "HTTPClient";
}</screen>
    <para>
     Questa configurazione definisce il tipo di URL di avvio, la classe fornitore e altre opzioni necessarie. In modo analogo alle impostazioni DHCPv4, è necessario fornire l'URL di avvio, che deve includere un indirizzo IPv6. È inoltre necessario specificare l'opzione di classe fornitore. In DHCPv6 è costituita dal numero dell'azienda e dai dati della classe fornitore (lunghezza e contenuto). Poiché il driver di avvio HTTP ignora il numero dell'azienda, è possibile impostarlo su <literal>0</literal>. Il contenuto dei dati della classe fornitore deve essere <literal>HTTPClient</literal>; in caso contrario, il client ignora l'offerta.
    </para>
    <para>
     L'implementazione di avvio HTTP precedente, che non segue l'<link xlink:href="https://tools.ietf.org/html/rfc3315">RFC 3315</link>, richiede una configurazione diversa:
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = string;
        subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi;
	option dhcp6.name-servers 2001:db8:f00f:cafe::1;
	option dhcp6.vendor-class "HTTPClient";
}</screen>
    <para>
     Avviare il daemon <literal>dhcpv6</literal>.
    </para>
<screen>systemctl start dhcpd6</screen>
    <sect4 xml:id="httpboot-dhcpv6-pxe-server">
     <title>Configurazione del server DHCPv6 per l'avvio PXE e HTTP</title>
     <para>
      Utilizzando la seguente configurazione, è possibile configurare il server DHCPv6 per l'avvio PXE e HTTP:
     </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};

subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;

        class "PXEClient" {
	        match substring (option dhcp6.vendor-class, 6, 9);
	}

        subclass "PXEClient" "PXEClient" {
	        option dhcp6.bootfile-url "tftp://[2001:db8:f00f:cafe::1]/bootloader.efi";
	}

	class "HTTPClient"; {
	        match substring (option dhcp6.vendor-class, 6, 10);
	}

	subclass "HTTPClient" "HTTPClient" {
	        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
		option dhcp6.name-servers 2001:db8:f00f:cafe::1;
		option dhcp6.vendor-class 0 10 "HTTPClient";
	}
}</screen>
     <para>
      È inoltre possibile abbinare la classe fornitore a una specifica architettura, come indicato di seguito:
     </para>
<screen>class "HTTPClient" {
        match substring (option dhcp6.vendor-class, 6, 21);
	}

subclass "HTTPClient" "HTTPClient":Arch:00016 {
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
	option dhcp6.name-servers 2001:db8:f00f:cafe::1;
	option dhcp6.vendor-class 0 10 "HTTPClient";
}</screen>
     <para>
      In questo esempio, <literal>HTTPClient:Arch:00016</literal> fa riferimento a un client di avvio HTTP AMD64/Intel 64. Questa configurazione consente al server di gestire contemporaneamente varie architetture.
     </para>
    </sect4>
    <sect4 xml:id="httpboot-firewall">
     <title>Configurazione del firewall</title>
     <para>
      Se nel firewall vengono rilasciati pacchetti DHCPv6 dal filtro RP, controllare il relativo registro. Se contiene la voce <literal>rpfilter_DROP</literal>, disabilitare il filtro mediante la seguente configurazione in <filename>/etc/firewalld/firewalld.conf</filename>:
     </para>
     <para>
      <literal>IPv6_rpfilter=no</literal>
     </para>
    </sect4>
   </sect3>
   <sect3 xml:id="httpboot-tftp-server">
    <title>Distribuzione di un server TFTP (facoltativa)</title>
    <para>
     Per fornire supporto per l'avvio PXE e HTTP, distribuire un server TFTP. Installare il pacchetto <package>tftp</package> e avviare il servizio:
    </para>
<screen> systemctl start tftp.socket
systemctl start tftp.service</screen>
    <para>
     È inoltre necessario installare un pacchetto
     <package>tftpboot-installation</package> specifico per l'utilizzo con l'avvio PXE. Eseguire il comando <command>zypper se tftpboot</command> per un elenco dei pacchetti <package>tftp-installation</package> disponibili, quindi installare il pacchetto per l'architettura e la versione del sistema desiderate, ad esempio
     <package>tftpboot-installation-SLE-15-SP3-x86_64</package> Ad esempio:
     <package os="sles;sled">tftpboot-installation-SLE-<replaceable>VERSIONE</replaceable>-x86_64</package>
     (sostituire <replaceable>VERSIONE</replaceable> con la versione effettiva). Copiare il contenuto della directory <filename os="sles;sled">SLE-<replaceable>VERSIONE</replaceable>-x86_64</filename> nella directory root del server TFTP:
    </para>


    <para>
     Per ulteriori informazioni, fare riferimento a <filename os="sles;sled">/usr/share/tftpboot-installation/SLE-<replaceable>VERSIONE</replaceable>-x86_64/README</filename>
    </para>
   </sect3>
   <sect3 xml:id="httpboot-http-server">
    <title>Configurazione del server HTTP</title>
    <para>
     Copiare l'intero contenuto della prima immagine ISO del sistema nella directory <filename os="sles;sled">/srv/www/htdocs/sle/</filename>. Modificare quindi il file <filename os="sles;sled">/srv/www/htdocs/sle/grub.cfg</filename>. Utilizzare il seguente esempio come riferimento:
    </para>
<screen>timeout=60
default=1

menuentry 'Installation IPv4' --class opensuse --class gnu-linux --class gnu --class os {
    set gfxpayload=keep
    echo 'Loading kernel ...'
    linuxefi /sle/boot/x86_64/loader/linux install=http://www.httpboot.local/sle
    echo 'Loading initial ramdisk ...'
    initrdefi /sle/boot/x86_64/loader/initrd
}

menuentry 'Installation IPv6' --class opensuse --class gnu-linux --class gnu --class os {
    set gfxpayload=keep
    echo 'Loading kernel ...'
    linuxefi /sle/boot/x86_64/loader/linux install=install=http://www.httpboot.local/sle ipv6only=1 ifcfg=*=dhcp6,DHCLIENT6_MODE=managed
    echo 'Loading initial ramdisk ...'
    initrdefi /sle/boot/x86_64/loader/initrd
}</screen>
    <sect4 xml:id="httpboot-lighttpd">
     <title>Configurazione di lighttpd</title>
     <para>
      Per abilitare il supporto per IPv4 e IPv6 in lighttpd, modificare <filename>/etc/lighttpd/lighttpd.conf</filename> nel modo seguente:
     </para>
<screen>##
## Use IPv6?
##
#server.use-ipv6 = "enable"
$SERVER["socket"] == "[::]:80" {  }</screen>
     <para>
      Avviare il daemon <literal>lighttpd</literal>:
     </para>
<screen>systemctl start lighttpd</screen>
    </sect4>
    <sect4 xml:id="httpboot-apache2">
     <title>Configurazione di apache2</title>
     <para>
      Apache non richiede configurazioni aggiuntive. Avviare il daemon <literal>apache2</literal>:
     </para>
<screen>systemctl start apache2</screen>
    </sect4>
   </sect3>
   <sect3 xml:id="httpboot-http-server-ssl-support">
    <title>Abilitazione del supporto SSL per il server HTTP (facoltativa)</title>
    <para>
     Per utilizzare l'avvio HTTPS, è necessario convertire un certificato server esistente nel formato <literal>DER</literal> ed eseguirne la registrazione nel firmware del client.
    </para>
    <para>
     Presupponendo che si disponga di un certificato installato nel server, convertirlo nel formato <literal>DER</literal> per l'utilizzo con il client mediante il seguente comando:
    </para>
<screen>openssl x509 -in <replaceable>CERTIFICATE</replaceable>.crt -outform der -out <replaceable>CERTIFICATE</replaceable>.der</screen>
    <sect4 xml:id="httpboot-enroll-certificate-physical-machine">
     <title>Registrazione del certificato server nel firmware del client</title>
     <para>
      La procedura esatta per registrare il certificato convertito varia in base all'implementazione specifica del firmware del client. Per alcuni componenti hardware è necessario registrare il certificato manualmente nell'interfaccia utente del firmware mediante un dispositivo di memorizzazione esterno contenente il certificato. I computer con supporto Redfish possono registrare il certificato in remoto. Per ulteriori informazioni sulla registrazione dei certificati, consultare la documentazione dei componenti hardware specifici.
     </para>
    </sect4>
    <sect4 xml:id="httpboot-ssl-lighttpd">
     <title>Abilitazione del supporto SSL in lighttpd</title>
     <para>
      Poiché per lighttpd è necessario che la chiave privata e il certificato si trovino nello stesso file, unificarli mediante il seguente comando:
     </para>
<screen>cat <replaceable>CERTIFICATE</replaceable>.crt server.key &gt; <replaceable>CERTIFICATE</replaceable>.pem</screen>
     <para>
      Copiare <filename><replaceable>CERTIFICATO</replaceable>.pem</filename> nella directory <filename>/etc/ssl/private/</filename>.
     </para>
<screen>cp server-almighty.pem /etc/ssl/private/
chown -R root:lighttpd /etc/ssl/private/server-almighty.pem
chmod 640 /etc/ssl/private/server-almighty.pem</screen>
     <para>
      Accertarsi che <literal>mod_openssl</literal> sia elencato nella sezione <literal>server.modules</literal> del file <filename>/etc/lighttpd/modules.conf</filename>, ad esempio:
     </para>
<screen>server.modules = (
  "mod_access",
  "mod_openssl",
)</screen>
     <para>
      Aggiungere le seguenti righe alla sezione <literal>SSL Support</literal> nel file <filename>/etc/lighttpd/lighttpd.conf</filename>:
     </para>
<screen># IPv4
$SERVER["socket"] == ":443" {
    ssl.engine                 = "enable"
    ssl.pemfile                = "/etc/ssl/private/server-almighty.pem"
}
# IPv6
$SERVER["socket"] == "[::]:443" {
    ssl.engine                 = "enable"
    ssl.pemfile                = "/etc/ssl/private/server-almighty.pem"
}</screen>
     <para>
      Riavviare lighttpd per attivare il supporto SSL:
     </para>
<screen>systemctl restart lighttpd</screen>
    </sect4>
    <sect4 xml:id="http-ssl-apache">
     <title>Abilitazione del supporto SSL in Apache</title>
     <para>
      Aprire il file <filename>/etc/sysconfig/apache2</filename> e aggiungere il flag SSL come indicato di seguito:
     </para>
<screen>APACHE_SERVER_FLAGS="SSL"</screen>
     <para>
      Accertarsi che il modulo <literal>ssl</literal> sia elencato in <literal>APACHE_MODULES</literal>, ad esempio:
     </para>
     <para>
      Copiare quindi la chiave privata e il certificato nella directory <filename>/etc/apache2/</filename>.
     </para>
<screen>cp server.key /etc/apache2/ssl.key/
chown wwwrun /etc/apache2/ssl.key/server.key
chmod 600 /etc/apache2/ssl.key/server.key
cp server.crt /etc/apache2/ssl.crt/</screen>
     <para>
      Creare la configurazione vhost ssl.
     </para>
<screen>cd /etc/apache2/vhosts.d
cp vhost-ssl.template vhost-ssl.conf</screen>
     <para>
      Modificare <filename>/etc/apache2/vhosts.d/vhost-ssl.conf</filename> per cambiare la chiave privata e il certificato:
     </para>
<screen>SSLCertificateFile /etc/apache2/ssl.crt/server.crt
 SSLCertificateKeyFile /etc/apache2/ssl.key/server.key</screen>
     <para>
      Riavviare apache per attivare il supporto SSL:
     </para>
<screen>systemctl restart apache2</screen>
    </sect4>
    <sect4 xml:id="httpboot-modify-dhcp-configuration">
     <title>Modifica della configurazione DHCP</title>
     <para>
      Sostituire il prefisso <literal>http://</literal> con <literal>https://</literal> in <filename>dhcpd.conf/dhcpd6.conf</filename> e riavviare il server DHCP.
     </para>
<screen>systemctl restart dhcpd
systemctl restart dhcpd6</screen>
    </sect4>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="httpboot-client-boot">
  <title>Avvio del client tramite avvio HTTP</title>

  <para>
   Se il firmware supporta già l'avvio HTTP, collegare il cavo e scegliere l'opzione di avvio corretta.
  </para>
 </sect1>
</chapter>
