<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="bootconcept.xml" version="5.0" xml:id="cha-boot"> <title>引导过程简介</title>
 <info>
      <abstract>
        <para>
    引导 Linux 系统涉及不同组件和任务。固件和硬件初始化过程（取决于计算机的体系结构）完成后，系统将通过引导加载程序 GRUB 2 启动内核。在此之后，引导进程完全由操作系统控制，并由 <systemitem class="daemon">systemd</systemitem> 处理。<systemitem class="daemon">systemd</systemitem> 会提供一组<quote>目标</quote>，用于引导与日常使用、维护或紧急情况相关的配置。
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-boot-terminology">
  <title>术语</title>
  <para>
   本章使用的术语可能存在歧义。为了理解本章中术语的用法，请阅读以下定义：
  </para>
  <variablelist>
   <varlistentry>
    <term><systemitem>init</systemitem></term>
    <listitem>
     <para>
      有两个不同的进程通常命名为 <quote>init</quote>：
     </para>
     <itemizedlist>
      <listitem>
       <para>
        用于挂载根文件系统的 <systemitem>initramfs</systemitem> 进程
       </para>
      </listitem>
      <listitem>
       <para>
        从实际根文件系统执行且用于启动其他所有进程的操作系统进程
       </para>
      </listitem>
     </itemizedlist>
     <para>
      在这两种情况下，<systemitem class="daemon">systemd</systemitem> 程序都会处理此任务。首先会从 <systemitem>initramfs</systemitem> 执行此进程，以挂载根文件系统。挂载成功后，将从根文件系统以初始进程的形式重新执行此进程。为了避免混淆这两个 <systemitem class="daemon">systemd</systemitem> 进程，我们将第一个进程称为 <emphasis>init on initramfs</emphasis>，将第二个进程称为 <emphasis>systemd</emphasis>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <systemitem>initrd</systemitem> / <systemitem>initramfs</systemitem>
    </term>
    <listitem>
     <para>
      <systemitem>initrd</systemitem>（初始 RAM 磁盘）是一个映像文件，内含内核所装载的并且作为临时根文件系统从 <filename>/dev/ram</filename> 挂载的根文件系统映像。挂载此文件系统需要使用文件系统驱动程序。
     </para>
     <para>
      从内核 2.6.13 开始，initrd 已由 <systemitem>initramfs</systemitem>（初始 RAM 文件系统）取代，后者无需文件系统驱动程序即可挂载。<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> 只使用 <systemitem>initramfs</systemitem>。但是，由于 <systemitem>initramfs</systemitem> 作为 <filename>/boot/initrd</filename> 储存，因此通常将其称为<quote>initrd</quote>。本章只使用名称 <systemitem>initramfs</systemitem>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-boot-proc">
  <title>Linux 引导进程</title>
  <para>
   Linux 引导进程包括多个阶段，每个阶段由一个不同组件来代表：
  </para>
  <orderedlist>
   <listitem>
    <para>
     <xref linkend="sec-boot-proc-initialization" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-proc-kernel" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-initramfs" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-systemd" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
  </orderedlist>

  <sect2 xml:id="sec-boot-proc-initialization">
   <title>初始化和引导加载程序阶段</title>
   <para>
    在初始化阶段，将设置计算机的硬件并准备好设备。此过程根据硬件体系结构的不同有很大的差别。
   </para>
   <para>
    <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> 在所有体系结构中都使用引导加载程序 GRUB 2。根据体系结构和固件，启动 GRUB 2 引导加载程序的过程可能包括多个步骤。引导加载程序的用途是装载内核以及基于 RAM 的初始文件系统 (initramfs)。有关 GRUB 2 的详细信息，请参见<xref linkend="cha-grub2"/>。
   </para>
   <sect3 xml:id="sec-boot-proc-initialization-x86-aarch" arch="x86_64;aarch64">
    <title>AArch64 和 AMD64/Intel 64 上的初始化和引导加载程序阶段</title>
    <para>
     在打开计算机之后，BIOS 或 UEFI 将初始化屏幕和键盘并测试主内存。直到这一阶段，计算机不访问任何大容量储存媒体。随后，将从 CMOS 值装载有关当前日期、时间和最重要的外设的信息。识别引导媒体及其几何尺寸之后，系统控制权将从 BIOS/UEFI 转到引导加载程序。
    </para>
    <para>
     在装配传统 BIOS 的计算机上，只能装载引导磁盘的第一个 512 字节物理数据扇区（主引导记录，MBR）中的代码。只有极少量的 GRUB 2 代码能够挂载 MBR。引导加载程序的唯一作用就是从 MBR 与第一个分区（MBR 分区表）之间的间隙处，或是从 BIOS 引导分区（GPT 分区表）装载包含文件系统驱动程序的 GRUB 2 核心映像。此映像包含文件系统驱动程序，因此能够访问根文件系统中的 <filename>/boot</filename>。<filename>/boot</filename> 包含 GRUB 2 核心的附加模块以及内核和 initramfs 映像。获取此分区的访问权限后，GRUB 2 会将内核和 initramfs 映像装载到内存中，并将控制权交接到内核。
    </para>
    <para>
     从包含已加密分区 <filename>/boot</filename> 的加密文件系统引导 BIOS 系统时，需要输入解密口令两次。GRUB 2 使用第一次输入的口令来解密 <filename>/boot</filename>，<systemitem class="daemon">systemd</systemitem> 使用第二次输入的口令来装载加密的卷。
    </para>
    <para>
     在装配 UEFI 的计算机上，引导过程比装配传统 BIOS 的计算机要简单得多。固件能够读取包含 GPT 分区表的磁盘的 FAT 格式化系统分区。此 EFI 系统分区（在运行的系统中装载为 <filename>/boot/efi</filename>）可提供足够的空间用于托管由固件直接装载和执行的完备 GRUB 2。
    </para>
    <para>
     如果 BIOS/UEFI 支持网络引导，则也可以配置提供引导加载程序的引导服务器。然后，可以通过 PXE 引导系统。BIOS/UEFI 充当引导加载程序。它会从引导服务器获取引导映像，然后启动系统。这完全不依赖本地硬盘。
    </para>
   </sect3>
   <sect3 xml:id="sec-boot-proc-initialization-zsystems" arch="zseries">
    <title>
     IBM Z 上的初始化和引导加载程序阶段
    </title>
    <para>
     在 IBM Z 上，必须通过名为 <command>zipl</command>（z 初始程序装载）的引导加载程序初始化引导进程。尽管 <command>zipl</command> 支持读取不同的文件系统，但它不支持 SLE 默认文件系统 (Btrfs) 或者从快照引导。因此，<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> 使用两阶段的引导过程来确保引导时完全支持 Btrfs：
    </para>
    <procedure>
     <step>
      <para>
       <command>zipl</command> 从 <filename>/boot/zipl</filename> 分区引导，该分区可格式化为 Ext2、Ext3、Ext4 或 XFS 文件系统。此分区包含一个极简的内核，以及一个装载到内存中的 initramfs。initramfs 包含 Btrfs 驱动程序（及其他组件）和引导加载程序 GRUB 2。内核是使用参数 <literal>initgrub</literal>（告知要启动 GRUB 2）启动的。
      </para>
     </step>
     <step>
      <para>
       内核会挂载根文件系统，使 <filename>/boot</filename> 可访问。现在，将从 initramfs 启动 GRUB 2。GRUB 2 从 <filename>/boot/grub2/grub.cfg</filename> 读取其配置，并从 <filename>/boot</filename> 装载最终的内核和 initramfs。现在，将通过 Kexec 装载新内核。
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-proc-kernel">
   <title>内核阶段</title>
   <para>
    引导加载程序转交系统控制权后，所有体系结构中的引导过程都是相同的。引导加载程序会将内核和基于 RAM 的初始文件系统 (<systemitem>initramfs</systemitem>) 都装载到内存中，而内核将接管控制权。
   </para>
   <para>
    内核设立内存管理并检测 CPU 类型及其功能后，将初始化硬件，并从内存中挂载使用 <systemitem>initramfs</systemitem> 装载的临时根文件系统。
   </para>

   <sect3 xml:id="sec-boot-initrd">
    <title><systemitem>initramfs</systemitem> 文件</title>
    <para>
     <systemitem>initramfs</systemitem>（初始 RAM 文件系统）是一个小型 cpio 存档，可由内核装载到 RAM 磁盘中。该文件位于 <filename>/boot/initrd</filename> 中。可以使用名为 <command>dracut</command> 的工具创建该文件，有关细节，请参见 <command>man 8 dracut</command>。
    </para>
    <para>
     <systemitem>initramfs</systemitem> 提供了一个极简的 Linux 环境，可用于在挂载实际根文件系统之前执行程序。这个最小的 Linux 环境由 BIOS 或 UEFI 例程载入内存，而且除了需要足够的内存外没有特定的硬件要求。<systemitem>initramfs</systemitem> 存档必须始终提供一个名为 <systemitem>init</systemitem> 的可执行文件，该文件执行根文件系统上的 <systemitem class="daemon">systemd</systemitem> 守护程序，使引导进程得以继续。
    </para>
    <para>
     在能够挂载 root 文件系统并启动操作系统之前，内核需要相应的驱动程序来访问 root 文件系统所在的设备。这些驱动程序可能包括用于特定类型硬盘的特殊驱动程序，甚至还可能包括访问网络文件系统所需的网络驱动程序。根文件系统所需的模块由 <systemitem>init</systemitem> on <systemitem>initramfs</systemitem> 装载。装载模块后，<systemitem class="service">udev</systemitem> 将为 <systemitem>initramfs</systemitem> 提供所需的设备。在引导过程的后面，更改 root 文件系统之后需要重新生成设备。可以使用 <systemitem class="daemon">systemd</systemitem> 单元 <filename>systemd-udev-trigger.service</filename> 来实现此目的。
    </para>

    <sect4 xml:id="sec-boot-initrd-regenerate">
     <title>重新生成 initramfs</title>
     <para>
      由于 <systemitem>initramfs</systemitem> 包含多个驱动程序，因此，每当其中某个驱动程序有新版本发布时，都需要更新 initramfs。在安装包含驱动程序更新的软件包时可以自动完成这种更新。YaST 或 zypper 通过显示用于生成 <systemitem>initramfs</systemitem> 的命令的输出来告知此状况。但在某些情况下，您需要手动重新生成 <systemitem>initramfs</systemitem>：
     </para>
     <itemizedlist>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-drivers"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-raidroot"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-lvmadd"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-kernelvars"/>
       </para>
      </listitem>
     </itemizedlist>

     <variablelist>
      <varlistentry xml:id="var-initrd-regenerate-drivers">
       <term>由于更换硬件而需添加驱动程序</term>
       <listitem>
        <para>
         如果需要更换硬件（例如硬盘），并且引导时此硬件需要内核中的不同驱动程序，则您必须更新 <systemitem>initramfs</systemitem> 文件。
        </para>
        <para>
         打开或创建 <filename>/etc/dracut.conf.d/10-<replaceable>DRIVER</replaceable>.conf</filename> 并添加以下行（请注意前导空格）：
        </para>
        <screen>force_drivers+=" <replaceable>DRIVER1</replaceable>"</screen>
        <para>
         用驱动程序的模块名称替换 <replaceable>DRIVER1</replaceable>。如果您需要添加多个驱动程序，请将其全部列出并以空格分隔：
        </para>
        <screen>force_drivers+=" <replaceable>DRIVER1</replaceable> <replaceable>DRIVER2</replaceable>"</screen>
        <para>
         继续<xref linkend="pro-generate-initramfs"/>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-raidroot">
       <term>将系统目录移到 RAID 或 LVM</term>
       <listitem>
        <para>
         每当您要将正在运行的系统中的交换文件或系统目录（例如 <filename>/usr</filename>）移到 RAID 或逻辑卷时，都需要创建一个包含软件 RAID 或 LVM 驱动程序支持的 <systemitem>initramfs</systemitem>。
        </para>
        <para>
         为此，请在 <filename>/etc/fstab</filename> 中创建相关的项，并挂载新项（例如，使用 <command>mount -a</command> 和/或 <command>swapon -a</command>）。
        </para>
        <para>
         继续<xref linkend="pro-generate-initramfs"/>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-lvmadd">
       <term>将磁盘添加到包含根文件系统的 LVM 组或 Btrfs RAID</term>
       <listitem>
        <para>
         每当您要在包含根文件系统的逻辑卷组或者 Btrfs RAID 中添加（或去除）磁盘时，都需要创建一个支持扩容的卷的 <systemitem>initramfs</systemitem>。请按照<xref linkend="pro-generate-initramfs"/>中的指导操作。
        </para>
        <para>
         继续<xref linkend="pro-generate-initramfs"/>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-kernelvars">
       <term>更改内核变量</term>
       <listitem>
        <para>
         如果您在 <command>sysctl</command> 界面中通过编辑相关文件（<filename>/etc/sysctl.conf</filename> 或 <filename>/etc/sysctl.d/*.conf</filename>）更改了内核变量的值，系统下次重引导时，这项更改将会丢失。即使您在运行时使用 <command>sysctl --system</command> 装载这些值，更改也不会保存到 initramfs 文件中。<systemitem/>您需要根据<xref linkend="pro-generate-initramfs"/>中所述更新该文件。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <procedure xml:id="pro-generate-initramfs">
      <title>生成 initramfs</title>
      <para>
       请注意，以下过程中的所有命令都需要以 <systemitem class="username">root</systemitem> 用户身份执行。
      </para>
      <step>
       <para>
        运行以下命令生成新的 <systemitem>initramfs</systemitem> 文件
       </para>
       <screen>dracut <replaceable>MY_INITRAMFS</replaceable></screen>
       <para>
        请将 <replaceable>MY_INITRAMFS</replaceable> 替换为所选的文件名。新的 <systemitem>initramfs</systemitem> 将创建为 <filename>/boot/<replaceable>MY_INITRAMFS</replaceable></filename>。
       </para>
       <para>
        或者运行 <command>dracut -f</command>。这会重写当前使用的现有文件。
       </para>
      </step>
      <step>
       <para>
        （如果在上一步中运行了 <command>dracut -f</command>，请跳过此步骤。）为上一步中创建的 <systemitem>initramfs</systemitem> 文件创建链接：
       </para>
       <screen>(cd /boot &amp;&amp; ln -sf <replaceable>MY_INITRAMFS</replaceable> initrd)</screen>
      </step>
      <step arch="zseries">
       <para>
        在 IBM Z 体系结构中，另外还需运行 <command>grub2-install</command>。
       </para>
      </step>
     </procedure>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-initramfs">
   <title>Init on initramfs 阶段</title>
   <para>
    由内核从 <systemitem>initramfs</systemitem> 挂载的临时根文件系统包含可执行文件 <systemitem class="daemon">systemd</systemitem>（下面称作 <systemitem>init</systemitem> on <systemitem>initramfs</systemitem>，另请参见<xref linkend="sec-boot-terminology"/>）。此程序执行挂载正确根文件系统所需的全部操作。它为所需的文件系统提供内核功能，并为使用 <systemitem class="service">udev</systemitem> 的大量储存控制器提供设备驱动程序。
   </para>

   <para>
    <systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 的主要用途是准备真实 root 文件系统的挂载和访问。根据您的系统配置的不同，<systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 负责以下任务。
   </para>

   <variablelist>
    <varlistentry>
     <term>装载内核模块</term>
     <listitem>
      <para>
       根据硬件配置的不同，可能需要一些特殊的驱动程序来访问计算机的硬件组件（最重要的组件是硬盘）。要访问最终的 root 文件系统，内核需要装载适当的文件系统驱动程序。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>提供块特殊文件</term>
     <listitem>
      <para>
       内核根据装载的模块生成设备事件。<systemitem class="service">udev</systemitem> 会处理这些事件并在 RAM 文件系统的 <filename>/dev</filename> 中生成所需的特殊块文件。没有这些特殊文件，文件系统和其他设备将不可访问。
      </para>
    </listitem>
    </varlistentry>
    <varlistentry>
     <term>管理 RAID 和 LVM 设置</term>
     <listitem>
      <para>
       如果将系统配置为在 RAID 或 LVM 下保存根文件文件系统，则 <systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 将设置 LVM 或 RAID 以支持以后对根文件系统的访问。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>管理网络配置</term>
     <listitem>
      <para>
       如果将系统配置为使用通过网络挂载的 root 文件系统（通过 NFS 挂载），则 <systemitem>init</systemitem> 必须确保装载了正确的网络驱动程序，并确保将其设置为支持访问 root 文件系统。
      </para>
      <para>
       如果文件系统驻留在一个联网的块设备（如 iSCSI 或 SAN）上，则与储存服务器的连接也由 <systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 设置。<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> 支持在主要目标不可用的情况下从次要 iSCSI 目标引导。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <note>
    <title>处理挂载失败问题</title>
    <para>
     如果根文件系统无法从引导环境中挂载，则必须先对其进行检查和修复，才能继续引导。如果文件系统为 Ext3 和 Ext4，文件系统检查程序将会自动启动。如果是 XFS 和 Btrfs 文件系统，则不会自动开始修复过程，而是向用户显示有关可用于修复文件系统的选项的信息。成功修复文件系统后，退出引导环境将会使系统重试挂载根文件系统。如果挂载成功，将正常继续引导。
    </para>
   </note>

   <sect3 xml:id="sec-boot-linuxrc-initramfs">
    <title>安装过程中的 init on initramfs 阶段</title>
    <para>
     如果在安装过程的初始引导阶段调用 <systemitem>init</systemitem> on <systemitem>initramfs</systemitem>，它要执行的任务将与上述任务不同。请注意，安装系统也不会从 <systemitem>initramfs</systemitem> 启动 <systemitem class="daemon">systemd</systemitem> — 这些任务由 <command>linuxrc</command> 执行。
    </para>

    <variablelist>
     <varlistentry>
      <term>查找安装媒体</term>
      <listitem>
       <para>
        当您启动安装进程时，计算机会装载一个安装内核以及一个包含 YaST 安装程序的特殊 <systemitem>init</systemitem>。YaST 安装程序正在 RAM 文件系统中运行，它需要知道安装媒体的位置，才能访问安装媒体以安装操作系统。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       启动硬件识别并装载适当的内核模块
      </term>
      <listitem>
       <para>
        如<xref linkend="sec-boot-initrd"/>中所述，引导过程从最少的一组驱动程序（可在大多数硬件配置中使用）开始。在 AArch64、POWER 和 AMD64/Intel 64 计算机上，<command>linuxrc</command> 会启动初始硬件扫描进程，以确定适合您的硬件配置的驱动程序集。在 IBM Z 上，需要提供驱动程序及其参数的列表（例如，通过 linuxrc 或 parmfile 提供）。
       </para>
       <para>
        这些驱动程序用于生成引导系统所需的自定义 <systemitem>initramfs</systemitem>。如果引导时不需要这些模块，但冷插拔时需要，您可以使用 <systemitem class="daemon">systemd</systemitem> 装载这些模块。有关详细信息，请参见<xref linkend="sec-boot-systemd-advanced-kernel-modules"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>装载安装系统</term>
      <listitem>
       <para>
        系统在正确识别硬件后会装载相应的驱动程序。<systemitem class="service">udev</systemitem> 程序会创建特殊的设备文件，<command>linuxrc</command> 使用 YaST 安装程序启动安装系统。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>启动 YaST</term>
      <listitem>
       <para>
        最后，<command>linuxrc</command> 启动 YaST，后者则启动软件包安装和系统配置。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>


  <sect2 xml:id="sec-boot-systemd">
   <title>systemd 阶段</title>
   <para>
    找到<quote>实际的</quote>根文件系统后，对其进行错误检查并挂载。如果挂载成功，系统会清理 <systemitem>initramfs</systemitem> 并执行根文件系统上的 <systemitem class="daemon">systemd</systemitem> 守护程序。<systemitem class="daemon">systemd</systemitem> 是 Linux 的系统和服务管理器。它是作为 PID 1 启动的父进程，充当用于启动和维护用户空间服务的 init 系统。有关详细信息，请参见 <xref linkend="cha-systemd"/>。
   </para>
  </sect2>
 </sect1>
</chapter>
