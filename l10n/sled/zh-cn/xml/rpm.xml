<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="rpm.xml" version="5.0" xml:id="sec-rpm">
 <title>RPM - 软件包管理器</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  RPM（RPM 程序包管理器）用于管理软件包。其主要程命令为 <command>rpm</command> 和 <command>rpmbuild</command>。用户、系统管理员和软件包构建人员可以查询强大的 RPM 数据库以获得有关已安装软件的详细信息。
 </para>

 <para>
  <command>rpm</command> 有五种模式：安装、卸装（或更新）软件包、重构建 RPM 数据库、查询 RPM 库或独立 RPM 存档、对软件包执行完整性检查以及对软件包签名。<command>rpmbuild</command> 可用于从原始源构建可安装的软件包。
 </para>

 <para>
  用特殊的二进制格式对可安装 RPM 存档进行打包。这些存档由要安装的程序文件和某些元信息组成，这些元信息供 <command>rpm</command> 在安装过程中配置软件包使用或者储存在 RPM 数据库中进行存档。RPM 存档通常具有扩展名 <filename>.rpm</filename>。
 </para>

 <tip>
  <title>软件开发包</title>
  <para>
   对于数个软件包，软件开发所需的组件（库、标题、包含文件等）已分别封装在不同的软件包中。只有当您要自己编译软件时才需要这些开发包（例如最新的 GNOME 软件包）。可以通过扩展名 <literal>-devel</literal> 确定这些开发包，例如软件包 <systemitem class="resource">alsa-devel</systemitem> 和 <systemitem class="resource">gimp-devel</systemitem>。
  </para>
 </tip>

 <sect2 xml:id="sec-rpm-package-auth">
  <title>校验软件包真实性</title>
  <para>
   RPM 软件包具有 GPG 签名。要校验 RPM 软件包的签名，请使用 <command>rpm --checksig </command>
   <replaceable>PACKAGE</replaceable>-1.2.3.rpm 命令确定该软件包是来自 SUSE 还是另一个可信机构。特别建议对来自互联网的更新软件包使用此命令。
  </para>

  <para os="sles;sled">
   修复操作系统中的问题时，您可能需要将问题临时修复 (PTF) 安装到生产系统中。SUSE 提供的软件包已使用特殊的 PTF 密钥签名。但是，与 SUSE Linux Enterprise 11 不同，SUSE Linux Enterprise 12 系统上默认不会导入此密钥。要手动导入该密钥，请使用以下命令：
  </para>
  <screen os="sles;sled"><prompt>&gt; </prompt><command>sudo</command> rpm --import \
/usr/share/doc/packages/suse-build-key/suse_ptf_key.asc</screen>
  <para os="sles;sled">
   导入该密钥后，您可以在系统上安装 PTF 软件包。
  </para>
 </sect2>

 <sect2 xml:id="sec-rpm-packages-manage">
  <title>管理软件包：安装、更新和卸装</title>
  <para>
   安装 RPM 存档的步骤通常十分简单，执行运行：<command>rpm -i </command> <replaceable>软件包</replaceable>.rpm。使用此命令可以安装软件包，但前提是满足其依赖项并且不与其他软件包冲突。如果出现错误消息，<command>rpm</command> 将请求那些需要安装的软件包以满足依赖项要求。在后台，RPM 数据库确保不出现冲突 － 一个特定文件只能属于一个软件包。通过选择不同的选项，您可以强制 <command>rpm</command> 忽略这些默认设置，但这只供专家用户使用。否则，将影响系统的完整性并可能使系统无法更新。
  </para>
  <para>
   选项 <option>-U</option> 或 <option>--upgrade</option> 以及 <option>-F</option> 或 <option>--freshen</option> 可用于更新软件包（例如，<command>rpm -F </command>
   <replaceable>PACKAGE</replaceable>.rpm）。此命令将删除旧版本的文件并立即安装新文件。两个版本之间的差别是：<option>-U</option> 安装系统中以前不存在的软件包，而 <option>-F</option> 只更新以前安装的软件包。更新时，<command>rpm</command> 使用以下策略小心更新配置文件：
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     如果配置文件未被系统管理员更改，则 <command>rpm</command> 将安装适当文件的新版本。系统管理员无需执行任何操作。
    </para>
   </listitem>
   <listitem>
    <para>
     如果配置文件在更新前曾被系统管理员更改，则 <command>rpm</command> 会以扩展名 <filename>.rpmorig</filename> 或 <filename>.rpmsave</filename>（备份文件）保存更改的文件，并安装新软件包中的版本。仅当原先安装的文件和较新的版本不同时，才执行此操作。如果是这种情况，则将备份文件（<filename>.rpmorig</filename> 或 <filename>.rpmsave</filename>）与新安装的文件进行比较，并在新文件中再次进行更改。之后，请删除所有 <filename>.rpmorig</filename> 和 <filename>.rpmsave</filename> 文件，以免以后的更新出现问题。
    </para>
   </listitem>
   <listitem>
    <para>
     如果配置文件已存在<emphasis>并且</emphasis> <filename>.spec</filename> 文件中指定了 <option>noreplace</option> 标签，则出现 <filename>.rpmnew</filename> 文件。
    </para>
   </listitem>
  </itemizedlist>
  <para>
   更新后，在使用 <filename>.rpmsave</filename> 和 <filename>.rpmnew</filename> 文件进行比较后应将它们删除，从而防止它们阻碍以后的更新。如果 RPM 数据库以前未能识别文件，则将为其指派扩展名 <filename>.rpmorig</filename>。
  </para>
  <para>
   否则，将使用 <filename>.rpmsave</filename>。换句话说，<filename>.rpmorig</filename> 是从异系统格式更新为 RPM 的结果。<filename>而 </filename>.rpmsave 是从较早的 RPM 更新为较新的 RPM 的结果。<filename>.rpmnew</filename> 不提供任何有关系统管理员是否对配置文件进行过任何更改的信息。<filename>/var/adm/rpmconfigcheck</filename> 中提供这些文件的列表。不覆盖某些配置文件（如 <filename>/etc/httpd/httpd.conf</filename>）以允许继续进行操作。
  </para>
  <para>
   <option>-U</option> 开关的作用并<emphasis>不</emphasis>完全等同于使用 <option>-e</option> 选项进行卸载以及使用 <option>-i</option> 选项进行安装，它还有其他作用。只要可能，就可以使用 <option>-U</option>。
  </para>
  <para>
   要去除软件包，请输入 <command>rpm -e</command>
   <replaceable>PACKAGE</replaceable>。仅当不存在未解决的依赖项问题时，此命令才会删除软件包。例如，只要有其他程序需要 Tcl/Tk，理论上就不能删除它。即使是在这种情况下，RPM 也会向数据库寻求帮助。如果出于任何原因无法进行此删除操作（即使<emphasis>不</emphasis>存在其他依赖项），则最好使用选项 <option>--rebuilddb</option> 重构建 RPM 数据库。
  </para>
 </sect2>

 <sect2 xml:id="sec-rpm-delta">
  <title>增量 RPM 软件包</title>
  <para>
   增量 RPM 软件包包含旧版本和新版本的 RPM 软件包之间的差别。在旧 RPM 上应用增量 RPM 将得到全新的 RPM。不需要旧 RPM 的副本，因为增量 RPM 也可以与已安装的 RPM 一起工作。增量 RPM 软件包的大小甚至比补丁 RPM 小，这有利于通过互联网传送更新软件包。缺点是，涉及增量 RPM 的更新操作与使用纯粹 RPM 或补丁 RPM 进行更新的情况相比，占用的 CPU 周期要长得多。
  </para>
  <para>
   <command>makedeltarpm</command> 和 <command>applydelta</command> 二进制文件是增量 RPM 套件（软件包 <systemitem>deltarpm</systemitem>）的一部分，可帮助您创建和应用增量 RPM 软件包。使用以下命令可以创建名为 <filename>new.delta.rpm</filename> 的增量 RPM。以下命令假设 <filename>old.rpm</filename> 和 <filename>new.rpm</filename> 是存在的：
  </para>
<screen><prompt>&gt; </prompt><command>sudo</command> makedeltarpm old.rpm new.rpm new.delta.rpm</screen>
  <para>
   如果旧软件包已经安装，则使用 <command>applydeltarpm</command> 可以从文件系统重新构建新的 RPM：
  </para>
<screen><prompt>&gt; </prompt><command>sudo</command> applydeltarpm new.delta.rpm new.rpm</screen>
  <para>
   如果不访问文件系统而从旧 RPM 得到它，请使用 <option>-r</option> 选项：
  </para>
<screen><prompt>&gt; </prompt><command>sudo</command> applydeltarpm -r old.rpm new.delta.rpm new.rpm</screen>
  <para>
   关于技术详细信息，请参见 <filename>/usr/share/doc/packages/deltarpm/README</filename>。
  </para>
 </sect2>

 <sect2 xml:id="sec-rpm-query">
  <title> RPM查询</title>
  <para>
   带 <option>-q</option> 选项的 <command>rpm</command> 将启动查询，如此用户便可查看 RPM 存档（通过添加选项 <option>-p</option>）并查询已安装软件包的 RPM 数据库。可以使用多个开关指定所需信息的类型。请参见<xref linkend="tab-rpm-query"/>。
  </para>
  <table xml:id="tab-rpm-query">
   <title>基本 RPM 查询选项</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>-i</option>
       </para>
      </entry>
      <entry>
       <para>
        软件包信息
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-l</option>
       </para>
      </entry>
      <entry>
       <para>
        文件列表
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-f FILE</option>
       </para>
      </entry>
      <entry>
       <para>
        查询包含文件 <replaceable>FILE</replaceable> 的软件包（必须使用 <replaceable>FILE</replaceable> 指定完整路径）
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-s</option>
       </para>
      </entry>
      <entry>
       <para>
        带有状态信息的文件列表（间接指定 <option>-l</option>）
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-d</option>
       </para>
      </entry>
      <entry>
       <para>
        仅列出文档文件（间接指定 <literal>-l</literal>）
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-c</option>
       </para>
      </entry>
      <entry>
       <para>
        仅列出配置文件（间接指定 <option>-l</option>）
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--dump</option>
       </para>
      </entry>
      <entry>
       <para>
        带有完整详细信息的文件列表（将用于 <option>-l</option>、<option>-c</option> 或 <option>-d</option>）
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--provides</option>
       </para>
      </entry>
      <entry>
       <para>
        列出软件包中可被另一个软件包通过 <option>--requires</option> 请求的功能
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--requires</option>, <option>-R</option>
       </para>
      </entry>
      <entry>
       <para>
        软件包需要的功能
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>--scripts</option>
       </para>
      </entry>
      <entry>
       <para>
        安装脚本（预安装、后安装、卸载）
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   例如，命令 <command>rpm -q -i wget</command> 显示<xref linkend="aus-update-rpm-i"/> 中所示的信息。
  </para>
  <example xml:id="aus-update-rpm-i">
   <title><command>rpm -q -i wget</command></title>

<screen os="sles;sled"><?dbsuse-fo font-size="0.70em"?>

Name        : wget
Version     : 1.14
Release     : 17.1
Architecture: x86_64
Install Date: Mon 30 Jan 2017 14:01:29 CET
Group       : Productivity/Networking/Web/Utilities
Size        : 2046483
License     : GPL-3.0+
Signature   : RSA/SHA256, Thu 08 Dec 2016 07:48:44 CET, Key ID 70af9e8139db7c82
Source RPM  : wget-1.14-17.1.src.rpm
Build Date  : Thu 08 Dec 2016 07:48:34 CET
Build Host  : sheep09
Relocations : (not relocatable)
Packager    : https://www.suse.com/
Vendor      : SUSE LLC &lt;https://www.suse.com/&gt;
URL         : http://www.gnu.org/software/wget/
Summary     : A Tool for Mirroring FTP and HTTP Servers
Description :
Wget enables you to retrieve WWW documents or FTP files from a server.
This can be done in script files or via the command line.
Distribution: SUSE Linux Enterprise 15
</screen>
  </example>
  <para>
   只有当您指定带有完整路径的完整文件名时，选项 <option>-f</option> 才起作用。根据需要提供任意多个文件名。例如：
  </para>
<screen><prompt>&gt; </prompt>rpm -q -f /bin/rpm /usr/bin/wget
rpm-4.14.1-lp151.13.10.x86_64
wget-1.19.5-lp151.4.1.x86_64
</screen>
  <para>
   如果只知道部分文件名，则可以使用外壳脚本，如<xref linkend="dat-rpm-search"/>所示。当运行所显示的脚本时，将部分文件名以参数的形式传递给脚本。
  </para>
  <example xml:id="dat-rpm-search">
   <title>搜索软件包的脚本</title>
<screen>#! /bin/sh
for i in $(rpm -q -a -l | grep $1); do
    echo "\"$i\" is in package:"
    rpm -q -f $i
    echo ""
done</screen>
  </example>
  <para>
   <command>rpm -q --changelog</command>
   <replaceable>PACKAGE</replaceable> 命令会按日期排序显示有关特定软件包的详细更改信息列表。
  </para>
  <para>
   借助已安装的 RPM 数据库，可以进行校验检查。使用 <option>-V</option> 或 <option>--verify</option> 启动这些检查。将 <command>rpm</command> 与此选项搭配使用，将显示软件包中自安装后已更改的所有文件。<command>rpm</command> 使用八位字符符号来提供有关以下更改的提示：
  </para>
  <table xml:id="tab-rpm-verify">
   <title>RPM 校验选项</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>5</option>
       </para>
      </entry>
      <entry>
       <para>
        MD5 校验和
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>S</option>
       </para>
      </entry>
      <entry>
       <para>
        文件大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>L</option>
       </para>
      </entry>
      <entry>
       <para>
        符号链接
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>T</option>
       </para>
      </entry>
      <entry>
       <para>
        修改时间
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>D</option>
       </para>
      </entry>
      <entry>
       <para>
        主要和次要设备编号
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>U</option>
       </para>
      </entry>
      <entry>
       <para>
        所有者
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>G</option>
       </para>
      </entry>
      <entry>
       <para>
        组
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>M</option>
       </para>
      </entry>
      <entry>
       <para>
        方式（权限和文件类型）
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   对于配置文件，将输出字母 <option>c</option>。例如，对于 <filename>/etc/wgetrc</filename>（<systemitem class="resource">wget</systemitem> 软件包）的更改：
  </para>
<screen><prompt>&gt; </prompt>rpm -V wget
S.5....T c /etc/wgetrc</screen>
  <para>
   RPM 数据库的文件被放置在 <filename>/var/lib/rpm</filename> 中。如果分区 <filename>/usr</filename> 的大小为 1 GB，则此数据库可能会占用将近 30 MB，特别是在完全更新之后。如果数据库比预期大得多，则最好使用选项 <option>--rebuilddb</option> 重构建数据库。在执行此操作之前，制作旧数据库的备份。<command>cron</command> 脚本 <command>cron.daily</command> 每天制作数据库的副本（用 gzip 打包）并将这些副本储存在 <filename>/var/adm/backup/rpmdb</filename> 中。副本的数目是由 <filename>/etc/sysconfig/backup</filename> 中的变量 <systemitem>MAX_RPMDB_BACKUPS</systemitem>（默认值为 <option>5</option>）控制的。对于 1 GB 的 <filename>/usr</filename>，单个备份的大小大约为 1 MB。
  </para>
 </sect2>

 <sect2 xml:id="sec-rpm-sources">
  <title>安装和编译源软件包</title>
  <para>
   所有源软件包都带有 <filename>.src.rpm</filename> 扩展名（源 RPM）。
  </para>
  <note>
   <title>安装的源软件包</title>
   <para>
    源软件包可以从安装媒体复制到硬盘并使用 YaST 解压缩。但是，在软件包管理器中它们不会被标记为已安装 (<literal>[i]</literal>)。这是因为源软件包不是在 RPM 数据库中输入的。只有<emphasis>已安装的</emphasis>操作系统软件列在 RPM 数据库中。<quote>安装</quote>源软件包时，只将源代码添加到系统中。
   </para>
  </note>
  <para>
   以下目录必须可用于 <filename>/usr/src/packages</filename> 中的 <command>rpm</command> 和 <command>rpmbuild</command>（除非在诸如 <filename>/etc/rpmrc</filename> 这样的文件中指定自定义设置）：
  </para>
  <variablelist>
   <varlistentry>
    <term><filename>SOURCES</filename>
    </term>
    <listitem>
     <para>
      存放原始源（<filename>.tar.bz2</filename> 或 <filename>.tar.gz</filename> 文件等）和特定于发行套件的调整（多为 <filename>.diff</filename> 或 <filename>.patch</filename> 文件）
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>SPECS</filename>
    </term>
    <listitem>
     <para>
      代表 <filename>.spec</filename> 文件，类似于元 Makefile，该文件控制<emphasis>构建</emphasis>进程
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>BUILD</filename>
    </term>
    <listitem>
     <para>
      在此目录中解压缩、增补和编译所有源
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>RPMS</filename>
    </term>
    <listitem>
     <para>
      储存完整的二进制软件包的位置
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>SRPMS</filename>
    </term>
    <listitem>
     <para>
      这里是源 RPM
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   使用 YaST 安装源软件包时，所有必需的组件都安装在 <filename>/usr/src/packages</filename> 中：源和调整项位于 <filename>SOURCES</filename> 中，相关的 <filename>.spec</filename> 文件位于 <filename>SPECS</filename> 中。
  </para>
  <warning>
   <title>系统完整性</title>
   <para>
    不要对系统组件（<systemitem class="resource">glibc</systemitem>、<systemitem class="resource">rpm</systemitem> 等）进行试验，因为这样会影响系统的稳定性。
   </para>
  </warning>
  <para>
   下面的示例使用 <filename>wget.src.rpm</filename> 软件包。安装源软件包后，应具有类似以下列表中的文件：
  </para>
<screen>/usr/src/packages/SOURCES/wget-1.19.5.tar.bz2
/usr/src/packages/SOURCES/wgetrc.patch
/usr/src/packages/SPECS/wget.spec</screen>
  <para>
   <command>rpmbuild</command> <option> -b<replaceable>X</replaceable></option>
   <filename> /usr/src/packages/SPECS/wget.spec</filename> 会启动编译。<replaceable>X</replaceable> 是通配符，代表构建进程的不同阶段（有关详细信息，请参见 <option>--help</option> 的输出或 RPM 文档）。以下内容只是简要描述：
  </para>
  <variablelist>
   <varlistentry>
    <term><option>-bp</option>
    </term>
    <listitem>
     <para>
      在 <filename>/usr/src/packages/BUILD</filename> 中准备源：解压和打补丁。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-bc</option>
    </term>
    <listitem>
     <para>
      执行与 <option>-bp</option> 相同的操作，但还进行编译。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-bi</option>
    </term>
    <listitem>
     <para>
      执行与 <option>-bp</option> 相同的操作，但还安装生成的软件。注意：如果软件包不支持 BuildRoot 功能，则可能会重写配置文件。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-bb</option>
    </term>
    <listitem>
     <para>
      执行与 <option>-bi</option> 相同的操作，但还创建二进制软件包。如果编译成功，二进制软件包应该在 <filename>/usr/src/packages/RPMS</filename> 中。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>-ba</option>
    </term>
    <listitem>
     <para>
      执行与 <option>-bb</option> 相同的操作，但还创建源 RPM。如果编译成功，二进制软件包应该在 <filename>/usr/src/packages/SRPMS</filename> 中。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>--short-circuit</option>
    </term>
    <listitem>
     <para>
      跳过某些步骤。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   现在可以使用 <command>rpm </command>
   <option>-i</option> 或最好使用 <command>rpm</command>
   <option> -U</option> 来安装创建的二进制 RPM。使用 <command>rpm</command> 进行安装使它显示在 RPM 数据库中。
  </para>
  <para>
   请记住，规范文件中的 <literal>BuildRoot</literal> 指令已弃用。如果您仍然需要此功能，请使用 <option>--buildroot</option> 选项作为替代方法。
  </para>
 </sect2>

 <sect2 xml:id="sec-rpm-build">
  <title>使用 build 编译 RPM 软件包</title>
  <para>
   许多软件包存在的风险是构建进程中会将许多不需要的文件添加到正在运行的系统中。为防止发生这种情况，请使用 <systemitem>build</systemitem>，它将创建构建软件包的已定义环境。要建立这一 chroot 环境，<command>build</command> 脚本必须和完整的软件包树结构一起提供。可以通过 NFS 或从 DVD 使用硬盘上的此树。使用 <command>build --rpms</command>
   <replaceable>DIRECTORY</replaceable> 设置位置。与 <command>rpm</command> 不同，<command>build</command> 命令在源目录中查找 <filename>.spec</filename> 文件。要用系统中 <filename>/media/dvd</filename> 下挂载的 DVD 构建 <filename>wget</filename>（如上例所示），请以 <systemitem class="username">root</systemitem> 用户身份使用以下命令：
  </para>
<screen><prompt role="root"># </prompt>cd /usr/src/packages/SOURCES/
<prompt role="root"># </prompt>mv ../SPECS/wget.spec .
<prompt role="root"># </prompt>build --rpms /media/dvd/suse/ wget.spec</screen>
  <para>
   随后，将在 <filename>/var/tmp/build-root</filename> 建立一个最小的环境。在此环境中构建软件包。完成后，生成的软件包位于 <filename>/var/tmp/build-root/usr/src/packages/RPMS</filename> 中。
  </para>
  <para>
   <command>build</command> 脚本提供多个其他选项。例如，使脚本优先选择您自己的 RPM、忽略构建环境的初始化或者将 <command>rpm</command> 命令限制在上述阶段之一。使用 <command>build </command> <option>--help</option> 并通过阅读 <command>build</command> 手册页来访问更多信息。
  </para>
 </sect2>

 <sect2 xml:id="sec-rpm-tools">
  <title>用于 RPM 存档和 RPM 数据库的工具</title>
  <para>
   Midnight Commander (<command>mc</command>) 可以显示 RPM 存档的内容并复制部分内容。它将存档表示为虚拟文件系统，提供 Midnight Commander 所有常用的菜单选项。使用 <keycap>F3</keycap> 键显示 <filename>HEADER</filename>。使用光标键和 <keycap function="enter"/> 键查看存档结构。使用 <keycap>F5</keycap> 键复制部分存档。
  </para>
  <para>
   拥有全部功能的软件包管理器将作为 YaST 模块提供。有关详细信息，请参见<xref linkend="cha-yast-software"/>。
  </para>

 </sect2>
</sect1>
