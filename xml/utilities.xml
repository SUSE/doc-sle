<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.util">
 <title>System Monitoring Utilities</title>
 <info>
  <abstract>
   <para>
    There are number of programs, tools, and utilities which you can use to
    examine the status of your system. This chapter introduces some
    and describes their most important and frequently used parameters.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>

 <note os="sles;sled">
  <title>
   Gathering and Analyzing System Information with
   <command>supportconfig</command>
  </title>
  <para>
   Apart from the utilities presented in the following, &productname;
   also contains <command>supportconfig</command>, a tool to create reports
   about the system such as: current kernel version, hardware, installed
   packages, partition setup and much more. These reports are used to
   provide the &suse; support with needed information in case a support
   ticket is created. However, they can also be analyzed for known issues to
   help resolve problems faster. For this purpose, &productname; provides
   both an appliance and a command line tool for Supportconfig Analysis
   (SCA). See <xref linkend="cha.adm.support"/> for details.
  </para>
 </note>

 <para>
  For each of the described commands, examples of the relevant outputs are
  presented. In the examples, the first line is the command itself (after
  the &exampleuser; &gt; or root #). Omissions are indicated with
  square brackets (<literal>[...]</literal>) and long lines are wrapped
  where necessary. Line breaks for long lines are indicated by a backslash
  (<literal>\</literal>).
 </para>
<screen>&prompt.user;command -x -y
output line 1
output line 2
output line 3 is annoyingly long, so long that \
    we need to break it
output line 4
[...]
output line 98
output line 99</screen>
 <para>
  The descriptions have been kept short so that we can include as many
  utilities as possible. Further information for all the commands can be
  found in the manual pages. Most of the commands also understand the
  parameter <option>--help</option>, which produces a brief list of possible
  parameters.
 </para>
 <sect1 xml:id="sec.util.multi">
  <title>Multi-Purpose Tools</title>

  <para>
   While most Linux system monitoring tools monitor only a single aspect of
   the system, there are a few tools with a broader scope. To get
   an overview and find out which part of the system to examine further, use
   these tools first.
  </para>

  <sect2 xml:id="sec.util.multi.vmstat">
   <title><command>vmstat</command></title>
   <para>
    vmstat collects information about processes, memory, I/O, interrupts and
    CPU:
   </para>
   <screen>vmstat [options] [delay [count]]</screen>
   <para>
    When called without values for delay and count, it displays average values
    since the last reboot. When called with a value for delay (in seconds), it
    displays values for the given period (two seconds in the examples
    below). The value for count specifies the number of updates vmstat should
    perform. If not specifies, it will run until manually stopped.
   </para>
   <example>
    <title><command>vmstat</command> Output on a Lightly Used Machine</title>
<screen>&prompt.user;vmstat 2
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0  44264  81520    424 935736    0    0    12    25   27   34  1  0 98   0  0
 0  0  44264  81552    424 935736    0    0     0     0   38   25  0  0 100  0  0
 0  0  44264  81520    424 935732    0    0     0     0   23   15  0  0 100  0  0
 0  0  44264  81520    424 935732    0    0     0     0   36   24  0  0 100  0  0
 0  0  44264  81552    424 935732    0    0     0     0   51   38  0  0 100  0  0
</screen>
   </example>
   <example>
    <title><command>vmstat</command> Output on a Heavily Used Machine (CPU bound)</title>
<screen>&prompt.user;vmstat 2
procs -----------memory----------- ---swap-- -----io---- -system-- -----cpu------
 r  b   swpd   free   buff   cache   si   so    bi    bo   in   cs us sy id wa st
32  1  26236 459640 110240 6312648    0    0  9944     2 4552 6597 95  5  0  0  0
23  1  26236 396728 110336 6136224    0    0  9588     0 4468 6273 94  6  0  0  0
35  0  26236 554920 110508 6166508    0    0  7684 27992 4474 4700 95  5  0  0  0
28  0  26236 518184 110516 6039996    0    0 10830     4 4446 4670 94  6  0  0  0
21  5  26236 716468 110684 6074872    0    0  8734 20534 4512 4061 96  4  0  0  0</screen>
   </example>
   <tip>
    <title>First Line of Output</title>
    <para>
     The first line of the vmstat output always displays average values
     since the last reboot.
    </para>
   </tip>
   <para>
    The columns show the following:
   </para>
   <variablelist>
    <varlistentry>
     <term><guimenu>r</guimenu>
     </term>
     <listitem>
      <para>
       Shows the number of processes in a runnable state. These processes
       are either executing or waiting for a free CPU slot. If the number
       of processes in this column is constantly higher than the number of
       CPUs available, this may be an indication of insufficient CPU power.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>b</guimenu>
     </term>
     <listitem>
      <para>
       Shows the number of processes waiting for a resource other than a
       CPU. A high number in this column may indicate an I/O problem
       (network or disk).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>swpd</guimenu>
     </term>
     <listitem>
      <para>
       The amount of swap space (KB) currently used.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>free</guimenu>
     </term>
     <listitem>
      <para>
       The amount of unused memory (KB).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>inact</guimenu>
     </term>
     <listitem>
      <para>
       Recently unused memory that can be reclaimed. This column is only
       visible when calling <command>vmstat</command> with the parameter
       <option>-a</option> (recommended).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>active</guimenu>
     </term>
     <listitem>
      <para>
       Recently used memory that normally does not get reclaimed. This
       column is only visible when calling <command>vmstat</command> with
       the parameter <option>-a</option> (recommended).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>buff</guimenu>
     </term>
     <listitem>
      <para>
       File buffer cache (KB) in RAM that contains file system metadata. This
       column is not visible when calling <command>vmstat</command> with
       the parameter <option>-a</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>cache</guimenu>
     </term>
     <listitem>
      <para>
       Page cache (KB) in RAM with the actual contents of files. This
       column is not visible when calling <command>vmstat</command> with
       the parameter <option>-a</option>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>si / so</guimenu>
     </term>
     <listitem>
      <para>
       Amount of data (KB) that is moved from swap to RAM
       (<literal>si</literal>) or from RAM to swap (<literal>so</literal>)
       per second. High <literal>so</literal> values over a long period of
       time may indicate that an application is leaking memory and the
       leaked memory is being swapped out. High <literal>si</literal> values
       over a long period of time could mean that an application that was
       inactive for a very long time is now active again. Combined high
       <literal>si</literal> and <literal>so</literal> values for prolonged
       periods of time are evidence of swap thrashing and may indicate that
       more RAM needs to be installed in the system because there is not
       enough memory to hold the working set size.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>bi</guimenu>
     </term>
     <listitem>
      <para>
       Number of blocks per second received from a block device (for
       example, a disk read). Note that swapping also impacts the values
       shown here. The block size may vary between file systems but can
       be determined using the stat utility. If throughput data is
       required then iostat may be used.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>bo</guimenu>
     </term>
     <listitem>
      <para>
       Number of blocks per second sent to a block device (for example, a
       disk write). Note that swapping also impacts the values shown here.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>in</guimenu>
     </term>
     <listitem>
      <para>
       Interrupts per second. A high value may indicate a high I/O level
       (network and/or disk), but could also be triggered for other reasons
       such as inter-processor interrupts triggered by another activity.
       Make sure to also check <filename>/proc/interrupts</filename> to
       identify the source of interrupts.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>cs</guimenu>
     </term>
     <listitem>
      <para>
       Number of context switches per second. This is the number of times
       that the kernel replaces executable code of one program in memory
       with that of another program.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>us</guimenu>
     </term>
     <listitem>
      <para>
       Percentage of CPU usage executing application code.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>sy</guimenu>
     </term>
     <listitem>
      <para>
       Percentage of CPU usage executing kernel code.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>id</guimenu>
     </term>
     <listitem>
      <para>
       Percentage of CPU time spent idling. If this value is zero over a
       longer time, your CPU(s) are working to full capacity. This
       is not necessarily a bad sign&mdash;rather refer to the values in
       columns <guimenu>r</guimenu> and <guimenu>b</guimenu> to determine if
       your machine is equipped with sufficient CPU power.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>wa</guimenu>
     </term>
     <listitem>
      <para>
       If "wa" time is non-zero, it indicates throughput lost because of
       waiting for I/O. This may be inevitable, for example, if a file is
       being read for the first time, background writeback cannot keep up,
       and so on. It can also be an indicator for a hardware bottleneck
       (network or hard disk). Lastly, it can indicate a potential for
       tuning the virtual memory manager (refer to
       <xref linkend="cha.tuning.memory"/>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>st</guimenu>
     </term>
     <listitem>
      <para>
       Percentage of CPU time stolen from a virtual machine.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    See <command>vmstat</command> <option>--help</option> for more options.
   </para>
  </sect2>

  <xi:include href="tuning_utilities_dstat.xml"/>

  <sect2 xml:id="sec.util.multi.sar">
   <title>System Activity Information: <command>sar</command></title>
   <para>
    <command>sar</command> can generate extensive reports on almost all
    important system activities, among them CPU, memory, IRQ usage, IO, or
    networking. It can also generate reports on the fly.
    <command>sar</command> gathers all their data from the
    <filename>/proc</filename> file system.
   </para>
   <note>
    <title>sysstat Package</title>
    <para>
     <command>sar</command> is a part of the <package>sysstat</package>
     package either with &yast;, or with <command>zypper in
     sysstat</command>.
    </para>
   </note>
   <sect3 xml:id="sec.util.multi.sar.report">
    <title>Generating reports with <command>sar</command></title>
    <para>
     To generate reports on the fly, call <command>sar</command> with an
     interval (seconds) and a count. To generate reports from files specify
     a file name with the option <option>-f</option> instead of interval and
     count. If file name, interval and count are not specified,
     <command>sar</command> attempts to generate a report from
     <filename>/var/log/sa/sa<replaceable>DD</replaceable></filename>, where
     <replaceable>DD</replaceable> stands for the current day. This is the
     default location to where <command>sadc</command> (the system
     activity data collector) writes its data.
     Query multiple files with multiple -f options.
    </para>
<screen>sar 2 10                         # on-the-fly report, 10 times every 2 seconds
sar -f ~/reports/sar_2014_07_17  # queries file sar_2014_07_17
sar                              # queries file from today in /var/log/sa/
cd /var/log/sa &amp;&amp; \
sar -f sa01 -f sa02              # queries files /var/log/sa/0[12]</screen>
    <para>
     Find examples for useful <command>sar</command> calls and their
     interpretation below. For detailed information on the meaning of each
     column, refer to the <systemitem>man (1)</systemitem> of
     <command>sar</command>. Also refer to the man page for more options and
     reports&mdash;<command>sar</command> offers plenty of them.
    </para>
    <sect4 xml:id="sec.util.multi.sar.report.cpu">
     <title>CPU Usage Report: <command>sar</command></title>
     <para>
      When called with no options, <command>sar</command> shows a basic
      report about CPU usage. On multi-processor machines, results for all
      CPUs are summarized. Use the option <option>-P ALL</option> to also
      see statistics for individual CPUs.
     </para>
<screen>&prompt.root;sar 10 5
Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (2 CPU)

17:51:29        CPU     %user     %nice   %system   %iowait    %steal     %idle
17:51:39        all     57,93      0,00      9,58      1,01      0,00     31,47
17:51:49        all     32,71      0,00      3,79      0,05      0,00     63,45
17:51:59        all     47,23      0,00      3,66      0,00      0,00     49,11
17:52:09        all     53,33      0,00      4,88      0,05      0,00     41,74
17:52:19        all     56,98      0,00      5,65      0,10      0,00     37,27
Average:        all     49,62      0,00      5,51      0,24      0,00     44,62</screen>
     <para>
      <guimenu>%iowait</guimenu> displays the percentage of time that the
      CPU was idle while waiting for an I/O request. If this value is
      significantly higher than zero over a longer time, there is a
      bottleneck in the I/O system (network or hard disk). If the
      <guimenu>%idle</guimenu> value is zero over a longer time,
      your CPU is working at capacity.
     </para>
    </sect4>
    <sect4 xml:id="sec.util.multi.sar.report.memory">
     <title>Memory Usage Report: <command>sar</command> <option>-r</option></title>
     <para>
      Generate an overall picture of the system memory (RAM) by using the
      option <option>-r</option>:
     </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;sar -r 10 5
Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (2 CPU)

17:55:27 kbmemfree kbmemused %memused kbbuffers kbcached kbcommit %commit kbactive kbinact kbdirty
17:55:37    104232   1834624    94.62        20   627340  2677656   66.24   802052  828024    1744
17:55:47     98584   1840272    94.92        20   624536  2693936   66.65   808872  826932    2012
17:55:57     87088   1851768    95.51        20   605288  2706392   66.95   827260  821304    1588
17:56:07     86268   1852588    95.55        20   599240  2739224   67.77   829764  820888    3036
17:56:17    104260   1834596    94.62        20   599864  2730688   67.56   811284  821584    3164
Average:     96086   1842770    95.04        20   611254  2709579   67.03   815846  823746    2309</screen>
     <para>
      The columns <guimenu>kbcommit</guimenu> and <guimenu>%commit</guimenu>
      show an approximation of the maximum amount of memory (RAM and swap)
      that the current workload could need. While
      <guimenu>kbcommit</guimenu> displays the absolute number in kilobytes,
      <guimenu>%commit</guimenu> displays a percentage.
     </para>
    </sect4>
    <sect4 xml:id="sec.util.multi.sar.report.paging">
     <title>Paging Statistics Report: <command>sar</command> <option>-B</option></title>
     <para>
      Use the option <option>-B</option> to display the kernel paging
      statistics.
     </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;sar -B 10 5
Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (2 CPU)

18:23:01 pgpgin/s pgpgout/s fault/s majflt/s pgfree/s pgscank/s pgscand/s pgsteal/s %vmeff
18:23:11   366.80     11.60  542.50     1.10  4354.80      0.00      0.00      0.00   0.00
18:23:21     0.00    333.30 1522.40     0.00 18132.40      0.00      0.00      0.00   0.00
18:23:31    47.20    127.40 1048.30     0.10 11887.30      0.00      0.00      0.00   0.00
18:23:41    46.40      2.50  336.10     0.10  7945.00      0.00      0.00      0.00   0.00
18:23:51     0.00    583.70 2037.20     0.00 17731.90      0.00      0.00      0.00   0.00
Average:    92.08    211.70 1097.30     0.26 12010.28      0.00      0.00      0.00   0.00</screen>
     <para>
      The <guimenu>majflt/s</guimenu> (major faults per second) column shows
      how many pages are loaded from disk into memory. The source of the
      faults may be file accesses or faults. At times, many
      major faults are normal. For example, during application start-up
      time. If major faults are experienced for the entire lifetime of the
      application it may be an indication that there is insufficient main
      memory, particularly if combined with large amounts of direct scanning
      (pgscand/s).
     </para>
     <para>
      The <guimenu>%vmeff</guimenu> column shows the number of pages scanned
      (<guimenu>pgscand/s</guimenu>) in relation to the ones being reused
      from the main memory cache or the swap cache
      (<guimenu>pgsteal/s</guimenu>). It is a measurement of the efficiency
      of page reclaim. Healthy values are either near 100 (every inactive
      page swapped out is being reused) or 0 (no pages have been scanned).
      The value should not drop below 30.
     </para>
    </sect4>
    <sect4 xml:id="sec.util.multi.sar.report.disk">
     <title>Block Device Statistics Report: <command>sar</command> <option>-d</option></title>
     <para>
      Use the option <option>-d</option> to display the block device (hard
      disk, optical drive, USB storage device, etc.). Make sure to use the
      additional option <option>-p</option> (pretty-print) to make the
      <guimenu>DEV</guimenu> column readable.
     </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;sar -d -p 10 5
 Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (2 CPU)

18:46:09 DEV   tps rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
18:46:19 sda  1.70    33.60      0.00     19.76      0.00      0.47      0.47      0.08
18:46:19 sr0  0.00     0.00      0.00      0.00      0.00      0.00      0.00      0.00

18:46:19 DEV   tps rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
18:46:29 sda  8.60   114.40    518.10     73.55      0.06      7.12      0.93      0.80
18:46:29 sr0  0.00     0.00      0.00      0.00      0.00      0.00      0.00      0.00

18:46:29 DEV   tps rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
18:46:39 sda 40.50  3800.80    454.90    105.08      0.36      8.86      0.69      2.80
18:46:39 sr0  0.00     0.00      0.00      0.00      0.00      0.00      0.00      0.00

18:46:39 DEV   tps rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
18:46:49 sda  1.40     0.00    204.90    146.36      0.00      0.29      0.29      0.04
18:46:49 sr0  0.00     0.00      0.00      0.00      0.00      0.00      0.00      0.00

18:46:49 DEV   tps rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
18:46:59 sda  3.30     0.00    503.80    152.67      0.03      8.12      1.70      0.56
18:46:59 sr0  0.00     0.00      0.00      0.00      0.00      0.00      0.00      0.00

Average: DEV   tps rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
Average: sda 11.10   789.76    336.34    101.45      0.09      8.07      0.77      0.86
Average: sr0  0.00     0.00      0.00      0.00      0.00      0.00      0.00      0.00</screen>
     <para>
      Compare the <guimenu>Average</guimenu> values for
      <guimenu>tps</guimenu>, <guimenu>rd_sec/s</guimenu>, and
      <guimenu>wr_sec/s</guimenu> of all disks. Constantly high values in
      the <guimenu>svctm</guimenu> and <guimenu>%util</guimenu> columns
      could be an indication that I/O subsystem is a bottleneck.
     </para>
     <para>
      If the machine uses multiple disks, then it is best if I/O is
      interleaved evenly between disks of equal speed and capacity. It will
      be necessary to take into account whether the storage has multiple
      tiers. Furthermore, if there are multiple paths to storage then
      consider what the link saturation will be when balancing how storage
      is used.
     </para>
    </sect4>
    <sect4 xml:id="sec.util.multi.sar.report.net">
     <title>Network Statistics Reports: <command>sar</command> <option>-n <replaceable>KEYWORD</replaceable></option></title>
     <para>
      The option <option>-n</option> lets you generate multiple network
      related reports. Specify one of the following keywords along with the
      <option>-n</option>:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        <emphasis>DEV</emphasis>: Generates a statistic report for all
        network devices
       </para>
      </listitem>
      <listitem>
       <para>
        <emphasis>EDEV</emphasis>: Generates an error statistics report for
        all network devices
       </para>
      </listitem>
      <listitem>
       <para>
        <emphasis>NFS</emphasis>: Generates a statistic report for an NFS
        client
       </para>
      </listitem>
      <listitem>
       <para>
        <emphasis>NFSD</emphasis>: Generates a statistic report for an NFS
        server
       </para>
      </listitem>
      <listitem>
       <para>
        <emphasis>SOCK</emphasis>: Generates a statistic report on sockets
       </para>
      </listitem>
      <listitem>
       <para>
        <emphasis>ALL</emphasis>: Generates all network statistic reports
       </para>
      </listitem>
     </itemizedlist>
    </sect4>
   </sect3>
   <sect3 xml:id="sec.util.multi.sar.visual">
    <title>Visualizing <command>sar</command> Data</title>
    <para>
     <command>sar</command> reports are not always easy to parse for humans.
     kSar, a Java application visualizing your <command>sar</command> data,
     creates easy-to-read graphs. It can even generate PDF reports. kSar
     takes data generated on the fly and past data from a file. kSar
     is licensed under the BSD license and is available from
     <link xlink:href="https://sourceforge.net/projects/ksar/"/>.
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.system">
  <title>System Information</title>

  <para/>

  <sect2 xml:id="sec.util.system.iostat">
   <title>Device Load Information: <command>iostat</command></title>
   <para>
    To monitor the system device load, use <command>iostat</command>. It
    generates reports that can be useful for better balancing the load
    between physical disks attached to your system.
   </para>
   <para>
    To be able to use <command>iostat</command>, install the package
    <package>sysstat</package>.
   </para>
   <para>
    The first <command>iostat</command> report shows statistics collected
    since the system was booted. Subsequent reports cover the time since the
    previous report.
   </para>
<screen>&prompt.user;iostat
Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (4 CPU)

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
          17.68    4.49    4.24    0.29    0.00   73.31

Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn
sdb               2.02        36.74        45.73    3544894    4412392
sda               1.05         5.12        13.47     493753    1300276
sdc               0.02         0.14         0.00      13641         37</screen>
   <para>
    Invoking <command>iostat</command> in this way will help you find out
    whether throughput is different from your expectation, but not why.
    Such questions can be better answered by an extended report which can be
    generated by invoking <command>iostat</command> <option>-x</option>.
    Extended reports additionally include, for example, information on average
    queue sizes and average wait times.
    It may also be easier to evaluate the data if idle block devices are
    excluded using the <option>-z</option> switch.
    Find definitions for each of the displayed column titles in the
    man page of <command>iostat</command> (<command>man 1 iostat</command>).
   </para>
   <remark>
    The man page seemed clear enough on the column titles. What might help
    additionally though is some kind of practical guide like:
    "if (this value) is (lower/higher than expected), check whether
    (this config is set/this hardware is working)".
    - sknorr, 2015-10-09
   </remark>
   <para>
    You can also specify that a certain device should be monitored at specified
    intervals.
    For example, to generate five reports at three-second intervals for the
    device <systemitem>sda</systemitem>, use:
   </para>
<screen>&prompt.user;<command>iostat</command> -p sda 3 5</screen>
   <para>
    To show statistics of network file systems (NFS), there are two similar
    utilities:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <command>nfsiostat-sysstat</command> is included with the
      package <package>sysstat</package>.
     </para>
    </listitem>
    <listitem>
     <para>
      <command>nfsiostat</command> is included with the package
      <package>nfs-client</package>.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec.util.system.mpstat.monitoring">
   <title>Processor Activity Monitoring: <command>mpstat</command></title>
   <para>
    The utility <command>mpstat</command> examines activities of each
    available processor. If your system has one processor only, the global
    average statistics will be reported.
   </para>
   <para>
    The timing arguments work the same way as with the
    <command>iostat</command> command. Entering <command>mpstat 2
    5</command> prints five reports for all processors in two-second
    intervals.
   </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;mpstat 2 5
Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (2 CPU)

13:51:10  CPU   %usr  %nice  %sys  %iowait  %irq  %soft  %steal  %guest  %gnice   %idle
13:51:12  all   8,27   0,00  0,50     0,00  0,00   0,00    0,00    0,00    0,00   91,23
13:51:14  all  46,62   0,00  3,01     0,00  0,00   0,25    0,00    0,00    0,00   50,13
13:51:16  all  54,71   0,00  3,82     0,00  0,00   0,51    0,00    0,00    0,00   40,97
13:51:18  all  78,77   0,00  5,12     0,00  0,00   0,77    0,00    0,00    0,00   15,35
13:51:20  all  51,65   0,00  4,30     0,00  0,00   0,51    0,00    0,00    0,00   43,54
Average:  all  47,85   0,00  3,34     0,00  0,00   0,40    0,00    0,00    0,00   48,41</screen>
   <para>
    From the <command>mpstat</command> data, you can see:
   </para>
   <itemizedlist>
    <listitem>
     <para>
    The ratio between the <guimenu>%usr</guimenu> and <guimenu>%sys</guimenu>.
    For example, a ratio
    of 10:1 indicates the workload is mostly running application code
    and analysis should focus on the application. A ratio of 1:10
    indicates the workload is mostly kernel-bound and tuning the kernel
    is worth considering. Alternatively, determine why the application is
    kernel-bound and see if that can be alleviated.
     </para>
    </listitem>
    <listitem>
     <para>
    Whether there is a subset of CPUs that are nearly fully
    utilized even if the system is lightly loaded overall. Few
    hot CPUs can indicate that the workload is not parallelized and
    could benefit from executing on a machine with a smaller number of
    faster processors.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec.util.system.turbostat" arch="x86_64">
   <title>Processor Frequency Monitoring: <command>turbostat</command></title>
   <para>
    <command>turbostat</command> shows frequencies, load, temperature, and power
    of &amd64;/&intel64; processors. It can operate in two modes: If called
    with a command, the command process is forked and statistics are displayed
    upon command completion. When run without a command, it will display
    updated statistics every five seconds. Note that
    <command>turbostat</command> requires the kernel module
    <systemitem>msr</systemitem> to be loaded.
   </para>
   <screen>&prompt.sudo;turbostat find /etc -type d -exec true {} \;
0.546880 sec
     CPU Avg_MHz   Busy% Bzy_MHz TSC_MHz
       -     416   28.43    1465    3215
       0     631   37.29    1691    3215
       1     416   27.14    1534    3215
       2     270   24.30    1113    3215
       3     406   26.57    1530    3214
       4     505   32.46    1556    3214
       5     270   22.79    1184    3214</screen>
   <para>
    The output depends on the CPU type and may vary. To display more details
    such as temperature and power, use the <option>--debug</option> option. For
    more command line options and an explanation of the field descriptions,
    refer to <command>man 8 turbostat</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.system.pidstat">
   <title>Task Monitoring: <command>pidstat</command></title>
   <para>
    If you need to see what load a particular task applies to your system,
    use <command>pidstat</command> command. It prints activity of every
    selected task or all tasks managed by Linux kernel if no task is
    specified. You can also set the number of reports to be displayed and
    the time interval between them.
   </para>
   <para>
    For example, <command>pidstat</command> <option>-C</option> firefox 2 3
    prints the load statistic for tasks whose command name includes the
    string <quote>firefox</quote>. There will be three reports printed at
    two second intervals.
   </para>
<screen>&prompt.root;pidstat -C firefox 2 3
Linux 4.4.21-64-default (&wsI;)         10/12/16        _x86_64_        (2 CPU)

14:09:11      UID       PID    %usr %system  %guest    %CPU   CPU  Command
14:09:13     1000       387   22,77    0,99    0,00   23,76     1  firefox

14:09:13      UID       PID    %usr %system  %guest    %CPU   CPU  Command
14:09:15     1000       387   46,50    3,00    0,00   49,50     1  firefox

14:09:15      UID       PID    %usr %system  %guest    %CPU   CPU  Command
14:09:17     1000       387   60,50    7,00    0,00   67,50     1  firefox

Average:      UID       PID    %usr %system  %guest    %CPU   CPU  Command
Average:     1000       387   43,19    3,65    0,00   46,84     -  firefox</screen>
   <para>
    Similarly, <command>pidstat</command> <option>-d</option> can be
    used to estimate how much I/O tasks are doing, whether they are
    sleeping on that I/O and how many clock ticks the task was stalled.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.dmesg">
   <title>Kernel Ring Buffer: <command>dmesg</command></title>
   <para>
    The Linux kernel keeps certain messages in a ring buffer. To view these
    messages, enter the command <command>dmesg -T</command>.
   </para>
   <para>
    Older events are logged in the &systemd; journal. See
    <xref linkend="cha.journalctl"/> for more information on the journal.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.system.lsof">
   <title>List of Open Files: <command>lsof</command></title>
   <para>
    To view a list of all the files open for the process with process ID
    <replaceable>PID</replaceable>, use <option>-p</option>. For example, to
    view all the files used by the current shell, enter:
   </para>
<screen>&prompt.root;lsof -p $$
COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF  NODE NAME
bash    8842 root  cwd    DIR   0,32      222  6772 /root
bash    8842 root  rtd    DIR   0,32      166   256 /
bash    8842 root  txt    REG   0,32   656584 31066 /bin/bash
bash    8842 root  mem    REG   0,32  1978832 22993 /lib64/libc-2.19.so
[...]
bash    8842 root    2u   CHR  136,2      0t0     5 /dev/pts/2
bash    8842 root  255u   CHR  136,2      0t0     5 /dev/pts/2</screen>
   <para>
    The special shell variable <literal>$$</literal>, whose value is the
    process ID of the shell, has been used.
   </para>
   <para>
    When used with <option>-i</option>, <command>lsof</command> lists
    currently open Internet files as well:
   </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;lsof -i
COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
wickedd-d  917 root    8u  IPv4  16627      0t0  UDP *:bootpc
wickedd-d  918 root    8u  IPv6  20752      0t0  UDP [fe80::5054:ff:fe72:5ead]:dhcpv6-client
sshd      3152 root    3u  IPv4  18618      0t0  TCP *:ssh (LISTEN)
sshd      3152 root    4u  IPv6  18620      0t0  TCP *:ssh (LISTEN)
master    4746 root   13u  IPv4  20588      0t0  TCP localhost:smtp (LISTEN)
master    4746 root   14u  IPv6  20589      0t0  TCP localhost:smtp (LISTEN)
sshd      8837 root    5u  IPv4 293709      0t0  TCP &wsI;.suse.de:ssh-&gt;&wsII;.suse.de:33619 (ESTABLISHED)
sshd      8837 root    9u  IPv6 294830      0t0  TCP localhost:x11 (LISTEN)
sshd      8837 root   10u  IPv4 294831      0t0  TCP localhost:x11 (LISTEN)</screen>
  </sect2>

  <sect2 xml:id="sec.util.system.udevmonitor">
   <title>Kernel and udev Event Sequence Viewer: <command>udevadm monitor</command></title>
   <para>
    <command>udevadm monitor</command> listens to the kernel uevents and
    events sent out by a udev rule and prints the device path (DEVPATH) of
    the event to the console. This is a sequence of events while connecting
    a USB memory stick:
   </para>
   <note>
    <title>Monitoring udev Events</title>
    <para>
     Only root user is allowed to monitor udev events by running the
     <command>udevadm</command> command.
    </para>
    <remark>aherrmann, 2016-09-30: I think normal users are able to
    run this command; in general double check all examples in this
    chapter whether they really need to be run as root.</remark>
   </note>
<screen>UEVENT[1138806687] add@/devices/pci0000:00/0000:00:1d.7/usb4/4-2/4-2.2
UEVENT[1138806687] add@/devices/pci0000:00/0000:00:1d.7/usb4/4-2/4-2.2/4-2.2
UEVENT[1138806687] add@/class/scsi_host/host4
UEVENT[1138806687] add@/class/usb_device/usbdev4.10
UDEV  [1138806687] add@/devices/pci0000:00/0000:00:1d.7/usb4/4-2/4-2.2
UDEV  [1138806687] add@/devices/pci0000:00/0000:00:1d.7/usb4/4-2/4-2.2/4-2.2
UDEV  [1138806687] add@/class/scsi_host/host4
UDEV  [1138806687] add@/class/usb_device/usbdev4.10
UEVENT[1138806692] add@/devices/pci0000:00/0000:00:1d.7/usb4/4-2/4-2.2/4-2.2
UEVENT[1138806692] add@/block/sdb
UEVENT[1138806692] add@/class/scsi_generic/sg1
UEVENT[1138806692] add@/class/scsi_device/4:0:0:0
UDEV  [1138806693] add@/devices/pci0000:00/0000:00:1d.7/usb4/4-2/4-2.2/4-2.2
UDEV  [1138806693] add@/class/scsi_generic/sg1
UDEV  [1138806693] add@/class/scsi_device/4:0:0:0
UDEV  [1138806693] add@/block/sdb
UEVENT[1138806694] add@/block/sdb/sdb1
UDEV  [1138806694] add@/block/sdb/sdb1
UEVENT[1138806694] mount@/block/sdb/sdb1
UEVENT[1138806697] umount@/block/sdb/sdb1</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.processes">
  <title>Processes</title>

  <para/>

  <sect2 xml:id="sec.util.processes.ipcs">
   <title>Interprocess Communication: <command>ipcs</command></title>
   <para>
    The command <command>ipcs</command> produces a list of the IPC resources
    currently in use:
   </para>
<screen>&prompt.root;ipcs
------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status
0x00000000 65536      tux        600        524288     2          dest
0x00000000 98305      tux        600        4194304    2          dest
0x00000000 884738     root       600        524288     2          dest
0x00000000 786435     tux        600        4194304    2          dest
0x00000000 12058628   tux        600        524288     2          dest
0x00000000 917509     root       600        524288     2          dest
0x00000000 12353542   tux        600        196608     2          dest
0x00000000 12451847   tux        600        524288     2          dest
0x00000000 11567114   root       600        262144     1          dest
0x00000000 10911763   tux        600        2097152    2          dest
0x00000000 11665429   root       600        2336768    2          dest
0x00000000 11698198   root       600        196608     2          dest
0x00000000 11730967   root       600        524288     2          dest

------ Semaphore Arrays --------
key        semid      owner      perms      nsems
0xa12e0919 32768      tux        666        2
</screen>
  </sect2>

  <sect2 xml:id="sec.util.processes.ps">
   <title>Process List: <command>ps</command></title>
   <para>
    The command <command>ps</command> produces a list of processes. Most
    parameters must be written without a minus sign. Refer to <command>ps
    --help</command> for a brief help or to the man page for extensive help.
   </para>
   <para>
    To list all processes with user and command line information, use
    <command>ps axu</command>:
   </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.user;ps axu
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.3  34376  4608 ?        Ss   Jul24   0:02 /usr/lib/systemd/systemd
root         2  0.0  0.0      0     0 ?        S    Jul24   0:00 [kthreadd]
root         3  0.0  0.0      0     0 ?        S    Jul24   0:00 [ksoftirqd/0]
root         5  0.0  0.0      0     0 ?        S&lt;   Jul24   0:00 [kworker/0:0H]
root         6  0.0  0.0      0     0 ?        S    Jul24   0:00 [kworker/u2:0]
root         7  0.0  0.0      0     0 ?        S    Jul24   0:00 [migration/0]
[...]
&exampleuser_plain;      12583  0.0  0.1 185980  2720 ?        Sl   10:12   0:00 /usr/lib/gvfs/gvfs-mtp-volume-monitor
&exampleuser_plain;      12587  0.0  0.1 198132  3044 ?        Sl   10:12   0:00 /usr/lib/gvfs/gvfs-gphoto2-volume-monitor
&exampleuser_plain;      12591  0.0  0.1 181940  2700 ?        Sl   10:12   0:00 /usr/lib/gvfs/gvfs-goa-volume-monitor
&exampleuser_plain;      12594  8.1 10.6 1418216 163564 ?      Sl   10:12   0:03 /usr/bin/gnome-shell
&exampleuser_plain;      12600  0.0  0.3 393448  5972 ?        Sl   10:12   0:00 /usr/lib/gnome-settings-daemon-3.0/gsd-printer
&exampleuser_plain;      12625  0.0  0.6 227776 10112 ?        Sl   10:12   0:00 /usr/lib/gnome-control-center-search-provider
&exampleuser_plain;      12626  0.5  1.5 890972 23540 ?        Sl   10:12   0:00 /usr/bin/nautilus --no-default-window
[...]</screen>
   <para>
    To check how many <command>sshd</command> processes are running, use the
    option <option>-p</option> together with the command
    <command>pidof</command>, which lists the process IDs of the given
    processes.
   </para>
<screen>&prompt.user;ps -p $(pidof sshd)
  PID TTY      STAT   TIME COMMAND
 1545 ?        Ss     0:00 /usr/sbin/sshd -D
 4608 ?        Ss     0:00 sshd: root@pts/0</screen>
   <para>
    The process list can be formatted according to your needs. The option
    <option>L</option> returns a list of all keywords. Enter the following
    command to issue a list of all processes sorted by memory usage:
   </para>
<screen>&prompt.user;ps ax --format pid,rss,cmd --sort rss
  PID   RSS CMD
  PID   RSS CMD
    2     0 [kthreadd]
    3     0 [ksoftirqd/0]
    4     0 [kworker/0:0]
    5     0 [kworker/0:0H]
    6     0 [kworker/u2:0]
    7     0 [migration/0]
    8     0 [rcu_bh]
[...]
12518 22996 /usr/lib/gnome-settings-daemon-3.0/gnome-settings-daemon
12626 23540 /usr/bin/nautilus --no-default-window
12305 32188 /usr/bin/Xorg :0 -background none -verbose
12594 164900 /usr/bin/gnome-shell</screen>
   <variablelist>
    <title>Useful <command>ps</command> Calls</title>
    <varlistentry>
     <term><command>ps aux</command><option>--sort
       <replaceable>COLUMN</replaceable></option>
     </term>
     <listitem>
      <para>
       Sort the output by <replaceable>COLUMN</replaceable>. Replace
       <replaceable>COLUMN</replaceable> with
      </para>
      <simplelist>
       <member><option>pmem</option> for physical memory ratio</member>
       <member><option>pcpu</option> for CPU ratio</member>
       <member><option>rss</option> for resident set size (non-swapped physical
        memory)</member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>ps axo pid,%cpu,rss,vsz,args,wchan</command>
     </term>
     <listitem>
      <para>
       Shows every process, their PID, CPU usage ratio, memory size
       (resident and virtual), name, and their syscall.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>ps axfo pid,args</command>
     </term>
     <listitem>
      <para>
       Show a process tree.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.util.pstree">
   <title>Process Tree: <command>pstree</command></title>
   <para>
    The command <command>pstree</command> produces a list of processes in
    the form of a tree:
   </para>
<!-- fs: Updated on 2014-02-13 -->
<screen>&prompt.user;pstree
systemd---accounts-daemon---{gdbus}
        |                 |-{gmain}
        |-at-spi-bus-laun---dbus-daemon
        |                 |-{dconf worker}
        |                 |-{gdbus}
        |                 |-{gmain}
        |-at-spi2-registr---{gdbus}
        |-cron
        |-2*[dbus-daemon]
        |-dbus-launch
        |-dconf-service---{gdbus}
        |               |-{gmain}
        |-gconfd-2
        |-gdm---gdm-simple-slav---Xorg
        |     |                 |-gdm-session-wor---gnome-session---gnome-setti+
        |     |                 |                 |               |-gnome-shell+++
        |     |                 |                 |               |-{dconf work+
        |     |                 |                 |               |-{gdbus}
        |     |                 |                 |               |-{gmain}
        |     |                 |                 |-{gdbus}
        |     |                 |                 |-{gmain}
        |     |                 |-{gdbus}
        |     |                 |-{gmain}
        |     |-{gdbus}
        |     |-{gmain}
[...]</screen>
   <para>
    The parameter <option>-p</option> adds the process ID to a given name.
    To have the command lines displayed as well, use the <option>-a</option>
    parameter:
   </para>
  </sect2>

  <sect2 xml:id="sec.util.processes.top">
   <title>Table of Processes: <command>top</command></title>
   <para>
    The command <command>top</command> (an abbreviation of <quote>table of
    processes</quote>) displays a list of processes that is refreshed every
    two seconds. To terminate the program, press <keycap>Q</keycap>. The
    parameter <option>-n 1</option> terminates the program after a single
    display of the process list. The following is an example output of the
    command <command>top -n 1</command>:
   </para>
   <remark>aherrmann, 2016-09-30: It seems that default refressh time
   (called delay) differs, e.g. 3 seconds</remark>
<screen>&prompt.user;top -n 1
Tasks: 128 total,   1 running, 127 sleeping,   0 stopped,   0 zombie
%Cpu(s):  2.4 us,  1.2 sy,  0.0 ni, 96.3 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem:   1535508 total,   699948 used,   835560 free,      880 buffers
KiB Swap:  1541116 total,        0 used,  1541116 free.   377000 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
    1 root      20   0  116292   4660   2028 S 0.000 0.303   0:04.45 systemd
    2 root      20   0       0      0      0 S 0.000 0.000   0:00.00 kthreadd
    3 root      20   0       0      0      0 S 0.000 0.000   0:00.07 ksoftirqd+
    5 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 kworker/0+
    6 root      20   0       0      0      0 S 0.000 0.000   0:00.00 kworker/u+
    7 root      rt   0       0      0      0 S 0.000 0.000   0:00.00 migration+
    8 root      20   0       0      0      0 S 0.000 0.000   0:00.00 rcu_bh
    9 root      20   0       0      0      0 S 0.000 0.000   0:00.24 rcu_sched
   10 root      rt   0       0      0      0 S 0.000 0.000   0:00.01 watchdog/0
   11 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 khelper
   12 root      20   0       0      0      0 S 0.000 0.000   0:00.00 kdevtmpfs
   13 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 netns
   14 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 writeback
   15 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 kintegrit+
   16 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 bioset
   17 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 crypto
   18 root       0 -20       0      0      0 S 0.000 0.000   0:00.00 kblockd</screen>
   <para>
    By default the output is sorted by CPU usage (column
    <guimenu>%CPU</guimenu>, shortcut <keycombo> <keycap function="shift"/>
    <keycap>P</keycap> </keycombo>). Use the following key combinations to
    change the sort field:
   </para>
   <simplelist>
    <member><keycombo><keycap function="shift"/><keycap>M</keycap></keycombo>: Resident Memory (<guimenu>RES</guimenu>) </member>
    <member><keycombo><keycap function="shift"/><keycap>N</keycap></keycombo>: Process ID (<guimenu>PID</guimenu>) </member>
    <member><keycombo><keycap function="shift"/><keycap>T</keycap></keycombo>: Time (<guimenu>TIME+</guimenu>) </member>
   </simplelist>
   <para>
    To use any other field for sorting, press <keycap>F</keycap> and select
    a field from the list. To toggle the sort order, Use <keycombo>
    <keycap function="shift"/> <keycap>R</keycap> </keycombo>.
   </para>
   <para>
    The parameter <option>-U <replaceable>UID</replaceable></option>
    monitors only the processes associated with a particular user. Replace
    <replaceable>UID</replaceable> with the user ID of the user. Use
    <command>top -U $(id -u)</command> to show processes of the current user
   </para>
  </sect2>

  <sect2 xml:id="sec.util.processes.virtualtop" arch="zseries">
   <title>&zseries; Hypervisor Monitor: <command>hyptop</command></title>
   <remark condition="generic"> 2011-07-18 - fs: Fate #311766 </remark>
   <para>
    <command>hyptop</command> provides a dynamic real-time view of an
    &zseries; hypervisor environment, using the kernel infrastructure via
    debugfs. It works with either the z/VM or the LPAR hypervisor. Depending
    on the available data it, for example, shows CPU and memory consumption
    of active LPARs or z/VM guests. It provides a curses based user
    interface similar to the <command>top</command> command.
    <command>hyptop</command> provides two windows:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <guimenu>sys_list</guimenu>: Lists systems that the
      current hypervisor is running
     </para>
    </listitem>
    <listitem>
     <para>
      <guimenu>sys</guimenu>: Shows one system in more detail
     </para>
    </listitem>
   </itemizedlist>
   <para>
    You can run <command>hyptop</command> in interactive mode (default) or
    in batch mode with the <option>-b</option> option. Help in the
    interactive mode is available by pressing <keycap>?</keycap> after
    <command>hyptop</command> is started.
   </para>
   <para>
    Output for the <guimenu>sys_list</guimenu> window under LPAR:
   </para>
<screen>12:30:48 | CPU-T: IFL(18) CP(3) UN(3)     ?=help
system  #cpu    cpu   mgm    Cpu+  Mgm+   online
(str)    (#)    (%)   (%)    (hm)  (hm)    (dhm)
H05LP30   10 461.14 10.18 1547:41  8:15 11:05:59
H05LP33    4 133.73  7.57  220:53  6:12 11:05:54
H05LP50    4  99.26  0.01  146:24  0:12 10:04:24
H05LP02    1  99.09  0.00  269:57  0:00 11:05:58
TRX2CFA    1   2.14  0.03    3:24  0:04 11:06:01
H05LP13    6   1.36  0.34    4:23  0:54 11:05:56
TRX1      19   1.22  0.14   13:57  0:22 11:06:01
TRX2      20   1.16  0.11   26:05  0:25 11:06:00
H05LP55    2   0.00  0.00    0:22  0:00 11:05:52
H05LP56    3   0.00  0.00    0:00  0:00 11:05:52
         413 823.39 23.86 3159:57 38:08 11:06:01</screen>
   <para>
    Output for the "sys_list" window under z/VM:
   </para>
<screen>12:32:21 | CPU-T: UN(16)                          ?=help
system   #cpu    cpu    Cpu+   online memuse memmax wcur
(str)     (#)    (%)    (hm)    (dhm)  (GiB)  (GiB)  (#)
T6360004    6 100.31  959:47 53:05:20   1.56   2.00  100
T6360005    2   0.44    1:11  3:02:26   0.42   0.50  100
T6360014    2   0.27    0:45 10:18:41   0.54   0.75  100
DTCVSW1     1   0.00    0:00 53:16:42   0.01   0.03  100
T6360002    6   0.00  166:26 40:19:18   1.87   2.00  100
OPERATOR    1   0.00    0:00 53:16:42   0.00   0.03  100
T6360008    2   0.00    0:37 30:22:55   0.32   0.75  100
T6360003    6   0.00 3700:57 53:03:09   4.00   4.00  100
NSLCF1      1   0.00    0:02 53:16:41   0.03   0.25  500
EREP        1   0.00    0:00 53:16:42   0.00   0.03  100
PERFSVM     1   0.00    0:53  2:21:12   0.04   0.06    0
TCPIP       1   0.00    0:01 53:16:42   0.01   0.12 3000
DATAMOVE    1   0.00    0:05 53:16:42   0.00   0.03  100
DIRMAINT    1   0.00    0:04 53:16:42   0.01   0.03  100
DTCVSW2     1   0.00    0:00 53:16:42   0.01   0.03  100
RACFVM      1   0.00    0:00 53:16:42   0.01   0.02  100
           75 101.57 5239:47 53:16:42  15.46  22.50 3000</screen>
   <para>
    Output for the <guimenu>sys</guimenu> window under LPAR:
   </para>
<screen>14:08:41 | H05LP30 | CPU-T: IFL(18) CP(3) UN(3)                  ? = help
cpuid   type    cpu   mgm visual.
(#)    (str)    (%)   (%) (vis)
0        IFL  96.91  1.96 |############################################ |
1        IFL  81.82  1.46 |#####################################        |
2        IFL  88.00  2.43 |########################################     |
3        IFL  92.27  1.29 |##########################################   |
4        IFL  83.32  1.05 |#####################################        |
5        IFL  92.46  2.59 |##########################################   |
6        IFL   0.00  0.00 |                                             |
7        IFL   0.00  0.00 |                                             |
8        IFL   0.00  0.00 |                                             |
9        IFL   0.00  0.00 |                                             |
             534.79 10.78</screen>
   <para>
    Output for the <guimenu>sys</guimenu> window under z/VM:
   </para>
<screen>15:46:57 | T6360003 | CPU-T: UN(16)                  ? = help
cpuid     cpu visual
(#)       (%) (vis)
0      548.72 |#########################################    |
        548.72</screen>
  </sect2>

  <sect2 xml:id="sec.util.processes.iotop">
   <title>A top-like I/O Monitor: <command>iotop</command></title>
   <para>
    The <command>iotop</command> utility displays a table of I/O usage by
    processes or threads.
   </para>
   <note>
    <title>Installing <command>iotop</command></title>
    <para>
     <command>iotop</command> is not installed by default. You need to
     install it manually with <command>zypper in iotop</command> as
     &rootuser;.
    </para>
   </note>
   <para>
    <command>iotop</command> displays columns for the I/O bandwidth read and
    written by each process during the sampling period. It also displays the
    percentage of time the process spent while swapping in and while waiting
    on I/O. For each process, its I/O priority (class/level) is shown. In
    addition, the total I/O bandwidth read and written during the sampling
    period is displayed at the top of the interface.
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The <keycap function="left"/> and <keycap function="right"/> keys
      change the sorting.
     </para>
    </listitem>
    <listitem>
     <para>
      <keycap>R</keycap> reverses the sort order.
     </para>
    </listitem>
    <listitem>
     <para>
      <keycap>O</keycap> toggles between showing all processes and threads
      (default view) and showing only those doing I/O. (This function is
      similar to adding <option>--only</option> on command line.)
     </para>
    </listitem>
    <listitem>
     <para>
      <keycap>P</keycap> toggles between showing threads (default view) and
      processes. (This function is similar to <option>--only</option>.)
     </para>
    </listitem>
    <listitem>
     <para>
      <keycap>A</keycap> toggles between showing the current I/O bandwidth
      (default view) and accumulated I/O operations since
      <command>iotop</command> was started. (This function is similar to
      <option>--accumulated</option>.)
     </para>
    </listitem>
    <listitem>
     <para>
      <keycap>I</keycap> lets you change the priority of a thread or a
      process's threads.
     </para>
    </listitem>
    <listitem>
     <para>
      <keycap>Q</keycap> quits <command>iotop</command>.
     </para>
    </listitem>
    <listitem>
     <para>
      Pressing any other key will force a refresh.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Following is an example output of the command <command>iotop
    --only</command>, while <command>find</command> and
    <command>emacs</command> are running:
   </para>
<screen>&prompt.root;iotop --only
Total DISK READ: 50.61 K/s | Total DISK WRITE: 11.68 K/s
  TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND
 3416 be/4 &exampleuser_plain;         50.61 K/s    0.00 B/s  0.00 %  4.05 % find /
  275 be/3 root        0.00 B/s    3.89 K/s  0.00 %  2.34 % [jbd2/sda2-8]
 5055 be/4 &exampleuser_plain;          0.00 B/s    3.89 K/s  0.00 %  0.04 % emacs</screen>
   <para>
    <command>iotop</command> can be also used in a batch mode
    (<literal>-b</literal>) and its output stored in a file for later
    analysis. For a complete set of options, see the manual page
    (<command>man 8 iotop</command>).
   </para>
  </sect2>

  <sect2 xml:id="sec.util.processes.nice">
   <title>Modify a process's niceness: <command>nice</command> and <command>renice</command></title>
   <para>
    The kernel determines which processes require more CPU time than others
    by the process's nice level, also called niceness. The higher the
    <quote>nice</quote> level of a process is, the less CPU time it will
    take from other processes. Nice levels range from -20 (the least
    <quote>nice</quote> level) to 19. Negative values can only be set by
    &rootuser;.
   </para>
   <para>
    Adjusting the niceness level is useful when running a non time-critical
    process that lasts long and uses large amounts of CPU time. For example,
    compiling a kernel on a system that also performs other tasks. Making
    such a process <quote>nicer</quote>, ensures that the other tasks, for
    example a Web server, will have a higher priority.
   </para>
   <para>
    Calling <command>nice</command> without any parameters prints the
    current niceness:
   </para>
<screen>&prompt.user;nice
0</screen>
   <para>
    Running <command>nice</command> <replaceable>COMMAND</replaceable>
    increments the current nice level for the given command by 10. Using
    <command>nice</command> <option>-n
    <replaceable>LEVEL</replaceable></option>
    <replaceable>COMMAND</replaceable> lets you specify a new niceness
    relative to the current one.
   </para>
   <para>
    To change the niceness of a running process, use
    <command>renice</command> <replaceable>PRIORITY</replaceable> <option>-p
    <replaceable>PROCESS_ID</replaceable></option>, for example:
   </para>
<screen>&prompt.user;renice +5 3266</screen>
   <para>
    To renice all processes owned by a specific user, use the option
    <option>-u <replaceable>USER</replaceable></option>.
    <remark>sknorr,
     2014-07-23: as far as verbs go, "(to) renice" is pretty terrible</remark>
    Process groups are reniced by the option <option>-g <replaceable>PROCESS_GROUP_ID</replaceable></option>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.memory">
  <title>Memory</title>

  <para/>

  <sect2 xml:id="sec.util.memory.free">
   <title>Memory Usage: <command>free</command></title>
   <para>
    The utility <command>free</command> examines RAM and swap usage. Details
    of both free and used memory and swap areas are shown:
   </para>
<screen>&prompt.user;free
             total       used       free     shared    buffers     cached
Mem:      32900500   32703448     197052          0     255668    5787364
-/+ buffers/cache:   26660416    6240084
Swap:      2046972     304680    1742292</screen>
   <para>
    The options <option>-b</option>, <option>-k</option>,
    <option>-m</option>, <option>-g</option> show the output in bytes, KB,
    MB, or GB, respectively. The parameter <option>-s delay</option> ensures
    that the display is refreshed every <replaceable>DELAY</replaceable>
    seconds. For example, <command>free -s 1.5</command> produces an update
    every 1.5 seconds.
   </para>
  </sect2>

  <!-- Info provider: Michal Hocko <mhocko@suse.cz> -->
  <sect2 xml:id="sec.util.memory.meminfo">
   <title>Detailed Memory Usage: <filename>/proc/meminfo</filename></title>
   <para>
    Use <filename>/proc/meminfo</filename> to get more detailed information
    on memory usage than with <command>free</command>. Actually
    <command>free</command> uses some data from this file. See an
    example output from a 64-bit system below. Note that it slightly differs
    on 32-bit systems because of different memory management:
   </para>
<screen>MemTotal:        1942636 kB
MemFree:         1294352 kB
MemAvailable:    1458744 kB
Buffers:             876 kB
Cached:           278476 kB
SwapCached:            0 kB
Active:           368328 kB
Inactive:         199368 kB
Active(anon):     288968 kB
Inactive(anon):    10568 kB
Active(file):      79360 kB
Inactive(file):   188800 kB
Unevictable:          80 kB
Mlocked:              80 kB
SwapTotal:       2103292 kB
SwapFree:        2103292 kB
Dirty:                44 kB
Writeback:             0 kB
AnonPages:        288592 kB
Mapped:            70444 kB
Shmem:             11192 kB
Slab:              40916 kB
SReclaimable:      17712 kB
SUnreclaim:        23204 kB
KernelStack:        2000 kB
PageTables:        10996 kB
NFS_Unstable:          0 kB
Bounce:                0 kB
WritebackTmp:          0 kB
CommitLimit:     3074608 kB
Committed_AS:    1407208 kB
VmallocTotal:   34359738367 kB
VmallocUsed:      145996 kB
VmallocChunk:   34359588844 kB
HardwareCorrupted:     0 kB
AnonHugePages:     86016 kB
HugePages_Total:       0
HugePages_Free:        0
HugePages_Rsvd:        0
HugePages_Surp:        0
Hugepagesize:       2048 kB
DirectMap4k:       79744 kB
DirectMap2M:     2017280 kB</screen>
   <para>
    These entries stand for the following:
   </para>
   <!--
   Helpful:
   + https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/filesystems/proc.txt?id=HEAD#n809
   + http://wiki.fcctt.org/index.php?title=FC39Understanding_Virtual_Memory_Statistics_in_/proc/meminfo/en
   - sknorr, 2015-10-06
   -->
   <variablelist>
    <varlistentry>
     <term><guimenu>MemTotal</guimenu></term>
     <listitem>
      <para>
       Total amount of RAM.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>MemFree</guimenu></term>
     <listitem>
      <para>
       Amount of unused RAM.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>MemAvailable</guimenu></term>
     <listitem>
      <para>
       Estimate of how much memory is available for starting new applications
       without swapping.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Buffers</guimenu></term>
     <listitem>
      <para>
       File buffer cache in RAM containing file system metadata.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Cached</guimenu></term>
     <listitem>
      <para>
       Page cache in RAM.
       This excludes buffer cache and swap cache, but includes
       <guimenu>Shmem</guimenu> memory.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>SwapCached</guimenu></term>
     <listitem>
      <para>
       Page cache for swapped-out memory.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <guimenu>Active</guimenu>, <guimenu>Active(anon)</guimenu>,
      <guimenu>Active(file)</guimenu>
     </term>
     <listitem>
      <para>
       Recently used memory that will not be reclaimed unless necessary or on
       explicit request.
       <guimenu>Active</guimenu> is the sum of <guimenu>Active(anon)</guimenu>
       and <guimenu>Active(file)</guimenu>:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <guimenu>Active(anon)</guimenu> tracks swap-backed memory.
         This includes private and shared anonymous mappings and
         private file pages after copy-on-write.
        </para>
       </listitem>
       <listitem>
        <para>
         <guimenu>Active(file)</guimenu> tracks other file system backed
         memory.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <guimenu>Inactive</guimenu>, <guimenu>Inactive(anon)</guimenu>,
      <guimenu>Inactive(file)</guimenu>
     </term>
     <listitem>
      <para>
       Less recently used memory that will usually be reclaimed first.
       <guimenu>Inactive</guimenu> is the sum of
       <guimenu>Inactive(anon)</guimenu> and <guimenu>Inactive(file)</guimenu>:
      </para>
      <itemizedlist>
       <listitem>
        <para>
         <guimenu>Inactive(anon)</guimenu> tracks swap backed memory.
         This includes private and shared anonymous mappings and
         private file pages after copy-on-write.
        </para>
       </listitem>
       <listitem>
        <para>
         <guimenu>Inactive(file)</guimenu> tracks other file system backed
         memory.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Unevictable</guimenu></term>
     <listitem>
      <para>
       Amount of memory that cannot be reclaimed (for example, because it is
       <guimenu>Mlocked</guimenu> or used as a RAM disk).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Mlocked</guimenu></term>
     <listitem>
      <para>
       Amount of memory that is backed by the
       <systemitem>mlock</systemitem> system call.
       <systemitem>mlock</systemitem> allows processes to define which part of
       physical RAM their virtual memory should be mapped to.
       However, <systemitem>mlock</systemitem> does not guarantee this
       placement.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>SwapTotal</guimenu></term>
     <listitem>
      <para>
       Amount of swap space.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>SwapFree</guimenu></term>
     <listitem>
      <para>
       Amount of unused swap space.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Dirty</guimenu>
     </term>
     <listitem>
      <para>
       Amount of memory waiting to be written to disk, because it contains
       changes compared to the backing storage. Dirty data can be explicitly
       synchronized either by the application or by the kernel after a short
       delay. A large amount of dirty data may take considerable time to write
       to disk resulting in stalls. The total amount of dirty data that can
       exist at any time can be controlled with the
       <command>sysctl</command> parameters <literal>vm.dirty_ratio</literal>
       or <literal>vm.dirty_bytes</literal> (refer to <xref
       linkend="cha.tuning.memory.usage.writeback"/> for more details).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Writeback</guimenu>
     </term>
     <listitem>
      <para>
       Amount of memory that is currently being written to disk.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Mapped</guimenu>
     </term>
     <listitem>
      <para>
       Memory claimed with the <systemitem>mmap</systemitem> system call.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Shmem</guimenu></term>
     <listitem>
      <para>
       Memory shared between groups of processes, such as IPC data,
       <systemitem>tmpfs</systemitem> data, and shared anonymous memory.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Slab</guimenu></term>
     <listitem>
      <para>
       Memory allocation for internal data structures of the kernel.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>SReclaimable</guimenu></term>
     <listitem>
      <para>
       Slab section that can be reclaimed, such as caches (inode, dentry, etc.).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>SUnreclaim</guimenu></term>
     <listitem>
      <para>
       Slab section that cannot be reclaimed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>KernelStack</guimenu></term>
     <listitem>
      <para>
       Amount of kernel space memory used by applications (through system calls).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>PageTables</guimenu></term>
     <listitem>
      <para>
       Amount of memory dedicated to page tables of all processes.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>NFS_Unstable</guimenu></term>
     <listitem>
      <para>
       NFS pages that have already been sent to the server, but are not yet
       committed there.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Bounce</guimenu></term>
     <listitem>
      <para>
       Memory used for bounce buffers of block devices.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>WritebackTmp</guimenu></term>
     <listitem>
      <para>
       Memory used by FUSE for temporary writeback buffers.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>CommitLimit</guimenu></term>
     <listitem>
      <para>
       Amount of memory available to the system based on the overcommit
       ratio setting. This is only enforced if strict overcommit accounting
       is enabled.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Committed_AS</guimenu></term>
     <listitem>
      <para>
       An approximation of the total amount of memory (RAM and swap) that the
       current workload would need in the worst case.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>VmallocTotal</guimenu></term>
     <listitem>
      <para>
       Amount of allocated kernel virtual address space.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>VmallocUsed</guimenu></term>
     <listitem>
      <para>
       Amount of used kernel virtual address space.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>VmallocChunk</guimenu></term>
     <listitem>
      <para>
       The largest contiguous block of available kernel virtual address space.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>HardwareCorrupted</guimenu></term>
     <listitem>
      <para>
       Amount of failed memory (can only be detected when using ECC RAM).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>AnonHugePages</guimenu></term>
     <listitem>
      <para>
       Anonymous hugepages that are mapped into user space page tables.
       These are allocated transparently for processes without being
       specifically requested, therefore they are also known as
       <emphasis>transparent hugepages</emphasis> (THP).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>HugePages_Total</guimenu></term>
     <listitem>
      <para>
       Number of preallocated hugepages for use by
       <systemitem>SHM_HUGETLB</systemitem> and
       <systemitem>MAP_HUGETLB</systemitem> or through the
       <systemitem>hugetlbfs</systemitem> file system, as defined in
       <filename>/proc/sys/vm/nr_hugepages</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>HugePages_Free</guimenu></term>
     <listitem>
      <para>
       Number of hugepages available.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>HugePages_Rsvd</guimenu></term>
     <listitem>
      <para>
       Number of hugepages that are committed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>HugePages_Surp</guimenu></term>
     <listitem>
      <para>
       Number of hugepages available beyond
       <guimenu>HugePages_Total</guimenu> (<quote>surplus</quote>), as defined
       in <filename>/proc/sys/vm/nr_overcommit_hugepages</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>Hugepagesize</guimenu></term>
     <listitem>
      <para>
       Size of a hugepage&mdash;on &x86-64; the default is 2048&nbsp;KB.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><guimenu>DirectMap4k</guimenu> etc.</term>
     <listitem>
      <para>
       Amount of kernel memory that is mapped to pages with a given size (in the
       example: 4&nbsp;kB).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.util.memory.smaps">
   <title>Process Memory Usage: smaps</title>
   <para>
    Exactly determining how much memory a certain process is consuming is
    not possible with standard tools like <command>top</command> or
    <command>ps</command>. Use the smaps subsystem, introduced in kernel
    2.6.14, if you need exact data. It can be found at
    <filename>/proc/<replaceable>PID</replaceable>/smaps</filename> and
    shows you the number of clean and dirty memory pages the process with
    the ID <replaceable>PID</replaceable> is using at that time. It
    differentiates between shared and private memory, so you can see
    how much memory the process is using without including memory shared
    with other processes. For more information see
    <filename>/usr/src/linux/Documentation/filesystems/proc.txt</filename>
    (requires the package
    <systemitem class="resource">kernel-source</systemitem> to be
    installed).
   </para>
   <para>
    smaps is expensive to read. Therefore it is not recommended to monitor
    it regularly, but only when closely monitoring a certain process.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.networking">
  <title>Networking</title>

  <tip>
   <title>Traffic Shaping</title>
   <para>
    In case the network bandwidth is lower than expected, you should first
    check if any traffic shaping rules are active for your network segment.
   </para>
  </tip>

  <sect2 xml:id="sec.util.networking.ip">
   <title>Basic Network Diagnostics: <command>ip</command></title>
   <para>
    <command>ip</command> is a powerful tool to set up and control network
    interfaces. You can also use it to quickly view basic statistics about
    network interfaces of the system. For example, whether the interface is
    up or how many errors, dropped packets, or packet collisions there are.
   </para>
   <para>
    If you run <command>ip</command> with no additional parameter, it
    displays a help output. To list all network interfaces, enter
    <command>ip addr show</command> (or abbreviated as <command>ip
    a</command>). <command>ip addr show up</command> lists only running
    network interfaces. <command>ip -s link show</command>
    <replaceable>DEVICE</replaceable> lists statistics for the specified
    interface only:
   </para>
<screen>&prompt.root;ip -s link show br0
6: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT
    link/ether 00:19:d1:72:d4:30 brd ff:ff:ff:ff:ff:ff
    RX: bytes  packets  errors  dropped overrun mcast
    6346104756 9265517  0       10860   0       0
    TX: bytes  packets  errors  dropped carrier collsns
    3996204683 3655523  0       0       0       0</screen>
   <para>
    <command>ip</command> can also show interfaces
    (<option>link</option>), routing tables (<option>route</option>), and
    much more&mdash;refer to <command>man 8 ip</command> for details.
   </para>
<screen>&prompt.root;ip route
default via 192.168.2.1 dev eth1
192.168.2.0/24 dev eth0  proto kernel  scope link  src 192.168.2.100
192.168.2.0/24 dev eth1  proto kernel  scope link  src 192.168.2.101
192.168.2.0/24 dev eth2  proto kernel  scope link  src 192.168.2.102</screen>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;ip link
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:44:30:51 brd ff:ff:ff:ff:ff:ff
3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:a3:c1:fb brd ff:ff:ff:ff:ff:ff
4: eth2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:32:a4:09 brd ff:ff:ff:ff:ff:ff</screen>
  </sect2>

  <sect2 xml:id="sec.util.networking.nethogs">
   <title>
    Show the Network Usage of Processes: <command>nethogs</command>
   </title>
   <para>
    In some cases, for example if the network traffic suddenly becomes very
    high, it is desirable to quickly find out which application(s) is/are
    causing the traffic. <command>nethogs</command>, a tool with a design
    similar to <command>top</command>, shows incoming and outgoing traffic for
    all relevant processes:
   </para>
   <screen>PID   USER  PROGRAM                                DEV   SENT   RECEIVED
27145 root   zypper                                eth0  5.719  391.749 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30015        0.102    2.326 KB/sec
26635 tux    /usr/lib64/firefox/firefox            eth0  0.026    0.026 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30045        0.000    0.021 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30045        0.000    0.018 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30015        0.000    0.018 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30045        0.000    0.017 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30045        0.000    0.017 KB/sec
?     root   ..0:113:80c0:8080:10:160:0:100:30045        0.069    0.000 KB/sec
?     root   unknown TCP                                 0.000    0.000 KB/sec

TOTAL                                                  5.916  394.192 KB/sec</screen>
   <para>
    Like in <command>top</command>, <command>nethogs</command> features
    interactive commands:
   </para>
   <simplelist>
    <member><keycap>M</keycap>: cycle between display modes (kb/s, kb, b, mb)
    </member>
    <member><keycap>R</keycap>: sort by <guimenu>RECEIVED</guimenu>
    </member>
    <member><keycap>S</keycap>: sort by <guimenu>SENT</guimenu></member>
    <member><keycap>Q</keycap>: quit</member>
   </simplelist>
  </sect2>
  <sect2 xml:id="sec.util.networking.cards">
   <title>Ethernet Cards in Detail: ethtool</title>
   <para>
    <command>ethtool</command> can display and change detailed aspects of
    your Ethernet network device. By default it prints the current setting
    of the specified device.
   </para>
<screen>&prompt.root;ethtool eth0
Settings for eth0:
 Supported ports: [ TP ]
 Supported link modes:   10baseT/Half 10baseT/Full
                         100baseT/Half 100baseT/Full
                         1000baseT/Full
 Supports auto-negotiation: Yes
 Advertised link modes:  10baseT/Half 10baseT/Full
                         100baseT/Half 100baseT/Full
                         1000baseT/Full
 Advertised pause frame use: No
[...]
 Link detected: yes</screen>
   <para>
    The following table shows <command>ethtool</command> options that you
    can use to query the device for specific information:
   </para>
   <table>
    <title>List of Query Options of <command>ethtool</command></title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry>
        <para>
         <command>ethtool</command> option
        </para>
       </entry>
       <entry>
        <para>
         it queries the device for
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         -a
        </para>
       </entry>
       <entry>
        <para>
         pause parameter information
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         -c
        </para>
       </entry>
       <entry>
        <para>
         interrupt coalescing information
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         -g
        </para>
       </entry>
       <entry>
        <para>
         Rx/Tx (receive/transmit) ring parameter information
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         -i
        </para>
       </entry>
       <entry>
        <para>
         associated driver information
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         -k
        </para>
       </entry>
       <entry>
        <para>
         offload information
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         -S
        </para>
       </entry>
       <entry>
        <para>
         NIC and driver-specific statistics
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec.util.networking.netstat">
   <title>Show the Network Status: <command>ss</command></title>
   <para>
    <command>ss</command> is a tool to dump socket statistics and replaces
    the <command>netstat</command> command. To list all
    connections use <command>ss</command> without parameters:
   </para>
<screen>&prompt.root;ss
Netid  State      Recv-Q Send-Q   Local Address:Port       Peer Address:Port
u_str  ESTAB      0      0                    * 14082                 * 14083
u_str  ESTAB      0      0                    * 18582                 * 18583
u_str  ESTAB      0      0                    * 19449                 * 19450
u_str  ESTAB      0      0      @/tmp/dbus-gmUUwXABPV 18784           * 18783
u_str  ESTAB      0      0      /var/run/dbus/system_bus_socket 19383 * 19382
u_str  ESTAB      0      0      @/tmp/dbus-gmUUwXABPV 18617           * 18616
u_str  ESTAB      0      0      @/tmp/dbus-58TPPDv8qv 19352           * 19351
u_str  ESTAB      0      0                    * 17658                 * 17657
u_str  ESTAB      0      0                    * 17693                 * 17694
[..]</screen>
   <para>
    To show all network ports currently open, use the following command:
   </para>
<screen>&prompt.root;ss -l
Netid  State      Recv-Q Send-Q      Local Address:Port  Peer Address:Port
nl     UNCONN     0      0                 rtnl:4195117                  *
nl     UNCONN     0      0       rtnl:wickedd-auto4/811                  *
nl     UNCONN     0      0       rtnl:wickedd-dhcp4/813                  *
nl     UNCONN     0      0                 rtnl:4195121                  *
nl     UNCONN     0      0                 rtnl:4195115                  *
nl     UNCONN     0      0       rtnl:wickedd-dhcp6/814                  *
nl     UNCONN     0      0                  rtnl:kernel                  *
nl     UNCONN     0      0             rtnl:wickedd/817                  *
nl     UNCONN     0      0                 rtnl:4195118                  *
nl     UNCONN     0      0                rtnl:nscd/706                  *
nl     UNCONN     4352   0              tcpdiag:ss/2381                  *
[...]</screen>
   <para>
    When displaying network connections, you can specify the socket type to
    display: TCP (<option>-t</option>) or UDP (<option>-u</option>) for
    example. The <option>-p</option> option shows the PID and name of the
    program to which each socket belongs.
   </para>
   <para>
    The following example lists all TCP connections and the programs using
    these connections. The <option>-a</option> option make sure all
    established connections (listening and non-listening) are shown. The
    <option>-p</option> option shows the PID and name of the program to
    which each socket belongs.
   </para>
<screen><?dbsuse-fo font-size="7pt"?>&prompt.root;ss -t -a -p
State    Recv-Q Send-Q  Local Address:Port   Peer Address:Port
LISTEN   0      128                  *:ssh                 *:*  users:(("sshd",1551,3))
LISTEN   0      100         127.0.0.1:smtp                 *:*  users:(("master",1704,13))
ESTAB    0      132      10.120.65.198:ssh  10.120.4.150:55715  users:(("sshd",2103,5))
LISTEN   0      128                 :::ssh                :::*  users:(("sshd",1551,4))
LISTEN   0      100               ::1:smtp                :::*  users:(("master",1704,14))</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.proc">
  <title>The <filename>/proc</filename> File System</title>

  <para>
   The <filename>/proc</filename> file system is a pseudo file system in
   which the kernel reserves important information in the form of virtual
   files. For example, display the CPU type with this command:
  </para>

<screen>&prompt.user;cat /proc/cpuinfo
processor       : 0
vendor_id       : GenuineIntel
cpu family      : 6
model           : 30
model name      : Intel(R) Core(TM) i5 CPU         750  @ 2.67GHz
stepping        : 5
microcode       : 0x6
cpu MHz         : 1197.000
cache size      : 8192 KB
physical id     : 0
siblings        : 4
core id         : 0
cpu cores       : 4
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : 11
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 sse4_2 popcnt lahf_lm ida dtherm tpr_shadow vnmi flexpriority ept vpid
bogomips        : 5333.85
clflush size    : 64
cache_alignment : 64
address sizes   : 36 bits physical, 48 bits virtual
power management:
[...]</screen>

  <tip arch="x86_64">
   <title>Detailed Processor Information</title>
   <para>
    Detailed information about the processor on the &x86-64; architecture is
    also available by running <command>x86info</command>.
   </para>
  </tip>

  <para>
   Query the allocation and use of interrupts with the following command:
  </para>

<screen>&prompt.user;cat /proc/interrupts
           CPU0       CPU1       CPU2       CPU3
  0:        121          0          0          0   IO-APIC-edge      timer
  8:          0          0          0          1   IO-APIC-edge      rtc0
  9:          0          0          0          0   IO-APIC-fasteoi   acpi
 16:          0      11933          0          0   IO-APIC-fasteoi   ehci_hcd:+
 18:          0          0          0          0   IO-APIC-fasteoi   i801_smbus
 19:          0     117978          0          0   IO-APIC-fasteoi   ata_piix,+
 22:          0          0    3275185          0   IO-APIC-fasteoi   enp5s1
 23:     417927          0          0          0   IO-APIC-fasteoi   ehci_hcd:+
 40:    2727916          0          0          0  HPET_MSI-edge      hpet2
 41:          0    2749134          0          0  HPET_MSI-edge      hpet3
 42:          0          0    2759148          0  HPET_MSI-edge      hpet4
 43:          0          0          0    2678206  HPET_MSI-edge      hpet5
 45:          0          0          0          0   PCI-MSI-edge      aerdrv, P+
 46:          0          0          0          0   PCI-MSI-edge      PCIe PME,+
 47:          0          0          0          0   PCI-MSI-edge      PCIe PME,+
 48:          0          0          0          0   PCI-MSI-edge      PCIe PME,+
 49:          0          0          0        387   PCI-MSI-edge      snd_hda_i+
 50:     933117          0          0          0   PCI-MSI-edge      nvidia
NMI:       2102       2023       2031       1920   Non-maskable interrupts
LOC:         92         71         57         41   Local timer interrupts
SPU:          0          0          0          0   Spurious interrupts
PMI:       2102       2023       2031       1920   Performance monitoring int+
IWI:      47331      45725      52464      46775   IRQ work interrupts
RTR:          2          0          0          0   APIC ICR read retries
RES:     472911     396463     339792     323820   Rescheduling interrupts
CAL:      48389      47345      54113      50478   Function call interrupts
TLB:      28410      26804      24389      26157   TLB shootdowns
TRM:          0          0          0          0   Thermal event interrupts
THR:          0          0          0          0   Threshold APIC interrupts
MCE:          0          0          0          0   Machine check exceptions
MCP:         40         40         40         40   Machine check polls
ERR:          0
MIS:          0</screen>

  <para>
   The address assignment of executables and libraries is contained in the
   <filename>maps</filename> file:
  </para>

<screen>&prompt.user;cat /proc/self/maps
08048000-0804c000 r-xp 00000000 03:03 17753      /bin/cat
0804c000-0804d000 rw-p 00004000 03:03 17753      /bin/cat
0804d000-0806e000 rw-p 0804d000 00:00 0          [heap]
b7d27000-b7d5a000 r--p 00000000 03:03 11867      /usr/lib/locale/en_GB.utf8/
b7d5a000-b7e32000 r--p 00000000 03:03 11868      /usr/lib/locale/en_GB.utf8/
b7e32000-b7e33000 rw-p b7e32000 00:00 0
b7e33000-b7f45000 r-xp 00000000 03:03 8837       /lib/libc-2.3.6.so
b7f45000-b7f46000 r--p 00112000 03:03 8837       /lib/libc-2.3.6.so
b7f46000-b7f48000 rw-p 00113000 03:03 8837       /lib/libc-2.3.6.so
b7f48000-b7f4c000 rw-p b7f48000 00:00 0
b7f52000-b7f53000 r--p 00000000 03:03 11842      /usr/lib/locale/en_GB.utf8/
[...]
b7f5b000-b7f61000 r--s 00000000 03:03 9109       /usr/lib/gconv/gconv-module
b7f61000-b7f62000 r--p 00000000 03:03 9720       /usr/lib/locale/en_GB.utf8/
b7f62000-b7f76000 r-xp 00000000 03:03 8828       /lib/ld-2.3.6.so
b7f76000-b7f78000 rw-p 00013000 03:03 8828       /lib/ld-2.3.6.so
bfd61000-bfd76000 rw-p bfd61000 00:00 0          [stack]
ffffe000-fffff000 ---p 00000000 00:00 0          [vdso]</screen>

  <para>
   A lot more information can be obtained from the /proc file system. Some
   important files and their contents are:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/proc/devices</filename>
    </term>
    <listitem>
     <para>
      Available devices
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/proc/modules</filename>
    </term>
    <listitem>
     <para>
      Kernel modules loaded
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/proc/cmdline</filename>
    </term>
    <listitem>
     <para>
      Kernel command line
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/proc/meminfo</filename>
    </term>
    <listitem>
     <para>
      Detailed information about memory usage
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/proc/config.gz</filename>
    </term>
    <listitem>
     <para>
      <command>gzip</command>-compressed configuration file of the kernel
      currently running
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>/proc/<replaceable>PID/</replaceable>
    </term>
    <listitem>
     <para>
      Find information about processes currently running in the
      <filename>/proc/</filename><replaceable>NNN</replaceable> directories,
      where <replaceable>NNN</replaceable> is the process ID (PID) of the
      relevant process. Every process can find its own characteristics in
      <filename>/proc/self/</filename>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Further information is available in the text file
   <filename>/usr/src/linux/Documentation/filesystems/proc.txt</filename>
   (this file is available when the package
   <systemitem>kernel-source</systemitem> is installed).
  </para>

  <sect2 xml:id="sec.util.proc.procinfo">
   <title><command>procinfo</command></title>
   <para>
    Important information from the <filename>/proc</filename> file system is
    summarized by the command <command>procinfo</command>:
   </para>
<screen>&prompt.user;procinfo
Linux 3.11.10-17-desktop (geeko@buildhost) (gcc 4.8.1 20130909) #1 4CPU [&wsIname;]

Memory:      Total        Used        Free      Shared     Buffers      Cached
Mem:       8181908     8000632      181276           0       85472     2850872
Swap:     10481660        1576    10480084

Bootup: Mon Jul 28 09:54:13 2014    Load average: 1.61 0.85 0.74 2/904 25949

user  :       1:54:41.84  12.7%  page in :    2107312  disk 1:    52212r   20199w
nice  :       0:00:00.46   0.0%  page out:    1714461  disk 2:    19387r   10928w
system:       0:25:38.00   2.8%  page act:     466673  disk 3:      548r      10w
IOwait:       0:04:16.45   0.4%  page dea:     272297
hw irq:       0:00:00.42   0.0%  page flt:  105754526
sw irq:       0:01:26.48   0.1%  swap in :          0
idle  :      12:14:43.65  81.5%  swap out:        394
guest :       0:02:18.59   0.2%
uptime:       3:45:22.24         context :   99809844

irq  0:       121 timer                 irq 41:   3238224 hpet3
irq  8:         1 rtc0                  irq 42:   3251898 hpet4
irq  9:         0 acpi                  irq 43:   3156368 hpet5
irq 16:     14589 ehci_hcd:usb1         irq 45:         0 aerdrv, PCIe PME
irq 18:         0 i801_smbus            irq 46:         0 PCIe PME, pciehp
irq 19:    124861 ata_piix, ata_piix, f irq 47:         0 PCIe PME, pciehp
irq 22:   3742817 enp5s1                irq 48:         0 PCIe PME, pciehp
irq 23:    479248 ehci_hcd:usb2         irq 49:       387 snd_hda_intel
irq 40:   3216894 hpet2                 irq 50:   1088673 nvidia</screen>
   <para>
    To see all the information, use the parameter <option>-a</option>. The
    parameter <option>-nN</option> produces updates of the information every
    <replaceable>N</replaceable> seconds. In this case, terminate the
    program by pressing <keycap>Q</keycap>.
   </para>
   <para>
    By default, the cumulative values are displayed. The parameter
    <option>-d</option> produces the differential values. <command>procinfo
    -dn5</command> displays the values that have changed in the last five
    seconds:
   </para>
  </sect2>

  <sect2 xml:id="sec.util.proc.procinfo.sysctl">
   <title>System Control Parameters: <filename>/proc/sys/</filename></title>
   <para>
    System control parameters are used to modify the Linux kernel parameters
    at runtime. They reside in <filename>/proc/sys/</filename> and can be
    viewed and modified with the <command>sysctl</command> command. To list
    all parameters, run <command>sysctl</command> <option>-a</option>. A
    single parameter can be listed with <command>sysctl</command>
    <replaceable>PARAMETER_NAME</replaceable>.
   </para>
   <para>
    Parameters are grouped into categories and can be listed with
    <command>sysctl</command> <replaceable>CATEGORY</replaceable> or by
    listing the contents of the respective directories. The most important
    categories are listed below. The links to further readings require the
    installation of the package
    <systemitem class="resource">kernel-source</systemitem>.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>sysctl dev</command> (<filename>/proc/sys/dev/</filename>)</term>
     <listitem>
      <para>
       Device-specific information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>sysctl fs</command> (<filename>/proc/sys/fs/</filename>)</term>
     <listitem>
      <para>
       Used file handles, quotas, and other file system-oriented parameters.
       For details see
       <filename>/usr/src/linux/Documentation/sysctl/fs.txt</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>sysctl kernel</command> (<filename>/proc/sys/kernel/</filename>)</term>
     <listitem>
      <para>
       Information about the task scheduler, system shared memory, and other
       kernel-related parameters. For details see
       <filename>/usr/src/linux/Documentation/sysctl/kernel.txt</filename>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>sysctl net</command> (<filename>/proc/sys/net/</filename>)</term>
     <listitem>
      <para>
       Information about network bridges, and general network parameters
       (mainly the <filename>ipv4/</filename> subdirectory). For details see
       <filename>/usr/src/linux/Documentation/sysctl/net.txt</filename>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>sysctl vm</command> (<filename>/proc/sys/vm/</filename>)</term>
     <listitem>
      <para>
       Entries in this path relate to information about the virtual memory,
       swapping, and caching. For details see
       <filename>/usr/src/linux/Documentation/sysctl/vm.txt</filename>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To set or change a parameter for the current session, use the command
    <command>sysctl</command> <option>-w</option>
    <replaceable>PARAMETER</replaceable>=<replaceable>VALUE</replaceable>.
    To permanently change a setting, add a line
    <replaceable>PARAMETER</replaceable>=<replaceable>VALUE</replaceable> to
    <filename>/etc/sysctl.conf</filename>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.hardware">
  <title>Hardware Information</title>

  <para/>

  <sect2 xml:id="sec.util.hardware.lspci">
   <title>PCI Resources: <command>lspci</command></title>
   <note>
    <title>Accessing PCI configuration.</title>
    <para>
     Most operating systems require root user privileges to grant access to
     the computer's PCI configuration.
    </para>
   </note>
   <para>
    The command <command>lspci</command> lists the PCI resources:
   </para>
<screen>&prompt.root;lspci
00:00.0 Host bridge: Intel Corporation 82845G/GL[Brookdale-G]/GE/PE \
    DRAM Controller/Host-Hub Interface (rev 01)
00:01.0 PCI bridge: Intel Corporation 82845G/GL[Brookdale-G]/GE/PE \
    Host-to-AGP Bridge (rev 01)
00:1d.0 USB Controller: Intel Corporation 82801DB/DBL/DBM \
    (ICH4/ICH4-L/ICH4-M) USB UHCI Controller #1 (rev 01)
00:1d.1 USB Controller: Intel Corporation 82801DB/DBL/DBM \
    (ICH4/ICH4-L/ICH4-M) USB UHCI Controller #2 (rev 01)
00:1d.2 USB Controller: Intel Corporation 82801DB/DBL/DBM \
    (ICH4/ICH4-L/ICH4-M) USB UHCI Controller #3 (rev 01)
00:1d.7 USB Controller: Intel Corporation 82801DB/DBM \
    (ICH4/ICH4-M) USB2 EHCI Controller (rev 01)
00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 81)
00:1f.0 ISA bridge: Intel Corporation 82801DB/DBL (ICH4/ICH4-L) \
    LPC Interface Bridge (rev 01)
00:1f.1 IDE interface: Intel Corporation 82801DB (ICH4) IDE \
    Controller (rev 01)
00:1f.3 SMBus: Intel Corporation 82801DB/DBL/DBM (ICH4/ICH4-L/ICH4-M) \
    SMBus Controller (rev 01)
00:1f.5 Multimedia audio controller: Intel Corporation 82801DB/DBL/DBM \
    (ICH4/ICH4-L/ICH4-M) AC'97 Audio Controller (rev 01)
01:00.0 VGA compatible controller: Matrox Graphics, Inc. G400/G450 (rev 85)
02:08.0 Ethernet controller: Intel Corporation 82801DB PRO/100 VE (LOM) \
    Ethernet Controller (rev 81)</screen>
   <para>
    Using <option>-v</option> results in a more detailed listing:
   </para>
<screen>&prompt.root;lspci -v
[...]
00:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet \
Controller (rev 02)
  Subsystem: Intel Corporation PRO/1000 MT Desktop Adapter
  Flags: bus master, 66MHz, medium devsel, latency 64, IRQ 19
  Memory at f0000000 (32-bit, non-prefetchable) [size=128K]
  I/O ports at d010 [size=8]
  Capabilities: [dc] Power Management version 2
  Capabilities: [e4] PCI-X non-bridge device
  Kernel driver in use: e1000
  Kernel modules: e1000</screen>
   <para>
    Information about device name resolution is obtained from the file
    <filename>/usr/share/pci.ids</filename>. PCI IDs not listed in this file
    are marked <quote>Unknown device.</quote>
   </para>
   <para>
    The parameter <option>-vv</option> produces all the information that
    could be queried by the program. To view the pure numeric values, use
    the parameter <option>-n</option>.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.hardware.lsusb">
   <title>USB Devices: <command>lsusb</command></title>
   <para>
    The command <command>lsusb</command> lists all USB devices. With the
    option <option>-v</option>, print a more detailed list. The detailed
    information is read from the directory
    <filename>/proc/bus/usb/</filename>. The following is the output of
    <command>lsusb</command> with these USB devices attached: hub, memory
    stick, hard disk and mouse.
   </para>
<screen>&prompt.root;lsusb
Bus 004 Device 007: ID 0ea0:2168 Ours Technology, Inc. Transcend JetFlash \
    2.0 / Astone USB Drive
Bus 004 Device 006: ID 04b4:6830 Cypress Semiconductor Corp. USB-2.0 IDE \
    Adapter
Bus 004 Device 005: ID 05e3:0605 Genesys Logic, Inc.
Bus 004 Device 001: ID 0000:0000
Bus 003 Device 001: ID 0000:0000
Bus 002 Device 001: ID 0000:0000
Bus 001 Device 005: ID 046d:c012 Logitech, Inc. Optical Mouse
Bus 001 Device 001: ID 0000:0000</screen>
  </sect2>

  <sect2 xml:id="sec.util.hardware.tmon">
   <title>
    Monitoring and Tuning the Thermal Subsystem: <command>tmon</command>
   </title>
   <para>
    <command>tmon</command> is a tool to help visualize, tune, and test the
    complex thermal subsystem. When started without parameters,
    <command>tmon</command> runs in monitoring mode:
   </para>
   <screen>┌──────THERMAL ZONES(SENSORS)──────────────────────────────┐
│Thermal Zones:                 acpitz00                   │
│Trip Points:                   PC                         │
└──────────────────────────────────────────────────────────┘
┌─────────── COOLING DEVICES ──────────────────────────────┐
│ID  Cooling Dev   Cur    Max   Thermal Zone Binding       │
│00    Processor     0      3   ││││││││││││               │
│01    Processor     0      3   ││││││││││││               │
│02    Processor     0      3   ││││││││││││               │
│03    Processor     0      3   ││││││││││││               │
│04 intel_powerc    -1     50   ││││││││││││               │
└──────────────────────────────────────────────────────────┘
┌──────────────────────────────────────────────────────────┐
│                         10        20        30        40 │
│acpitz 0:[  8][>>>>>>>>>P9                    C31         │
└──────────────────────────────────────────────────────────┘
┌────────────────── CONTROLS ──────────────────────────────┐
│PID gain: kp=0.36 ki=5.00 kd=0.19 Output 0.00             │
│Target Temp: 65.0C, Zone: 0, Control Device: None         │
└──────────────────────────────────────────────────────────┘

 Ctrl-c - Quit   TAB - Tuning
</screen>
   <para>
    For detailed information on how to interpret the data, how to log thermal
    data and how to use <command>tmon</command> to test and tune cooling
    devices and sensors, refer to the man page: <command>man 8
    tmon</command>. The package <package>tmon</package> is not installed by
    default.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.hardware.mcelog">
   <title>MCELog: Machine Check Exceptions (MCE)</title>
   <para>
    The <systemitem class="resource">mcelog</systemitem> package logs and
    parses/translates Machine Check Exceptions (MCE) on hardware errors
    (also including memory errors). Formerly this has been done by a cron
    job executed hourly. Now hardware errors are immediately processed by an
    mcelog daemon.
   </para>
   <para>
    However, the mcelog service is not enabled by default, resulting in
    memory and CPU errors also not being logged by default.
    <remark>sknorr,
     2014-07-23: check usage of "(to) offline sth." It does not make for a great
     verb.</remark>
    In addition, mcelog has a new feature to also handle predictive bad page
    offlining and automatic core offlining when cache errors happen.
   </para>
   <para>
    The service can either be enabled and started via the &yast; system
    services editor or via command line:
   </para>
<screen>&prompt.root;systemctl enable mcelog
&prompt.root;systemctl start mcelog</screen>
  </sect2>

  <sect2 xml:id="sec.util.hardware.dmicecode" arch="x86_64">
   <title>x86_64: dmidecode: DMI Table Decoder</title>
   <para>
    <command>dmidecode</command> shows the machine's DMI table containing
    information such as serial numbers and BIOS revisions of the hardware.
   </para>
<screen>&prompt.root;dmidecode
# dmidecode 2.12
SMBIOS 2.5 present.
27 structures occupying 1298 bytes.
Table at 0x000EB250.

Handle 0x0000, DMI type 4, 35 bytes
Processor Information
        Socket Designation: J1PR
        Type: Central Processor
        Family: Other
        Manufacturer: Intel(R) Corporation
        ID: E5 06 01 00 FF FB EB BF
        Version: Intel(R) Core(TM) i5 CPU         750  @ 2.67GHz
        Voltage: 1.1 V
        External Clock: 133 MHz
        Max Speed: 4000 MHz
        Current Speed: 2667 MHz
        Status: Populated, Enabled
        Upgrade: Other
        L1 Cache Handle: 0x0004
        L2 Cache Handle: 0x0003
        L3 Cache Handle: 0x0001
        Serial Number: Not Specified
        Asset Tag: Not Specified
        Part Number: Not Specified
[..]</screen>
  </sect2>

  <sect2 xml:id="sec.util.hardware.lshw" arch="power">
   <title>&power;: List Hardware</title>
   <para>
    <command>lshw</command> extracts and displays the hardware
    configuration of the machine.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.file">
  <title>Files and File Systems</title>

  <para os="sled;osuse"/>

  <para os="sles">
   For file system-specific information, refer to
   <xref linkend="book.storage"/>.
  </para>

  <sect2 xml:id="sec.util.file.file">
   <title>Determine the File Type: <command>file</command></title>
   <para>
    The command <command>file</command> determines the type of a file or a
    list of files by checking <filename>/usr/share/misc/magic</filename>.
   </para>
<screen>&prompt.user;file /usr/bin/file
/usr/bin/file: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), \
    for GNU/Linux 2.6.4, dynamically linked (uses shared libs), stripped</screen>
   <para>
    The parameter <option>-f <replaceable>LIST</replaceable></option>
    specifies a file with a list of file names to examine. The
    <option>-z</option> allows <command>file</command> to look inside
    compressed files:
   </para>
<screen>&prompt.user;file /usr/share/man/man1/file.1.gz
/usr/share/man/man1/file.1.gz: gzip compressed data, from Unix, max compression
&prompt.user;file -z /usr/share/man/man1/file.1.gz
/usr/share/man/man1/file.1.gz: troff or preprocessor input text \
    (gzip compressed data, from Unix, max compression)</screen>
   <para>
    The parameter <option>-i</option> outputs a mime type string rather than
    the traditional description.
   </para>
<screen>&prompt.user;file -i /usr/share/misc/magic
/usr/share/misc/magic: text/plain charset=utf-8</screen>
  </sect2>

  <sect2 xml:id="sec.util.file.mount_dudf">
   <title>File Systems and Their Usage: <command>mount</command>, <command>df</command> and <command>du</command></title>
   <para>
    The command <command>mount</command> shows which file system (device and
    type) is mounted at which mount point:
   </para>
<screen>&prompt.root;mount
/dev/sda2 on / type ext4 (rw,acl,user_xattr)
proc on /proc type proc (rw)
sysfs on /sys type sysfs (rw)
debugfs on /sys/kernel/debug type debugfs (rw)
devtmpfs on /dev type devtmpfs (rw,mode=0755)
tmpfs on /dev/shm type tmpfs (rw,mode=1777)
devpts on /dev/pts type devpts (rw,mode=0620,gid=5)
/dev/sda3 on /home type ext3 (rw)
securityfs on /sys/kernel/security type securityfs (rw)
fusectl on /sys/fs/fuse/connections type fusectl (rw)
gvfs-fuse-daemon on /home/tux/.gvfs type fuse.gvfs-fuse-daemon \
(rw,nosuid,nodev,user=tux)</screen>
   <para>
    Obtain information about total usage of the file systems with the
    command <command>df</command>. The parameter <option>-h</option> (or
    <option>--human-readable</option>) transforms the output into a form
    understandable for common users.
   </para>
<screen>&prompt.user;df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda2              20G  5,9G   13G  32% /
devtmpfs              1,6G  236K  1,6G   1% /dev
tmpfs                 1,6G  668K  1,6G   1% /dev/shm
/dev/sda3             208G   40G  159G  20% /home</screen>
   <para>
    Display the total size of all the files in a given directory and its
    subdirectories with the command <command>du</command>. The parameter
    <option>-s</option> suppresses the output of detailed information and
    gives only a total for each argument. <option>-h</option> again
    transforms the output into a human-readable form:
   </para>
<screen>&prompt.user;du -sh /opt
192M    /opt</screen>
  </sect2>

  <sect2 xml:id="sec.util.file.readelf">
   <title>Additional Information about ELF Binaries</title>
   <para>
    Read the content of binaries with the <command>readelf</command>
    utility. This even works with ELF files that were built for other
    hardware architectures:
   </para>
<screen>&prompt.user;readelf --file-header /bin/ls
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x402540
  Start of program headers:          64 (bytes into file)
  Start of section headers:          95720 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         9
  Size of section headers:           64 (bytes)
  Number of section headers:         32
  Section header string table index: 31</screen>
  </sect2>

  <sect2 xml:id="sec.util.file.stat">
   <title>File Properties: <command>stat</command></title>
   <para>
    The command <command>stat</command> displays file properties:
   </para>
<screen>&prompt.user;stat /etc/profile
  File: `/etc/profile'
  Size: 9662            Blocks: 24         IO Block: 4096   regular file
Device: 802h/2050d      Inode: 132349      Links: 1
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2009-03-20 07:51:17.000000000 +0100
Modify: 2009-01-08 19:21:14.000000000 +0100
Change: 2009-03-18 12:55:31.000000000 +0100</screen>
   <para>
    The parameter <option>--file-system</option> produces details of the
    properties of the file system in which the specified file is located:
   </para>
<screen>&prompt.user;stat /etc/profile --file-system
  File: "/etc/profile"
    ID: d4fb76e70b4d1746 Namelen: 255     Type: ext2/ext3
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 2581445    Free: 1717327    Available: 1586197
Inodes: Total: 655776     Free: 490312</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.user">
  <title>User Information</title>

  <para/>

  <sect2 xml:id="sec.util.system.fuser">
   <title>User Accessing Files: <command>fuser</command></title>
   <para>
    It can be useful to determine what processes or users are currently
    accessing certain files. Suppose, for example, you want to unmount a
    file system mounted at <filename>/mnt</filename>.
    <command>umount</command> returns "device is busy." The command
    <command>fuser</command> can then be used to determine what processes
    are accessing the device:
   </para>
<screen>&prompt.user;fuser -v /mnt/*

                     USER        PID ACCESS COMMAND
/mnt/notes.txt       &exampleuser_plain;    26597 f....  less</screen>
   <para>
    Following termination of the <command>less</command> process, which was
    running on another terminal, the file system can successfully be
    unmounted. When used with <option>-k</option> option,
    <command>fuser</command> will terminate processes accessing the file as
    well.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.user.w">
   <title>Who Is Doing What: <command>w</command></title>
   <para>
    With the command <command>w</command>, find out who is logged in to the
    system and what each user is doing. For example:
   </para>
<screen>&prompt.user;w
 16:00:59 up 1 day,  2:41,  3 users,  load average: 0.00, 0.01, 0.05
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
tux      :0       console          Wed13   ?xdm?   8:15   0.03s /usr/lib/gdm/gd
tux      console  :0               Wed13   26:41m  0.00s  0.03s /usr/lib/gdm/gd
tux      pts/0    :0               Wed13   20:11   0.10s  2.89s /usr/lib/gnome-</screen>
   <para>
    If any users of other systems have logged in remotely, the parameter
    <option>-f</option> shows the computers from which they have established
    the connection.
    <remark>aherrmann, 2016-10-11: In fact '-f' toggles printing the
    'from' field. Some systems have a 'w' command which was built such
    that 'from' field is shown by default. In this case using '-f'
    causes 'from' field not to be shown.</remark>
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.time">
  <title>Time and Date</title>

  <para/>

  <sect2 xml:id="sec.util.time.time">
   <title>Time Measurement with <command>time</command></title>
   <para>
    Determine the time spent by commands with the <command>time</command>
    utility. This utility is available in two versions: as a Bash built-in
    and as a program (<command>/usr/bin/time</command>).
   </para>
<screen>&prompt.user;time find . &gt; /dev/null

real    0m4.051s<co xml:id="co.util.time.real"/>
user    0m0.042s<co xml:id="co.util.time.user"/>
sys     0m0.205s<co xml:id="co.util.time.sys"/></screen>
   <calloutlist>
    <callout arearefs="co.util.time.real">
     <para>
      The real time that elapsed from the command's start-up until it
      finished.
     </para>
    </callout>
    <callout arearefs="co.util.time.user">
     <para>
      CPU time of the user as reported by the <literal>times</literal>
      system call.
     </para>
    </callout>
    <callout arearefs="co.util.time.sys">
     <para>
      CPU time of the system as reported by the <literal>times</literal>
      system call.
     </para>
    </callout>
   </calloutlist>
   <para>
    The output of <filename>/usr/bin/time</filename> is much more detailed.
    It is recommended to run it with the <option>-v</option> switch to
    produce human-readable output.
   </para>
<screen>/usr/bin/time -v find . &gt; /dev/null
        Command being timed: "find ."
        User time (seconds): 0.24
        System time (seconds): 2.08
        Percent of CPU this job got: 25%
        Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.03
        Average shared text size (kbytes): 0
        Average unshared data size (kbytes): 0
        Average stack size (kbytes): 0
        Average total size (kbytes): 0
        Maximum resident set size (kbytes): 2516
        Average resident set size (kbytes): 0
        Major (requiring I/O) page faults: 0
        Minor (reclaiming a frame) page faults: 1564
        Voluntary context switches: 36660
        Involuntary context switches: 496
        Swaps: 0
        File system inputs: 0
        File system outputs: 0
        Socket messages sent: 0
        Socket messages received: 0
        Signals delivered: 0
        Page size (bytes): 4096
        Exit status: 0</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.util.rrdtool">
  <title>Graph Your Data: RRDtool</title>

  <para>
   There are a lot of data in the world around you, which can be easily
   measured in time. For example, changes in the temperature, or the number
   of data sent or received by your computer's network interface. RRDtool
   can help you store and visualize such data in detailed and customizable
   graphs.
  </para>

  <para>
   RRDtool is available for most Unix platforms and Linux distributions.
   &productnamereg; ships RRDtool as well. Install it either with
   &yast; or by entering
  </para>

  <para>
   <command>zypper</command> <option>install</option>
   <replaceable>rrdtool</replaceable> in the command line as &rootuser;.
  </para>

  <tip>
   <title>Bindings</title>
   <para>
    There are Perl, Python, Ruby, and PHP bindings available for RRDtool, so
    that you can write your own monitoring scripts in your preferred
    scripting language.
   </para>
  </tip>

  <sect2 xml:id="sec.util.rrdtool.howitworks">
   <title>How RRDtool Works</title>
   <para>
    RRDtool is an abbreviation of <emphasis>Round Robin Database
    tool</emphasis>. <emphasis>Round Robin</emphasis> is a method for
    manipulating with a constant amount of data. It uses the principle of a
    circular buffer, where there is no end nor beginning to the data row
    which is being read. RRDtool uses Round Robin Databases to store and
    read its data.
   </para>
   <para>
    As mentioned above, RRDtool is designed to work with data that change in
    time. The ideal case is a sensor which repeatedly reads measured data
    (like temperature, speed etc.) in constant periods of time, and then
    exports them in a given format. Such data are perfectly ready for
    RRDtool, and it is easy to process them and create the desired output.
   </para>
   <para>
    Sometimes it is not possible to obtain the data automatically and
    regularly. Their format needs to be pre-processed before it is supplied
    to RRDtool, and often you need to manipulate RRDtool even manually.
   </para>
   <para>
    The following is a simple example of basic RRDtool usage. It illustrates
    all three important phases of the usual RRDtool workflow:
    <emphasis>creating</emphasis> a database, <emphasis>updating</emphasis>
    measured values, and <emphasis>viewing</emphasis> the output.
   </para>
  </sect2>

  <sect2 xml:id="sec.util.rrdtool.example">
   <title>A Practical Example</title>
   <para>
    Suppose we want to collect and view information about the memory usage
    in the Linux system as it changes in time. To make the example more
    vivid, we measure the currently free memory over a period of 40 seconds
    in 4-second intervals. Three applications that usually consume a lot of
    system memory are started and closed: the Firefox Web browser, the
    Evolution e-mail client, and the Eclipse development framework.
   </para>
   <sect3 xml:id="sec.util.rrdtool.example.collect">
    <title>Collecting Data</title>
    <para>
     RRDtool is very often used to measure and visualize network traffic. In
     such case, the Simple Network Management Protocol (SNMP) is used. This
     protocol can query network devices for relevant values of their
     internal counters. Exactly these values are to be stored with RRDtool.
     For more information on SNMP, see
     <link xlink:href="http://www.net-snmp.org/"/>.
    </para>
    <para>
     Our situation is different&mdash;we need to obtain the data
     manually. A helper script <command>free_mem.sh</command> repetitively
     reads the current state of free memory and writes it to the standard
     output.
    </para>
<screen>&prompt.user;cat free_mem.sh
INTERVAL=4
for steps in {1..10}
do
    DATE=`date +%s`
    FREEMEM=`free -b | grep "Mem" | awk '{ print $4 }'`
    sleep $INTERVAL
    echo "rrdtool update free_mem.rrd $DATE:$FREEMEM"
done</screen>
    <remark>sknorr, 2014-07-23: This should be a calloutlist.</remark>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       The time interval is set to 4 seconds, and is implemented with the
       <command>sleep</command> command.
      </para>
     </listitem>
     <listitem>
      <para>
       RRDtool accepts time information in a special format - so called
       <emphasis>Unix time</emphasis>. It is defined as the number of
       seconds since the midnight of January 1, 1970 (UTC). For example,
       1272907114 represents 2010-05-03 17:18:34.
      </para>
     </listitem>
     <listitem>
      <para>
       The free memory information is reported in bytes with
       <command>free</command> <option>-b</option>. Prefer to supply basic
       units (bytes) instead of multiple units (like kilobytes).
      </para>
     </listitem>
     <listitem>
      <para>
       The line with the <command>echo ...</command> command contains the
       future name of the database file (<literal>free_mem.rrd</literal>),
       and together creates a command line for updating
       RRDtool values.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     After running <command>free_mem.sh</command>, you see an output similar
     to this:
    </para>
<screen>&prompt.user;sh free_mem.sh
rrdtool update free_mem.rrd 1272974835:1182994432
rrdtool update free_mem.rrd 1272974839:1162817536
rrdtool update free_mem.rrd 1272974843:1096269824
rrdtool update free_mem.rrd 1272974847:1034219520
rrdtool update free_mem.rrd 1272974851:909438976
rrdtool update free_mem.rrd 1272974855:832454656
rrdtool update free_mem.rrd 1272974859:829120512
rrdtool update free_mem.rrd 1272974863:1180377088
rrdtool update free_mem.rrd 1272974867:1179369472
rrdtool update free_mem.rrd 1272974871:1181806592</screen>
    <para>
     It is convenient to redirect the command's output to a file with
    </para>
    <para>
     <command>sh free_mem.sh &gt; free_mem_updates.log</command>
    </para>
    <para>
     to simplify its future execution.
    </para>
   </sect3>
   <sect3 xml:id="sec.util.rrdtool.example.create">
    <title>Creating the Database</title>
    <para>
     Create the initial Robin Round database for our example with the
     following command:
    </para>
<screen>&prompt.user;rrdtool create free_mem.rrd --start 1272974834 --step=4 \
DS:memory:GAUGE:600:U:U RRA:AVERAGE:0.5:1:24</screen>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Points to Notice</title>
     <listitem>
      <para>
       This command creates a file called <filename>free_mem.rrd</filename>
       for storing our measured values in a Round Robin type database.
      </para>
     </listitem>
     <listitem>
      <para>
       The <option>--start</option> option specifies the time (in Unix time)
       when the first value will be added to the database. In this example,
       it is one less than the first time value of the
       <command>free_mem.sh</command> output (1272974835).
      </para>
     </listitem>
     <listitem>
      <para>
       The <option>--step</option> specifies the time interval in seconds
       with which the measured data will be supplied to the database.
      </para>
     </listitem>
     <listitem>
      <para>
       The <literal>DS:memory:GAUGE:600:U:U</literal> part introduces a new
       data source for the database. It is called
       <emphasis>memory</emphasis>, its type is <emphasis>gauge</emphasis>,
       the maximum number between two updates is 600 seconds, and the
       <emphasis>minimal</emphasis> and <emphasis>maximal</emphasis> value
       in the measured range are unknown (U).
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>RRA:AVERAGE:0.5:1:24</literal> creates Round Robin archive
       (RRA) whose stored data are processed with the
       <emphasis>consolidation functions</emphasis> (CF) that calculates the
       <emphasis>average</emphasis> of data points. 3 arguments of the
       consolidation function are appended to the end of the line.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     If no error message is displayed, then
     <filename>free_mem.rrd</filename> database is created in the current
     directory:
    </para>
<screen>&prompt.user;ls -l free_mem.rrd
-rw-r--r-- 1 tux users 776 May  5 12:50 free_mem.rrd</screen>
   </sect3>
   <sect3 xml:id="sec.util.rrdtool.example.update">
    <title>Updating Database Values</title>
    <para>
     After the database is created, you need to fill it with the measured
     data. In <xref linkend="sec.util.rrdtool.example.collect"/>, we already
     prepared the file <filename>free_mem_updates.log</filename> which
     consists of <command>rrdtool update</command> commands. These commands
     do the update of database values for us.
    </para>
<screen>&prompt.user;sh free_mem_updates.log; ls -l free_mem.rrd
-rw-r--r--  1 tux users  776 May  5 13:29 free_mem.rrd</screen>
    <para>
     As you can see, the size of <filename>free_mem.rrd</filename> remained
     the same even after updating its data.
    </para>
   </sect3>
   <sect3 xml:id="sec.util.rrdtool.example.view">
    <title>Viewing Measured Values</title>
    <para>
     We have already measured the values, created the database, and stored
     the measured value in it. Now we can play with the database, and
     retrieve or view its values.
    </para>
    <para>
     To retrieve all the values from our database, enter the following on
     the command line:
    </para>
<screen>&prompt.user;rrdtool fetch free_mem.rrd AVERAGE --start 1272974830 \
--end 1272974871
          memory
1272974832: nan
1272974836: 1.1729059840e+09
1272974840: 1.1461806080e+09
1272974844: 1.0807572480e+09
1272974848: 1.0030243840e+09
1272974852: 8.9019289600e+08
1272974856: 8.3162112000e+08
1272974860: 9.1693465600e+08
1272974864: 1.1801251840e+09
1272974868: 1.1799787520e+09
1272974872: nan</screen>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Points to Notice</title>
     <listitem>
      <para>
       <literal>AVERAGE</literal> will fetch average value points from the
       database, because only one data source is defined
       (<xref linkend="sec.util.rrdtool.example.create"/>) with
       <literal>AVERAGE</literal> processing and no other function is
       available.
      </para>
     </listitem>
     <listitem>
      <para>
       The first line of the output prints the name of the data source as
       defined in <xref linkend="sec.util.rrdtool.example.create"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       The left results column represents individual points in time, while
       the right one represents corresponding measured average values in
       scientific notation.
      </para>
     </listitem>
     <listitem>
      <para>
       The <literal>nan</literal> in the last line stands for <quote>not a
       number</quote>.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Now a graph representing the values stored in the database is drawn:
    </para>
<screen>&prompt.user;rrdtool graph free_mem.png \
--start 1272974830 \
--end 1272974871 \
--step=4 \
DEF:free_memory=free_mem.rrd:memory:AVERAGE \
LINE2:free_memory#FF0000 \
--vertical-label "GB" \
--title "Free System Memory in Time" \
--zoom 1.5 \
--x-grid SECOND:1:SECOND:4:SECOND:10:0:%X</screen>
    <itemizedlist mark="bullet" spacing="normal">
     <title>Points to Notice</title>
     <listitem>
      <para>
       <filename>free_mem.png</filename> is the file name of the graph to be
       created.
      </para>
     </listitem>
     <listitem>
      <para>
       <option>--start</option> and <option>--end</option> limit the time
       range within which the graph will be drawn.
      </para>
     </listitem>
     <listitem>
      <para>
       <option>--step</option> specifies the time resolution (in seconds) of
       the graph.
      </para>
     </listitem>
     <listitem>
      <para>
       The <literal>DEF:...</literal> part is a data definition called
       <emphasis>free_memory</emphasis>. Its data are read from the
       <filename>free_mem.rrd</filename> database and its data source called
       <emphasis>memory</emphasis>. The <emphasis>average</emphasis> value
       points are calculated, because no others were defined in
       <xref linkend="sec.util.rrdtool.example.create"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       The <literal>LINE...</literal> part specifies properties of the line
       to be drawn into the graph. It is 2 pixels wide, its data come from
       the <emphasis>free_memory</emphasis> definition, and its color is
       red.
      </para>
     </listitem>
     <listitem>
      <para>
       <option>--vertical-label</option> sets the label to be printed along
       the <emphasis>y</emphasis> axis, and <option>--title</option> sets
       the main label for the whole graph.
      </para>
     </listitem>
     <listitem>
      <para>
       <option>--zoom</option> specifies the zoom factor for the graph. This
       value must be greater than zero.
      </para>
     </listitem>
     <listitem>
      <para>
       <option>--x-grid</option> specifies how to draw grid lines and their
       labels into the graph. Our example places them every second, while
       major grid lines are placed every 4 seconds. Labels are placed every
       10 seconds under the major grid lines.
      </para>
     </listitem>
    </itemizedlist>
    <figure xml:id="util.rrdtool.example.create.graph1">
     <title>Example Graph Created with RRDtool</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata width="75%" fileref="rrdtool_graph1.png" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata width="55%" fileref="rrdtool_graph1.png" format="PNG"/>
      </imageobject>
     </mediaobject>
    </figure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.util.rrdtool.moreinfo">
   <title>For More Information</title>
   <para>
    RRDtool is a very complex tool with a lot of sub-commands and command
    line options. Some are easy to understand, but to make it
    produce the results you want and fine-tune them according to your liking
    may require a lot of effort.
   </para>
   <para>
    Apart from RRDtool's man page (<command>man 1 rrdtool</command>) which
    gives you only basic information, you should have a look at the
    <link xlink:href="http://oss.oetiker.ch/rrdtool/">RRDtool home
    page</link>. There is a detailed
    <link xlink:href="http://oss.oetiker.ch/rrdtool/doc/index.en.html">documentation</link>
    of the <command>rrdtool</command> command and all its sub-commands.
    There are also several
    <link xlink:href="http://oss.oetiker.ch/rrdtool/tut/index.en.html">tutorials</link>
    to help you understand the common RRDtool workflow.
   </para>
   <para>
    If you are interested in monitoring network traffic, have a look at
    <link xlink:href="http://oss.oetiker.ch/mrtg/">MRTG (Multi Router
    Traffic Grapher)</link>. MRTG can graph the activity of many network
    devices. It can use RRDtool.
   </para>
  </sect2>
 </sect1>
</chapter>
