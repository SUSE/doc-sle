<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-lvm-snapshots" xml:lang="en">
 <title>LVM Volume Snapshots</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  A Logical Volume Manager (LVM) logical volume snapshot is a copy-on-write
  technology that monitors changes to an existing volume’s data blocks so
  that when a write is made to one of the blocks, the block’s value at the
  snapshot time is copied to a snapshot volume. In this way, a point-in-time
  copy of the data is preserved until the snapshot volume is deleted.
 </para>
 <sect1 xml:id="sec-lvm-snapshots-intro">
  <title>Understanding Volume Snapshots</title>

  <para>
   A file system snapshot contains metadata about itself and data blocks from a
   source logical volume that has changed since the snapshot was taken. When
   you access data via the snapshot, you see a point-in-time copy of the source
   logical volume. There is no need to restore data from backup media or to
   overwrite the changed data.
  </para>

  <important>
   <title>Mounting Volumes with Snapshots</title>
   <para>
    During the snapshot’s lifetime, the snapshot must be mounted before its
    source logical volume can be mounted.
   </para>
  </important>

  <para>
   LVM volume snapshots allow you to create a backup from a point-in-time view
   of the file system. The snapshot is created instantly and persists until you
   delete it. You can back up the file system from the snapshot while the
   volume itself continues to be available for users. The snapshot initially
   contains some metadata about the snapshot, but no actual data from the
   source logical volume. Snapshot uses copy-on-write technology to detect when
   data changes in an original data block. It copies the value it held when the
   snapshot was taken to a block in the snapshot volume, then allows the new
   data to be stored in the source block. As more blocks change from their
   original value on the source logical volume, the snapshot size grows.
  </para>

  <para>
   When you are sizing the snapshot, consider how much data is expected to
   change on the source logical volume and how long you plan to keep the
   snapshot. The amount of space that you allocate for a snapshot volume can
   vary, depending on the size of the source logical volume, how long you plan
   to keep the snapshot, and the number of data blocks that are expected to
   change during the snapshot’s lifetime. The snapshot volume cannot be
   resized after it is created. As a guide, create a snapshot volume that is
   about 10% of the size of the original logical volume. If you anticipate that
   every block in the source logical volume will change at least one time
   before you delete the snapshot, then the snapshot volume should be at least
   as large as the source logical volume plus some additional space for
   metadata about the snapshot volume. Less space is required if the data
   changes infrequently or if the expected lifetime is sufficiently brief.
  </para>

  <para>
   In LVM2, snapshots are read/write by default. When you write data directly
   to the snapshot, that block is marked in the exception table as used, and
   never gets copied from the source logical volume. You can mount the snapshot
   volume, and test application changes by writing data directly to the
   snapshot volume. You can easily discard the changes by dismounting the
   snapshot, removing the snapshot, and then remounting the source logical
   volume.
  </para>

  <para>
   In a virtual guest environment, you can use the snapshot function for LVM
   logical volumes you create on the server’s disks, as you would on a
   physical server.
  </para>

  <para>
   In a virtual host environment, you can use the snapshot function to back up
   the virtual machine’s storage back-end, or to test changes to a virtual
   machine image, such as for patches or upgrades, without modifying the source
   logical volume. The virtual machine must be using an LVM logical volume as
   its storage back-end, as opposed to using a virtual disk file. You can mount
   the LVM logical volume and use it to store the virtual machine image as a
   file-backed disk, or you can assign the LVM logical volume as a physical
   disk to write to it as a block device.
  </para>

  <para>
   Beginning in SLES 11 SP3, an LVM logical volume snapshot can be thinly
   provisioned. Thin provisioning is assumed if you create a snapshot without a
   specified size. The snapshot is created as a thin volume that uses space as
   needed from a thin pool. A thin snapshot volume has the same characteristics
   as any other thin volume. You can independently activate the volume, extend
   the volume, rename the volume, remove the volume, and even snapshot the
   volume.
  </para>

  <important>
   <title>Thinly Provisioned Volumes in a Cluster</title>
   <para>
    To use thinly provisioned snapshots in a cluster, the source logical volume
    and its snapshots must be managed in a single cluster resource. This allows
    the volume and its snapshots to always be mounted exclusively on the same
    node.
   </para>
  </important>

  <para>
   When you are done with the snapshot, it is important to remove it from the
   system. A snapshot eventually fills up completely as data blocks change on
   the source logical volume. When the snapshot is full, it is disabled, which
   prevents you from remounting the source logical volume.
  </para>

  <para>
   If you create multiple snapshots for a source logical volume, remove the
   snapshots in a last created, first deleted order.
  </para>
 </sect1>
 <sect1 xml:id="sec-lvm-snapshots-create">
  <title>Creating Linux Snapshots with LVM</title>

  <para>
   The Logical Volume Manager (LVM) can be used for creating snapshots of your
   file system.
  </para>

  <para>
   Open a terminal console and enter
  </para>

<screen>&prompt.sudo;lvcreate -s [-L <replaceable>&lt;size</replaceable>&gt;] -n <replaceable>SNAP_VOLUME</replaceable> <replaceable>SOURCE_VOLUME_PATH</replaceable></screen>

  <para>
   If no size is specified, the snapshot is created as a thin snapshot.
  </para>

  <para>
   For example:
  </para>

<screen>&prompt.sudo;lvcreate -s -L 1G -n linux01-snap /dev/lvm/linux01</screen>

  <para>
   The snapshot is created as the <filename>/dev/lvm/linux01-snap</filename>
   volume.
  </para>
 </sect1>
 <sect1 xml:id="sec-lvm-snapshots-monitor">
  <title>Monitoring a Snapshot</title>

  <para>
   Open a terminal console and enter
  </para>

<screen>&prompt.sudo;lvdisplay <replaceable>SNAP_VOLUME</replaceable></screen>

  <para>
   For example:
  </para>

<screen>&prompt.sudo;lvdisplay /dev/vg01/linux01-snap

--- Logical volume ---
  LV Name                /dev/lvm/linux01
  VG Name                vg01
  LV UUID                QHVJYh-PR3s-A4SG-s4Aa-MyWN-Ra7a-HL47KL
  LV Write Access        read/write
  LV snapshot status     active destination for /dev/lvm/linux01
  LV Status              available
  # open                 0
  LV Size                80.00 GB
  Current LE             1024
  COW-table size         8.00 GB
  COW-table LE           512
  Allocated to snapshot  30%
  Snapshot chunk size    8.00 KB
  Segments               1
  Allocation             inherit
  Read ahead sectors     0
  Block device           254:5</screen>
 </sect1>
 <sect1 xml:id="sec-lvm-snapshots-delete">
  <title>Deleting Linux Snapshots</title>

  <para>
   Open a terminal console and enter
  </para>

<screen>&prompt.sudo;lvremove <replaceable>SNAP_VOLUME_PATH</replaceable></screen>

  <para>
   For example:
  </para>

<screen>&prompt.sudo;lvremove /dev/lvmvg/linux01-snap</screen>
 </sect1>
 <sect1 xml:id="sec-lvm-snapshots-xen-host">
  <title>Using Snapshots for Virtual Machines on a Virtual Host</title>

  <para>
   Using an LVM logical volume for a virtual machine’s back-end storage
   allows flexibility in administering the underlying device, such as making it
   easier to move storage objects, create snapshots, and back up data. You can
   mount the LVM logical volume and use it to store the virtual machine image
   as a file-backed disk, or you can assign the LVM logical volume as a
   physical disk to write to it as a block device. You can create a virtual
   disk image on the LVM logical volume, then snapshot the LVM.
  </para>

  <para>
   You can leverage the read/write capability of the snapshot to create
   different instances of a virtual machine, where the changes are made to the
   snapshot for a particular virtual machine instance. You can create a virtual
   disk image on an LVM logical volume, snapshot the source logical volume, and
   modify the snapshot for a particular virtual machine instance. You can
   create another snapshot of the source logical volume, and modify it for a
   different virtual machine instance. The majority of the data for the
   different virtual machine instances resides with the image on the source
   logical volume.
  </para>

  <para>
   You can also leverage the read/write capability of the snapshot to preserve
   the virtual disk image while testing patches or upgrades in the guest
   environment. You create a snapshot of the LVM volume that contains the
   image, and then run the virtual machine on the snapshot location. The source
   logical volume is unchanged, and all changes for that machine are written to
   the snapshot. To return to the source logical volume of the virtual machine
   image, you power off the virtual machine, then remove the snapshot from the
   source logical volume. To start over, you re-create the snapshot, mount the
   snapshot, and restart the virtual machine on the snapshot image.
  </para>

  <para>
   The following procedure uses a file-backed virtual disk image and the &xen;
   hypervisor. You can adapt the procedure in this section for other
   hypervisors that run on the &sle; platform, such as &kvm;. To run a
   file-backed virtual machine image from the snapshot volume:
  </para>

  <procedure>
   <step>
    <para>
     Ensure that the source logical volume that contains the file-backed
     virtual machine image is mounted, such as at mount point
     <filename>/var/lib/xen/images/&lt;<replaceable>IMAGE_NAME</replaceable>&gt;</filename>.
    </para>
   </step>
   <step>
    <para>
     Create a snapshot of the LVM logical volume with enough space to store the
     differences that you expect.
    </para>
<screen>&prompt.sudo;lvcreate -s -L 20G -n myvm-snap /dev/lvmvg/myvm</screen>
    <para>
     If no size is specified, the snapshot is created as a thin snapshot.
    </para>
   </step>
   <step>
    <para>
     Create a mount point where you will mount the snapshot volume.
    </para>
<screen>&prompt.sudo;mkdir -p /mnt/xen/vm/myvm-snap</screen>
   </step>
   <step>
    <para>
     Mount the snapshot volume at the mount point you created.
    </para>
<screen>&prompt.sudo;mount -t auto /dev/lvmvg/myvm-snap /mnt/xen/vm/myvm-snap</screen>
   </step>
   <step>
    <para>
     In a text editor, copy the configuration file for the source virtual
     machine, modify the paths to point to the file-backed image file on the
     mounted snapshot volume, and save the file such as
     <filename>/etc/xen/myvm-snap.cfg</filename>.
    </para>
   </step>
   <step>
    <para>
     Start the virtual machine using the mounted snapshot volume of the virtual
     machine.
    </para>
<screen>&prompt.sudo;xm create -c /etc/xen/myvm-snap.cfg</screen>
   </step>
   <step>
    <para>
     (Optional) Remove the snapshot, and use the unchanged virtual machine
     image on the source logical volume.
    </para>
<screen>&prompt.sudo;umount /mnt/xenvms/myvm-snap
&prompt.sudo;lvremove -f /dev/lvmvg/mylvm-snap</screen>
   </step>
   <step>
    <para>
     (Optional) Repeat this process as desired.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-lvm-snapshots-rollback">
  <title>Merging a Snapshot with the Source Logical Volume to Revert Changes or Roll Back to a Previous State</title>

  <para>
   Snapshots can be useful if you need to roll back or restore data on a volume
   to a previous state. For example, you might need to revert data changes that
   resulted from an administrator error or a failed or undesirable package
   installation or upgrade.
  </para>

  <para>
   You can use the <command>lvconvert --merge</command> command to revert the
   changes made to an LVM logical volume. The merging begins as follows:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     If both the source logical volume and snapshot volume are not open, the
     merge begins immediately.
    </para>
   </listitem>
   <listitem>
    <para>
     If the source logical volume or snapshot volume are open, the merge starts
     the first time either the source logical volume or snapshot volume are
     activated and both are closed.
    </para>
   </listitem>
   <listitem>
    <para>
     If the source logical volume cannot be closed, such as the root file
     system, the merge is deferred until the next time the server reboots and
     the source logical volume is activated.
    </para>
   </listitem>
   <listitem>
    <para>
     If the source logical volume contains a virtual machine image, you must
     shut down the virtual machine, deactivate the source logical volume and
     snapshot volume (by dismounting them in that order), and then issue the
     merge command. Because the source logical volume is automatically
     remounted and the snapshot volume is deleted when the merge is complete,
     you should not restart the virtual machine until after the merge is
     complete. After the merge is complete, you use the resulting logical
     volume for the virtual machine.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   After a merge begins, the merge continues automatically after server
   restarts until it is complete. A new snapshot cannot be created for the
   source logical volume while a merge is in progress.
  </para>

  <para>
   While the merge is in progress, reads or writes to the source logical volume
   are transparently redirected to the snapshot that is being merged. This
   allows users to immediately view and access the data as it was when the
   snapshot was created. They do not need to wait for the merge to complete.
  </para>

  <para>
   When the merge is complete, the source logical volume contains the same data
   as it did when the snapshot was taken, plus any data changes made after the
   merge began. The resulting logical volume has the source logical volume’s
   name, minor number, and UUID. The source logical volume is automatically
   remounted, and the snapshot volume is removed.
  </para>

  <procedure>
   <step>
    <para>
     Open a terminal console and enter
    </para>
<screen>&prompt.sudo;lvconvert --merge  [-b] [-i <replaceable>SECONDS</replaceable>] [<replaceable>SNAP_VOLUME_PATH</replaceable>[...<replaceable>snapN</replaceable>]|@<replaceable>VOLUME_TAG</replaceable>]</screen>
    <para>
     You can specify one or multiple snapshots on the command line. You can
     alternatively tag multiple source logical volumes with the same volume tag
     then specify
     <literal>@&lt;<replaceable>VOLUME_TAG</replaceable>&gt;</literal> on the
     command line. The snapshots for the tagged volumes are merged to their
     respective source logical volumes. For information about tagging logical
     volumes, see
     <xref linkend="sec-lvm-tagging" xrefstyle="SectTitleOnPage"/>.
    </para>
    <para>
     The options include:
    </para>
    <variablelist>
     <varlistentry>
      <term>-b</term>
      <term>--background</term>
      <listitem>
       <para>
        Run the daemon in the background. This allows multiple specified
        snapshots to be merged concurrently in parallel.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>-i</term>
      <term>--interval &lt;<replaceable>SECONDS</replaceable>&gt;</term>
      <listitem>
       <para>
        Report progress as a percentage at regular intervals. Specify the
        interval in seconds.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <para>
     For more information about this command, see the
     <command>lvconvert(8)</command> man page.
    </para>
    <para>
     For example:
    </para>
<screen>&prompt.sudo;lvconvert --merge /dev/lvmvg/linux01-snap</screen>
    <para>
     This command merges <filename>/dev/lvmvg/linux01-snap</filename> into its
     source logical volume.
    </para>
<screen>&prompt.sudo;lvconvert --merge @mytag</screen>
    <para>
     If <filename>lvol1</filename>, <filename>lvol2</filename>, and
     <filename>lvol3</filename> are all tagged with <literal>mytag</literal>,
     each snapshot volume is merged serially with its respective source logical
     volume; that is: <filename>lvol1</filename>, then
     <filename>lvol2</filename>, then <filename>lvol3</filename>. If the
     <literal>--background</literal> option is specified, the snapshots for the
     respective tagged logical volume are merged concurrently in parallel.
    </para>
   </step>
   <step>
    <para>
     (Optional) If both the source logical volume and snapshot volume are open
     and they can be closed, you can manually deactivate and activate the
     source logical volume to get the merge to start immediately.
    </para>
<screen>&prompt.sudo;umount <replaceable>ORIGINAL_VOLUME</replaceable>
&prompt.sudo;lvchange -an <replaceable>ORIGINAL_VOLUME</replaceable>
&prompt.sudo;lvchange -ay <replaceable>ORIGINAL_VOLUME</replaceable>
&prompt.sudo;mount <replaceable>ORIGINAL_VOLUME</replaceable> <replaceable>MOUNT_POINT</replaceable></screen>
    <para>
     For example:
    </para>
<screen>&prompt.sudo;umount /dev/lvmvg/lvol01
&prompt.sudo;lvchange -an /dev/lvmvg/lvol01
&prompt.sudo;lvchange -ay /dev/lvmvg/lvol01
&prompt.sudo;mount /dev/lvmvg/lvol01 /mnt/lvol01</screen>
   </step>
   <step>
    <para>
     (Optional) If both the source logical volume and snapshot volume are open
     and the source logical volume cannot be closed, such as the &rootuser;
     file system, you can restart the server and mount the source logical
     volume to get the merge to start immediately after the restart.
    </para>
   </step>
  </procedure>
 </sect1>
</chapter>
