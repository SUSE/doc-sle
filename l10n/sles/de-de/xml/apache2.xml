<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="apache2.xml" version="5.0" xml:id="cha-apache2">
 <title>Der HTTP-Server Apache</title>
 <info>
  <abstract>
   <para>
    Laut den Umfragen von <link xlink:href="http://www.netcraft.com/"/> und <link xlink:href="https://w3techs.com/"/> zählt der Apache HTTP-Server (Apache) zu den weltweit beliebtesten Webservern. Der von der Apache Software Foundation (<link xlink:href="http://www.apache.org/"/>) entwickelte Apache-Server läuft auf fast allen Betriebssystemen. <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> enthält Apache Version 2.4. In diesem Kapitel wird beschrieben, wie Apache installiert, konfiguriert und bedient wird. Außerdem wird die Verwendung von zusätzlichen Modulen, beispielsweise SSL, und die Fehlerbehebung für Apache erläutert.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-apache2-quickstart">
  <title>Schnelleinführung</title>

  <para>
   Dieser Abschnitt unterstützt Sie beim schnellen Konfigurieren und Starten von Apache. Zur Installation und Konfiguration von Apache müssen Sie <systemitem class="username">root</systemitem>-Benutzer sein.
  </para>

  <sect2 xml:id="sec-apache-quickstart-requirements">
   <title>Anforderungen</title>
   <para>
    Vergewissern Sie sich, dass folgende Voraussetzungen erfüllt sind, bevor Sie den Apache-Webserver einrichten:
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      Das Netzwerk des Computers ist ordnungsgemäß konfiguriert. Weitere Informationen zu diesem Thema finden Sie unter <xref linkend="cha-network"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Durch Synchronisierung mit einem Zeitserver ist sichergestellt, dass die Systemzeit des Computers genau ist. Die exakte Uhrzeit ist für Teile des HTTP-Protokolls nötig. Weitere Informationen zu diesem Thema finden Sie unter <xref linkend="cha-ntp"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Die neuesten Sicherheitsaktualisierungen sind installiert. Falls Sie sich nicht sicher sind, führen Sie YaST-Online-Update aus.
     </para>
    </listitem>
    <listitem>
     <para>
      In der Firewall ist der Standardport des Webservers ( <literal>80</literal>) geöffnet. Konfigurieren Sie hierzu <systemitem class="daemon">firewalld</systemitem> so, dass der Dienst <literal>http</literal> in der öffentlichen Zone zugelassen wird. Ausführliche Informationen finden Sie unter <xref linkend="sec-security-firewall-firewalld-cmd"/>.
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-quickstart-installation">
   <title>Installation</title>
   <para>
    Apache ist in der Standardinstallation von <phrase role="productname"><phrase os="sles"> SUSE Linux Enterprise Server</phrase></phrase> nicht enthalten. Zum Installieren von Apache mit einer vordefinierten Standardkonfiguration <quote></quote> gehen Sie wie folgt vor:
   </para>
   <procedure>
    <title>Installation von Apache mit der Standardkonfiguration</title>
    <step>
     <para>
      Starten Sie YaST, und wählen Sie <menuchoice> <guimenu>Software</guimenu>
      <guimenu>Software installieren oder löschen</guimenu> </menuchoice>.
     </para>
    </step>
    <step>
     <para>
      Wählen Sie <menuchoice> <guimenu>Filter</guimenu> <guimenu>Schemata</guimenu>
      </menuchoice> und schließlich <guimenu>Web- und LAMP-Server</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Bestätigen Sie die Installation der abhängigen Pakete, um den Installationsvorgang abzuschließen.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-apache-quickstart-start">
   <title>Start</title>
   <para>
    Sie können Apache automatisch beim Booten oder manuell starten.
   </para>
   <para>
    Um sicherzustellen, dass Apache beim Booten des Computers in den Zielen <literal>multi-user.target</literal> und <literal>graphical.target</literal> automatisch gestartet wird, führen Sie das folgende Kommando aus:
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl enable apache2.service</screen>
  
   <para>
    Weitere Informationen zu den <systemitem class="daemon">systemd</systemitem>-Zielen in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sowie eine Beschreibung zu YaST <guimenu>Services Manager</guimenu> finden Sie unter <xref linkend="sec-boot-runlevel-edit"/>.
   </para>
   <para>
    Über die Shell starten Sie Apache manuell mit dem Kommando <command>systemctl start apache2.service</command>.
   </para>
   <procedure>
    <title>Überprüfen, ob Apache ausgeführt wird</title>
    <para>
     Werden beim Starten von Apache keine Fehlermeldungen angezeigt, bedeutet dies im Normalfall, dass der Webserver ausgeführt wird. So überprüfen Sie, ob Apache ausgeführt wird:
    </para>
    <step>
     <para>
      Starten Sie einen Webbrowser und öffnen Sie <link xlink:href="http://localhost/"/>. 
     </para>
     <para>
      Wenn Apache ausgeführt wird, wird eine Testseite mit der Meldung <quote>It works!</quote> angezeigt.
     </para>
    </step>
    <step>
     <para>
      Wenn diese Seite nicht angezeigt wird, lesen Sie den Abschnitt <xref linkend="sec-apache2-troubleeshooting"/>.
     </para>
    </step>
   </procedure>
   <para>
    Nachdem der Webserver nun läuft, können Sie eigene Dokumente hinzufügen, die Konfiguration an Ihre Anforderungen anpassen und weitere Module mit den benötigten Funktionen installieren.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-configuration">
  <title>Konfigurieren von Apache</title>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet zwei Konfigurationsoptionen:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Bei der manuellen Konfiguration können Sie mehr Details einstellen, allerdings müssen Sie ohne den Komfort der Bedienoberfläche von YaST zurechtkommen.
  </para>

  <important>
   <title>Neuladen oder -starten von Apache nach Konfigurationsänderungen</title>
   <para>
    Damit Konfigurationsänderungen wirksam werden, ist in den meisten Fällen ein erneutes Laden (in einigen Fällen auch ein Neustart) von Apache erforderlich. Laden Sie Apache manuell mit <command>systemctl reload apache2.service</command> neu oder verwenden Sie eine der in <xref linkend="sec-apache2-start-stop"/> beschriebenen Neustartoptionen.
   </para>
   <para>
    Wenn Sie Apache mit YaST konfigurieren, kann dieser Schritt automatisch ausgeführt werden. Stellen Sie dazu <guimenu>HTTP-Service</guimenu> auf <guimenu>Aktiviert</guimenu> ein, wie in <xref linkend="sec-apache2-configuration-yast-server-configuration"/> beschrieben.
   </para>
  </important>

  <sect2 xml:id="sec-apache2-configuration-manually-configfiles">
   <title>ApacheKonfigurationsdateien</title>
   <para>
    Dieser Abschnitt enthält eine Übersicht über die Apache-Konfigurationsdateien. Wenn Sie die Konfiguration mit YaST vornehmen, müssen Sie diese Dateien nicht bearbeiten. Die Informationen können jedoch nützlich sein, wenn Sie später auf die manuelle Konfiguration umstellen.
   </para>
   <para>
    Die Konfigurationsdateien von Apache befinden sich in zwei verschiedenen Verzeichnissen:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename> steuert einige globale Einstellungen von Apache, beispielsweise die zu ladenden Module, die einzuschließenden Konfigurationsdateien, die beim Serverstart zu verwendenden Flags sowie Flags, die der Kommandozeile hinzugefügt werden sollen. Die Konfigurationsoptionen dieser Datei sind hinreichend dokumentiert und werden daher an dieser Stelle nicht näher erläutert. Für die Konfigurationsanforderungen eines typischen Webservers dürften die Einstellungen der Datei <filename>/etc/sysconfig/apache2</filename> ausreichen.
    </para>
   </sect3>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename> enthält alle Konfigurationsdateien für Apache. In diesem Abschnitt wird der Zweck jeder einzelnen Datei erklärt. Jede Datei enthält mehrere Konfigurationsoptionen (auch <emphasis>Direktiven</emphasis> genannt). Die Konfigurationsoptionen dieser Dateien sind hinreichend dokumentiert und werden daher an dieser Stelle nicht näher erläutert.
    </para>
    <para>
     Die Apache-Konfigurationsdateien gliedern sich wie folgt:
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- global.conf
     |- httpd.conf
     |- listen.conf
     |- loadmodule.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- protocols.conf
     |- server-tuning.conf
     |- ssl-global.conf
     |- ssl.*
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>Apache-Konfigurationsdateien in /etc/apache2/</title>
     <varlistentry>
      <term><filename>charset.conv</filename></term>
      <listitem>
       <para>
        In dieser Datei ist festgelegt, welche Zeichensätze für die verschiedenen Sprachen verwendet werden. Bearbeiten Sie diese Datei nicht.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename></term>
      <listitem>
       <para>
        Dies sind Konfigurationsdateien anderer Module. Bei Bedarf können die Konfigurationsdateien in Ihre virtuellen Hostkonfigurationen eingeschlossen werden. Beispiele finden Sie in <filename>vhosts.d/vhost.template</filename>. Sie können damit unterschiedliche Modulsätze für verschiedene virtuelle Hosts bereitstellen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename></term>
      <listitem>
       <para>
        Diese Datei enthält eine globale Konfiguration für virtuelle Hosts mit vernünftigen Standardeinstellungen. Statt die Werte in dieser Datei zu ändern, sollten Sie sie in der virtuellen Hostkonfiguration überschreiben.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename></term>
      <listitem>
       <para>
        Diese Datei legt fest, wie Apache auf Fehler reagiert. Wenn Sie die Meldungen für alle virtuellen Hosts ändern möchten, können Sie diese Datei bearbeiten. Anderenfalls sollten Sie die entsprechenden Direktiven in den virtuellen Hostkonfigurationen überschreiben.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>global.conf</filename></term>
      <listitem>
       <para>
        Diese Datei enthält die allgemeine Konfiguration des Webserver-Hauptprozesses, beispielsweise den Zugriffspfad, die Fehlerprotokolle oder die Protokollierungsstufe.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename></term>
      <listitem>
       <para>
        Dies ist die Hauptkonfigurationsdatei des Apache-Servers. Diese Datei sollten Sie nicht bearbeiten. Sie enthält in erster Linie Include-Anweisungen und globale Einstellungen. Globale Einstellungen können Sie in den entsprechenden in diesem Abschnitt aufgelisteten Konfigurationsdateien ändern. Host-spezifische Einstellungen wie DocumentRoot (absoluter Pfad) ändern Sie in der virtuellen Hostkonfiguration.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename></term>
      <listitem>
       <para>
        Diese Datei bindet Apache an bestimmte IP-Adressen und Ports. Außerdem konfiguriert diese Datei das namensbasierte virtuelle Hosting. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename></term>
      <listitem>
       <para>
        Diese Datei enthält Daten für das Modul mime_magic, mit dessen Hilfe Apache den MIME-Typ unbekannter Dateien ermittelt. Ändern Sie diese Datei nicht.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename></term>
      <listitem>
       <para>
        Diese Datei enthält die dem System bekannten MIME-Typen (genau genommen ist diese Datei eine Verknüpfung mit <filename>/etc/mime.types</filename>). Bearbeiten Sie diese Datei nicht. MIME-Typen, die hier nicht aufgelistet sind, sollten Sie der Datei <filename>mod_mime-defaults.conf</filename> hinzufügen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename></term>
      <listitem>
       <para>
        Dies sind die Konfigurationsdateien der in der Standardinstallation enthaltenen Module. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-modules"/>. Die Konfigurationsdateien optionaler Module befinden sich im Verzeichnis <filename>conf.d</filename>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>protocols.conf</filename></term>
      <listitem>
       <para>
        Dies sind die Konfigurationsdirektiven für die Bereitstellung von Seiten über eine HTTP2-Verbindung.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename></term>
      <listitem>
       <para>
        Diese Datei enthält Konfigurationsdirektiven für verschiedene MPMs (siehe <xref linkend="sec-apache2-modules-mpm"/>) und allgemeine Konfigurationsoptionen, die sich auf die Leistung von Apache auswirken. Sie können diese Datei bearbeiten, sollten den Webserver anschließend aber gründlich testen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> und <filename>ssl.*</filename></term>
      <listitem>
       <para>
        Diese Dateien enthalten die globale SSL-Konfiguration und die SSL-Zertifikatdaten. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-ssl"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename></term>
      <listitem>
       <para>
        Diese Konfigurationsdateien werden automatisch aus <filename>/etc/sysconfig/apache2</filename> generiert.  Ändern Sie diese Dateien nicht. Bearbeiten Sie stattdessen die Dateien unter <filename>/etc/sysconfig/apache2</filename>. Speichern Sie in diesem Verzeichnis keine anderen Konfigurationsdateien.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename></term>
      <listitem>
       <para>
        Diese Datei gibt die Benutzer- und Gruppen-ID an, unter der Apache läuft. Ändern Sie diese Datei nicht.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename></term>
      <listitem>
       <para>
        In diesem Verzeichnis wird die virtuelle Host-Konfiguration gespeichert. Das Verzeichnis enthält Vorlagendateien für virtuelle Hosts mit und ohne SSL. Alle Dateien in diesem Verzeichnis mit der Erweiterung <filename>.conf</filename> sind automatisch Bestandteil der Apache-Konfiguration. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost"/>.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-configuration-manually">
   <title>Manuelle Konfiguration von Apache</title>
   <para>
    Wenn Sie den Apache-Webserver manuell konfigurieren möchten, müssen Sie die Klartext-Konfigurationsdateien als <systemitem class="username">root</systemitem>-Benutzer bearbeiten.
   </para>
   <sect3 xml:id="sec-apache2-configuration-manually-vhost">
    <title>Virtuelle Hostkonfiguration</title>
    <para>
     <emphasis>Virtueller Host</emphasis> bezieht sich auf die Fähigkeit von Apache, mehrere URI (Universal Resource Identifiers) vom gleichen physischen Computer aus bedienen zu können. In anderen Worten: Mehrere Domänen wie www.beispiel.com und www.beispiel.net können von einem einzigen Webserver auf einem physischen Computer ausgeführt werden.
    </para>
    <para>
     Virtuelle Hosts werden häufig eingesetzt, um Verwaltungsaufwand (nur ein Webserver muss verwaltet werden) und Hardware-Kosten (für die einzelnen Domänen ist kein dedizierter Server erforderlich) zu sparen. Virtuelle Hosts können auf Namen, IP-Adressen oder Ports basieren.
    </para>
    <para>
     Verwenden Sie zum Auflisten aller vorhandenen virtuellen Hosts das Kommando <command>apache2ctl</command> <option>-S</option>. Dadurch wird eine Liste mit dem Standardserver und allen virtuellen Hosts zusammen mit deren IP-Adressen und überwachenden Ports ausgegeben. Zusätzlich enthält die Liste einen Eintrag für jeden virtuellen Host mit dessen Speicherort in den Konfigurationsdateien.
    </para>
    <para>
     Virtuelle Hosts können mit YaST (siehe <xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>) oder manuell durch Bearbeitung einer Konfigurationsdatei konfiguriert werden. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ist Apache unter <filename>/etc/apache2/vhosts.d/</filename>  standardmäßig für eine Konfigurationsdatei pro virtuellen Host vorbereitet. Alle Dateien in diesem Verzeichnis mit der Erweiterung <filename>.conf</filename> sind automatisch Bestandteil der Konfiguration. Außerdem enthält dieses Verzeichnis eine grundlegende Vorlage für virtuelle Hosts (<filename>vhost.template</filename> bzw. <filename>vhost-ssl.template</filename> für einen virtuellen Host mit SSL-Unterstützung).
    </para>
    <tip>
     <title>Erstellen Sie immer eine virtuelle Hostkonfiguration.</title>
     <para>
      Es empfiehlt sich, immer eine virtuelle Hostkonfiguration zu erstellen, selbst dann, wenn der Webserver nur eine Domäne enthält. Dadurch fassen Sie nicht nur die gesamte domänenspezifische Konfiguration in einer einzigen Datei zusammen, sondern Sie können auch jederzeit auf eine funktionierende Basiskonfiguration zurückgreifen, indem Sie einfach die Konfigurationsdatei des virtuellen Hosts verschieben, löschen oder umbenennen. Aus dem gleichen Grund sollten Sie auch für jeden virtuellen Host eine eigene Konfigurationsdatei erstellen.
     </para>
     <para>
      Bei der Verwendung von namenbasierten virtuellen Hosts empfiehlt es sich, eine Standardkonfiguration einzurichten, die verwendet wird, wenn ein Domänenname nicht mit einer virtuellen Hostkonfiguration übereinstimmt. Der virtuelle Standardhost ist der Host, dessen Konfiguration zuerst geladen wird. Da die Reihenfolge der Konfigurationsdateien durch den Dateinamen bestimmt wird, starten Sie den Dateinamen der Konfiguration des virtuellen Standardhosts mit einem Unterstrich <literal>_</literal>, um sicherzustellen, dass sie zuerst geladen wird (z. B. <filename>_default_vhost.conf</filename>).
     </para>
    </tip>
    <para>
     Der <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem>-Block enthält die Informationen zu einer bestimmten Domäne. Wenn Apache eine Client-Anforderung für einen definierten virtuellen Host empfängt, verwendet es die in diesem Block angegebenen Direktiven. Nahezu alle Direktiven können auch im Kontext eines virtuellen Hosts verwendet werden. Weitere Informationen zu den Konfigurationsdirektiven von Apache finden Sie unter <link xlink:href="http://httpd.apache.org/docs/2.4/mod/quickreference.html"/>.
    </para>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>Namensbasierte virtuelle Hosts</title>
     <para>
      Namensbasierte virtuelle Hosts können an jeder IP-Adresse mehrere Websites bedienen. Apache verwendet das Hostfeld in dem vom Client übersandten HTTP-Header, um die Anforderung mit einem übereinstimmenden  <systemitem>ServerName</systemitem>-Eintrag der virtuellen Hostdeklarationen zu verbinden. Wird kein übereinstimmender <systemitem>ServerName</systemitem> gefunden, dann wird der erste angegebene virtuelle Host als Standard verwendet.
     </para>
     <para>
      Erstellen Sie zunächst je einen <literal>&lt;VirtualHost&gt;</literal>-Block für die einzelnen zu bedienenden namensbasierten Hosts. Jeder <literal>&lt;VirtualHost&gt;</literal>-Block muss mindestens eine <literal>ServerName</literal>-Direktive enthalten, mit der die zu bedienenden Hosts zugewiesen werden, sowie eine <literal>DocumentRoot</literal>-Direktive, aus der der Speicherort im Dateisystem hervorgeht, an dem sich der Inhalt für diesen Host befindet.
     </para>
     <example xml:id="ex-apache2-virtual-hosts-name-based">
      <title>Einfache Beispiele für namensbasierte <systemitem>VirtualHost</systemitem>-Einträge</title>
<screen>&lt;VirtualHost *:80&gt;
# This first-listed virtual host is also the default for *:80
ServerName www.example.com
ServerAlias example.com
DocumentRoot /srv/www/htdocs/domain
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
ServerName other.example.com
DocumentRoot /srv/www/htdocs/otherdomain
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      In einer namensbasierten virtuellen Hostkonfiguration übernimmt das <systemitem>VirtualHost</systemitem>-Anfangstag die IP-Adresse (bzw. den vollständig qualifizierten Domänennamen) als Argument. Eine Portnummer-Direktive ist optional.
     </para>
     <para>
      Anstelle der IP-Adresse wird auch ein Platzhalterzeichen (<emphasis>*</emphasis>) akzeptiert. IPv6-Adressen müssen in eckige Klammern eingeschlossen werden.
     </para>
     <example xml:id="ex-apache-directives-virtualhost-name-based">
      <title>Namensbasierte <systemitem>VirtualHost</systemitem>-Direktiven</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>IP-basierte virtuelle Hosts</title>
     <para>
      Bei dieser alternativen virtuellen Hostkonfiguration werden auf einem Computer mehrere IP-Adressen eingerichtet. Auf einer Apache-Instanz befinden sich mehrere Domänen, denen jeweils eine eigene IP zugewiesen ist.
     </para>
     <para>
      Auf dem physischen Server muss für jeden IP-basierten virtuellen Host eine eigene IP-Adresse eingerichtet sein. Falls der Computer nicht über die entsprechende Anzahl an Netzwerkkarten verfügt, können auch virtuelle Netzwerkschnittstellen verwendet werden (IP-Aliasing).
     </para>
     <para>
      Das folgende Beispiel zeigt Apache auf einem Computer mit der IP <systemitem class="ipaddress">192.168.3.100</systemitem>,  , auf dem sich zwei Domänen mit den zusätzlichen IP-Adressen <systemitem class="ipaddress">192.168.3.101</systemitem> und <systemitem class="ipaddress">192.168.3.102</systemitem> befinden. Für jeden virtuellen Server wird ein eigener <systemitem>VirtualHost</systemitem>-Block benötigt.
     </para>
     <example xml:id="ex-apache-directives-virtualhost-ip-based">
      <title>IP-basierte <systemitem>VirtualHost</systemitem>-Direktiven</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      In diesem Beispiel sind nur für die beiden zusätzlichen IP-Adressen (also nicht für <systemitem>192.168.3.100</systemitem>) <systemitem>VirtualHost</systemitem>-Direktiven angegeben. Sollte für <systemitem>192.168.3.100</systemitem> auch eine <systemitem>Listen</systemitem>-Direktive konfiguriert sein, müsste ein eigener IP-basierter Host für die HTTP-Anforderungen an diese Schnittstelle eingerichtet werden. Anderenfalls fänden die Direktiven aus der Standardserverkonfiguration (<filename>/etc/apache2/default-server.conf</filename>) Anwendung.
     </para>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>Basiskonfiguration eines virtuellen Hosts</title>
     <para>
      Die Konfiguration eines virtuellen Hosts sollte mindestens die folgenden Direktiven enthalten, um den virtuellen Host einzurichten. Weitere Optionen finden Sie in <filename>/etc/apache2/vhosts.d/vhost.template</filename>.
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem></term>
       <listitem>
        <para>
         Der vollständig qualifizierte Domänenname, unter dem der Host angesprochen wird.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem></term>
       <listitem>
        <para>
         Der absolute Pfad des Verzeichnisses, aus dem Apache die Dateien für diesen Host bedient. Aus Sicherheitsgründen ist standardmäßig auf das gesamte Dateisystem kein Zugriff möglich. Sie müssen dieses Verzeichnis daher explizit innerhalb eines <systemitem>Directory</systemitem>-Containers entsperren.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem></term>
       <listitem>
        <para>
         Email-Adresse des Serveradministrators. Diese Adresse ist beispielsweise auf den von Apache erstellten Fehlerseiten angegeben.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem></term>
       <listitem>
        <para>
         Das Fehlerprotokoll dieses virtuellen Hosts. Ein eigenes Fehlerprotokoll für jeden virtuellen Host ist zwar nicht zwingend erforderlich, jedoch durchaus üblich, da dies die Fehlersuche erleichtert. <filename>/var/log/apache2/</filename> ist das Standardverzeichnis für die Protokolldateien von Apache.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem></term>
       <listitem>
        <para>
         Das Zugriffsprotokoll dieses virtuellen Hosts. Ein eigenes Zugriffsprotokoll für jeden virtuellen Host ist zwar nicht zwingend erforderlich, jedoch durchaus üblich, da dies die separate Analyse der Zugriffsdaten für jeden einzelnen Host ermöglicht. <filename>/var/log/apache2/</filename> ist das Standardverzeichnis für die Protokolldateien von Apache.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Wie bereits erwähnt, ist standardmäßig auf das gesamte Dateisystem kein Zugriff möglich. Die Verzeichnisse, in die Sie die Dateien gestellt haben, mit denen Apache arbeiten soll – zum Beispiel das Verzeichnis <systemitem>DocumentRoot</systemitem> –, müssen daher explizit entsperrt werden:
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
&lt;/Directory&gt;</screen>
     <note>
      <title><literal>Require all granted</literal></title>
      <para>
       In vorherigen Versionen von Apache wurde die Anweisung <literal>Require all granted</literal> wie folgt ausgedrückt:
      </para>
<screen>Order allow,deny
Allow from all</screen>
      <para>
       Diese alte Syntax wird vom <literal>mod_access_compat</literal>-Modul nach wie vor unterstützt.
      </para>
     </note>
     <para>
      Die vollständige Basiskonfiguration eines virtuellen Hosts sieht wie folgt aus:
     </para>
     <example xml:id="ex-apache-directives-virtualhost-basic-configuration">
      <title>Grundlegende <systemitem>VirtualHost</systemitem>-Konfiguration</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
   </sect3>
  </sect2>



  <xi:include href="apache2_yast_i.xml"/>


 </sect1>
 <sect1 xml:id="sec-apache2-start-stop">
  <title>Starten und Beenden von Apache</title>

  <remark>taroth 2014-02-11: @file-maintainer: please give the following a
 thorough check - so far I only replaced the rc* commands by the systemctl
 (and where those are not available, by apachectl commands as advised by
 crrodriguez), but the descriptions might need adjustment and some commands
 are probably no longer around, therefore I commented them</remark>

  <para>
   Bei Konfiguration mit YaST, wie in <xref linkend="sec-apache2-configuration-yast"/> beschrieben, wird Apache beim Booten des Computers in <systemitem>multi-user.target</systemitem> und <systemitem>graphical.target</systemitem> gestartet. Diese Funktionsweise können Sie mit YaST <guimenu>Services Manager</guimenu> oder dem Kommandozeilenwerkzeug <command>systemctl</command> (<command>systemctl enable</command> oder <command>systemctl disable</command>) ändern.
  </para>

  <para>
   Mit den Kommandos <command>systemctl</command> bzw. <command>apachectl</command> können Sie Apache auf einem laufenden System starten, stoppen und ändern.
  </para>

  <para>
   Allgemeine Informationen zu <command>systemctl</command>-Kommandos finden Sie unter <xref linkend="sec-boot-systemd-basics-services"/>.
  </para>

  <variablelist>
   <varlistentry>
    <term><command>systemctl status apache2.service</command></term>
    <listitem>
     <para>
      Überprüft, ob Apache gestartet wurde.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl start apache2.service</command></term>
    <listitem>
     <para>
      Startet Apache, sofern es noch nicht läuft.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl stop apache2.service</command></term>
    <listitem>
     <para>
      Stoppt Apache durch Beenden des übergeordneten Prozesses.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl restart apache2.service</command></term>
    <listitem>
     <para>
      Beendet Apache und startet es danach neu. Falls der Webserver noch nicht gelaufen ist, wird er nun gestartet.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl try-restart apache2.service</command></term>
    <listitem>
     <para>
      Stoppt Apache und startet es erneut, vorausgesetzt, es wird bereits ausgeführt.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl reload apache2.service</command></term>
    <listitem>
     <para>
      Beendet den Webserver erst, nachdem alle durch Forking erstellten Apache-Prozesse aufgefordert wurden, ihre Anforderungen vor dem Herunterfahren zu Ende zu führen. Anstelle der beendeten Prozesse werden neue Prozesse gestartet. Dies führt zu einem vollständigen <quote>Neustart</quote> von Apache.
     </para>
     <tip>
      <title>Neustart von Apache in Produktionsumgebungen</title>
      <para>
       Mit diesem Kommando können Änderungen in der Apache-Konfiguration aktiviert werden, ohne dass die Verbindung unterbrochen wird.
      </para>
     </tip>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><command>systemctl stop apache2.service</command></term>
    <listitem>
     <para>
      Hält den Webserver nach einer Zeitdauer an, die mit <systemitem>GracefulShutdownTimeout</systemitem> konfiguriert wurde, um sicherzustellen, dass die bestehenden Anforderungen abgeschlossen werden können.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl configtest</command></term>
    <listitem>
     <para>
      Überprüft die Syntax der Konfigurationsdateien, ohne den laufenden Webserver zu beeinträchtigen. Da dieser Test beim Starten, Neuladen oder Neustarten des Servers automatisch durchgeführt wird, ist eine explizite Ausführung des Tests in der Regel nicht notwendig. Bei einem Konfigurationsfehler wird der Webserver ohnehin nicht gestartet, neu geladen oder neu gestartet.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl status</command> und <command>apachectl fullstatus</command></term>
    <listitem>
     <para>
      Erstellt einen Dump des kurzen oder vollständigen Statusfensters. Das Module <systemitem>mod_status</systemitem> muss aktiviert und ein Textbrowser (z. B. <command>links</command> oder <command>w3m</command>) muss installiert sein. Außerdem muss <literal>/etc/sysconfig/apache2</literal> unter <systemitem>APACHE_SERVER_FLAGS</systemitem> das Flag <filename>STATUS</filename> enthalten.
     </para>
    </listitem>
   </varlistentry>





  </variablelist>

  <tip>
   <title>Weitere Flags</title>
   <para>
    Weitere Flags, die Sie mit den Kommandos angeben, werden direkt an den Webserver weitergeleitet.
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-apache2-modules">
  <title>Installieren, Aktivieren und Konfigurieren von Modulen</title>

  <para>
   Die Apache-Software ist modular aufgebaut. Alle Funktionen außer einigen Kernaufgaben werden von Modulen durchgeführt Dies geht sogar so weit, dass selbst HTTP durch ein Modul verarbeitet wird (<systemitem>http_core</systemitem>).
  </para>

  <para>
   Apache-Module können bei der Entwicklung in die Apache-Binaries kompiliert oder während der Laufzeit dynamisch geladen werden. Informationen zum dynamischen Laden von Modulen erhalten Sie unter <xref linkend="sec-apache2-modules-activating"/>.
  </para>

  <para>
   Apache-Module sind in die folgenden Kategorien gegliedert:
  </para>

  <variablelist>
   <varlistentry>
    <term>Basismodule</term>
    <listitem>
     <para>
      Basismodule sind standardmäßig in Apache enthalten. In Apache in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sind nur <systemitem>mod_so</systemitem> (zum Laden anderer Module) und <systemitem>http_core</systemitem> kompiliert. Alle anderen Module sind als gemeinsam genutzte Objekte verfügbar: Sie sind nicht in der Server-Binärdatei enthalten, sondern können zur Laufzeit eingebunden werden.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Erweiterungsmodule</term>
    <listitem>
     <para>
      Im Allgemeinen sind Erweiterungsmodule im Apache-Softwarepaket enthalten, jedoch nicht statisch im Server kompiliert. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> stehen diese Module als gemeinsame Objekte zur Verfügung, die während der Laufzeit in Apache geladen werden können.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Externe Module</term>
    <listitem>
     <para>
      Externe Module sind nicht in der offiziellen Apache-Distribution enthalten. <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> umfasst jedoch mehrere Module.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Multiprocessing-Module (MPMs)</term>
    <listitem>
     <para>
      Multiprocessing-Module (MPMs) sind dafür verantwortlich, Anforderungen an den Webserver anzunehmen und zu verarbeiten, und stellen damit das Kernstück der Webserver-Software dar.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-apache2-modules-installing">
   <title>Installieren von Modulen</title>
   <para>
    Wenn Sie die in <xref linkend="sec-apache2-quickstart-installation"/> beschriebene Standardinstallation vorgenommen haben, sind folgende Module bereits installiert: alle Basis- und Erweiterungsmodule, das Multiprocessing-Modul Prefork MPM sowie das externe Modul <systemitem>mod_python</systemitem>.
   </para>
   <para>
    In YaST können Sie weitere externe Module installieren. Starten Sie dazu YaST und wählen Sie <menuchoice><guimenu>Software</guimenu> <guimenu>Software-Management</guimenu></menuchoice>. Wählen Sie danach <menuchoice><guimenu>Ansicht</guimenu> <guimenu>Suche</guimenu></menuchoice> und suchen Sie nach <literal>apache</literal>. Die Ergebnisliste zeigt nun neben anderen Paketen alle verfügbaren externen Apache-Module an.
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-activating">
   <title>Aktivieren und Deaktivieren von Modulen</title>
   <para>
    Sie können bestimmte Module entweder manuell oder mit YaST aktivieren oder deaktivieren. In YaST müssen die Skriptsprachmodule (PHP 8 und Python) mit der im Abschnitt <xref linkend="sec-apache2-configuration-yast-wizard"/> beschriebenen Modulkonfiguration aktiviert oder deaktiviert werden. Alle anderen Module werden, wie im Abschnitt <xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/> beschrieben, aktiviert oder deaktiviert.
   </para>
   <para>
    Mit den Kommandos <command>a2enmod</command> <replaceable>MODUL</replaceable> bzw. <command>a2dismod</command> <replaceable>MODUL</replaceable> können Sie die Module stattdessen manuell aktivieren oder deaktivieren. <command>a2enmod -l</command> gibt eine Liste aller derzeit aktiven Module aus.
   </para>
   <important>
    <title>Einschließen der Konfigurationsdateien externer Module</title>
    <para>
     Wenn Sie externe Module manuell aktivieren, müssen Sie sicherstellen, dass auch ihre Konfigurationsdateien in allen virtuellen Hostkonfigurationen geladen werden. Die Konfigurationsdateien externer Module befinden sich unter <filename>/etc/apache2/conf.d/</filename> und werden standardmäßig in <filename>/etc/apache2/default-server.conf</filename> geladen. Für eine feinere Steuerung können Sie die Einbeziehung in <filename>/etc/apache2/default-server.conf</filename> auskommentieren und sie nur zu bestimmten virtuellen Hosts hinzufügen. Beispiele hierzu finden Sie in der Datei <filename>/etc/apache2/vhosts.d/vhost.template</filename>.
    </para>
   </important>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-base-extension">
   <title>Basis- und Erweiterungsmodule</title>
   <para>
    Alle Basis- und Erweiterungsmodule werden ausführlich in der Apache-Dokumentation beschrieben. An dieser Stelle gehen wir daher nur kurz auf die wichtigsten Module ein. Informationen zu den einzelnen Modulen erhalten Sie auch unter <link xlink:href="http://httpd.apache.org/docs/2.4/mod/">http://httpd.apache.org/docs/2.4/mod/</link>.
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem></term>
     <listitem>
      <para>
       Bietet Methoden zur Ausführung eines Skripts, wenn ein bestimmter MIME-Typ (z. B. <systemitem>application/pdf</systemitem>), eine Datei mit einer bestimmten Erweiterung (z. B. <filename>.rpm</filename>) oder eine bestimmte Anforderungsmethode (z. B. <systemitem>GET</systemitem>) verlangt wird.  Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem></term>
     <listitem>
      <para>
       Dieses Modul stellt die Direktiven <systemitem>Alias</systemitem> und <systemitem>Redirect</systemitem> bereit. Damit können Sie eine URI einem bestimmten Verzeichnis zuordnen (<systemitem>Alias</systemitem>) bzw. eine angeforderte URL umleiten. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem></term>
     <listitem>
      <para>
       Die Authentifizierungsmodule bieten verschiedene Methoden zur Authentifizierung: Basisauthentifizierung mit <systemitem>mod_auth_basic</systemitem> oder Digest-Authentifizierung mit <systemitem>mod_auth_digest</systemitem>.
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem> und <systemitem>mod_auth_digest</systemitem> funktionieren nur gemeinsam mit dem Authentifizierungsanbietermodul <systemitem>mod_authn_*</systemitem> (z. B. <systemitem>mod_authn_file</systemitem> für die Authentifizierung auf Basis einer Textdatei) und mit dem Autorisierungsmodul <systemitem>mod_authz_*</systemitem> (z. B. <systemitem>mod_authz_user</systemitem> für die Benutzerautorisierung).
      </para>
      <para>
       Weitere Informationen zu diesem Thema erhalten Sie im Artikel <citetitle>Gewusst wie: Authentifizierung</citetitle> unter <link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth_openidc</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_auth_openidc</systemitem> ist die einzige zertifizierte Methode zur Verwendung von OpenID Connect mit dem Apache HTTP-Server. (Siehe <link xlink:href="https://openid.net/developers/certified/"/>.)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem></term>
     <listitem>
      <para>
       Wenn keine Indexdatei vorhanden ist (z. B. <filename>index.html</filename>), generiert mod_autoindex Verzeichnislisten. Das Aussehen dieser Indizes kann konfiguriert werden. Dieses Modul ist standardmäßig aktiviert. Allerdings sind Verzeichnislisten durch die <systemitem>Options</systemitem>-Direktive standardmäßig deaktiviert – Sie müssen diese Einstellung daher in Ihrer virtuellen Hostkonfiguration ändern. Die Standardkonfigurationsdatei dieses Moduls befindet sich unter <filename>/etc/apache2/</filename> und heißt mod_autoindex-defaults.conf.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_cgi</systemitem> wird zur Ausführung von CGI-Skripten benötigt. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem></term>
     <listitem>
      <para>
       Mit diesem Modul kann Apache so konfiguriert werden, dass bestimmte Dateitypen automatisch vor der Bereitstellung komprimiert werden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_dir</systemitem> stellt die <systemitem>DirectoryIndex</systemitem>-Direktive bereit, mit der Sie festlegen können, welche Dateien bei Anforderung eines Verzeichnisses automatisch zurückgegeben werden (standardmäßig <filename>index.html)</filename>. Außerdem leitet dieses Modul automatisch zur korrekten URI um, wenn in einer Verzeichnisanforderung der nachgestellte Schrägstrich fehlt. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem></term>
     <listitem>
      <para>
       Steuert die Umgebungsvariablen, die an CGI-Skripten oder SSI-Seiten übergeben werden. Sie können Umgebungsvariablen festlegen oder aufheben oder von der Shell übergeben, die den <systemitem class="daemon">httpd</systemitem>-Prozess aufgerufen hat. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem></term>
     <listitem>
      <para>
       Mit <systemitem>mod_expires</systemitem> legen Sie fest, wie häufig Ihre Dokumente über Proxy- und Browser-Caches durch Zustellung eines <systemitem>Expires</systemitem>-Header aktualisiert werden. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_http2</systemitem></term>
     <listitem>
      <para>
       Dank <systemitem>mod_http2</systemitem> unterstützt Apache das HTTP/2-Protokoll. Dies kann durch Angabe von <literal>Protocols h2 http/1.1</literal> in einem <systemitem>VirtualHost</systemitem> aktiviert werden.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_include</systemitem> ermöglicht die Verwendung von serverseitigen Includes (SSI), die die grundlegende Funktionalität für die dynamische Generierung von HTML-Seiten bereitstellen. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem></term>
     <listitem>
      <para>
       Dieses Modul stellt unter http://localhost/server-info/ eine umfassende Übersicht über die Serverkonfiguration bereit. Aus Sicherheitsgründen sollte der Zugriff auf diese URL generell eingeschränkt sein. Standardmäßig erhält nur <systemitem class="domainname">localhost</systemitem> den Zugriff auf diese URL. <systemitem>mod_info</systemitem> wird unter <filename>/etc/apache2/mod_info.conf</filename> konfiguriert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem></term>
     <listitem>
      <para>
       Mit diesem Modul konfigurieren Sie den Aufbau der Apache-Protokolldateien. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem></term>
     <listitem>
      <para>
       Das MIME-Modul sorgt dafür, dass eine Datei auf Basis seiner Dateinamenerweiterung mit dem korrekten MIME-Header bereitgestellt wird (z. B. <systemitem>text/html</systemitem> für HTML-Dokumente). Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem></term>
     <listitem>
      <para>
       Dieses Modul ist für die Inhaltsverhandlung erforderlich. Weitere Informationen erhalten Sie unter <link xlink:href="http://httpd.apache.org/docs/2.4/content-negotiation.html">http://httpd.apache.org/docs/2.4/content-negotiation.html</link>. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem></term>
     <listitem>
      <para>
       Dieses Modul stellt die gleiche Funktionalität wie <systemitem>mod_alias</systemitem> bereit, bietet aber mehr Funktionen und ist somit flexibler. Mit <systemitem>mod_rewrite</systemitem> können Sie URLs auf Basis verschiedener Regeln umleiten, Header anfordern und einiges mehr.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem></term>
     <listitem>
      <para>
       Legt Umgebungsvariablen auf der Basis von Details aus der Client-Anforderung fest, z. B. die Browserzeichenfolge, die der Client sendet, oder die IP-Adresse des Clients.  Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_spelling</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_spelling</systemitem> versucht, typografische Fehler in URLs, beispielsweise die Groß-/Kleinschreibung, automatisch zu korrigieren.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem></term>
     <listitem>
      <para>
       Dieses Modul ermöglicht verschlüsselte Verbindungen zwischen dem Webserver und den Clients. Ausführliche Informationen finden Sie unter <xref linkend="sec-apache2-ssl"/>. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem></term>
     <listitem>
      <para>
       Dieses Modul stellt unter http://localhost/server-status/ Informationen über die Aktivität und Leistung des Servers bereit. Aus Sicherheitsgründen sollte der Zugriff auf diese URL generell eingeschränkt sein. Standardmäßig erhält nur <systemitem class="domainname">localhost</systemitem> den Zugriff auf diese URL. <systemitem>mod_status</systemitem> wird unter <filename>/etc/apache2/mod_status.conf</filename> konfiguriert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem> ermöglicht die Ausführung von CGI-Skripten unter einem anderen Benutzer oder einer anderen Gruppe. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem></term>
     <listitem>
      <para>
       Dieses Modul ermöglicht benutzerspezifische Verzeichnisse unter <filename>~<replaceable>USER</replaceable>/</filename>. In der Konfiguration muss die <systemitem>UserDir</systemitem>-Direktive angegeben sein. Dieses Modul ist standardmäßig aktiviert.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-mpm">
   <title>Multiprocessing-Module</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet zwei Multiprocessing-Module (MPMs) für Apache:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-modules-mpm-prefork">
    <title>Prefork-MPM</title>
    <para>
     Das Prefork-MPM implementiert einen Prefork-Webserver, der keine Threads verwendet. Mit diesem Modul verhält sich der Webserver, was die Handhabung von Anforderungen betrifft, ähnlich wie Apache Version 1.x: Er isoliert jede einzelne Anforderung und verarbeitet sie in einem separaten untergeordneten Prozess (Forking). Eine Beeinträchtigung aller Anforderungen durch wenige problematische Anforderungen und somit eine Sperre des Webservers lassen sich dadurch vermeiden.
    </para>
    <para>
     Die prozessbasierte Vorgehensweise des Prefork-MPM bietet zwar Stabilität, konsumiert aber mehr Systemressourcen wie das Worker-MPM. Für UNIX-basierte Betriebssysteme gilt das Prefork-MPM als Standard-MPM.
    </para>
    <important>
     <title>MPMs in diesem Dokument</title>
     <para>
      In diesem Dokument wird davon ausgegangen, dass Apache mit dem Prefork-MPM verwendet wird.
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-modules-mpm-worker">
    <title>Worker-MPM</title>
    <para>
     Das Worker-MPM implementiert einen Multithread-Webserver. Ein Thread ist die <quote>Lightweight-Version</quote> eines Prozesses. Der Vorteil von Threads gegenüber Prozessen ist deren geringerer Ressourcenkonsum. Anstatt lediglich untergeordnete Prozesse zu erstellen (Forking), verarbeitet das Worker-MPM Anforderungen durch Threads mit Serverprozessen. Die untergeordneten Prefork-Prozesse sind auf mehrere Threads verteilt (Multithreading). Diese Ansatzweise macht den Apache-Server durch den geringeren Ressourcenkonsum leistungsfähiger als mit dem Prefork-MPM.
    </para>
    <para>
     Ein Hauptnachteil ist die Instabilität des Worker-MPM: Ein fehlerhafter Thread kann sich auf alle Threads eines Prozesses auswirken. Im schlimmsten Fall fällt der Server dadurch aus. Besonders bei gleichzeitiger Verwendung des Common Gateway Interface (CGI) auf einem überlasteten Apache-Server kann es zu internen Serverfehlern kommen, da Threads in diesem Fall unter Umständen nicht in der Lage sind, mit den Systemressourcen zu kommunizieren. Gegen die Verwendung des Worker-MPM in Apache spricht auch die Tatsache, dass nicht alle verfügbaren Apache-Module Thread-sicher sind und daher nicht mit dem Worker-MPM eingesetzt werden können.
    </para>
    <warning>
     <title>Verwendung von PHP-Modulen mit MPMs</title>
     <para>
      Nicht alle verfügbaren PHP-Module sind Thread-sicher. Von einer Verwendung des Worker-MPM in Verbindung mit <systemitem>mod_php</systemitem> wird daher abgeraten.
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-external">
   <title>Externe Module</title>
   <para>
    Nachfolgend finden Sie eine Liste aller externen Module, die mit <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ausgeliefert werden. Die Dokumentation zu den einzelnen Modulen finden Sie in den jeweils genannten Verzeichnissen.
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem></term>
     <listitem>
      <para>
       Unterstützt Apache bei der <phrase>AppArmor</phrase>-Einschränkung auf einzelne cgi-Skripte, die von Modulen wie <systemitem>mod_php8</systemitem> benutzt werden.
      </para>
      <simplelist><member>
        Paketname: <systemitem>apache2-mod_apparmor</systemitem></member><member>
        Weitere Informationen: <xref linkend="part-apparmor"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php8</systemitem></term>
     <listitem>
      <para>
       PHP ist eine serverseitige, plattformübergreifende, in HTML eingebettete Skriptsprache.
      </para>
      <simplelist><member>
        Paketname: <systemitem>apache2-mod_php8</systemitem></member><member>
        Konfigurationsdatei: <filename>/etc/apache2/conf.d/php8.conf</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem> bettet Python in den Apache-Webserver ein. Dies bringt Ihnen einen erheblichen Leistungsgewinn und zusätzliche Flexibilität bei der Entwicklung webbasierter Anwendungen.
      </para>
      <simplelist><member>
        Paketname: <systemitem>apache2-mod_python</systemitem></member><member>
        Weitere Informationen: <filename>/usr/share/doc/packages/apache2-mod_python</filename></member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem></term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem> bietet eine Firewall zum Schutz von Webanwendungen vor verschiedenen Angriffen. Auch die Überwachung des HTTP-Datenverkehrs und die Echtzeitanalyse werden damit ermöglicht.
      </para>
      <simplelist><member>
        Paketname: <systemitem>apache2-mod_security2</systemitem></member><member>
        Konfigurationsdatei: <filename>/etc/apache2/conf.d/mod_security2.conf</filename></member><member>
        Weitere Informationen: <filename>/usr/share/doc/packages/apache2-mod_security2</filename></member><member>
        Dokumentation: <link xlink:href="http://modsecurity.org/documentation/"/></member>
      </simplelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-building-modules">
   <title>Kompilieren von Modulen</title>
   <para>
    Apache kann von erfahrenen Benutzern durch selbst entwickelte Module erweitert werden. Zum Entwickeln von Modulen für Apache oder zum Kompilieren von Drittanbietermodulen ist das Paket <systemitem>apache2-devel</systemitem> zusammen mit den entsprechenden Entwicklerwerkzeugen erforderlich. <systemitem>apache2-devel</systemitem> enthält außerdem die <command>apxs2</command>-Werkzeuge, die zum Kompilieren zusätzlicher Module für Apache erforderlich sind.
   </para>
   <para>
    <command>apxs2</command> ermöglicht die Kompilierung und Installation von Modulen aus dem Quellcode (einschließlich der erforderlichen Änderungen an den Konfigurationsdateien). Dadurch ergeben sich <emphasis>Dynamic Shared Objects</emphasis> (DSOs), die während der Laufzeit in Apache geladen werden können.
   </para>
   <para>
    Die Binaries von <command>apxs2</command> befinden sich unter <filename>/usr/sbin</filename>:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename>: Für die Entwicklung von Erweiterungsmodulen, die mit allen MPMs verwendbar sind. Das Installationsverzeichnis ist <filename>/usr/lib64/apache2</filename>.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename>: Für die Entwicklung von Prefork-MPM-Modulen. Das Installationsverzeichnis ist <filename>/usr/lib64/apache2-prefork</filename>.
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename>: Für die Entwicklung von Worker-MPM-Modulen. Das Installationsverzeichnis ist <filename>/usr/lib64/apache2-worker</filename>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Mit den folgenden Kommandos installieren und aktivieren Sie ein Modul aus dem Quellcode:
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cd /path/to/module/source
<prompt>&gt; </prompt><command>sudo</command> apxs2 -cia <replaceable>MODULE</replaceable>.c</screen>
   <para>
    wobei das Modul mit <option>-c</option> kompiliert, mit <option>-i</option> installiert und mit <option>-a</option> aktiviert wird. Alle weiteren Optionen von <command>apxs2</command> werden auf der man-Seite <systemitem>apxs2(1)</systemitem> beschrieben.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-cgi">
  <title>Aktivieren von CGI-Skripten</title>

  <para>
   Die Common Gateway Interface (CGI) von Apache ermöglicht die Erstellung dynamischer Inhalte mit Programmen bzw. sogenannten CGI-Skripten. CGI-Skripten können in jeder beliebigen Programmiersprache geschrieben sein. In der Regel werden aber Skriptsprachen wie PHP verwendet.
  </para>

  <para>
   Damit Apache in der Lage ist, die von CGI-Skripts erstellten Inhalte bereitzustellen, muss das Modul <systemitem>mod_cgi</systemitem> aktiviert sein. Außerdem ist <systemitem>mod_alias</systemitem> erforderlich. Beide Module sind standardmäßig aktiviert. Informationen zur Aktivierung von Modulen finden Sie unter <xref linkend="sec-apache2-modules-activating"/>.
  </para>

  <warning>
   <title>CGI-Sicherheit</title>
   <para>
    Die Zulassung der CGI-Skriptausführung auf dem Server ist ein Sicherheitsrisiko. Weitere Informationen finden Sie in <xref linkend="sec-apache2-security"/>.
   </para>
  </warning>

  <sect2 xml:id="sec-apache2-cgi-configuration">
   <title>Konfiguration in Apache</title>
   <para>
    In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ist die Ausführung von CGI-Skripts nur im Verzeichnis <filename>/srv/www/cgi-bin/</filename> erlaubt. Dieses Verzeichnis ist bereits für die Ausführung von CGI-Skripten konfiguriert. Wenn Sie eine virtuelle Hostkonfiguration erstellt haben (siehe <xref linkend="sec-apache2-configuration-manually-vhost"/>) und Ihre CGI-Skripten in einem Host-spezifischen Verzeichnis ablegen möchten, müssen Sie das betreffende Verzeichnis entsperren und für CGI-Skripten konfigurieren.
   </para>
   <example xml:id="ex-apache2-cgi-configuration">
    <title>CGI-Konfiguration für virtuelle Hosts</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co xml:id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co xml:id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co xml:id="co-apache2-cgi-handler"/>
 Require all granted<co xml:id="co-apache2-cgi-order"/>
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       Fordert Apache auf, alle Dateien in diesem Verzeichnis als CGI-Skripten zu behandeln
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       Aktiviert die Ausführung von CGI-Skripten
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       Fordert den Server auf, Dateien mit den Erweiterungen .pl und .cgi als CGI-Skripten zu behandeln. passen Sie diese Anweisung entsprechend Ihren Anforderungen an
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       Die <systemitem>Require</systemitem>-(Anfordern-)Direktive bestimmt den standardmäßigen Zugriffsstatus. In diesem Fall wird der uneingeschränkte Zugriff auf das angegebenene Verzeichnis erteilt. Weitere Informationen zur Authentifizierung und Autorisierung finden Sie in <link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>.
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-example-script">
   <title>Ausführen eines Beispielskripts</title>
   <para>
    Die CGI-Programmierung unterscheidet sich von der herkömmlichen Programmierung insoweit, als CGI-Programmen und -Skripten ein MIME-Typ-Header wie <literal>Content-type:  text/html</literal> vorangestellt werden muss.  Dieser Header wird an den Client gesendet, damit er weiß, welchen Inhaltstyp er empfängt. Darüber hinaus muss die Skriptausgabe vom Client, in der Regel einem Webbrowser, verstanden werden – dies ist in der Regel HTML, aber auch Klartext, Bilder oder Ähnliches.
   </para>
   <para>
    Unter <filename>/usr/share/doc/packages/apache2/test-cgi</filename> stellt Apache ein einfaches Testskript bereit. Dieses Skript gibt den Inhalt einiger Umgebungsvariablen als Klartext aus. Wenn Sie dieses Skript ausprobieren möchten, kopieren Sie es in das Verzeichnis <filename>/srv/www/cgi-bin/ </filename> bzw. in das Skriptverzeichnis Ihres virtuellen Hosts (<filename>/srv/www/www.example.com/cgi-bin/</filename>), und benennen Sie es in <filename>test.cgi</filename> um. Bearbeiten Sie die Datei so, dass sie <literal>#!/bin/sh</literal> als erste Zeile enthält.
   </para>
   <para>
    Dateien, auf die der Webserver zugreifen kann, sollten im Besitz des <systemitem class="username">root</systemitem>-Benutzers sein. Weitere Informationen hierzu finden Sie im Abschnitt <xref linkend="sec-apache2-security"/>. Da der Webserver unter einem anderen Benutzer ausgeführt wird, müssen CGI-Skripten von jedermann ausgeführt und gelesen werden können. Wechseln Sie daher in das CGI-Verzeichnis und führen Sie den Befehl <command>chmod 755 test.cgi</command> aus, um die entsprechenden Berechtigungen einzurichten.
   </para>
   <para>
    Rufen Sie danach <literal>http://localhost/cgi-bin/test.cgi</literal> oder <literal>http://example.com/cgi-bin/test.cgi</literal> auf. Nun sollte der <quote>CGI/1.0-Testskriptbericht</quote> angezeigt werden.
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-troubleshooting">
   <title>CGI-Fehlerbehebung</title>
   <para>
    Wenn Sie nach der Ausführung des CGI-Testskripten statt des Testskriptberichts eine Fehlermeldung erhalten, überprüfen Sie Folgendes:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGI-Fehlerbehebung</title>
    <listitem>
     <para>
      <emphasis>Haben Sie den Server nach der Konfigurationsänderung neu geladen?</emphasis> Falls nicht, laden Sie ihn mit <command>systemctl reload apache2.service</command> neu.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Falls Sie ein benutzerdefiniertes CGI-Verzeichnis eingerichtet haben, ist dieses richtig konfiguriert?</emphasis> Falls Sie sich nicht sicher sind, führen Sie das Skript im CGI-Standardverzeichnis <filename>/srv/www/cgi-bin/</filename> aus. Rufen Sie das Skript dazu mit <literal>http://localhost/cgi-bin/test.cgi</literal> auf.
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>Wurden die richtigen Berechtigungen zugewiesen?</emphasis>Wechseln Sie in das CGI-Verzeichnis und führen Sie <command>ls -l test.cgi</command> aus. Die Befehlsausgabe sollte mit folgender Zeile beginnen:
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      Überprüfen Sie das Skript auf Programmierfehler. Wenn Sie die Datei <filename>test.cgi</filename> nicht bearbeitet haben, dürfte sie keine Programmierfehler enthalten. Falls Sie aber eigene Programme verwenden, sollten Sie diese immer auf Programmierfehler untersuchen.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-ssl">
  <title>Einrichten eines sicheren Webservers mit SSL</title>

  <para>
   Wenn sensible Daten wie Kreditkarteninformationen zwischen Webserver und Client übertragen werden, ist eine sichere, verschlüsselte Verbindung mit Authentifizierung wünschenswert. <systemitem>mod_ssl</systemitem> bietet mittels der Protokolle Secure Sockets Layer (SSL) und Transport Layer Security (TLS) eine sichere Verschlüsselung für die HTTP-Kommunikation zwischen einem Client und dem Webserver. Wenn Sie TLS/SSL verwenden, wird zwischen dem Webserver und dem Client eine private Verbindung eingerichtet. Die Datenintegrität bleibt dadurch gewährleistet und Client und Server können sich gegenseitig authentifizieren.
  </para>

  <para>
   Zu diesem Zweck sendet der Server vor der Beantwortung von Anforderungen an eine URL ein SSL-Zertifikat mit Informationen, die die Identität des Servers nachweisen. Dies garantiert, dass der Server eindeutig der richtige Endpunkt der Kommunikation ist. Außerdem wird durch das Zertifikat eine verschlüsselte Verbindung zwischen dem Client und dem Server hergestellt, die sicherstellt, dass Informationen ohne das Risiko der Freigabe sensitiver Klartextinhalte übertragen werden.
  </para>

  <para>
   <systemitem>mod_ssl</systemitem> implementiert die TLS/SSL-Protokolle nicht selbst, sondern fungiert als Schnittstelle zwischen Apache und einer SSL-Bibliothek. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> wird die OpenSSL-Bibliothek verwendet. OpenSSL wird bei der Installation von Apache automatisch installiert.
  </para>

  <para>
   Die Verwendung von <systemitem>mod_ssl</systemitem> in Apache erkennen Sie in URLs am Präfix <literal>https://</literal> (statt <literal>http://</literal>).
  </para>

  <sect2 xml:id="sec-apache2-ssl-certificate">
   <title>Erstellen eines SSL-Zertifikats</title>
   <para>
    Wenn Sie TLS/SSL mit dem Webserver einsetzen möchten, müssen Sie ein SSL-Zertifikat erstellen. Dieses Zertifikat ist für die Autorisierung zwischen Webserver und Client erforderlich, damit beide Endpunkte jeweils die Identität des anderen Endpunkts überprüfen können. Zum Nachweis der Zertifikatintegrität muss das Zertifikat von einer Organisation signiert sein, der jeder der beteiligten Benutzer vertraut.
   </para>
   <para>
    Sie können drei Zertifikatsarten erstellen: ein <quote>Dummy</quote>-Zertifikat, das nur zu Testzwecken verwendet wird, ein selbst signiertes Zertifikat für einen bestimmten Benutzerkreis, der Ihnen vertraut, und ein Zertifikat, das von einer unabhängigen, öffentlich bekannten Zertifizierungsstelle (CA) signiert wurde.
   </para>
   <para>
    Die Zertifikaterstellung besteht aus zwei Schritten: Zunächst wird ein privater Schlüssel für die Zertifizierungsstelle generiert und danach wird das Serverzertifikat mit diesem Schlüssel signiert.
   </para>
   <tip>
    <title>Weitere Informationen</title>
    <para>
     Weitere Informationen über das Konzept von TLS/SSL und diesbezügliche Festlegungen finden Sie unter <link xlink:href="http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html</link>.
    </para>
   </tip>
   <sect3 xml:id="sec-apache2-ssl-certificate-dummy">
    <title>Erstellen eines <quote>Dummy</quote>-Zertifikats</title>
    <para>
     Zum Erstellen eines Dummy-Zertifikats rufen Sie das Skript <command>/usr/bin/gensslcert</command> auf. Es erstellt oder überschreibt die unten aufgelisteten Dateien. Verwenden Sie die optionalen Schalter von <command>gensslcert</command>, um die Feineinstellungen für das Zertifikat vorzunehmen. Rufen Sie <command>/usr/bin/gensslcert </command>
     <option>-h</option> auf, um weitere Informationen zu erhalten.
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Außerdem wird eine Kopie der Datei <filename>ca.crt</filename> im Verzeichnis <filename>/srv/www/htdocs/CA.crt</filename> zum Herunterladen bereitgestellt.
    </para>
    <important>
     <title>Nur zu Testzwecken</title>
     <para>
      Verwenden Sie Dummy-Zertifikate niemals in Produktionsumgebungen, sondern nur zum Testen.
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-custom">
    <title>Erstellen eines eigensignierten Zertifikats</title>
    <para>
     Wenn Sie einen sicheren Webserver für Ihr Intranet oder einen bestimmten Benutzerkreis einrichten, reicht unter Umständen ein von Ihrer eigenen Zertifizierungsstelle (CA) signiertes Zertifikat aus. Die Besucher einer solchen Website erhalten eine Warnung wie <quote>Diese Website ist nicht vertrauenswürdig</quote>, da die Webbrowser keine eigensignierten Zertifikate erkennen.
    </para>
    <important>
     <title>Selbstsignierte Zertifikate</title>
     <para>
      Verwenden Sie selbst signierte Zertifikate nur auf einem Webserver, auf den Benutzer zugreifen, denen Sie bekannt sind und die Ihnen als Zertifizierungsstelle vertrauen. Für einen öffentlichen Online-Versand wäre ein solches Zertifikat z. B. nicht geeignet.
     </para>
    </important>
    <para>
     Zunächst generieren Sie einen Antrag auf Ausstellung eines Zertifikats (CSR). Hierzu verwenden Sie <command>openssl</command> mit dem Zertifikatsformat <literal>PEM</literal>. In diesem Schritt werden Sie aufgefordert, einen Passwortsatz anzugeben und mehrere Fragen zu beantworten. Merken Sie sich diesen Passwortsatz; Sie werden ihn später benötigen.
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> openssl req -new &gt; new.cert.csr
Generating a 1024 bit RSA private key
..++++++
.........++++++
writing new private key to 'privkey.pem'
Enter PEM pass phrase:<co xml:id="co-ssl-self-pass1"/>
Verifying - Enter PEM pass phrase:<co xml:id="co-ssl-self-pass2"/>
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:<co xml:id="co-ssl-self-country"/>
State or Province Name (full name) [Some-State]:<co xml:id="co-ssl-self-state"/>
Locality Name (eg, city) []:<co xml:id="co-ssl-self-city"/>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:<co xml:id="co-ssl-self-org"/>
Organizational Unit Name (eg, section) []:<co xml:id="co-ssl-self-uname"/>
Common Name (for example server FQDN, or YOUR name) []:<co xml:id="co-ssl-self-cname"/>
Email Address []:<co xml:id="co-ssl-self-email"/>

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:<co xml:id="co-ssl-self-challenge"/>
An optional company name []:<co xml:id="co-ssl-self-optional"/></screen>
    <calloutlist>
     <callout arearefs="co-ssl-self-pass1">
      <para>
       Geben Sie Ihren Passwortsatz ein.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-pass2">
      <para>
       Wiederholen Sie die Eingabe (und merken Sie sie sich).
      </para>
     </callout>
     <callout arearefs="co-ssl-self-country">
      <para>
       Geben Sie Ihren zwei Buchstaben umfassenden Ländercode ein, z. B. <literal>GB</literal> oder <literal>CZ</literal>.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-state">
      <para>
       Geben Sie den Namen des Bundeslands oder Kantons ein, in dem Sie leben.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-city">
      <para>
       Geben Sie den Namen des Ortes ein, z. B. <literal>Prag</literal>.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-org">
      <para>
       Geben Sie den Namen der Organisation ein, für die Sie arbeiten.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-uname">
      <para>
       Geben Sie Ihre Organisationseinheit ein oder lassen Sie dieses Feld leer, wenn Sie keine Organisationseinheit besitzen.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-cname">
      <para>
       Geben Sie den Domänennamen des Servers bzw. Ihren Vor- und Nachnamen ein.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-email">
      <para>
       Geben Sie Ihre geschäftliche Email-Adresse ein.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-challenge">
      <para>
       Lassen Sie das Challenge-Passwort leer; ansonsten müssen Sie es bei jedem Neustart des Apache-Webservers eingeben.
      </para>
     </callout>
     <callout arearefs="co-ssl-self-optional">
      <para>
       Geben Sie optional den Namen des Unternehmens ein oder lassen Sie dieses Feld leer.
      </para>
     </callout>
    </calloutlist>
    <para>
     Nun können Sie das Zertifikat generieren. Verwenden Sie <command>openssl</command> erneut und nutzen Sie wieder das standardmäßige <literal>PEM</literal>-Format für das Zertifikat.
    </para>
    <procedure>
     <title>Generieren des Zertifikats</title>
     <step>
      <para>
       Exportieren Sie den privaten Teil des Schlüssels in <filename>new.cert.key</filename>. Sie werden aufgefordert, den Passwortsatz einzugeben, den Sie beim Erstellen des Zertifizierungsantrags (CSR) festgelegt haben.
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> openssl rsa -in privkey.pem -out new.cert.key</screen>
     </step>
     <step>
      <para>
       Generieren Sie den öffentlichen Teil des Zertifikats gemäß den Daten, die Sie im Ausstellungsantrag angegeben haben. Mit der Option <option>-days</option> geben Sie den Zeitraum (in Tagen) an, nach dem das Zertifikat abläuft. Sie können ein Zertifikat widerrufen oder vor Ablauf ersetzen.
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> openssl x509 -in new.cert.csr -out new.cert.cert -req \
-signkey new.cert.key -days 365</screen>
     </step>
     <step>
      <para>
       Kopieren Sie die Zertifikatsdateien in die entsprechenden Verzeichnisse, so dass sie vom Apache-Server gelesen werden können. Achten Sie darauf, dass der private Schlüssel <filename>/etc/apache2/ssl.key/server.key</filename> nicht allgemein lesbar ist, das öffentliche PEM-Zertifikat <filename>/etc/apache2/ssl.crt/server.crt</filename> dagegen schon.
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp new.cert.cert /etc/apache2/ssl.crt/server.crt
<prompt>&gt; </prompt><command>sudo</command> cp new.cert.key /etc/apache2/ssl.key/server.key</screen>
     </step>
    </procedure>
    <tip>
     <title>Speicherort des öffentlichen Zertifikats</title>
     <para>
      Der letzte Schritt besteht darin, die öffentliche Zertifikatdatei aus dem Verzeichnis <filename>/etc/apache2/ssl.crt/server.crt</filename> in ein Verzeichnis zu kopieren, in dem die Benutzer auf die Datei zugreifen können. Aus diesem Verzeichnis können die Benutzer sie in ihren Webbrowsern der Liste der bekannten und vertrauenswürdigen Zertifizierungsstellen hinzufügen. Wäre die Zertifizierungsstelle nicht in dieser Liste enthalten, würde der Browser melden, dass das Zertifikat von einer unbekannten Zertifizierungsstelle ausgegeben wurde. 
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-official">
    <title>Anfordern eines offiziell signierten Zertifikats</title>
    <para>
     Es gibt mehrere offizielle Zertifizierungsstellen, die Ihre Zertifikate signieren. Zertifizierungsstellen sind vertrauenswürdige unabhängige Parteien. Einem Zertifikat, das durch eine solche Zertifizierungsstelle signiert wurde, kann daher voll und ganz vertraut werden. Sichere Webserver, deren Inhalte für die Öffentlichkeit bereitstehen, verfügen in der Regel über ein offiziell signiertes Zertifikat. Eine Liste der am häufigsten genutzten Zertifizierungsstellen finden Sie unter <link xlink:href="https://en.wikipedia.org/wiki/Certificate_authority#Providers"/>.
    </para>
    <para>
     Wenn Sie ein offiziell signiertes Zertifikat anfordern, senden Sie kein Zertifikat an die Zertifizierungsstelle, sondern eine CSR (Certificate Signing Request, Zertifikatsignierungsanforderung). Geben Sie zum Erstellen einer CSR den folgenden Befehl ein:
    </para>
<screen><prompt>&gt; </prompt>openssl req -new -newkey rsa:2048 -nodes -keyout newkey.pem -out newreq.pem</screen>
    <para>

     Sie werden aufgefordert, einen Distinguished Name (DN) einzugeben. Dazu müssen Sie einige Fragen, z. B. nach dem Land oder der Organisation, beantworten. Geben Sie an dieser Stelle nur gültige Daten ein. Schließlich wird alles, was Sie hier eingeben, überprüft und später im Zertifikat angezeigt. Sie müssen nicht alle Fragen beantworten. Wenn eine Frage nicht auf Sie zutrifft oder Sie eine Antwort offen lassen möchten, geben Sie <quote>&#x002E;</quote> ein. Unter Common Name (allgemeiner Name) müssen Sie den Namen der Zertifizierungsstelle eingeben. Geben Sie hier einen aussagekräftigen Namen ein, beispielsweise <replaceable>Zertifizierungsstelle von </replaceable>My company. Zum Schluss müssen Sie noch ein Challenge Passwort (zur Vernichtung des Zertifikats, falls der Schlüssel kompromittiert wird) und einen alternativen Unternehmensnamen eingeben.
    </para>
    <para>
     Die CSR wird in dem Verzeichnis erstellt, aus dem Sie das Skript aufgerufen haben. Der Name der CSR-Datei lautet <filename>newreq.pem</filename>.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-ssl-configuration">
   <title>Konfigurieren von Apache mit SSL</title>
   <para>
    Der Standard-Port für TLS/SSL-Anfragen auf der Seite des Webservers lautet 443. Es gibt keine Überschneidung zwischen einem <quote>regulären</quote> Apache mit Überwachung des Ports 80 und einem TLS/SSL-fähigen Apache mit Überwachung des Ports 443. HTTP und HTTPS können sogar mit derselben Apache-Instanz ausgeführt werden. In der Regel verteilen separate virtuelle Hosts die Anforderungen für Port 80 und Port 443 an separate virtuelle Server.
   </para>
   <important>
    <title>Firewall-Konfiguration</title>
    <para>
     Denken Sie daran, die Firewall für SSL-fähiges Apache an Port 443 zu öffnen. Verwenden Sie hierzu <systemitem class="daemon">firewalld</systemitem>, wie im <xref linkend="sec-security-firewall-firewalld-cmd"/> beschrieben.
    </para>
   </important>
   <para>
    Der SSL-Modus wird standardmäßig in der globalen Serverkonfiguration aktiviert. Falls er auf Ihrem Host deaktiviert wurde, aktivieren Sie ihn mithilfe des folgenden Kommandos: <command>a2enmod ssl</command>. Um SSL schließlich aktivieren zu können, muss der Server mit dem Flag <quote>SSL</quote> gestartet werden. Rufen Sie dazu <command>a2enflag SSL</command> auf (Groß- und Kleinschreibung beachten!). Wenn Sie sich zuvor entschieden haben, Ihr Serverzertifikat durch ein Passwort zu verschlüsseln, sollten Sie auch den Wert von <systemitem>APACHE_TIMEOUT</systemitem> in <filename>/etc/sysconfig/apache2</filename> heraufsetzen, damit Ihnen beim Start von Apache genügend Zeit für die Eingabe des Passworts bleibt. Starten Sie den Server anschließend neu, damit die Änderungen wirksam werden. Ein Neuladen des Servers reicht dazu nicht aus.
   </para>
   <para>
    Das Verzeichnis der virtuellen Hostkonfiguration enthält die Vorlage <filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename>. Diese enthält SSL-spezifische Direktiven, die bereits an anderer Stelle hinreichend dokumentiert sind. Informationen über die Basiskonfiguration eines virtuellen Hosts finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost"/>.
   </para>
   <para>
    Kopieren Sie zum Starten die Vorlage zu <filename>/etc/apache2/vhosts.d/<replaceable>MYSSL-HOST</replaceable>.conf</filename> und bearbeiten Sie diese. Es sollte ausreichen, die Werte für die folgenden Anweisungen anzupassen:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-ssl-configuration-name-based">
    <title>Namensbasierte virtuelle Hosts und SSL</title>
    <para>
     Auf einem Server mit nur einer IP-Adresse können standardmäßig nicht mehrere SSL-aktivierte virtuelle Hosts laufen. Für ein namensbasiertes virtuelles Hosting muss Apache wissen, welcher Servername angefordert wurde. Das Problem ist dabei, dass SSL-Verbindungen erst gelesen werden können, nachdem die Verbindung (unter Verwendung des standardmäßigen virtuellen Hosts) bereits hergestellt wurde. Demzufolge erhalten Benutzer eine Warnmeldung, die besagt, dass das Zertifikat nicht mit dem Servernamen übereinstimmt.
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> bietet eine Erweiterung des SSL-Protokolls namens Server Name Indication (SNI), die dieses Problem behebt, indem der Name der virtuellen Domäne als Teil der SSL-Verhandlung gesendet wird. Dies ermöglicht dem Server ein frühes <quote>Umschalten</quote> zur korrekten virtuellen Domäne, wodurch der Browser das richtige Zertifikat erhält.
    </para>
    <para>
     SNI ist in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> standardmäßig aktiviert. Für die Aktivierung von namensbasierten virtuellen Hosts für SSL müssen Sie den Server wie in <xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/> beschrieben konfigurieren. (Beachten Sie, dass für SSL Port <literal>443</literal> anstelle von Port <literal>80</literal> benötigt wird.)
    </para>
    <important>
     <title>SNI-Browserunterstützung</title>
     <para>
      SNI muss auf der Client-Seite unterstützt werden. SNI wird allerdings von den meisten Browsern unterstützt, ausgenommen von bestimmten älteren Browsern. Weitere Informationen finden Sie im <link xlink:href="https://en.wikipedia.org/wiki/Server_Name_Indication#Support"/>.
     </para>
     <para>
      Mit der Direktive <systemitem>SSLStrictSNIVHostCheck</systemitem> konfigurieren Sie die Handhabung von Browsern ohne SNI-Fähigkeit. Wenn SNI in der Serverkonfiguration auf <literal>on</literal> gesetzt ist, werden Browser ohne SNI-Fähigkeit für alle virtuellen Hosts abgelehnt. Wenn für SNI <literal>on</literal> in einer <systemitem>VirtualHost</systemitem>-Direktive festgelegt ist, wird der Zugriff auf den konkreten virtuellen Host abgelehnt.
     </para>
     <para>
      Wenn in der Serverkonfiguration <literal>off</literal> festgelegt ist, verhält sich der Server wie ohne SNI-Unterstützung. SSL-Anforderungen werden durch den <emphasis>ersten</emphasis> (für Port 443) definierten virtuellen Host bearbeitet.
     </para>
    </important>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-multiple-instances">
  <title>Ausführen mehrerer Apache-Instanzen auf demselben Server</title>

  <para>
   Das Ausführen mehrerer Apache-Instanzen auf demselben Server bietet mehrere Vorteile gegenüber dem Ausführen mehrerer virtueller Hosts (siehe <xref linkend="sec-apache2-configuration-manually-vhost"/>):
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Wenn ein virtueller Host zeitweise deaktiviert werden muss, müssen Sie die Webserver-Konfiguration ändern und den Webserver neu starten, damit die Änderung in Kraft tritt.
    </para>
   </listitem>
   <listitem>
    <para>
     Wenn Probleme bei einem einzigen virtuellen Host auftreten, müssen alle virtuellen Hosts neu gestartet werden.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Sie können die standardmäßige Apache-Instanz wie gewohnt ausführen:
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2.service</screen>

  <para>
   Hiermit wird die standardmäßige Datei <filename>/etc/sysconfig/apache2</filename> gelesen. Falls die Variable <systemitem>APACHE_HTTPD_CONF</systemitem> in der Datei nicht festgelegt wurde oder die Datei ganz fehlt, wird stattdessen die Datei <filename>/etc/apache2/httpd.conf</filename> gelesen.
  </para>

  <para>
   Zum Aktivieren einer anderen Apache-Instanz führen Sie Folgendes aus:
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2@<replaceable>INSTANCE_NAME</replaceable></screen>

  <para>
   Beispiel:
  </para>

<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2@example_web.org</screen>

  <para>
   Standardmäßig verwendet die Instanz <filename>/etc/apache2@example_web.org/httpd.conf</filename> als Hauptkonfigurationsdatei. Diese kann durch Festlegen von <systemitem>APACHE_HTTPD_CONF</systemitem> in <filename>/etc/sysconfig/apache2@example_web.org</filename> überschrieben werden.
  </para>

  <para>
   Das nachfolgende Beispiel zeigt, wie Sie eine weitere Instanz von Apache einrichten. Alle Befehle müssen dabei als <systemitem class="username">root</systemitem> ausgeführt werden.
  </para>

  <procedure>
   <title>Konfigurieren einer weiteren Apache-Instanz</title>
   <step>
    <para>
     Erstellen Sie eine neue Konfiguration auf der Grundlage von <filename>/etc/sysconfig/apache2</filename>, beispielsweise <filename>/etc/sysconfig/apache2@example_web.org</filename>:
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp /etc/sysconfig/apache2 /etc/sysconfig/apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     Bearbeiten Sie die Datei <filename>/etc/sysconfig/apache2@example_web.org</filename> und ändern Sie die Zeile mit
    </para>
<screen>APACHE_HTTPD_CONF</screen>
    <para>
     zu
    </para>
<screen>APACHE_HTTPD_CONF="/etc/apache2/httpd@example_web.org.conf"</screen>
   </step>
   <step>
    <para>
     Erstellen Sie die Datei <filename>/etc/apache2/httpd@example_web.org.conf</filename> auf der Grundlage von <filename>/etc/apache2/httpd.conf</filename>.
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp /etc/apache2/httpd.conf /etc/apache2/httpd@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     Bearbeiten Sie die Datei <filename>/etc/apache2/httpd@example_web.org.conf</filename> und ändern Sie
    </para>
<screen>Include /etc/apache2/listen.conf</screen>
    <para>
     zu
    </para>
<screen>Include /etc/apache2/listen@example_web.org.conf</screen>
    <para>
     Prüfen Sie alle Direktiven und passen Sie sie an Ihre Anforderungen an. Ändern Sie bei Bedarf
    </para>
<screen>Include /etc/apache2/global.conf</screen>
    <para>
     und erstellen Sie für jede Instanz eine neue Datei <filename>global@example_web.org.conf</filename>. Es wird empfohlen,
    </para>
<screen>ErrorLog /var/log/apache2/error_log</screen>
    <para>
     zu
    </para>
<screen>ErrorLog /var/log/apache2/error@example_web.org_log</screen>
    <para>
     zu ändern, sodass separate Protokolle für die einzelnen Instanzen geführt werden.
    </para>
   </step>
   <step>
    <para>
     Erstellen Sie die Datei <filename>/etc/apache2/listen@example_web.org.conf</filename> auf der Grundlage von <filename>/etc/apache2/listen.conf</filename>.
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> cp /etc/apache2/listen.conf /etc/apache2/listen@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     Bearbeiten Sie die Datei <filename>/etc/apache2/listen@example_web.org.conf</filename> und ändern Sie
    </para>
<screen>Listen 80</screen>
    <para>
     in die Portnummer, an der die neue Instanz ausgeführt werden soll, beispielsweise 82:
    </para>
<screen>Listen 82</screen>
    <para>
     Wenn die neue Apache-Instanz über ein sicheres Protokoll ausgeführt werden soll (siehe <xref linkend="sec-apache2-ssl"/>), ändern Sie außerdem die Zeile
    </para>
<screen>Listen 443</screen>
    <para>
     beispielsweise in
    </para>
<screen>Listen 445</screen>
   </step>
   <step>
    <para>
     Starten Sie die neue Apache-Instanz:
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     Prüfen Sie, ob der Server ausgeführt wird. Geben Sie hierzu <literal>http://Servername:82</literal> in den Webbrowser ein. Falls Sie den Namen der Fehlerprotokolldatei für die neue Instanz geändert hatten, können Sie ihn prüfen:
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> tail -f /var/log/apache2/error@example_web.org_log</screen>
   </step>
  </procedure>

  <para>
   Beim Einrichten mehrerer Apache-Instanzen auf demselben Server sind mehrere Punkte zu beachten:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Die Datei <filename>/etc/sysconfig/apache2@<replaceable>INSTANZNAME</replaceable></filename> kann dieselben Variablen wie <filename>/etc/sysconfig/apache2</filename> enthalten, also auch Einstellungen für das Laden von Modulen und MPM-Einstellungen.
    </para>
   </listitem>
   <listitem>
    <para>
     Die standardmäßige Apache-Instanz muss nicht ausgeführt werden, wenn andere Instanzen laufen.
    </para>
   </listitem>
   <listitem>
    <para>
     Die Apache-Helper-Dienstprogramme <command>a2enmod</command>, <command>a2dismod</command> und <command>apachectl</command> werden für die standardmäßige Apache-Instanz ausgeführt, sofern in der Umgebungsvariable <systemitem>HTTPD_INSTANCE</systemitem> nicht anderweitig festgelegt. Im folgenden Beispiel
    </para>
<screen><prompt>&gt; </prompt><command>sudo</command> export HTTPD_INSTANCE=example_web.org
<prompt>&gt; </prompt><command>sudo</command> a2enmod access_compat
<prompt>&gt; </prompt><command>sudo</command> a2enmod status
<prompt>&gt; </prompt><command>sudo</command> apachectl start</screen>
    <para>
     werden die Module <systemitem>access_compat</systemitem> und <systemitem>status</systemitem> in die Variable <systemitem>APACHE_MODULES</systemitem> in der Datei <filename>/etc/sysconfig/apache2@example_web.org</filename> eingefügt; anschließend wird die Instanz <literal>example_web.org</literal> gestartet.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-apache2-security">
  <title>Vermeiden von Sicherheitsproblemen</title>

  <para>
   Ein dem öffentlichen Internet ausgesetzter Webserver erfordert ständige Wartungs- und Verwaltungsarbeiten. Sicherheitsprobleme, verursacht durch die Software wie auch durch versehentliche Fehlkonfigurationen, sind kaum zu vermeiden. Im Folgenden einige Tipps zur Verbesserung der Sicherheit.
  </para>

  <sect2 xml:id="sec-apache2-security-up-to-date">
   <title>Stets aktuelle Software</title>
   <para>
    Bei Bekanntwerden von Sicherheitsrisiken in der Apache-Software veröffentlicht SUSE sofort einen entsprechenden Sicherheitshinweis. Dieser enthält Anleitungen zur Behebung der Risiken, die, sobald es möglich ist, ausgeführt werden sollten. Die Sicherheitsankündigungen von SUSE stehen unter folgenden Adressen zur Verfügung:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>Web-Seite</title>
      <para>
       <link xlink:href="https://www.suse.com/support/security/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Mailinglisten-Archiv</title>
      <para>
       <link xlink:href="https://lists.opensuse.org/archives/list/security-announce@lists.opensuse.org/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Liste der Informationen zur Sicherheit</title>
      <para>
       <link xlink:href="https://www.suse.com/support/update/"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-security-permissions">
   <title>DocumentRoot-Berechtigungen</title>
   <para>
    In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sind das <systemitem>DocumentRoot</systemitem>-Verzeichnis <filename>/srv/www/htdocs</filename> und das CGI-Verzeichnis <filename>/srv/www/cgi-bin</filename> standardmäßig dem Benutzer bzw. der Gruppe <systemitem>root</systemitem> zugeordnet. Diese Berechtigungen sollten nicht geändert werden. Wenn diese Verzeichnisse für alle Benutzer modifizierbar sind, kann jeder Benutzer Dateien darin ablegen. Diese Dateien würden dann von Apache mit <systemitem>wwwrun</systemitem>-Berechtigungen ausgeführt werden, was wiederum dem Benutzer unbeabsichtigt Zugriff auf die Ressourcen des Dateisystems gewähren würde. Das <systemitem>DocumentRoot</systemitem>-Verzeichnis und die CGI-Verzeichnisse Ihrer virtuellen Hosts sollten Sie als Unterverzeichnisse im Verzeichnis <filename>/srv/www</filename> anlegen. Stellen Sie auch bei diesen Verzeichnissen sicher, dass die Verzeichnisse und die darin enthaltenen Dateien dem Benutzer bzw. der Gruppe <systemitem class="username">root</systemitem> zugeordnet sind.
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-filesystem">
   <title>Zugriff auf das Dateisystem</title>
   <para>
    Standardmäßig wird in <filename>/etc/apache2/httpd.conf</filename> der Zugriff auf das gesamte Dateisystem verweigert. Diese Direktiven sollten Sie nicht überschreiben. Aktivieren Sie stattdessen explizit den Zugriff auf die Verzeichnisse, die Apache lesen muss. Weitere Informationen finden Sie unter <xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>. Achten Sie dabei darauf, dass keine unbefugten Personen auf kritische Dateien wie Passwort- oder Systemkonfigurationsdateien zugreifen können.
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-cgi">
   <title>CGI-Skripten</title>
   <para>
    Interaktive Skripts in PHP, SSI oder anderen Programmiersprachen können im Prinzip jeden beliebigen Befehl ausführen und stellen damit generell ein Sicherheitsrisiko dar. Skripts, die vom Server ausgeführt werden, sollten nur aus Quellen stammen, denen der Serveradministrator vertraut. Keine gute Idee ist es, den Benutzern die Ausführung ihrer eigenen Skripts zu erlauben. Zusätzlich empfiehlt es sich, die Sicherheit aller Skripten zu überprüfen.
   </para>
   <para>
    Es ist durchaus üblich, sich die Skriptverwaltung durch eine Einschränkung der Skriptausführung zu vereinfachen. Dabei wird die Ausführung von CGI-Skripten auf bestimmte Verzeichnisse eingeschränkt, statt sie global zuzulassen. Die Direktiven <systemitem>ScriptAlias</systemitem> und <systemitem>Option
    ExecCGI</systemitem> werden zur Konfiguration verwendet. In der Standardkonfiguration von <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> ist es generell nicht gestattet, CGI-Skripts von jedem beliebigen Ort aus auszuführen.
   </para>
   <para>
    Alle CGI-Skripten werden unter dem gleichen Benutzer ausgeführt. Es kann daher zu Konflikten zwischen verschiedenen Skripten kommen. Abhilfe schafft hier das Modul suEXEC, das die Ausführung von CGI-Skripten unter einem anderen Benutzer oder einer anderen Gruppe ermöglicht.
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-users">
   <title>Benutzerverzeichnisse</title>
   <para>
    Bei der Aktivierung von Benutzerverzeichnissen (mit <systemitem>mod_userdir</systemitem> oder <systemitem>mod_rewrite</systemitem>) sollten Sie unbedingt darauf achten, keine <filename>.htaccess</filename>-Dateien zuzulassen. Durch diese Dateien wäre es den Benutzern möglich, die Sicherheitseinstellungen zu überschreiben. Zumindest sollten Sie die Möglichkeiten des Benutzers durch die Direktive <systemitem>AllowOverRide</systemitem> einschränken. In <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> sind <filename>.htaccess</filename>-Dateien standardmäßig aktiviert. Benutzern ist es allerdings nicht erlaubt, <systemitem>Option</systemitem>-Direktiven mit <systemitem>mod_userdir</systemitem> zu überschreiben (siehe hierzu die Konfigurationsdatei <filename>/etc/apache2/mod_userdir.conf</filename>).
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-troubleeshooting">
  <title>Fehlersuche</title>

  <para>
   Wenn sich Apache nicht starten lässt, eine Webseite nicht angezeigt werden kann oder Benutzer keine Verbindung zum Webserver herstellen können, müssen Sie die Ursache des Problems herausfinden. Im Folgenden werden einige nützliche Ressourcen vorgestellt, die Ihnen bei der Fehlersuche behilflich sein können:
  </para>

  <variablelist>
   <varlistentry>
    <term>Ausgabe des Subkommandos <systemitem class="service">apache2.service</systemitem>:</term>
    <listitem>
     <para>
      Statt den Webserver mit der Binärdatei <filename>/usr/sbin/apache2ctl</filename> zu starten und zu stoppen, verwenden Sie das Kommando <command>systemctl</command> (siehe <xref linkend="sec-apache2-start-stop"/>). <command>systemctl status apache2.service</command> bietet umfassende Informationen über Fehler und stellt außerdem Tipps und Hinweise zur Behebung von Konfigurationsfehlern zur Verfügung.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Protokolldateien und Ausführlichkeitsgrad</term>
    <listitem>
     <para>
      Bei schwerwiegenden und nicht schwerwiegenden Fehlern finden Sie mögliche Ursachen in den Apache-Protokolldateien, insbesondere in der standardmäßig im Verzeichnis <filename>/var/log/apache2/error_log</filename> gespeicherten Fehlerprotokolldatei. Mit der Direktive <systemitem>LogLevel</systemitem> können Sie im Übrigen die Ausführlichkeit der protokollierten Meldungen einstellen. Dies ist z. B. nützlich, wenn Sie mehr Details benötigen. 
     </para>
     <tip>
      <title>Ein einfacher Test</title>
      <para>
       Sie können die Apache-Protokollmeldungen mit dem Befehl <command>tail -F /var/log/apache2/<replaceable>MY_ERROR_LOG</replaceable></command> überwachen. Führen Sie dann <command>systemctl restart apache2.service</command> aus. Versuchen Sie anschließend eine Verbindung mit einem Browser herzustellen und überprüfen Sie dort die Ausgabe.
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Firewall und Ports</term>
    <listitem>
     <para>
      Es wird häufig versäumt, die Ports für Apache in der Firewall-Konfiguration des Servers zu öffnen. YaST bietet bei der Konfiguration von Apache eine eigene Option, die sich dieses speziellen Themas annimmt (siehe <xref linkend="sec-apache2-configuration-yast"/>). Bei der manuellen Konfiguration von Apache können Sie die Ports für HTTP und HTTPS in der Firewall über das Firewall-Modul von YaST öffnen.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Falls sich Ihr Problem nicht mithilfe der vorgenannten Ressourcen beheben lässt, finden Sie weitere Informationen in der Apache-Fehlerdatenbank, die online unter <link xlink:href="http://httpd.apache.org/bug_report.html"/> zur Verfügung steht. Sie können sich auch an die Apache-Benutzer-Community wenden, die Sie über eine Mailingliste unter <link xlink:href="http://httpd.apache.org/userslist.html"/> erreichen. 
  </para>
 </sect1>
 <sect1 xml:id="sec-apache2-more-information">
  <title>Weitere Informationen</title>

  <para>
   Das Paket <systemitem>apache2-doc</systemitem>, das an verschiedenen Orten bereitgestellt wird, enthält das vollständige Apache-Handbuch für die lokale Installation und Referenz. Das Handbuch ist nicht in der Standardinstallation enthalten. Am schnellsten installieren Sie es mit dem Befehl <command>zypper in apache2-doc</command>. Nach der Installation steht das Apache-Handbuch unter <link xlink:href="http://localhost/manual/"/> zur Verfügung. Unter <link xlink:href="http://httpd.apache.org/docs-2.4/"/> können Sie auch im Web darauf zugreifen. SUSE-spezifische Konfigurationstipps finden Sie im Verzeichnis <filename>/usr/share/doc/packages/apache2/README.*</filename>.
  </para>

  <sect2 xml:id="sec-apache2-more-information-apache22">
   <title>Apache 2.4</title>
   <para>
    Eine Liste der neuen Funktionen in Apache 2.4 finden Sie unter <link xlink:href="http://httpd.apache.org/docs/2.4/new_features_2_4.html"/>. Upgrade-Informationen von Version 2.2 auf Version 2.4 erhalten Sie unter <link xlink:href="http://httpd.apache.org/docs-2.4/upgrading.html"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-modules">
   <title> Apache Module </title>
   <para>
    Weitere Informationen zu externen Apache-Modulen, die kurz im Abschnitt <xref linkend="sec-apache2-modules-external"/> beschrieben werden, finden Sie an folgenden Orten:
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="https://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php8</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
      <para>
       Ausführlichere Informationen zur <systemitem>mod_php8</systemitem>-Konfiguration finden Sie in der gut kommentierten Konfigurationsdatei <filename>/etc/php8/apache2/php.ini</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem></term>
     <listitem>
      <para>
       <link xlink:href="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-cgi">
   <title>Entwicklung</title>
   <para>
    Weitere Informationen zur Entwicklung von Apache-Modulen sowie zur Teilnahme am Apache-Webserver-Projekt finden Sie unter folgenden Adressen:
   </para>
   <variablelist>
    <varlistentry>
     <term>Informationen für Apache-Entwickler</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Dokumentation für Apache-Entwickler</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/docs/2.4/developer/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-miscellaneous-sources" os="sles;sled">
   <title>Verschiedene Informationsquellen</title>
   <para>
    Wenn Sie in <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> Probleme mit Apache haben, werfen Sie einen Blick in die technische Informationssuche unter <link xlink:href="https://www.suse.com/support"/>. Die Entstehungsgeschichte von Apache finden Sie unter <link xlink:href="https://httpd.apache.org/ABOUT_APACHE.html"/>. Auf dieser Seite erfahren Sie auch, weshalb dieser Server Apache genannt wird.
   </para>
  </sect2>
 </sect1>
</chapter>
