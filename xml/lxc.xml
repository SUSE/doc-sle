<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- fs 2011-07-18:

Resources:
~~~~~~~~~~
 - https://wiki.archlinux.org/index.php/Linux_Containers
 - http://lxc.teegra.net/
 - http://www.linuxtag.de/2011/de/program/business-und-behoerdenkongress/vortragsdetails-talkid107.html
 - http://en.opensuse.org/LXC
 - http://www.linuxtag.org/2011/fileadmin/www.linuxtag.org/slides/Christoph%20Mitasch%20-%20Lightweight%20virtualization%3A%20LXC%20vs.%20OpenVZ.pdf

 - https://documentation.suse.com/sles/11-SP4/html/SLES-all/cha-tuning-cgroups.html
 - https://www.ibm.com/developerworks/linux/library/l-lxc-containers/
 - http://berrange.com/posts/2011/09/27/getting-started-with-lxc-using-libvirt/
 - http://blog.flameeyes.eu/2010/09/04/linux-containers-and-networking

People
~~~~~~
Cedric Bosdonnat (Developer)
Jim Fehlig (Developer)
Michal Svec (PM)
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-lxc">
<!-- ========================================================= -->
<!-- TODO Completely setting up lxc containers using YaST/virt-manager
     is not yet possible. -->
<!-- ========================================================= -->
 <title>Linux Containers</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>
 <para/>
<!-- ========================================================= -->
<!-- TODO Completely setting up lxc containers using YaST/virt-manager
     is not yet possible. -->
 <sect1 xml:id="sec-lxc-setup-container">
  <title>Setting Up &lxc; Distribution Containers</title>

  <para>
   A container is self-contained software that includes an application's code
   and all its dependencies. A containerized application can be deployed
   quickly and run reliably in a computing environment.
  </para>
   
  <para>
   To set up an &lxc; container, you need to create a root file system
   containing the guest distribution.
  </para>

  <procedure xml:id="pro-lxc-create-rootfs" os="sles;sled">
   <title>Creating a Root File System</title>
   <para>
    There is currently no GUI to create a root file system. Run the
    <command>virt-create-rootfs</command> command as root to set up a new root
    file system. Follow the steps below to create a new &rootuser; file system
    in <replaceable>/path/to/rootfs</replaceable>.
   </para>
   <important>
    <title>Registration Code Needed</title>
    <para>
    <command>virt-create-rootfs</command> requires a registration
    code to set up a &productname; root file system.
    </para>
   </important>
   <step>
    <para>
     Run the <command>virt-create-rootfs</command> command:
    </para>
<screen>&prompt.user;virt-create-rootfs --root <replaceable>/PATH/TO/ROOTFS</replaceable> --distro SLES-12.0 -c <replaceable>REGISTRATION_CODE</replaceable></screen>
   </step>
   <step>
    <para>
     Change the root path to the root file system with the
     <command>chroot</command> command:
    </para>
<screen>&prompt.user;chroot <replaceable>/path/to/rootfs</replaceable></screen>
   </step>
   <step>
    <para>
     Change the password for user &rootuser; with
     <command>passwd</command>.
    </para>
   </step>
   <step>
    <para>
     Create an <systemitem class="username">operator</systemitem> user
     without &rootuser; privileges:
    </para>
<screen>useradd -m operator</screen>
   </step>
   <step>
    <para>
     Change the operator's password:
    </para>
<screen>passwd operator</screen>
   </step>
   <step>
    <para>
     Leave the chroot environment with <command>exit</command>.
    </para>
   </step>
  </procedure>

  <procedure xml:id="pro-lxc-create-rootfs-osuse" os="osuse">
   <title>Creating a Root File System</title>
   <para>
    There is currently no GUI to create a root file system. You will thus need
    to open a terminal and use <command>zypper</command> as user &rootuser; to
    populate the new root file system. In the following steps, the new
    &rootuser; file system will be created in
    <replaceable>/PATH/TO/ROOTFS</replaceable>.
   </para>
   <step>
    <para>
     Add the &productname; repository and the corresponding update repository
     to the new &rootuser; file system:
    </para>
    <screen>&prompt.root;zypper --root <replaceable>/PATH/TO/ROOTFS</replaceable> ar http://download.opensuse.org/distribution/leap/42.3/repo/oss/ OSS
&prompt.root;zypper --root <replaceable>/PATH/TO/ROOTFS</replaceable> ar http://download.opensuse.org/update/leap/42.3/oss/ Update-OSS</screen>
   </step>
   <step>
    <para>
     Refresh the repositories:
    </para>
    <screen>&prompt.root;zypper --root <replaceable>/PATH/TO/ROOTFS</replaceable> ref</screen>
   </step>
   <step>
    <para>
     Install a minimal system:
    </para>
    <screen>&prompt.root;zypper --root <replaceable>/PATH/TO/ROOTFS</replaceable> in -t pattern minimal_base</screen>
   </step>
   <step>
    <para>
     Set the &rootuser; password:
    </para>
    <screen>&prompt.root;echo "ttyS0" >><replaceable>/PATH/TO/ROOTFS</replaceable>/etc/securetty
&prompt.root;echo "root:YOURPASSWD" | chpasswd -R <replaceable>/PATH/TO/ROOTFS</replaceable></screen>
   </step>
  </procedure>

  <procedure xml:id="pro-lxc-define-gui">
   <title>Defining the Container</title>
   <step>
    <para>
     Start &vmm;.
    </para>
   </step>
   <step performance="optional">
    <para>
     If not already present, add a local LXC connection by clicking
     <menuchoice><guimenu>File</guimenu>
     <guimenu>Add Connection</guimenu></menuchoice>.
    </para>
    <para>
     Select <guimenu>LXC (Linux Containers)</guimenu> as the hypervisor and
     click <guimenu>Connect</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Select the <guimenu>localhost (LXC)</guimenu> connection and click
     <guimenu>File</guimenu> <guimenu>New Virtual Machine</guimenu> menu.
    </para>
   </step>
   <step>
    <para>
     Activate <guimenu>Operating system container</guimenu> and
     click <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Type the path to the root file system from <xref os="sles;sled"
     linkend="pro-lxc-create-rootfs"/><xref os="osuse"
     linkend="pro-lxc-create-rootfs-osuse"/> and click the
     <guimenu>Forward</guimenu> button.
    </para>
   </step>
   <step>
    <para>
     Choose the maximum amount of memory and CPUs to allocate to the
     container. Then click the <guimenu>Forward</guimenu> button.
    </para>
   </step>
   <step>
    <para>
     Type in a name for the container. This name will be used for all
     <command>virsh</command> commands on the container.
    </para>
    <para>
     Click <guimenu>Advanced options</guimenu>. Select the network to
     connect the container to and click the <guimenu>Finish</guimenu>
     button: the container will then be created and started. A console will
     also be automatically opened.
    </para>
   </step>
  </procedure>

  <procedure xml:id="pro-lxc-ip-network">
 <title>Configuring IP Addresses for Network Interfaces</title>
   <para>
    Network devices and hostdev devices with network capabilities can
    be provided with one or more IP addresses to set on the network device in the
    guest. However, some hypervisors or network device types will simply ignore
    them or only use the first one.
   </para>
 <step>
  <para>
   Edit the container XML configuration using virsh:
  </para>
  <screen>&prompt.user;virsh -c lxc:/// edit <replaceable>MYCONTAINER</replaceable></screen>
 </step>
 <step>
  <para>
   The following example shows how to set one or multiple IP addresses:
  </para>
  <screen>[...]
&lt;devices>
 &lt;interface type='network'>
  &lt;source network='default'/>
  &lt;target dev='vnet0'/>
  &lt;ip address='192.168.122.5' prefix='24'/>
  &lt;ip address='192.168.122.5' prefix='24' peer<co xml:id="co-lxc-netw-peer"/>='10.0.0.10'/>
   &lt;route family<co xml:id="co-lxc-netw-family"/>='ipv4' address<co xml:id="co-lxc-netw-addr"/>='192.168.122.0' prefix<co xml:id="co-lxc-netw-prefix"/>='24'
          gateway<co xml:id="co-lxc-netw-gateway"/>='192.168.122.1'/>
   &lt;route family<xref linkend="co-lxc-netw-family" xrefstyle="select:label"/>='ipv4' address<xref
   linkend="co-lxc-netw-addr" xrefstyle="select:label"/>='192.168.122.8' gateway<xref
    linkend="co-lxc-netw-gateway" xrefstyle="select:label"/>='192.168.122.1'/>
 &lt;/interface>
 [...]
 &lt;hostdev mode='capabilities' type='net'>
  &lt;source>
   &lt;interface>eth0&lt;/interface>
  &lt;/source>
  &lt;ip address='192.168.122.6' prefix='24'/>
  &lt;route family='ipv4' address='192.168.122.0' prefix='24' gateway='192.168.122.1'/>
  &lt;route family='ipv4' address='192.168.122.8' gateway='192.168.122.1'/>
 &lt;/hostdev>
&lt;/devices>
[...]</screen>
  <calloutlist>
   <callout arearefs="co-lxc-netw-peer">
    <para>
     Optional attribute. Holds the IP address of the other end of a point-to-point
     network device.
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-family">
    <para>
     Can be set to either <literal>ipv4</literal> or <literal>ipv6</literal>.
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-addr">
    <para>
     Contains the IP address.
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-prefix">
    <para>
     Optional parameter (will be automatically set if not specified). Defines the
     number of 1 bits in the netmask. For IPv4, the default prefix is determined
     according to the network <quote>class</quote> (<literal>A</literal>,
     <literal>B</literal>, or <literal>C</literal>). For IPv6, the default prefix
     is <literal>64</literal>.
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-gateway">
    <para>
     If you do not specify a default gateway in the XML file, none will be set.
    </para>
   </callout>
  </calloutlist>
 </step>
 <step>
    <para>
     You can also add route elements to define IP routes to add in the guest.
     These are used by the LXC driver.
    </para>
  <screen>[...]
&lt;devices>
 &lt;interface type<co xml:id="co-lxc-netw-ethernet"/>='ethernet'>
  &lt;source><co xml:id="co-lxc-netw-source"/>
   &lt;ip address<co xml:id="co-lxc-netw-ip1"/>='192.168.123.1' prefix='24'/>
   &lt;ip address<co xml:id="co-lxc-netw-ip2"/>='10.0.0.10' prefix='24' peer='192.168.122.5'/>
   &lt;route<co xml:id="co-lxc-netw-route"/> family='ipv4' address='192.168.42.0' prefix='24'
            gateway='192.168.123.4'/>
  &lt;/source>
  [...]
 &lt;/interface>
 [...]
&lt;/devices>
[...]</screen>
  <calloutlist>
   <callout arearefs="co-lxc-netw-ethernet">
      <para>
       Network devices of type <literal>ethernet</literal> can optionally be
       provided with one or multiple IP addresses (<xref linkend="co-lxc-netw-ip1"
        xrefstyle="select:label"/>, <xref linkend="co-lxc-netw-ip2"
        xrefstyle="select:label"/>) and with one or multiple routes (<xref
         linkend="co-lxc-netw-route" xrefstyle="select:label"/>)
       to set on the host side of the network device.
      </para>
    <para>
     These are configured as subelements of the <literal>source</literal> element
     (<xref linkend="co-lxc-netw-source"/>) of the interface. They have the same
     attributes as the similarly named elements used to configure the guest side
     of the interface (see the step above).
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-ip1">
    <para>
     First IP address for the network device of type <literal>ethernet</literal>.
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-ip2">
    <para>
     Second IP address for the network device of type <literal>ethernet</literal>.
    </para>
   </callout>
   <callout arearefs="co-lxc-netw-route">
    <para>
     Route to set on the host side of the network device.
    </para>
   </callout>
  </calloutlist>
  <para>
   Find further details about the attributes of this element at <link
  xlink:href="http://libvirt.org/formatnetwork.html#elementsStaticroute"/>.
  </para>
 </step>
 <step>
  <para>
   Save the changes and exit the editor.
  </para>
 </step>
</procedure>
  <note>
   <title>Container Network</title>
   <para>
    To configure the container network, edit the
    <filename>/etc/sysconfig/network/ifcfg-*</filename> files.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-lxc-setup-container-app">
  <title>Setting Up &lxc; Application Containers</title>

  <para>
   Libvirt also allows to run single applications instead of full blown
   Linux distributions in containers. In this example,
   <command>bash</command> will be started in its own container.
  </para>

  <procedure xml:id="pro-lxc-define-app-gui">
   <title>Defining an Application Container Using &yast;</title>
   <step>
    <para>
     Start &vmm;.
    </para>
   </step>
   <step performance="optional">
    <para>
     If not already present, add a local LXC connection by clicking
     <menuchoice><guimenu>File</guimenu>
     <guimenu>Add Connection</guimenu></menuchoice>.
    </para>
    <para>
     Select <guimenu>LXC (Linux Containers)</guimenu> as the hypervisor and
     click <guimenu>Connect</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Select the <guimenu>localhost (LXC)</guimenu> connection and click
     <guimenu>File</guimenu> <guimenu>New Virtual Machine</guimenu> menu.
    </para>
   </step>
   <step>
    <para>
     Activate <guimenu>Application container</guimenu> and
     click <guimenu>Forward</guimenu>.
    </para>
    <para>
     Set the path to the application to be launched. As an example, the
     field is filled with <command>/bin/sh</command>, which is fine to
     create a first container. Click <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Choose the maximum amount of memory and CPUs to allocate to the
     container. Click <guimenu>Forward</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Type in a name for the container. This name will be used for all
     <command>virsh</command> commands on the container.
    </para>
    <para>
     Click <guimenu>Advanced options</guimenu>. Select the network to
     connect the container to and click <guimenu>Finish</guimenu>. The
     container will be created and started. A console will be opened
     automatically.
    </para>
    <para>
     Note that the container will be destroyed after the application has
     finished running.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-lxc-config-apparmor">
  <title>Securing a Container Using &aa;</title>

  <para>
   By default, containers are not secured using &aa; or &selnx;. There
   is no graphical user interface to change the security model for a libvirt
   domain, but <command>virsh</command> will help.
  </para>

  <procedure xml:id="pro-lxc-setup-apparmor">
   <step>
    <para>
     Edit the container XML configuration using virsh:
    </para>
<screen>&prompt.user;virsh -c lxc:/// edit <replaceable>MYCONTAINER</replaceable></screen>
   </step>
   <step>
    <para>
     Add the following to the XML configuration, save it and exit the
     editor.
    </para>
<screen>&lt;domain&gt;
    ...
    &lt;seclabel type="dynamic" model="apparmor"/&gt;
    ...
&lt;/domain&gt;</screen>
   </step>
   <step>
    <para>
     With this configuration, an &aa; profile for the container will be
     created in the <filename>/etc/apparmor.d/libvirt</filename>
     directory. The default profile only allows the minimum applications to
     run in the container. This can be changed by modifying the
     <filename>libvirt-<replaceable>CONTAINER-uuid</replaceable></filename>
     file: this file is not overwritten by libvirt.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="lxc-diff">
  <title>Differences between the libvirt LXC Driver and LXC</title>

  <para>
   <phrase os="sles;sled">&sls; 11 SP3 was</phrase><phrase
   os="osuse">&opensuse; versions prior to Leap were</phrase> shipping LXC,
   while <phrase os="sles;sled">&sls; 12</phrase><phrase os="osuse">&opensuse;
   Leap</phrase> comes with the libvirt LXC driver, sometimes named libvirt-lxc
   to avoid confusion. The containers are not managed or configured in the same
   way in these tools.  Here is a non-exhaustive list of differences.
  </para>

  <para>
   The main difference is that domain configuration in libvirt is an XML file,
   while LXC configuration is a properties file.  Most of the LXC properties
   can be mapped to the domain XML. The properties that cannot be migrated are:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <emphasis>lxc.network.script.up</emphasis>: this script can be
     implemented using the <filename>/etc/libvirt/hooks/network</filename>
     libvirt hook, though the script will need to be adapted.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>lxc.network.ipv*</emphasis>: libvirt cannot set the container
     network configuration from the domain configuration.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>lxc.network.name</emphasis>: libvirt cannot set the container
     network card name.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>lxc.devttydir</emphasis>: libvirt does not allow changing the
     location of the console devices.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>lxc.console</emphasis>: there is currently no way to log the
     output of the console into a file on the host for libvirt LXC
     containers.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>lxc.pivotdir</emphasis>: libvirt does not allow to fine-tune
     the directory used for the <command>pivot_root</command>.
     <filename>/.olroot</filename> is used.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>lxc.rootfs.mount</emphasis>: libvirt does not allow to
     fine-tune this.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   &lxc; VLAN networks automatically create the VLAN interface on the
   host and then move it into the guest namespace. libvirt-lxc configuration
   can mention a VLAN tag ID only for &ovs; tap devices or PCI
   pass-through of SR-IOV VF. The conversion tool actually needs the user to
   manually create the VLAN interface on the host side.
  </para>

  <para>
   &lxc; rootfs can also be an image file, but LXC brute-forces the mount
   to try to detect the proper file system format. libvirt-lxc can mount
   image files of several formats, but the 'auto' value for the format
   parameter is explicitly not supported. This means that the generated
   configuration will need to be tweaked by the user to get a proper match
   in that case.
  </para>

  <para>
   &lxc; can support any cgroup configuration, even future ones, while
   libvirt domain configuration, needs to map each of them.
  </para>

  <para>
   &lxc; can mount block devices in the rootfs, but it cannot
   mount raw partition files: the file needs to be manually attached to a
   loop device. On the other hand libvirt-lxc can mount block devices, but
   also partition files of any format.
  </para>
 </sect1>
 <sect1 xml:id="sec-lxc-namespaces">
  <title>Sharing Namespaces across Containers</title>
  <para>
   Like &deng;, libvirt allows you to inherit the namespace from containers
   or processes to share the network namespace. The following example shows how
   to share required namespaces.
   </para>
 <screen>&lt;domain type='lxc' xmlns:lxc='http://libvirt.org/schemas/domain/lxc/1.0'>
 [...]
 &lt;lxc:namespace>
  &lt;lxc:sharenet type='netns' value='red'/>
  &lt;lxc:shareuts type='name' value='<replaceable>CONTAINER_1</replaceable>'/>
  &lt;lxc:shareipc type='pid' value='<replaceable>12345</replaceable>'/>
 &lt;/lxc:namespace>
 &lt;/domain>
</screen>
    <para>
     The <option>netns</option> option is specific to <literal>sharenet</literal>.
     Use it to use an existing network namespace (instead of creating a
     new network namespace for the container). In this case, the
     <option>privnet</option> option will be ignored.
    </para>
 </sect1>
<!-- ========================================================= -->
 <sect1 xml:id="sec-lxc-moreinfo">
  <title>For More Information</title>

  <variablelist>
   <varlistentry>
    <term>&lxc; Container Driver</term>
    <listitem>
     <para>
      <link xlink:href="http://libvirt.org/drvlxc.html"/>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
