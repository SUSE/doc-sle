<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.boot">
 <title>Booting a Linux System</title>
 <info>
      <abstract>
        <para>
    Booting a Linux system involves different components and tasks. The
    hardware itself is initialized by the BIOS or the UEFI, which starts the
    Kernel by means of a boot loader. After this point, the boot process is
    completely controlled by the operating system and handled by &systemd;.
    &systemd; provides a set of <quote>targets</quote> that boot setups for
    everyday usage, maintenance or emergencies.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec.boot.proc">
  <title>The Linux Boot Process</title>

  <para>
   The Linux boot process consists of several stages, each represented by a
   different component. The following list briefly summarizes the boot
   process and features all the major components involved:
  </para>

  <orderedlist spacing="normal">
   <listitem>
    <formalpara>
     <title>BIOS/UEFI</title>
     <para>
      After turning on the computer, the BIOS or the UEFI initializes the
      screen and keyboard, and tests the main memory. Up to this stage, the
      machine does not access any mass storage media. Subsequently, the
      information about the current date, time, and the most important
      peripherals are loaded from the CMOS values. When the first hard disk
      and its geometry are recognized, the system control passes from the
      BIOS to the boot loader. If the BIOS supports network booting, it is
      also possible to configure a boot server that provides the boot
      loader. On x86_64 systems, PXE boot is needed. Other architectures
      commonly use the BOOTP protocol to get the boot loader.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Boot Loader</title>
     <para>
      The first physical 512-byte data sector of the first hard disk is
      loaded into the main memory and the <emphasis>boot loader</emphasis>
      that resides at the beginning of this sector takes over. The commands
      executed by the boot loader determine the remaining part of the boot
      process. Therefore, the first 512&nbsp;bytes on the first hard disk
      are called the <emphasis>Master Boot Record</emphasis> (MBR).
      The boot loader then passes control to the actual operating system, in
      this case, the Linux Kernel. More information about &grub;, the Linux
      boot loader, can be found in <xref linkend="cha.grub2"/>. For a
      network boot, the BIOS acts as the boot loader. It gets the boot image
      from the boot server and starts the system. This is completely
      independent of local hard disks.
     </para>
    </formalpara>
    <para>
     If the root file system fails to mount from within the boot
     environment, it must be checked and repaired before the boot can continue.
     The file system checker will be automatically started for Ext3 and Ext4
     file systems. The repair process is not automated for Xfs and Btrfs file
     systems and the user will be presented with information describing the
     options available to repair the file system. Once the file system has been
     successfully repaired, exiting the boot environment will cause the system
     to retry mounting the root file system and, if successful, the boot will
     continue normally.
    </para>
   </listitem>
   <listitem>
    <formalpara>
     <title>Kernel and <systemitem>initramfs</systemitem></title>
     <para>
      To pass system control, the boot loader loads both the Kernel and an
      initial RAM-based file system (<systemitem>initramfs</systemitem>)
      into memory. The contents of the <systemitem>initramfs</systemitem>
      can be used by the Kernel directly. <systemitem>initramfs</systemitem>
      contains a small executable called <systemitem>init</systemitem> that
      handles the mounting of the real root file system. If special hardware
      drivers are needed before the mass storage can be accessed, they must
      be in <systemitem>initramfs</systemitem>. For more information about
      <systemitem>initramfs</systemitem>, refer to
      <xref linkend="sec.boot.initrd"/>. If the system does not have a local
      hard disk, the <systemitem>initramfs</systemitem> must provide the
      root file system for the Kernel. This can be done with the help of a
      network block device like iSCSI or SAN, but it is also possible to use
      NFS as the root device.
     </para>
    </formalpara>
    <note>
     <title>The <systemitem>init</systemitem> Process Naming</title>
     <para>
      Two different programs are commonly named <quote>init</quote>:
     </para>
     <orderedlist spacing="normal">
      <listitem>
       <para>
        the <systemitem>initramfs</systemitem> process mounting the root
        file system
       </para>
      </listitem>
      <listitem>
       <para>
        the operating system process setting up the system
       </para>
      </listitem>
     </orderedlist>
     <para>
      In this chapter we will therefore refer to them as
      <quote><systemitem>init</systemitem> on
      <systemitem>initramfs</systemitem></quote> and
      <quote>&systemd;</quote>, respectively.
     </para>
    </note>
   </listitem>
   <listitem>
    <formalpara>
     <title><systemitem>init</systemitem> on <systemitem>initramfs</systemitem></title>
     <para>
      This program performs all actions needed to mount the proper root file
      system. It provides Kernel functionality for the needed file system
      and device drivers for mass storage controllers with
      <systemitem class="service">udev</systemitem>. After the root file
      system has been found, it is checked for errors and mounted. If this
      is successful, the <systemitem>initramfs</systemitem> is cleaned and
      the &systemd; daemon on the root file system is executed. For more
      information about <systemitem>init</systemitem> on
      <systemitem>initramfs</systemitem>, refer to
      <xref linkend="sec.boot.linuxrc"/>. Find more information about
      <systemitem class="service">udev</systemitem> in
      <xref linkend="cha.udev"/>.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>&systemd;</title>
     <para>
      By starting services and mounting file systems, &systemd; handles the
      actual booting of the system. &systemd; is described in
      <xref linkend="cha.systemd"/>.
     </para>
    </formalpara>
   </listitem>
  </orderedlist>
 </sect1>
 <sect1 xml:id="sec.boot.initrd">
  <title><systemitem>initramfs</systemitem></title>

  <para>
   <systemitem>initramfs</systemitem> is a small cpio archive that the
   Kernel can load into a RAM disk. It provides a minimal Linux environment
   that enables the execution of programs before the actual root file system
   is mounted. This minimal Linux environment is loaded into memory by BIOS
   or UEFI routines and does not have specific hardware requirements other
   than sufficient memory. The <systemitem>initramfs</systemitem> archive
   must always provide an executable named <systemitem>init</systemitem>
   that executes the &systemd; daemon on the root file system for the boot
   process to proceed.
  </para>

  <para>
   Before the root file system can be mounted and the operating system can
   be started, the Kernel needs the corresponding drivers to access the
   device on which the root file system is located. These drivers may
   include special drivers for certain kinds of hard disks or even network
   drivers to access a network file system. The needed modules for the root
   file system may be loaded by <systemitem>init</systemitem> on
   <systemitem>initramfs</systemitem>. After the modules are loaded,
   <systemitem class="service">udev</systemitem> provides the
   <systemitem>initramfs</systemitem> with the needed devices. Later in the
   boot process, after changing the root file system, it is necessary to
   regenerate the devices. This is done by the &systemd; unit
   <filename>udev.service</filename> with the command
   <command>udevtrigger</command>.
  </para>

  <para>
   If you need to change hardware (for example, hard disks) in an installed
   system and this hardware requires different drivers to be in the
   Kernel at boot time, you must update the
   <systemitem>initramfs</systemitem> file. This is done by calling
   <command>dracut</command> <option>-f</option> (the option
   <option>-f</option> overwrites the existing initramfs file). To add a
   driver for the new hardware, edit
   <filename>/etc/dracut.conf.d/01-dist.conf</filename> and add the
   following line.
  </para>

<screen>force_drivers+="<replaceable>driver1</replaceable>"</screen>

  <para>
   Replace <replaceable>driver1</replaceable> with the module name of the
   driver. If you need to add more than one driver, list them
   space-separated (<literal><replaceable>driver1</replaceable>
   <replaceable>driver2</replaceable></literal>).
  </para>

  <important>
   <title>Updating <systemitem>initramfs</systemitem> or <systemitem>init</systemitem></title>
   <para>
    The boot loader loads <systemitem>initramfs</systemitem> or
    <systemitem>init</systemitem> in the same way as the Kernel. It is not
    necessary to re-install &grub; after updating
    <systemitem>initramfs</systemitem> or <systemitem>init</systemitem>,
    because &grub; searches the directory for the right file when booting.
   </para>
  </important>

  <tip>
   <title>Changing Kernel Variables</title>
   <para>
    If you change the values of some kernel variables via the
    <command>sysctl</command> interface by editing related files
    (<filename>/etc/sysctl.conf</filename> or
    <filename>/etc/sysctl.d/*.conf</filename>), the change will be lost on
    the next system reboot. Even if you load the values with <command>sysctl
    --system</command> at runtime, the changes are not saved into the
    initramfs file. You need to update it by calling
    <command>dracut</command> <option>-f</option> (the option
    <option>-f</option> overwrites the existing initramfs file).
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec.boot.linuxrc">
  <title>Init on <systemitem>initramfs</systemitem></title>

  <para>
   The main purpose of <systemitem>init</systemitem> on
   <systemitem>initramfs</systemitem> is to prepare the mounting of and
   access to the real root file system. Depending on your system
   configuration, <systemitem>init</systemitem> on
   <systemitem>initramfs</systemitem> is responsible for the following
   tasks.
  </para>

  <variablelist>
   <varlistentry>
    <term>Loading Kernel Modules</term>
    <listitem>
     <para>
      Depending on your hardware configuration, special drivers may be
      needed to access the hardware components of your computer (the most
      important component being your hard disk). To access the final root
      file system, the Kernel needs to load the proper file system drivers.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Providing Block Special Files</term>
    <listitem>
     <para>
      For each loaded module, the Kernel generates device events.
      <systemitem class="service">udev</systemitem> handles these events and
      generates the required special block files on a RAM file system in
      <filename>/dev</filename>. Without those special files, the file
      system and other devices would not be accessible.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Managing RAID and LVM Setups</term>
    <listitem>
     <para>
      If you configured your system to hold the root file system under RAID
      or LVM, <systemitem>init</systemitem> on
      <systemitem>initramfs</systemitem> sets up LVM or RAID to enable
      access to the root file system later.
     </para>
     <para> In case you want to change your <filename>/usr</filename> or
              <systemitem>swap</systemitem> partitions directly without
            the help of &yast;, further actions are needed. If you
            forget these steps, your system will start in emergency
            mode. To avoid starting in emergency mode, perform the
            following steps:</para>
     <procedure xml:id="pro.boot.linuxrc.lvm">
       <title>Updating Init RAM Disk When Switching to Logical Volumes</title>
        <step>
          <para>Edit the corresponding entry in
                  <filename>/etc/fstab</filename> and replace your
                previous partitons with the logical volume.</para>
        </step>
        <step>
          <para>Execute the following commands:</para>
          <screen>&prompt.root;<command>mount</command> -a
&prompt.root;<command>swapon</command> -a</screen>
        </step>
        <step>
          <para>Regenerate your initial ram disk (initramfs) with
           <command>mkinitrd</command> or <command>dracut</command>.
       </para>
        </step>
        <step>
          <para>For &zseries;, additionally run <command>grub2-install</command>.</para>
        </step>
     </procedure>
     <para>Find more information about RAID and LVM in <xref
              linkend="cha.advdisk"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="ve.net">
    <term>Managing Network Configuration</term>
    <listitem>
     <para>
      If you configured your system to use a network-mounted root file
      system (mounted via NFS), <systemitem>init</systemitem> on
      <systemitem>initramfs</systemitem> must make sure that the proper
      network drivers are loaded and that they are set up to allow access to
      the root file system.
     </para>
     <para>
      If the file system resides on a network block device like iSCSI or
      SAN, the connection to the storage server is also set up by
      <systemitem>init</systemitem> on <systemitem>initramfs</systemitem>.
      The &productname; supports booting from a secondary iSCSi target if the primary target is not available. <phrase os="sles">For more
      details regarding configuration of the booting iSCSI target refer to <xref linkend="sec.iscsi.initiator.yast"/></phrase>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   When <systemitem>init</systemitem> on <systemitem>initramfs</systemitem>
   is called during the initial boot as part of the installation process,
   its tasks differ from those mentioned above:
  </para>

  <variablelist>
   <varlistentry>
    <term>Finding the Installation Medium</term>
    <listitem>
     <para>
      When starting the installation process, your machine loads an
      installation Kernel and a special <systemitem>init</systemitem>
      containing the &yast; installer. The &yast; installer is running in a
      RAM file system and needs to have information about the location of
      the installation medium to access it for installing the
      operating system.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
      Initiating Hardware Recognition and Loading Appropriate Kernel Modules
     </term>
    <listitem>
     <para>
      As mentioned in <xref linkend="sec.boot.initrd"/>, the boot process
      starts with a minimum set of drivers that can be used with most
      hardware configurations. <systemitem>init</systemitem> starts an
      initial hardware scanning process that determines the set of drivers
      suitable for your hardware configuration. These drivers are used to
      generate a custom <systemitem>initramfs</systemitem> that is needed to
      boot the system. If the modules are not needed for boot but for
      coldplug, the modules can be loaded with &systemd;; for more
      information, see
      <xref linkend="sec.boot.systemd.advanced.kernel_modules"/>.
<!-- 2014-08-20, tiwai pointed out that 
       <filename>/etc/sysconfig/hardware/hwconfig-*</filename> does not
       seem to be supported any longer. -->
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Loading the Installation System</term>
    <listitem>
     <para>
      As soon as the hardware is properly recognized, the appropriate
      drivers are loaded. The <systemitem class="service">udev</systemitem>
      program creates the special device files and
      <systemitem>init</systemitem> starts the installation system with the
      &yast; installer.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Starting &yast;</term>
    <listitem>
     <para>
      Finally, <systemitem>init</systemitem> starts &yast;, which starts
      package installation and system configuration.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
