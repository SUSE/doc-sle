<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-adm-sudo"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>sudo
<!-- TODO: Better title --></title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  Many commands and system utilities need to be run as &rootuser; to modify
  files and/or perform tasks that only the super user is allowed to. For
  security reasons and to avoid accidentally running dangerous commands, it is
  generally advisable not to log in directly as &rootuser;. Instead, it is
  recommended to work as a normal, unprivileged user and use the &sudo;
  command to run commands with elevated privileges.
 </para>
 <para>
  On &productname;, &sudo; is configured by default to work similarly to su.
  However, &sudo; offers the possibility to allow users to run commands with
  privileges of any other user in a highly configurable manner. This can be
  used to assign roles with specific privileges to certain users and groups. It
  is for example possible to allow members of the group &examplegroup; to run a
  command with the privileges of &exampleuserII;. Access to the command can be
  further restricted by, for example, forbidding to specify any command
  options. While su always requires the &rootuser; password for authentication
  with PAM, &sudo; can be configured to authenticate with your own credentials.
  This increases security by not having to share the &rootuser; password. For
  example, you can allow members of the group &examplegroup; to run a command
  <command>frobnicate</command> as &exampleuserII;, with the restriction that
  no arguments are specified. This can be used to assign roles with specific
  abilities to certain users and groups.
 </para>
 <sect1 xml:id="sec-adm-sudo-usage">
  <title>Basic &sudo; Usage</title>

  <para>
   &sudo; is simple to use, yet very powerful.
  </para>

  <sect2 xml:id="sec-adm-sudo-usage-cmd">
   <title>Running a Single Command</title>
   <para>
    Logged in as normal user, you can run any command as &rootuser; by
    adding &sudo; before it. It will prompt for the root password and, if
    authenticated successfully, run the command as &rootuser;:
   </para>
<screen>
&prompt.user;<command>id -un</command><co xml:id="co-sudo-usage-id"/>
tux
&prompt.sudo;<command>id -un</command>
root's password:<co xml:id="co-sudo-usage-pw"/>
root
&prompt.user;<command>id -un</command>
tux<co xml:id="co-sudo-usage-after"/>
&prompt.sudo;<command>id -un</command>
<co xml:id="co-sudo-usage-nopw"/>
root
</screen>
   <calloutlist>
    <callout arearefs="co-sudo-usage-id">
     <para>
      The <command>id -un</command> command prints the login name of the
      current user.
     </para>
    </callout>
    <callout arearefs="co-sudo-usage-pw">
     <para>
      The password is not shown during input, neither as clear text nor as
      bullets.
     </para>
    </callout>
    <callout arearefs="co-sudo-usage-after">
     <para>
      Only commands started with &sudo; are run with elevated privileges. If
      you run the same command without the &sudo; prefix, it is run with the
      privileges of the current user again.
     </para>
    </callout>
    <callout arearefs="co-sudo-usage-nopw">
     <para>
      For a limited amount of time, you do not need to enter the &rootuser;
      password again.
     </para>
    </callout>
   </calloutlist>
   <tip>
    <title>I/O Redirection</title>
    <para>
     I/O redirection does not work as you would probably expect:
    </para>
<screen>
&prompt.sudo;echo s &gt; /proc/sysrq-trigger
bash: /proc/sysrq-trigger: Permission denied
&prompt.sudo;cat &lt; /proc/1/maps
bash: /proc/1/maps: Permission denied
</screen>
    <para>
     Only the <command>echo</command>/<command>cat</command> binary is run with
     elevated privileges, while the redirection is performed by the user's
     shell with user privileges. You can either start a shell like in
     <xref linkend="sec-sudo-shell"/> or use the <command>dd</command> utility
     instead:
    </para>
<screen>
echo s | sudo dd of=/proc/sysrq-trigger
sudo dd if=/proc/1/maps | cat <!-- TODO: Better example! -->
</screen>
   </tip>
  </sect2>

  <sect2 xml:id="sec-sudo-shell">
   <title>Starting a Shell</title>
   <para>
    Having to add &sudo; before every command can be cumbersome. While you
    could specify a shell as a command <command>sudo bash</command>, it is
    recommended to rather use one of the built-in mechanisms to start a shell:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>sudo -s (&lt;command&gt;)</literal>
     </term>
     <listitem>
      <para>
       Starts a shell specified by the <envar>SHELL</envar> environment
       variable or the target user's default shell. If a command is given, it
       is passed to the shell (with the <option>-c</option> option), else the
       shell is run in interactive mode.
      </para>
<screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -s
root's password:
<prompt>root:/home/tux # </prompt>exit
<prompt>&exampleuser_plain;:~ &gt; </prompt>
</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>sudo -i (&lt;command&gt;)</literal>
     </term>
     <listitem>
      <para>
       Like <option>-s</option>, but starts the shell as login shell. This
       means that the shell's start-up files (<filename>.profile</filename>
       etc.) are processed and the current working directory is set to the
       target user's home directory.
      </para>
<screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -i
root's password:
<prompt>root:~ # </prompt>exit
<prompt>&exampleuser_plain;:~ &gt; </prompt>
            </screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-adm-sudo-usage-env">
   <title>Environment Variables</title>
   <para>
    By default, &sudo; does not propagate environment variables:
   </para>
<screen>
&prompt.user;ENVVAR=test env | grep ENVVAR
ENVVAR=test
&prompt.user;ENVVAR=test sudo env | grep ENVVAR
root's password:
<co xml:id="co-sudo-env-novar"/>
&prompt.user;
      </screen>
   <calloutlist>
    <callout arearefs="co-sudo-env-novar">
     <para>
      The empty output shows that the environment variable
      <envar>ENVVAR</envar> did not exist in the context of the command run
      with &sudo;.
     </para>
    </callout>
   </calloutlist>
   <para>
    This behavior can be changed by the <literal>env_reset</literal> option,
    see <xref linkend="tab-adm-sudo-options"/>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-sudo-conf">
  <title>Configuring &sudo;</title>

  <para>
   &sudo; is a very flexible tool with extensive configuration.
  </para>

  <note>
   <title>Locked yourself out of sudo</title>
   <para>
    If you accidentally locked yourself out of &sudo;, use <command>su
    -</command> and the &rootuser; password to get a root shell.
    To fix the error, run <command>visudo</command>.
   </para>
  </note>

  <sect2 xml:id="sec-sudo-conf-edit">
   <title>Editing the Configuration Files</title>
   <!-- Idea for additional content: setting up LDAP/SASL authentication:
   /etc/ldap.conf -> use_sasl; man sudoers.ldap (via bsc#979531)
   - sknorr, 2016-08-22 -->
   <para>
    The main policy configuration file for &sudo; is
    <filename>/etc/sudoers</filename>. As it is possible to lock yourself out
    of the system because of errors in this file, it is strongly
    recommended to use <command>visudo</command> for editing. It will prevent
    simultaneous changes to the opened file and check for syntax errors before
    saving the modifications.
   </para>
   <para>
    Despite its name, you can also use editors other than vi by setting the
    <envar>EDITOR</envar> environment variable, for example:
   </para>
<screen>sudo EDITOR=<replaceable>/usr/bin/nano</replaceable> visudo</screen>
   <para>
    However, the <filename>/etc/sudoers</filename> file itself is supplied by
    the system packages and modifications may break on updates. Therefore, it
    is recommended to put custom configuration into files in the
    <filename>/etc/sudoers.d/</filename> directory. Any file in there is
    automatically included. To create or edit a file in that subdirectory, run:
   </para>
<screen>sudo visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable></screen>
   <para>
    Alternatively with a different editor (for example
    <command>nano</command>):
   </para>
<screen>sudo EDITOR=<replaceable>/usr/bin/nano</replaceable> visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable></screen>
   <note>
    <title>Ignored Files in <filename>/etc/sudoers.d</filename></title>
    <para>
     The <literal>#includedir</literal> command in
     <filename>/etc/sudoers</filename>, used for
     <filename>/etc/sudoers.d</filename>, ignores files that end in
     <literal>~</literal> (tilde) or contain a <literal>.</literal> (dot).
    </para>
   </note>
   <para>
    For more information on the <command>visudo</command> command, run
    <command>man 8 visudo</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec-sudo-conf-syntax">
   <title>Basic sudoers Configuration Syntax</title>
   <para>
    In the sudoers configuration files, there are two types of options: strings
    and flags. While strings can contain any value, flags can be turned either
    ON or OFF. The most important syntax constructs for sudoers configuration
    files are:
   </para>
<screen>
# Everything on a line after a # gets ignored <co xml:id="co-sudo-syntax-comment"/>
Defaults !insults # Disable the insults flag <co xml:id="co-sudo-syntax-flag"/>
Defaults env_keep += "DISPLAY HOME" # Add DISPLAY and HOME to env_keep
&exampleuser_plain; ALL = NOPASSWD: /usr/bin/frobnicate, PASSWD: /usr/bin/journalctl <co xml:id="co-sudo-syntax-rule"/>
</screen>
   <calloutlist>
    <callout arearefs="co-sudo-syntax-comment">
     <para>
      There are two exceptions: <literal>#include</literal> and
      <literal>#includedir</literal> are normal commands. Followed by digits,
      it specifies a UID.
     </para>
    </callout>
    <callout arearefs="co-sudo-syntax-flag">
     <para>
      Remove the <literal>!</literal> to set the specified flag to ON.
     </para>
    </callout>
    <callout arearefs="co-sudo-syntax-rule">
     <para>
      See <xref linkend="sec-sudo-conf-rule"/>.
     </para>
    </callout>
   </calloutlist>
   <table xml:id="tab-adm-sudo-options">
    <title>Useful Flags and Options</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>
         Option name
        </para>
       </entry>
       <entry>
        <para>
         Description
        </para>
       </entry>
       <entry>
        <para>
         Example
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><literal>targetpw</literal>
       </entry>
       <entry>
        <para>
         This flag controls whether the invoking user is required to enter the
         password of the target user (ON) (for example &rootuser;) or the
         invoking user (OFF).
        </para>
       </entry>
       <entry>
<screen>Defaults targetpw # Turn targetpw flag ON</screen>
       </entry>
      </row>
      <row>
       <entry><literal>rootpw</literal>
       </entry>
       <entry>
        <para>
         If set, &sudo; will prompt for the &rootuser; password instead of the
         target user's or the user that invoked the command. The default is OFF.
        </para>
       </entry>
       <entry>
<screen>Defaults !rootpw # Turn rootpw flag OFF</screen>
       </entry>
      </row>
      <row>
       <entry><literal>env_reset</literal>
       </entry>
       <entry>
        <para>
         If set, &sudo; constructs a minimal environment with only
         <envar>TERM</envar>, <envar>PATH</envar>, <envar>HOME</envar>,
         <envar>MAIL</envar>, <envar>SHELL</envar>, <envar>LOGNAME</envar>,
         <envar>USER</envar>, <envar>USERNAME</envar>, and
         <envar>SUDO_*</envar> set. Additionally, variables listed in
         <literal>env_keep</literal> get imported from the calling
         environment. The default is ON.
        </para>
       </entry>
       <entry>
<screen>Defaults env_reset # Turn env_reset flag ON</screen>
       </entry>
      </row>
      <row>
       <entry><literal>env_keep</literal>
       </entry>
       <entry>
        <para>
         List of environment variables to keep when the
         <literal>env_reset</literal> flag is ON.
        </para>
       </entry>
       <entry>
<screen>
# Set env_keep to contain EDITOR and PROMPT
Defaults env_keep = "EDITOR PROMPT"
Defaults env_keep += "JRE_HOME" # Add JRE_HOME
Defaults env_keep -= "JRE_HOME" # Remove JRE_HOME
</screen>
       </entry>
      </row>
      <row>
       <entry><literal>env_delete</literal>
       </entry>
       <entry>
        <para>
         List of environment variables to remove when the
         <literal>env_reset</literal> flag is OFF.
        </para>
       </entry>
       <entry>
<screen>
# Set env_delete to contain EDITOR and PROMPT
Defaults env_delete = "EDITOR PROMPT"
Defaults env_delete += "JRE_HOME" # Add JRE_HOME
Defaults env_delete -= "JRE_HOME" # Remove JRE_HOME
</screen>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    The <literal>Defaults</literal> token can also be used to create aliases
    for a collection of users, hosts, and commands. Furthermore, it is possible
    to apply an option only to a specific set of users.
   </para>
   <para>
    For detailed information about the <filename>/etc/sudoers</filename>
    configuration file, consult <command>man 5 sudoers</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec-sudo-conf-rule">
   <title>Rules in sudoers</title>
   <para>
    Rules in the sudoers configuration can be very complex, so this section
    will only cover the basics. Each rule follows the basic scheme
    (<literal>[]</literal> marks optional parts):
   </para>
<screen>
#Who      Where         As whom      Tag                What
User_List Host_List = [(User_List)] [NOPASSWD:|PASSWD:] Cmnd_List
</screen>
   <variablelist>
    <title>Syntax for sudoers Rules</title>
    <varlistentry>
     <term><literal>User_List</literal>
     </term>
     <listitem>
      <para>
       One or more (separated by <literal>,</literal>) identifiers: Either a
       user name, a group in the format <literal>%GROUPNAME</literal> or a user
       ID in the format <literal>#UID</literal>. Negation can be performed with
       a <literal>!</literal> prefix.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>Host_List</literal>
     </term>
     <listitem>
      <para>
       One or more (separated by <literal>,</literal>) identifiers: Either a
       (fully qualified) host name or an IP address. Negation can be performed
       with a <literal>!</literal> prefix. <literal>ALL</literal> is the usual
       choice for <literal>Host_List</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>NOPASSWD:|PASSWD:</literal>
     </term>
     <listitem>
      <para>
       The user will not be prompted for a password when running commands
       matching <literal>CMDSPEC</literal> after <literal>NOPASSWD:</literal>.
      </para>
      <para>
       <literal>PASSWD</literal> is the default, it only needs to be specified
       when both are on the same line:
      </para>
<screen>&exampleuser_plain; ALL = PASSWD: /usr/bin/foo, NOPASSWD: /usr/bin/bar</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>Cmnd_List</literal>
     </term>
     <listitem>
      <para>
       One or more (separated by <literal>,</literal>) specifiers: A path to an
       executable, followed by allowed arguments or nothing.
      </para>
<screen>
/usr/bin/foo     # Anything allowed
/usr/bin/foo bar # Only "/usr/bin/foo bar" allowed
/usr/bin/foo ""  # No arguments allowed
</screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    <literal>ALL</literal> can be used as <literal>User_List</literal>,
    <literal>Host_List</literal>, and <literal>Cmnd_List</literal>.
   </para>
   <para>
    A rule that allows &exampleuser; to run all commands as root without
    entering a password:
   </para>
<screen>&exampleuser_plain; ALL = NOPASSWD: ALL</screen>
   <para>
    A rule that allows &exampleuser; to run <command>systemctl restart
    apache2</command>:
   </para>
<screen>&exampleuser_plain; ALL = /usr/bin/systemctl restart apache2</screen>
   <para>
    A rule that allows &exampleuser; to run <command>wall</command> as
    <systemitem>admin</systemitem> with no arguments:
   </para>
<screen>&exampleuser_plain; ALL = (admin) /usr/bin/wall ""</screen>
   <warning>
    <title>Dangerous constructs</title>
    <para>
     Constructs of the kind
    </para>
<screen>ALL ALL = ALL</screen>
    <para>
     <emphasis>must not</emphasis> be used without <literal>Defaults
     targetpw</literal>, otherwise anyone can run commands as &rootuser;.
    </para>
   </warning>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-sudo-usecases">
  <title>Common Use Cases</title>

  <para>
   Although the default configuration is often sufficient for simple setups and
   desktop environments, custom configurations can be very useful.
  </para>

  <sect2 xml:id="sec-sudo-usecases-userpw">
   <title>Using &sudo; without &rootuser; Password</title>
   <para>
    In cases with special restrictions (<quote>user X can only run command Y as
    &rootuser;</quote>) it is not possible. In other cases, it is still
    favorable to have some kind of separation. By convention, members of the
    group <systemitem class="groupname">wheel</systemitem> can run all commands
    with &sudo; as root.
   </para>
   <procedure>
    <step>
     <para>
      Add yourself to the <systemitem class="groupname">wheel</systemitem>
      group
     </para>
     <para>
      If your user account is not already member of the
      <systemitem class="groupname">wheel</systemitem> group, add it by running
      <command>sudo usermod -a -G wheel
      <replaceable>USERNAME</replaceable></command> and logging out and in
      again. Verify that the change was successful by running <command>groups
      <replaceable>USERNAME</replaceable></command>.
     </para>
    </step>
    <step>
     <para>
      Make authentication with the invoking user's password the default.
     </para>
     <para>
      Create the file <filename>/etc/sudoers.d/userpw</filename> with
      <command>visudo</command> (see <xref linkend="sec-sudo-conf-edit"/>) and
      add:
     </para>
<screen>Defaults !targetpw</screen>
    </step>
    <step>
     <para>
      Select a new default rule.
     </para>
     <para>
      Depending on whether you want users to re-enter their passwords,
      uncomment the specific line in <filename>/etc/sudoers</filename> and
      comment out the default rule.
     </para>
<screen>
## Uncomment to allow members of group wheel to execute any command
# %wheel ALL=(ALL) ALL

## Same thing without a password
# %wheel ALL=(ALL) NOPASSWD: ALL
</screen>
    </step>
    <step>
     <para>
      Make the default rule more restrictive
     </para>
     <para>
      Comment out or remove the allow-everything rule in
      <filename>/etc/sudoers</filename>:
     </para>
<screen>ALL     ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'!</screen>
     <warning>
      <title>Dangerous rule in sudoers</title>
      <para>
       Do not forget this step, otherwise <emphasis>any</emphasis> user can
       execute <emphasis>any</emphasis> command as &rootuser;!
      </para>
     </warning>
    </step>
    <step>
     <para>
      Test the configuration
     </para>
     <para>
      Try to run &sudo; as member and non-member of
      <systemitem class="groupname">wheel</systemitem>.
     </para>
<screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>groups
users wheel
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo id -un
&exampleuser_plain;'s password:
root
<prompt>&exampleuserII_plain;:~ &gt; </prompt>groups
users
<prompt>&exampleuserII_plain;:~ &gt; </prompt>sudo id -un
&exampleuserII_plain; is not in the sudoers file.  This incident will be reported.
          </screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-sudo-usecases-xorg">
   <title>Running Graphical Applications with &sudo;</title>
   <para>
    By default, unprivileged users are not allowed to run graphical
    applications using &sudo;. Doing this usually results in an error message,
    for example:
   </para>
<screen>
&prompt.sudo;xterm
xterm: Xt error: Can't open display: %s
xterm: DISPLAY is not set
</screen>
   <para>
    Running &yast; with &sudo; starts the ncurses interface instead of the
    graphical one.
   </para>
   <para>
    While there are several ways to allow unprivileged users to run graphical
    applications with &sudo;, most of them depend on the specific X server, and
    they usually require manual configuration. A faster and more
    straightforward way of temporarily allowing the root user to access the
    local user's X session is to use the <systemitem>xhost</systemitem>
    tool. This tool makes it possible to add and delete host names or user
    names to the list allowed to make connections to the X server. To grant
    temporary access, run the following command as the current user:
   </para>
<screen>&prompt.user;xhost si:localuser:root</screen>  
   <para>
    You can then run the desired graphical application with &sudo;. After you
    close the application, remove the access by running the command
    below:
   </para>
<screen>host -si:localuser:root</screen>
      <warning>
        <title>Potential security issue</title>
        <para>
	Running graphical applications with elevated privileges poses a
	security risk. While <systemitem>xhost</systemitem> provides a
	convenient way to temporarily grant root access to the user's X
	session, it makes the system less secure. It is recommended to avoid
	running graphical applications with &sudo; whenever possible. If you
	choose to use <systemitem>xhost</systemitem> to grant the root access,
	remember to revoke it as soon as it is no longer needed.
	</para>
      </warning>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-adm-sudo-moreinfo">
  <title>More Information</title>

  <para>
   A quick overview about the available command line switches can be retrieved
   by <command>sudo --help</command>. An explanation and other important
   information can be found in the man page: <command>man 8 sudo</command>,
   while the configuration is documented in <command>man 5 sudoers</command>.
  </para>
 </sect1>
</chapter>
