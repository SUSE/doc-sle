<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.audit.scenarios">
 <title>Introducing an Audit Rule Set</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>
  The following example configuration illustrates how audit can be used to
  monitor your system. It highlights the most important items that need to
  be audited to cover the list of auditable events specified by Controlled
  Access Protection Profile (CAPP).
 </para>
 <para>
  The example rule set is divided into the following sections:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    Basic audit configuration (see <xref linkend="sec.audit.scenbasic"/>)
   </para>
  </listitem>
  <listitem>
   <para>
    Watches on audit log files and configuration files (see
    <xref linkend="sec.audit.scenauconf"/>)
   </para>
  </listitem>
  <listitem>
   <para>
    Monitoring operations on file system objects (see
    <xref linkend="sec.audit.scenfs"/>)
   </para>
  </listitem>
  <listitem>
   <para>
    Monitoring security databases (see
    <xref linkend="sec.audit.scensecurity"/>)
   </para>
  </listitem>
  <listitem>
   <para>
    Monitoring miscellaneous system calls
    (<xref linkend="sec.audit.scenmisc"/>)
   </para>
  </listitem>
  <listitem>
   <para>
    Filtering system call arguments (see
    <xref linkend="sec.audit.scenipc"/>)
   </para>
  </listitem>
 </itemizedlist>
 <para>
  To transform this example into a configuration file to use in your live
  setup, proceed as follows:
 </para>
 <procedure>
  <step>
   <para>
    Choose the appropriate settings for your setup and adjust them.
   </para>
  </step>
  <step>
   <para>
    Adjust the file <filename>/etc/audit/audit.rules</filename> by adding
    rules from the examples below or by modifying existing rules.
   </para>
  </step>
 </procedure>
 <note>
  <title>Adjusting the Level of Audit Logging</title>
  <para>
   Do not copy the example below into your audit setup without adjusting it
   to your needs. Determine what and to what extent to audit.
  </para>
 </note>
 <para>
  The entire <filename>audit.rules</filename> is a collection of
  <command>auditctl</command> commands. Every line in this file expands to a
  full <command>auditctl</command> command line. The syntax used in the rule
  set is the same as that of the <command>auditctl</command> command.
 </para>
 <sect1 xml:id="sec.audit.scenbasic">
  <title>Adding Basic Audit Configuration Parameters</title>

<screen>-D<co xml:id="co.auctld"/>
-b 8192<co xml:id="co.auctlb"/>
-f 2<co xml:id="co.auctlf"/></screen>

  <calloutlist>
   <callout arearefs="co.auctld">
    <para>
     Delete any preexisting rules before starting to define new ones.
    </para>
   </callout>
   <callout arearefs="co.auctlb">
    <para>
     Set the number of buffers to take the audit messages. Depending on the
     level of audit logging on your system, increase or decrease this
     figure.
    </para>
   </callout>
   <callout arearefs="co.auctlf">
    <para>
     Set the failure flag to use when the kernel needs to handle critical
     errors. Possible values are <literal>0</literal> (silent),
     <literal>1</literal> (printk, print a failure message), and
     <literal>2</literal> (panic, halt the system).
    </para>
   </callout>
  </calloutlist>

  <para>
   By emptying the rule queue with the <option>-D</option> option, you make
   sure that audit does not use any other rule set than what you are
   offering it by means of this file. Choosing an appropriate buffer number
   (<option>-b</option>) is vital to avoid having your system fail because
   of too high an audit load. Choosing the panic failure flag <option>-f
   2</option> ensures that your audit records are complete even if the
   system is encountering critical errors. By shutting down the system on a
   critical error, audit makes sure that no process escapes from its control
   as it otherwise might if level 1 (<option>printk</option>) were chosen.
  </para>

  <important>
   <title>Choosing the Failure Flag</title>
   <para>
    Before using your audit rule set on a live system, make sure that the
    setup has been thoroughly evaluated on test systems using the
    <emphasis>worst case production workload</emphasis>. It is even more
    critical that you do this when specifying the <option>-f 2</option>
    flag, because this instructs the kernel to panic (perform an immediate
    halt without flushing pending data to disk) if any thresholds are
    exceeded. Consider the use of the <option>-f 2</option> flag for only
    the most security-conscious environments.
   </para>
  </important>
 </sect1>
 <sect1 xml:id="sec.audit.scenauconf">
  <title>Adding Watches on Audit Log Files and Configuration Files</title>

  <para>
   Adding watches on your audit configuration files and the log files
   themselves ensures that you can track any attempt to tamper with the
   configuration files or detect any attempted accesses to the log files.
  </para>

  <note>
   <title>Creating Directory and File Watches</title>
   <para>
    Creating watches on a directory is not necessarily sufficient if you
    need events for file access. Events on directory access are only
    triggered when the directory's inode is updated with metadata changes.
    To trigger events on file access, add watches for each file
    to monitor.
   </para>
  </note>

<screen>-w /var/log/audit/ <co xml:id="co.auctllog"/>
-w /var/log/audit/audit.log 

-w /var/log/audit/audit_log.1 
-w /var/log/audit/audit_log.2 
-w /var/log/audit/audit_log.3 
-w /var/log/audit/audit_log.4 

-w /etc/audit/auditd.conf -p wa<co xml:id="co.auctlconf"/>
-w /etc/audit/audit.rules -p wa
-w /etc/libaudit.conf -p wa</screen>

  <calloutlist>
   <callout arearefs="co.auctllog">
    <para>
     Set a watch on the directory where the audit log is located. Trigger an
     event for any type of access attempt to this directory. If you are
     using log rotation, add watches for the rotated logs as well.
    </para>
   </callout>
   <callout arearefs="co.auctlconf">
    <para>
     Set a watch on an audit configuration file. Log all write and attribute
     change attempts to this file.
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec.audit.scenfs">
  <title>Monitoring File System Objects</title>

  <para>
   Auditing system calls helps track your system's activity well beyond the
   application level. By tracking file system&ndash;related system calls,
   get an idea of how your applications are using these system calls and
   determine whether that use is appropriate. By tracking mount and unmount
   operations, track the use of external resources (removable media, remote
   file systems, etc.).
  </para>

  <important>
   <title>Auditing System Calls</title>
   <para>
    Auditing system calls results in a high logging activity. This activity,
    in turn, puts a heavy load on the kernel. With a kernel less responsive
    than usual, the system's backlog and rate limits might be exceeded.
    Carefully evaluate which system calls to include in your audit rule set
    and adjust the log settings accordingly. See
    <xref linkend="sec.audit.auditd"/> for details on how to tweak the
    relevant settings.
   </para>
  </important>

<screen>-a entry,always -S chmod -S fchmod -S chown -S chown32 -S fchown -S fchown32 -S lchown -S lchown32<co xml:id="co.auctlfso"/>

-a entry,always -S creat -S open -S truncate -S truncate64 -S ftruncate -S ftruncate64<co xml:id="co.auctlmod"/>

-a entry,always -S mkdir -S rmdir<co xml:id="co.auctlfsdir"/>

-a entry,always -S unlink -S rename -S link -S symlink<co xml:id="co.auctlfsmov"/>

-a entry,always -S setxattr<co xml:id="co.auctlfsea"/>
-a entry,always -S lsetxattr
-a entry,always -S fsetxattr
-a entry,always -S removexattr
-a entry,always -S lremovexattr
-a entry,always -S fremovexattr

-a entry,always -S mknod<co xml:id="co.auctlfssf"/>

-a entry,always -S mount -S umount -S umount2<co xml:id="co.auctlfsfso"/></screen>

  <calloutlist>
   <callout arearefs="co.auctlfso">
    <para>
     Enable an audit context for system calls related to changing file
     ownership and permissions. Depending on the hardware architecture of
     your system, enable or disable the <literal>*32</literal> rules. 64-bit
     systems, like &x86-64;, require the <literal>*32</literal> rules
     to be removed.
    </para>
   </callout>
   <callout arearefs="co.auctlmod">
    <para>
     Enable an audit context for system calls related to file content
     modification. Depending on the hardware architecture of your system,
     enable or disable the *64 rules. 64-bit systems, like &x86-64;,
     require the *64 rules to be removed.
    </para>
   </callout>
   <callout arearefs="co.auctlfsdir">
    <para>
     Enable an audit context for any directory operation, like creating or
     removing a directory.
    </para>
   </callout>
   <callout arearefs="co.auctlfsmov">
    <para>
     Enable an audit context for any linking operation, such as creating a
     symbolic link, creating a link, unlinking, or renaming.
    </para>
   </callout>
   <callout arearefs="co.auctlfsea">
    <para>
     Enable an audit context for any operation related to extended file
     system attributes.
    </para>
   </callout>
   <callout arearefs="co.auctlfssf">
    <para>
     Enable an audit context for the <command>mknod</command> system call,
     which creates special (device) files.
    </para>
   </callout>
   <callout arearefs="co.auctlfsfso">
    <para>
     Enable an audit context for any mount or umount operation. For the
     &x86; architecture, disable the <literal>umount</literal> rule. For
     the &intel64; architecture, disable the <literal>umount2</literal> rule.
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec.audit.scensecurity">
  <title>Monitoring Security Configuration Files and Databases</title>

  <para>
   To make sure that your system is not made to do undesired things, track
   any attempts to change the <systemitem>cron</systemitem> and
   <systemitem>at</systemitem> configurations or the lists of scheduled
   jobs. Tracking any write access to the user, group, password and login
   databases and logs helps you identify any attempts to manipulate your
   system's user database.
  </para>

  <para>
   Tracking changes to your system configuration (kernel, services, time,
   etc.) helps you spot any attempts of others to manipulate essential
   functionality of your system. Changes to the PAM configuration should
   also be monitored in a secure environment, because changes in the
   authentication stack should not be made by anyone other than the
   administrator, and it should be logged which applications are using PAM
   and how it is used. The same applies to any other configuration files
   related to secure authentication and communication.
  </para>

<screen><co xml:id="co.audit.at"/>
-w /var/spool/atspool 
-w /etc/at.allow  
-w /etc/at.deny  

-w /etc/cron.allow -p wa 
-w /etc/cron.deny -p wa 
-w /etc/cron.d/ -p wa 
-w /etc/cron.daily/ -p wa 
-w /etc/cron.hourly/ -p wa 
-w /etc/cron.monthly/ -p wa 
-w /etc/cron.weekly/ -p wa 
-w /etc/crontab -p wa
-w /var/spool/cron/root 

<co xml:id="co.audit.security"/>
-w /etc/group -p wa 
-w /etc/passwd -p wa 
-w /etc/shadow 

-w /etc/login.defs -p wa 
-w /etc/securetty 
-w /var/log/lastlog 

<co xml:id="co.audit.nw"/>
-w /etc/hosts -p wa 
-w /etc/sysconfig/
w /etc/init.d/
w /etc/ld.so.conf -p wa
w /etc/localtime -p wa 
w /etc/sysctl.conf -p wa 
w /etc/modprobe.d/
w /etc/modprobe.conf.local -p wa 
w /etc/modprobe.conf -p wa 
<co xml:id="co.audit.pam"/>
w /etc/pam.d/
<co xml:id="co.audit.pfix"/>
-w /etc/aliases -p wa
-w /etc/postfix/ -p wa 

<co xml:id="co.audit.ssh"/>
-w /etc/ssh/sshd_config

-w /etc/stunnel/stunnel.conf 
-w /etc/stunnel/stunnel.pem

-w /etc/vsftpd.ftpusers
-w /etc/vsftpd.conf

<co xml:id="co.audit.misc"/>
-a exit,always -S sethostname
-w /etc/issue -p wa
-w /etc/issue.net -p wa</screen>

  <calloutlist>
   <callout arearefs="co.audit.at">
    <para>
     Set watches on the <systemitem>at</systemitem> and
     <systemitem>cron</systemitem> configuration and the scheduled jobs and
     assign labels to these events.
    </para>
    <remark>jsegitz 2014-07-23: no labels get assigned</remark>
   </callout>
   <callout arearefs="co.audit.security">
    <para>
     Set watches on the user, group, password, and login databases and logs
     and set labels to better identify any login-related events, such as
     failed login attempts.
    </para>
   </callout>
   <callout arearefs="co.audit.nw">
    <para>
     Set a watch and a label on the static host name configuration in
     <filename>/etc/hosts</filename>. Track changes to the system
     configuration directory, <filename>/etc/sysconfig</filename>. Enable
     per-file watches if you are interested in file events. Set watches and
     labels for changes to the boot configuration in
<!--taroth 2014-03-07: /etc/inittab no longer exists: 
      <filename>/etc/inittab</filename> and-->
     the <filename>/etc/init.d</filename> directory. Enable per-file watches
     if you are interested in file events. Set watches and labels for any
     changes to the linker configuration in
     <filename>/etc/ld.so.conf</filename>. Set watches and a label for
     <filename>/etc/localtime</filename>. Set watches and labels for the
     kernel configuration files <filename>/etc/sysctl.conf</filename>,
     <filename>/etc/modprobe.d/</filename>,
     <filename>/etc/modprobe.conf.local</filename>, and
     <filename>/etc/modprobe.conf</filename>.
    </para>
   </callout>
   <callout arearefs="co.audit.pam">
    <para>
     Set watches on the PAM configuration directory. If you are interested
     in particular files below the directory level, add explicit watches to
     these files as well.
    </para>
   </callout>
   <callout arearefs="co.audit.pfix">
    <para>
     Set watches to the postfix configuration to log any write attempt or
     attribute change and use labels for better tracking in the logs.
    </para>
   </callout>
   <callout arearefs="co.audit.ssh">
    <para>
     Set watches and labels on the <command>SSH</command>,
     <command>stunnel</command>, and <command>vsftpd</command> configuration
     files.
    </para>
   </callout>
   <callout arearefs="co.audit.misc">
    <para>
     Perform an audit of the <command>sethostname</command> system call and
     set watches and labels on the system identification configuration in
     <filename>/etc/issue</filename> and
     <filename>/etc/issue.net</filename>.
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec.audit.scenmisc">
  <title>Monitoring Miscellaneous System Calls</title>

  <para>
   Apart from auditing file system related system calls, as described in
   <xref linkend="sec.audit.scenfs"/>, you can also track various other
   system calls. Tracking task creation helps you understand your
   applications' behavior. Auditing the <systemitem>umask</systemitem>
   system call lets you track how processes modify creation mask. Tracking
   any attempts to change the system time helps you identify anyone or any
   process trying to manipulate the system time.
  </para>

<screen><co xml:id="co.audit.attrib"/>
-a entry,always -S clone -S fork -S vfork

<co xml:id="co.audit.umask"/>
-a entry,always -S umask

<co xml:id="co.audit.time"/>
-a entry,always -S adjtimex -S settimeofday</screen>

  <calloutlist>
   <callout arearefs="co.audit.attrib">
    <para>
     Track task creation.
    </para>
   </callout>
   <callout arearefs="co.audit.umask">
    <para>
     Add an audit context to the umask system call.
    </para>
   </callout>
   <callout arearefs="co.audit.time">
    <para>
     Track attempts to change the system time. <literal>adjtimex</literal>
     can be used to skew the time. <literal>settimeofday</literal> sets the
     absolute time.
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec.audit.scenipc">
  <title>Filtering System Call Arguments</title>

  <para>
   In addition to the system call auditing introduced in
   <xref linkend="sec.audit.scenfs"/> and
   <xref linkend="sec.audit.scenmisc"/>, you can track application behavior
   to an even higher degree. Applying filters helps you focus audit on areas
   of primary interest to you. This section introduces filtering system call
   arguments for non-multiplexed system calls like access and for
   multiplexed ones like socketcall or ipc. Whether system calls are
   multiplexed depends on the hardware architecture used. Both socketcall
   and ipc are not multiplexed on 64-bit architectures, such as &x86-64;.
  </para>

  <important>
   <title>Auditing System Calls</title>
   <para>
    Auditing system calls results in high logging activity, which in turn
    puts a heavy load on the kernel. With a kernel less responsive than
    usual, the system's backlog and rate limits might well be exceeded.
    Carefully evaluate which system calls to include in your audit rule set
    and adjust the log settings accordingly. See
    <xref linkend="sec.audit.auditd"/> for details on how to tweak the
    relevant settings.
   </para>
  </important>

  <para>
   The access system call checks whether a process would be allowed to read,
   write or test for the existence of a file or file system object. Using
   the <option>-F</option> filter flag, build rules matching specific access
   calls in the format<option>-F
   a1=<replaceable>access_mode</replaceable></option>. Check
   <filename>/usr/include/fcntl.h</filename> for a list of possible
   arguments to the access system call.
  </para>

<screen>-a entry,always -S access -F a1=4<co xml:id="co.audit.accessr"/>
-a entry,always -S access -F a1=6<co xml:id="co.audit.accessrw"/>
-a entry,always -S access -F a1=7<co xml:id="co.audit.accessrwx"/></screen>

  <calloutlist>
   <callout arearefs="co.audit.accessr">
    <para>
     Audit the access system call, but only if the second argument of the
     system call (<literal>mode</literal>) is <literal>4</literal>
     (<literal>R_OK</literal>). This rule filters for all access calls
     testing for sufficient read permissions to a file or file system object
     accessed by a user or process.
    </para>
   </callout>
   <callout arearefs="co.audit.accessrw">
    <para>
     Audit the access system call, but only if the second argument of the
     system call (<literal>mode</literal>) is <literal>6</literal>, meaning
     <literal>4 OR 2</literal>, which translates to <literal>R_OK OR
     W_OK</literal>. This rule filters for access calls testing for
     sufficient read and write permissions.
    </para>
   </callout>
   <callout arearefs="co.audit.accessrwx">
    <para>
     Audit the access system call, but only if the second argument of the
     system call (<literal>mode</literal>) is <literal>7</literal>, meaning
     <literal>4 OR 2 OR 1</literal>, which translates to <literal>R_OK OR
     W_OK OR X_OK</literal>. This rule filters for access calls testing for
     sufficient read, write, and execute permissions.
    </para>
   </callout>
  </calloutlist>

  <para>
   The socketcall system call is a multiplexed system call. Multiplexed
   means that there is only one system call for all possible calls and that
   libc passes the actual system call to use as the first argument
   (<literal>a0</literal>). Check the manual page of socketcall for possible
   system calls and refer to
   <filename>/usr/src/linux/include/linux/net.h</filename> for a list of
   possible argument values and system call names. Audit supports filtering
   for specific system calls using a <option>-F
   a0=<replaceable>syscall_number</replaceable></option>.
  </para>

<screen>-a entry,always -S socketcall -F a0=1 -F a1=10<co xml:id="co.audit.socket1"/>
## Use this line on x86_64, ia64 instead
#-a entry,always -S socket -F a0=10

-a entry,always -S socketcall -F a0=5<co xml:id="co.audit.socket2"/>
## Use this line on x86_64, ia64 instead
#-a entry, always -S accept</screen>

  <calloutlist>
   <callout arearefs="co.audit.socket1">
    <para>
     Audit the socket(PF_INET6) system call. The <option>-F a0=1</option>
     filter matches all socket system calls and the <option>-F
     a1=10</option> filter narrows the matches down to socket system calls
     carrying the IPv6 protocol family domain parameter (PF_INET6). Check
     <filename>/usr/include/linux/net.h</filename> for the first argument
     (<literal>a0</literal>) and
     <filename>/usr/src/linux/include/linux/socket.h</filename> for the
     second parameter (<literal>a1</literal>). 64-bit platforms, like
     &x86-64;, do not use multiplexing on socketcall system calls. For
     these 
     platforms, comment the rule and add the plain system call rules with a
     filter on PF_INET6.
    </para>
   </callout>
   <callout arearefs="co.audit.socket2">
    <para>
     Audit the socketcall system call. The filter flag is set to filter for
     <option>a0=5</option> as the first argument to socketcall, which
     translates to the accept system call if you check
     <filename>/usr/include/linux/net.h</filename>. 64-bit platforms, like
     &x86-64;, do not use multiplexing on socketcall system calls.
     For these platforms, comment the rule and add the plain system call
     rule without argument filtering.
    </para>
   </callout>
  </calloutlist>

  <para>
   The ipc system call is another example of multiplexed system calls. The
   actual call to invoke is determined by the first argument passed to the
   ipc system call. Filtering for these arguments helps you focus on those
   IPC calls of interest to you. Check
   <filename>/usr/include/linux/ipc.h</filename> for possible argument
   values.
  </para>

<screen><co xml:id="co.audit.mqueue"/>
## msgctl
-a entry,always -S ipc -F a0=14
## msgget
-a entry,always -S ipc -F a0=13
## Use these lines on x86_64, ia64 instead
#-a entry,always -S msgctl
#-a entry,always -S msgget

<co xml:id="co.audit.semaph"/>
## semctl
-a entry,always -S ipc -F a0=3
## semget
-a entry,always -S ipc -F a0=2
## semop
-a entry,always -S ipc -F a0=1
## semtimedop
-a entry,always -S ipc -F a0=4
## Use these lines on x86_64, ia64 instead
#-a entry,always -S semctl
#-a entry,always -S semget
#-a entry,always -S semop
#-a entry,always -S semtimedop

<co xml:id="co.audit.sharedmem"/>
## shmctl
-a entry,always -S ipc -F a0=24
## shmget
-a entry,always -S ipc -F a0=23
## Use these lines on x86_64, ia64 instead
#-a entry,always -S shmctl
#-a entry,always -S shmget</screen>

  <calloutlist>
   <callout arearefs="co.audit.mqueue">
    <para>
     Audit system calls related to IPC SYSV message queues. In this case,
     the <literal>a0</literal> values specify that auditing is added for the
     msgctl and msgget system calls (<literal>14</literal> and
     <literal>13</literal>). 64-bit platforms, like &x86-64;, do not
     use multiplexing on ipc system calls. For these platforms, comment the
     first two rules and add the plain system call rules without argument
     filtering.
    </para>
   </callout>
   <callout arearefs="co.audit.semaph">
    <para>
     Audit system calls related to IPC SYSV message semaphores. In this
     case, the <literal>a0</literal> values specify that auditing is added
     for the semctl, semget, semop, and semtimedop system calls
     (<literal>3</literal>, <literal>2</literal>, <literal>1</literal>, and
     <literal>4</literal>). 64-bit platforms, like &x86-64;, do not
     use multiplexing on ipc system calls. For these platforms, comment the
     first four rules and add the plain system call rules without argument
     filtering.
    </para>
   </callout>
   <callout arearefs="co.audit.sharedmem">
    <para>
     Audit system calls related to IPC SYSV shared memory. In this case, the
     <literal>a0</literal> values specify that auditing is added for the
     shmctl and shmget system calls (<literal>24</literal>,
     <literal>23</literal>). 64-bit platforms, like &x86-64;, do not
     use multiplexing on ipc system calls. For these platforms, comment the
     first two rules and add the plain system call rules without argument
     filtering.
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec.audit.scenkeys">
  <title>Managing Audit Event Records Using Keys</title>

  <para>
   After configuring a few rules generating events and populating the logs,
   you need to find a way to tell one event from the other. Using the
   <command>ausearch</command> command, you can filter the logs for various
   criteria. Using <command>ausearch</command> <option>-m
   <replaceable>message_type</replaceable></option>, you can at least filter
   for events of a certain type. However, to be able to filter for events
   related to a particular rule, you need to add a key to this rule in the
   <filename>/etc/audit/audit.rules</filename> file. This key is then added
   to the event record every time the rule logs an event. To retrieve these
   log entries, simply run <command>ausearch</command> <option>-k
   <replaceable>your_key</replaceable></option> to get a list of records
   related to the rule carrying this particular key.
  </para>

  <para>
   As an example, assume you have added the following rule to your rule
   file:
  </para>

<screen>-w /etc/audit/audit.rules -p wa</screen>

  <para>
   Without a key assigned to it, you would probably need to filter for
   <literal>SYSCALL</literal> or <literal>PATH</literal> events then use
   grep or similar tools to isolate any events related to the above rule.
   Now, add a key to the above rule, using the <option>-k</option> option:
  </para>

<screen>-w /etc/audit/audit.rules -p wa -k CFG_audit.rules</screen>

  <para>
   You can specify any text string as key. Distinguish watches related to
   different types of files (configuration files or log files) from one
   another using different key prefixes (<literal>CFG</literal>,
   <literal>LOG</literal>, etc.) followed by the file name. Finding any
   records related to the above rule now comes down to the following:
  </para>

<screen><command>ausearch -k CFG_audit.rules</command>
----
time-&gt;Thu Feb 19 09:09:54 2009
type=PATH msg=audit(1235030994.032:8649): item=3 name="audit.rules~" inode=370603 dev=08:06 mode=0100640 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=2 name="audit.rules" inode=370603 dev=08:06 mode=0100640 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=1  name="/etc/audit" inode=368599 dev=08:06 mode=040750 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=0  name="/etc/audit" inode=368599 dev=08:06 mode=040750 ouid=0 ogid=0 rdev=00:00
type=CWD msg=audit(1235030994.032:8649):  cwd="/etc/audit"
type=SYSCALL msg=audit(1235030994.032:8649): arch=c000003e syscall=82 success=yes exit=0 a0=7deeb0 a1=883b30 a2=2 a3=ffffffffffffffff items=4 ppid=25400 pid=32619 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1164 comm="vim" exe="/bin/vim-normal" key="CFG_audit.rules"</screen>
 </sect1>
</chapter>
