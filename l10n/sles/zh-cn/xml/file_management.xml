<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="file_management.xml" version="5.0" role="General" xml:id="sec-sec-file-management">
 <title>文件管理</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <sect1 xml:id="sec-sec-prot-general-partitions">
   <title>磁盘分区</title>

   <para>
    服务器至少应该具有以下独立文件系统：<filename>/</filename>、<filename>/boot</filename>、<filename>/usr</filename>、<filename>/var</filename>、<filename>/tmp</filename> 和 <filename>/home</filename>。如此可避免一些问题，例如，避免 <filename>/var</filename> 和 <filename>/tmp</filename> 下的日志记录空间和临时空间填满根分区。第三方应用程序也应位于独立的文件系统，例如在 <filename>/opt</filename> 下。
   </para>

   <para>
    独立文件系统的另一项优势是可以选择只适合文件系统层次结构中某些区域的特殊挂载选项。一些相关的挂载选项包括：
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>noexec</literal>：阻止文件执行。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nodev</literal>：阻止使用字符或块特殊设备。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nosuid</literal>：阻止 <literal>set-user-ID</literal> 或 <literal>set-group-ID</literal> 位生效。
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ro</literal>：以<literal>只读</literal>方式挂载文件系统。
     </para>
    </listitem>
   </itemizedlist>

   <para>
    在对分区挂载应用上述选项之前，需要仔细考虑每个选项。否则应用程序可能会停止工作，或者可能会违反支持状态。如果正确应用，挂载选项有助于抵御某些类型的安全攻击或避免错误配置。例如，无需将 <literal>set-user-ID</literal> 二进制文件置于 <filename>/tmp</filename> 中。
   </para>

   <para>
    建议您查看<xref linkend="cha-common-criteria"/>。请务必了解是否需要将可能影响运行中系统的分区进行分隔（例如，日志文件会填满 <filename>/var/log</filename>，因此有必要将 <filename>/var</filename> 从 <filename>/</filename> 分区分隔出来）。另一个注意事项是您可能需要利用 LVM 或其他卷管理器，或者至少是扩展分区类型，来解决 PC 类系统上的四个主分区的限制。
   </para>

   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的另一项功能是将分区甚至是充当容器的单个目录或文件进行加密。有关详细信息，请参见<xref linkend="cha-security-cryptofs"/>。
   </para>
  </sect1>

 <sect1 xml:id="sec-sec-prot-general-file-permissions">
  <title>修改特定系统文件的权限</title>

  <para>
   许多文件（尤其是 <filename>/etc</filename> 目录中的文件）是全局可读的，即，非特权用户也可以读取其内容。通常这不会造成问题，但如果您想要采取额外保护的话，可以去除敏感文件的全局可读或组可读位。
  </para>

  <para>
   SUSE Linux Enterprise 提供 <package>permissions</package> 软件包以便于应用文件权限。该软件包附带三个预定义的系统配置文件：
  </para>

  <variablelist>
   <varlistentry>
    <term>easy</term>
    <listitem>
     <para>
      该配置文件适用于需要用户友好的图形用户交互的系统。这是默认的配置文件。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>secure</term>
    <listitem>
     <para>
      该配置文件适用于没有完全成熟的图形用户界面的服务器系统。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>paranoid</term>
    <listitem>
     <para>
      该配置文件可以实现最高安全性。在 <literal>secure</literal> 配置文件的基础上，它还去除了<emphasis>所有</emphasis>特殊权限，例如 setuid/setgid 和功能位。
     </para>

     <warning>
      <title>非特权用户无法使用的系统</title>
      <para>
       除了更改口令等简单任务外，非特权用户可能无法使用没有特殊权限的系统。
      </para>
      <para>
       请不要按原样使用 <literal>paranoid</literal> 配置文件，而是将它用作自定义权限的模板。可以在 <filename>permissions.paranoid</filename> 文件中找到详细信息。
      </para>
     </warning>

    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   要自定义文件权限，请编辑 <filename>/etc/permissions.local</filename>，或者在 <filename>/etc/permissions.d/</filename> 目录中创建一个插入式文件。
  </para>

  <screen># Additional custom hardening
/etc/security/access.conf       root:root       0400
/etc/sysctl.conf                root:root       0400
/root/                          root:root       0700</screen>

  <para>
   第一列指定文件名；请注意，目录名称必须以斜杠结尾。第二列指定所有者和组，第三列指定模式。有关配置文件格式的详细信息，请参见 <command>man permissions</command>。
  </para>

  <para>
   在 <filename>/etc/sysconfig/security</filename> 中选择配置文件。要使用 <filename>/etc/permissions.local</filename> 中的 <literal>easy</literal> 配置文件和自定义权限，请设置：
  </para>

  <screen>PERMISSION_SECURITY="<replaceable>easy local</replaceable>"</screen>

  <para>
   要应用设置，请运行 <command>chkstat --system --set</command>。
  </para>

  <para>
   也可以在更新软件包的过程中通过 <command>zypper</command> 应用权限。还可以通过 <systemitem class="daemon">cron</systemitem> 或 <systemitem class="daemon">systemd</systemitem> 计时器定期调用 <command>chkstat</command>。
  </para>

  <important>
   <title>自定义文件权限</title>
   <para>
    虽然系统配置文件已经过全面的测试，但自定义权限可能会中断标准应用程序。SUSE 无法为这种情况提供支持。
   </para>
   <para>
    在应用自定义文件权限之前，请始终使用 <command>chkstat</command> 测试这些权限，以确保一切符合预期。
   </para>
  </important>

 </sect1>

 <sect1 xml:id="sec-sec-prot-general-home-permissions">
  <title>将主目录权限从 755 更改为 700</title>
  <para>
   默认情况下，系统上的所有用户都可以访问（读取、执行）用户主目录。这可能会导致信息泄漏，因此主目录应该只能由其所有者访问。
  </para>
  <para>
   以下命令将 <filename>/home</filename> 中所有现有主目录的权限设置为 <literal>700</literal>（只有所有者能够访问目录）：
  </para>
  <screen><prompt>&gt; </prompt><command>sudo</command> chmod 755 /home
<prompt>&gt; </prompt><command>sudo</command> for a in /home/*; do \
echo "Changing rights for directory $a"; chmod 700 ”$a”; done</screen>

  
  <para>
   为确保使用安全权限新建主目录，请编辑 <filename>/etc/login.defs</filename> 并将 <varname>HOME_MODE</varname> 设置为 <literal>700</literal>。
  </para>

  <screen># HOME_MODE is used by useradd(8) and newusers(8) to set the mode for new
# home directories.
# If HOME_MODE is not set, the value of UMASK is used to create the mode.
HOME_MODE      0700</screen>

  <para>
   如果不设置 <varname>HOME_MODE</varname>，将从默认的 umask 计算权限。请注意，<varname>HOME_MODE</varname> 指定使用的权限，而不是指定用于去除访问权限的遮罩（例如 umask）。有关 umask 的详细信息，请参见<xref linkend="sec-sec-prot-general-umask"/>。
  </para>

  <para>
   可以使用 <command>useradd -m testuser</command> 创建一个新用户来校验配置更改。使用 <command>ls -l /home</command> 检查目录的权限。然后，去除为此测试创建的用户。
  </para>
  
  <important>
   <title>测试权限更改</title>
   <para>
    不再允许用户访问其他用户的主目录。这不可能符合用户和软件的预期。
   </para>
   <para>
    在生产环境中使用此项更改之前对其进行测试，并通知受此更改影响的用户。
   </para>
  </important>
 </sect1>

  <sect1 xml:id="sec-sec-prot-general-umask">
   <title>默认的 umask</title>

   <para>
    <command>umask</command>（用户文件创建模式掩码）命令是一个外壳内置命令，决定了新建文件和目录的默认文件权限。它可被系统调用重写，但许多程序和实用程序都使用 <command>umask</command>。
   </para>

   <para>
    默认情况下，<command>umask</command> 设置为 <literal>022</literal>。如果至少设置了一个位，则将从访问模式 <literal>777</literal> 去除此 umask。
   </para>

   <para>
    要确定活动的 umask，请使用 <command>umask</command> 命令：
   </para>

<screen><prompt>&gt; </prompt>umask
022</screen>

   <para>
    使用默认的 umask，您将会看到大多数用户预期可在 Linux 系统上看到的行为。
   </para>

<screen><prompt>&gt; </prompt>touch a
<prompt>&gt; </prompt>mkdir b
<prompt>&gt; </prompt>ls -on
total 16
-rw-r--r--. 1 17086    0 Nov 29 15:05 a
drwxr-xr-x. 2 17086 4096 Nov 29 15:05 b</screen>

   <para>
    您可以指定任意 umask 值，具体取决于您的需求。
   </para>

<screen><prompt>&gt; </prompt>umask 111
<prompt>&gt; </prompt>touch c
<prompt>&gt; </prompt>mkdir d
<prompt>&gt; </prompt>ls -on
total 16
-rw-rw-rw-. 1 17086    0 Nov 29 15:05 c
drw-rw-rw-. 2 17086 4096 Nov 29 15:05 d</screen>

   <para>
    根据您的威胁模型，可以使用 <literal>037</literal> 等更严格的 umask，以防止意外的数据泄漏。
   </para>

<screen><prompt>&gt; </prompt>umask 037
<prompt>&gt; </prompt>touch e
<prompt>&gt; </prompt>mkdir f
<prompt>&gt; </prompt>ls -on
total 16
-rw-r-----. 1 17086    0 Nov 29 15:06 e
drwxr-----. 2 17086 4096 Nov 29 15:06 f</screen>

   <tip>
    <title>最高安全性</title>
    <para>
     为获得最高安全性，请使用 umask <literal>077</literal>。这会强制针对组和其他用户新建没有权限的文件和目录。
    </para>
    <para>
     请注意，这可能不符合用户和软件的预期，并可能会给支持团队带来额外的负担。
    </para>
   </tip>

   <sect2 xml:id="sec-sec-prot-general-umask-adjust">
    <title>调整默认的 umask</title>
    <para>
     可以通过更改 <filename>/etc/login.defs</filename> 中的 <varname>UMASK</varname> 值来全局修改所有用户的 umask。
    </para>

<screen># Default initial "umask" value used by login(1) on non-PAM enabled systems.
# Default "umask" value for pam_umask(8) on PAM enabled systems.
# UMASK is also used by useradd(8) and newusers(8) to set the mode for new
# home directories.
# 022 is the default value, but 027, or even 077, could be considered
# for increased privacy. There is no One True Answer here: each sysadmin
# must make up their mind.
UMASK           022</screen>

    <para>
     对于单个用户，将 umask 添加到 <filename>/etc/passwd</filename> 中的“gecos”字段，如下所示：
    </para>
<screen>tux:x:1000:100:Tux Linux,UMASK=<replaceable>022</replaceable>:/home/tux:/bin/bash</screen>
    <para>
     对于 <command>yast 用户</command>，可以通过将 <literal>UMASK=<replaceable>022</replaceable></literal> 添加到用户的<menuchoice><guimenu>细节</guimenu> <guimenu>附加用户信息</guimenu></menuchoice>来实现相同的目的。
    </para>
    <para>
     <filename>/Etc/login.defs</filename> 和 <filename>/etc/passwd</filename> 中的设置由 PAM 模块 <filename>pam_umask.so</filename> 应用。有关其他配置选项，请参见 <command>man pam_umask</command>。
    </para>
    <para>
     要使更改生效，用户需要注销并重新登录。然后，使用 <command>umask</command> 命令校验是否正确设置了 umask。
    </para>

   </sect2>

  </sect1>

 <sect1 xml:id="sec-sec-prot-general-s-bit">
   <title>SUID/SGID 文件</title>

   <para>
    如果在可执行文件上设置 SUID（设置用户 ID）位或 SGID（设置组 ID）位，它会以可执行文件拥有者的 UID 或 GID 来执行，而不是以执行人员的 UID 或 GID 来执行。举例来说，这意味着会以 <systemitem class="username">root</systemitem> 的 UID 执行设置了 SUID 位且由 <systemitem class="username">root</systemitem> 拥有的所有可执行文件。<command>passwd</command> 命令就是一个典型的示例，它允许普通用户更新由 <systemitem class="username">root</systemitem> 拥有的 <filename>/etc/shadow</filename> 文件中的口令字段。
   </para>

   <para>
    但当可执行文件存在安全漏洞时，SUID/SGID 位可能会被滥用。因此，您应该搜索并记录整个系统中的 SUID/SGID 可执行文件。要搜索整个系统中的 SUID 或 SGID 文件，您可以运行以下命令：
   </para>

<screen><prompt role="root"># </prompt>find /bin /boot /etc /home /lib /lib64 /opt /root /sbin \
  /srv /tmp /usr /var -type f -perm '/6000' -ls</screen>

   <para>
    如果您有其他文件系统结构，则需要扩展搜索的目录列表。
   </para>


   <para>
    SUSE 仅在确实需要时才会在二进制文件上设置 SUID/SGID 位。不是绝对必要的情况下，请确保代码开发人员未在其程序上设置 SUID/SGID 位。通常，您可以使用诸如去除世界/其他可执行文件位等解决方法。但更好的方法是更改软件设计或使用权限。
   </para>

   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 支持文件权限，可授予程序更精细的特权，而不是 <systemitem class="username">root</systemitem> 的全部权限：
   </para>

<screen><prompt role="root"># </prompt>getcap -v /usr/bin/ping
/usr/bin/ping = cap_new_raw+eip</screen>

   <para>
    以上命令只会为执行 <command>ping</command> 的人员授予 <literal>CAP_NET_RAW</literal> 权限。如果 <command>ping</command> 的内部存在漏洞，攻击者最多可以获得此权限，而不是 <systemitem class="username">root</systemitem> 的全部权限。可能的情况下，应选择文件权限以支持 SUID 位。但仅当二进制文件的 SUID 设置为 <systemitem class="username">root</systemitem>，而不是其他 <literal>news</literal>、<literal>lp</literal> 等类似用户时，这一条才适用。
   </para>

  </sect1>

  <sect1 xml:id="sec-sec-prot-general-world-writable-files">
   <title>全局可写文件</title>

   <para>
    全局可写文件存在安全风险，因为系统上的任何用户都可以对其进行修改。此外，全局可写目录允许任何人添加或删除文件。要查找全局可写文件和目录，您可以使用以下命令：
   </para>

<screen><prompt role="root"># </prompt>find /bin /boot /etc /home /lib /lib64 /opt /root /sbin \
  /srv /tmp /usr /var -type f -perm -2 ! -type l -ls</screen>

   <para>
   如果您有其他文件系统结构，则需要扩展搜索的目录列表。
   </para>

   <para>
    <option>! -type l</option> 参数可跳过所有符号链接，因为符号链接始终为全局可写。但只要链接的目标不是全局可写（由上述查找命令进行检查），就不会发生问题。
   </para>

   <para>
    带有粘滞位的全局可写目录（例如 <filename>/tmp</filename> 目录）不允许任何人（文件拥有者除外）在此目录中执行文件删除或重命名操作。粘滞位使文件与其创建用户相关联，可防止其他用户删除或重命名这些文件。因此，带有粘滞位的全局可写目录通常都不会发生问题，具体视目录的用途而定。例如 <filename>/tmp</filename> 目录：
   </para>

<screen><prompt>&gt; </prompt>ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>

   <para>
    输出中的 <literal>t</literal> 模式位表示粘滞位。
   </para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-orphaned">
   <title>孤立文件或无拥有者的文件</title>

   <para>
    未被任何用户或组拥有的文件本身不一定会发生安全问题。但无拥有者的文件可能会在将来发生安全问题。例如，如果创建了新用户，并且该新用户获得的 UID 刚好与无拥有者文件的 UID 相同，则该新用户将自动成为这些文件的拥有者。
   </para>

   <para>
    要查找未被任何用户或组拥有的文件，请使用以下命令：
   </para>

    <screen><prompt role="root"># </prompt>find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -nouser -o -nogroup</screen>

   <para>
   如果您有其他文件系统结构，则需要扩展搜索的目录列表。
   </para>

   <para>
    另一个问题是某些文件不是通过打包系统安装的，因而不会收到更新。您可以使用以下命令检查此类文件：
   </para>

   <screen><prompt>&gt; </prompt>find /bin /lib /lib64 /usr -path /usr/local -prune -o -type f -a -exec /bin/sh -c "rpm -qf {} &amp;&gt; /dev/null || echo {}" \;</screen>

   <para>
    因为经过设计的文件名可能会导致命令执行，会以不可信用户（例如“没有任何用户”）运行此命令。这不应成为一个问题，因为这些目录只能由 <systemitem class="username">root</systemitem> 进行写入，但仍不失为一项良好的安全预防措施。
   </para>

   <para>
    这将会显示 <filename>/bin</filename>、<filename>/lib</filename>、<filename>/lib64</filename> 和 <filename>/usr</filename>（<filename>/usr/local</filename> 中的文件除外）下软件包管理器未跟踪的所有文件。这些文件可能不代表安全问题，但您应注意未跟踪的文件，并执行必要的预防措施确保这些文件是最新的。
   </para>
  </sect1>
</chapter>
