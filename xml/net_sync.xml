<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--
  TODO for 11.2: Maybe add csync utility into this chapter?

  Add section about csync (http://www.csync.org) from Andreas Schneider (anschneider)
  First announced at opensuse-announce mailinglist 08. January 2008 by Zonker.

  From the announcement:
  »[...] As mobile computing becomes more and more important, file
  synchronization is more important than ever. Our jobs often require
  working not only on multiple computers, but in multiple locations, and
  disconnected from our networks. To help solve this problem, we need
  effective strategies for replication of user data and files.

  csync is a bidirectional file synchronizer for Linux and allows to
  keep two copies of files and directories in sync. It uses uses widely
  adopted protocols like smb or sftp so that there is no need for a
  server component of csync. It is a user-level program which means
  there is no need to be a superuser. With pam_csync it is possible to
  create roaming home directories.
  [...]«

-->
<chapter version="5.0" xml:id="cha.net.sync"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>File Synchronization with RSync</title>
 <info>
  <abstract>
   <para>
    These days, many people use several computers&mdash;one computer at home,
    one or several computers at the workplace, and possibly a laptop, tablet,
    or a smartphone on the road. Many files are needed on all these computers.
    You should be able to work with all computers and modify the files so that
    you have the latest version of the data available on all computers.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <sect1 xml:id="sec.net.sync.soft">
  <title>Available Data Synchronization Software</title>

  <para>
   Data synchronization is no problem for computers that are permanently linked
   by means of a fast network. In this case, use a network file system, like
   NFS, and store the files on a server, enabling all hosts to access the same
   data via the network. This approach is impossible if the network connection
   is poor or not permanent. When you are on the road with a laptop, copies of
   all needed files must be on the local hard disk. However, it is then
   necessary to synchronize modified files. When you modify a file on one
   computer, make sure a copy of the file is updated on all other computers.
   For occasional copies, this can be done manually with scp or rsync. However,
   if many files are involved, the procedure can be complicated and requires
   great care to avoid errors, such as overwriting a new file with an old file.
  </para>

  <warning>
   <title>Risk of Data Loss</title>
   <para>
    Before you start managing your data with a synchronization system, you
    should be well acquainted with the program used and test its functionality.
    A backup is indispensable for important files.
   </para>
  </warning>

  <para>
   The time-consuming and error-prone task of manually synchronizing data can
   be avoided by using one of the programs that use various methods to automate
   this job. The following summaries are merely intended to convey a general
   understanding of how these programs work and how they can be used. If you
   plan to use them, read the program documentation.
  </para>

  <para>
<!-- http://doccomments.provo.novell.com/comments/28800 -->
   These days file synchronization can also be done with a cloud computing
   solution.
  </para>


  <sect2 xml:id="sec.net.sync.soft.rsync">
   <title>rsync</title>
   <para>
    When no version control is needed but large directory structures need to be
    synchronized over slow network connections, the tool rsync offers
    well-developed mechanisms for transmitting only changes within files. This
    not only applies to text files, but also binary files. To detect the
    differences between files, rsync subdivides the files into blocks and
    computes check sums over them.
   </para>
   <para>
    The effort put into the detection of the changes comes at a price. The
    systems to synchronize should be scaled generously for the usage of rsync.
    RAM is especially important.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.net.sync.rsync">
  <title>Introduction to rsync</title>
  <para>
   rsync is useful when large amounts of data need to be transmitted regularly
   while not changing too much. This is, for example, often the case when
   creating backups. Another application concerns staging servers. These are
   servers that store complete directory trees of Web servers that are
   regularly mirrored onto a Web server in a DMZ.
  </para>

  <sect2 xml:id="sec.net.sync.rsync.usage">
   <title>Configuration and Operation</title>
   <para>
    rsync can be operated in two different modes. It can be used to archive or
    copy data. To accomplish this, only a remote shell, like SSH, is required
    on the target system. However, rsync can also be used as a daemon to
    provide directories to the network.
   </para>
   <para>
    The basic mode of operation of rsync does not require any special
    configuration. rsync directly allows mirroring complete directories onto
    another system. As an example, the following command creates a backup of
    the home directory of &exampleuser; on a backup server named
    &exampleserver;:
   </para>
<screen>rsync -baz -e ssh<!--
   --> /home/&exampleuser_plain;/ &exampleuser_plain;@&exampleserver;:backup</screen>
   <para>
    The following command is used to play the directory back:
   </para>
<screen>rsync -az -e ssh<!--
   --> &exampleuser_plain;@&exampleserver;:backup /home/&exampleuser_plain;/</screen>
   <para>
    Up to this point, the handling does not differ much from that of a regular
    copying tool, like scp.
   </para>
   <para>
    rsync should be operated in <quote>rsync</quote> mode to make all its
    features fully available. This is done by starting the rsyncd daemon on one
    of the systems. Configure it in the file
    <filename>/etc/rsyncd.conf</filename>. For example, to make the directory
    <filename>/srv/ftp</filename> available with rsync, use the following
    configuration:
   </para>
<screen>gid = nobody
uid = nobody
read only = true
use chroot = no
transfer logging = true
log format = %h %o %f %l %b
log file = /var/log/rsyncd.log

[FTP]
        path = /srv/ftp
        comment = An Example</screen>
   <para>
    Then start rsyncd with <command>systemctl start rsyncd</command>. rsyncd
    can also be started automatically during the boot process. Set this up by
    activating this service in the &yast; <guimenu>Services Manager</guimenu>
    or by manually entering the command:
   </para>
<screen>&prompt.root; systemctl enable rsyncd</screen>
   <para>
<!--<remark>taroth 2014-02-25: systemd - what about xinetd? is this
    still valid?</remark> - taroth 2014-03-17: for the records, here fcrozat's
    answer: xinetd is still there (although systemd can provide similar  functionalities
    but the configuration is different)
   -->
    syncd can alternatively be started by xinetd. This is, however, only
    recommended for servers that rarely use rsyncd.
   </para>
   <para>
    The example also creates a log file listing all connections. This file is
    stored in <filename>/var/log/rsyncd.log</filename>.
   </para>
   <para>
    It is then possible to test the transfer from a client system. Do this with
    the following command:
   </para>
<screen>rsync -avz &exampleserver;::FTP</screen>
   <para>
    This command lists all files present in the directory
    <filename>/srv/ftp</filename> of the server. This request is also logged in
    the log file <filename>/var/log/rsyncd.log</filename>. To start an actual
    transfer, provide a target directory. Use <literal>.</literal> for the
    current directory. For example:
   </para>
<screen>rsync -avz &exampleserver;::FTP .</screen>
   <para>
    By default, no files are deleted while synchronizing with rsync. If this
    should be forced, the additional option <option>--delete</option> must be
    stated. To ensure that no newer files are deleted, the option
    <option>--update</option> can be used instead. Any conflicts that arise
    must be resolved manually.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.net.sync.summary">
  <title>For More Information</title>
  <para>TBD</para>
 </sect1>
</chapter>
