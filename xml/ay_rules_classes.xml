<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" 
xmlns:xi="http://www.w3.org/2001/XInclude" 
xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" 
xml:id="rulesandclass">

 <title>Rules and classes</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

  <para>
   Rules and classes allow customizing installations for sets of machines in
   different ways:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Rules allow configuring a system depending on its attributes.
    </para>
   </listitem>
   <listitem>
    <para>
     Classes represent configurations for groups of target systems. Classes
     can be assigned to systems.
    </para>
   </listitem>
  </itemizedlist>
  <note>
    <title>Use <literal>autoyast</literal> boot option only</title>
    <para>
     Rules and classes are only supported by the boot parameter
     <literal>autoyast=<replaceable>URL</replaceable></literal>.
    </para>
    <para>
     <literal>autoyast2=<replaceable>URL</replaceable></literal> is not
     supported, because
     this option downloads a single &ay; control file only.
    </para>
  </note>
  <sect1 xml:id="rules">
   <title>Rule-based automatic installation</title>

   <para>
    Rules offer the possibility to configure a system depending on system
    attributes by merging multiple control files during installation. The
    rule-based installation is controlled by a rules file.
   </para>
   <para>
    For example, this could be useful to install systems in two departments in
    one go. Assume a
    scenario where machines in department A need to be installed as office
    desktops, whereas machines in department B need to be installed as
    developer workstations. You would create a rules file with two different
    rules. For each rule, you could use different system parameters to
    distinguish the installations from one another. Each rule would also
    contain a link to an appropriate profile for each department.
   </para>

   <para>
    The rules file is an XML file containing rules for each group of systems
    (or single systems) that you want to automatically install. A set of
    rules distinguish a group of systems based on one or more system
    attributes. After passing all rules, each group of systems is linked to
    a control file. Both the rules file and the control files must be
    located in a pre-defined and accessible location.
   </para>

   <para>
    The rules file is retrieved only if no specific control file is supplied
    using the <literal>autoyast</literal> keyword. For example, if the
    following is used, the rules file will not be evaluated:
   </para>

<screen>autoyast=http://10.10.0.1/profile/myprofile.xml
autoyast=http://10.10.0.1/profile/rules/rules.xml</screen>

   <para>
    Instead use:
   </para>

<screen>autoyast=http://10.10.0.1/profile/</screen>

   <para>
    which will load
    <literal>http://10.10.0.1/profile/rules/rules.xml</literal> (the slash
    at the end of the directory name is important).
   </para>

   <figure xml:id="rules-fig1">
    <title>Rules</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast_rules.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast_rules.svg" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <para>
    If more than one rule applies, the final control file for each group is
    generated on the fly using a merge script. The merging process is based
    on the order of the rules and later rules override configuration data in
    earlier rules. Note that the names of the top sections in the merged XML
    files need to be in alphabetical order for the merge to succeed.
   </para>

   <para>
    The use of a rules file is optional. If the rules file is not found,
    system installation proceeds in the standard way by using the
    supplied control file or by searching for the control file depending on
    the MAC or the IP address of the system.
   </para>

   <sect2 xml:id="rulesfile">
    <title>Rules file explained</title>
    <example>
     <title>Simple rules file</title>
     <para>
      The following simple example illustrates how the rules file is used to
      retrieve the configuration for a client with known hardware.
     </para>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE autoinstall&gt;
&lt;autoinstall xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns"&gt;
  &lt;rules config:type="list"&gt;
    &lt;rule&gt;
       &lt;disksize&gt;
            &lt;match&gt;/dev/sdc 1000&lt;/match&gt;
            &lt;match_type&gt;greater&lt;/match_type&gt;
       &lt;/disksize&gt;
       &lt;result&gt;
            &lt;profile&gt;department_a.xml&lt;/profile&gt;
            &lt;continue config:type="boolean"&gt;false&lt;/continue&gt;
        &lt;/result&gt;
    &lt;/rule&gt;
    &lt;rule&gt;
       &lt;disksize&gt;
            &lt;match&gt;/dev/sda 1000&lt;/match&gt;
            &lt;match_type&gt;greater&lt;/match_type&gt;
       &lt;/disksize&gt;
       &lt;result&gt;
            &lt;profile&gt;department_b.xml&lt;/profile&gt;
            &lt;continue config:type="boolean"&gt;false&lt;/continue&gt;
        &lt;/result&gt;
    &lt;/rule&gt;
  &lt;/rules&gt;
&lt;/autoinstall&gt;</screen>
    </example>
    <para>
     The last example defines two rules and provides a different control
     file for every rule. The rule used in this case is
     <literal>disksize</literal>. After parsing the rules file, &yast;
     attempts to match the target system with the rules in the
     <filename>rules.xml</filename> file. A rule match occurs when the
     target system matches all system attributes defined in the rule. When the system matches a rule, the respective resource is added to
     the stack of control files &ay; will use to create the final control
     file. The <literal>continue</literal> property tells &ay; whether it
     should continue with other rules after a match has been found.
    </para>
    <para>
     If the first rule does not match, the next rule in the list is examined
     until a match is found.
    </para>
    <para>
     Using the <literal>disksize</literal> attribute, you can provide
     different configurations for systems with hard disks of different
     sizes. The first rule checks if the device
     <filename>/dev/sdc</filename> is available and if it is greater than 1
     GB in size using the <literal>match</literal> property.
    </para>
    <para>
     A rule must have at least one attribute to be matched. If you need to
     check more attributes, such as memory or architectures, you can add
     more attributes in the rule resource as shown in the next example.
    </para>
    <example>
     <title>Simple rules file</title>
     <para>
      The following example illustrates how the rules file is used to
      retrieve the configuration for a client with known hardware.
     </para>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE autoinstall&gt;
&lt;autoinstall xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns"&gt;
  &lt;rules config:type="list"&gt;
    &lt;rule&gt;
       &lt;disksize&gt;
            &lt;match&gt;/dev/sdc 1000&lt;/match&gt;
            &lt;match_type&gt;greater&lt;/match_type&gt;
       &lt;/disksize&gt;
       &lt;memsize&gt;
            &lt;match&gt;1000&lt;/match&gt;
            &lt;match_type&gt;greater&lt;/match_type&gt;
       &lt;/memsize&gt;
       &lt;result&gt;
            &lt;profile&gt;department_a.xml&lt;/profile&gt;
            &lt;continue config:type="boolean"&gt;false&lt;/continue&gt;
        &lt;/result&gt;
    &lt;/rule&gt;
    &lt;rule&gt;
       &lt;disksize&gt;
            &lt;match&gt;/dev/shda 1000&lt;/match&gt;
            &lt;match_type&gt;greater&lt;/match_type&gt;
       &lt;/disksize&gt;
       &lt;memsize&gt;
            &lt;match&gt;256&lt;/match&gt;
            &lt;match_type&gt;greater&lt;/match_type&gt;
       &lt;/memsize&gt;
       &lt;result&gt;
            &lt;profile&gt;department_b.xml&lt;/profile&gt;
            &lt;continue config:type="boolean"&gt;false&lt;/continue&gt;
        &lt;/result&gt;
    &lt;/rule&gt;
  &lt;/rules&gt;
&lt;/autoinstall&gt;</screen>
    </example>
    <para>
     The rules directory must be located in the same directory specified via
     the <literal>autoyast</literal> keyword at boot time. If the client was
     booted using <literal>autoyast=http://10.10.0.1/profiles/</literal>,
     &ay; will search for the rules file at
     http://10.10.0.1/profiles/rules/rules.xml.
    </para>
   </sect2>

   <sect2 xml:id="customrules">
    <title>Custom rules</title>
    <para>
     If the attributes &ay; provides for rules are not enough for your
     purposes, use custom rules. Custom rules contain a shell script. The
     output of the script (STDOUT, STDERR is ignored) can be evaluated.
    </para>
    <para>
     Here is an example for the use of custom rules:
    </para>
<screen>&lt;rule&gt;
  &lt;custom1&gt;
    &lt;script&gt;
if grep -i intel /proc/cpuinfo &gt; /dev/null; then
echo -n "intel"
else
echo -n "non_intel"
fi;
    &lt;/script&gt;
    &lt;match&gt;*&lt;/match&gt;
    &lt;match_type&gt;exact&lt;/match_type&gt;
  &lt;/custom1&gt;
  &lt;result&gt;
    &lt;profile&gt;@custom1@.xml&lt;/profile&gt;
    &lt;continue config:type="boolean"&gt;true&lt;/continue&gt;
  &lt;/result&gt;
&lt;/rule&gt;</screen>
    <para>
     The script in this rule can echo either <literal>intel</literal> or
     <literal>non_intel</literal> to STDOUT (the output of the grep command
     must be directed to /dev/null in this case). The output of the rule
     script will be filled between the two '@' characters, to determine the
     file name of the control file to fetch. &ay; will read the output and
     fetch a file with the name <filename>intel.xml</filename> or
     <filename>non_intel.xml</filename>. This file can contain the &ay;
     profile part for the software selection; for example, in case you want
     a different software selection on Intel hardware than on others.
    </para>
    <para>
     The number of custom rules is limited to five. So you can use
     <literal>custom1</literal> to <literal>custom5</literal>.
    </para>
   </sect2>

   <sect2 xml:id="matchtypes">
    <title>Match types for rules</title>
    <para>
     You can use five different match_types:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <literal>exact</literal> (default)
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>greater</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>lower</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>range</literal>
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>regex</literal> (a simple <literal>=~</literal> operator
       like in Bash)
      </para>
     </listitem>
    </itemizedlist>
    <para>
     If using <literal>exact</literal>, the string must match exactly as
     specified. <literal>regex</literal> can be used to match substrings
     like <literal>ntel</literal> will match Intel, intel and intelligent.
     <literal>greater</literal> and <literal>lower</literal> can be used for
     <literal>memsize</literal> or <literal>totaldisk</literal> for example. They can match only with rules that
     return an integer value. A range is only possible for integer values
     too and has the form of <literal>value1-value2</literal>, for example
     <literal>512-1024</literal>.
    </para>
   </sect2>

   <sect2 xml:id="rulescombination">
    <title>Combine attributes</title>
    <para>
     Multiple attributes can be combined via a logical operator. It is
     possible to let a rule match if <literal>disksize</literal> is greater than 1GB or <literal>memsize</literal>
     is exactly 512MB.
    </para>
    <para>
     You can do this with the <literal>operator</literal> element in the
     rules.xml file. <literal>and</literal> and <literal>or</literal> are
     possible operators, <literal>and</literal> being the default. Here is
     an example:
    </para>
<screen>&lt;rule&gt;
  &lt;disksize&gt;
    &lt;match&gt;/dev/sda 1000&lt;/match&gt;
    &lt;match_type&gt;greater&lt;/match_type&gt;
  &lt;/disksize&gt;
  &lt;memsize&gt;
    &lt;match&gt;256&lt;/match&gt;
    &lt;match_type&gt;greater&lt;/match_type&gt;
  &lt;/memsize&gt;
  &lt;result&gt;
    &lt;profile&gt;machine2.xml&lt;/profile&gt;
    &lt;continue config:type="boolean"&gt;false&lt;/continue&gt;
  &lt;/result&gt;
  &lt;operator&gt;or&lt;/operator&gt;
&lt;/rule&gt;</screen>
   </sect2>

   <sect2 xml:id="rulesstructure">
    <title>Rules file structure</title>
    <para>
     The <filename>rules.xml</filename> file needs to:
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       have at least one rule,
      </para>
     </listitem>
     <listitem>
      <para>
       have the name <filename>rules.xml</filename>,
      </para>
     </listitem>
     <listitem>
      <para>
       be located in the directory <filename>rules</filename> in the profile
       repository,
      </para>
     </listitem>
     <listitem>
      <para>
       have at least one attribute to match in the rule.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 xml:id="ruleattributes">
    <title>Predefined system attributes</title>
    <para>
     The following table lists the predefined system attributes you can
     match in the rules file.
    </para>
    <para>
     If you are unsure about a value on your system, run
     <command>/usr/lib/&yast;2/bin/y2base ayast_probe ncurses</command>.
     The text box displaying the detected values can be scrolled. Note that
     this command will not work while another &yast; process that
     requires a lock (for example the installer) is running. Therefore you
     cannot run it during the installation.
    </para>
    <table>
     <title>System attributes</title>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>
         <para>
          Attribute
         </para>
        </entry>
        <entry>
         <para>
          Values
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          <literal>hostaddress</literal>
         </para>
        </entry>
        <entry>
         <para>
          IP address of the host
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>host name</literal>
         </para>
        </entry>
        <entry>
         <para>
          The name of the host
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>domain</literal>
         </para>
        </entry>
        <entry>
         <para>
          Domain name of host
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>installed_product</literal>
         </para>
        </entry>
        <entry>
         <para>
          The name of the product to be installed.
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>installed_product_version</literal>
         </para>
        </entry>
        <entry>
         <para>
          The version of the product to be installed.
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>network</literal>
         </para>
        </entry>
        <entry>
         <para>
          network address of host
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>mac</literal>
         </para>
        </entry>
        <entry>
         <para>
          MAC address of host
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly (the MAC addresses should
          have the form <literal>0080c8f6484c</literal>).
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>linux</literal>
         </para>
        </entry>
        <entry>
         <para>
          Number of installed Linux partitions on the system
         </para>
        </entry>
        <entry>
         <para>
          This attribute can be 0 or more.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>others</literal>
         </para>
        </entry>
        <entry>
         <para>
          Number of installed non-Linux partitions on the system
         </para>
        </entry>
        <entry>
         <para>
          This attribute can be 0 or more.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>xserver</literal>
         </para>
        </entry>
        <entry>
         <para>
          X Server needed for graphic adapter
         </para>
        </entry>
        <entry>
         <para>
          This attribute must always match exactly.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>memsize</literal>
         </para>
        </entry>
        <entry>
         <para>
          Memory available on host in megabytes
         </para>
        </entry>
        <entry>
         <para>
          All match types are available.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>totaldisk</literal>
         </para>
        </entry>
        <entry>
         <para>
          Total disk space available on host in megabytes
         </para>
        </entry>
        <entry>
         <para>
          All match types are available.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>hostid</literal>
         </para>
        </entry>
        <entry>
         <para>
          Hex representation of the IP address
         </para>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>arch</literal>
         </para>
        </entry>
        <entry>
         <para>
          Architecture of host
         </para>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>karch</literal>
         </para>
        </entry>
        <entry>
         <para>
          Kernel Architecture of host (for example SMP kernel, &xen;
          kernel)
         </para>
         <remark>
          Do we actually still have a Xen-specific kernel? - sknorr, 2017-05-08
         </remark>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>disksize</literal>
         </para>
        </entry>
        <entry>
         <para>
          Drive device and size
         </para>
        </entry>
        <entry>
         <para>
          All match types are available.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>product</literal>
         </para>
        </entry>
        <entry>
         <para>
          The hardware product name as specified in SMBIOS
         </para>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>product_vendor</literal>
         </para>
        </entry>
        <entry>
         <para>
          The hardware vendor as specified in SMBIOS
         </para>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>board</literal>
         </para>
        </entry>
        <entry>
         <para>
          The system board name as specified in SMBIOS
         </para>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>board_vendor</literal>
         </para>
        </entry>
        <entry>
         <para>
          The system board vendor as specified in SMBIOS
         </para>
        </entry>
        <entry>
         <para>
          Exact match required
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>custom1-5</literal>
         </para>
        </entry>
        <entry>
         <para>
          Custom rules using shell scripts
         </para>
        </entry>
        <entry>
         <para>
          All match types are available.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect2>

   <sect2 xml:id="rules-dialogs">
    <title>Rules with dialogs</title>
    <para>
     You can use dialog pop-ups with check boxes to select rules you want
     matched.
    </para>
    <para>
     The elements listed below must be placed within the following XML
     structure in the <filename>rules.xml</filename> file:
    </para>
<screen>&lt;rules config:type="list"&gt;
  &lt;rule&gt;
    &lt;dialog&gt;
      ...
    &lt;/dialog&gt;
  &lt;/rule&gt;
&lt;/rules&gt;</screen>
    <informaltable>
     <tgroup cols="3">
      <thead>
       <row>
        <entry>
         <para>
          Attribute
         </para>
        </entry>
        <entry>
         <para>
          Values
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para>
          <literal>dialog_nr</literal>
         </para>
        </entry>
        <entry>
         <para>
          All rules with the same <literal>dialog_nr</literal> are presented
          in the same pop-up dialog. The same <literal>dialog_nr</literal>
          can appear in multiple rules.
         </para>
<screen>&lt;dialog_nr config:type="integer"&gt;3&lt;/dialog_nr&gt;</screen>
        </entry>
        <entry>
         <para>
          This element is optional and the default for a missing dialog_nr
          is always <literal>0</literal>. To use one pop-up for
          all rules, you do not need to specify the
          <literal>dialog_nr</literal>.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>element</literal>
         </para>
        </entry>
        <entry>
         <para>
          Specify a unique ID. Even if you have more than one dialog, you
          must not use the same id twice. Using id <literal>1</literal> on
          dialog 1 and id <literal>1</literal> on dialog 2 is not supported.
          (This behavior is contrary to the <literal>ask</literal> dialog,
          where you can have the same ID for multiple dialogs.)
         </para>
<screen>&lt;element config:type="integer"&gt;3&lt;/element&gt;</screen>
        </entry>
        <entry>
         <para>
          Optional. If omitted, &ay; adds its own IDs internally. Then
          you cannot specify conflicting rules (see below).
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>title</literal>
         </para>
        </entry>
        <entry>
         <para>
          Caption of the pop-up dialog
         </para>
<screen>&lt;title&gt;Desktop Selection&lt;/title&gt;</screen>
        </entry>
        <entry>
         <para>
          Optional
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>question</literal>
         </para>
        </entry>
        <entry>
         <para>
          Question shown in the pop-up behind the check box.
         </para>
<screen>&lt;question&gt;GNOME Desktop&lt;/question&gt;</screen>
        </entry>
        <entry>
         <para>
          Optional. If you do not configure a text here, the name of the XML
          file that is triggered by this rule will be shown instead.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>timeout</literal>
         </para>
        </entry>
        <entry>
         <para>
          Timeout in seconds after which the dialog will automatically
          <quote>press</quote> the okay button. Useful for a non-blocking
          installation in combination with rules dialogs.
         </para>
<screen>&lt;timeout config:type="integer"&gt;30&lt;/timeout&gt;</screen>
        </entry>
        <entry>
         <para>
          Optional. A missing timeout will stop the installation process
          until the dialog is confirmed by the user.
         </para>
        </entry>
       </row>
       <row>
        <entry>
         <para>
          <literal>conflicts</literal>
         </para>
        </entry>
        <entry>
         <para>
          A list of element ids (rules) that conflict with this rule. If
          this rule matches or is selected by the user, all conflicting
          rules are deselected and disabled in the pop-up. Take care that
          you do not create deadlocks.
         </para>
<screen>&lt;conflicts config:type="list"&gt;
  &lt;element config:type="integer"&gt;1&lt;/element&gt;
  &lt;element config:type="integer"&gt;5&lt;/element&gt;
  ...
&lt;/conflicts&gt;</screen>
        </entry>
        <entry>
         <para>
          Optional
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <para>
     Here is an example of how to use dialogs with rules:
    </para>
<screen>&lt;rules config:type="list"&gt;
  &lt;rule&gt;
    &lt;custom1&gt;
      &lt;script&gt;
echo -n 100
      &lt;/script&gt;
      &lt;match&gt;100&lt;/match&gt;
      &lt;match_type&gt;exact&lt;/match_type&gt;
    &lt;/custom1&gt;
    &lt;result&gt;
      &lt;profile&gt;rules/gnome.xml&lt;/profile&gt;
      &lt;continue config:type="boolean"&gt;true&lt;/continue&gt;
    &lt;/result&gt;
    &lt;dialog&gt;
      &lt;element config:type="integer"&gt;0&lt;/element&gt;
      &lt;question&gt;GNOME Desktop&lt;/question&gt;
      &lt;title&gt;Desktop Selection&lt;/title&gt;
      &lt;conflicts config:type="list"&gt;
        &lt;element config:type="integer"&gt;1&lt;/element&gt;
      &lt;/conflicts&gt;
      &lt;dialog_nr config:type="integer"&gt;0&lt;/dialog_nr&gt;
    &lt;/dialog&gt;
  &lt;/rule&gt;
  &lt;rule&gt;
    &lt;custom1&gt;
      &lt;script&gt;
echo -n 100
      &lt;/script&gt;
      &lt;match&gt;101&lt;/match&gt;
      &lt;match_type&gt;exact&lt;/match_type&gt;
    &lt;/custom1&gt;
    &lt;result&gt;
      &lt;profile&gt;rules/gnome.xml&lt;/profile&gt;
      &lt;continue config:type="boolean"&gt;true&lt;/continue&gt;
    &lt;/result&gt;
    &lt;dialog&gt;
      &lt;element config:type="integer"&gt;1&lt;/element&gt;
      &lt;dialog_nr config:type="integer"&gt;0&lt;/dialog_nr&gt;
      &lt;question&gt;Gnome Desktop&lt;/question&gt;
      &lt;conflicts config:type="list"&gt;
        &lt;element config:type="integer"&gt;0&lt;/element&gt;
      &lt;/conflicts&gt;
    &lt;/dialog&gt;
  &lt;/rule&gt;
  &lt;rule&gt;
    &lt;custom1&gt;
      &lt;script&gt;
echo -n 100
      &lt;/script&gt;
      &lt;match&gt;100&lt;/match&gt;
      &lt;match_type&gt;exact&lt;/match_type&gt;
    &lt;/custom1&gt;
    &lt;result&gt;
      &lt;profile&gt;rules/all_the_rest.xml&lt;/profile&gt;
      &lt;continue config:type="boolean"&gt;false&lt;/continue&gt;
    &lt;/result&gt;
  &lt;/rule&gt;
&lt;/rules&gt;</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="classes">
   <title>Classes</title>

   <para>
    Classes represent configurations for groups of target systems. Unlike
    rules, classes need to be configured in the control file. Then classes
    can be assigned to target systems.
   </para>

   <para>
    Here is an example of a class definition:
   </para>

<screen>&lt;classes config:type="list"&gt;
  &lt;class&gt;
    &lt;class_name&gt;TrainingRoom&lt;/class_name&gt;
    &lt;configuration&gt;Software.xml&lt;/configuration&gt;
  &lt;/class&gt;
&lt;/classes&gt;</screen>

   <para>
    In the example above, the file <filename>Software.xml</filename> must be
    placed in the subdirectory <filename>classes/TrainingRoom/</filename> It
    will be fetched from the same place the &ay; control file and rules
    were fetched from.
   </para>

   <para>
    If you have multiple control files and those control files share parts,
    better use classes for common parts.
<!--You need to change the class and all profiles using that class are fixed too.-->
    <remark>emap 2011-11-07: Sentence does not make sense.</remark>
    You can also use XIncludes.
   </para>

   <para>
    Using the configuration management system, you can define a set of
    classes. A class definition consists of the following variables:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Name: class name
     </para>
    </listitem>
    <listitem>
     <para>
      Description:
     </para>
    </listitem>
    <listitem>
     <para>
      Order: order (or priority) of the class in the stack of migration
      <remark>emap 2011-11-07: What migration?</remark>
     </para>
    </listitem>
   </itemizedlist>

   <figure os="sles;sled">
    <title>Defining classes</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="cms-class-definitions.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="cms-class-definitions.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <figure os="osuse">
    <title>Defining classes</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="cms-class-definitions_kde.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="cms-class-definitions_kde.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <para>
    You can create as many classes as you need, however it is recommended to
    keep the set of classes as small as possible to keep the configuration
    system concise. For example, the following sets of classes can be used:
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      site: classes describing a physical location or site,
     </para>
    </listitem>
    <listitem>
     <para>
      machine: classes describing a type of machine,
     </para>
    </listitem>
    <listitem>
     <para>
      role: classes describing the function of the machine,
     </para>
    </listitem>
    <listitem>
     <para>
      group: classes describing a department or a group within a site or a
      location.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    A file saved in a class directory can have the same syntax and format as
    a regular control file but represents a subset of the configuration. For
    example, to create a new control file for a computer with a
    specific network interface, you only need the control file resource that
    controls the configuration of the network. Having multiple
    network types, you can merge the one needed for a special type of
    hardware with other class files and create a new control file which
    suits the system being installed.
    <remark>emap 2011-11-07: Not very clear.</remark>
   </para>
  </sect1>
  <sect1 xml:id="mixinfrulesclasses">
   <title>Mixing rules and classes</title>

   <para>
    It is possible to mix rules and classes during an auto-installation
    session. For example you can identify a system using rules which contain
    class definitions in them. The process is described in the figure
    <xref linkend="rulesflow"/>.
   </para>

   <para>
    After retrieving the rules and merging them, the generated control file
    is parsed and checked for class definitions. If classes are defined,
    then the class files are retrieved from the original repository and a
    new merge process is initiated.
   </para>
  </sect1>
  <sect1 xml:id="merging">
   <title>Merging of rules and classes</title>

   <para>
    With classes and with rules, multiple XML files get merged into one
    resulting XML file. This merging process is often confusing for people,
    because it behaves different than one would expect. First of all, it is
    important to note that the names of the top sections in the merged XML
    files must be in alphabetical order for the merge to succeed.
   </para>

   <para>
    For example, the following two XML parts should be merged:
   </para>

<screen>&lt;partitioning config:type="list"&gt;
  &lt;drive&gt;
    &lt;partitions config:type="list"&gt;
      &lt;partition&gt;
        &lt;filesystem config:type="symbol"&gt;swap&lt;/filesystem&gt;
        &lt;format config:type="boolean"&gt;true&lt;/format&gt;
        &lt;mount&gt;swap&lt;/mount&gt;
        &lt;partition_id config:type="integer"&gt;130&lt;/partition_id&gt;
        &lt;size&gt;2000mb&lt;/size&gt;
      &lt;/partition&gt;
      &lt;partition&gt;
        &lt;filesystem config:type="symbol"&gt;xfs&lt;/filesystem&gt;
        &lt;partition_type&gt;primary&lt;/partition_type&gt;
        &lt;size&gt;4Gb&lt;/size&gt;
        &lt;mount&gt;/data&lt;/mount&gt;
      &lt;/partition&gt;
    &lt;/partitions&gt;
  &lt;/drive&gt;
&lt;/partitioning&gt;</screen>

<screen>&lt;partitioning config:type="list"&gt;
  &lt;drive&gt;
    &lt;initialize config:type="boolean"&gt;false&lt;/initialize&gt;
    &lt;partitions config:type="list"&gt;
      &lt;partition&gt;
        &lt;format config:type="boolean"&gt;true&lt;/format&gt;
        &lt;filesystem config:type="symbol"&gt;xfs&lt;/filesystem&gt;
        &lt;mount&gt;/&lt;/mount&gt;
        &lt;partition_id config:type="integer"&gt;131&lt;/partition_id&gt;
        &lt;partition_type&gt;primary&lt;/partition_type&gt;
        &lt;size&gt;max&lt;/size&gt;
      &lt;/partition&gt;
    &lt;/partitions&gt;
    &lt;use&gt;all&lt;/use&gt;
  &lt;/drive&gt;
&lt;/partitioning&gt;</screen>

   <para>
    You might expect the control file to contain three partitions. This is not
    the case. You will end up with two partitions and the first partition is
    a mix up of the swap and the root partition. Settings configured in both
    partitions, like <literal>mount</literal> or <literal>size</literal>,
    will be used from the second file. Settings that only exist in the first
    or second partition, will be copied to the merged partition too.
    <remark>emap 2011-11-07: A little confusing, why not put the merged file here.</remark>
   </para>

   <para>
    In this example, you do not want a second <literal>drive</literal>. The
    two drives should be merged into one. With regard to partitions, three
    separate ones should be defined. Using the <literal>dont_merge</literal>
    method solves the merging problem:
   </para>

<screen>&lt;classes config:type="list"&gt;
  &lt;class&gt;
    &lt;class_name&gt;swap&lt;/class_name&gt;
    &lt;configuration&gt;largeswap.xml&lt;/configuration&gt;
    &lt;dont_merge config:type="list"&gt;
      &lt;element&gt;partition&lt;/element&gt;
    &lt;/dont_merge&gt;
  &lt;/class&gt;
&lt;/classes&gt;</screen>

<screen>&lt;rule&gt;
  &lt;board_vendor&gt;
    &lt;match&gt;ntel&lt;/match&gt;
    &lt;match_type&gt;regex&lt;/match_type&gt;
  &lt;/board_vendor&gt;
  &lt;result&gt;
    &lt;profile&gt;classes/largeswap.xml&lt;/profile&gt;
    &lt;continue config:type="boolean"&gt;true&lt;/continue&gt;
    &lt;dont_merge config:type="list"&gt;
      &lt;element&gt;partition&lt;/element&gt;
    &lt;/dont_merge&gt;
  &lt;/result&gt;
  &lt;board_vendor&gt;
    &lt;match&gt;PowerEdge [12]850&lt;/match&gt;
    &lt;match_type&gt;regex&lt;/match_type&gt;
  &lt;/board_vendor&gt;
  &lt;result&gt;
    &lt;profile&gt;classes/smallswap.xml&lt;/profile&gt;
    &lt;continue config:type="boolean"&gt;true&lt;/continue&gt;
    &lt;dont_merge config:type="list"&gt;
      &lt;element&gt;partition&lt;/element&gt;
    &lt;/dont_merge&gt;
  &lt;/result&gt;
&lt;/rule&gt;</screen>
  </sect1>
 </chapter>
