<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.security.ldap">
 <title>LDAP&mdash;A Directory Service</title>
 <info>
      <abstract>
        <para>
    The Lightweight Directory Access Protocol (LDAP) is a set of protocols
    designed to access and maintain information directories. LDAP can be
    used for user and group management, system configuration management,
    address management, and more. This chapter provides a basic
    understanding of how OpenLDAP works.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>

 <para>
  In a network environment, it is crucial to keep important information
  structured and to serve it quickly. A directory service keeps information
  available in a well-structured and searchable form.
 </para>
 <para>
  Ideally, a central server stores the data in a directory and distributes
  it to all clients using a well-defined protocol. The structured data allow
  a wide range of applications to access them. A central repository reduces
  the necessary administrative effort. The use of an open and standardized
  protocol like LDAP ensures that as many client applications as
  possible can access such information.
 </para>
 <para>
  A directory in this context is a type of database optimized for quick and
  effective reading and searching:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <remark condition="clarity">
    2011-02-18 - fs: the number is limited? and why limit reads?
   </remark>
   <para>
    To make multiple concurrent reading accesses possible, the number of
    updates is usually very low. The number of read and write accesses is
    often limited to a few users with administrative privileges. In
    contrast, conventional databases are optimized for accepting the largest
    possible data volume in a short time.
   </para>
  </listitem>
  <listitem>
   <para>
    When static data is administered, updates of the existing data sets are
    very rare. When working with dynamic data, especially when data sets
    like bank accounts or accounting are concerned, the consistency of the
    data is of primary importance. If an amount should be subtracted from
    one place to be added to another, both operations must happen
    concurrently, within one <emphasis>transaction</emphasis>, to ensure
    balance over the data stock. Traditional relational databases usually
    have a very strong focus on data consistency, such as the referential
    integrity support of transactions. Conversely, short-term
    inconsistencies are usually acceptable in LDAP directories. LDAP
    directories often do not have the same strong consistency requirements
    as relational databases.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  The design of a directory service like LDAP is not laid out to support
  complex update or query mechanisms. All applications are guaranteed to
  access this service quickly and easily.
 </para>
 <sect1 xml:id="sec.security.ldap.vs_nis">
  <title>LDAP versus NIS</title>

  <remark condition="generic"> 2007-05-29 - jjaeger: this still necessary? Why not discard the NIS
   part altogether and merge the use cases for LDAP with the intro? </remark>

  <para>
   Unix system administrators traditionally use NIS (Network Information
   Service) for name resolution and data distribution in a network. The
   configuration data contained in the files <filename>group</filename>,
   <filename>hosts</filename>, <filename>mail</filename>,
   <filename>netgroup</filename>, <filename>networks</filename>,
   <filename>passwd</filename>, <filename>printcap</filename>,
   <filename>protocols</filename>, <filename>rpc</filename>, and
   <filename>services</filename> in the <filename>/etc</filename> directory
   is distributed to clients all over the network. These files can be
   maintained without major effort because they are simple text files. The
   handling of larger amounts of data, however, becomes increasingly
   difficult because of nonexistent structuring.
   <remark>sknorr, 2014-08-26: "nonexistent structuring" sounds a bit
    complicated.</remark>
   NIS is only designed for Unix platforms, and is not suitable as a
   centralized data administration tool in heterogeneous networks.
  </para>

  <para>
   Unlike NIS, the LDAP service is not restricted to pure Unix networks.
   Windows&trade; servers (starting with Windows 2000) support LDAP as a
   directory service. The
   application tasks mentioned above are additionally supported in non-Unix
   systems.
  </para>

  <para>
   The LDAP principle can be applied to any data structure that needs to be
   centrally administered. A few application examples are:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Replacement for the NIS service
    </para>
   </listitem>
   <listitem>
    <para>
     Mail routing (postfix)
    </para>
   </listitem>
   <listitem>
    <para>
     Address books for mail clients, like Mozilla Thunderbird, Evolution,
     and Outlook
    </para>
   </listitem>
   <listitem>
    <para>
     Administration of zone descriptions for a BIND 9 name server
    </para>
   </listitem>
   <listitem>
    <para>
     User authentication with Samba in heterogeneous networks
    </para>
   </listitem>
  </itemizedlist>

  <para>
   This list can be extended because LDAP is extensible, unlike NIS. The
   clearly-defined hierarchical structure of the data simplifies the
   administration of large amounts of data, as it can be searched more
   easily.
  </para>
 </sect1>
 <sect1 xml:id="sec.security.ldap.tree">
  <title>Structure of an LDAP Directory Tree</title>

  <para>
   To get background knowledge on how an LDAP server works and how the data
   is stored, it is vital to understand the way the data is organized on the
   server and how this structure enables LDAP to provide fast access to the
   data. To successfully operate an LDAP setup, you also need to be familiar
   with some basic LDAP terminology. This section introduces the basic
   layout of an LDAP directory tree and provides the basic terminology used
   with regard to LDAP. Skip this introductory section if you already have
   some LDAP background knowledge and only want to learn how to set up an
   LDAP environment in &productname;.<phrase os="sles;osuse"> Read on at
<!-- <xref linkend="sec.security.ldap.yast"/> or -->
   <xref linkend="sec.security.ldap.slapd"/>.</phrase>
  </para>

  <para>
   An LDAP directory has a tree structure. All entries (called objects) of
   the directory have a defined position within this hierarchy. This
   hierarchy is called the <emphasis>directory information tree</emphasis>
   (DIT). The complete path to the desired entry, which unambiguously
   identifies it, is called the <emphasis>distinguished name</emphasis> or
   DN. A single node along the path to this entry is called
   <emphasis>relative distinguished name</emphasis> or RDN.
  </para>

<!-- rhafer says:
"This entire paragraph is actually not quite correct. With LDAP, each object
can be leaf and container, as long as there are no DIT Content/DIT Structure
rules. However, explaining these rules in the handbook might go too far. They
are not completely standardized and OpenLDAP does not support them. Thus, leave
this paragraph out completely."

  <para>
   Objects can generally be assigned to one of two possible types:
  </para>

  <variablelist>
   <varlistentry>
    <term>container</term>
    <listitem>
     <para>
      These objects can themselves contain other objects. Such object
      classes are <literal>root</literal> (the root element of the directory
      tree, which does not really exist), <literal>c</literal> (country),
      <literal>ou</literal> (organizational unit), and <literal>dc</literal>
      (domain component). This model is comparable to the directories
      (directories) in a file system.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>leaf</term>
    <listitem>
     <para>
      These objects sit at the end of a branch and have no subordinate
      objects. Examples are <literal>person</literal>,
      <literal>InetOrgPerson</literal>, or <literal>groupofNames</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The top of the directory hierarchy has a root element
   <literal>root</literal>. This can contain <literal>c</literal> (country),
   <literal>dc</literal> (domain component), or <literal>o</literal>
   (organization) as subordinate elements.
  </para>
  -->

  <para>
   The relations within an LDAP directory tree become more evident in the
   following example, shown in <xref linkend="fig.ldap.tree"/>.
  </para>

  <figure xml:id="fig.ldap.tree">
   <title>Structure of an LDAP Directory</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ldap_tree.svg" width="85%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ldap_tree.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   The complete diagram is a fictional directory information tree. The
   entries on three levels are depicted. Each entry corresponds to one box
   in the image. The complete, valid <emphasis>distinguished name</emphasis>
   for the fictional employee <systemitem class="username">Geeko
   Linux</systemitem>, in this case, is <literal>cn=Geeko
   Linux,ou=doc,dc=example,dc=com</literal>. It is composed by adding the
   RDN <literal>cn=Geeko Linux</literal> to the DN of the preceding entry
   <literal>ou=doc,dc=example,dc=com</literal>.
  </para>

<!-- ke: yes, these things are called "Schema" -->

  <para>
   The types of objects that can be stored in the DIT are globally
   determined following a <emphasis>Schema</emphasis>. The type of an object
   is determined by the <emphasis>object class</emphasis>. The object class
   determines what attributes the relevant object must or can be assigned.
   The Schema, therefore, must contain definitions of all object classes and
   attributes used in the desired application scenario. There are a few
   common Schemas (see RFC 2252 and 2256). The LDAP RFC defines a few
   commonly used Schemas (see for example, RFC4519). Additionally, Schemas
   are available for many other use cases (for example, Samba or NIS
   replacement). It is, however, possible to create custom Schemas or to use
   multiple Schemas complementing each other (if this is required by the
   environment in which the LDAP server should operate).
  </para>

  <para>
   <xref linkend="tab.ldap.schema"/> offers a small overview of the object
   classes from <filename>core.schema</filename> and
   <filename>inetorgperson.schema</filename> used in the example, including
   required attributes (Req. Attr.) and valid attribute values.
<!-- intro abbrev "Req. Attr." too shorten the table header -->
  </para>

  <table xml:id="tab.ldap.schema">
   <title>Commonly Used Object Classes and Attributes</title>
   <tgroup cols="4">
    <colspec colname="c1" colwidth="30*"/>
    <colspec colname="c2" colwidth="40*"/>
    <colspec colname="c3" colwidth="16*"/>
    <colspec colname="c4" colwidth="14*"/>
    <thead>
     <row>
      <entry>
       <para>
        Object Class
       </para>
      </entry>
      <entry>
       <para>
        Meaning
       </para>
      </entry>
      <entry>
       <para>
        Example Entry
       </para>
      </entry>
      <entry>
       <para>
        Req. Attr.
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <literal>dcObject</literal>
       </para>
      </entry>
      <entry>
       <para>
        <emphasis>domainComponent</emphasis> (name components of the domain)
       </para>
      </entry>
      <entry>
       <para>
        example
       </para>
      </entry>
      <entry>
       <para>
        dc
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>organizationalUnit</literal>
       </para>
      </entry>
      <entry>
       <para>
        <emphasis>organizationalUnit</emphasis> (organizational unit)
       </para>
      </entry>
      <entry>
       <para>
        doc
       </para>
      </entry>
      <entry>
       <para>
        ou
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>inetOrgPerson</literal>
       </para>
      </entry>
      <entry>
       <para>
        <emphasis>inetOrgPerson</emphasis> (person-related data for the
        intranet or Internet)
       </para>
      </entry>
      <entry>
       <para>
        Geeko Linux
       </para>
      </entry>
      <entry>
       <para>
        sn and cn
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   <xref linkend="aus.ldap.schema.help"/> shows an excerpt from a Schema
   directive with explanations.
  </para>

  <example xml:id="aus.ldap.schema.help">
   <title>Excerpt from schema.core</title>
<screen>attributetype (2.5.4.11 NAME ( 'ou' 'organizationalUnitName') <co xml:id="co.ldap.schema.core.att_type"/>
       DESC 'RFC2256: organizational unit this object belongs to' <co xml:id="co.ldap.schema.core.desc"/>
       SUP name ) <co xml:id="co.ldap.schema.core.sup"/>

objectclass ( 2.5.6.5 NAME 'organizationalUnit' <co xml:id="co.ldap.schema.core.oc"/>
       DESC 'RFC2256: an organizational unit' <co xml:id="co.ldap.schema.core.desc.oc"/>
       SUP top STRUCTURAL <co xml:id="co.ldap.schema.core.sup.oc"/>
       MUST ou <co xml:id="co.ldap.schema.core.must.oc"/>
MAY (userPassword $ searchGuide $ seeAlso $ businessCategory <co xml:id="co.ldap.schema.core.may.oc"/>
  $ x121Address $ registeredAddress $ destinationIndicator
  $ preferredDeliveryMethod $ telexNumber
  $ teletexTerminalIdentifier $ telephoneNumber
  $ internationaliSDNNumber $ facsimileTelephoneNumber
  $ street $ postOfficeBox $ postalCode $ postalAddress
  $ physicalDeliveryOfficeName
  $ st $ l $ description) )
  ...</screen>
  </example>

  <para>
   The attribute type <literal>organizationalUnitName</literal> and the
   corresponding object class <literal>organizationalUnit</literal> serve as
   an example here.
  </para>

  <calloutlist>
   <callout arearefs="co.ldap.schema.core.att_type">
    <para>
     The name of the attribute, its unique OID (<emphasis>object
     identifier</emphasis>) (numerical), and the abbreviation of the
     attribute.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.desc">
    <para>
     A brief description of the attribute with <literal>DESC</literal>. The
     corresponding RFC, on which the definition is based, is also mentioned
     here.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.sup">
    <para>
     <literal>SUP</literal> indicates a superordinate attribute type to
     which this attribute belongs.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.oc">
    <para>
     The definition of the object class
     <literal>organizationalUnit</literal> begins&mdash;the same as in
     the definition of the attribute&mdash;with an OID and the name of
     the object class.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.desc.oc">
    <para>
     A brief description of the object class.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.sup.oc">
    <para>
     The <literal>SUP top</literal> entry indicates that this object class
     is not subordinate to another object class.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.must.oc">
    <para>
     With <literal>MUST</literal> list all attribute types that must be used
     with an object of the type
     <literal>organizationalUnit</literal>.
    </para>
   </callout>
   <callout arearefs="co.ldap.schema.core.may.oc">
    <para>
     With <literal>MAY</literal> list all attribute types that are permitted
     with this object class.
    </para>
   </callout>
  </calloutlist>

  <para>
   A very good introduction to the use of Schemas can be found in the
   OpenLDAP documentation (<systemitem>openldap2-doc</systemitem>). When
   installed, find it in
   <filename>/usr/share/doc/packages/openldap2/adminguide/guide.html</filename>.
  </para>
 </sect1>

 <sect1 xml:id="sec.security.ldap.yast.client">
  <title>Configuring an LDAP Client with &yast;</title>
  <para>
   &yast; includes the module <guimenu>LDAP and Kerberos Client</guimenu>
   that helps define authentication scenarios involving either LDAP or Kerberos.
  </para>
  <para>
   It can also be used to join Kerberos and LDAP separately. However, in
   many such cases, using this module may not be the first choice, such as
   for joining &ad; (which uses a combination of LDAP and Kerberos). For
   more information, see <xref linkend="sec.security.auth.yast.client"/>.
  </para>
  <para>
   Start the module by selecting
   <menuchoice> <guimenu>Network Services</guimenu> <guimenu>LDAP and
   Kerberos Client</guimenu> </menuchoice>.
  </para>
  <figure xml:id="fig.yast2.ldapkerberos.ldap">
   <title><guimenu>LDAP and Kerberos Client</guimenu> Window</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="yast2_auth_client_config.png" width="65%" format="PNG"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="yast2_auth_client_config.png" width="65%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   To configure an LDAP client, follow the procedure below:
  </para>
  <procedure xml:id="pro.security.auth.ldap">
   <step>
    <para>
     In the window <guimenu>LDAP and Kerberos Client</guimenu>, click
     <guimenu>Change Settings</guimenu>.
    </para>
    <para>
     Make sure that the tab <guimenu>Use a Directory as Identity Provider
     (LDAP)</guimenu> is chosen.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="html">
       <imagedata fileref="yast2_auth_client_ldap.png" width="65%" format="PNG"/>
      </imageobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_auth_client_ldap.png" width="65%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para>
     Specify one or more LDAP server URLs, host names, or IP addresses under
     <guimenu>Enter LDAP server locations</guimenu>. When specifying multiple
     addresses, separate them with spaces.
    </para>
   </step>
   <step>
    <para>
     Specify the appropriate LDAP distinguished name (DN) under
     <guimenu>DN of Search Base</guimenu>. For example, a valid entry could
     be <literal>dc=example,dc=com</literal>.
    </para>
   </step>
   <step>
    <para>
     If your LDAP server supports TLS encryption, choose the appropriate
     security option under <guimenu>Secure LDAP Connection</guimenu>.
    </para>
    <para>
     To first ask the server whether it supports TLS encryption and be able
     to downgrade to an unencrypted connection if it does not, use
     <guimenu>Secure Communication via StartTLS</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Activate other options as necessary:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       You can <guimenu>Allow users to authenticate via LDAP</guimenu> and
       <guimenu>Automatically Create Home Directories</guimenu> on the local
       computer for them.
      </para>
     </listitem>
     <listitem>
      <para>
       Use <guimenu>Cache LDAP Entries For Faster Response</guimenu> to cache
       LDAP entries locally. However, this bears the danger that entries can
       be slightly out of date.
      </para>
     </listitem>
     <listitem>
      <para>
       Specify the types of data that should be used from the LDAP source,
       such as
       <guimenu>Users</guimenu> and <guimenu>Groups</guimenu>,
       <guimenu>Super-User Commands</guimenu>, and <guimenu>Network Disk
       Locations</guimenu> (network-shared drives that can be automatically
       mounted on request).
      </para>
     </listitem>
     <listitem>
      <para>
       Specify the distinguished name (DN) and password of the user under
       whose name you want to bind to the LDAP directory in <guimenu>DN of
       Bind User</guimenu> and <guimenu>Password of the Bind User</guimenu>.
      </para>
      <para>
       Otherwise, if the server supports it, you can also leave both text
       boxes empty to bind anonymously to the server.
      </para>
      <warning>
       <title>Authentication Without Encryption</title>
       <para>
        When using authentication without enabling transport encryption
        using TLS or StartTLS, the password will be transmitted in the clear.
       </para>
       <remark>
        Is the YaST dialog compatible with SASL in any way? - sknorr,
        2017-03-01
       </remark>
      </warning>
     </listitem>
    </itemizedlist>
    <para>
     Under <guimenu>Extended Options</guimenu>, you can additionally
     configure timeouts for BIND operations.
    </para>
   </step>
   <step>
    <para>
     To check whether the LDAP connection works, click
     <guimenu>Test Connection</guimenu>.
    </para>
   </step>
   <step>
    <para>
     To leave the dialog, click <guimenu>OK</guimenu>. Then wait for the
     setup to complete.
    </para>
    <para>
     Finally, click <guimenu>Finish</guimenu>.
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.security.ldap.yast.usergr">
  <title>Configuring LDAP Users and Groups in &yast;</title>

  <para>
   The actual registration of user and group data differs only slightly from
   the procedure when not using LDAP. The following instructions relate to
   the administration of users. The procedure for administering groups is
   analogous.
  </para>

  <procedure>
   <step>
    <para>
     Access the &yast; user administration with <menuchoice>
     <guimenu>Security and Users</guimenu><guimenu>User and Group
     Management</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Use <guimenu>Set Filter</guimenu> to limit the view of users to the
     LDAP users and enter the password for Root DN.
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add</guimenu> to enter the user configuration. A dialog
     with four tabs opens:
    </para>
    <substeps performance="required">
     <step>
      <para>
       Specify the user's name, login name, and password in the
       <guimenu>User Data</guimenu> tab.
      </para>
     </step>
     <step>
      <para>
       Check the <guimenu>Details</guimenu> tab for the group membership,
       login shell, and home directory of the new user. If necessary, change
       the default to values that better suit your needs.
<!-- The default values
       (as well as those of the password settings) can be defined with the
       procedure described in
       <xref linkend="sec.security.auth.yast.client.conf.mod"/>.-->
      </para>
     </step>
     <step>
      <para>
       Modify or accept the default <guimenu>Password Settings</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Enter the <guimenu>Plug-Ins</guimenu> tab, select the LDAP plug-in,
       and click <guimenu>Launch</guimenu> to configure additional LDAP
       attributes assigned to the new user.
<!-- (see
       <xref linkend="fig.ldap.y2.adset"/>).-->
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Click <guimenu>OK</guimenu> to apply your settings and leave the user
     configuration.
    </para>
   </step>
  </procedure>

<!--
  <figure id="fig.ldap.y2.adset">
   <title>&yast;: Additional LDAP Settings</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ldap_y2_adset.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ldap_y2_adset.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>
  -->

  <para>
   The initial input form of user administration offers <guimenu>LDAP
   Options</guimenu>. This allows you to apply LDAP search filters to the
   set of available users. Alternatively open the module for configuring
   LDAP users and groups by selecting <guimenu>LDAP User and Group
   Configuration</guimenu>.
  </para>
 </sect1>

 <sect1 xml:id="sec.security.ldap.slapd" os="sles;osuse">
  <title>Manually Configuring an LDAP Server</title>

<!--
  <para>
   Your installed system contains a complete configuration file for your
   LDAP server at <filename>/etc/openldap/slapd.conf</filename>. The single
   entries are briefly described here and necessary adjustments are
   explained. Entries prefixed with a hash (#) are inactive. This comment
   character must be removed to activate them.
  </para>
-->

  <para>
   &yast; uses OpenLDAP's dynamic configuration database
   (<systemitem>back-config</systemitem>) to store the LDAP server's
   configuration. For details about the dynamic configuration back-end, see
   the <systemitem>slapd-config(5)</systemitem> man page or the OpenLDAP
   Software 2.4 Administrator's Guide located at
   <filename>/usr/share/doc/packages/openldap2/guide/admin/guide.html</filename>
   on your system if the <systemitem>openldap2</systemitem> package is
   installed.
  </para>

  <tip>
   <title>Upgrading an Old OpenLDAP Installation</title>
   <para>
    &yast; does not use <filename>/etc/openldap/slapd.conf</filename> to
    store the OpenLDAP configuration anymore. In case of a system upgrade, a
    copy of the original <filename>/etc/openldap/slapd.conf</filename> file
    will get created as
    <filename>/etc/openldap/slapd.conf.YaSTsave</filename>.
   </para>
  </tip>

  <para>
   To conveniently access the configuration back-end, you use SASL external
   authentication. For example, the following <command>ldapsearch</command>
   command executed as &rootuser; can show the complete
   <command>slapd</command> configuration:
  </para>

<screen>ldapsearch -Y external -H ldapi:/// -b cn=config</screen>

  <note>
<!-- bnc#911409 -->
   <title>LDAP Server Is Part of the Authentication Server</title>
   <para>
    Basic LDAP Server initialization and configuration can be done within
    the Authentication Server &yast; module. For more information, see
    <xref linkend="sec.security.auth.yast"/>.
   </para>
  </note>

<!-- Why is this commented away? At least the initial bits look okay-ish.
svn.opensuse.org is not much of a help either, since this has been there
since the initial import. And the internal SVN ... seems to say the comment
characters were added when formatting with xmlformat (Apr 28, 2009). Ugh.
- sknorr, 2017-02-10 -->
<!--
  <sect2 id="sec.security.ldap.slapd.global">
   <title>Global Directives in slapd.conf</title>
   <example id="aus.ldap.slapd.include">
    <title>slapd.conf: Include Directive for Schemas</title>
<screen>include         /etc/openldap/schema/core.schema
include         /etc/openldap/schema/cosine.schema
include         /etc/openldap/schema/inetorgperson.schema
include         /etc/openldap/schema/rfc2307bis.schema
include         /etc/openldap/schema/yast.schema</screen>
   </example>
   <para>
    This first directive in <filename>/etc/openldap/slapd.conf</filename>, shown in
    <xref linkend="aus.ldap.slapd.include"/>, specifies the Schema by which
    the LDAP directory is organized. The entry
    <filename>core.schema</filename> is required. Additionally required
    Schemas are appended to this directive. Find information in the included
    OpenLDAP documentation.
   </para>
   <example id="aus.ldap.slapd.pid">
    <title>slapd.conf: pidfile and argsfile</title>
<screen>pidfile /var/run/slapd/slapd.pid
argsfile /var/run/slapd/slapd.args</screen>
   </example>
   <para>
    These two files contain the PID (process ID) and some arguments
    the <command>slapd</command> process is started with. There is no need
    for modifications here.
   </para>
   <example id="aus.ldap.slapd.acl">
    <title>slapd.conf: Access Control</title>
<screen># Sample Access Control
#       Allow read access of root DSE
# Allow self write access
#       Allow authenticated users read access
#       Allow anonymous users to authenticate
# access to dn="" by * read
  access to * by self write
              by users read
              by anonymous auth
#
# if no access controls are present, the default is:
#       Allow read by all
#
# rootdn can always write!</screen>
   </example>
   <para>
    <xref linkend="aus.ldap.slapd.acl"/> is the excerpt from
    <filename>slapd.conf</filename> that regulates the access permissions
    for the LDAP directory on the server. The settings made here in the
    global section of <filename>slapd.conf</filename> are valid as long as
    no custom access rules are declared in the database-specific section.
    These would overwrite the global declarations. As presented here, all
    users have read access to the directory, but only the administrator
    (<literal>rootdn</literal>) can write to this directory. Access control
    regulation in LDAP is a highly complex process. The following tips can
    help:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Every access rule has the following structure:
     </para>
<screen>access to <replaceable>WHAT</replaceable> by <replaceable>WHO</replaceable> <replaceable>ACCESS_TYPE</replaceable></screen>
    </listitem>
    <listitem>
     <para>
      <replaceable>WHAT</replaceable> is a placeholder for the object or
      attribute to which access is granted. Individual directory branches
      can be protected explicitly with separate rules. It is also possible
      to process regions of the directory tree with one rule by using
      regular expressions. <command>slapd</command> evaluates all rules in
      the order in which they are listed in the configuration file. More
      general rules should be listed after more specific ones&mdash;
      <command>slapd</command> will apply the first rule that matches, and
      all the following rules are ignored.
     </para>
    </listitem>
    <listitem>
     <para>
      <replaceable>WHO</replaceable> determines who should be granted access
      to the areas determined with <replaceable>WHAT</replaceable>. Regular
      expressions may be used. <command>slapd</command> again aborts the
      evaluation of <systemitem>who</systemitem> after the first match, so
      more specific rules should be listed before the more general ones. The
      entries shown in <xref linkend="tab.ldap.acl.who"/> are possible.
     </para>
     <table id="tab.ldap.acl.who">
      <title>User Groups and Their Access Grants</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>
          <para>
           Tag
          </para>
         </entry>
         <entry>
          <para>
           Scope
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <literal>*</literal>
          </para>
         </entry>
         <entry>
          <para>
           All users without exception
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>anonymous</literal>
          </para>
         </entry>
         <entry>
          <para>
           Not authenticated (<quote>anonymous</quote>) users
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>users</literal>
          </para>
         </entry>
         <entry>
          <para>
           Authenticated users
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>self</literal>
          </para>
         </entry>
         <entry>
          <para>
           Users connected with the target object
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>dn.regex=&lt;regex&gt;</literal>
          </para>
         </entry>
         <entry>
          <para>
           All users matching the regular expression
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </listitem>
    <listitem>
     <para>
      <replaceable>ACCESS</replaceable> specifies the type of access. Use
      the options listed in <xref linkend="tab.ldap.acl.access"/>.
     </para>
     <table id="tab.ldap.acl.access">
      <title>Types of Access</title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>
          <para>
           Tag
          </para>
         </entry>
         <entry>
          <para>
           Scope of Access
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <literal>none</literal>
          </para>
         </entry>
         <entry>
          <para>
           No access
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>auth</literal>
          </para>
         </entry>
         <entry>
          <para>
           For contacting the server
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>compare</literal>
          </para>
         </entry>
         <entry>
          <para>
           To objects for comparison access
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>search</literal>
          </para>
         </entry>
         <entry>
          <para>
           For the employment of search filters
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>read</literal>
          </para>
         </entry>
         <entry>
          <para>
           Read access
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>write</literal>
          </para>
         </entry>
         <entry>
          <para>
           Write access
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <para>
      <command>slapd</command> compares the access right requested by the
      client with those granted in <filename>slapd.conf</filename>. The
      client is granted access if the rules allow a higher or equal right
      than the requested one. If the client requests higher rights than
      those declared in the rules, it is denied access.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    <xref linkend="aus.ldap.slapd.aclex"/> shows an example of a simple
    access control that can be arbitrarily developed using regular
    expressions.
   </para>
   <example id="aus.ldap.slapd.aclex">
    <title>slapd.conf: Example for Access Control</title>
<screen>access to  dn.regex="ou=([^,]+),dc=example,dc=com"
by dn.regex="cn=Administrator,ou=$1,dc=example,dc=com" write
by user read
by * none</screen>
   </example>
   <para>
    This rule declares that only its respective administrator has write
    access to an individual <literal>ou</literal> entry. All other
    authenticated users have read access and the rest of the world has no
    access.
   </para>
   <tip>
    <title>Establishing Access Rules</title>
    <para>
     If there is no <literal>access to</literal> rule or no matching
     <option>by</option> directive, access is denied. Only explicitly
     declared access rights are granted. If no rules are declared at all,
     the default principle is write access for the administrator and read
     access for the rest of the world.
    </para>
   </tip>
   <para>
    Find detailed information and an example configuration for LDAP access
    rights in the online documentation of the installed
    <systemitem class="resource">openldap2</systemitem> package.
   </para>
   <para>
    Apart from the possibility to administer access permissions with the
    central server configuration file (<filename>slapd.conf</filename>),
    there is access control information (ACI). ACI allows storage of the
    access information for individual objects within the LDAP tree. This
    type of access control is not yet common and is still considered
    experimental by the developers. Refer to
    <ulink
    url="http://www.openldap.org/faq/data/cache/758.html"/> for
    information.
   </para>
  </sect2>

  <sect2 id="sec.security.ldap.slapd.db">
   <title>Database-Specific Directives in slapd.conf</title>
   <example id="aus.ldap.slapd.bdb">
    <title>slapd.conf: Database-Specific Directives</title>
<screen>database bdb<co id="co.db"/>
suffix "dc=example,dc=com"<co id="co.suffix"/>
checkpoint      1024    5<co id="co.checkp"/>
cachesize       10000<co id="co.cache"/>
rootdn "cn=Administrator,dc=example,dc=com"<co id="co.rootdn"/>
# Cleartext passwords, especially for the rootdn, should
# be avoided.  See slappasswd(8) and slapd.conf(5) for details.
# Use of strong authentication encouraged.
rootpw secret<co id="co.rootpw"/>
# The database directory MUST exist prior to running slapd AND
# should only be accessible by the slapd/tools. Mode 700 recommended.
directory /var/lib/ldap<co id="co.dir"/>
# Indices to maintain
index   objectClass     eq<co id="co.index"/>
overlay ppolicy<co id="co.ppolicy"/>
ppolicy_default "cn=Default Password Policy,dc=example,dc=com"
ppolicy_hash_cleartext
ppolicy_use_lockout</screen>
   </example>
   <calloutlist>
    <callout arearefs="co.db">
     <para>
      The type of database, a Berkeley database in this case, is set in the
      first line of this section (see
      <xref
     linkend="aus.ldap.slapd.bdb"/>).
     </para>
    </callout>
    <callout arearefs="co.suffix">
     <para>
      <literal>suffix</literal> determines for which portion of the LDAP
      tree this server should be responsible.
     </para>
    </callout>
    <callout arearefs="co.checkp">
     <para>
      <literal>checkpoint</literal> determines the amount of data (in KB)
      that is kept in the transaction log before it is written to the actual
      database and the time (in minutes) between two write actions.
     </para>
    </callout>
    <callout arearefs="co.cache">
     <para>
      <literal>cachesize</literal> sets the number of objects kept in the
      database's cache.
     </para>
    </callout>
    <callout arearefs="co.rootdn">
     <para>
      <literal>rootdn</literal> determines who owns administrator rights to
      this server. The user declared here does not need to have an LDAP
      entry or exist as regular user.
     </para>
    </callout>
    <callout arearefs="co.rootpw">
     <para>
      <literal>rootpw</literal> sets the administrator password. Instead of
      using <literal>secret</literal> here, it is possible to enter the hash
      of the administrator password created by
      <command>slappasswd</command>.
     </para>
    </callout>
    <callout arearefs="co.dir">
     <para>
      The <literal>directory</literal> directive indicates the directory in
      the file system where the database directories are stored on the
      server.
     </para>
    </callout>
    <callout arearefs="co.index">
     <para>
      The last directive, <literal>index objectClass eq</literal>, results
      in the maintenance of an index of all object classes. Attributes for
      which users search most often can be added here according to
      experience.
     </para>
    </callout>
    <callout arearefs="co.ppolicy">
     <para>
      <literal>overlay ppolicy</literal> adds a layer of password control
      mechanisms. <literal>ppolicy_default</literal> specifies the DN of the
      pwdPolicy object to use when no specific policy is set on a given
      user's entry. If there is no specific policy for an entry and no
      default is given, no policies are enforced.
      <literal>ppolicy_hash_cleartext</literal> specifies that clear text
      passwords present in add and modify requests are hashed before being
      stored in the database. When this option is used, it is recommended to
      deny compare, search, and read access to the
      <literal>userPassword</literal> attribute for all directory users,
      because <literal>ppolicy_hash_cleartext</literal> violates the
      X.500/LDAP information model. <literal>ppolicy_use_lockout</literal>
      sends a specific error code when a client tries to connect to a locked
      account. When your site is sensitive to security issues, disable this
      option as the error code provides useful information to attackers.
     </para>
    </callout>
   </calloutlist>
   <para>
    Custom <literal>Access</literal> rules defined here for the database are
    used instead of the global <literal>Access</literal> rules.
   </para>
  </sect2>
-->

  <!-- <sect2 xml:id="sec.security.ldap.slapd.start"> -->
  <!--  <title>Starting and Stopping the Servers</title> -->
   <para>
    When the LDAP server is fully configured and all desired entries have
    been made according to the pattern described in
    <xref linkend="sec.security.ldap.data"/>, start the LDAP server as
    &rootuser; by entering <command>sudo systemctl start
    slapd</command>. To stop the server manually, enter the command
    <command>sudo systemctl stop slapd</command>. Query the status of
    the running LDAP server with <command>sudo systemctl status
    slapd</command>.
   </para>
   <para>
    Use the &yast; <guimenu>&ycc_runlevel;</guimenu>, described in
    <xref linkend="sec.boot.runlevel.edit"/>, to have the server started and
    stopped automatically on system bootup and shutdown. You can also
    create the corresponding links to the start and stop scripts with the
    <command>systemctl</command> commands as described
    in <xref linkend="sec.boot.systemd.basics.services"/>.
   </para>
  <!-- </sect2> -->
 </sect1>
<!-- ==================================================================== -->
 <sect1 xml:id="sec.security.ldap.data" os="sles;osuse">
  <title>Manually Administering LDAP Data</title>

  <para>
   OpenLDAP offers a series of tools for the administration of data in the
   LDAP directory. The four most important tools for adding to, deleting
   from, searching through and modifying the data stock are explained in
   this section.
  </para>

  <sect2 xml:id="sec.security.ldap.data.add">
   <title>Inserting Data into an LDAP Directory</title>
   <para>
    Once your LDAP server
<!--in
    <filename>/etc/openldap/slapd.conf</filename>-->
    is correctly configured (it features appropriate entries for
    <literal>suffix</literal>, <literal>directory</literal>,
    <literal>rootdn</literal>, <literal>rootpw</literal> and
    <literal>index</literal>), proceed to entering records. OpenLDAP offers
    the <command>ldapadd</command> command for this task. If possible, add
    the objects to the database in bundles (for practical reasons). LDAP
    can process the LDIF format (LDAP data interchange format) for this.
    An LDIF file is a simple text file that can contain an arbitrary number
    of attribute and value pairs.
<!-- Refer
    to the Schema files declared in <filename>slapd.conf</filename> for the
    available object classes and attributes.-->
    The LDIF file for creating a rough framework for the example in
    <xref linkend="fig.ldap.tree"/> would look like the one in
    <xref linkend="dat.ldap.ldif"/>.
   </para>
   <important>
    <title>Encoding of LDIF Files</title>
    <para>
<!-- UTF-8 is the default since ages now...-->
     LDAP works with UTF-8 (Unicode). Umlauts must be encoded correctly.
     Otherwise, avoid umlauts and other special characters or use
     <command>iconv</command> to convert the input to UTF-8.
    </para>
   </important>
   <example xml:id="dat.ldap.ldif">
    <title>An LDIF File</title>
<screen># The Organization
dn: dc=example,dc=com
objectClass: dcObject
objectClass: organization
o: Example dc: example

# The organizational unit development (devel)
dn: ou=devel,dc=example,dc=com
objectClass: organizationalUnit
ou: devel

# The organizational unit documentation (doc)
dn: ou=doc,dc=example,dc=com
objectClass: organizationalUnit
ou: doc

# The organizational unit internal IT (it)
dn: ou=it,dc=example,dc=com
objectClass: organizationalUnit
ou: it</screen>
   </example>
   <para>
    Save the file with the <filename>.ldif</filename> suffix then pass it to
    the server with the following command:
   </para>
<screen>ldapadd -x -D <replaceable>DN_OF_THE_ADMINISTRATOR</replaceable> -W -f <replaceable>FILE</replaceable>.ldif</screen>
   <para>
    <literal>-x</literal> switches off the authentication with SASL in this
    case. <literal>-D</literal> declares the user that calls the operation.
    The valid DN of the administrator is entered here, as it has been
    configured in <filename>slapd.conf</filename>. In the current example,
    this is <literal>cn=Administrator,dc=example,dc=com</literal>.
    <literal>-W</literal> circumvents entering the password on the command
    line (in clear text) and activates a separate password prompt.
<!-- This
    password was previously determined in <filename>slapd.conf</filename>
    with <literal>rootpw</literal>. -->
    The <literal>-f</literal> option passes the file name. See the details
    of running <command>ldapadd</command> in
    <xref linkend="aus.ldap.addentry"/>.
   </para>
   <example xml:id="aus.ldap.addentry">
    <title>ldapadd with example.ldif</title>
<screen>ldapadd -x -D cn=Administrator,dc=example,dc=com -W -f example.ldif

Enter LDAP password:
adding new entry "dc=example,dc=com"
adding new entry "ou=devel,dc=example,dc=com"
adding new entry "ou=doc,dc=example,dc=com"
adding new entry "ou=it,dc=example,dc=com"</screen>
   </example>
   <para>
    The user data of individuals can be prepared in separate LDIF files.
    <xref linkend="aus.ldap.addtux"/> adds
    <systemitem class="username">Tux</systemitem> to the new LDAP directory.
   </para>
   <example xml:id="aus.ldap.addtux">
    <title>LDIF Data for Tux</title>
<screen># coworker Tux
dn: cn=Tux Linux,ou=devel,dc=example,dc=com
objectClass: inetOrgPerson
cn: Tux Linux
givenName: Tux
sn: Linux
mail: tux@example.com
uid: tux
telephoneNumber: +49 1234 567-8</screen>
   </example>
   <para>
    An LDIF file can contain an arbitrary number of objects. It is possible
    to pass directory branches (entirely or in part) to the server in one
    go, as shown in the example of individual objects. If it is necessary to
    modify some data relatively often, a fine subdivision of single objects
    is recommended.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.ldap.data.change">
   <title>Modifying Data in the LDAP Directory</title>
   <para>
    The tool <command>ldapmodify</command> is provided for modifying the
    data stock. The easiest way to do this is to modify the corresponding
    LDIF file and pass the modified file to the LDAP server. To change the
    telephone number of colleague Tux from <literal>+49 1234 567-8</literal>
    to <literal>+49 1234 567-10</literal>, edit the LDIF file like in
    <xref linkend="aus.ldap.ldif.tux"/>.
   </para>
   <example xml:id="aus.ldap.ldif.tux">
    <title>Modified LDIF File tux.ldif</title>
<screen># coworker Tux
dn: cn=Tux Linux,ou=devel,dc=example,dc=com
changetype: modify
replace: telephoneNumber
telephoneNumber: +49 1234 567-10</screen>
   </example>
   <para>
    Import the modified file into the LDAP directory with the following
    command:
   </para>
<screen>ldapmodify -x -D cn=Administrator,dc=example,dc=com -W -f tux.ldif</screen>
   <para>
    Alternatively, pass the attributes to change directly to
    <command>ldapmodify</command> as follows:
   </para>
   <procedure>
    <step>
     <para>
      Start <command>ldapmodify</command> and enter your password:
     </para>
<screen>ldapmodify -x -D cn=Administrator,dc=example,dc=com -W
Enter LDAP password:</screen>
    </step>
    <step>
     <para>
      Enter the changes while carefully complying with the syntax in the
      order presented below:
     </para>
<screen>dn: cn=Tux Linux,ou=devel,dc=example,dc=com
changetype: modify
replace: telephoneNumber
telephoneNumber: +49 1234 567-10</screen>
    </step>
   </procedure>
   <para>
    For more information about <command>ldapmodify</command> and its syntax,
    see the <command>ldapmodify</command> man page.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.ldap.data.search">
   <title>Searching or Reading Data from an LDAP Directory</title>
   <para>
    OpenLDAP provides, with <command>ldapsearch</command>, a command line
    tool for searching data within an LDAP directory and reading data from
    it. This is a simple query:
   </para>
<screen>ldapsearch -x -b dc=example,dc=com "(objectClass=*)"</screen>
   <para>
    The <option>-b</option> option determines the search base (the section
    of the tree within which the search should be performed). In the current
    case, this is <literal>dc=example,dc=com</literal>. To perform a more
    finely-grained search in specific subsections of the LDAP directory (for
    example, only within the <literal>devel</literal> department), pass this
    section to <command>ldapsearch</command> with <option>-b</option>.
    <option>-x</option> requests activation of simple authentication.
    <literal>(objectClass=*)</literal> declares that all objects contained
    in the directory should be read. This command option can be used after
    the creation of a new directory tree to verify that all entries have
    been recorded correctly and the server responds as desired. For more
    information about the use of <command>ldapsearch</command>, see the
    <systemitem>ldapsearch(1)</systemitem> man page.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.ldap.data.del">
   <title>Deleting Data from an LDAP Directory</title>
   <para>
    Delete unwanted entries with <command>ldapdelete</command>. The syntax
    is similar to that of the other commands. To delete, for example, the
    complete entry for <literal>Tux Linux</literal>, issue the following
    command:
   </para>
<screen>ldapdelete -x -D cn=Administrator,dc=example,dc=com -W cn=Tux \
Linux,ou=devel,dc=example,dc=com</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.security.ldap.info">
  <title>For More Information</title>

  <para>
   More complex subjects (like SASL configuration or establishment of a
   replicating LDAP server that distributes the workload among multiple
   slaves) were omitted from this chapter. Find detailed information about
   both subjects in the <emphasis>OpenLDAP 2.4 Administrator's
   Guide</emphasis>&mdash;see at
   <xref linkend="list.ldap.info.adminguide"/>.
  </para>

  <para>
   The Web site of the OpenLDAP project offers exhaustive documentation for
   beginner and advanced LDAP users:
  </para>

  <variablelist>
   <varlistentry>
    <term>OpenLDAP Faq-O-Matic</term>
    <listitem>
     <para>
      A detailed question and answer collection applying to the
      installation, configuration, and use of OpenLDAP. Find it at
      <link xlink:href="http://www.openldap.org/faq/data/cache/1.html"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Quick Start Guide</term>
    <listitem>
     <para>
      Brief step-by-step instructions for installing your first LDAP server.
      Find it at
      <link xlink:href="http://www.openldap.org/doc/admin24/quickstart.html"/>
      or on an installed system in Section 2 of
      <filename>/usr/share/doc/packages/openldap2/guide/admin/guide.html</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="list.ldap.info.adminguide">
    <term>OpenLDAP 2.4 Administrator's Guide</term>
    <listitem>
     <para>
      A detailed introduction to all important aspects of LDAP
      configuration, including access controls and encryption. See
      <link xlink:href="http://www.openldap.org/doc/admin24/"/> or, on an
      installed system,
      <filename>/usr/share/doc/packages/openldap2/guide/admin/guide.html</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Understanding LDAP</term>
    <listitem>
     <para>
      A detailed general introduction to the basic principles of LDAP:
      <link xlink:href="http://www.redbooks.ibm.com/redbooks/pdfs/sg244986.pdf"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   Printed literature about LDAP:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <citetitle>LDAP System Administration</citetitle> by Gerald Carter
     (ISBN 1-56592-491-6)
    </para>
   </listitem>
   <listitem>
    <para>
     <citetitle>Understanding and Deploying LDAP Directory
     Services</citetitle> by Howes, Smith, and Good (ISBN 0-672-32316-8)
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The ultimate reference material for the subject of LDAP are the
   corresponding RFCs (request for comments), 2251 to 2256.
  </para>
 </sect1>
</chapter>
