<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-tracing">
 <title>Tracing Tools</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>
  &productname; comes with several tools that help you obtain useful
  information about your system. You can use the information for various
  purposes, for example, to debug and find problems in your program, to
  discover places causing performance drops, or to trace a running process to
  find out what system resources it uses. <phrase os="sles;sled">Most of the
  tools are part of the installation media. In some cases, they need to be
  installed from the &sdk;, which is a separate download.</phrase>
 </para>
 <note>
  <title>Tracing and Impact on Performance</title>
  <para>
   While a running process is being monitored for system or library calls,
   the performance of the process is heavily reduced. You are advised to use
   tracing tools only for the time you need to collect the data.
  </para>
 </note>
 <sect1 xml:id="sec-tuning-tracing-strace">
  <title>Tracing System Calls with strace</title>

  <para>
   The <command>strace</command> command traces system calls of a process
   and signals received by the process. <command>strace</command> can either
   run a new command and trace its system calls, or you can attach
   <command>strace</command> to an already running command. Each line of the
   command's output contains the system call name, followed by its arguments
   in parentheses and its return value.
  </para>

  <para>
   To run a new command and start tracing its system calls, enter the
   command to be monitored as you normally do, and add
   <command>strace</command> at the beginning of the command line:
  </para>

<screen>&prompt.user;strace ls
execve("/bin/ls", ["ls"], [/* 52 vars */]) = 0
brk(0)                                  = 0x618000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \
        = 0x7f9848667000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \
        = 0x7f9848666000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT \
(No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=200411, ...}) = 0
mmap(NULL, 200411, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f9848635000
close(3)                                = 0
open("/lib64/librt.so.1", O_RDONLY)     = 3
[...]
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \
= 0x7fd780f79000
write(1, "Desktop\nDocuments\nbin\ninst-sys\n", 31Desktop
Documents
bin
inst-sys
) = 31
close(1)                                = 0
munmap(0x7fd780f79000, 4096)            = 0
close(2)                                = 0
exit_group(0)                           = ?</screen>

  <para>
   To attach <command>strace</command> to an already running process, you
   need to specify the <option>-p</option> with the process ID
   (<systemitem>PID</systemitem>) of the process that you want to monitor:
  </para>

<screen>&prompt.user;strace -p `pidof cron`
 Process 1261 attached
 restart_syscall(&lt;... resuming interrupted call ...&gt;) = 0
  stat("/etc/localtime", {st_mode=S_IFREG|0644, st_size=2309, ...}) = 0
  select(5, [4], NULL, NULL, {0, 0})      = 0 (Timeout)
  socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 5
  connect(5, {sa_family=AF_LOCAL, sun_path="/var/run/nscd/socket"}, 110) = 0
  sendto(5, "\2\0\0\0\0\0\0\0\5\0\0\0root\0", 17, MSG_NOSIGNAL, NULL, 0) = 17
  poll([{fd=5, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=5, revents=POLLIN|POLLHUP}])
  read(5, "\2\0\0\0\1\0\0\0\5\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\5\0\0\0\6\0\0\0"..., 36) = 36
  read(5, "root\0x\0root\0/root\0/bin/bash\0", 28) = 28
  close(5)                                = 0
  rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0
  rt_sigaction(SIGCHLD, NULL, {0x7f772b9ea890, [], SA_RESTORER|SA_RESTART, 0x7f772adf7880}, 8) = 0
  rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
  nanosleep({60, 0}, 0x7fff87d8c580)      = 0
  stat("/etc/localtime", {st_mode=S_IFREG|0644, st_size=2309, ...}) = 0
  select(5, [4], NULL, NULL, {0, 0})      = 0 (Timeout)
  socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 5
  connect(5, {sa_family=AF_LOCAL, sun_path="/var/run/nscd/socket"}, 110) = 0
  sendto(5, "\2\0\0\0\0\0\0\0\5\0\0\0root\0", 17, MSG_NOSIGNAL, NULL, 0) = 17
  poll([{fd=5, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=5, revents=POLLIN|POLLHUP}])
  read(5, "\2\0\0\0\1\0\0\0\5\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\5\0\0\0\6\0\0\0"..., 36) = 36
  read(5, "root\0x\0root\0/root\0/bin/bash\0", 28) = 28
  close(5)
  [...]
</screen>

  <para>
   The <option>-e</option> option understands several sub-options and
   arguments. For example, to trace all attempts to open or write to a
   particular file, use the following:
  </para>

<screen>&prompt.user;strace -e trace=open,write ls ~
open("/etc/ld.so.cache", O_RDONLY)       = 3
open("/lib64/librt.so.1", O_RDONLY)      = 3
open("/lib64/libselinux.so.1", O_RDONLY) = 3
open("/lib64/libacl.so.1", O_RDONLY)     = 3
open("/lib64/libc.so.6", O_RDONLY)       = 3
open("/lib64/libpthread.so.0", O_RDONLY) = 3
[...]
open("/usr/lib/locale/cs_CZ.utf8/LC_CTYPE", O_RDONLY) = 3
open(".", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3
write(1, "addressbook.db.bak\nbin\ncxoffice\n"..., 311) = 311
</screen>

  <para>
   To trace only network related system calls, use <option>-e
   trace=network</option>:
  </para>

<screen>&prompt.user;strace -e trace=network -p 26520
Process 26520 attached - interrupt to quit
socket(PF_NETLINK, SOCK_RAW, 0)         = 50
bind(50, {sa_family=AF_NETLINK, pid=0, groups=00000000}, 12) = 0
getsockname(50, {sa_family=AF_NETLINK, pid=26520, groups=00000000}, \
[12]) = 0
sendto(50, "\24\0\0\0\26\0\1\3~p\315K\0\0\0\0\0\0\0\0", 20, 0,
{sa_family=AF_NETLINK, pid=0, groups=00000000}, 12) = 20
[...]</screen>

  <para>
   The <option>-c</option> calculates the time the kernel spent on each
   system call:
  </para>

<screen>&prompt.user;strace -c find /etc -name xorg.conf
/etc/X11/xorg.conf
% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 32.38    0.000181         181         1           execve
 22.00    0.000123           0       576           getdents64
 19.50    0.000109           0       917        31 open
 19.14    0.000107           0       888           close
  4.11    0.000023           2        10           mprotect
  0.00    0.000000           0         1           write
[...]
  0.00    0.000000           0         1           getrlimit
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0         3         1 futex
  0.00    0.000000           0         1           set_tid_address
  0.00    0.000000           0         4           fadvise64
  0.00    0.000000           0         1           set_robust_list
------ ----------- ----------- --------- --------- ----------------
100.00    0.000559                  3633        33 total</screen>

  <para>
   To trace all child processes of a process, use <option>-f</option>:
  </para>

<screen>
&prompt.user;strace -f systemctl status apache2.service
execve("/usr/bin/systemctl", ["systemctl", "status", "apache2.service"], \
 0x7ffea44a3318 /* 56 vars */) = 0
brk(NULL)                               = 0x5560f664a000
[...]
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f98c58a5000
mmap(NULL, 4420544, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f98c524a000
mprotect(0x7f98c53f4000, 2097152, PROT_NONE) = 0
[...]
[pid  9130] read(0, "\342\227\217 apache2.service - The Apache"..., 8192) = 165
[pid  9130] read(0, "", 8027)           = 0
● apache2.service - The Apache Webserver227\217 apache2.service - Th"..., 193
   Loaded: loaded (/usr/lib/systemd/system/apache2.service; disabled; vendor preset: disabled)
   Active: inactive (dead)
) = 193
[pid  9130] ioctl(3, SNDCTL_TMR_STOP or TCSETSW, {B38400 opost isig icanon echo ...}) = 0
[pid  9130] exit_group(0)               = ?
[pid  9130] +++ exited with 0 +++
&lt;... waitid resumed>{si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=9130, \
 si_uid=0, si_status=0, si_utime=0, si_stime=0}, WEXITED, NULL) = 0
--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=9130, si_uid=0, \
  si_status=0, si_utime=0, si_stime=0} ---
exit_group(3)                           = ?
+++ exited with 3 +++
</screen>

  <para>
   If you need to analyze the output of <command>strace</command> and the
   output messages are too long to be inspected directly in the console
   window, use <option>-o</option>. In that case, unnecessary messages, such
   as information about attaching and detaching processes, are suppressed.
   You can also suppress these messages (normally printed on the standard
   output) with <option>-q</option>. To add time stamps at the beginning of each line
   with a system call, use <option>-t</option>:
  </para>

<screen>&prompt.user;strace -t -o strace_sleep.txt sleep 1; more strace_sleep.txt
08:44:06 execve("/bin/sleep", ["sleep", "1"], [/* 81 vars */]) = 0
08:44:06 brk(0)                         = 0x606000
08:44:06 mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, \
-1, 0) = 0x7f8e78cc5000
[...]
08:44:06 close(3)                       = 0
08:44:06 nanosleep({1, 0}, NULL)        = 0
08:44:07 close(1)                       = 0
08:44:07 close(2)                       = 0
08:44:07 exit_group(0)                  = ?</screen>

  <para>
   The behavior and output format of strace can be largely controlled. For
   more information, see the relevant manual page (man 1 strace).
  </para>
 </sect1>
 <sect1 xml:id="sec-tuning-tracing-ltrace">
  <title>Tracing Library Calls with ltrace</title>

  <para>
   <command>ltrace</command> traces dynamic library calls of a process. It
   is used in a similar way to <command>strace</command>, and most of their
   parameters have a very similar or identical meaning. By default,
   <command>ltrace</command> uses <filename>/etc/ltrace.conf</filename> or
   <filename>~/.ltrace.conf</filename> configuration files. You can,
   however, specify an alternative one with the <option>-F
   <replaceable>CONFIG_FILE</replaceable></option> option.
  </para>

  <para>
   In addition to library calls, <command>ltrace</command> with the
   <option>-S</option> option can trace system calls as well:
  </para>

<screen>&prompt.user;ltrace -S -o ltrace_find.txt find /etc -name \
xorg.conf; more ltrace_find.txt
SYS_brk(NULL)                                              = 0x00628000
SYS_mmap(0, 4096, 3, 34, 0xffffffff)                       = 0x7f1327ea1000
SYS_mmap(0, 4096, 3, 34, 0xffffffff)                       = 0x7f1327ea0000
[...]
fnmatch("xorg.conf", "xorg.conf", 0)                       = 0
free(0x0062db80)                                           = &lt;void&gt;
__errno_location()                                         = 0x7f1327e5d698
__ctype_get_mb_cur_max(0x7fff25227af0, 8192, 0x62e020, -1, 0) = 6
__ctype_get_mb_cur_max(0x7fff25227af0, 18, 0x7f1327e5d6f0, 0x7fff25227af0,
0x62e031) = 6
__fprintf_chk(0x7f1327821780, 1, 0x420cf7, 0x7fff25227af0, 0x62e031
&lt;unfinished ...&gt;
SYS_fstat(1, 0x7fff25227230)                               = 0
SYS_mmap(0, 4096, 3, 34, 0xffffffff)                       = 0x7f1327e72000
SYS_write(1, "/etc/X11/xorg.conf\n", 19)                   = 19
[...]</screen>

  <para>
   You can change the type of traced events with the <option>-e</option>
   option. The following example prints library calls related to
   <systemitem>fnmatch</systemitem> and <systemitem>strlen</systemitem>
   functions:
  </para>

<screen>&prompt.user;ltrace -e fnmatch,strlen find /etc -name xorg.conf
[...]
fnmatch("xorg.conf", "xorg.conf", 0)             = 0
strlen("Xresources")                             = 10
strlen("Xresources")                             = 10
strlen("Xresources")                             = 10
fnmatch("xorg.conf", "Xresources", 0)            = 1
strlen("xorg.conf.install")                      = 17
[...]</screen>

  <para>
   To display only the symbols included in a specific library, use
   <option>-l <replaceable>/path/to/library</replaceable></option>:
  </para>

<screen>&prompt.user;ltrace -l /lib64/librt.so.1 sleep 1
clock_gettime(1, 0x7fff4b5c34d0, 0, 0, 0)                  = 0
clock_gettime(1, 0x7fff4b5c34c0, 0xffffffffff600180, -1, 0) = 0
+++ exited (status 0) +++</screen>

  <para>
   You can make the output more readable by indenting each nested call by
   the specified number of space with the <option>-n
   <replaceable>NUM_OF_SPACES</replaceable></option>.
  </para>
 </sect1>
 <sect1 xml:id="sec-tuning-tracing-valgrind">
  <title>Debugging and Profiling with Valgrind</title>

  <para>
   Valgrind is a set of tools to debug and profile your programs so that
   they can run both faster and with less errors. Valgrind can detect problems
   related to memory management and threading, or can also serve as a
   framework for building new debugging tools. It is well known that this
   tool can incur high overhead, causing, for example, higher runtimes or
   changing the normal program behavior under concurrent workloads based on timing.
  </para>

  <sect2 xml:id="sec-tuning-tracing-valgrind-install" os="sles;sled">
   <title>Installation</title>
   <para>
    Valgrind is not shipped with standard &productname; distribution. To
    install it on your system, you need to obtain &sdk;, and either
    install it and run
   </para>
   <para>
    <command>zypper</command> <option>install
    <replaceable>VALGRIND</replaceable></option>
   </para>
   <para>
    or browse through the &sdk; directory tree, locate the Valgrind
    package and install it with
   </para>
   <para>
    <command>rpm</command> <option>-i</option>
    valgrind-<replaceable>VERSION_ARCHITECTURE</replaceable>.rpm
   </para>
   <para>
    The SDK is a module for &sle; and is available via an online channel from
    the &scc;.  Alternatively download it from <link
    xlink:href="http://download.suse.com/"/>. (Search for <literal>&sle;
    Software Development Kit</literal>). Refer to <xref
    linkend="cha-add-ons"/> for details.
   </para>
  </sect2>

  <sect2 os="sles;sled" xml:id="sec-tuning-tracing-valgrind-supparch">
   <title>Supported Architectures</title>
   <para>
    &productname; supports Valgrind on the following architectures:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      &x86-64;
     </para>
    </listitem>
    <listitem>
     <para>
      &ppc;
     </para>
    </listitem>
    <listitem>
     <para>
      &zseries;
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-tuning-tracing-valgrind-core">
   <title>General Information</title>
   <para>
    The main advantage of Valgrind is that it works with existing compiled
    executables. You do not need to recompile or modify your programs to
    use it. Run Valgrind like this:
   </para>
   <para>
    <command>valgrind</command> <replaceable>VALGRIND_OPTIONS</replaceable>
    your-prog <replaceable>YOUR-PROGRAM-OPTIONS</replaceable>
   </para>
   <para>
    Valgrind consists of several tools, and each provides specific
    functionality. Information in this section is general and valid
    regardless of the used tool. The most important configuration option is
    <option>--tool</option>. This option tells Valgrind which tool to run.
    If you omit this option, <systemitem>memcheck</systemitem> is selected
    by default. For example, to run <command>find ~</command>
    <option>-name</option> .bashrc with Valgrind's
    <systemitem>memcheck</systemitem> tools, enter the following in the
    command line:
   </para>
   <para>
    <command>valgrind</command> <option>--tool</option>=memcheck find ~ -name
    .bashrc
   </para>
   <para>
    A list of standard Valgrind tools with a brief description follows:
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>memcheck</systemitem>
     </term>
     <listitem>
      <para>
       Detects memory errors. It helps you tune your programs to behave
       correctly.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>cachegrind</systemitem>
     </term>
     <listitem>
      <para>
       Profiles cache prediction. It helps you tune your programs to run
       faster.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>callgrind</systemitem>
     </term>
     <listitem>
      <para>
       Works in a similar way to <systemitem>cachegrind</systemitem> but
       also gathers additional cache-profiling information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>exp-drd</systemitem>
     </term>
     <listitem>
      <para>
       Detects thread errors. It helps you tune your multi-threaded programs
       to behave correctly.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>helgrind</systemitem>
     </term>
     <listitem>
      <para>
       Another thread error detector. Similar to
       <systemitem>exp-drd</systemitem> but uses different techniques for
       problem analysis.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>massif</systemitem>
     </term>
     <listitem>
      <para>
       A heap profiler. Heap is an area of memory used for dynamic memory
       allocation. This tool helps you tune your program to use less memory.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>lackey</systemitem>
     </term>
     <listitem>
      <para>
       An example tool showing instrumentation basics.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-tuning-tracing-valgrind-defopts">
   <title>Default Options</title>
   <para>
    Valgrind can read options at start-up. There are three places which
    Valgrind checks:
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      The file <filename>.valgrindrc</filename> in the home directory of the
      user who runs Valgrind.
     </para>
    </listitem>
    <listitem>
     <para>
      The environment variable <literal>$VALGRIND_OPTS</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      The file <filename>.valgrindrc</filename> in the current directory
      where Valgrind is run from.
     </para>
    </listitem>
   </orderedlist>
   <para>
    These resources are parsed exactly in this order, while later given
    options take precedence over earlier processed options. Options specific
    to a particular Valgrind tool must be prefixed with the tool name and a
    colon. For example, if you want <systemitem>cachegrind</systemitem> to
    always write profile data to the
    <filename>/tmp/cachegrind_<replaceable>PID</replaceable>.log</filename>,
    add the following line to the <filename>.valgrindrc</filename> file in
    your home directory:
   </para>
   <para>
    <literal>--cachegrind:cachegrind-out-file=/tmp/cachegrind_%p.log</literal>
   </para>
  </sect2>

  <sect2 xml:id="sec-tuning-tracing-valgrind-howorks">
   <title>How Valgrind Works</title>
   <para>
    Valgrind takes control of your executable before it starts. It reads
    debugging information from the executable and related shared libraries.
    The executable's code is redirected to the selected Valgrind tool, and
    the tool adds its own code to handle its debugging. Then the code is
    handed back to the Valgrind core and the execution continues.
   </para>
   <para>
    For example, <systemitem>memcheck</systemitem> adds its code, which
    checks every memory access. As a consequence, the program runs much
    slower than in the native execution environment.
   </para>
   <para>
    Valgrind simulates every instruction of your program. Therefore, it not
    only checks the code of your program, but also all related libraries
    (including the C library), libraries used for graphical environment, and
    so on. If you try to detect errors with Valgrind, it also detects errors
    in associated libraries (like C, X11, or Gtk libraries). Because you
    probably do not need these errors, Valgrind can selectively, suppress
    these error messages to suppression files. The
    <option>--gen-suppressions=yes</option> tells Valgrind to report these
    suppressions which you can copy to a file.
   </para>
   <para>
    You should supply a real executable (machine code) as a Valgrind
    argument. If your application is run, for example, from a shell or Perl
    script, you will by mistake get error reports related to
    <command>/bin/sh</command> (or <command>/usr/bin/perl</command>). In
    such cases, you can use
    <option>--trace-children=yes</option> to work
    around this issue. However, using the executable itself will avoid any
    confusion over this issue.
   </para>
  </sect2>

  <sect2 xml:id="sec-tuning-tracing-valgrind-messages">
   <title>Messages</title>
   <para>
    During its runtime, Valgrind reports messages with detailed errors and
    important events. The following example explains the messages:
   </para>
<screen>&prompt.user;valgrind --tool=memcheck find ~ -name .bashrc
[...]
==6558== Conditional jump or move depends on uninitialised value(s)
==6558==    at 0x400AE79: _dl_relocate_object (in /lib64/ld-2.11.1.so)
==6558==    by 0x4003868: dl_main (in /lib64/ld-2.11.1.so)
[...]
==6558== Conditional jump or move depends on uninitialised value(s)
==6558==    at 0x400AE82: _dl_relocate_object (in /lib64/ld-2.11.1.so)
==6558==    by 0x4003868: dl_main (in /lib64/ld-2.11.1.so)
[...]
==6558== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
==6558== malloc/free: in use at exit: 2,228 bytes in 8 blocks.
==6558== malloc/free: 235 allocs, 227 frees, 489,675 bytes allocated.
==6558== For counts of detected errors, rerun with: -v
==6558== searching for pointers to 8 not-freed blocks.
==6558== checked 122,584 bytes.
==6558==
==6558== LEAK SUMMARY:
==6558==    definitely lost: 0 bytes in 0 blocks.
==6558==      possibly lost: 0 bytes in 0 blocks.
==6558==    still reachable: 2,228 bytes in 8 blocks.
==6558==         suppressed: 0 bytes in 0 blocks.
==6558== Rerun with --leak-check=full to see details of leaked memory.</screen>
   <para>
    The <literal>==6558==</literal> introduces Valgrind's messages and
    contains the process ID number (PID). You can easily distinguish
    Valgrind's messages from the output of the program itself, and decide
    which messages belong to a particular process.
   </para>
   <para>
    To make Valgrind's messages more detailed, use <option>-v</option> or
    even <option>-v -v</option>.
   </para>
   <para>
    You can make Valgrind send its messages to three different places:
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      By default, Valgrind sends its messages to the file descriptor 2,
      which is the standard error output. You can tell Valgrind to send its
      messages to any other file descriptor with the
      <option>--log-fd=<replaceable>FILE_DESCRIPTOR_NUMBER</replaceable></option>
      option.
     </para>
    </listitem>
    <listitem>
     <para>
      The second and probably more useful way is to send Valgrind's messages
      to a file with
      <option>--log-file=<replaceable>FILENAME</replaceable></option>. This
      option accepts several variables, for example, <literal>%p</literal>
      gets replaced with the PID of the currently profiled process. This way
      you can send messages to different files based on their PID.
      <literal>%q{env_var}</literal> is replaced with the value of the
      related <literal>env_var</literal> environment variable.
     </para>
     <para>
      The following example checks for possible memory errors during the
      Apache Web server restart, while following children processes and
      writing detailed Valgrind's messages to separate files distinguished
      by the current process PID:
     </para>
<screen>&prompt.user;valgrind -v --tool=memcheck --trace-children=yes \
--log-file=valgrind_pid_%p.log systemctl restart apache2.service</screen>
     <para>
      This process created 52 log files in the testing system, and took 75
      seconds instead of the usual 7 seconds needed to run <command>sudo
       systemctl restart apache2.service</command> without Valgrind, which is
      approximately 10 times more.
     </para>
<screen>&prompt.user;ls -1 valgrind_pid_*log
valgrind_pid_11780.log
valgrind_pid_11782.log
valgrind_pid_11783.log
[...]
valgrind_pid_11860.log
valgrind_pid_11862.log
valgrind_pid_11863.log</screen>
    </listitem>
    <listitem>
     <para>
      You may also prefer to send the Valgrind's messages over the network.
      You need to specify the <literal>aa.bb.cc.dd</literal> IP address and
      <literal>port_num</literal> port number of the network socket with the
      <option>--log-socket=<replaceable>AA.BB.CC.DD:PORT_NUM</replaceable></option>
      option. If you omit the port number, 1500 will be used.
     </para>
     <para>
      It is useless to send Valgrind's messages to a network socket if no
      application is capable of receiving them on the remote machine. That
      is why <command>valgrind-listener</command>, a simple listener, is
      shipped together with Valgrind. It accepts connections on the
      specified port and copies everything it receives to the standard
      output.
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 xml:id="sec-tuning-tracing-valgrind-error">
   <title>Error Messages</title>
   <para>
    Valgrind remembers all error messages, and if it detects a new error,
    the error is compared against old error messages. This way Valgrind
    checks for duplicate error messages. In case of a duplicate error, it is
    recorded but no message is shown. This mechanism prevents you from being
    overwhelmed by millions of duplicate errors.
   </para>
   <para>
    The <option>-v</option> option will add a summary of all reports (sorted
    by their total count) to the end of the Valgrind's execution output.
    Moreover, Valgrind stops collecting errors if it detects either 1000
    different errors, or 10 000 000 errors in total. If you want to suppress
    this limit and wish to see all error messages, use
    <option>--error-limit=no</option>.
   </para>
   <para>
    Some errors usually cause other ones. Therefore, fix errors in the same
    order as they appear and re-check the program continuously.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-tuning-tracing-valgrind-moreinfo">
  <title>For More Information</title>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     For a complete list of options related to the described tracing tools,
     see the corresponding man page (<command>man 1 strace</command>,
     <command>man 1 ltrace</command>, and <command>man 1
     valgrind</command>).
    </para>
   </listitem>
   <listitem>
    <para>
     To describe advanced usage of Valgrind is beyond the scope of this
     document. It is very well documented, see
     <link xlink:href="http://valgrind.org/docs/manual/manual.html">Valgrind
     User Manual</link>. These pages are indispensable if you need more
     advanced information on Valgrind or the usage and purpose of its
     standard tools.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
