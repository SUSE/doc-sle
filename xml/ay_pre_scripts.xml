<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
xml:id="pre-scripts">
 <title>Combining ERB templates and scripts</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  <xref linkend="pre-install-scripts"/> already describes how to use a
  pre-script to modify the current profile. In a nutshell, if the script
  creates a <filename>/tmp/profile/modified.xml</filename> file, &ay; imports
  that profile and forgets about the initial one.
 </para>
 <para>
  This is a pretty flexible approach and the only limitation is that you need
  to rely on the languages and libraries that are available in the installation
  media.
 </para>
 <sect1 xml:id="erb-and-scripts">
  <title>Embedding ERB in your scripts</title>

  <para>
   Unlike with <emphasis>rules</emphasis>, it is possible to combine ERB
   templates with scripts. &ay; will evaluate any ERB tag that you include in
   your script before running it. This behavior only applies to the scripts
   defined inside the profile and not to the external ones.
  </para>

  <para>
   The script in the example below downloads a profile whose name is based on
   the MAC address. Saving the file as
   <filename>/tmp/profile/modified.xml</filename> will cause &ay; to load and
   use the downloaded profile.
  </para>

  <example xml:id="combining-erb-and-scripts">
   <title>Using the MAC address to get the profile</title>
<screen>&lt;scripts&gt;
  &lt;pre-scripts config:type="list"&gt;
    &lt;script&gt;
      &lt;interpreter&gt;shell&lt;/interpreter&gt;
      &lt;filename&gt;load_profile.sh&lt;/filename&gt;
      &lt;% mac = network_cards.first &gt;
      &lt;source&gt;&lt;![CDATA[#!/bin/bash
wget -O /tmp/profile/modified.xml http://myserver/&lt;%= network_cards.first[:mac] %&gt;.xml
]]&gt;&lt;/source&gt;
    &lt;/script&gt;
  &lt;/pre-scripts&gt;
&lt;/scripts&gt;</screen>
  </example>
 </sect1>
 <sect1 xml:id="erb-helpers-in-scripts">
  <title>Accessing ERB helpers from Ruby scripts</title>

  <para>
   It is possible to use the ERB helpers in Ruby scripts. To use those helpers,
   you need to <emphasis>require</emphasis> the <filename>yast</filename> and
   <filename>autoinstall/y2erb</filename> libraries and use the
   <literal>Y2Autoinstall::Y2ERB::TemplateEnvironment</literal> class to access
   them.
  </para>

  <example xml:id="ruby-script-erb-helpers">
   <title>Accessing ERB helpers from a Ruby script</title>
<screen>
&lt;scripts&gt;
  &lt;pre-scripts config:type="list"&gt;
    &lt;script&gt;
      &lt;interpreter&gt;/usr/bin/ruby&lt;/interpreter&gt;
      &lt;filename&gt;load_profile.sh&lt;/filename&gt;
      &lt;source&gt;&lt;![CDATA[#!/bin/bash
require "yast"
require "autoinstall/y2erb"
helpers = Y2Autoinstallation::Y2ERB::TemplateEnvironment.new
# Now you can use the TemplateEnvironment instance to call the helpers
disk_devices = helpers.disks.map { |d| d[:device] }
File.write("/root/disks.txt", disk_devices.join("\n"))
]]&gt;&lt;/source&gt;
    &lt;/script&gt;
  &lt;/pre-scripts&gt;
&lt;/scripts&gt;</screen>
  </example>
 </sect1>
</chapter>
