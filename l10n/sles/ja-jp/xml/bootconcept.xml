<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="bootconcept.xml" version="5.0" xml:id="cha-boot">
 <title>ブートプロセスの概要</title>
 <info>
  <abstract>
   <para>
    Linuxシステムのブートには、さまざまなコンポーネントとタスクが関係しています。マシンのアーキテクチャに依存する、ファームウェアとハードウェアの初期化プロセスの後、ブートローダGRUB 2でカーネルを起動します。この時点以降、ブートプロセスは完全にオペレーティングシステムの制御下に入り、<systemitem class="daemon">systemd</systemitem>によって処理されます。<systemitem class="daemon">systemd</systemitem>は、日常的な使用、保守、または緊急時のために設定をブートする一連の<quote>ターゲット</quote>を提供します。
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>


 <sect1 xml:id="sec-boot-terminology">
  <title>用語集</title>
  <para>
   この章ではあいまいに解釈される可能性のある用語を使用します。ここでの使用方法を理解するには、以下の定義を読んでください。
  </para>
  <variablelist>
   <varlistentry>
    <term><systemitem>init</systemitem></term>
    <listitem>
     <para>
      一般的に<quote>init</quote>という名前が付くのは、次の2つの異なるプロセスです:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        ルートファイルシステムをマウントする<systemitem>initramfs</systemitem>プロセス
       </para>
      </listitem>
      <listitem>
       <para>
        実際のルートファイルシステムから実行される他のすべてのプロセスを開始するオペレーティングシステムプロセス
       </para>
      </listitem>
     </itemizedlist>
     <para>
      両方のケースで、<systemitem class="daemon">systemd</systemitem>プログラムがこのタスクを担当します。ルートファイルシステムをマウントするために、まず<systemitem>initramfs</systemitem>から実行されます。成功したら、最初のプロセスとしてルートファイルシステムから再実行されます。これら2つの<systemitem class="daemon">systemd</systemitem>プロセスの混同を避けるため、まず<emphasis></emphasis>「init on initramfs」として最初のプロセスを実行し、<emphasis></emphasis>「systemd」として2番目のプロセスを実行します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <systemitem>initrd</systemitem>/<systemitem>initramfs</systemitem>
    </term>
    <listitem>
     <para>
      <systemitem>initrd</systemitem> (最初のRAMディスク)は、カーネルによってロードされ、一時ルートファイルシステムとして<filename>/dev/ram</filename>からマウントされるルートファイルシステムイメージを含むイメージファイルです。ファイルシステムのマウントには、ファイルシステムドライバが必要です。
     </para>
     <para>
      カーネル2.6.13以降、initrdは、ファイルシステムドライバのマウントが必要ない、<systemitem>initramfs</systemitem> (最初のRAMファイルシステム)で置き換えられました。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、<systemitem>initramfs</systemitem>を排他的に使用します。ただし、<systemitem>initramfs</systemitem>は<filename>/boot/initrd</filename>として格納されるため、多くの場合<quote>initrd</quote>と呼ばれます。この章では、<systemitem>initramfs</systemitem>という名前を排他的に使用します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-boot-proc">
  <title>Linuxのブートプロセス</title>
  <para>
   Linuxのブートプロセスは、いくつかの段階から成り、それぞれ別のコンポーネントが実行しています。
  </para>
  <orderedlist>
   <listitem>
    <para>
     <xref linkend="sec-boot-proc-initialization" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-proc-kernel" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-initramfs" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-systemd" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
  </orderedlist>

  <sect2 xml:id="sec-boot-proc-initialization">
   <title>初期化とブートローダの段階</title>
   <para>
    初期化段階中に、マシンのハードウェアが設定され、デバイスが準備されます。このプロセスはハードウェアアーキテクチャ間で大きく異なります。
   </para>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、すべてのアーキテクチャでブートローダGRUB 2を使用します。アーキテクチャおよびファームウェアによって、GRUB 2ブートローダの起動は、 マルチステップのプロセスとなる可能性があります。ブートローダの目的は、カーネルおよび、RAMベースの初期ファイルシステム(initramfs)をロードすることです。GRUB 2についての詳細については、<xref linkend="cha-grub2"/>を参照してください。
   </para>
   <sect3 xml:id="sec-boot-proc-initialization-x86-aarch" arch="x86_64;aarch64">
    <title>AArch64およびAMD64/Intel 64での初期化とブートローダ段階</title>
    <para>
     コンピュータの電源をオンにした後、BIOSまたはUEFIが画面とキーボードを初期化し、メインメモリをテストします。この段階まで、コンピュータは大容量ストレージメディアにアクセスしません。続いて、現在の日付、時刻、および最も重要な周辺機器に関する情報が、CMOS値からロードされます。ブートメディアとそのジオメトリが認識されると、システム制御がBIOS/UEFIからブートローダに移ります。
    </para>
    <para>
     従来のBIOSが備わっているマシンでは、ブートディスクの先頭の512バイト物理データセクタ(マスタブートレコード、MBR)のコードのみをロードできます。最小のGRUB 2のみがMBRに適合します。その唯一の目的は、MBRと最初のパーティション(MBRパーティションテーブル)の間のギャップから、またはBIOSブートパーティション(GPTパーティションテーブル)からファイルシステムドライバを含むGRUB 2コアイメージをロードすることです。このイメージにはファイルシステムドライバが含まれるため、ルートファイルシステム上にある<filename>/boot</filename>にアクセスできます。<filename>/boot</filename>には、カーネルとinitramfsイメージとともに、GRUB 2コアの追加のモジュールも含まれます。このパーティションにアクセスすると、GRUB 2はカーネルをロードし、initramfsはメモリにイメージを作成し、カーネルに制御を移します。
    </para>
    <para>
     BIOSシステムが、暗号化された<filename>/boot</filename>パーティションを含む暗号化されたファイルシステムからブートする場合、復号化のパスワードを2度入力する必要があります。最初にGRUB 2によって<filename>/boot</filename>を復号化した後で、<systemitem class="daemon">systemd</systemitem>用に暗号化されたボリュームをマウントする必要があります。
    </para>
    <para>
     UEFIを搭載したマシンでは、従来のBIOSを搭載するマシンよりも、ブートプロセスははるかに簡単です。ファームウェアは、GPTパーティションテーブルを備えたディスクのFATでフォーマットされたシステムパーティションから読み取ることができます。このEFIシステムパーティション(<filename>/boot/efi</filename>としてマウントされる実行中のシステム)は、ファームウェアによって直接ロードされ実行される完全に装備されたGRUB 2をホストする十分なスペースを保持します。
    </para>
    <para>
     BIOS/UEFIがネットワークブートをサポートしている場合は、ブートローダを提供するブートサーバを設定することもできます。その後、システムはPXEを介してブートできます。BIOS/UEFIはブートローダとして動作します。BIOSは、ブートサーバからブートイメージを取得し、システムを起動します。この作業はローカルハードディスクから完全に独立した処理として行われます。
    </para>
   </sect3>
   <sect3 xml:id="sec-boot-proc-initialization-zsystems" arch="zseries">
    <title>
     IBM Zでの初期化とブートローダ段階
    </title>
    <para>
      IBM Zでは、ブートプロセスは、<command>zipl</command> (zイニシャルプログラムロード)と呼ばれるブートローダによって初期化される必要があります。<command>zipl</command>はさまざまなファイルシステムからの読み込みをサポートしますが、SLEデフォルトファイルシステム(Btrfs)またはスナップショットからのブートはサポートしません。したがって、<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>はブート時に完全なBtrfsサポートを保証する2段階のブートプロセスを使用します。
    </para>
    <procedure>
     <step>
      <para>
       <command>zipl</command>は、Ext2、Ext3、Ext4、またはXFSファイルシステムでフォーマットできるパーティション<filename>/boot/zipl</filename>からブートします。このパーティションには、メモリにロードされる最小のカーネルとinitramfsが含まれます。initramfsには、Btrfsドライバ(その他の間)およびブートローダGRUB 2が含まれます。カーネルは<literal>initgrub</literal>パラメータで開始され、GRUB 2を開始するように指示されます。
      </para>
     </step>
     <step>
      <para>
       カーネルはルートファイルシステムをマウントするため、<filename>/boot</filename>にアクセス可能になります。これでGRUB 2がinitramfsから開始されます。GRUB 2は<filename>/boot/grub2/grub.cfg</filename>からその設定を読み込み、<filename>/boot</filename>から最後のカーネルとinitramfsをロードします。これで新しいカーネルがKexecを介してロードされます。
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-proc-kernel">
   <title>カーネルの段階</title>
   <para>
    ブートローダがシステム制御に渡されると、ブートプロセスはすべてのアーキテクチャで同じになります。ブートローダはカーネルとRAMベースの初期ファイルシステム(<systemitem>initramfs</systemitem>)をメモリにロードし、カーネルが引き継ぎます。
   </para>
   <para>
    カーネルはメモリ管理を設定し、CPUタイプとその機能を検出した後で、ハードウェアを初期化し、<systemitem>initramfs</systemitem>でロードされたメモリから一時ルートファイルシステムをマウントします。
   </para>

   <sect3 xml:id="sec-boot-initrd">
    <title><systemitem>initramfs</systemitem>ファイル</title>
    <para>
     <systemitem>initramfs</systemitem>(初期RAMファイルシステム)は、カーネルがRAMディスクにロードできる、小さなcpioアーカイブです。<filename>/boot/initrd</filename>にあります。<command>dracut</command>というツールで作成することもできます。詳細については、<command>man 8 dracut</command>を参照してください。
    </para>
    <para>
     <systemitem>initramfs</systemitem>は、実際のルートファイルシステムがマウントされる前にプログラムを実行できるようにする最低限のLinux環境を提供します。この最低限のLinux環境は、BIOSまたはUEFIルーチンによってメモリにロードされ、十分なメモリがあること以外に特定のハードウェア要件はありません。<systemitem>initramfs</systemitem>には必ず、<systemitem>init</systemitem>という名前の実行可能ファイルがあります。これは、ブートプロセスの進行に伴い、ルートファイルシステム上の実際の<systemitem class="daemon">systemd</systemitem>デーモンを実行します。
    </para>
    <para>
     ルートファイルシステムをマウントして実際のオペレーティングシステムを起動する前に、カーネルには、ルートファイルシステムが配置されているデバイスにアクセスするための対応ドライバが必要です。こうしたドライバには、特定のハードディスク用の特殊なドライバや、ネットワークファイルシステムにアクセスするためのネットワークドライバが含まれる場合もあります。ルートファイルシステムに必要なモジュールは、<systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>によってロードされます。モジュールをロードしたら、<systemitem class="service">udev</systemitem>によって必要なデバイスが<systemitem>initramfs</systemitem>に提供されます。ブートプロセス後半で、ルートファイルシステムが変更された後、デバイスを再生成する必要があります。これは、<systemitem class="daemon">systemd</systemitem> unit <filename>systemd-udev-trigger.service</filename>で実行されます。
    </para>

    <sect4 xml:id="sec-boot-initrd-regenerate">
     <title>initramfsの再生成</title>
     <para>
      <systemitem>initramfs</systemitem>には、ドライバが含まれるため、そのドライバのいずれかの新しいバージョンが利用可能になるとすぐにinitramfsをアップデートする必要があります。これは、ドライバアップデートを含むパッケージをインストールするときに自動的に実行されます。YaSTまたはzypperは、<systemitem>initramfs</systemitem>を生成するコマンドの出力を表示することで、これについて通知します。ただし、<systemitem>initramfs</systemitem>を手動で再生成する必要がある場合があります。
     </para>
     <itemizedlist>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-drivers"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-raidroot"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-lvmadd"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-kernelvars"/>
       </para>
      </listitem>
     </itemizedlist>

     <variablelist>
      <varlistentry xml:id="var-initrd-regenerate-drivers">
       <term>ハードウェアの変更によるドライバの追加</term>
       <listitem>
        <para>
         ハードウェア(たとえば、ハードディスク)を変更する必要が生じ、ブート時にそのハードウェア用の他のドライバがカーネル内に必須の場合には、<systemitem>initramfs</systemitem>ファイルを更新する必要があります。
        </para>
        <para>
         <filename>/etc/dracut.conf.d/10-<replaceable>DRIVER</replaceable>.conf</filename>を開くか作成し、次の行を追加してください(行頭の空白に注意):
        </para>
        <screen>force_drivers+=" <replaceable>DRIVER1</replaceable> "</screen>
        <para>
         <replaceable>DRIVER1</replaceable>はドライバのモジュール名で置き換えます。複数のドライバを追加する必要がある場合は、それぞれをスペースで区切って指定します。
        </para>
        <screen>force_drivers+=" <replaceable>DRIVER1</replaceable> <replaceable>DRIVER2</replaceable> "</screen>
        <para>
         <xref linkend="pro-generate-initramfs"/>に従って手順を進めます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-raidroot">
       <term>RAIDまたはLVMへのシステムディレクトリの移動</term>
       <listitem>
        <para>
         スワップファイル、または実行中のシステムの<filename>/usr</filename>などのシステムディレクトリをRAIDまたは論理ボリュームに移動するときには常に、ソフトウェアRAIDまたはLVMドライバのサポートを含む<systemitem>initramfs</systemitem>を作成する必要があります。
        </para>
        <para>
         これを作成するには、<filename>/etc/fstab</filename>で各エントリを作成し、新しいエントリ(たとえば<command>mount -a</command>および/または<command>swapon -a</command>)をマウントします。
        </para>
        <para>
         <xref linkend="pro-generate-initramfs"/>に従って手順を進めます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-lvmadd">
       <term>ルートファイルシステムを含むLVMグループまたはBtrfs RAIDへのディスクの追加</term>
       <listitem>
        <para>
         ルートファイルシステムを含む論理ボリュームグループまたはBtrfs RAIDにディスクを追加(または削除)する際には常に、 大きくなったボリュームのサポートを含む<systemitem>initramfs</systemitem>を作成する必要があります。<xref linkend="pro-generate-initramfs"/>の指示に従います。
        </para>
        <para>
         <xref linkend="pro-generate-initramfs"/>に従って手順を進めます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-kernelvars">
       <term>カーネル変数の変更</term>
       <listitem>
        <para>
         関連するファイル(<filename>/etc/sysctl.conf</filename>または<filename>/etc/sysctl.d/*.conf</filename>)を編集して、<command>sysctl</command>インタフェースでカーネル変数の値を変更した場合、次にシステムを再起動したときに変更内容が失われます。実行時に<command>sysctl --system</command>を使用して値をロードしても、変更内容は<systemitem>initramfs</systemitem>ファイルに保存されません。<xref linkend="pro-generate-initramfs"/>の説明に従って手順を進め、アップデートする必要があります。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <procedure xml:id="pro-generate-initramfs">
      <title>initramfsの生成</title>
       <para>
       次の手順のすべてのコマンドを<systemitem class="username">root</systemitem>ユーザとして実行する必要があることに注意してください。
      </para>
      <step>
      <para>
        <filename>/boot</filename>ディレクトリを入力します。
      </para>
      <screen><prompt role="root"># </prompt>cd /boot</screen>
      </step>
      <step>
       <para>
        <command>dracut</command>を使用して新しい<systemitem>initramfs</systemitem>ファイルを生成し、<replaceable>MY_INITRAMFS</replaceable>を任意のファイル名に置き換えます。
       </para>
       <screen><prompt role="root"># </prompt>dracut <replaceable>MY_INITRAMFS</replaceable></screen>
       <para>
        または、<command>dracut -f</command>
        <replaceable>FILENAME</replaceable>を実行して、既存のinitファイルを置き換えます。
       </para>
      </step>
      <step>
       <para>
        (以前のステップで<command>dracut -f</command>を実行した場合は、このステップはスキップします)。以前のステップで作成した<systemitem>initramfs</systemitem>ファイルから<systemitem>initrd</systemitem>へのシンボリックリンクを作成します。
       </para>
       <screen><prompt role="root"># </prompt> ln -sf <replaceable>MY_INITRAMFS</replaceable> <systemitem>initrd</systemitem> </screen>
      </step>
      <step arch="zseries">
       <para>
         IBM Zアーキテクチャで、<command>grub2-install</command>を補足的に実行します。
       </para>
      </step>
     </procedure>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-initramfs">
   <title>initramfs上のinit段階</title>
   <para>
    <systemitem>initramfs</systemitem>からカーネルによってマウントされた一時ルートファイルシステムには、(以下の<systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>と呼ばれる)実行可能な<systemitem class="daemon">systemd</systemitem>が含まれます。<xref linkend="sec-boot-terminology"/> も参照してください。このプログラムは、適切なルートファイルシステムをマウントするために必要なすべてのアクションを実行します。必要なファイルシステムにカーネル機能を提供し、大容量ストレージコントローラ用のデバイスドライバに<systemitem class="service">udev</systemitem>を提供します。
   </para>

   <para>
    <systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>の主な目的は、実際のルートファイルシステムのマウントとアクセスの準備をすることです。システム設定に応じて、<systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>は次のタスクを実行します。
   </para>

   <variablelist>
    <varlistentry>
     <term>カーネルモジュールのロード</term>
     <listitem>
      <para>
       ハードウェア設定によっては、使用するコンピュータのハードウェアコンポーネント(ハードディスクになる最も重要なコンポーネント)にアクセスするために特殊なドライバが必要になる場合があります。最終的なルートファイルシステムにアクセスするには、カーネルが適切なファイルシステムドライバをロードする必要があります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ブロック特殊ファイルの提供</term>
     <listitem>
      <para>
       カーネルはロードされたモジュールに応じて、デバイスイベントを生成します。<systemitem class="service">udev</systemitem>は、これらのイベントを処理し、RAMファイルシステム上で必要なブロック特殊ファイルを<filename>/dev</filename>内に生成します。これらの特殊ファイルがないと、ファイルシステムや他のデバイスにアクセスできません。
      </para>
    </listitem>
    </varlistentry>
    <varlistentry>
     <term>RAIDとLVMのセットアップの管理</term>
     <listitem>
      <para>
       RAIDまたはLVMの下でルートファイルシステムを保持するようにシステムを設定した場合、<systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>はLVMまたはRAIDを設定して、後でルートファイルシステムにアクセスできるようにします。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ネットワーク設定の管理</term>
     <listitem>
      <para>
       ネットワークマウントしたルートファイルシステム(NFSを介してマウント)を使用するようにシステムを設定した場合、<systemitem>init</systemitem>は適切なネットワークドライバがロードされ、ドライバがルートファイルシステムにアクセスできるように設定されていることを確認する必要があります。
      </para>
      <para>
       ファイルシステムがiSCSIやSANなどのネットワークブロックデバイスに常駐している場合は、ストレージサーバへの接続も<systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>によって設定されます。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>は、プライマリターゲットを使用できない場合の、セカンダリiSCSIターゲットからのブートをサポートしています。<phrase os="sles">iSCSIターゲットのブート設定の詳細については、<xref linkend="sec-iscsi-initiator-yast"/></phrase>を参照してください。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <note>
    <title>マウントできなかった場合の処理</title>
    <para>
     ルートファイルシステムをブート環境内からマウントできなかった場合は、ブートを続行する前にルートファイルシステムを確認して修復しておく必要があります。Ext3ファイルシステムおよびExt4ファイルシステムでは、ファイルシステムチェッカが自動的に起動されます。XFSファイルシステムおよびBtrfsファイルシステムでは修復プロセスが自動化されていないため、ファイルシステムを修復するために使用できるオプションに関する情報が表示されます。ファイルシステムが正常に修復された場合、ブート環境を終了すると、システムはルートファイルシステムのマウントを再試行します。成功した場合、ブートは通常どおり続行されます。
    </para>
   </note>

   <sect3 xml:id="sec-boot-linuxrc-initramfs">
    <title>インストールプロセスのinitramfs上のinit段階</title>
    <para>
     初期ブート時にインストールプロセスの一環として<systemitem>initramfs</systemitem>上の<systemitem>init</systemitem>が呼び出される場合、そのタスクは上記で説明したタスクと異なります。インストールシステムは<systemitem>initramfs</systemitem>から<systemitem class="daemon">systemd</systemitem>を起動せず、これらのタスクが<command>linuxrc</command>で実行されることにも注意してください。
    </para>

    <variablelist>
     <varlistentry>
      <term>インストールメディアの検出</term>
      <listitem>
       <para>
        インストールプロセスを開始すると、マシンは、インストールカーネルと、YaSTインストーラを含む特殊な<systemitem>init</systemitem>をロードします。YaSTインストーラは、RAMファイルシステムで実行され、インストールメディアにアクセスしてオペレーティングシステムをインストールするために、そのメディアの場所に関する情報を必要とします。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       ハードウェア認識の開始および適切なカーネルモジュールのロード
      </term>
      <listitem>
       <para>
        <xref linkend="sec-boot-initrd"/>で説明しているように、ブートプロセスはほとんどのハードウェア構成で使用できる最小限のドライバセットで開始されます。AArch64、POWER、およびAMD64/Intel 64マシンでは、<command>linuxrc</command>は、ハードウェア構成に適したドライバセットを判断する、初期ハードウェアスキャンプロセスを開始します。IBM Zでは、ドライバのリストおよびそのパラメータは、linuxrcまたはparmfileなどを介して提供される必要があります。
       </para>
       <para>
        これらのドライバは、システムをブートするために必要なカスタム<systemitem>initramfs</systemitem>を生成するために使用されます。ブートに必要なくてもコールドプラグには必要なモジュールがある場合は、<systemitem class="daemon">systemd</systemitem>を使用してロードできます。詳細については、<xref linkend="sec-boot-systemd-advanced-kernel-modules"/>を参照してください。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>インストールシステムのロード</term>
      <listitem>
       <para>
        ハードウェアが適切に認識されると、適切なドライバがロードされます。<systemitem class="service">udev</systemitem>プログラムが特殊なデバイスファイルを作成し、<command>linuxrc</command>は、YaSTインストーラを使用してインストールシステムを起動します。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>YaSTの起動</term>
      <listitem>
       <para>
        最後に、<command>linuxrc</command>はYaSTを起動し、これによってパッケージのインストールとシステム設定が開始されます。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>


  <sect2 xml:id="sec-boot-systemd">
   <title>systemd段階</title>
   <para>
    <quote>実際の</quote>ルートファイルシステムが見つかると、エラーをチェックしてからマウントします。これが正常に実行されれば、<systemitem>initramfs</systemitem>はクリアされ、ルートファイルシステムで<systemitem class="daemon">systemd</systemitem>デーモンが実行されます。<systemitem class="daemon">systemd</systemitem>はLinuxのシステムおよびサービスマネージャです。PID 1として起動する親プロセスで、ユーザスペースサービスを起動して維持するinitシステムとして機能します。詳細については<xref linkend="cha-systemd"/>を参照してください。
   </para>
  </sect2>
 </sect1>
</chapter>
