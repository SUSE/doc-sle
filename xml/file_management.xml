<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" role="General" 
  xml:id="sec-sec-file-management"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>File management</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 
   <sect1 xml:id="sec-sec-prot-general-partitions">
   <title>Disk partitions</title>

   <para>
    Servers should have separate file systems for at least
    <filename>/</filename>, <filename>/boot</filename>,
    <filename>/usr</filename>, <filename>/var</filename>,
    <filename>/tmp</filename>, and <filename>/home</filename>. This prevents,
    for example, that logging space and temporary space under
    <filename>/var</filename> and <filename>/tmp</filename> fill up the root
    partition. Third-party applications should be on separate file systems as
    well, for example under <filename>/opt</filename>.
   </para>

   <para>
    Another advantage of separate file systems is the possibility to choose
    special mount options that are only suitable for certain regions in the
    file system hierarchy. A number of interesting mount options are:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <literal>noexec</literal>: prevents execution of files.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nodev</literal>: prevents character or block special devices
      from being usable.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>nosuid</literal>: prevents the <literal>set-user-ID</literal>
      or <literal>set-group-ID</literal> bits from being effective.
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>ro</literal>: mounts the file system
      <literal>read-only</literal>.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Each of these options needs to be carefully considered before applying
    it to a partition mount. Applications may stop working, or the support
    status may be violated. When applied correctly, mount options can help
    against some types of security attacks or misconfigurations. For
    example, there should be no need for <literal>set-user-ID</literal>
    binaries to be placed in <filename>/tmp</filename>.
   </para>

   <para>
    You are advised to review <xref linkend="cha-common-criteria"/>. It is
    important to understand the need to separate the partitions that could
    impact a running system (for example, log files filling up
    <filename>/var/log</filename> are a good reason to separate
    <filename>/var</filename> from the <filename>/</filename> partition).
    Another thing to keep in mind is that you will likely need to leverage LVM
    or another volume manager or at the very least the extended partition type
    to work around the limit of four primary partitions on PC class systems.
   </para>

   <para>
    Another capability in &productname; is encrypting a partition or even a
    single directory or file as a container. Refer to
    <xref linkend="cha-security-cryptofs"/> for details.
   </para>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-check-perms">
   <title>Checking file permissions and ownership</title>

   <para>
    The following sections deal with some ways the default permissions and
    file settings can be modified to enhance the security of a host. It is
    important to note that the use of the default &productname; utilities like
    <command>seccheck</command> - can be run to lock down and improve the
    general file security and user environment. However, it is beneficial to
    understand how to modify these things.
   </para>

   <para>
    &productname; hosts include three default settings for file permissions:
    <filename>permissions.easy</filename>,
    <filename>permissions.secure</filename>, and
    <filename>permissions.paranoid</filename>, all located in the
    <filename>/etc</filename> directory. The purpose of these files is to
    define special permissions, such as world-writable directories or, for
    files, the setuser ID bit (programs with the setuser ID bit set do not run
    with the permissions of the user that has launched it, but with the
    permissions of the file owner, usually &rootuser;).
   </para>

   <para>
    Administrators can use the file
    <filename>/etc/permissions.local</filename> to add their own settings. The
    easiest way to implement one of the default permission rule-sets above is
    to use the <guimenu>Local Security</guimenu> module in &yast;.
   </para>

   <para>
    Each of the following topics will be modified by a selected rule-set, but
    the information is important to understand on its own.
   </para>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-umask">
   <title>Default umask</title>

   <para>
    The <command>umask</command> (user file-creation mode mask) command is a
    shell built-in command which determines the default file permissions for
    newly created files and directories. This can be overwritten by system calls but many
    programs and utilities use <command>umask</command>. By default,
    <command>umask</command> is set to <literal>022</literal>. You can modify
    this globally by changing the value in <filename>/etc/profile</filename>
    or for each user in the startup files of the shell.
   </para>

   <para>
    To determine the active umask, use the <command>umask</command>
    command:
   </para>

<screen>&prompt.user;umask
022</screen>

   <para>
   The umask is subtracted from the access mode <literal>777</literal> if at
   least one bit is set.
   </para>

   <para>
    With the default umask you see the behavior most users expect to see on a Linux system.
   </para>

<screen>
&prompt.user;touch a
&prompt.user;mkdir b
&prompt.user;ls -on
total 16
-rw-r--r--. 1 17086    0 Nov 29 15:05 a
drwxr-xr-x. 2 17086 4096 Nov 29 15:05 b
</screen>

   <para>
    You can specify arbitrary umask values, depending on your needs.
   </para>
<screen>
&prompt.user;umask 111
&prompt.user;touch c
&prompt.user;mkdir d
&prompt.user;ls -on
total 16
-rw-rw-rw-. 1 17086    0 Nov 29 15:05 c
drw-rw-rw-. 2 17086 4096 Nov 29 15:05 d
</screen>

   <para>
    Based on your thread model you can use a stricter umask like <literal>037</literal>
    to prevent accidental data leakage.
   </para>
<screen>
&prompt.user;umask 037
&prompt.user;touch e
&prompt.user;mkdir f
&prompt.user;ls -on
total 16
-rw-r-----. 1 17086    0 Nov 29 15:06 e
drwxr-----. 2 17086 4096 Nov 29 15:06 f
</screen>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-s-bit">
   <title>SUID/SGID files</title>

   <para>
    When the SUID (set user ID) or SGID (set group ID) bits are set on an
    executable, it executes with the UID or GID of the owner of the executable
    rather than that of the person executing it. This means that, for example,
    all executables that have the SUID bit set and are owned by &rootuser; are
    executed with the UID of &rootuser;. A good example is the <command>passwd</command> command that
    allows ordinary users to update the password field in the <filename>/etc/shadow</filename> file
    which is owned by &rootuser;.
   </para>

   <para>
    But SUID/SGID bits can be misused when the executable has a
    security hole. Therefore, you should search the entire system for
    SUID/SGID executables and document it. To search the entire system for SUID or SGID files, you can run the
    following command:
   </para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -type f -perm '/6000' -ls</screen>

   <para>
    You might need to extend the list of directories that are searched if you
    have a different file system structure.
   </para>


   <para>
    &suse; only sets the SUID/SGID bit on binary if it is really necessary.
    Ensure that code
    developers do not set SUID/SGID bits on their programs if it is not an
    absolute requirement. Very often you can use workarounds like removing the
    executable bit for world/others. However, a better approach is to change
    the design of the software or use capabilities.
   </para>

   <para>
    &productname; supports file capabilities to allow more fine grained
    privileges to be given to programs rather than the full power of &rootuser;:
   </para>

<screen>&prompt.root;getcap -v /usr/bin/ping
      /usr/bin/ping = cap_new_raw+eip</screen>

   <para>
    The previous command only grants the CAP_NET_RAW capability to whoever
    executes <command>ping</command>. In case of vulnerabilities inside
    <command>ping</command>, an attacker can gain at most this capability in
    contrast with full &rootuser;.  Whenever possible, file capabilities should
    be chosen in favor of the SUID bit. But this only applies when the binary
    is suid to &rootuser;, not to other users such as <literal>news</literal>,
    <literal>lp</literal> and similar.
   </para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-filepermissions">
   <title>World-writable files</title>

   <para>
    World-writable files are a security risk since they can be modified by any
    user on the system. Additionally, world-writable directories allow anyone to add or
    delete files. To locate world-writable files and directories, you can use
    the following command:
   </para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -type f -perm -2 ! -type l -ls</screen>

   <para>
   You might need to extend the list of directories that are searched if you
   have a different file system structure.
   </para>

   <para>
    The <option>! -type l</option> parameter skips all symbolic links since
    symbolic links are always world-writable. However, this is not a problem
    as long as the target of the link is not world-writable, which is checked
    by the above find command.
   </para>

   <para>
    World-writable directories with the sticky bit such as the <filename>/tmp</filename>
    directory do not allow anyone except the owner of a file to delete or rename it in
    this directory.
    The sticky bit makes files stick to the user who created it and it prevents other users from
    deleting and renaming the files. Therefore, depending on the purpose of
    the directory, world-writable directories with sticky are usually not an
    issue. An example is the <filename>/tmp</filename> directory:
   </para>

<screen>&prompt.user;ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>

   <para>
    The <literal>t</literal> mode bit in the output denotes the sticky bit.
   </para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-orphaned">
   <title>Orphaned or unowned files</title>

   <para>
    Files not owned by any user or group might not necessarily be a security
    problem in itself. However, unowned files could pose a security problem in
    the future. For example, if a new user is created and the new users
    happens to get the same UID as the unowned files have, then this new user
    will automatically become the owner of these files.
   </para>

   <para>
    To locate files not owned by any user or group, use the following command:
   </para>

    <screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -nouser -o -nogroup</screen>

   <para>
   You might need to extend the list of directories that are searched if you
   have a different file system structure.
   </para>

   <para>
    A different problem is files that were not installed via the packaging
    system and therefore don't receive updates. You can check for such files
    with the following command:
   </para>

   <screen>&prompt.user;find /bin /lib /lib64 /usr -path /usr/local -prune -o -type f -a -exec /bin/sh -c "rpm -qf {} &amp;> /dev/null || echo {}" \;</screen>

   <para>
    Run this command as an untrusted user (for example nobody) since crafted
    file names might lead to command
    execution. This shouldn't be a problem since these directories should only be writeable by &rootuser;, but
    it's still a good security precaution.
   </para>

   <para>
    This will show you all files under <filename>/bin</filename>,
    <filename>/lib</filename>, <filename>/lib64</filename> and
    <filename>/usr</filename> (with the
    exception of files in <filename>/usr/local</filename>) that are not tracked
    by the package manager. These files might not represent a security issue, but
    you should be aware of what is not tracked and take the necessary precautions to
    keep these files up to date.
   </para>
  </sect1>
</chapter>