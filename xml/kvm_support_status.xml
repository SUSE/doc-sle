<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.kvm.status">
 <title>&kvm; Support Status</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>
  The following list contains features and tools as supported by
  &suse;&mdash;this does not necessarily reflect the support status of
  the software itself. For a list of <command>qemu-kvm</command> command
  switches supported by &suse;, refer to
  <xref linkend="app.kvm.qemu-commands"/>.
 </para>
 <sect1 xml:id="sec.kvm.status.supported">
  <title>Supported Features and Tools</title>

  <variablelist>
   <varlistentry>
    <term>&vmm;</term>
    <listitem>
     <para>
      Manage guests via &vmm; using the following functions: autostart,
      start, stop, restart, pause, unpause, save, restore, clone, migrate,
      special key sequence insertion, guest console viewers, performance
      monitoring, and CPU pinning. Furthermore, static modifications of CPU,
      RAM, boot method, disk, <phrase condition="kvm4x86">NIC, mouse,
      display, video and host PCI and USB
      assignments</phrase><phrase condition="kvm4zSseries">and NIC</phrase>
      are supported.
     </para>
     <para condition="kvm4x86">
      <emphasis>Restrictions:</emphasis> The following features are
      currently not supported: sound devices, qxl, vmvga (vmware), &xen;
      video, pcnet, ne2k_pci, eepro100, emulated SCSI disks, Spice graphics.
      Raw, qed, and qcow2 are the only supported storage formats.
     </para>
     <para condition="kvm4zseries">
      <emphasis>Restrictions:</emphasis> The following features are
      currently not supported: dasd, scsi
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>virsh</command>
    </term>
    <listitem>
     <para>
      Manage guests via the command line.
     </para>
     <para>
      Most <command>virsh</command> subcommands are supported, including
      creation, modification, and destruction of guests and all life cycle
      operations. Any <command>virsh</command> subcommands which translate
      to unsupported qemu-kvm command-line or monitor syntax are also
      unsupported. Guest XML descriptions used by <command>virsh</command>
      can be created manually, using the
      &vmm;, or external tools and scripts.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>qemu-kvm</command>
    </term>
    <listitem>
     <para>
      Manage guests via the command line. Although managing via &vmm;
      should be the preferred option, <command>qemu-kvm</command> may be
      used for greater flexibility. See
      <xref linkend="app.kvm.qemu-commands.supported"/> for a list of
      supported options.
     </para>
     <para>
      <emphasis>Restrictions:</emphasis> See
      <xref linkend="app.kvm.qemu-commands.unsupported"/> for a list of not
      supported options.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term><command>kvm_stat</command>
    </term>
    <listitem>
     <para>
      Debugging and monitoring tool.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>USB Host Device Pass-through</term>
    <listitem>
     <para>
      A physical USB device may be passed from the &vmhost; to the
      &vmguest;. Given the very wide variety of USB devices available, it
      is anticipated that some devices may not work properly.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>PCI Pass-through</term>
    <listitem>
     <para>
      PCI Pass-through improves performance of PCI devices. It requires
      underlying support from the hardware (for example Intel
      <xref linkend="gloss.vt.acronym.vtd"/> extensions, or AMD
      <xref linkend="gloss.vt.acronym.iommu"/> extensions).
      <xref linkend="gloss.vt.acronym.vtd"/> requires the kernel parameter
      "intel_iommu=on". Additionally, some host hardware will require the
      use of the KVM kernel module parameter:
      allow_unsafe_assigned_interrupts=1 (enabling this parameter has
      security implications).
     </para>
     <para>
      Many <xref linkend="gloss.vt.acronym.pcie"/> cards from major vendors
      should be supportable. Refer to system level certifications for
      specific details, or contact the vendor for support statements.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>Device hotplugging</term>
    <listitem>
     <para>
      Dynamically adding or removing emulated or pass-through physical
      devices in the &vmguest; is supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Memory ballooning</term>
    <listitem>
     <para>
      Dynamically changing the amount of memory allocated to a guest is
      supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Sharing Folders between &vmhost; and &vmguest;</term>
    <listitem>
     <para>
      Sharing folders between host and &vmguest; is supported via VirtFs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>Kernel Samepage Merging (KSM)</term>
    <listitem>
     <para>
      KSM allows for automatic sharing of identical memory pages between
      guests to save host memory. &kvm; is optimized to use KSM if
      enabled on the &vmhost;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>Transparent Huge Pages (THP)</term>
    <listitem>
     <para>
      THP allows CPUs to address memory using pages larger than the default
      4 KB. This helps reducing memory consumption and CPU cache usage.
      &kvm; is optimized to use THP (via madvise and opportunistic
      methods) if enabled on the &vmhost;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>KVM Security</term>
    <listitem>
     <para>
      A <literal>kvm</literal> group is created by the KVM package, which
      permits a non-root user to access the KVM control device file
      (<filename>/dev/kvm</filename>). Where possible, guests should not be
      run as &rootuser;. Steps have been taken to enable this for
      <literal>libvirt</literal> as well. A setuid bridge helper has been
      added so that a bridged network interface can be set up without
      needing &rootuser; privileges.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Seccomp2 based sandboxing</term>
    <listitem>
     <para>
      The &vmguest; can be run in a sandboxed environment where only
      predetermined system calls are permitted for added protection against
      malicious behavior.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>APIC Virtualization</term>
    <listitem>
     <para>
      Hardware APIC Virtualization, allowing the processor to directly
      inject interrupts into the &vmguest; to achieve better performance,
      is supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>VirtFS (file system pass-through)</term>
    <listitem>
     <para>
      Directories in the host file system can be shared between the host and
      &vmguest; or guests using <literal>virtfs</literal>. A
      <literal>virtfs</literal> proxy helper is provided to enable
      <literal>virtfs</literal> usage when KVM is used as non-root user.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Vhost-net kernel module support</term>
    <listitem>
     <para>
      The vhost-net kernel module allows for a more efficient network
      transport to the &vmguest;. It is automatically used by
      &libvirt; if loaded, or when using the qemu-kvm command line, by
      adding <option>vhost=on</option> to the networking option.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>AHCI guest storage interface</term>
    <listitem>
     <para>
      The AHCI interface for SATA storage has been recently added. It
      permits much higher block I/O performance than the IDE interface, and
      is particularly useful for use in recent Windows OS versions.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>qcow2</systemitem> and <systemitem>qed</systemitem> storage formats</term>
    <listitem>
     <para>
      <systemitem>qcow2</systemitem> and <systemitem>qed</systemitem>
      storage formats can now be used with live migration.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Trim and Online Disk Resizing</term>
    <listitem>
     <para>
      Trim and online disk resizing support depends on the storage format
      used.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Virtio SCSI</term>
    <listitem>
     <para>
      Virtio SCSI allows for passing through host SCSI block or generic SCSI
      devices to the &vmguest;, and provides additional storage options
      in a virtio SCSI interface within the guest.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Macvtap / vhost-net zero-copy transmits</term>
    <listitem>
     <para>
      Zero-copy packet transmits from the &vmguest; are now possible
      using vhost-net and macvtap changes that have been added to the latest
      kernels.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Disk caching modes</term>
    <listitem>
     <para>
      The default caching mode for disk images is now
      <emphasis>writeback</emphasis> because of improvements in the handling of
      the image format. The <systemitem>virtio-blk</systemitem> back-end now
      automatically switches from 'writeback' to 'writethrough' if the
      &vmguest; virtio driver does not support flushes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>Non-Uniform Memory Access (NUMA)</term>
    <listitem>
     <para>
      NUMA machines are supported. Using <literal>numactl</literal> to pin
      <command>qemu-kvm</command> processes to specific nodes is
      recommended.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.kvm.status.unsupported">
  <title>Unsupported Features and Tools</title>

  <variablelist>
   <varlistentry>
    <term>Power Management</term>
    <listitem>
     <para>
      Changing power states in the host while guests are running is not
      supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>Q35 Machine</term>
    <listitem>
     <para>
      A more modern machine type based on the Intel q35 chipset is
      available. This is not yet supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4x86">
    <term>Nested Virtualization</term>
    <listitem>
     <para>
      When the svm or vmx CPU feature is passed through to the &vmguest;,
      nested virtualization is possible. This is not yet supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spice</term>
    <listitem>
     <para>
      Spice interoperability is not supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Glusterfs</term>
    <listitem>
     <para>
      Glusterfs interoperability is not supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ISCSI</term>
    <listitem>
     <para>
      ISCSI integration is not supported. It is however possible for guests
      to access ISCSI targets available to the host via the blockio
      interfaces.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>RBD (Rados Block Devices)</term>
    <listitem>
     <para>
      RBD integration is not supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CPU hotplugging</term>
    <listitem>
     <para>
      Dynamically changing the number of virtual CPUs assigned to the
      &vmguest; is currently not supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>&kvm; Kernel Module Parameters</term>
    <listitem>
     <para>
      Specifying parameters for the &kvm; kernel modules is currently not
      supported unless done under the direction of &suse; support
      personnel.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Guest Agent</term>
    <listitem>
     <para>
      The guest agent (<command>qemu-ga</command>) allows programs on the
      &vmhost; to directly communicate with a &vmguest; via an
      emulated or paravirtualized serial console. This feature is currently
      not supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Using &qemu; without &kvm; (TCG (Tiny Code Generator) mode)</term>
    <listitem>
     <para>
      <command>qemu-kvm</command> can be invoked with the
      <option>-no-kvm</option> parameter. In this case &vmguest; CPU
      instructions are emulated instead of being executed directly by the
      processor. This mode is not supported, but may be useful for problem
      resolution.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Device hotplugging</term>
    <listitem>
     <para>
      Dynamically adding or removing emulated or pass-through physical
      devices in the &vmguest; is supported.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry condition="kvm4zseries">
    <term>Transparent Huge Pages (THP)</term>
    <listitem>
     <para>
      See <xref linkend="gloss.vt.acronym.thp"/>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
