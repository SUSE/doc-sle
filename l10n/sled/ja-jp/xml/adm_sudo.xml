<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="adm_sudo.xml" version="5.0" xml:id="cha-adm-sudo">
  <title><command>sudo</command>の基本</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>
    特定のコマンドを実行するには、root特権が必要です。ただし、セキュリティ上の理由のため、また間違いを避けるため、<systemitem class="username">root</systemitem>としてログインすることは推奨されません。より安全な方法は、通常のユーザとしてログインしてから、<command>sudo</command>を使用して昇格された特権でコマンドを実行することです。
  </para>
  <para>
    <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>では、<command>sudo</command>は<command>su</command>と同様に機能するように設定されています。ただし、<command>sudo</command>には、ユーザが他のユーザの特権でコマンドを実行できるようにする柔軟なメカニズムがあります。このコマンドを使用して、指定の特権を持つ役割を特定のユーザとグループに割り当てることができます。たとえば、<systemitem class="groupname">users</systemitem>グループのメンバーが、<systemitem class="username">wilber</systemitem>ユーザの特権でコマンドを実行できるようにすることができます。コマンドへのアクセスは、コマンドオプションを禁止することにより、さらに制限できます。suでは、PAMを使用した認証で常に<systemitem class="username">root</systemitem>パスワードを必要としますが、<command>sudo</command>では、ユーザの資格情報を使用して認証するように設定できます。すなわち、ユーザは<systemitem class="username">root</systemitem>パスワードを共有する必要がなく、セキュリティが向上します。
  </para>
  <sect1 xml:id="sec-adm-sudo-usage">
    <title><command>sudo</command>の基本的な使用方法</title>

    <para>
      次の章では、<command>sudo</command>の基本的な使用方法の概要について説明します。
    </para>

    <sect2 xml:id="sec-adm-sudo-usage-cmd">
      <title>単一コマンドの実行</title>
      <para>
        標準ユーザは、コマンドの前に<command>sudo</command>を追加することで、任意のコマンドを<systemitem class="username">root</systemitem>として実行できます。これにより、rootパスワードを入力するように求められます。正常に認証されたら、<systemitem class="username">root</systemitem>としてコマンドが実行されます。
      </para>
<screen>
<prompt>&gt; </prompt><command>id -un</command><co xml:id="co-sudo-usage-id"/>
tux
<prompt>&gt; </prompt><command>sudo</command> <command>id -un</command>
root's password:<co xml:id="co-sudo-usage-pw"/>
root
<prompt>&gt; </prompt><command>id -un</command>
tux<co xml:id="co-sudo-usage-after"/>
<prompt>&gt; </prompt><command>sudo</command> <command>id -un</command>
<co xml:id="co-sudo-usage-nopw"/>
root
</screen>
      <calloutlist>
        <callout arearefs="co-sudo-usage-id">
          <para>
            <command>id -un</command>コマンドは、現在のユーザのログイン名を出力します。
          </para>
        </callout>
        <callout arearefs="co-sudo-usage-pw">
          <para>
            入力時には、パスワードは表示されません(クリアテキストとしてだけでなく、マスク文字としても表示されません)。
          </para>
        </callout>
        <callout arearefs="co-sudo-usage-after">
          <para>
            <command>sudo</command>で始まるコマンドのみが、昇格された特権で実行されます。
          </para>
        </callout>
        <callout arearefs="co-sudo-usage-nopw">
          <para>
            昇格された特権は特定の期間保持されるため、再び<systemitem class="username">root</systemitem>パスワードを入力する必要はありません。
          </para>
        </callout>
      </calloutlist>
      <tip>
        <title>I/Oリダイレクト</title>
        <para>
          <command>sudo</command>の使用時に、I/Oリダイレクトは機能しません。
        </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> echo s &gt; /proc/sysrq-trigger
bash: /proc/sysrq-trigger: Permission denied
<prompt>&gt; </prompt><command>sudo</command> cat &lt; /proc/1/maps
bash: /proc/1/maps: Permission denied
</screen>
        <para>
          上記の例では、<command>echo</command>および<command>cat</command>コマンドのみが昇格された特権で実行されます。リダイレクトはユーザの特権を使用してユーザのシェルで実行されます。昇格された権限でリダイレクトを実行するには、<xref linkend="sec-sudo-shell"/>に記載されているようにシェルを起動するか、<command>dd</command>ユーティリティを使用します。
        </para>
<screen>
echo s | sudo dd of=/proc/sysrq-trigger
sudo dd if=/proc/1/maps | cat 
</screen>
      </tip>
    </sect2>

    <sect2 xml:id="sec-sudo-shell">
      <title>シェルの起動</title>
      <para>
        昇格された特権でコマンドを実行するたびに<command>sudo</command>を使用することは、必ずしも実用的ではありません。<command>sudo
        bash</command>コマンドを使用できますが、組み込みメカニズムのいずれかを使用してシェルを起動することをお勧めします。
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>sudo -s (&lt;command&gt;)</literal></term>
          <listitem>
            <para>
              <envar>SHELL</envar>環境変数で指定したシェル、またはターゲットユーザのデフォルトのシェルを起動します。コマンドが指定される場合は、シェルに渡されます(<option>-c</option>オプションを使用)。そうでない場合、シェルは対話的モードで実行されます。
            </para>
<screen>
<prompt>tux:~ &gt; </prompt>sudo -s
root's password:
<prompt>root:/home/tux # </prompt>exit
<prompt>tux:~ &gt; </prompt>
</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>sudo -i (&lt;command&gt;)</literal></term>
          <listitem>
            <para>
              <option>-s</option>と同様ですが、シェルはログインシェルとして起動します。これは、シェルの起動ファイル(<filename>.profile</filename>など)が処理され、現在の作業ディレクトリがターゲットユーザのホームディレクトリに設定されることを意味します。
            </para>
<screen>
<prompt>tux:~ &gt; </prompt>sudo -i
root's password:
<prompt>root:~ # </prompt>exit
<prompt>tux:~ &gt; </prompt>
            </screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <tip>
        <title>環境変数</title>
        <para>
          デフォルトでは、<command>sudo</command>は環境変数を伝達しません。この動作は、<literal>env_reset</literal>オプションを使用して変更できます(<xref linkend="tab-adm-sudo-options"/>を参照してください)。
        </para>
      </tip>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-sudo-conf">
    <title><command>sudo</command>の構成</title>

    <para>
      <command>sudo</command>は、設定可能なオプションの幅広い範囲を提供します。
    </para>

    <note>
      <title>sudoからのロックアウト</title>
      <para>
        誤って<command>sudo</command>からロックアウトした場合は、<command>su
        -</command>と<systemitem class="username">root</systemitem>パスワードを使用してルートシェルを起動してください。エラーを修正するには、<command>visudo</command>を実行します。
      </para>
    </note>
    
    <warning>
      <title>設定例はデモンストレーションのみを目的としています</title>
      <para>
        以下で紹介するルールの例はデモンストレーションのみを目的としています。これらのルール例を利用して、<command>sudo</command>設定ファイルの一般的な構文を理解してください。実際の環境では、このルール例をそのまま使用しないでください。環境の複雑さを反映していないからです。
      </para>
    </warning>
    <sect2 xml:id="sudo-creating-custom-configuration-bp">
      <title><command>sudo</command>の設定でのベストプラクティス</title>
      <para>
        まず、<command>sudo</command>設定を維持するための基本ルールについて説明します。
      </para>
      <variablelist>
        <varlistentry>
          <term><command>sudo</command>の設定ファイルの編集には必ず<command>visudo</command>を使用する</term>
          <listitem>
            <para>
              <command>sudo</command>の設定の変更では、どの場合も<command>visudo</command>コマンドを使用する必要があります。<command>visudo</command>は、<command>sudo</command>設定ファイルを編集することができ、基本的な構文チェックを実行して、設定がそのまま機能できるようにする、オーダーメイドツールです。<command>sudo</command>の設定に不備があると、ユーザが自身のシステムからロックアウトされることがあります。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>必ず<filename>/etc/sudoers.d/</filename>にカスタム設定を作成する</term>
          <listitem>
            <para>
              カスタム設定は、<command>sudo</command>によって取得できるように、<filename>/etc/sudoers.d/</filename>に置く必要があります。カスタム設定ファイルに記述した設定は、<filename>/etc/sudoers</filename>のデフォルト設定よりも優先されます。 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>設定が読み取られる順序にいつでも注意する</term>
          <listitem>
            <para>
              カスタム設定が確実に正しい順序で読み取られるように数字のプレフィクスを付加します。先頭に0を付加してファイルの読み取り順序を指定します。これにより、たとえば<filename>01_myfirstconfig</filename>は<filename>10_myotherconfig</filename>よりも前に解析されます。順番に読み取られる複数のディレクティブを設定したファイルで、これらの各ディレクティブに記述された情報が互いに矛盾していると、最後に読み込まれたディレクティブが適用されます。 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>必ずわかりやすいファイル名を使用する</term>
          <listitem>
            <para>
              設定ファイルの機能がわかるようなファイル名を使用します。<command>sudo</command>のセットアップで想定している動作を追跡する際に、この措置が効果的です。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="sudo-creating-custom-config-single-user">
      <title>ユーザ固有の設定ファイルの作成</title>
      <para>
        通常のユーザ(<systemitem class="username">tux</systemitem>)が、<systemitem class="username">root</systemitem>パスワードではなく自身のパスワードを使用して、<command>useradd</command>コマンドを使用できるように、<command>sudo</command>の設定ファイルを作成します。 
      </para>
      <example xml:id="ex-sudo-custom-config-user">
        <title>ユーザ固有の設定ファイルの作成</title>
        <procedure>
          <step>
            <para>
              新しいユーザ固有のディレクティブを保持するカスタム設定ファイルを作成します。そのためには、システム管理者(<systemitem class="username">root</systemitem>)として<command>visudo</command>を起動します。番号付けと説明的な名前の両方を使用します。
            </para>
            <screen>
  <prompt role="root"># </prompt><command>visudo -f /etc/sudoers.d/02_usermanagement</command>
            </screen>
          </step>
          <step>
            <para>
              この<command>sudo</command>設定を適用する環境全体で<systemitem class="username">tux</systemitem>が<command>/usr/sbin/useradd</command>バイナリを実行できるようにするルールを作成します。
            </para>
            <screen>
  tux<co xml:id="co-who"/> ALL<co xml:id="co-where"/> = /usr/sbin/useradd<co xml:id="co-what"/>
            </screen>
            <calloutlist>
              <callout arearefs="co-who">
                <para>
                  ユーザまたはグループを指定します。ユーザは、名前または<literal>#UID</literal>で一覧にし、グループは、<literal>%GROUPNAME</literal>で一覧にします。複数の項目はコンマで区切ります。エントリを無効にするには<literal>!</literal>を使用します。
                </para>
              </callout>
              <callout arearefs="co-where">
                <para>
                  ホストを1つまたはコンマで区切って複数指定します。完全修飾ホスト名またはIPアドレスを使用します。すべてのホストにこの設定をグローバルに適用するには<literal>ALL</literal>を追記します。適用しない場合は<literal>!</literal>を使用します。
                </para>
              </callout>
              <callout arearefs="co-what">
                <para>
                  実行可能ファイルを1つまたはコンマで区切って複数指定します。各ファイルの指定では次のルールに留意します。
                </para>
                <variablelist>
                  <varlistentry>
                    <term><command>/usr/sbin/useradd</command></term>
                    <listitem>
                      <para>
                        追加オプションを追記しない場合は、実行可能なすべての<command>useradd</command>コマンドを実行できます。
                      </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><command>/usr/sbin/useradd -c</command></term>
                    <listitem>
                      <para>
                        明示的にオプションを指定すると、そのオプションのみが適用されます。上記で指定したユーザは、これ以外のオプションを利用できません。
                      </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><command>/usr/sbin/useradd ""</command></term>
                    <listitem>
                      <para>
                        オプションを指定せずに<command>useradd</command>の呼び出しのみができるようにします。 
                      </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
                <para>
                  上記の例では、すべてのオプションおよびサブコマンドを許可したり、セキュリティ上の理由からいくつかに制限したりできますが、ユーザがオプションを指定できないようにすることは、このコンテキストでは意味がありません。
                </para>
              </callout>
            </calloutlist>
          </step>
          <step>
            <para>
              ユーザが<systemitem class="username">root</systemitem>パスワードの代わりに、自分のパスワードを使用できるようにするには、次の行を追加します。
            </para>
            <screen>Defaults:tux !targetpw
            </screen>
            <para>
              このフラグがアクティブな場合、目的のユーザ(<systemitem class="username">root</systemitem>)のパスワードの入力が求められます。<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>システムでは、このフラグがデフォルトで有効になっています。<literal>!</literal>を使用してこのフラグを無効にすると、ユーザは<systemitem class="username">root</systemitem>パスワードの代わりに自分のパスワードの入力を求められます。
            </para>
          </step>
          <step>
            <para>
              設定を保存し、エディタを終了して、2番目のシェルを開き、<command>sudo</command>が新しい設定に従うかどうかをテストします。
            </para>
          </step>
        </procedure>
      </example>
    </sect2>

    <sect2 xml:id="sudo-creating-custom-config-group">
      <title>項目のグループ化によるカスタム設定の作成</title>
      <para>
        指定したユーザのグループが<systemitem class="username">root</systemitem>パスワードを必要とせずに<command>useradd</command>コマンドを実行できるように、<xref linkend="ex-sudo-custom-config-user"/>の設定を変更します。また、このグループで使用できるコマンドのリストに<command>usermod</command>と<command>userdel</command>を追加します。
      </para>
      <example xml:id="ex-sudo-custom-config-group">
        <title>項目のグループ化によるカスタム設定の作成</title>
        <procedure>
          <step>
            <para>
              この設定例を変更するには、<command>visudo</command>を使用してシステム管理者として設定を開きます。
            </para>
            <screen><prompt role="root"># </prompt><command>visudo /etc/sudoers.d/02_usermanagement</command>
            </screen>
          </step>
          <step>
            <para>
              コンマ区切りで記述した複数のユーザをルールに追加します。
            </para>
            <screen>tux, wilber ALL = /usr/sbin/useradd
            </screen>
          </step>
          <step>
            <para>
              ここで記述したユーザが複数のコマンドを実行できるようにするには、それらのコマンドをコンマ区切りで指定します。
            </para>
            <screen>tux, wilber ALL = /usr/sbin/useradd, /usr/sbin/usermod, /usr/sbin/userdel
            </screen>
          </step>
          <step>
            <para>
              ここで記述したユーザが<systemitem class="username">root</systemitem>パスワードの代わりに、自分のパスワードを使用できるようにするには、次の行を追加します。
            </para>
            <screen>Defaults:tux, wilber !targetpw
            </screen>
            <para>
              このフラグがアクティブな場合、ここで記述したユーザは目的のユーザ(<systemitem class="username">root</systemitem>)のパスワードの入力が求められます。<phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase>システムでは、このフラグがデフォルトで有効になっています。<literal>!</literal>を使用してこのフラグを無効にすると、ここで記述したユーザは<systemitem class="username">root</systemitem>パスワードの代わりに自分のパスワードの入力を求められます。
            </para>
          </step>
          <step>
            <para>
              設定を保存し、エディタを終了して、2番目のシェルを開き、<command>sudo</command>が新しい設定に従うかどうかをテストします。
            </para>
          </step>
        </procedure>
      </example>
    </sect2>

    <sect2 xml:id="sudo-creating-custom-config-aliases">
      <title>エイリアスの適用による設定の簡潔化</title>
      <para>
        エイリアスを使用して、<xref linkend="ex-sudo-custom-config-group"/>のカスタム設定の簡素化を進めます。項目をグループ化することはある程度役立ちますが、ユーザ、コマンド、およびホストのグローバルエイリアスを使用することが、クリーンで無駄のない<command>sudo</command>設定を保つための最も効率的な方法です。
      </para>
      <para>
        リストの代わりにエイリアスやグループを使用する方が、セットアップの変更に対処する上ではるかに良い方法です。グループからユーザが離れる場合は、独立したカスタム設定ファイルをすべて調べるのではなく、エイリアス宣言ファイル内のグローバル<literal>User_Alias</literal>宣言からそのユーザを削除するだけですみます。他のタイプのエイリアス(<literal>Host_Alias</literal>、<literal>Cmnd_Alias</literal>、および<literal>Runas_Alias</literal>)についても、同じ手順が適用されます。
      </para>
      <example xml:id="ex-sudo-custom-config-alias">
        <title>エイリアスの適用による設定の簡潔化</title>
        <procedure>
          <step>
            <para>
              グローバルエイリアス定義を保持する新しいファイルを作成します。
            </para>
            <screen><prompt role="root"># </prompt><command>visudo /etc/sudoers.d/01_aliases</command>
  </screen>
          </step>
          <step>
            <para>
              次の行を追加して、<literal>TEAMLEADERS</literal>エイリアスを作成します。
            </para>
            <screen>User_Alias    TEAMLEADERS = tux, wilber
            </screen>
          </step>
          <step>
            <para>
              次の行を追加して、<literal>USERMANAGEMENT</literal>エイリアスを作成します。
            </para>
            <screen>Cmnd_Alias    USERMANAGEMENT = /usr/sbin/useradd, /usr/sbin/usermod, /usr/sbin/userdel
            </screen>
          </step>
          <step>
            <para>
              変更を保存し、<command>visudo</command>を終了します。
            </para>
          </step>
          <step>
            <para>
              システム管理者として<command>visudo</command>を起動して、設定ファイル例を次のように編集します。
            </para>
            <screen><prompt role="root"># </prompt><command>visudo -f /etc/sudoers.d/02_usermanagement</command>
            </screen>
          </step>
          <step>
            <para>
              前のルールを削除し、上記で定義したエイリアスを使用する次のルールに置き換えます。
            </para>
            <screen>TEAMLEADERS ALL = USERMANAGEMENT
            </screen>
          </step>
          <step>
            <para>
              <literal>User_Alias</literal>で定義されたすべてのユーザが<systemitem class="username">root</systemitem>パスワードの代わりに、自分のパスワードを使用できるようにするには、次の行を追加します。
            </para>
            <screen>Defaults:TEAMLEADERS !targetpw</screen>
          </step>
          <step>
            <para>
              設定を保存し、エディタを終了して、2番目のシェルを開き、<command>sudo</command>が新しい設定に従うかどうかをテストします。
            </para>
          </step>
        </procedure>
      </example>
    </sect2>

    <sect2 xml:id="sec-sudo-conf-syntax">
      <title>基本的なsudoersの設定構文</title>
      <para>
        sudoersの設定ファイルには、2種類のオプション(文字列とフラグ)があります。文字列には任意の値を含めることができますが、フラグはONかOFFのいずれかのみです。sudoersの設定ファイルの最も重要な構文構造は次のとおりです。
      </para>
<screen>
# Everything on a line after # is ignored <co xml:id="co-sudo-syntax-comment"/>
Defaults !insults # Disable the insults flag <co xml:id="co-sudo-syntax-flag"/>
Defaults env_keep += "DISPLAY HOME" # Add DISPLAY and HOME to env_keep
tux ALL = NOPASSWD: /usr/bin/frobnicate, PASSWD: /usr/bin/journalctl <co xml:id="co-sudo-syntax-rule"/>
</screen>
      <calloutlist>
        <callout arearefs="co-sudo-syntax-comment">
          <para>
            例外が2つあります。<literal>#include</literal>と<literal>#includedir</literal>は通常のコマンドです。
          </para>
        </callout>
        <callout arearefs="co-sudo-syntax-flag">
          <para>
            <literal>!</literal>文字を削除して、目的のフラグをONに設定します。
          </para>
        </callout>
        <callout arearefs="co-sudo-syntax-rule">
          <para>
            <xref linkend="sec-sudo-conf-rule"/>を参照してください。
          </para>
        </callout>
      </calloutlist>
      <variablelist xml:id="tab-adm-sudo-options">
        <title>有用なフラグとオプション</title>
        <varlistentry>
          <term><literal>targetpw</literal></term>
          <listitem>
            <para>
              このフラグは、呼び出し元のユーザが、ターゲットユーザのパスワード(ON)(<systemitem class="username">root</systemitem>など)と、呼び出し元のユーザのパスワード(OFF)のいずれを要求されるかを決定します。
            </para>
<screen>Defaults targetpw # Turn targetpw flag ON</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>rootpw</literal></term>
          <listitem>
            <para>
              設定すると、<command>sudo</command>は、<systemitem class="username">root</systemitem>パスワードを要求します。デフォルトはOFFです。
            </para>
<screen>Defaults !rootpw # Turn rootpw flag OFF</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>env_reset</literal></term>
          <listitem>
            <para>
              設定すると、<command>sudo</command>は<envar>TERM</envar>、<envar>PATH</envar>、<envar>HOME</envar>、<envar>MAIL</envar>、<envar>SHELL</envar>、<envar>LOGNAME</envar>、<envar>USER</envar>、<envar>USERNAME</envar>、および<envar>SUDO_*</envar>で最小限の環境を構築します。また、<literal>env_keep</literal>に列挙されている変数は、呼び出し元の環境からインポートされます。デフォルトは［ON］です。
            </para>
<screen>Defaults env_reset # Turn env_reset flag ON</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>env_keep</literal></term>
          <listitem>
            <para>
              <literal>env_reset</literal>フラグがONの場合に保持する環境変数の一覧。
            </para>
<screen>
# Set env_keep to contain EDITOR and PROMPT
Defaults env_keep = "EDITOR PROMPT"
Defaults env_keep += "JRE_HOME" # Add JRE_HOME
Defaults env_keep -= "JRE_HOME" # Remove JRE_HOME
</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>env_delete</literal></term>
          <listitem>
            <para>
              <literal>env_reset</literal>フラグがOFFの場合に削除する環境変数の一覧。
            </para>
<screen>
# Set env_delete to contain EDITOR and PROMPT
Defaults env_delete = "EDITOR PROMPT"
Defaults env_delete += "JRE_HOME" # Add JRE_HOME
Defaults env_delete -= "JRE_HOME" # Remove JRE_HOME
</screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        <literal>Defaults</literal>トークンを使用することで、ユーザ、ホスト、およびコマンドのコレクションのエイリアスを作成することもできます。さらに、一連のユーザのみを対象としてオプションを適用することができます。
      </para>
      <para>
        sudoers設定ファイルの詳細については、<command>man 5
        sudoers</command>を参照してください。
      </para>
    </sect2>

    <sect2 xml:id="sec-sudo-conf-rule">
      <title>基本的なsudoersのルール</title>
      <para>
        各ルールは、次のスキームに従います(<literal>[]</literal>はオプション部分を示しています)。
      </para>
<screen>
#Who      Where         As whom      Tag                What
User_List Host_List = [(User_List)] [NOPASSWD:|PASSWD:] Cmnd_List
</screen>
      <variablelist>
        <title>sudoersルールの構文</title>
        <varlistentry>
          <term><literal>User_List</literal></term>
          <listitem>
            <para>
              1つ以上の(コンマで区切られた)識別子。ユーザ名、<literal>%GROUPNAME</literal>形式のグループ、または<literal>#UID</literal>形式のユーザIDを指定します。否定は<literal>!</literal>プレフィクスで指定できます。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Host_List</literal></term>
          <listitem>
            <para>
              1つ以上の(コンマで区切られた)識別子。(完全修飾された)ホスト名またはIPアドレスのいずれかを指定します。否定は<literal>!</literal>プレフィクスで指定できます。通常、<literal>Host_List</literal>には<literal>ALL</literal>を選択します。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>NOPASSWD:|PASSWD:</literal></term>
          <listitem>
            <para>
              <literal>NOPASSWD:</literal>の後に記述した、<literal>Cmd_List</literal>と一致するコマンドを実行する場合は、パスワードが要求されません。
            </para>
            <para>
              <literal>PASSWD</literal>はデフォルトです。<literal>PASSWD</literal>と<literal>NOPASSWD</literal>の両方が同じ行に存在する場合にのみ指定する必要があります。
            </para>
<screen>tux ALL = PASSWD: /usr/bin/foo, NOPASSWD: /usr/bin/bar</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Cmnd_List</literal></term>
          <listitem>
            <para>
              1つまたは複数の(コンマで区切られた)指定子。実行可能ファイルへのパスの後に、オプションで使用可能な引数を指定します。
            </para>
<screen>
/usr/bin/foo     # Anything allowed
/usr/bin/foo bar # Only "/usr/bin/foo bar" allowed
/usr/bin/foo ""  # No arguments allowed
</screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        <literal>ALL</literal>は、<literal>User_List</literal>、<literal>Host_List</literal>、および<literal>Cmnd_List</literal>として使用できます。
      </para>
      <para>
        パスワードを入力しなくても、<systemitem class="username">tux</systemitem>がすべてのコマンドをrootとして実行できるようにするルールは次のとおりです。
      </para>
<screen>tux ALL = NOPASSWD: ALL</screen>
      <para>
        <systemitem class="username">tux</systemitem>が<command>systemctl restart
        apache2</command>を実行できるようにするルールは次のとおりです。
      </para>
<screen>tux ALL = /usr/bin/systemctl restart apache2</screen>
      <para>
        <systemitem class="username">tux</systemitem>が<command>wall</command>を<systemitem>admin</systemitem>として引数なしで実行できるようにするルールは次のとおりです。
      </para>
<screen>tux ALL = (admin) /usr/bin/wall ""</screen>
      <warning>
        <title>危険なルール</title>
        <para>
          <literal>Defaults targetpw</literal>なしで、<literal>ALL ALL =
          ALL</literal>のようなルールを使用<emphasis>「しないでください」</emphasis>。そうしないと、だれでも<systemitem class="username">root</systemitem>としてコマンドを実行できるようになります。
        </para>
      </warning>
      <important>
        <title>Winbindとsudo</title>
        <para>
          <filename>sudoers</filename>ファイルでグループ名を指定する場合は、レルムの代わりにNetBIOSドメイン名を使用するようにしてください。次に例を示します。
        </para>
<screen><replaceable>%DOMAIN</replaceable>\\<replaceable>GROUP_NAME</replaceable> ALL = (ALL) ALL</screen>
        <para>
          winbinddを使用する場合、この形式は、<filename>smb.conf</filename>ファイルの<option>winbind separator</option>オプションによっても異なることに注意してください。デフォルトでは、<literal>\</literal>です。たとえば、<literal>+</literal>に変更された場合、<filename>sudoers</filename>ファイルのアカウント形式は<literal>DOMAIN+GROUP_NAME</literal>である必要があります。
        </para>
      </important>
    </sect2>
  </sect1>

  <sect1 xml:id="sec-sudo-usecases-xorg">
    <title>X.Orgアプリケーションでの<command>sudo</command>の使用</title>
    <para>
      グラフィカルアプリケーションを<command>sudo</command>で起動すると、通常、次のエラーが発生します。
    </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> xterm
xterm: Xt error: Can't open display: %s
xterm: DISPLAY is not set
</screen>
    <para>
      簡単な回避策は、xhostを使用して、ルートユーザがローカルユーザのXセッションに一時的にアクセスできるようにすることです。これは、次のコマンドを使用して実行されます。
    </para>
<screen>xhost si:localuser:root</screen>
    <para>
      次のコマンドは許可されたアクセスを削除します。
    </para>
<screen>xhost -si:localuser:root</screen>
    <warning>
      <title>潜在的なセキュリティの問題</title>
      <para>
        ルート特権でグラフィカルアプリケーションを実行すると、セキュリティに影響を与えます。例外としてのみグラフィカルアプリケーションのルートアクセスを有効にすることをお勧めします。グラフィカルアプリケーションが閉じられたらすぐに、許可されたルートアクセスを取り消すことも推奨されます。
      </para>
    </warning>
  </sect1>
  <sect1 xml:id="sec-adm-sudo-moreinfo">
    <title>詳細情報</title>

    <para>
      <command>sudo --help</command>コマンドは、使用可能なコマンドラインオプションの簡単な概要を提供し、<command>man sudoers</command>コマンドは、<filename>sudoers</filename>とその設定に関する詳細情報を提供します。
    </para>
  </sect1>
</chapter>
