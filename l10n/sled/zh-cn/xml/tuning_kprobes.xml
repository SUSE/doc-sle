<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="tuning_kprobes.xml" version="5.0" xml:id="cha-tuning-kprobes">
 <title>内核探测</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
	<dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  内核探测是用于收集 Linux 内核调试信息和性能信息的一组工具。开发人员和系统管理员通常使用这些工具来调试内核或查找系统性能瓶颈。然后，可以使用报告的数据来微调系统，以改善性能。
 </para>
 <para>
  您可将这些探测插入到任何内核例程，并指定在命中特定断点后要调用的处理程序。内核探测的主要优势在于，在探测中进行更改后，您无需再重构建内核并重引导系统。
 </para>
 <para>
  要使用内核探测，通常需要编写或获取特定的内核模块。此类模块包括 <emphasis>init</emphasis> 和 <emphasis>exit</emphasis> 函数。init 函数（例如 <systemitem>register_kprobe()</systemitem>）可注册一个或多个探测，而 exit 函数可取消注册这些探测。注册函数定义了要将探测插入到<emphasis>何处</emphasis>，以及在命中探测后要调用<emphasis>哪个处理程序</emphasis>。要一次性注册或取消注册一组探测，可以使用相关的 <literal>register_&lt;<replaceable>PROBE_TYPE</replaceable>&gt;probes()</literal> 或 <literal>unregister_&lt;<replaceable>PROBE_TYPE</replaceable>&gt;probes()</literal> 函数。
 </para>
 <para>
  通常使用 <systemitem>printk</systemitem> 内核例程报告调试和状态消息。<systemitem>printk</systemitem> 是一个内核空间，相当于用户空间 <systemitem>printf</systemitem> 例程。有关 <systemitem>printk</systemitem> 的详细信息，请参见<link xlink:href="https://www.win.tue.nl/~aeb/linux/lk/lk-2.html#ss2.8">Logging
  kernel messages</link>。正常情况下，您可以通过检查 <systemitem class="daemon">systemd</systemitem> 日志的输出（请参见<xref linkend="cha-journalctl"/>）查看这些消息。有关日志文件的详细信息，请参见<xref linkend="cha-tuning-syslog"/>。
 </para>
 <sect1 xml:id="cha-tuning-kprobes-supparch">
  <title>支持的体系结构</title>

  <para>
   可在下列体系结构上<emphasis>完全</emphasis>实施内核探测：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     x 86
    </para>
   </listitem>
   <listitem>
    <para>
     AMD64/Intel 64
    </para>
   </listitem>
   <listitem>
    <para>
     Arm
    </para>
   </listitem>
   <listitem>
    <para>
     POWER
    </para>
   </listitem>
  </itemizedlist>

  <para>
   可在下列体系结构上<emphasis>部分</emphasis>实施内核探测：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     IA64（不支持对指令 <systemitem>slot1</systemitem> 使用探测）
    </para>
   </listitem>
   <listitem>
    <para>
     sparc64（尚未实施返回探测）
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="cha-tuning-kprobes-types">
  <title>内核探测的类型</title>

  <para>
   有三种内核探测：<emphasis>Kprobe</emphasis>、<emphasis>Jprobe</emphasis> 和 <emphasis>Kretprobe</emphasis>。Kretprobe 有时称作<emphasis>返回探测</emphasis>。您可以找到 Linux 内核中所有三种类型探测的源代码示例。请查看目录 <filename>/usr/src/linux/samples/kprobes/</filename>（软件包 <systemitem>kernel-source</systemitem>）。
   <remark>sknorr, 2014-08-21: that the words kprobes and kprobe are
    used interchangeably here is slightly confusing. (Same goes for jprobes and
    jprobe)</remark>
  </para>

  <sect2 xml:id="cha-tuning-kprobes-types-kprobe">
   <title>Kprobe</title>
   <para>
    Kprobe 可附加到 Linux 内核中的任何指令。注册 Kprobe 后，它会在所探测指令的第一个字节处插入一个断点。当处理器命中此断点时，将保存处理器注册，然后由 Kprobe 接管后续处理。首先执行一个<emphasis>前处理程序</emphasis>，然后执行所探测的指令，最后执行一个<emphasis>后处理程序</emphasis>。随后，控制权将传递给探测点后面的指令。
   </para>
  </sect2>

  <sect2 xml:id="cha-tuning-kprobes-types-jprobe">
   <title>Jprobe</title>
   <para>
    Jprobe 是通过 Kprobe 机制实施的。它将插入到函数的入口点，允许直接访问正在探测的函数的参数。其处理程序例程的参数列表与返回值必须与所探测函数相同。要结束 Jprobe，请调用 <systemitem>jprobe_return()</systemitem> 函数。
   </para>
   <para>
    命中某个 jprobe 后，将保存处理器注册，并将指令指针定向到 jprobe 处理程序例程。然后，控制权将传递给与所要探测函数具有相同注册内容的处理程序。最后，该处理程序调用 <systemitem>jprobe_return()</systemitem> 函数，并将控制权切回给控制函数。
   </para>
   <para>
    一般情况下，您可以在一个函数中插入多个探测。但是，Jprobe 仅限每个函数一个实例。
   </para>
  </sect2>

  <sect2 xml:id="cha-tuning-kprobes-types-kretprobe">
   <title>返回探测</title>
   <para>
    返回探测也是通过 Kprobe 实施的。调用 <systemitem>register_kretprobe()</systemitem> 函数时，会将一个 kprobe 附加到所探测函数的入口。命中探测后，内核探测机制将保存所探测函数的返回地址，并调用用户定义的返回处理程序。然后，控制权将传回给所探测的函数。
   </para>
   <para>
    在调用 <systemitem>register_kretprobe()</systemitem> 之前，需要设置一个 <systemitem>maxactive</systemitem> 参数，用于指定可以同时探测多少个函数实例。如果设置值太小，您会错过某些探测。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="cha-tuning-kprobes-api">
  <title>Kprobe API</title>

  <para>
   Kprobe 的编程接口由用于注册和取消注册所有已用内核探测及关联探测处理程序的函数组成。有关这些函数及其参数的更详细说明，请参见<xref linkend="cha-tuning-kprobes-moreinfo"/>中的信息源。
  </para>

  <variablelist>
   <varlistentry>
    <term><systemitem>register_kprobe()</systemitem>
    </term>
    <listitem>
     <para>
      在指定的地址上插入一个断点。命中该断点时，将调用 <systemitem>pre_handler</systemitem> 和 <systemitem>post_handler</systemitem>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>register_jprobe()</systemitem>
    </term>
    <listitem>
     <para>
      在指定的地址中插入一个断点。该地址须是所探测函数的第一个指令的地址。命中该断点时，将运行指定的处理程序。该处理程序的参数列表与返回类型应与所探测函数相同。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>register_kretprobe()</systemitem>
    </term>
    <listitem>
     <para>
      为指定的函数插入一个返回探测。当所探测函数返回值时，将运行指定的处理程序。此函数在成功时返回 0，在失败时返回带负号的错误编号。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>unregister_kprobe()</systemitem>, <systemitem>unregister_jprobe()</systemitem>, <systemitem>unregister_kretprobe()</systemitem>
    </term>
    <listitem>
     <para>
      去除指定的探测。注册探测后便可随时使用该探测。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>register_kprobes()</systemitem>, <systemitem>register_jprobes()</systemitem>, <systemitem>register_kretprobes()</systemitem>
    </term>
    <listitem>
     <para>
      在指定的阵列中插入每个探测。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>unregister_kprobes()</systemitem>, <systemitem>unregister_jprobes()</systemitem>, <systemitem>unregister_kretprobes()</systemitem>
    </term>
    <listitem>
     <para>
      去除指定阵列中的每个探测。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>disable_kprobe()</systemitem>, <systemitem>disable_jprobe()</systemitem>, <systemitem>disable_kretprobe()</systemitem>
    </term>
    <listitem>
     <para>
      暂时禁用指定的探测。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>enable_kprobe()</systemitem>, <systemitem>enable_jprobe()</systemitem>, <systemitem>enable_kretprobe()</systemitem>
    </term>
    <listitem>
     <para>
      暂时启用已禁用的探测。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="cha-tuning-kprobes-debugfs">
  <title><systemitem>debugfs</systemitem> 界面</title>

  <para>
   在最新的 Linux 内核中，Kprobe 工具使用内核的 <systemitem>debugfs</systemitem> 接口。此接口可以列出所有已注册的探测并全局打开或关闭所有探测。
  </para>

  <sect2 xml:id="cha-tuning-kprobes-debugfs-list">
   <title>列出已注册的内核探测</title>
   <para>
    <filename>/sys/kernel/debug/kprobes/list</filename> 文件中列出了当前已注册的所有探测。
   </para>
<screen>saturn.example.com:~ # cat /sys/kernel/debug/kprobes/list
c015d71a  k  vfs_read+0x0   [DISABLED]
c011a316  j  do_fork+0x0
c03dedc5  r  tcp_v4_rcv+0x0</screen>
   <para>
    第一列列出探测所要插入到的内核中的地址。第二列列显探测的类型：<literal>k</literal> 表示 kprobe，<literal>j</literal> 表示 jprobe，<literal>r</literal> 表示返回探测。第三列指定探测的符号、偏移和可选模块名称。后面的可选列包含探测的状态信息。如果探测插入到不再有效的虚拟地址，将以 <literal>[GONE]</literal> 标记。如果探测被暂时禁用，将以 <literal>[DISABLED]</literal> 标记。
   </para>
  </sect2>

  <sect2 xml:id="cha-tuning-kprobes-debugfs-switch">
   <title>全局启用/禁用内核探测</title>
   <para>
    <filename>/sys/kernel/debug/kprobes/enabled</filename> 文件表示一个开关，可用于全局以及强制性打开或关闭所有已注册的内核探测。要关闭这些探测，只需在命令行中输入
   </para>
<screen><prompt role="root"># </prompt>echo "0" &gt; /sys/kernel/debug/kprobes/enabled</screen>
   <para>
    （以 <systemitem class="username">root</systemitem> 身份）。要再次打开这些探测，请输入
   </para>
<screen><prompt role="root"># </prompt>echo "1" &gt; /sys/kernel/debug/kprobes/enabled</screen>
   <para>
    请注意，这不会更改探测的状态。如果某个探测被暂时禁用，在输入后一条命令之后，该探测不会自动启用，而是保持 <literal>[DISABLED]</literal> 状态。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="cha-tuning-kprobes-moreinfo">
  <title>更多信息</title>

  <para>
   有关内核探测的详细信息，请查看以下信息源：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <filename>/usr/src/linux/Documentation/trace/kprobes.txt</filename>（软件包 <systemitem>kernel-source</systemitem>）中提供了有关内核探测的综合信息，这些信息更多地以技术为主。
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/usr/src/linux/samples/kprobes/</filename> 目录（软件包 <systemitem>kernel-source</systemitem>）中提供了所有三种类型的探测（以及相关 <filename>Makefile</filename>）的示例。
    </para>
   </listitem>
   <listitem>
    <para>
     在 <link xlink:href="https://tldp.org/LDP/lkmpg/2.6/html/lkmpg.html">The
     Linux Kernel Module Programming Guide</link> 中可以找到有关 Linux 内核模块和 <systemitem>printk</systemitem> 内核例程的深入信息
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
