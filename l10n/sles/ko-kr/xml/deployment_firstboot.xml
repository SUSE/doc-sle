<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="deployment_firstboot.xml" version="5.0" xml:id="cha-deployment-firstboot">
    
 <title>사용자 정의된 사전 설치 배포</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>예</dm:translation>
  </dm:docmanager>
 </info>
 
<para>
  여러 동일 시스템에 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>의 사용자 정의된 사전 설치를 수행하면 시스템을 별도로 설치할 필요가 없으며 최종 사용자에게 표준화된 설치 경험을 제공할 수 있습니다. YaST 처음 부팅을 사용하여 사용자 정의된 사전 설치 이미지를 생성하고 최종 사용자의 작업과 관련된 최종 개인 설정 단계의 워크플로를 결정합니다(완전 자동화된 설치를 허용하는 AutoYaST와 반대). 자세한 내용은 <citetitle>AutoYaST 안내서</citetitle>의 <citetitle>시스템 등록 및 확장 선택</citetitle> 장을 참조하십시오.
 </para>
 <para>
  사용자 정의 설치 생성, 하드웨어에 실현 및 최종 제품 개인 설정은 다음 단계를 참조하십시오.
 </para>
 <procedure>
  <step>
   <para>
    디스크를 클라이언트 시스템에 복제해야 하는 마스터 시스템을 준비합니다. 자세한 내용은 <xref linkend="sec-fb-master"/>를 참조하십시오.
   </para>
  </step>
  <step>
   <para>
    처음 부팅 워크플로를 사용자 정의합니다. 자세한 내용은 <xref linkend="sec-fb-customize"/>를 참조하십시오.
   </para>
  </step>
  <step>
   <para>
    마스터 시스템의 디스크를 복제하여 이 이미지를 클라이언트의 디스크에 실현합니다. 자세한 내용은 <xref linkend="sec-fb-clone"/>를 참조하십시오.
   </para>
  </step>
  <step>
   <para>
    최종 사용자가 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>의 인스턴스를 개인 설정하도록 합니다. 자세한 내용은 <xref linkend="sec-fb-personalize"/>을 참조하십시오.
   </para>
  </step>
 </procedure>
 <sect1 xml:id="sec-fb-master">
  <title>마스터 시스템 준비</title>

  <para>
   처음 부팅 워크플로에 대한 마스터 시스템을 준비하려면 다음을 수행하십시오.
  </para>

  <procedure>
   <step xml:id="st-master1">
    <para>
     설치 미디어를 마스터 시스템에 삽입합니다.
    </para>
   </step>
   <step xml:id="st-master2">
    <para>
     시스템을 부팅합니다.
    </para>
   </step>
   <step xml:id="st-master3">
    <para>
     모든 필수 구성 단계를 포함해 정상적인 설치를 수행하고 설치를 위해 <systemitem>yast2-firstboot</systemitem> 패키지를 선택해야 합니다.
    </para>
   </step>
   <step xml:id="st-master4">
    <para>
     최종 사용자에 대한 YaST 구성 단계의 자체 워크플로를 정의하거나 자체 YaST 모듈을 이 워크플로에 추가하려면 <xref linkend="sec-fb-customize"/>로 진행합니다. 그렇지 않으면 직접 <xref linkend="st-master5"/>로 진행합니다.
    </para>
   </step>
   <step xml:id="st-master5">
    <para>
     <systemitem class="username">root</systemitem>로 처음 부팅을 활성화합니다.
    </para>
    <para>
     빈 파일 <filename>/var/lib/YaST2/reconfig_system</filename>을 생성하여 처음 부팅의 실행을 트리거합니다. 처음 부팅 구성이 성공적으로 수행된 후 이 파일이 삭제됩니다. 다음 명령을 사용하여 이 파일을 생성합니다.
    </para>
<screen>touch /var/lib/YaST2/reconfig_system</screen>
   </step>
   <step>
    <para>
     <xref linkend="sec-fb-clone"/>로 진행합니다.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec-fb-customize">
  <title>처음 부팅 설치 사용자 정의</title>

  <para>
   처음 부팅 설치 워크플로 사용자 정의에는 몇 가지 구성 요소가 수반될 수 있습니다. 이 구성 요소를 사용자 정의하는 것이 좋습니다. 변경하지 않을 경우 처음 부팅은 기본 설정으로 설치를 수행합니다. 다음 옵션을 사용할 수 있습니다.
  </para>

  <itemizedlist>
    <listitem>
    <para>
     <xref linkend="sec-fb-customize-msg"/>에서 설명한 대로 사용자에 대한 메시지 사용자 정의
    </para>
      </listitem>
   <listitem>
    <para>
     <xref linkend="sec-fb-customize-license"/>에서 설명한 대로 라이선스 및 라이선스 작업 사용자 정의
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-fb-customize-rn"/>에서 설명한 대로 표시할 릴리스 정보 사용자 정의
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-fb-customize-wf"/>에서 설명한 대로 설치와 관련된 구성요소의 순서와 개수 사용자 정의
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-fb-customize-script"/>에서 설명한 대로 추가 옵션 스크립트 구성
    </para>
   </listitem>
  </itemizedlist>

  <para>
   이러한 구성요소를 사용자 정의하려면 다음 구성 파일을 수정하십시오.
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/etc/sysconfig/firstboot</filename>
    </term>
    <listitem>
     <para>
      릴리스 정보, 스크립트 및 라이선스 작업 등 처음 부팅의 다양한 측면을 구성합니다.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/YaST2/firstboot.xml</filename>
    </term>
    <listitem>
     <para>
      구성요소를 활성화 또는 비활성화하거나 사용자 정의 구성요소를 추가하여 설치 워크플로를 구성합니다.
     </para>
     <para>
      <xref linkend="sec-fb-provide-trans"/>에서 설명한 대로 이러한 사용자 정의된 설치 워크플로에 대한 변환을 제공합니다.
     </para>
     <tip>
      <title>제어 파일의 대체 위치</title>
      <para>
       <filename>/etc/YaST2/firstboot.xml</filename>은 <systemitem>yast2-firstboot</systemitem> 패키지에서 설치되는 제어 파일의 기본 경로입니다. 제어 파일의 위치를 다르게 정의해야 하는 경우 <filename>/etc/sysconfig/firstboot</filename>를 편집하고 <literal>FIRSTBOOT_CONTROL_FILE</literal> 변수를 원하는 위치로 변경합니다.
      </para>
     </tip>
    </listitem>
   </varlistentry>
  </variablelist>



  <para>
   워크플로 구성요소를 제외한 다른 항목도 사용자 정의하려면 <link xlink:href="http://doc.opensuse.org/projects/YaST/SLES11/tdg/inst_in_general_chap.html#product_control"/>에서 <filename>control.xml</filename> 문서를 참조하십시오.
  </para>

  <sect2 xml:id="sec-fb-customize-msg">
   <title>YaST 메시지 사용자 정의</title>
   <para>
    기본적으로 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>의 설치에는 설치 프로세스의 특정 단계에서 한글화되고 표시된 몇 가지 기본 메시지가 포함됩니다. 여기에는 시작 메시지, 라이선스 메시지 및 축하 메시지가 설치의 끝에 포함됩니다. 이러한 메시지는 자체 버전으로 바꾸고 한글화된 버전을 설치에 포함할 수 있습니다. 자체 시작 메시지를 포함하려면 다음 작업을 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      <systemitem class="username">root</systemitem>로 로그인합니다. 
     </para>
    </step>
    <step>
     <para>
      <filename>/etc/sysconfig/firstboot</filename> 구성 파일을 열고 다음 변경사항을 적용합니다.
     </para>
     <substeps>
      <step>
       <para>
        시작 메시지와 한글화된 버전을 포함하는 파일을 저장할 디렉토리 경로에 <envar>FIRSTBOOT_WELCOME_DIR</envar>을 설정합니다. 예를 들면 다음과 같습니다.
       </para>
<screen>FIRSTBOOT_WELCOME_DIR="/usr/share/firstboot/"
</screen>
      </step>
      <step>
       <para>
        시작 메시지에 <filename>welcome.txt</filename> 및 <filename>welcome_<replaceable>locale</replaceable>.txt</filename>(여기서 <replaceable>locale</replaceable>은 <quote>cs</quote> 또는 <quote>de</quote>와 같은 ISO 639 언어 코드와 일치) 이외의 파일 이름이 있는 경우 <envar>FIRSTBOOT_WELCOME_PATTERNS</envar>에서 파일 이름 패턴을 지정합니다. 예:
       </para>
<screen>FIRSTBOOT_WELCOME_PATTERNS="mywelcome.txt"</screen>
       <para>
        기본값이 설정되지 않은 경우 <filename>welcome.txt</filename>의 기본값이 가정됩니다.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      시작 파일과 한글화된 버전을 생성하여 <filename>/etc/sysconfig/firstboot</filename> 구성 파일에 지정된 디렉토리에 배치합니다.
     </para>
    </step>
   </procedure>
   <para>
    동일한 방법으로 사용자 정의된 라이선스를 구성하고 메시지를 완료합니다. 이 변수는 <envar>FIRSTBOOT_LICENSE_DIR</envar> 및 <envar>FIRSTBOOT_FINISH_FILE</envar>입니다.
   </para>
   <para>
    설치를 수행한 직후에 YaST를 시작할 수 있으려면 <envar>SHOW_Y2CC_CHECKBOX</envar>를 <quote>예</quote>로 변경합니다.
   </para>
  </sect2>

  <sect2 xml:id="sec-fb-customize-license">
   <title>라이선스 작업 사용자 정의</title>
   <para>
    라이선스 계약에 동의하지 않고 설치 시스템이 사용자에게 반응하는 방법을 사용자 정의할 수 있습니다. 시스템이 이 시나리오에 대응할 수 있는 방법에는 다음과 같이 세 가지가 있습니다.
   </para>
   <variablelist>
    <varlistentry>
     <term>중지</term>
     <listitem>
      <para>
       처음 부팅 설치가 중단되고 전체 시스템이 종료됩니다. 이 설정이 기본 설정입니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>계속</term>
     <listitem>
      <para>
       처음 부팅 설치가 계속됩니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>중단</term>
     <listitem>
      <para>
       처음 부팅 설치가 중단되지만 시스템은 부팅하려고 시도합니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    위 항목 중에서 선택하고 <envar>LICENSE_REFUSAL_ACTION</envar>을 적합한 값으로 설정하십시오.
   </para>
  </sect2>

  <sect2 xml:id="sec-fb-customize-rn">
   <title>릴리스 정보 사용자 정의</title>
   <para>
    처음 부팅 시 배포 중인 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>의 인스턴스를 변경했는지 여부에 따라 최종 사용자에게 새 운영 체제의 중요한 측면에 대한 교육을 실시해야 할 수 있습니다. 표준 설치는 설치의 최종 단계 중 하나를 수행하는 동안 표시된 릴리스 정보를 사용하여 중요한 정보를 사용자에게 제공합니다. 자체 수정된 릴리스 정보를 처음 부팅 설치의 일부로 표시하려면 다음을 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      자체 릴리스 정보 파일을 생성합니다. RTF 형식을 <filename>/usr/share/doc/release-notes</filename>의 예제 파일에서와 같이 사용하고 결과를 <filename>RELEASE-NOTES.en.rtf</filename>(영어의 경우)로 저장합니다.
     </para>
    </step>
    <step>
     <para>
      원본 버전 옆에 한글화된 버전(옵션)을 저장하고 파일 이름의 <literal>en</literal> 부분을 실제 ISO 639 언어 코드(예: 독일어의 경우 <literal>de</literal>)로 변경합니다.
     </para>
    </step>
    <step>
     <para>
      <filename>/etc/sysconfig/firstboot</filename>에서 처음 부팅 구성 파일을 열고 <envar>FIRSTBOOT_RELEASE_NOTES_PATH</envar>를 릴리스 정보 파일이 저장된 실제 디렉토리에 설정합니다.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-fb-customize-wf">
   <title>워크플로 사용자 정의</title>
   <para>
    제공된 <filename>/etc/YaST2/firstboot.xml</filename> 예에서는 다음과 같은 활성화된 구성 요소를 포함하는 표준 워크플로를 정의합니다.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      언어 선택
     </para>
    </listitem>
    <listitem>
     <para>
      시작
     </para>
    </listitem>

    <listitem>
     <para>
      사용권 계약
     </para>
    </listitem>
    <listitem>
     <para>
      시간 및 날짜
     </para>
    </listitem>
    <listitem>
     <para>
      사용자
     </para>
    </listitem>
    <listitem>
     <para>
      루트 비밀번호
     </para>
    </listitem>
    <listitem>
     <para>
      설정 완료
     </para>
    </listitem>
   </itemizedlist>
   <para>
    이 워크플로가 템플릿이라는 점에 유의하십시오. 이 템플릿은 처음 부팅 구성 파일인 <filename>/etc/YaST2/firstboot.xml</filename>을 수동으로 편집하여 알맞게 조정할 수 있습니다. 이 XML 파일은 YaST에서 설치 워크플로를 제어하는 데 사용되는 표준 <filename>control.xml</filename> 파일의 하위 집합입니다. 워크플로 섹션 구성 방법에 대해 자세히 알아보려면 <xref linkend="ex-fb-wf"/>을 참조하십시오.
   </para>
   <para>
    제안에 대한 개요는 <xref linkend="ex-fb-proposal"/>를 참조하십시오. 여기에는 처음 부팅 설치 워크플로를 수정하는데 필요한 배경 지식이 제공됩니다. 이 예에서는 처음 부팅 구성 파일의 기본 구문과 주요 요소 구성 방식을 설명합니다.
   </para>
   <example xml:id="ex-fb-proposal">
    <title>제안 화면 구성</title>
<screen>
    …
    &lt;proposals config:type="list"&gt;<co xml:id="co-fb-plist"/>
        &lt;proposal&gt;<co xml:id="co-fb-p"/>
            &lt;name&gt;firstboot_hardware&lt;/name&gt;<co xml:id="co-fb-pname"/>
            &lt;mode&gt;installation&lt;/mode&gt;<co xml:id="co-fb-pmode"/>
            &lt;stage&gt;firstboot&lt;/stage&gt;<co xml:id="co-fb-pstage"/>
            &lt;label&gt;Hardware Configuration&lt;/label&gt;<co xml:id="co-fb-plabel"/>
            &lt;proposal_modules config:type="list"&gt;<co xml:id="co-fb-pmodl"/>
                &lt;proposal_module&gt;printer&lt;/proposal_module&gt;<co xml:id="co-fb-pmod"/>
            &lt;/proposal_modules&gt;
        &lt;/proposal&gt;
        &lt;proposal&gt;
        …
        &lt;/proposal&gt;
    &lt;/proposals&gt;
   </screen>
   </example>
   <calloutlist>
    <callout arearefs="co-fb-plist">
     <para>
      처음 부팅 워크플로의 일부여야 하는 모든 제안에 대한 컨테이너
     </para>
    </callout>
    <callout arearefs="co-fb-p">
     <para>
      개별 제안에 대한 컨테이너
     </para>
    </callout>
    <callout arearefs="co-fb-pname">
     <para>
      제안의 내부 이름
     </para>
    </callout>
    <callout arearefs="co-fb-pmode">
     <para>
      이 제안의 모드. 여기서는 변경하지 마십시오. 처음 부팅 설치의 경우는 <literal>installation</literal>으로 설정해야 합니다.
     </para>
    </callout>
    <callout arearefs="co-fb-pstage">
     <para>
      이 제안이 호출되는 설치 프로세스의 단계. 여기서는 변경하지 마십시오. 처음 부팅 설치의 경우는 <literal>firstboot</literal>로 설정해야 합니다.
     </para>
    </callout>
    <callout arearefs="co-fb-plabel">
     <para>
      제안에서 표시할 레이블.
     </para>
    </callout>
    <callout arearefs="co-fb-pmodl">
     <para>
      제안 화면의 일부인 모든 모듈에 대한 컨테이너
     </para>
    </callout>
    <callout arearefs="co-fb-pmod">
     <para>
      제안 화면의 일부인 하나 이상의 모듈
     </para>
    </callout>
   </calloutlist>
   <para>
    처음 부팅 구성 파일의 다음 섹션은 워크플로 정의로 구성됩니다. 처음 부팅 설치 워크플로의 일부여야 하는 모든 모듈이 여기에 나열되어야 합니다.
   </para>
   <example xml:id="ex-fb-wf">
    <title>워크플로 섹션 구성</title>
<screen>
    &lt;workflows  config:type="list"&gt;
        &lt;workflow&gt;
            &lt;defaults&gt;
                &lt;enable_back&gt;yes&lt;/enable_back&gt;
                &lt;enable_next&gt;yes&lt;/enable_next&gt;
                &lt;archs&gt;all&lt;/archs&gt;
            &lt;/defaults&gt;
            &lt;stage&gt;firstboot&lt;/stage&gt;
            &lt;label&gt;Configuration&lt;/label&gt;
            &lt;mode&gt;installation&lt;/mode&gt;
            … &lt;!–– list of modules  ––&gt;
            &lt;/modules&gt;
        &lt;/workflow&gt;
    &lt;/workflows&gt;
    …
  </screen>
   </example>
   <para>
    <literal>workflows</literal> 섹션의 전체 구조는 <literal>proposals</literal> 섹션의 전체 구조와 매우 유사합니다. 컨테이너에는 워크플로 요소가 보관되고 워크플로 요소에는 단계, 레이블 및 모드 정보가 <xref linkend="ex-fb-proposal"/>에서 소개된 제안과 같이 모두 포함됩니다. 가장 눈에 띄는 차이점은 워크플로 구성요소에 대한 기본 설계 정보가 포함된 <filename>defaults</filename> 섹션입니다.
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>enable_back</literal>
     </term>
     <listitem>
      <para>
       모든 대화 상자에서 <guimenu>뒤로</guimenu> 버튼을 포함합니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>enable_next</literal>
     </term>
     <listitem>
      <para>
       모든 대화 상자에서 <guimenu>다음</guimenu> 버튼을 포함합니다.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>archs</literal>
     </term>
     <listitem>
      <para>
       이 워크플로를 사용해야 하는 하드웨어 아키텍처를 지정합니다.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <example xml:id="ex-fb-wfmod">
    <title>워크플로 구성 요소 목록 구성</title>
<screen>
    &lt;modules  config:type="list"&gt;<co xml:id="co-fb-modl"/>
        &lt;module&gt;<co xml:id="co-fb-mod"/>
            &lt;label&gt;Language&lt;/label&gt;<co xml:id="co-fb-label"/>
            &lt;enabled config:type="boolean"&gt;false&lt;/enabled&gt;<co xml:id="co-fb-en"/>
            &lt;name&gt;firstboot_language&lt;/name&gt;<co xml:id="co-fb-name"/>
        &lt;/module&gt;
    &lt;modules&gt;
  </screen>
   </example>
   <calloutlist>
    <callout arearefs="co-fb-modl">
     <para>
      워크플로의 모든 구성요소에 대한 컨테이너
     </para>
    </callout>
    <callout arearefs="co-fb-mod">
     <para>
      모듈 정의
     </para>
    </callout>
    <callout arearefs="co-fb-label">
     <para>
      모듈과 함께 표시된 레이블
     </para>
    </callout>
    <callout arearefs="co-fb-en">
     <para>
      워크플로에서 이 구성요소를 활성화 또는 비활성화하는 스위치
     </para>
    </callout>
    <callout arearefs="co-fb-name">
     <para>
      모듈 이름. 모듈 자체는 <filename>/usr/share/YaST2/clients</filename>에 있어야 합니다.
     </para>
    </callout>
   </calloutlist>
   <para>
    처음 부팅 설치 중에 제안 화면의 수 또는 순서를 변경하려면 다음을 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      <filename>/etc/YaST2/firstboot.xml</filename>에서 처음 부팅 구성 파일을 엽니다.
     </para>
    </step>
    <step>
     <para>
      제안 화면을 삭제 또는 추가하거나 기존 제안 화면의 순서를 변경합니다.
     </para>
     <itemizedlist>
      <listitem>
       <para>
        전체 제안을 삭제하려면 <literal>proposals</literal> 섹션에서 모든 하위 요소가 포함된 <literal>proposal</literal> 요소를 제거하고 워크플로에서 각 <literal>module</literal> 요소(하위 요소 포함)를 제거합니다.
       </para>
      </listitem>
      <listitem>
       <para>
        새 제안을 추가하려면 새 <literal>proposal</literal> 요소를 생성하고 모든 필수 하위 요소를 채웁니다. 제안이 <filename>/usr/share/YaST2/clients</filename>에서 YaST 모듈로 존재하는지 확인합니다.
       </para>
      </listitem>
      <listitem>
       <para>
        제안 순서를 변경하려면 제안 화면을 포함하는 각 <literal>module</literal> 요소를 워크플로에서 주위로 이동합니다. 특정 순서의 제안 및 워크플로 구성 요소가 필수적인 다른 설치 단계에 대한 종속성이 있을 수 있다는 점에 유의하십시오.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      변경사항을 적용하고 구성 파일을 닫습니다.
     </para>
    </step>
   </procedure>
   <para>
    기본값이 사용자 요구에 맞지 않는 경우 구성 단계의 워크플로를 항상 변경할 수 있습니다. 워크플로에서 특정 모듈을 활성화 또는 비활성화하거나 자신만의 사용자 정의 모듈을 추가하십시오.
   </para>
   <para>
    처음 부팅 워크플로에서 모듈 상태를 전환하려면 다음을 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      <filename>/etc/YaST2/firstboot.xml</filename> 구성 파일을 엽니다.
     </para>
    </step>
    <step>
     <para>
      <literal>enabled</literal> 요소의 값을 <literal>true</literal>에서 <filename>false</filename>로 변경하여 모듈을 비활성화하거나, <literal>false</literal>에서 <literal>true</literal>로 변경하여 모듈을 다시 활성화합니다.
     </para>
<screen>
&lt;module&gt;
    &lt;label&gt;Time and Date&lt;/label&gt;
    &lt;enabled config:type="boolean"&gt;true&lt;/enabled&gt;
    &lt;name&gt;firstboot_timezone&lt;/name&gt;
&lt;/module&gt;
</screen>
    </step>
    <step>
     <para>
      변경사항을 적용하고 구성 파일을 닫습니다.
     </para>
    </step>
   </procedure>
   <para>
    워크플로에 사용자 정의 모듈을 추가하려면 다음을 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      자체 YaST 모듈을 생성하고 모듈 파일 <filename><replaceable>module_name</replaceable>.rb</filename>를 <filename>/usr/share/YaST2/clients</filename>에 저장합니다.
     </para>
    </step>
    <step>
     <para>
      <filename>/etc/YaST2/firstboot.xml</filename> 구성 파일을 엽니다.
     </para>
    </step>
    <step>
     <para>
      새 모듈을 실행해야 할 워크플로의 지점을 결정합니다. 이때 워크플로의 다른 단계에서 모든 종속성이 고려되고 해결되는지 확인합니다.
     </para>
    </step>
    <step>
     <para>
      <literal>modules</literal> 컨테이너 내에 새 <literal>module</literal> 요소를 생성하고 적합한 하위 요소를 추가합니다.
     </para>
<screen>&lt;modules config:type="list"&gt;
     …
     &lt;module&gt;
        &lt;label&gt;<replaceable>my_module</replaceable>&lt;/label&gt;
        &lt;enabled config:type="boolean"&gt;true&lt;/enabled&gt;
        &lt;name&gt;<replaceable>filename_my_module</replaceable>&lt;/name&gt;
     &lt;/module&gt;
&lt;/modules&gt;
</screen>
     <substeps>
      <step>
       <para>
        <literal>label</literal> 요소에서 모듈에 표시할 레이블을 입력합니다.
       </para>
      </step>
      <step>
       <para>
        모듈이 워크플로에 포함되도록 하려면 <literal>enabled</literal>가 <literal>true</literal>로 설정되었는지 확인합니다.
       </para>
      </step>
      <step>
       <para>
        <literal>name</literal> 요소에서 모듈의 파일 이름을 입력합니다. 전체 경로와 <filename>.rb</filename> 접미사를 생략합니다.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      설정을 적용하고 구성 파일을 닫습니다.
     </para>
    </step>
   </procedure>
   <tip>
    <title>자동 구성을 위해 연결된 네트워크 인터페이스 찾기</title>
    <para>
     대상 하드웨어에 두 개 이상의 네트워크 인터페이스가 있을 수 있는 경우 <systemitem>network-autoconfig</systemitem> 패키지를 응용 프로그램 이미지에 추가하십시오. <systemitem>Network-autoconfig</systemitem>는 DHCP를 통해 이더넷 인터페이스 중 하나가 성공적으로 구성될 때까지 사용 가능한 모든 이더넷 인터페이스를 순환합니다.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-fb-customize-script">
   <title>추가 스크립트 구성</title>
   <para>
    처음 부팅 워크플로가 완료된 후에 추가 스크립트를 실행하도록 처음 부팅을 구성할 수 있습니다. 처음 부팅 과정에 추가 스크립트를 추가하려면 다음을 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      <filename>/etc/sysconfig/firstboot</filename> 구성 파일을 열고 <envar>SCRIPT_DIR</envar>에 지정된 경로가 올바른지 확인합니다. 기본값은 <filename>/usr/share/firstboot/scripts</filename>입니다.
     </para>
    </step>
    <step>
     <para>
      셸 스크립트를 생성하여 지정된 디렉토리에 저장하고 적합한 파일 권한을 적용합니다.
     </para>
    </step>
   </procedure>
  </sect2>



  <sect2 xml:id="sec-fb-provide-trans">
   <title>설치 워크플로 변환 제공</title>
   <para>
    최종 사용자에 따라 사용자 정의된 워크플로의 변환을 제공하는 것이 바람직할 수 있습니다. 이러한 변환은 <xref linkend="sec-fb-customize-wf"/>에서 설명한 대로 <filename>/etc/YaST2/firstboot.xml</filename> 파일을 변경하여 워크플로를 사용자 정의한 경우 필요할 수 있습니다. 
   </para>
   <para>
    <filename>/etc/YaST2/firstboot.xml</filename>을 변경하고 스트링 변경사항을 적용한 경우 새 변환 템플릿 파일(<filename>.pot</filename> 파일)을 생성하고 <systemitem>gettext</systemitem> 도구 체인을 사용하여 변환한 후 변환된 파일을 YaST 로케일 디렉토리(<filename>/usr/share/YaST2/locale</filename>)에 컴파일된 <filename>.mo</filename> 파일로 설치합니다. 다음 단계를 수행하십시오.
   </para>
   <procedure>
    <step>
     <para>
      예를 들어 다음과 같은 <systemitem>textdomain</systemitem> 설정을
     </para>
<screen>&lt;textdomain&gt;firstboot&lt;/textdomain&gt;</screen>
     <para>
      다음과 같이 변경합니다.
     </para>
<screen>&lt;textdomain&gt;firstboot-oem&lt;/textdomain&gt;</screen>
    </step>
    <step>
     <para>
      <command>xgettext</command>를 사용하여 변환 가능한 스트링을 변환 템플릿 파일(<filename>.pot</filename> 파일, 예: <filename>firstboot-oem.pot</filename>)로 추출합니다.
     </para>
<screen>xgettext -L Glade -o firstboot-oem.pot /etc/YaST2/firstboot.xml</screen>
    </step>
    <step>
     <para>
      변환 프로세스를 시작합니다. 그런 다음 변환된 파일(<filename>.<replaceable>LL_code</replaceable>.po</filename> 파일)을 다른 프로젝트의 변환과 같은 방식으로 패키지로 만들고 컴파일된 <filename>firstboot-oem.mo</filename> 파일을 설치합니다.
     </para>
    </step>
   </procedure>
   <para>
    추가 또는 변경된 YaST 모듈에 대한 변환이 필요한 경우 이러한 모듈 자체 내에서 변환을 수행하십시오. 기존 모듈만 변경한 경우, 원하지 않는 부작용을 방지하기 위해 text-domain 문도 변경하십시오.
   </para>
   <tip>
    <title>추가 정보</title>
    <para>
     YaST 개발에 대한 자세한 내용은 <link xlink:href="https://en.opensuse.org/openSUSE:YaST_development"/>를 참조하십시오. YaST의 처음 부팅에 대한 자세한 내용은 <link xlink:href="http://doc.opensuse.org/projects/YaST/SLES11/tdg/bk09ch01s02.html"/>에서 확인할 수 있습니다.
    </para>
   </tip>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-fb-clone">
  <title>마스터 설치 복제</title>

  <para>
   사용할 수 있는 이미징 메커니즘을 사용하여 마스터 시스템의 디스크를 복제하고 해당 이미지를 대상 시스템에서 실행합니다. 이미징에 대한 자세한 내용은 <link xlink:href="https://doc.suse.com/kiwi/"/>를 참조하십시오.
  </para>
 </sect1>
 <sect1 xml:id="sec-fb-personalize">
  <title>설치 개인 설정</title>

  <para>
   복제된 디스크 이미지가 부팅되면 <xref linkend="sec-fb-customize-wf"/>에 표시된 대로 처음 부팅이 시작하고 설치가 진행됩니다. 처음 부팅 워크플로 구성에 포함된 구성요소만 시작되고 다른 설치 단계는 모두 건너뜁니다. 최종 사용자는 언어, 키보드, 네트워크 및 비밀번호 설정을 조정하여 워크스테이션을 개인 설정합니다. 이 프로세스가 완료되면 처음 부팅이 설치된 시스템은 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase>의 다른 인스턴스와 마찬가지로 작동합니다.
  </para>
 </sect1>
</chapter>
