<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="libvirt_managing.xml" version="5.0" xml:id="cha-libvirt-managing">
  <title>基本 VM Guest 管理</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>
    使用虚拟机管理器图形应用程序或者在命令行上使用 <command>virsh</command> 可以完成大部分管理任务，例如启动或停止 VM Guest。而要通过 VNC 连接到图形控制台，就只能从图形用户界面进行。
  </para>
  <note>
    <title>管理远程 VM 主机服务器上的 VM Guest</title>
    <para>
      如果 VM 主机服务器上启动了虚拟机管理器、<command>virsh</command> 和 <command>virt-viewer</command> 这些 <systemitem class="library">libvirt</systemitem> 工具，则可以使用它们来管理主机上的 VM Guest。不过，您也可以管理远程 VM 主机服务器上的 VM Guest。这需要在主机上为 <systemitem class="library">libvirt</systemitem> 配置远程访问权限。有关说明，请参见<xref linkend="cha-libvirt-connect"/>。
    </para>
    <para>
      要使用虚拟机管理器连接到此类远程主机，需要按照<xref linkend="sec-libvirt-connect-connecting-vmm"/>中所述设置连接。如果您通过 <command>virsh</command> 或 <command>virt-viewer</command> 连接到远程主机，需要使用参数 <option>-c</option> 指定连接 URI（例如，<command>virsh -c
      qemu+tls://saturn.example.com/system</command> 或 <command>virsh -c
      xen+ssh://</command>）。连接 URI 的格式取决于连接类型和超级管理程序 — 有关细节，请参见<xref linkend="sec-libvirt-connect-connecting"/>。
    </para>
    <para>
      本章列出的所有示例都不包含连接 URI。
    </para>
  </note>
  <sect1 xml:id="sec-libvirt-managing-list">
    <title>列出 VM Guest</title>

    <para>
      VM Guest 列表显示 VM 主机服务器上由 <systemitem class="library">libvirt</systemitem> 管理的所有 VM Guest。
    </para>

    <sect2 xml:id="sec-libvirt-managing-list-vmm">
      <title>使用虚拟机管理器列出 VM Guest</title>
      <para>
        虚拟机管理器的主窗口会列出它所连接的每台 VM 主机服务器的所有 VM Guest。每个 VM Guest 项都包含计算机的名称及其状态（<guimenu>正在运行</guimenu>、<guimenu>已暂停</guimenu>或<guimenu>已关闭</guimenu>），这些信息以图标、文本和 CPU 使用率条的形式显示。
      </para>
    </sect2>

    <sect2 xml:id="sec-libvirt-managing-list-virsh">
      <title>使用 <command>virsh</command> 列出 VM Guest</title>
      <para>
        使用 <command>virsh</command> <option>list</option> 命令可获取 VM Guest 的列表：
      </para>
      <variablelist>
        <varlistentry>
          <term>列出所有正在运行的 Guest</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh list</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>列出所有正在运行的 Guest 以及非活动的 Guest</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh list --all</screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        有关详细信息和其他选项，请参见 <command>virsh help
        list</command> 或 <command>man 1 virsh</command>。
      </para>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-libvirt-managing-console">
    <title>通过控制台访问 VM Guest</title>

    <para>
      可以通过 VNC 连接（图形控制台）或串行控制台（如果受 Guest 操作系统的支持）访问 VM Guest。
    </para>

    <sect2 xml:id="sec-libvirt-managing-console-vnc">
      <title>打开图形控制台</title>
      <para>
        打开与 VM Guest 连接的图形控制台可与该计算机交互，就如同通过 VNC 连接与物理主机交互一样。如果访问 VNC 服务器需要身份验证，系统会提示您输入用户名（如果适用）和口令。
      </para>
      <para>
        当您单击进入 VNC 控制台时，光标将被<quote>捕获</quote>，不能再在控制台外部使用。要释放光标，请按 <keycombo> <keycap function="alt"></keycap> <keycap function="control"></keycap> </keycombo>。
      </para>
      <tip>
        <title>无缝（绝对）光标移动</title>
        <para>
          为防止控制台夺取光标，同时为了启用无缝光标移动，请向 VM Guest 添加绘图板输入设备。有关更多信息，请参见<xref linkend="sec-libvirt-config-input"/>。
        </para>
      </tip>
      <para>
        某些组合键（例如 <keycombo> <keycap function="control"></keycap> <keycap function="alt"></keycap> <keycap function="delete"></keycap> </keycombo>）由主机解释，不会传递给 VM Guest。要将此类组合键传递给 VM Guest，请在 VNC 窗口中打开<guimenu>发送键</guimenu>菜单，然后选择所需的组合键项。仅当使用虚拟机管理器和 <command>virt-viewer</command> 时，才能使用<guimenu>发送键</guimenu>菜单。借助虚拟机管理器，可以按照<xref linkend="tip-libvirt-inst-vmm-sticky"/>中所述改用<quote>粘滞键</quote>功能。
      </para>
      <note>
        <title>支持的 VNC 查看器</title>
        <para>
          理论上而言，所有 VNC 查看器都可连接到 VM Guest 的控制台。但如果您是使用 SASL 身份验证和/或 TLS/SSL 连接来访问 Guest 的，那么您的选择就比较有限。<command>tightvnc</command> 或 <command>tigervnc</command> 等常见 VNC 查看器既不支持 SASL 身份验证，也不支持 TLS/SSL。唯一可替代虚拟机管理器和 <command>virt-viewer</command> 的工具是 Remmina（请参见<xref linkend="vnc-remmina"/>）。
        </para>
      </note>
      <sect3 xml:id="sec-libvirt-managing-console-vnc-vmm">
        <title>使用虚拟机管理器打开图形控制台</title>
        <procedure>
          <step>
            <para>
              在虚拟机管理器中，右键单击某个 VM Guest 项。
            </para>
          </step>
          <step>
            <para>
              从弹出菜单中选择<guimenu>打开</guimenu>。
            </para>
          </step>
        </procedure>
      </sect3>
      <sect3 xml:id="sec-libvirt-managing-vnc-viewer">
        <title>使用 <command>virt-viewer</command> 打开图形控制台</title>
        <para>
          <command>virt-viewer</command> 是一个简单的 VNC 查看器，其中添加了用于显示 VM Guest 控制台的功能。例如，可以 <quote>wait</quote> 模式启动该查看器，在此情况下，它会先等待 VM Guest 启动，然后再建立连接。它还支持自动重新连接到重引导的 VM Guest。
        </para>
        <para>
          <command>virt-viewer</command> 按名称、ID 或 UUID 对 VM Guest 进行寻址。使用 <command>virsh</command> <option>list --all</option> 可获取这些数据。
        </para>
        <para>
          要连接到正在运行或已暂停的 Guest，请使用 ID、UUID 或名称。已关闭的 VM Guest 没有 ID — 您只能按 UUID 或名称与其建立连接。
        </para>
        <variablelist>
          <varlistentry>
            <term>连接到 ID 为 <literal>8</literal> 的 Guest</term>
            <listitem>
<screen><prompt>&gt; </prompt>virt-viewer 8</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>连接到名为 <literal>sles12</literal> 的非活动 Guest；Guest 启动后，连接窗口就会打开</term>
            <listitem>
<screen><prompt>&gt; </prompt>virt-viewer --wait sles12</screen>
              <para>
                如果使用 <option>--wait</option> 选项，即使 VM Guest 此刻未运行，也会保持连接。当 Guest 启动时，查看器即会启动。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          有关更多信息，请参见 <command>virt-viewer</command> <option>--help</option> 或 <command>man 1 virt-viewer</command>。
        </para>
        <note>
          <title>通过 SSH 建立远程连接时输入的口令</title>
          <para>
            使用 <command>virt-viewer</command> 通过 SSH 来与远程主机建立连接时，需要输入 SSH 口令两次。第一次用于向 <systemitem class="library">libvirt</systemitem> 进行身份验证，第二次用于向 VNC 服务器进行身份验证。第二个口令需要在启动 virt-viewer 的命令行上提供。
          </para>
        </note>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-libvirt-managing-console-serial">
      <title>打开串行控制台</title>
      <para>
        要访问虚拟机的图形控制台，需要在访问 VM Guest 的客户端上提供一个图形环境。或者，也可通过串行控制台和 <command>virsh</command> 在外壳中访问使用 libvirt 管理的虚拟机。要打开与名为 <quote>sles12</quote> 的 VM Guest 连接的串行控制台，请运行以下命令：
      </para>
<screen><prompt>&gt; </prompt>virsh console sles12</screen>
      <para>
        <command>virsh console</command> 接受两个可选标志：<option>--safe</option> 确保以独占方式访问控制台，<option>--force</option> 在连接之前断开与所有现有会话的连接。这两个功能需受 Guest 操作系统的支持。
      </para>
      <para>
        Guest 操作系统必须支持串行控制台访问，并且该操作系统也受到适当的支持，才能通过串行控制台连接到 VM Guest。有关详细信息，请参见 Guest 操作系统手册。
      </para>
      <tip>
        <title>为 SUSE Linux Enterprise Guest 和 openSUSE Guest 启用串行控制台访问</title>
        <para>
          SUSE Linux Enterprise 和 openSUSE 中默认会禁用串行控制台访问。要启用它，请执行下列步骤：
        </para>
        <variablelist>
          <varlistentry>
            <term>SLES 12、15 和 openSUSE</term>
            <listitem>
              <para>
                启动 YaST 引导加载程序模块并切换到<guimenu>内核参数</guimenu>选项卡。将 <literal>console=ttyS0</literal> 添加到<guimenu>可选内核命令行参数</guimenu>字段。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>SLES 11</term>
            <listitem>
              <para>
                启动 YaST 引导加载程序模块，并选择要为其激活串行控制台访问的引导项。选择<guimenu>编辑</guimenu>，将 <literal>console=ttyS0</literal> 添加到<guimenu>可选内核命令行参数</guimenu>字段。此外，请编辑 <filename>/etc/inittab</filename> 并取消注释包含以下内容的行：
              </para>
<screen>#S0:12345:respawn:/sbin/agetty -L 9600 ttyS0 vt102</screen>
            </listitem>
          </varlistentry>
        </variablelist>
      </tip>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-libvirt-managing-status">
    <title>更改 VM Guest 的状态：启动、停止、暂停</title>

    <para>
      可以使用虚拟机管理器或 <command>virsh</command> 来启动、停止或暂停 VM Guest。您还可以将 VM Guest 配置为在引导 VM 主机服务器时自动启动。
    </para>

    <para>
      关闭 VM Guest 时，可将其正常关机或强制关机。后一种操作的效果等同于拔下物理主机上的电源插头，建议仅在没有其他办法时才这样做。强制关机可能导致 VM Guest 上的文件系统损坏或数据丢失。
    </para>

    <tip>
      <title>正常关机</title>
      <para>
        要能够执行正常关机，必须将 VM Guest 配置为支持 <xref linkend="gloss-vt-acpi"/>。如果 Guest 是使用虚拟机管理器创建的，则可在 VM Guest 中使用 ACPI。
      </para>
      <para>
        根据 Guest 操作系统，能够使用 ACPI 可能还不足以执行正常关机。在生产环境中使用 Guest 之前，强烈建议先对其进行关机和重引导测试。例如，openSUSE 或 SUSE Linux Enterprise Desktop 可能需要获得 Polkit 授权才能关机和重引导。确保已在所有 VM Guest 上关闭此策略。
      </para>
      <para>
        如果在安装 Windows XP/Windows Server 2003 Guest 期间启用了 ACPI，只在 VM Guest 配置中开启 ACPI 并不足够。有关更多信息，请参见：
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link xlink:href="https://support.microsoft.com/en-us/kb/314088"></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link xlink:href="https://support.microsoft.com/en-us/kb/309283"></link>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        无论 VM Guest 的配置如何，始终都可以从 Guest 操作系统内部实现正常关机。
      </para>
    </tip>

    <sect2 xml:id="sec-libvirt-managing-status-vmm">
      <title>使用虚拟机管理器更改 VM Guest 的状态</title>
      <para>
        可以通过虚拟机管理器的主窗口或 VNC 窗口更改 VM Guest 的状态。
      </para>
      <procedure>
        <title>通过虚拟机管理器窗口更改状态</title>
        <step>
          <para>
            右键单击某个 VM Guest 项。
          </para>
        </step>
        <step>
          <para>
            在弹出菜单中选择<guimenu>运行</guimenu>、<guimenu>暂停</guimenu>或其中一个<guimenu>关机选项</guimenu>。
          </para>
        </step>
      </procedure>
      <procedure>
        <title>通过 VNC 窗口更改状态</title>
        <step>
          <para>
            按照<xref linkend="sec-libvirt-managing-console-vnc-vmm"/>中所述打开 VNC 窗口。
          </para>
        </step>
        <step>
          <para>
            在工具栏或<guimenu>虚拟机</guimenu>菜单中，选择<guimenu>运行</guimenu>、<guimenu>暂停</guimenu>或其中一个<guimenu>关机</guimenu>选项。
          </para>
        </step>
      </procedure>
      <sect3 xml:id="sec-libvirt-managing-status-vmm-autostart">
        <title>自动启动 VM Guest</title>
        <para>
          您可以在引导 VM 主机服务器时自动启动 Guest。此功能默认未启用，需要为每个 VM Guest 单独启用。无法全局激活此功能。
        </para>
        <procedure>
          <step>
            <para>
              在虚拟机管理器中双击 VM Guest 项以打开其控制台。
            </para>
          </step>
          <step>
            <para>
              选择<menuchoice><guimenu>视图</guimenu><guimenu>细节</guimenu></menuchoice>打开 VM Guest 配置窗口。
            </para>
          </step>
          <step>
            <para>
              选择<guimenu>引导选项</guimenu>，然后选中<guimenu>在主机引导时启动虚拟机</guimenu>。
            </para>
          </step>
          <step>
            <para>
              单击<guimenu>应用</guimenu>保存新配置。
            </para>
          </step>
        </procedure>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-libvirt-managing-status-virsh">
      <title>使用 <command>virsh</command> 更改 VM Guest 的状态</title>
      <para>
        以下示例会更改名为 <quote>sles12</quote> 的 VM Guest 的状态。
      </para>
      <variablelist>
        <varlistentry>
          <term>开始</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh start sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>暂停</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh suspend sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>恢复（已暂停的 VM Guest）</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh resume sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>重引导</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh reboot sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>正常关机</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh shutdown sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>强制关机</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh destroy sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>开启自动启动</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh autostart sles12</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>关闭自动启动</term>
          <listitem>
<screen><prompt>&gt; </prompt>virsh autostart --disable sles12</screen>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-libvirt-manage-save">
    <title>保存和恢复 VM Guest 的状态</title>

    <para>
      保存 VM Guest 会保留其内存的确切状态。该操作类似于将计算机<emphasis>休眠</emphasis>。保存的 VM Guest 可以快速恢复到保存前的相同运行状况。
    </para>

    <para>
      保存时，VM Guest 会暂停，其当前内存状态将保存到文件，然后该 Guest 停止。该操作不会复制 VM Guest 虚拟磁盘的任何一部分。保存虚拟机所需的时间取决于分配的内存量。成功保存后，VM Guest 的资源将释放回虚拟机主机服务器。
    </para>

    <para>
      恢复操作将加载先前保存的 VM Guest 内存状态文件并启动该 Guest。该 Guest 不会引导，而是在以前保存它的位置继续运行。该操作类似于退出休眠状态。
    </para>

    <para>
      <systemitem class="library">libvirt</systemitem> 支持多种保存文件格式。默认格式称为 <option>raw</option>，由 VM Guest 内存页面的顺序流组成。<option>raw</option> 格式的顺序布局不太适合多读取器和写入器场景。
    </para>

    <para>
      除 <option>raw</option> 保存文件格式外，<systemitem class="library">libvirt</systemitem> 还支持多种压缩格式：<option>zstd</option>、<option>lzop</option>、<option>gzip</option>、<option>bzip2</option> 和 <option>xz</option>。与 <option>raw</option> 格式类似，压缩格式由 VM Guest 内存页的顺序流构成，但在写入保存文件或从中读取时，会通过指定的压缩算法进行压缩处理。这些格式可节省保存文件的存储空间，但会增加保存/恢复时间及主机 CPU 占用。
    </para>

    <para>
      <option>sparse</option> 保存文件格式采用预计算的固定偏移量来读写 VM Guest 内存页。生成的保存文件逻辑大小约等于 VM Guest 的内存容量，实际磁盘占用空间则取决于 VM Guest 的实时内存使用情况。<option>sparse</option> 格式为 VM Guest 内存页预置固定偏移量，可完美支持多读写器并发操作，这对于大内存容量的 VM Guest 而言，能显著提升其保存与恢复操作的执行效率。
    </para>

    <para>
      默认的保存文件格式可通过修改 <filename>/etc/libvirt/qemu.conf</filename> 中的 <option>save_image_format</option> 进行更改。此外，在使用 <command>virsh</command> 执行保存操作时也可指定格式。有关使用 <command>virsh</command> 进行保存和恢复的详细信息，请参见<xref linkend="sec-libvirt-manage-save-virsh"/>。
    </para>

    <para>
      由于 VM Guest 的运行状态将保存至文件，请确保存储设备具备足够的可用空间。如果采用 <option>sparse</option> 保存文件格式，保存文件的逻辑大小约等于 VM Guest 分配的内存容量。但实际磁盘占用空间通常更小，具体取决于 VM Guest 的内存使用情况。VM Guest 中未使用的内存空间不会写入保存文件，因此我们称它为 <literal>sparse</literal>。
    </para>

    <para>
      对于 <option>raw</option> 保存文件格式，其逻辑文件大小与磁盘实际占用空间相同，两者均取决于 VM Guest 的内存使用情况。无论采用 <option>raw</option> 还是 <option>sparse</option> 格式，均可通过在 VM Guest 上执行以下命令估算保存文件的磁盘占用空间（以 MB 为单位）：
    </para>

<screen><prompt>&gt; </prompt>free -mh | awk '/^Mem:/ {print $3}'</screen>

    <para>
      采用压缩格式可减小磁盘占用空间，具体取决于指定的压缩算法的效率。
    </para>

    <warning xml:id="adm-vm-restore">
      <title>始终恢复保存的 Guest</title>
      <para>
        成功执行保存操作后，如果通过恢复操作以外的方式启动 VM Guest，将导致已保存的状态文件失效。保存文件可能包含未完全写入磁盘的文件系统数据。如果在 VM Guest 通过其他方式执行后再尝试恢复保存的状态，可能会导致文件系统损坏。
      </para>
      <para>
        请务必使用相同的应用程序进行 VM Guest 的保存与恢复操作。例如，如果使用 <command>virsh</command> 保存 VM Guest，则不要使用虚拟机管理器执行恢复。在这种情况下，请务必使用 <command>virsh</command> 进行恢复。
      </para>
    </warning>

    <important>
      <title>恢复 VM Guest 后同步其时间</title>
      <para>
        如果您在保存 VM Guest 后，经过长时间（数小时）的暂停再恢复该 Guest，其时间同步服务（例如 <systemitem class="daemon">chronyd</systemitem>）可能会拒绝同步其时间。在这种情况下，请手动同步 VM Guest 的时间。例如，对于 KVM 主机，可以使用 QEMU Guest 代理，并使用 <command>guest-set-time</command> 来指示 Guest 设置时间。有关更多详细信息，请参见<xref linkend="cha-qemu-ga"/>。
      </para>
    </important>

    <sect2 xml:id="sec-libvirt-manage-save-vmm">
      <title>使用虚拟机管理器保存/恢复</title>
      <procedure>
        <title>保存 VM Guest</title>
        <step>
          <para>
            打开 VM Guest 的 VNC 连接窗口。确保该 Guest 正在运行。
          </para>
        </step>
        <step>
          <para>
            选择<menuchoice><guimenu>虚拟机</guimenu><guimenu>关机</guimenu><guimenu>保存</guimenu></menuchoice>。
          </para>
        </step>
      </procedure>
      <procedure>
        <title>恢复 VM Guest</title>
        <step>
          <para>
            打开 VM Guest 的 VNC 连接窗口。确保该 Guest 未运行。
          </para>
        </step>
        <step>
          <para>
            选择<menuchoice><guimenu>虚拟机</guimenu><guimenu>恢复</guimenu></menuchoice>。
          </para>
          <para>
            如果 VM Guest 之前是使用虚拟机管理器保存的，则系统不会为您提供用于<guimenu>运行</guimenu>该 Guest 的选项。但请注意<xref linkend="adm-vm-restore"/>中所述的有关使用 <command>virsh</command> 保存的计算机的注意事项。
          </para>
        </step>
      </procedure>
    </sect2>

    <sect2 xml:id="sec-libvirt-manage-save-virsh">
      <title>使用 <command>virsh</command> 保存和恢复</title>
      <para>
        与虚拟机管理器相比，<systemitem class="library">libvirt</systemitem> 为保存与恢复操作提供了更精细的控制能力。<command>virsh save</command> 和 <command>virsh
        restore</command> 支持多个选项，可用于调整操作行为。基本的方式是通过指定 VM Guest 的名称、ID 或 UUID 以及文件名来保存 VM Guest。例如：
      </para>
<screen><prompt>&gt; </prompt>virsh save openSUSE-Leap /virtual/saves/openSUSE-Leap.vmsav</screen>
      <para>
        执行基本的 VM Guest 恢复操作时，只需指定保存文件名即可。例如：
      </para>
<screen><prompt>&gt; </prompt>virsh restore /virtual/saves/openSUSE-Leap.vmsav</screen>
      <para>
        当 VM Guest 内存容量增大时，为达到理想的传输速率，保存与恢复操作可能需要使用额外选项，尤其是在保存镜像文件存储于高吞吐量存储设备时。在此类场景中，VM 主机服务器的文件系统缓存往往适得其反，应当使用 <option>bypass-cache</option> 选项来避免。例如：
      </para>
<screen><prompt>&gt; </prompt>virsh save --bypass-cache openSUSE-Leap /virtual/saves/openSUSE-Leap.vmsav</screen> <screen><prompt>&gt; </prompt>virsh restore --bypass-cache /virtual/saves/openSUSE-Leap.vmsav</screen>
      <para>
        通过多通道读写 VM Guest 内存页，可显著提升其在高吞吐量存储设备上的保存与恢复效率。如<xref linkend="sec-libvirt-manage-save"/>中所述，使用多通道必须采用 <option>sparse</option> 映像格式。选择通道数量时需谨慎，要确保操作不会对 VM 主机服务器上的其他工作负载产生负面影响。当 VM 主机服务器资源采用静态分区时，一般建议通道数设置为 VM Guest 专属物理 CPU 的核心数。由于保存操作启动时将停止 VM Guest 的 vCPU，因此这些 CPU 资源可安全地用于保存内存页。
      </para>
      <para>
        以下示例使用 4 个通道（同时绕过 VM 主机服务器文件系统缓存）执行保存与恢复操作：
      </para>
<screen><prompt>&gt; </prompt>virsh save --bypass-cache --image-format sparse --parallel-channels 4 openSUSE-Leap /virtual/saves/openSUSE-Leap.vmsav</screen> <screen><prompt>&gt; </prompt>virsh restore --bypass-cache --parallel-channels 4 /virtual/saves/openSUSE-Leap.vmsav</screen>
      <para>
        映像格式已编码存储于保存映像文件中，执行恢复操作时无需指定。
      </para>
      <para>
        有关保存/恢复操作及支持选项的更多信息，请参见 <command>virsh help save</command>、<command>virsh help restore</command> 或 <command>man 1 virsh</command>。
      </para>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-libvirt-managing-snapshots">
    <title>创建和管理快照</title>

    <para>
      VM Guest 快照是整个虚拟机的快照，包括 CPU、RAM、设备的状态，以及所有可写磁盘的内容。要使用虚拟机快照，所有挂接的硬盘均需使用 qcow2 磁盘映像格式，并且其中至少有一个硬盘需是可写的。
    </para>

    <para>
      快照可让您将计算机恢复到特定时间点的状态。在撤消有错误的配置或者安装大量软件包时，此功能十分有用。启动一个在 VM Guest 处于关闭状态下创建的快照后，需要引导该 Guest。在该时间点之后写入磁盘的所有更改都将在启动快照时丢失。
    </para>

    <note>
      <para>
        快照仅在 KVM VM 主机服务器上受支持。
      </para>
    </note>

    <sect2 xml:id="libvirt-snapshots-terminology">
      <title>术语</title>
      <para>
        有多个特定术语用于描述快照的类型：
      </para>
      <variablelist>
        <varlistentry>
          <term>内部快照</term>
          <listitem>
            <para>
              保存到原始 VM Guest 的 qcow2 文件中的快照。该文件包含保存的快照状态，以及自截取快照以来发生的更改。内部快照的主要优势是它们全都存储在一个文件中，因此方便在多个计算机之间复制或移动。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>外部快照</term>
          <listitem>
            <para>
              创建外部快照时，会保存原始 qcow2 文件并将其设为只读，同时会创建一个新的 qcow2 文件用于存放更改。原始文件有时称为<emphasis>后备</emphasis>文件或<emphasis>基础</emphasis>文件，包含所有更改的新文件称为<emphasis>覆盖</emphasis>文件或<emphasis>派生</emphasis>文件。备份 VM Guest 时，外部快照很有用。但外部快照不受虚拟机管理器的支持，且无法直接通过 <command>virsh</command> 删除。有关 QEMU 中外部快照的详细信息，请参见<xref linkend="cha-qemu-guest-inst-qemu-img-effect"/>。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>实时快照</term>
          <listitem>
            <para>
              当原始 VM Guest 正在运行时创建的快照。内部实时快照支持保存设备以及内存和磁盘状态，而使用 <command>virsh</command> 的外部实时快照则支持保存内存状态和/或磁盘状态。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>脱机快照</term>
          <listitem>
            <para>
              基于已关闭的 VM Guest 创建的快照。由于 Guest 的所有进程已停止且未使用任何内存，因此此类快照可确保数据完整性。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="sec-libvirt-managing-snapshots-vmm">
      <title>使用虚拟机管理器创建和管理快照</title>
      <important>
        <title>仅限内部快照</title>
        <para>
          虚拟机管理器仅支持实时或脱机的内部快照。
        </para>
      </important>
      <para>
        要在虚拟机管理器中打开快照管理视图，请按照<xref linkend="sec-libvirt-managing-console-vnc-vmm"/>中所述打开 VNC 窗口。现在请选择<menuchoice><guimenu>视图</guimenu><guimenu>快照</guimenu></menuchoice>，或单击工具栏中的<guimenu>管理虚拟机快照</guimenu>。
      </para>
      <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="virt_vmm_snapshots_list.png" width="75%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="virt_vmm_snapshots_list.png" width="75%"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>
        所选 VM Guest 的现有快照列表显示在窗口的左侧。上次启动的快照带有绿色对勾标记。窗口的右侧显示列表中当前标记的快照的细节。这些细节包括快照的标题和时戳、截取快照时 VM Guest 的状态以及说明。运行中 Guest 的快照还包括一个屏幕截图。可以直接在此视图中更改<guimenu>说明</guimenu>。其他快照数据不可更改。
      </para>
      <sect3 xml:id="sec-libvirt-managing-snapshots-vmm-add">
        <title>创建快照</title>
        <para>
          要截取 VM Guest 的新快照，请执行以下操作：
        </para>
        <procedure>
          <step>
            <para>
              （可选）关闭 VM Guest 以创建脱机快照。
            </para>
          </step>
          <step>
            <para>
              单击 VNC 窗口左下角的<guimenu>添加</guimenu>。
            </para>
            <para>
              <guimenu>创建快照</guimenu>窗口即会打开。
            </para>
          </step>
          <step>
            <para>
              提供<guimenu>名称</guimenu>和说明（可选）。截取快照后将无法更改该名称。为方便以后识别该快照，请使用<quote>自述性名称</quote>。
            </para>
          </step>
          <step>
            <para>
              单击<guimenu>完成</guimenu>确认。
            </para>
          </step>
        </procedure>
      </sect3>
      <sect3 xml:id="sec-libvirt-managing-snapshots-vmm-delete">
        <title>删除快照</title>
        <para>
          要删除 VM Guest 的快照，请执行以下操作：
        </para>
        <procedure>
          <step>
            <para>
              单击 VNC 窗口左下角的<guimenu>删除</guimenu>。
            </para>
          </step>
          <step>
            <para>
              单击<guimenu>是</guimenu>确认删除。
            </para>
          </step>
        </procedure>
      </sect3>
      <sect3 xml:id="sec-libvirt-managing-snapshots-vmm-start">
        <title>启动快照</title>
        <para>
          要启动快照，请执行以下操作：
        </para>
        <procedure>
          <step>
            <para>
              单击 VNC 窗口左下角的<guimenu>运行</guimenu>。
            </para>
          </step>
          <step>
            <para>
              单击<guimenu>是</guimenu>确认启动。
            </para>
          </step>
        </procedure>
      </sect3>
    </sect2>

    <sect2 xml:id="sec-libvirt-managing-snapshots-virsh">
      <title>使用 <command>virsh</command> 创建和管理快照</title>
      <para>
        要列出某个域（以下示例中为 <replaceable>admin_server</replaceable>）的所有现有快照，请运行 <literal>snapshot-list</literal> 命令：
      </para>
<screen><prompt>&gt; </prompt>virsh snapshot-list --domain sle-ha-node1
 Name                 Creation Time             State
------------------------------------------------------------
 sleha_12_sp2_b2_two_node_cluster 2016-06-06 15:04:31 +0200 shutoff
 sleha_12_sp2_b3_two_node_cluster 2016-07-04 14:01:41 +0200 shutoff
 sleha_12_sp2_b4_two_node_cluster 2016-07-14 10:44:51 +0200 shutoff
 sleha_12_sp2_rc3_two_node_cluster 2016-10-10 09:40:12 +0200 shutoff
 sleha_12_sp2_gmc_two_node_cluster 2016-10-24 17:00:14 +0200 shutoff
 sleha_12_sp3_gm_two_node_cluster 2017-08-02 12:19:37 +0200 shutoff
 sleha_12_sp3_rc1_two_node_cluster 2017-06-13 13:34:19 +0200 shutoff
 sleha_12_sp3_rc2_two_node_cluster 2017-06-30 11:51:24 +0200 shutoff
 sleha_15_b6_two_node_cluster 2018-02-07 15:08:09 +0100 shutoff
 sleha_15_rc1_one-node 2018-03-09 16:32:38 +0100 shutoff</screen>
      <para>
        使用 <literal>snapshot-current command:</literal> 命令显示上次启动的快照：
      </para>
<screen><prompt>&gt; </prompt>virsh snapshot-current --domain admin_server
Basic installation incl. SMT for CLOUD4
</screen>
      <para>
        运行 <literal>snapshot-info</literal> 命令可以获取有关特定快照的细节：
      </para>
<screen><prompt>&gt; </prompt>virsh snapshot-info --domain admin_server \
   -name  "Basic installation incl. SMT for CLOUD4"
Name:           Basic installation incl. SMT for CLOUD4
Domain:         admin_server
Current:        yes
State:          shutoff
Location:       internal
Parent:         Basic installation incl. SMT for CLOUD3-HA
Children:       0
Descendants:    0
Metadata:       yes
</screen>
      <sect3 xml:id="sec-libvirt-managing-snapshots-virsh-add">
        <title>创建内部快照</title>
        <para>
          要创建 VM Guest 的内部快照（实时或脱机快照），请如下所示使用 <literal>snapshot-create-as</literal> 命令：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-create-as --domain admin_server<co xml:id="virsh-snapshot-add-domain"/> --name "Snapshot 1"<co xml:id="virsh-snapshot-add-name"/> \
--description "First snapshot"<co xml:id="virsh-snapshot-add-description"/></screen>
        <calloutlist>
          <callout arearefs="virsh-snapshot-add-domain">
            <para>
              域名。必需。
            </para>
          </callout>
          <callout arearefs="virsh-snapshot-add-name">
            <para>
              快照的名称。建议使用<quote>自述性名称</quote>，这样可以更轻松地识别该快照。必需。
            </para>
          </callout>
          <callout arearefs="virsh-snapshot-add-description">
            <para>
              快照的说明。可选。
            </para>
          </callout>
        </calloutlist>
      </sect3>
      <sect3 xml:id="sec-libvirt-managing-snapshots-virsh-add-ext">
        <title>创建外部快照</title>
        <para>
          使用 <command>virsh</command> 可以创建 Guest 内存状态和/或磁盘状态的外部快照。
        </para>
        <para>
          要同时创建 Guest 磁盘的实时和脱机外部快照，请指定 <option>--disk-only</option> 选项：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-create-as --domain admin_server --name \
 "Offline external snapshot" --disk-only</screen>
        <para>
          可以指定 <option>--diskspec</option> 选项来控制外部文件的创建方式：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-create-as --domain admin_server --name \
 "Offline external snapshot" \
 --disk-only --diskspec vda,snapshot=external,file=/path/to/snapshot_file</screen>
        <para>
          要创建 Guest 内存的实时外部快照，请指定 <option>--live</option> 和 <option>--memspec</option> 选项：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-create-as --domain admin_server --name \
 "Offline external snapshot" --live \
 --memspec snapshot=external,file=/path/to/snapshot_file</screen>
        <para>
          要创建 Guest 磁盘和内存状态的实时外部快照，请结合使用 <option>--live</option>、<option>--diskspec</option> 和 <option>--memspec</option> 选项：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-create-as --domain admin_server --name \
 "Offline external snapshot" --live \
 --memspec snapshot=external,file=/path/to/snapshot_file
 --diskspec vda,snapshot=external,file=/path/to/snapshot_file</screen>
        <para>
          有关更多细节，请参见 <command>man 1 virsh</command> 中的 <citetitle>SNAPSHOT COMMANDS</citetitle> 部分。
        </para>
      </sect3>
      <sect3 xml:id="sec-libvirt-managing-snapshots-virsh-delete">
        <title>删除快照</title>
        <para>
          无法使用 <command>virsh</command> 删除外部快照。要删除 VM Guest 的内部快照并恢复其占用的磁盘空间，请使用 <literal>snapshot-delete</literal> 命令：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-delete --domain admin_server --snapshotname "Snapshot 2"</screen>
      </sect3>
      <sect3 xml:id="sec-libvirt-managing-snapshots-virsh-start">
        <title>启动快照</title>
        <para>
          要启动快照，请使用 <literal>snapshot-revert</literal> 命令：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-revert --domain admin_server --snapshotname "Snapshot 1"</screen>
        <para>
          要启动当前快照（用于启动 VM Guest 的快照），使用 <option>--current</option> 便已足够，不需要指定快照名称：
        </para>
<screen><prompt>&gt; </prompt>virsh snapshot-revert --domain admin_server --current</screen>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-libvirt-managing-delete">
    <title>删除 VM Guest</title>

    <para>
      默认情况下，使用 <command>virsh</command> 删除 VM Guest 只会去除其 XML 配置。由于默认不会删除挂接的存储设备，因此您可以在另一个 VM Guest 上重复使用该存储设备。使用虚拟机管理器还可以删除 Guest 的存储文件。
    </para>

    <sect2 xml:id="sec-libvirt-managing-delete-vmm">
      <title>使用虚拟机管理器删除 VM Guest</title>
      <procedure>
        <step>
          <para>
            在虚拟机管理器中，右键单击某个 VM Guest 项。
          </para>
        </step>
        <step>
          <para>
            从上下文菜单中选择<guimenu>删除</guimenu>。
          </para>
        </step>
        <step>
          <para>
            一个确认窗口即会打开。单击<guimenu>删除</guimenu>会永久擦除该 VM Guest。该删除操作不可恢复。
          </para>
          <para>
            您还可以通过激活<guimenu>删除关联的存储文件</guimenu>来永久删除 Guest 的虚拟磁盘。该删除操作也不可恢复。
          </para>
        </step>
      </procedure>
    </sect2>

    <sect2 xml:id="sec-libvirt-managing-delete-virsh">
      <title>使用 <command>virsh</command> 删除 VM Guest</title>
      <para>
        要删除 VM Guest，需先将其关闭。无法删除运行中的 Guest。有关关机的信息，请参见<xref linkend="sec-libvirt-managing-status"/>。
      </para>
      <para>
        要使用 <command>virsh</command> 删除 VM Guest，请运行 <command>virsh</command> <option>undefine</option> <replaceable>VM_NAME</replaceable>。
      </para>
<screen><prompt>&gt; </prompt>virsh undefine sles12</screen>
      <para>
        没有可自动删除挂接的存储文件的选项。如果这些文件由 libvirt 管理，请按照<xref linkend="sec-libvirt-storage-virsh-del-volumes"/>中所述将其删除。
      </para>
    </sect2>
  </sect1>
  <sect1 xml:id="cha-libvirt-admin-monitor">
    <title>监控</title>

    <para/>

    <sect2 xml:id="cha-libvirt-admin-monitor-virt-manager">
      <title>使用虚拟机管理器进行监控</title>
      <para>
        启动虚拟机管理器并连接到 VM 主机服务器后，所有运行中 Guest 的 CPU 使用率图表将会显示。
      </para>
      <para>
        您也可以通过此工具获取有关磁盘和网络使用情况的信息，不过必须先在<guimenu>首选项</guimenu>中激活此功能：
      </para>
      <procedure>
        <step>
          <para>
            运行 <command>virt-manager</command>。
          </para>
        </step>
        <step>
          <para>
            选择<menuchoice><guimenu>编辑</guimenu><guimenu>首选项</guimenu></menuchoice>。
          </para>
        </step>
        <step>
          <para>
            从<guimenu>常规</guimenu>选项卡切换到<guimenu>轮询</guimenu>。
          </para>
        </step>
        <step>
          <para>
            选中要查看的活动类型对应的复选框：<guimenu>轮询磁盘 I/O</guimenu>、<guimenu>轮询网络 I/O</guimenu> 和<guimenu>轮询内存统计</guimenu>。
          </para>
        </step>
        <step>
          <para>
            如果需要，还可以使用<guimenu>更新状态间隔：n 秒</guimenu>来更改更新间隔。
          </para>
        </step>
        <step>
          <para>
            关闭<guimenu>首选项</guimenu>对话框。
          </para>
        </step>
        <step>
          <para>
            在<menuchoice><guimenu>视图</guimenu><guimenu>图表</guimenu></menuchoice>下选中应显示的图表。
          </para>
        </step>
      </procedure>
      <para>
        此后，磁盘和网络统计数据也会显示在虚拟机管理器的主窗口中。
      </para>
      <para>
        可以从 VNC 窗口获取更精确的数据。按照<xref linkend="sec-libvirt-managing-console-vnc"/>中所述打开 VNC 窗口。在工具栏或<guimenu>视图</guimenu>菜单中选择<guimenu>细节</guimenu>。可以通过左侧树菜单中的<guimenu>性能</guimenu>项显示统计数据。
      </para>
    </sect2>

    <sect2 xml:id="cha-libvirt-admin-monitor-virt-top">
      <title>使用 <command>virt-top</command> 进行监控</title>
      <para>
        <command>virt-top</command> 是一个命令行工具，与众所周知的进程监控工具 <command>top</command> 类似。<command>virt-top</command> 使用 libvirt，因此能够显示不同超级管理程序上运行的 VM Guest 的统计数据。建议使用 <command>virt-top</command>，而不要使用 <command>xentop</command> 等特定于超级管理程序的工具。
      </para>
      <para>
        <command>virt-top</command> 默认会显示所有运行中 VM Guest 的统计数据。显示的数据包括已用内存百分比 (<literal>%MEM</literal>)、已用 CPU 百分比 (<literal>%CPU</literal>)，以及 Guest 的运行时长 (<literal>TIME</literal>)。数据会定期更新（默认为每三秒更新一次）。下面显示了某台 VM 主机服务器上的输出，该服务器包含七个 VM Guest，其中有四个处于非活动状态：
      </para>
<screen>virt-top 13:40:19 - x86_64 8/8CPU 1283MHz 16067MB 7.6% 0.5%
7 domains, 3 active, 3 running, 0 sleeping, 0 paused, 4 inactive D:0 O:0 X:0
CPU: 6.1%  Mem: 3072 MB (3072 MB by guests)

   ID S RDRQ WRRQ RXBY TXBY %CPU %MEM    TIME   NAME
    7 R  123    1  18K  196  5.8  6.0   0:24.35 sled12_sp1
    6 R    1    0  18K    0  0.2  6.0   0:42.51 sles12_sp1
    5 R    0    0  18K    0  0.1  6.0  85:45.67 opensuse_leap
    -                                           (Ubuntu_1410)
    -                                           (debian_780)
    -                                           (fedora_21)
    -                                           (sles11sp3)</screen>
      <para>
        输出默认按 ID 排序。使用以下组合键可以更改排序字段：
      </para>
      <simplelist><member><keycombo><keycap function="shift"></keycap><keycap>P</keycap></keycombo>：CPU 使用率
    </member><member><keycombo><keycap function="shift"></keycap><keycap>M</keycap></keycombo>：Guest 分配的内存总量
    </member><member><keycombo><keycap function="shift"></keycap><keycap>T</keycap></keycombo>：时间
    </member><member><keycombo><keycap function="shift"></keycap><keycap>I</keycap></keycombo>：ID
    </member>
      </simplelist>
      <para>
        要使用任何其他字段进行排序，请按 <keycombo> <keycap function="shift"></keycap> <keycap>F</keycap> </keycombo> 并从列表中选择一个字段。要切换排序顺序，请使用 <keycombo> <keycap function="shift"></keycap> <keycap>R</keycap> </keycombo>。
      </para>
      <para>
        <command>virt-top</command> 还支持基于 VM Guest 数据生成不同的视图，按以下键可以即时更改视图：
      </para>
      <simplelist><member><keycap>0</keycap>：默认视图</member><member><keycap>1</keycap>：显示物理 CPU</member><member><keycap>2</keycap>：显示网络接口</member><member><keycap>3</keycap>：显示虚拟磁盘</member>
      </simplelist>
      <para>
        <command>virt-top</command> 支持使用更多热键来更改数据视图，并支持许多可以影响程序行为的命令行开关。有关详细信息，请访问 <command>man 1
        virt-top</command>。
      </para>
    </sect2>

    <sect2 xml:id="cha-libvirt-admin-monitor-kvm-stat">
      <title>使用 <command>kvm_stat</command> 进行监控</title>
      <para>
        <command>kvm_stat</command> 可用于跟踪 KVM 性能事件。它会监控 <filename>/sys/kernel/debug/kvm</filename>，因此需要挂载 debugfs。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上默认应该已挂载 debugfs。如果未挂载，请使用以下命令：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> mount -t debugfs none /sys/kernel/debug</screen>
      <para>
        可在三种不同的模式下使用 <command>kvm_stat</command>：
      </para>
<screen>kvm_stat                    # update in 1 second intervals
kvm_stat -1                 # 1 second snapshot
kvm_stat -l &gt; kvmstats.log  # update in 1 second intervals in log format
                            # can be imported to a spreadsheet</screen>
      <example>
        <title><command>kvm_stat</command> 的典型输出</title>
<screen>kvm statistics

 efer_reload                  0       0
 exits                 11378946  218130
 fpu_reload               62144     152
 halt_exits              414866     100
 halt_wakeup             260358      50
 host_state_reload       539650     249
 hypercalls                   0       0
 insn_emulation         6227331  173067
 insn_emulation_fail          0       0
 invlpg                  227281      47
 io_exits                113148      18
 irq_exits               168474     127
 irq_injections          482804     123
 irq_window               51270      18
 largepages                   0       0
 mmio_exits                6925       0
 mmu_cache_miss           71820      19
 mmu_flooded              35420       9
 mmu_pde_zapped           64763      20
 mmu_pte_updated              0       0
 mmu_pte_write           213782      29
 mmu_recycled                 0       0
 mmu_shadow_zapped       128690      17
 mmu_unsync                  46      -1
 nmi_injections               0       0
 nmi_window                   0       0
 pf_fixed               1553821     857
 pf_guest               1018832     562
 remote_tlb_flush        174007      37
 request_irq                  0       0
 signal_exits                 0       0
 tlb_flush               394182     148</screen>
      </example>
      <para>
        有关如何解释这些值的更多信息，请参见 <link xlink:href="https://clalance.blogspot.com/2009/01/kvm-performance-tools.html"></link>。
      </para>
    </sect2>
  </sect1>
</chapter>
