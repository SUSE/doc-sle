msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-08-18 23:21+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. (itstool) path: chapter/title
#: xml/docker_overview.xml:9
msgid "Docker Overview"
msgstr ""

#. (itstool) path: chapter/para
#: xml/docker_overview.xml:10
msgid "Docker is a lightweight virtualization solution to run multiple virtual units (containers) simultaneously on a single control host. Containers are isolated with Kernel Control Groups (<xref linkend=\"vle.docker.cgroup\"/>) and <xref linkend=\"vle.docker.namespace\"/>."
msgstr ""

#. (itstool) path: chapter/para
#: xml/docker_overview.xml:16
msgid "Full virtualization solutions such as Xen, KVM, or <systemitem class=\"library\">libvirt</systemitem> are based on the processor simulating a complete hardware environment and controlling the virtual machines. However, Docker only provides operating system-level virtualization where the Linux kernel controls isolated containers."
msgstr ""

#. (itstool) path: chapter/para
#: xml/docker_overview.xml:23
msgid "Before going into detail about Docker, let's define some of the terms used:"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:28
msgid "Docker engine"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:32
msgid "The docker engine is a server-client type application that performs all tasks related to virtual machines. The Docker engine comprises the following:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:37
msgid "daemon - is the server side of the docker engine that manages all docker objects (images, containers, network used by containers, etc.)"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:42
msgid "REST API - applications can use this API to communicate directly with the daemon"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:47
msgid "a CLI client - that enables you to communicate with the daemon. If the daemon is running on a different machine than the CLI client, the CLI client can communicate by using network sockets or the REST API provided by the docker engine."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:55
msgid "Image"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:57
msgid "An <emphasis>image</emphasis> is a read-only template used to create a <emphasis>virtual machine</emphasis> on the host server. A Docker image is made by a series of layers built one over the other. Each layer corresponds to a permanent change, for example an update of an application. The changes are stored in a file called a <emphasis>dockerfile</emphasis>. For more details see <link xlink:href=\"http://docs.docker.com/engine/reference/glossary#image\">the official Docker documentation</link>."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:65
msgid "Dockerfile"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:69
msgid "A <emphasis>dockerfile</emphasis> stores changes made on top of the base image. The <xref linkend=\"Docker_engine\"/> reads instructions in the <emphasis>dockerfile</emphasis> and builds a new image according to the instructions."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:75
msgid "Container"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:79
msgid "A <emphasis>container</emphasis> is a running instance based on a particular Docker <xref linkend=\"Docker_Image\"/>. Each <emphasis>container</emphasis> can be distinguished by a unique container ID."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:85
msgid "Registry"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:89
msgid "A <emphasis>registry</emphasis> is storage for already created images. It typically contains several <emphasis>repositories</emphasis> There are two types of registry:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:94
msgid "public registry - where everyone (usually registered) can download and use images. A typical public registry is <link xlink:href=\"https://hub.docker.com/\">Docker Hub</link>."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:99
msgid "private registry - these are accessible for particular users or from a particular private network."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:107
msgid "Repository"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:111
msgid "A <emphasis>repository</emphasis> is storage in a <emphasis>registry</emphasis> that stores a different version of a particular image. You can pull or push images from or to a repository."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:117
msgid "Control groups"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:121
msgid "<emphasis>Control groups</emphasis>, also called <literal>cgroups</literal>, is a Linux kernel feature that allows aggregating or partitioning tasks (processes) and all their children into hierarchically organized groups to isolate resources."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:129
msgid "Namespace"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:133
msgid "Docker uses <emphasis>namespaces</emphasis> for its containers that isolates resources reserved for particular containers."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/docker_overview.xml:139
msgid "Orchestration"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:141
msgid "In a production environment you typically need a cluster with many containers on each cluster node. The containers must cooperate and you need a framework that enables you to manage the containers automatically. The act of automatic container management is called container orchestration and is typically handled by Kubernetes."
msgstr ""

#. (itstool) path: chapter/para
#: xml/docker_overview.xml:153
msgid "Docker is a platform that allows developers and system administrators to manage the complete life cycle of images. Docker makes it easy to build, ship and run images containing applications."
msgstr ""

#. (itstool) path: chapter/para
#: xml/docker_overview.xml:156
msgid "Docker provides you with the following advantages:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:161
msgid "Isolation of applications and operating systems through containers."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:166
msgid "Near native performance, as Docker manages allocation of resources in real time."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:170
msgid "Controls network interfaces and resources available inside containers through cgroups."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:176
msgid "Versioning of images."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:181
msgid "Allows building new images based on existing ones."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:186
msgid "Provides you with container orchestration."
msgstr ""

#. (itstool) path: chapter/para
#: xml/docker_overview.xml:191
msgid "On the other hand, Docker has the following limitations:"
msgstr ""

#. (itstool) path: itemizedlist/title
#: xml/docker_overview.xml:195
msgid "Limitations of Docker"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:197
msgid "Containers run inside the host system's kernel and cannot use a different kernel."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:203
msgid "Only allows Linux <emphasis>guest</emphasis> operating systems."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:208
msgid "Docker is not a full virtualization stack like Xen, KVM, or <systemitem class=\"library\">libvirt</systemitem>."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:214
msgid "Security depends on the host system. Refer to the <link xlink:href=\"http://docs.docker.com/articles/security/\">official security documentation</link> for more details."
msgstr ""

#. (itstool) path: sect1/title
#: xml/docker_overview.xml:223
msgid "Docker Architecture"
msgstr ""

#. (itstool) path: sect1/para
#: xml/docker_overview.xml:224
msgid "Docker uses a client/server architecture. You can use the <emphasis>CLI client</emphasis> to communicate with the <emphasis>daemon</emphasis>. The <emphasis>daemon</emphasis> then performs operations with containers and manages images locally or in registry. The <emphasis>CLI client</emphasis> can run on the same server as the host daemon or on a different machine. The <emphasis>CLI client</emphasis> communicates with the <emphasis>daemon</emphasis> by using network sockets. The architecture is depicted in <xref linkend=\"Docker_architecture\"/>."
msgstr ""

#. (itstool) path: figure/title
#: xml/docker_overview.xml:228
msgid "The docker architecture"
msgstr ""

#. (itstool) path: imageobject/imagedata
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: xml/docker_overview.xml:231
msgctxt "_"
msgid "external ref='docker_architecture.png' md5='__failed__'"
msgstr ""

#. (itstool) path: sect1/title
#: xml/docker_overview.xml:237
msgid "Docker Drivers"
msgstr ""

#. (itstool) path: sect2/title
#: xml/docker_overview.xml:239
msgid "Container Drivers"
msgstr ""

#. (itstool) path: sect2/para
#: xml/docker_overview.xml:240
msgid "Docker uses <link xlink:href=\"https://github.com/docker/libcontainer\">libcontainer</link> as the back-end driver to handle containers."
msgstr ""

#. (itstool) path: sect2/title
#: xml/docker_overview.xml:245
msgid "Storage Drivers"
msgstr ""

#. (itstool) path: sect2/para
#: xml/docker_overview.xml:246
msgid "Docker supports different storage drivers:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:251
msgid "<systemitem class=\"resource\">vfs</systemitem>: this driver is automatically used when the Docker host file system does not support copy-on-write. This is a simple driver which does not offer some advantages of Docker (like sharing layers, more on that in the next sections). It is highly reliable but also slow."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:260
msgid "<systemitem class=\"resource\">devicemapper</systemitem>: this driver relies on the device-mapper thin provisioning module. It supports copy-on-write, hence it offers all the advantages of Docker."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:267
msgid "<systemitem class=\"resource\">btrfs</systemitem>: this driver relies on Btrfs to provide all the features required by Docker. To use this driver the <filename>/var/lib/docker</filename> directory must be on a Btrfs file system."
msgstr ""

#. (itstool) path: listitem/para
#: xml/docker_overview.xml:275
msgid "<systemitem class=\"resource\">AUFS</systemitem>: this driver relies on the AUFS union file system. Neither the upstream kernel nor the SUSE one supports this file system. Hence the AUFS driver is not built into the SUSE Docker package."
msgstr ""

#. (itstool) path: sect2/para
#: xml/docker_overview.xml:282
msgid "SLE 12 uses the Btrfs file system by default, which leads Docker to use the <systemitem class=\"resource\">btrfs</systemitem> driver."
msgstr ""

#. (itstool) path: sect2/para
#: xml/docker_overview.xml:286
msgid "It is possible to specify which driver to use by changing the value of the <envar>DOCKER_OPTS</envar> variable defined inside of the <filename>/etc/sysconfig/docker</filename> file. This can be done either manually or using YaST by browsing to <menuchoice> <guimenu>System</guimenu> <guimenu>/etc/sysconfig Editor</guimenu> <guimenu>System</guimenu> <guimenu>Management</guimenu> <guimenu>DOCKER_OPTS</guimenu> </menuchoice> menu and entering the <systemitem class=\"library\">-s storage_driver</systemitem> string."
msgstr ""

#. (itstool) path: sect2/para
#: xml/docker_overview.xml:296
msgid "For example, to force the usage of the <systemitem class=\"resource\">devicemapper</systemitem> driver enter the following text:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/docker_overview.xml:301
#, no-wrap
msgid ""
"DOCKER_OPTS=\"-s devicemapper\""
msgstr ""

#. (itstool) path: important/title
#: xml/docker_overview.xml:303
msgid "Mounting <filename>/var/lib/docker</filename>"
msgstr ""

#. (itstool) path: important/para
#: xml/docker_overview.xml:304
msgid "It is recommended to have <filename>/var/lib/docker</filename> mounted on a separate partition or volume to not affect the Docker host operating system in case of a file system corruption."
msgstr ""

#. (itstool) path: important/para
#: xml/docker_overview.xml:315
msgid "In case you choose the Btrfs file system for <filename>/var/lib/docker</filename>, it is strongly recommended to create a subvolume for it. This ensures that the directory is excluded from file system snapshots. If not excluding <filename>/var/lib/docker</filename> from snapshots, the file system will likely run out of disk space soon after you start deploying containers. What's more, a rollback to a previous snapshot will also reset the Docker database and images. Disabling copy-on-write for this subvolume is also recommended, to avoid duplication of data blocks. Refer to <citetitle>Creating and Mounting New Subvolumes</citetitle> at <link xlink:href=\"https://www.suse.com/documentation/sles-12/book_sle_admin/data/sec_snapper_setup.html\"/> for details."
msgstr ""

