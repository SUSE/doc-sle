<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="containers-docker-installation.xml" xml:id="cha-docker-installation" xml:lang="zh-cn" version="5.0"> <title>设置 Docker 开源引擎</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <sect1 xml:id="sec-preparation">
  <title>准备主机</title>

  <para>
   请按如下所述准备主机。在安装任何与 Docker 相关的软件包之前，需要启用 <literal>Containers 模块</literal>：
  </para>

  <note>
   <title>内置 Docker 编制支持</title>
   <para>
    从 Docker Open Source Engine 1.12 开始，容器编制现在是 Docker 开源引擎不可或缺的组成部分。尽管此功能已在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中提供，但 SUSE 并不提供对它的支持，此功能仅作为技术预览提供。使用 Kubernetes 进行容器编制。有关细节，请参见 <link xlink:href="http://kubernetes.io/docs/getting-started-guides/kubeadm/">Kubernetes 文档</link>。
   </para>
  </note>

  <procedure>
   <title>使用图形用户界面 YaST 启用 Containers 模块</title>
   <step>
    <para>
     启动 YaST，然后选择<menuchoice><guimenu>软件</guimenu>
     <guimenu>软件储存库</guimenu></menuchoice>。
    </para>
   </step>
   <step>
    <para>
     单击<guimenu>添加</guimenu>打开附加产品对话框。
    </para>
   </step>
   <step>
    <para>
     选择<guimenu>注册服务器上的扩展和模块</guimenu>，然后单击<guimenu>下一步</guimenu>。
    </para>
   </step>
   <step>
    <para>
     在可用扩展和模块列表中，选择 <guimenu>Containers Module <phrase role="productnumber"><phrase os="sles;sled">15 SP3</phrase></phrase> x86_64</guimenu>，然后单击<guimenu>下一步</guimenu>。
    </para>
    <para>
     Containers 模块及其储存库随即添加到您的系统中。
    </para>
   </step>
   <step>
    <para>
     如果您使用储存库镜像工具，请更新 RMT 服务器上的储存库列表。
    </para>
   </step>
  </procedure>

  <procedure>
   <title>使用 SUSEConnect 从命令行启用 Containers 模块</title>
   <step>
    <para>
     您也可以使用以下命令添加 Containers 模块：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> SUSEConnect -p sle-module-containers/15.3/x86_64</screen>
   </step>
  </procedure>

  <procedure>
   <title>安装和设置 Docker 开源引擎</title>
   <step>
    <para>
     安装 <systemitem>docker</systemitem> 软件包：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> zypper install docker</screen>
   </step>
   <step>
    <para>
     要在系统引导时自动启动 Docker 服务，请运行以下命令：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl enable docker.service</screen>
    <para>
     这也会自动启用 <systemitem>docker.socket</systemitem>。
    </para>
   </step>
   <step>
    <para>
     要使用 Portus（有关 Portus 的详细信息，请参见<xref linkend="sec-docker-portus"/>）和受 SSL 保护的注册表：
    </para>
    <substeps>
     <step>
      <para>
       打开 <filename>/etc/sysconfig/docker</filename> 文件。搜索参数 <parameter>DOCKER_OPTS</parameter> 并添加 <literal>--insecure-registry <replaceable>ADDRESS_OF_YOUR_REGISTRY</replaceable></literal>。
      </para>
     </step>
     <step>
      <para>
       将 CA 证书添加到 <filename>/etc/docker/certs.d/<replaceable>REGISTRY_ADDRESS</replaceable></filename> 目录中
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> cp CA /etc/pki/trust/anchors/</screen>
     </step>
     <step>
      <para>
       将 CA 证书复制到系统中：
      </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> update-ca-certificates</screen>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     启动 Docker 服务：
    </para>
<screen><prompt>tux &gt; </prompt><command>sudo</command> systemctl start docker.service</screen>
    <para>
     这会自动启动 <systemitem>docker.socket</systemitem>。
    </para>
   </step>
  </procedure>

  <para>
   Docker 守护程序将会侦听仅可供 <systemitem class="username">root</systemitem> 用户以及 <systemitem class="groupname">docker</systemitem> 组成员访问的本地套接字。<systemitem class="groupname">docker</systemitem> 组是在安装软件包期间自动创建的。
  </para>

  <para>
   要允许特定用户连接到本地 Docker 守护程序，请使用以下命令：
  </para>

<screen><prompt>tux &gt; </prompt><command>sudo</command> /usr/sbin/usermod -aG docker <replaceable>USERNAME</replaceable></screen>

  <para>
   这会允许该用户与本地 Docker 守护程序通讯。
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-setup-net">
  <title>配置网络</title>

  <para>
   要使容器能够访问外部网络，请启用 <option>ipv4 ip_forward</option> 规则。
  </para>



  <sect2 xml:id="sec-docker-setup-net-docs">
   <title>Docker 开源引擎与 <command>iptables</command> 交互的方式</title>
   <para>
    要了解有关容器如何相互交互以及如何与系统防火墙交互的详细信息，请参见 <link xlink:href="https://docs.docker.com/v17.09/engine/userguide/networking/default_network/container-communication/">Docker 文档</link>。
   </para>
   <para>
    您也可以彻底阻止 Docker 开源引擎操作 <command>iptables</command>。请参见 <link xlink:href="https://docs.docker.com/network/iptables/#prevent-docker-from-manipulating-iptables">Docker 文档</link>。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-docker-storaged">
  <title>储存驱动程序</title>

  <para>
   Docker 开源引擎支持不同的储存驱动程序：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <systemitem class="resource">vfs</systemitem>：如果 Docker 主机文件系统不支持写入时复制，将自动使用此驱动程序。此驱动程序比其他所列驱动程序更简单，未利用 Docker 开源引擎的某些优势，例如共享层。此驱动程序很可靠，但速度较慢。
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">devicemapper</systemitem>：此驱动程序依赖于 device-mapper 精简供应模块。它支持写入时复制，因此可以利用 Docker 开源引擎的所有优势。
    </para>
   </listitem>
   <listitem>
    <para>
     <systemitem class="resource">btrfs</systemitem>：此驱动程序依赖于 Btrfs 来提供 Docker 开源引擎所需的所有功能。要使用此驱动程序，<filename>/var/lib/docker</filename> 目录必须位于 Btrfs 文件系统上。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   从 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 12 开始，默认会使用 Btrfs 文件系统，这会强制 Docker 开源引擎使用 <systemitem class="resource">btrfs</systemitem> 驱动程序。
  </para>

  <para>
   可以通过更改 <filename>/etc/sysconfig/docker</filename> 文件中定义的 <envar>DOCKER_OPTS</envar> 变量值来指定要使用的驱动程序。可以手动进行这种更改，也可以在 YaST 中浏览到<menuchoice>
   <guimenu>系统</guimenu> <guimenu>/etc/sysconfig 编辑器</guimenu>
   <guimenu>系统</guimenu> <guimenu>管理</guimenu>
   <guimenu>DOCKER_OPTS</guimenu> </menuchoice> 菜单，然后输入 <systemitem class="library">-s storage_driver</systemitem> 字符串进行更改。
  </para>

  <para>
   例如，要强制使用 <systemitem class="resource">devicemapper</systemitem> 驱动程序，请输入以下文本：
  </para>

<screen>DOCKER_OPTS="-s devicemapper"</screen>

  <important>
   <title>挂载 <filename>/var/lib/docker</filename></title>
   <para>
    建议在单独的分区或卷上挂载 <filename>/var/lib/docker</filename>。这样，当文件系统损坏时，运行 Docker 开源引擎的操作系统将不受影响。
   </para>
   <para>
    如果您为 <filename>/var/lib/docker</filename> 选择了 Btrfs 文件系统，强烈建议为其创建一个子卷。这可以确保从文件系统快照中排除该目录。如果不从快照中排除 <filename>/var/lib/docker</filename>，当您开始部署容器后，文件系统可能很快就会耗尽磁盘空间。此外，回滚到以前的快照也会重设置 Docker 数据库和映像。有关详细信息，请参见<xref linkend="sec-snapper-setup-customizing-new-subvolume"/>。
   </para>
  </important>
 </sect1>
 <sect1 xml:id="sec-docker-setup-updates">
  <title>更新</title>

  <para>
   对 <package>docker</package> 软件包进行的所有更新都会标记为“交互式”（即，不是自动更新），以避免意外的更新破坏正在运行的容器工作负载。一般而言，我们建议在对 Docker 开源引擎应用更新之前停止所有正在运行的容器。
  </para>

  <para>
   为避免数据丢失，我们不建议让工作负载依赖于容器在 Docker 开源引擎更新后保持可启动状态。尽管从技术上讲可以通过 <option>--live-restore</option> 选项使容器能够在更新期间保持运行，但经验表明，这种更新可能会导致性能下降。SUSE 不支持此功能。
  </para>
 </sect1>
</chapter>
