<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" role="General" xml:id="cha-deployment-prep-pxe"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Preparing network boot environment</title>
 <info>
  <abstract>
   <para>
    This chapter describes how to configure a DHCP and a TFTP server
    that provide the required infrastructure for booting with PXE.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  &productnamereg; can be installed via a Preboot Execution Environment
  (PXE). The client hardware needs to support booting via PXE. The
  network needs to provide a DHCP server and a TFTP server providing the
  required data to the clients. This chapter guides you through setting
  up the required servers.
 </para>
 <para>
  PXE only boots a kernel and initrd. This can be used to boot into an
  installation environment or into live systems. To set up the
  installation sources, see <xref linkend="cha-deployment-instserver"
  />.
 </para>
 <para>
  This section covers the configuration tasks needed in complex boot
  scenarios. It contains ready-to-apply configuration examples for
  DHCP, PXE boot, TFTP, and Wake on LAN.
 </para>
 <para>
  The examples assume that the DHCP, TFTP and NFS server reside on the
  same machine with the IP <literal>192.168.1.1</literal>. All services
  can reside on different machines without any problems. Make sure to
  change the IP addresses as required.
 </para>

 <sect1 xml:id="sec-deployment-dhcp-server">
  <title>Setting up a DHCP server</title>
  <para>
   A DHCP server provides both dynamic
   (<xref linkend="sec-deployment-dhcp-dynamic"/>) and static IP address
   assignments (<xref linkend="sec-deployment-dhcp-static"/>) to your network
   clients. It advertises servers, routes, and domains. For TFTP servers, DHCP
   also provides the kernel and initrd files. Which files are loaded depends
   on the architecture of the target machine, and whether legacy BIOS or UEFI
   boot is used. The clients transmit their architecture type in their DHCP
   requests. Based on this information, the DHCP server decides which files the
   client must download for booting.
  </para>
  <warning>
   <title>PXE and &ay; installation failure</title>
   <para>
    Starting with &sle; 15.0, there are special conditions that cause PXE boot
    and &ay; installations to fail. See
    <xref linkend="sec-deployment-dhcp-rfc4361"/> for more information and
    the solution.
   </para>
  </warning>

  <sect2  xml:id="sec-deployment-dhcp-dynamic">
   <title>Dynamic address assignment</title>
   <para>
    The following example shows how to set up a DHCP server that dynamically
    assigns IP addresses to clients, and advertises servers, routers, domains,
    and boot files.
   </para>
   <procedure xml:id="pro-deployment-dhcp-server">
    <step>
     <para>
      Log in as &rootuser; to the machine hosting the DHCP server.
     </para>
    </step>
    <step>
     <para>
      Enable the DHCP server by executing <command>systemctl enable
      dhcpd</command>.
     </para>
    </step>
    <step>
     <para>
      Append the following lines to a subnet configuration of your DHCP
      server's configuration file located under
      <filename>/etc/dhcpd.conf</filename>:
     </para>
<screen># The following lines are optional
option domain-name "my.lab";
option domain-name-servers 192.168.1.1;
option routers 192.168.1.1;
option ntp-servers 192.168.1.1;
ddns-update-style none;
default-lease-time 3600;

# The following lines are required
option arch code 93 = unsigned integer 16; # RFC4578
subnet 192.168.1.0 netmask 255.255.255.0 {
 next-server 192.168.1.1;
 range 192.168.1.100 192.168.1.199;
 default-lease-time 3600;
 max-lease-time 3600;
 if option arch = 00:07 or option arch = 00:09 {
   filename "/EFI/x86/grub.efi";
 }
 else if option arch = 00:0b {
   filename "/EFI/aarch64/bootaa64.efi";
 }
 else  {
   filename "/BIOS/x86/pxelinux.0";
 }
}</screen>
     <para>
      This configuration example uses the subnet
      <literal>192.168.1.0/24</literal> with the DHCP, DNS and gateway on the
      server with the IP <literal>192.168.1.1</literal>. Make sure that all
      IP addresses are changed according to your network layout. For more
      information about the options available in
      <filename>dhcpd.conf</filename>, refer to the
      <systemitem>dhcpd.conf</systemitem> manual page.
     </para>
    </step>
    <step>
     <para>
      Restart the DHCP server by executing <command>systemctl restart
      dhcpd</command>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2  xml:id="sec-deployment-dhcp-static">
   <title>Assigning static IP addresses</title>
   <para>
    A DHCP server may also assign static IP addresses and host names to
    network clients. One use case is assigning static addresses to servers.
    Another use case is restricting which clients may join the network to
    those with assigned static IP addresses, and providing no dynamic address
    pools.
  </para>
  <para>
    Modify the above DHCP configuration according to the  following example:
   </para>
<screen>group {
 host test {
   hardware ethernet <replaceable>MAC_ADDRESS</replaceable>;
   fixed-address <replaceable>IP_ADDRESS</replaceable>;
   }
}
</screen>
   <para>
    The host statement assigns a host name to the installation target. To
    bind the host name and IP address to a specific host, you must
    specify the client's hardware (MAC) address. Replace all the variables used
    in this example with the actual values that match your environment, then
    save your changes and restart the DHCP server.
   </para>
  </sect2>

  <sect2 xml:id="sec-deployment-dhcp-rfc4361">
   <title>PXE and &ay; installation failures</title>
   <para>
    Starting with &sle; 15.0 and ISC DHCP 4.3.x, there are special circumstances
    that cause PXE boot and &ay; installations to fail. If your DHCP server does not
    have a pool of available dynamic IP addresses, but allows only pre-defined static
    addresses per client, and the clients send RFC 4361 client identifiers, then
    PXE/&ay; installations will not work. (Allowing only addresses assigned to
    specific network clients, and providing no dynamic address pools, prevents
    random machines from joining the network.)
   </para>
   <para>
    When a new system starts in PXE, it sends a request to the DHCP server and
    identifies itself using a client identifier constructed from the hardware type plus
    the MAC address of the network interface. This is an RFC 2132 <literal>client-id</literal>. The DHCP
    server then offers the assigned IP address. Next, the installation kernel is loaded,
    and sends another DHCP request, but this <literal>client-id</literal> is different, and is sent in
    RFC 4361 format. The DHCP server will not recognize this as the same client, and
    will look for a free dynamic IP address, which is not available, and the installation stops.
   </para>
   <para>
    The solution is to configure clients to send RFC 2132 client IDs.
    To send an RFC 2132 <literal>client-id</literal> during the installation, use
    <literal>linuxrc</literal> to pass
    the following <literal>ifcfg</literal> command:
   </para>
<screen>ifcfg=eth0=dhcp,DHCLIENT_CLIENT_ID=<replaceable>01:03:52:54:00:02:c2:67</replaceable>,
DHCLIENT6_CLIENT_ID=<replaceable>00:03:52:54:00:02:c2:67</replaceable></screen>
   <para>
    The traditionally-used RFC 2132 DHCPv4 <literal>client-id</literal> on
    Ethernet is constructed from the hardware type (<literal>01</literal> for
    Ethernet) and followed by the hardware address (the MAC address), for
    example:
   </para>
<screen>01:52:54:00:02:c2:67</screen>
   <para>
    The RFC 4361 DHCPv4 <literal>client-id</literal> attempts to correct the problem
    of identifying a machine that has more than one network interface. The new
    DHCPv4 <literal>client-id</literal> has the same format as the DHCPv6
    <literal>client-id</literal>. It starts with the
    <literal>0xff</literal> prefix, instead of the hardware type, followed by the
    DHCPv6 IAID (the interface-address association ID that describes the
    interface on the machine), followed by the DHCPv6 Unique Identifier (DUID),
    which uniquely identifies the machine.
   </para>
   <para>
    Using the above hardware type-based and hardware address-based DUID, the new
    RFC 4361 DHCPv4 <literal>client-id</literal> would be:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Using the last bytes of the MAC address as the IAID:
      <literal>ff:00:02:c2:67:00:01:xx:xx:xx:xx:52:54:00:02:c2:67</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      When the IAID is a simple incremented number:
      <literal>ff:00:00:00:01:00:01:xx:xx:xx:xx:52:54:00:02:c2:67</literal>
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The <replaceable>xx:xx:xx:xx</replaceable> field in the DUID-Link-Layer 
    Timestamp (DUID-LLT) is a creation time stamp. A DUID-Link-Layer (DUID-LL)
    (<literal>00:03:00:01:$MAC</literal>) does not have a time stamp.
   </para>
   <para>
    For more information on using <literal>linuxrc</literal>, see the &ayguide;.
    Also see <literal>man 4 initrd</literal>, and the
    documentation for the options <literal>dhcp4
    "create-cid"</literal>, <literal>dhcp6 "default-duid"</literal> in
    <literal>man 5 wicked-config</literal>, <literal>wicked duid
    --help</literal>, and <literal>wicked iaid --help</literal>.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-deployment-tftp-server">
  <title>Setting up a TFTP server</title>
  <para>
   The following procedure describes how to prepare the server so that the
   client machines with UEFI and BIOS can boot remotely using files exported by
   TFTP.
  </para>
  <sect2 xml:id="sec-deployment-tftp-server-install">
   <title>Installing a TFTP server</title>
   <para>
    To install a TFTP server, use the following procedure:
   </para>

   <procedure>
    <step>
     <para>
      Install the <systemitem>tftp</systemitem> package.
     </para>
     <screen>&prompt.sudo;<command>zypper in tftp</command></screen>
    </step>
    <step>
     <para>
      Review the <systemitem class="daemon">tftpd</systemitem> configuration in
      <filename>/etc/sysconfig/tftp</filename> and add or change options as
      required. Refer to <command>man 8 tftpd</command> for more details.
      The TFTP daemon works without changing the configuration. The default root
      directory for the files is <filename>/srv/tftpboot</filename>.
     </para>
    </step>
    <step>
     <para>
      Ensure that <systemitem class="daemon">tftpd</systemitem> is started at
      boot time, and restart it to read the new configuration.
     </para>
     <screen>&prompt.sudo;<command>systemctl enable tftp.socket</command>
&prompt.sudo;<command>systemctl restart tftp.socket</command></screen>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec-deployment-tftp-server-grub-package">
   <title>Installing files for boot</title>
   <para>
    &productname; provides the required files for booting via PXE on BIOS or
    UEFI machines. The following hardware architectures are supported:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      &x86-64;
     </para>
    </listitem>
    <listitem>
     <para>
      &aarch64;
     </para>
    </listitem>
    <listitem>
     <para>
      &power;
     </para>
    </listitem>
    <listitem>
     <para>
      &zseries;
     </para>
    </listitem>
   </itemizedlist>

   <para>
    Files required to boot from a specific hardware architecture are included
    in an RPM package. Install it on the machine running the TFTP server:
   </para>
   <screen>&prompt.sudo;<command>zypper in tftpboot-installation-SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable></command></screen>
   <para>
    Replace <replaceable>OS_VERSION</replaceable> with the version number of
    your &productname; installation, for example
    <replaceable>SLE-15-SP2-x86_64</replaceable>, and replace
    <replaceable>ARCHITECTURE</replaceable> with the architecture of your
    system, for example <literal>x86_64</literal>.  So the resulting text would
    look like this: <package>tftpboot-installation-SLE-15-SP2-x86_64</package>.
    Run <command>zypper se tftpboot</command> to search for all available
    versions and architectures.
   </para>
   <para>
    The files will be installed in
    <filename>/srv/tftpboot/SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable></filename>.
    You can also copy the files for other versions and architectures of
    &productname; to the <filename>/srv/tftpboot</filename> directory.
   </para>
   <tip>
    <title>Serving different architectures</title>
    <para>
     The client and server hardware architecture can vary. For example, you can
     run an &x86-64; TFTP server and provide a bootable environment for &aarch64;
     client machines by installing the
     <package>tftpboot-installation-SLE-15-SP2-aarch64</package> package.
    </para>
   </tip>
   <note>
    <title>Existing <filename>/srv/tftpboot/</filename> directory</title>
    <para>
     If the directory <filename>/srv/tftpboot/</filename> already
     exists on your machine, then all files will be installed to
     <filename>/usr/share/tftpboot-installation/</filename>. This is
     the case if you are upgrading your PXE server from a previous
     &slsa; release.
    </para>
    <para>
     To fix this problem, copy the files manually from
     <filename>/usr/share/tftpboot-installation/</filename> to
     <filename>/srv/tftpboot/</filename>. Alternatively, remove
     <filename>/srv/tftpboot/</filename> and reinstall the
     <package>tftpboot-installation-SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable></package>
     package.
    </para>
   </note>
  </sect2>
  <sect2 xml:id="sec-deployment-tftp-server-pxelinux">
   <title>Configuring PXELINUX</title>
   <para>
    Open the file
    <filename>/srv/tftpboot/SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable>/net/pxelinux.cfg/default</filename>
    in an editor. Replace the path for the <literal>install</literal>
    parameter according to your setup as described in <xref
    linkend="cha-deployment-instserver"/>. Also replace
    <replaceable>TFTP_SERVER</replaceable> with the IP address of the
    TFTP server. For an overview of the PXELINUX configuration options,
    see <xref linkend="sec-deployment-prep-boot-pxeopts"/>.
   </para>
<screen>default linux

# install
label linux
  ipappend 2
  kernel boot/<replaceable>ARCHITECTURE</replaceable>/loader/linux
  append initrd=boot/<replaceable>ARCHITECTURE</replaceable>/loader/initrd instsys=tftp://<replaceable>TFTP_SERVER</replaceable>/SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable>/boot/<replaceable>ARCHITECTURE</replaceable>/root install=<replaceable>PROTOCOL</replaceable>://<replaceable>SERVER_IP</replaceable>:/<replaceable>PATH</replaceable>

display  message
implicit 1
prompt  1
timeout  50</screen>
   <para>
    For details about the boot parameters that are used in the <literal>append</literal> line,
    see <xref linkend="sec-boot-parameters-list"/>.
   </para>
   <para>
    If required, edit the
    <filename>/srv/tftpboot/SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable>/net/pxelinux.cfg/message</filename>
    to display a message in the boot menu.
   </para>
  </sect2>
  <sect2 xml:id="sec-deployment-tftp-server-efilinux-x86">
   <title>Preparing PXE boot for EFI with GRUB2</title>
   <para>
     Normally, the GRUB2 configuration files require no
     modifications. However, the default settings do not include
     network resource for the installation system, This means that in
     order to perform a full &productname; installation via the
     network, you have to specify the <option>install</option>
     parameter in the <option>linuxefi</option> instruction of the
     <filename>/srv/tftpboot/SLE-<replaceable>OS_VERSION</replaceable>-<replaceable>ARCHITECTURE</replaceable>/EFI/BOOT/grub.cfg</filename>
     file.  Refer to <xref
     linkend="sec-boot-parameters-list-install-source"/> for further
     information about the <option>install</option> parameter.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-deployment-prep-boot-pxeopts">
  <title>PXELINUX configuration options</title>

  <para>
   The options listed here are a subset of all the options available for the
   PXELINUX configuration file.
  </para>

  <variablelist>
   <varlistentry>
    <term><option>APPEND <replaceable>OPTIONS</replaceable></option>
    </term>
    <listitem>
     <para>
      Adds one or more options to the kernel command line. These are added for
      both automatic and manual boots. The options are added at the very
      beginning of the kernel command line, usually permitting explicitly
      entered kernel options to override them.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>APPEND -</option>
    </term>
    <listitem>
     <para>
      Appends nothing. <option>APPEND</option> with a single hyphen as argument
      in a <option>LABEL</option> section can be used to override a global
      <option>APPEND</option>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>DEFAULT <replaceable>KERNEL_OPTIONS</replaceable>...</option>
    </term>
    <listitem>
     <para>
      Sets the default kernel command line. If PXELINUX boots automatically, it
      acts as if the entries after DEFAULT had been typed in at the boot
      prompt, except the auto option is automatically added, indicating an
      automatic boot.
     </para>
     <para>
      If no configuration file exists or no DEFAULT entry is defined in the
      configuration file, the default is the kernel name <quote>linux</quote>
      with no options.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- FATE#313283 -->
    <term><option>IFAPPEND <replaceable>FLAG</replaceable></option>
    </term>
    <listitem>
     <para>
      Adds a specific option to the kernel command line depending on the
      <replaceable>FLAG</replaceable> value. The <option>IFAPPEND</option>
      option is available only on PXELINUX. <replaceable>FLAG</replaceable>
      expects a value, described in
      <xref linkend="tab-deployment-boot-pxeopts-ifappend"/>:
     </para>
     <table xml:id="tab-deployment-boot-pxeopts-ifappend">
      <title>Generated and added kernel command line options from <option>IFAPPEND</option></title>
      <tgroup cols="2">
       <colspec colwidth="1*"/>
       <colspec colwidth="4*"/>
       <thead>
        <row>
         <entry valign="middle">
          <para>
           Argument
          </para>
         </entry>
         <entry>
          <para>
           Generated Kernel Command Line / Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <option>1</option>
          </para>
         </entry>
         <entry>
<screen>ip=<replaceable>CLIENT_IP</replaceable>:<replaceable>BOOT_SERVER_IP</replaceable>:<replaceable>GW_IP</replaceable>:<replaceable>NETMASK</replaceable></screen>
          <para>
           The placeholders are replaced based on the input from the DHCP/BOOTP
           or PXE boot server.
          </para>
          <para>
           Note, this option is not a substitute for running a DHCP client in
           the booted system. Without regular renewals, the lease acquired by
           the PXE BIOS will expire, making the IP address available for reuse
           by the DHCP server.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <option>2</option>
          </para>
         </entry>
         <entry>
<screen>BOOTIF=<replaceable>MAC_ADDRESS_OF_BOOT_INTERFACE</replaceable></screen>
          <para>
           This option is useful to avoid timeouts when the
           installation server probes one LAN interface after another until
           it gets a reply from a DHCP server. This option allows an
           initrd program to determine from which interface the system has been
           booted. linuxrc reads this option and uses this network interface.
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <option>4</option>
          </para>
         </entry>
         <entry>
<screen>SYSUUID=<replaceable>SYSTEM_UUID</replaceable></screen>
          <para>
           Adds UUIDs in lowercase hexadecimals, see
           <filename>/usr/share/doc/packages/syslinux/pxelinux.txt</filename>
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>LABEL <replaceable>LABEL</replaceable> KERNEL <replaceable>IMAGE</replaceable>
       APPEND <replaceable>OPTIONS</replaceable>...</option>
    </term>
    <listitem>
     <para>
      Indicates that if <replaceable>LABEL</replaceable> is entered as the
      kernel to boot, PXELINUX should instead boot
      <replaceable>IMAGE</replaceable> and the specified
      <option>APPEND</option> options should be used. They replace the ones
      specified in the global section of the file, before the first
      <option>LABEL</option> command. The default for
      <replaceable>IMAGE</replaceable> is the same as
      <replaceable>LABEL</replaceable> and, if no <option>APPEND</option> is
      given, the default is to use the global entry (if any). Up to 128
      <option>LABEL</option> entries are permitted.
     </para>
<!-- fs 2014-02-07: The following seems unrelated in this context. Whatsmore,
     Legacy GRUB is no longer shipped with SLE

      <para>
       Note that &grub; uses the following syntax:
      </para>
<screen>title mytitle
  kernel <replaceable>MY_KERNEL</replaceable><replaceable>MY_KERNEL_OPTIONS</replaceable>
  initrd <replaceable>MYINITRD</replaceable></screen>
-->
     <para>
      PXELINUX uses the following syntax:
     </para>
<screen>label <replaceable>MYLABEL</replaceable>
  kernel <replaceable>MYKERNEL</replaceable>
  append <replaceable>MYOPTIONS</replaceable></screen>
     <para>
      Labels are mangled as if they were file names and they must be unique
      after mangling. For example, the two labels <quote>v2.6.30</quote> and
      <quote>v2.6.31</quote> would not be distinguishable under PXELINUX
      because both mangle to the same DOS file name.
     </para>
     <para>
      The kernel does not need to be a Linux kernel. It can also be a boot
      sector or a COMBOOT file.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>LOCALBOOT <replaceable>TYPE</replaceable></option>
    </term>
    <listitem>
     <para>
      On PXELINUX, specifying <option>LOCALBOOT 0</option> instead of a
      <option>KERNEL</option> option means invoking this particular label and
      causes a local disk boot instead of a kernel boot.
     </para>
     <informaltable frame="topbot" rowsep="0">
      <tgroup cols="2">
<!--<colspec colnum="1" colname="1" colwidth="20"/>
        <colspec colnum="2" colname="2" colwidth="60"/>-->
       <thead>
        <row>
         <entry>
          <para>
           Argument
          </para>
         </entry>
         <entry>
          <para>
           Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>
          <para>
           <literal>0</literal>
          </para>
         </entry>
         <entry>
          <para>
           Perform a normal boot
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>4</literal>
          </para>
         </entry>
         <entry>
          <para>
           Perform a local boot with the Universal Network Driver Interface
           (UNDI) driver still resident in memory
          </para>
         </entry>
        </row>
        <row>
         <entry>
          <para>
           <literal>5</literal>
          </para>
         </entry>
         <entry>
          <para>
           Perform a local boot with the entire PXE stack, including the UNDI
           driver, still resident in memory
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
     <para>
      All other values are undefined. If you do not know what the UNDI or PXE
      stacks are, specify <literal>0</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>TIMEOUT <replaceable>TIME-OUT</replaceable></option>
    </term>
    <listitem>
     <para>
      Indicates how long to wait at the boot prompt until booting
      automatically, in units of 1/10 second. The time-out is canceled when the
      user types anything on the keyboard, assuming the user will complete the
      command begun. A time-out of zero disables the time-out completely (this
      is also the default). The maximum possible time-out value is 35996 (just
      less than one hour).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><option>PROMPT<replaceable> flag_val</replaceable></option>
    </term>
    <listitem>
     <para>
      If <option>flag_val</option> is 0, displays the boot prompt only if
      <keycap function="shift"/> or <keycap function="alt"/> is pressed or
      <keycap>Caps Lock</keycap> or <keycap>Scroll Lock</keycap> is set (this
      is the default). If <option>flag_val</option> is 1, always displays the
      boot prompt.
     </para>
<screen>F2  <replaceable>FILENAME</replaceable>
F1  <replaceable>FILENAME</replaceable>
..etc...
F9  <replaceable>FILENAME</replaceable>
F10 <replaceable>FILENAME</replaceable></screen>
     <para>
      Displays the indicated file on the screen when a function key is pressed
      at the boot prompt. This can be used to implement preboot online help
      (presumably for the kernel command line options). For backward
      compatibility with earlier releases, <keycap>F10</keycap> can be also
      entered as <literal>F0</literal>. Note that there is currently no way to
      bind file names to <keycap>F11</keycap> and <keycap>F12</keycap>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-deployment-prep-boot-pxeprep">
  <title>Preparing the target system for PXE boot</title>

  <para>
   Prepare the system's BIOS for PXE boot by including the PXE option in the
   BIOS boot order.
  </para>

  <warning>
   <title>BIOS boot order</title>
   <para>
    Do not place the PXE option ahead of the hard disk boot parameter in the BIOS.
    Otherwise this system would try to re-install itself every time you boot
    it.
   </para>
  </warning>
 </sect1>
 
 <sect1 xml:id="sec-deployment-prep-boot-wol">
  <title>Using wake-on-LAN for remote wakeups</title>
   <para>
       Wake-on-LAN (WOL) is an Ethernet standard for remotely waking up a computer 
       by sending it a wakeup signal over a network. This signal is called the 
       "magic packet". Install WOL on client machines to enable remote wakeups, 
       and on every machine you want to use for sending the wakeup signal. The
       magic packet is broadcast over UDP port 9 to the MAC address of the network 
       interface on the client machine.
   </para>
   <para>
       When computers are shutdown they usually are not turned all the way off, 
       but remain in a low power mode. When the network interface supports WOL it 
       listens for the magic packet wakeup signal when the machine is powered off. 
       You can send the magic packet manually, or schedule wakeups in a cron job
       on the sending machine.
   </para>
   
  <sect2 xml:id="sec-deployment-prep-boot-wol-prereqs">
       <title>Prerequisites</title>
   <para>
       WOL works with both wired and wireless Ethernet cards that support it.
   </para>
   <para>
       You may need to enable WOL in your system BIOS/UEFI.
   </para>
   <para>
       Check your BIOS/UEFI
       settings for PXE boot, and make sure it is disabled to prevent accidental
       re-installations.
   </para>
   <para>
       Adjust your firewall to allow traffic over UDP port 9.
   </para>
  </sect2>
  
  <sect2 xml:id="sec-deployment-prep-boot-wiredethernet">
       <title>Verifying wired ethernet support</title>
   <para>
       Run the following command to see if a wired Ethernet interface 
       supports WOL:
   </para>
   <screen>&prompt.sudo;ethtool eth0 | grep -i wake-on
Supports Wake-on: pumbg
Wake-on: g</screen>
   <para>
       The example output shows that eth0 supports WOL, indicated by the 
       <literal>g</literal> flag on the <literal>Supports Wake-on</literal> line. 
       <literal>Wake-on: g</literal> shows that WOL is already enabled, so this 
       interface is ready to receive wakeup signals. If WOL is not enabled, 
       enable it with this command:
   </para>
   <screen>&prompt.sudo;ethtool -s wol g</screen>
  </sect2>
  
   <sect2 xml:id="sec-deployment-prep-boot-wirelessethernet">
       <title>Verifying wireless interface support</title> 
   <para>
       Wakeup-over-wifi, or WoWLAN, requires a wireless network interface that
       supports WoWLAN. Test it with the <command>iw</command>, command, which 
       is provided by the <package>iw</package> package:
   </para>
   <screen>&prompt.sudo;zypper in iw</screen>
   <para>
       Find your device name:
   </para>
   <screen>&prompt.sudo;iw dev
phy#0
        Interface wlan2
                ifindex 3
                wdev 0x1
                addr 9c:ef:d5:fe:01:7c
                ssid accesspoint
                type managed
                channel 11 (2462 MHz), width: 20 MHz, center1: 2462 MHz
                txpower 20.00 dBm</screen>                
            
   <para>
       In this example, the device name to use for querying WoWLAN support is 
       <literal>phy#0</literal>. This example shows that it is not supported:
   </para>
       <screen>&prompt.sudo;iw phy#0 wowlan show
command failed: Operation not supported (-95)</screen>
   <para>
       This example shows an interface that supports WoWLAN, but it is not enabled:
   </para>
   <screen>&prompt.sudo;iw phy#0 wowlan show
WoWLAN is disabled</screen>
   <para>
       Enable it:
   </para>
   <screen>&prompt.sudo;iw phy#0 wowlan enable magic-packet
WoWLAN is enabled:
* wake up on magic packet</screen>
</sect2>

<sect2 xml:id="sec-deployment-prep-boot-wol-install">
    <title>Installing and testing WOL</title>
    <para>
        To use WOL, install the <package>wol</package> package on the client 
        and sending machines:
    </para>
<screen>&prompt.sudo;zypper in wol</screen>
    <para>          
        Install <package>wol-udev-rules</package> on your client machines. This
        package installs a udev rule that enables WOL automatically at startup.
   </para>
   <para>
       Get the MAC address of the network interface on the client machine:
   </para>
   <screen>&prompt.sudo;ip addr show eth0|grep ether
link/ether 7c:ef:a5:fe:06:7c brd ff:ff:ff:ff:ff:ff</screen>
   <para>
       In the example output, <literal>7c:ef:a5:fe:06:7c</literal> is the MAC 
       address.
   </para>
   <para>
       Shut down your client machine, and send it a wakeup signal from another
       computer on the same subnet:
   </para>
   <screen>&prompt.user;wol <replaceable>7c:ef:a5:fe:06:7c</replaceable></screen>
   <para>
       When your target machine and second device are on the same network but in
       different subnets, specify the broadcast address for your target
       machine:
   </para>
   <screen>&prompt.user;wol -i <replaceable>192.168.0.63 7c:ef:a5:fe:06:7c</replaceable>
   </screen>
   <para>
       Because WOL relies on broadcast domains the sending machine must be on 
       the same network, though it can be in a different network segment.
   </para>
   <para>
       It is possible to send the magic packet from a different network. One way 
       is with port forwarding, if your router supports port forwarding to a 
       broadcast address. A more secure method is to SSH to a host inside your
       network, and send the magic packet from there.
   </para>
  </sect2>
 </sect1>
</chapter>