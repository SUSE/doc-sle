<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="cha-rmt-installation">
<!-- ==================================================================== -->
 <info>
  <title>&rmt; installation and configuration</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  &rmt; is included in &sls; starting with version 15. Install &rmt; directly
  during the installation of &productname; or install it on a running system.
  After the packages are installed, use &yast; to do an initial configuration.
 </para>
 <warning>
  <title>&rmt; server will conflict with installation server</title>
  <para>
   Configuring a server to be an &rmt; server installs and configures the NGINX
   Web server, listening on port 80.
  </para>
  <para>
   However, configuring a machine to be an installation server automatically
   installs the Apache Web server and configures it to listen on port 80.
  </para>
  <para>
   Do not try to enable both these functions on the same server. It is not
   possible for a single server to host both simultaneously.
  </para>
 </warning>
 <sect1 xml:id="sec-rmt-storage-requirements">
  <title>Storage requirements</title>

  <para>
   Downloaded packages are stored in
   <filename>/usr/share/rmt/public/repo</filename>, which is a symbolic link to
   <filename>/var/lib/rmt/public/repo/</filename>.
  </para>

  <para>
   The amount of storage your &rmt; server requires is dependent on several
   variables: the number of repositories and architectures that you mirror, and
   the number of products that are enabled. As a general guide, 1.5 times the
   total size of all enabled repositories should be sufficient. This is about
   200 GB per &sle; release, including all extensions.
  </para>
 </sect1>
 <sect1 xml:id="sec-rmt-installation-yast">
  <title>Installation during system installation</title>

  <para>
   To install it during installation, select the <package>rmt-server</package>
   package. The package selection is available in the <emphasis>Installation
   Settings</emphasis> step of the installation when selecting
   <emphasis>Software</emphasis>.
  </para>

  <figure>
   <title>&rmt; pattern</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="rmt_installation.png" width="70%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="rmt_installation.png" width="70%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   We recommend to check for available &rmt; updates immediately after
   installing &sls; using the <command>zypper patch</command> command. &suse;
   continuously releases maintenance updates for &rmt;, and newer packages are
   likely to be available.
  </para>
 </sect1>
 <sect1 xml:id="sec-rmt-installation-zypper">
  <title>Installation on an existing system</title>

  <para>
   To install &rmt; on a running &productname; installation, use
   <command>zypper</command>:
  </para>

<screen>&prompt.sudo;<command>zypper in rmt-server</command></screen>

  <sect2 xml:id="sec-rmt-installation-zypper-jeos">
   <title>Installation on &minvm;</title>
   <para>
    &sls; &minvm; is a minimal customizable operating system that is designed
    for specific usage scenarios, for example, to be run as:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      A container host
     </para>
    </listitem>
    <listitem>
     <para>
      A virtual machine guest
     </para>
    </listitem>
    <listitem>
     <para>
      An appliance base system
     </para>
    </listitem>
    <listitem>
     <para>
      A small server image
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Therefore, &minvm; image is a good choice for being used as an &rmt;
    server. You can download &sls; &minvm; images for &kvm;, &xen;, &hyperv;,
    &vmware;, and OpenStack from the public &sls; download page at
    <link
   xlink:href="https://www.suse.com/download/sles/"/>. Find more
    information on &minvm; at
    <link
   xlink:href="https://documentation.suse.com/sles/&product-dsc-url-substring;/html/SLES-all/article-minimal-vm.html"/>.
   </para>
   <para>
    The installation of &rmt; on &minvm; works identical to installing it on an
    already installed system (see
    <xref linkend="sec-rmt-installation-zypper"/>. To install &rmt; on &minvm;,
    run the following command from the &minvm; command line as &rootuser;:
   </para>
<screen>&prompt.root;zypper install rmt-server yast2-rmt nginx mariadb</screen>
   <important>
    <title>Hardware requirements</title>
    <para>
     When installing &rmt; on &minvm;, be aware that it requires a minimum of
     100 GB disk space, depending on the products you select to mirror. Another
     requirement is a CPU with at least two cores and 2 GB of RAM.
    </para>
   </important>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-rmt-deploy-kubernetes">
  <title>Deploying &rmt; on top of the &kube; cluster</title>

  <para>
   This section describes how to deploy &rmt; on top of the &kube; cluster. It
   uses <emphasis>Helm</emphasis> as the package manager to interact with the
   &kube; cluster. Find more details about using Helm at
   <link xlink:href="https://helm.sh/docs/intro/using_helm/"/>.
  </para>

  <sect2 xml:id="sec-rmt-deploy-kubernetes-prerequisites">
   <title>Prerequisites</title>
   <itemizedlist>
    <listitem>
     <para>
      Running &kube; cluster
     </para>
    </listitem>
    <listitem>
     <para>
      <command>helm</command> command configured to interact with the cluster
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-rmt-deploy-kubernetes-components">
   <title>Application components</title>
   <para>
    Each component of the &rmt; application is deployed in its own container.
    &rmt; consists of the following components:
   </para>
   <variablelist>
    <varlistentry>
     <term>&rmt; server</term>
     <listitem>
      <para>
       Containerized version of the &rmt; application server with the ability
       to pass its configuration via Helm values. Storage is done on a volume
       that will be allocated on the &kube; cluster. You need to adjust the
       size of the storage depending on the number of repositories you need to
       mirror.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&mariadb;</term>
     <listitem>
      <para>
       The database back-end for &rmt;. &rmt; creates the required database and
       tables at start-up, therefore no specific post-installation task is
       required. If passwords are not specified in the
       <filename>values.yaml</filename> file, they are generated automatically.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Nginx</term>
     <listitem>
      <para>
       A Web server configured for &rmt; routes. Having a properly configured
       Web server allows you to target your Ingress traffic (for &rmt;) to this
       Nginx service directly. You do not need to configure Ingress for &rmt;
       specific paths handling, as Nginx is configured to take care of this
       itself.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-rmt-deploy-kubernetes-values">
   <title>The <filename>values.yaml</filename> file</title>
   <para>
    The &rmt; chart includes the <filename>values.yaml</filename> file where
    all parameters are documented and their default values are defined. You can
    override these values by providing your own values file, for example:
   </para>
   <screen>&prompt.user;cat &lt;&lt; EOF > rmt-config.yaml
---
app:
  storage:
    class: local-path
  scc:
    username: UXXXXXXX
    password: PASSXXXX
    products_enable:
      - SLES/15.3/x86_64
      - sle-module-python2/15.3/x86_64
    products_disable:
      - sle-module-legacy/15.3/x86_64
      - sle-module-cap-tools/15.3/x86_64
db:
  storage:
    class: local-path
ingress:
  enabled: true
hosts:
   - host: chart-example.local
     paths:
     - path: "/"
       pathType: Prefix
tls:
  secretName: rmt-cert
  hosts:
    - chart-example.local
EOF
</screen>
 <para>
  And to install RMT, run:
 </para>
<screen>&prompt.user;helm install rmtsle oci://registry.suse.com/suse/rmt-helm -f rmt-config.yaml</screen> 
   <sect3 xml:id="sec-rmt-helm-required-values">
    <title>Required values</title>
    <variablelist>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: app.scc.password</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: string
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>nil</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>:
        <link xlink:href="&sccurl;">&scc;</link> proxy password
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: app.scc.username</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: string
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>nil</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>:
        <link xlink:href="&sccurl;">&scc;</link> proxy username
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: app.scc.products_enable</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: list
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>[]</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: List of products to
        enable for mirroring
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: app.scc.products_disable</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: list
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>[]</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: List of products to
        disabled for mirroring
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: app.storage.class</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: string
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>""</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: Kubernetes <literal>storageclass</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: db.storage.class</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: string
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>""</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: Kubernetes <literal>storageclass</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: ingress.enabled</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: bool
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>: <literal>false</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: Ingress Enabled
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: ingress.hosts[0]</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: object
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>:
        <literal>{"host":"chart-example.local","paths":[{"path":"/","pathType":"Prefix"}]}</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: DNS name at which the
        &rmt; service will be accessible from clients
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: ingress.tls[0].hosts[0]</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: string
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>:
        <literal>"chart-example.local"</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: DNS name at which the
        &rmt; service will be accessible from clients
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><emphasis role="strong">Key</emphasis>: ingress.tls[0].secretName</term>
      <listitem>
       <para>
        <emphasis role="strong">Type</emphasis>: string
       </para>
       <para>
        <emphasis role="strong">Default</emphasis>:
        <literal>"rmt-cert"</literal>
       </para>
       <para>
        <emphasis role="strong">Description</emphasis>: TLS Ingress
        Certificate
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-rmt-installation-yast-configuration">
  <title>&rmt; configuration with &yast;</title>

  <para>
   Configure &rmt; with &yast; as described in the following procedure. It is
   assumed that this procedure is executed on a newly installed system.
  </para>

  <procedure>
   <step>
    <para>
     Start &yast; with the <literal>rmt</literal> module.
    </para>
<screen>&prompt.sudo;<command>yast2 rmt</command></screen>
    <para>
     Alternatively, start &yast; and select <menuchoice> <guimenu>Network
     Services</guimenu> <guimenu>&rmt; Configuration</guimenu> </menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Enter your organization credentials. To retrieve your credentials, refer
     to <xref linkend="sec-rmt-mirroring-credentials" />.
    </para>
   </step>
   <step>
    <para>
     Enter credentials for a new &mariadb; user and database name. This user
     will then be created. Then select <guimenu>Next</guimenu>.
    </para>
    <para>
     If a password for the &mariadb; <literal>root</literal> user is already
     set, you are required to enter it. If no password is set for
     <literal>root</literal>, you are asked to enter a new one.
    </para>
   </step>
   <step>
    <para>
     Enter a common name for the SSL certificates. The common name should
     usually be the <emphasis>fully qualified domain name</emphasis>
     (<emphasis>FQDN</emphasis>) of the server. Enter all domain names and IP
     addresses with which you want to reach the &rmt; server as alternative
     common names.
    </para>
    <para>
     When all common names are entered, select <guimenu>Next</guimenu>.
    </para>
    <tip>
     <title>Certificate locations for RMT</title>
     <itemizedlist>
      <listitem>
       <para>
        <filename>/etc/rmt/ssl/rmt-ca.crt</filename>
       </para>
       <para>
        This is the CA certificate bundle that <command>yast2 rmt</command>
        uses to certify the &rmt; server certificate. <command>yast2
        rmt</command> will only create this file if it does not already exist.
       </para>
      </listitem>
      <listitem>
       <para>
        <filename>/etc/rmt/ssl/rmt-server.crt</filename> and
        <filename>/etc/rmt/ssl/rmt-server.key</filename>
       </para>
       <para>
        <command>yast2 rmt</command> will only generate a new server
        certificate and private key if one does not already exist. To
        regenerate this certificate, refer to
        <xref linkend="cha-manage-certificates-https" />.
       </para>
      </listitem>
     </itemizedlist>
    </tip>
   </step>
   <step>
    <para>
     If &firewalld; is enabled on this system, enable the check box to open the
     required ports.
    </para>
    <figure>
     <title>Enabling ports in &firewalld;</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="rmt_firewalld.png" width="60%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="rmt_firewalld.png" width="65%"/>
      </imageobject>
     </mediaobject>
    </figure>
    <para>
     If &firewalld; is not enabled now and you plan to enable it later, you can
     always open relevant ports by running the <command>yast2 rmt</command>
     module.
    </para>
    <tip>
     <title>Fine-tuning &firewalld; settings</title>
     <para>
      By clicking <guimenu>Firewall Details</guimenu>, you can open the
      relevant ports for specific network interfaces only.
     </para>
    </tip>
    <para>
     Continue with <guimenu>Next</guimenu>.
    </para>
   </step>
   <step>
    <para>
     To view the summary, click <guimenu>Next</guimenu>. Close &yast; by
     clicking <guimenu>Finish</guimenu>. &yast; then enables and starts all
     &systemd; services and timers.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1>
  <title>Enabling SLP announcements</title>

  <para>
   &rmt; includes the SLP service description file
   <filename>/etc/slp.reg.d/rmt-server.reg</filename>. To enable SLP
   announcements of the &rmt; service, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     If &firewalld; is running, open relevant ports and reload the &firewalld;
     configuration:
    </para>
<screen>
&prompt.sudo;firewall-cmd --permanent --add-port=427/tcp
success
&prompt.sudo;firewall-cmd --permanent --add-port=427/udp
success
&prompt.sudo;firewall-cmd --reload
</screen>
   </step>
   <step>
    <para>
     Verify that SLP server is installed and possibly install it:
    </para>
<screen>&prompt.sudo;zypper install openslp-server</screen>
   </step>
   <step>
    <para>
     Enable and start the SLP service:
    </para>
<screen>
&prompt.sudo;systemctl enable slpd.service
&prompt.sudo;systemctl restart slpd.service
</screen>
   </step>
  </procedure>
 </sect1>
</chapter>
