<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<!-- fs 2010-04-26:
     First draft. There is possibly room for improvement e.g. by being more
     verbose ...
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.tuning.basics">
<!-- fs 2010-04-26: Better title? -->
 <title>General Notes on System Tuning</title>
 <info>
      <abstract>
        <para>
    This manual discusses how to find the reasons for performance problems
    and provides means to solve these problems. Before you start tuning your
    system, you should make sure you have ruled out common problems and have
    found the cause for the problem. You should also have a detailed plan on
    how to tune the system, because applying random tuning tips often will
    not help and could make things worse.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <!-- fs 2010-04-26: Better title? -->
 <procedure>
  <title>General Approach When Tuning a System</title>
  <step>
   <para>
    Specify the problem that needs to be solved.
   </para>
  </step>
  <step>
   <para>
    In case the degradation is new, identify any recent changes to the
    system.
   </para>
  </step>
  <step xml:id="st.tuning.basics.whyproblem">
   <para>
    Identify why the issue is considered a performance problem.
   </para>
  </step>
  <step>
   <para>
    Specify a metric that can be used to analyze performance. This metric
    could for example be latency, throughput, the maximum number of
    users that are simultaneously logged in, or the maximum number of active users.
   </para>
  </step>
  <step>
   <para>
    Measure current performance using the metric from the previous step.
   </para>
  </step>
  <step>
   <para>
    Identify the subsystem(s) where the application is spending the most
    time.
   </para>
  </step>
  <step>
   <para/>
   <substeps performance="required">
    <step>
     <para>
      Monitor the system and/or the application.
     </para>
    </step>
    <step>
     <para>
      Analyze the data, categorize where time is being spent.
     </para>
    </step>
   </substeps>
  </step>
  <step>
   <para>
    Tune the subsystem identified in the previous step.
   </para>
  </step>
  <step>
   <para>
    Remeasure the current performance without monitoring using the same
    metric as before.
   </para>
  </step>
  <step>
   <para>
    If performance is still not acceptable, start over with
    <xref linkend="st.tuning.basics.whyproblem"/>.
   </para>
  </step>
 </procedure>
 <sect1 xml:id="sec.tuning.basics.what">
  <title>Be Sure What Problem to Solve</title>

  <para>
   Before starting to tuning a system, try to describe the problem as
   exactly as possible. A statement like <quote>The system is slow!</quote>
   is not a helpful problem description. For example, it could make a
   difference whether the system speed needs to be improved in general or
   only at peak times.
  </para>

  <para>
   Furthermore, make sure you can apply a measurement to your problem,
   otherwise you cannot verify if the tuning was a success or
   not. You should always be able to compare <quote>before</quote> and
   <quote>after</quote>. Which metrics to use depends on the scenario or
   application you are looking into. Relevant Web server metrics, for
   example, could be expressed in terms of:
  </para>

  <variablelist>
   <varlistentry>
    <term>Latency</term>
    <listitem>
     <para>
      The time to deliver a page
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Throughput</term>
    <listitem>
     <para>
      Number of pages served per second or megabytes transferred per second
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Active Users</term>
    <listitem>
     <para>
      The maximum number of users that can be downloading pages while still
      receiving pages within an acceptable latency
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.tuning.basics.common">
  <title>Rule Out Common Problems</title>

  <para>
   A performance problem often is caused by network or hardware problems,
   bugs, or configuration issues. Make sure to rule out problems such as the
   ones listed below before attempting to tune your system:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Check the output of the &systemd; journal (see
     <xref linkend="cha.journalctl"/>) for unusual entries.
    </para>
   </listitem>
   <listitem>
    <para>
     Check (using <command>top</command> or <command>ps</command>) whether a
     certain process misbehaves by eating up unusual amounts of CPU time or
     memory.
    </para>
   </listitem>
   <listitem>
    <para>
     Check for network problems by inspecting
     <filename>/proc/net/dev</filename>.
    </para>
   </listitem>
   <listitem>
    <para>
     In case of I/O problems with physical disks, make sure it is not caused
     by hardware problems (check the disk with the
     <systemitem>smartmontools</systemitem>) or by a full disk.
    </para>
   </listitem>
   <listitem>
    <para>
     Ensure that background jobs are scheduled to be carried out in times
     the server load is low. Those jobs should also run with low priority
     (set via <command>nice</command>).
    </para>
   </listitem>
   <listitem>
    <para>
     If the machine runs several services using the same resources, consider
     moving services to another server.
    </para>
   </listitem>
   <listitem>
    <para>
     Last, make sure your software is up-to-date.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.tuning.basics.bottleneck">
  <title>Finding the Bottleneck</title>

  <para>
   Finding the bottleneck very often is the hardest part when tuning a
   system. &productname; offers many tools to help you with this task.
   See <xref linkend="part.tuning.monitoring"/> for detailed information on
   general system monitoring applications and log file analysis. If the
   problem requires a long-time in-depth analysis, the Linux kernel offers
   means to perform such analysis. See
   <xref linkend="part.tuning.kerneltrace"/> for coverage.
  </para>

  <para>
   Once you have collected the data, it needs to be analyzed. First, inspect
   if the server's hardware (memory, CPU, bus) and its I/O capacities (disk,
   network) are sufficient. If these basic conditions are met, the system
   might benefit from tuning.
  </para>
 </sect1>
 <sect1 xml:id="sec.tuning.basics.tuning">
  <title>Step-by-step Tuning</title>

  <para>
   Make sure to carefully plan the tuning itself. It is of vital importance
   to only do one step at a time. Only by doing so you can
   measure if the change provided an improvement or even had a negative
   impact. Each tuning activity should be measured over a sufficient time
   period to ensure you can do an analysis based on significant
   data. If you cannot measure a positive effect, do not make the change
   permanent. Chances are, that it might have a negative effect in the
   future.
  </para>
 </sect1>
</chapter>
