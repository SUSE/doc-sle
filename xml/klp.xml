<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xml:id="cha-klp" xml:lang="en">
 <title>Live Kernel Patching with &klpa;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This document describes the basic principles of the &klp; (&klpa;)
    technology, and provides usage guidelines for the &slea; Live Patching
    service.
   </para>
  </abstract>
 </info>
 <para>
  &klpa; is a live patching technology for runtime patching of the Linux kernel,
  without stopping the kernel. This maximizes system uptime, and thus system
  availability, which is important for mission-critical systems. By enabling
  dynamic patching of the kernel, the technology also encourages users to
  install critical security updates without deferring them to a scheduled
  downtime.
 </para>
 <para>
   Enabling &klpa; requires no special steps other than enabling the Live
   Patching service, and then applying the patches as they become available.
   The service is part of the normal software management system, and patches are
   installed (or removed) with the usual package management tools. There is no
   need to install or manually select special kernels.
</para>
 <para>
  A &klpa; patch is a kernel module, intended for replacing whole functions in
  the kernel. &klp; primarily offers in-kernel infrastructure for integration of
  the patched code with the base kernel code at runtime.
 </para>
 <para>
  The information provided in this document relates to the &amd64;/&intel64;
  and &power; architectures. &klpa; is supported on the Xen hypervisor.
 </para>
 <sect1 xml:id="sec-klp-advantages">
  <title>Advantages of &klp;</title>

  <para>
   &klp; using &klpa; is for quick emergency response, when serious 
   vulnerabilities or system stability issues are known 
   and should be fixed as quickly as possible. It is not used for 
   scheduled updates where time is not critical.
  </para>

  <para>
   Typical use cases for &klp; include systems like memory databases with huge
   amounts of RAM, where boot-up times of 15 minutes or more are not uncommon,
   large simulations that need weeks or months without a restart, or
   infrastructure building blocks providing continuous service to many
   customers.
  </para>

  <para>
   The main advantage of &klp; is that it never requires stopping the kernel,
   not even for a short time period.
  </para>

  <para>
   A &klpa; patch is a <filename>.ko</filename> kernel module in an RPM package.
   It is inserted into the kernel using the <command>insmod</command> command
   when the package is installed or updated. &klp; replaces whole functions in
   the kernel, even if they are being executed. An updated &klpa; module can
   replace an existing patch if necessary.
  </para>

  <para>
   &klp; is also lean&mdash;it contains only a small amount of code, because it
   leverages other standard Linux technologies.
  </para>
 </sect1>
 <sect1 xml:id="sec-klp-low-level">
  <title>Low-level Function of &klp;</title>

  <para>
   &klp; uses the ftrace infrastructure to perform patching. The following
   describes the implementation on the &amd64;/&intel64; architecture.
  </para>

  <para>
   To patch a kernel function, &klp; needs some space at the start of the
   function to insert a jump to a new function. This space is allocated during
   kernel compilation by GCC with function profiling turned on. In particular,
   a 5-byte call instruction is injected to the start of kernel functions. When
   such instrumented kernel is booting, profiling calls are replaced by 5-byte
   NOP (no operation) instructions.
  </para>

  <para>
   After patching starts, the first byte is replaced by the INT3 (breakpoint)
   instruction. This ensures atomicity of the 5-byte instruction replacement.
   The other four bytes are replaced by the address to the new function.
   Finally, the first byte is replaced by the JMP (long jump) opcode.
  </para>

  <para>
   Inter-processor non-maskable interrupts (IPI NMI) are used throughout the
   process to flush speculative decoding queues of other CPUs in the system.
   This allows switching to the new function without ever stopping the kernel,
   not even for a very short moment. The interruptions by IPI NMIs can be
   measured in microseconds and are not considered service interruptions as
   they happen while the kernel is running in any case.
  </para>

  <para>
   Callers are never patched. Instead, the callee's NOPs are replaced by a JMP
   to the new function. JMP instructions remain forever. This takes care of
   function pointers, including in structures, and does not require saving any
   old data for the possibility of un-patching.
  </para>

  <para>
   However, these steps alone would not be good enough: since the functions
   would be replaced non-atomically, a new fixed function in one part of the
   kernel could still be calling an old function elsewhere or vice versa. If
   the semantics of the function interfaces changed in the patch, chaos would
   ensue.
  </para>

  <para>
   Thus, until all functions are replaced, &klp; uses an approach based on
   trampolines and similar to RCU (read-copy-update), to ensure a consistent
   view of the world to each user space thread, kernel thread and kernel
   interrupt. A per-thread flag is set on each kernel entry and exit. This way,
   an old function would always call another old function and a new function
   always a new one. Once all processes have the "new universe" flag set,
   patching is complete, trampolines can be removed and the code can operate at
   full speed without performance impact other than an extra-long jump for each
   patched function.
  </para>
 </sect1>

  <sect1 xml:id="sec-klp-install-patch-activate">
   <title>Activation of SLE Live Patching</title>
   <para>
    To activate &slea; Live Patching on your system, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      Your &slsa; system must be registered. Register your system either during 
      system installation, or after installation with the &yast; 
      <guimenu>Product Registration</guimenu> module (<command>yast2
      registration</command>). If your &slsa; system is already registered, 
      but &slea; Live Patching is not yet activated, run the
      <command>yast2 registration</command> command and
      click <guimenu>Select Extensions</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Select <guimenu>SUSE Linux Enterprise Live Patching 15</guimenu> in the
      list of available extensions and click <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Confirm the license terms and click <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enter your &slea; Live Patching registration code and click
      <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Check the <guimenu>Installation Summary</guimenu> and selected
      <guimenu>Patterns</guimenu>. The patterns <systemitem>Live
      Patching</systemitem> and 
      <systemitem>SLE Live Patching Lifecycle Data</systemitem> should be 
      automatically selected for installation, and there may be additional
      packages to satisfy dependencies. 
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Accept</guimenu> to complete the installation. This will
      install the base &klp; components on your system, the initial live patch,
      and any dependencies.
     </para>
    </step>
   </procedure>
  </sect1>

  <sect1 xml:id="sec-klp-install-patch-update">
   <title>Installing and Removing Patches</title>
   <para>
       This section describes how to find, install, and remove &klpa; patches.
   </para>
     <sect2 xml:id="sec-klp-install">
  <title>Installing a &klpa; Patch</title>
     
   <procedure>
    <step>
     <para>
      Before installing new patches, run the <command>klp status</command> command to query current status,
      which must be <literal>ready</literal> and not <literal>in_progress</literal>. 
      You cannot apply new patches until previous patch installations are completed. Invocations of the old kernel functions are not completely eliminated until all sleeping processes wake up and get out of the way. This can take a considerable amount of time. Sleeping processes that use the old kernel functions are not considered a security issue. (See <xref linkend="sec-klp-exec-threads"/> for
      information on managing prolonged <literal>in_progress</literal> states.)
     </para>     
     </step>
    <step>
     <para>
         Use the normal package management system, <command>zypper</command> or 
         &yast;, to view and install available patches. The following example
         searches for available patches, and then installs the most recent
         patch. It is not necessary to install all patches in order; when there
         are multiple patches available install the most recent.
     </para>
     <screen>&prompt.sudo;zypper se kernel-livepatch 
| kernel-livepatch-4_12_14-25_16-default  | Kernel live patch module  | package   
| kernel-livepatch-4_12_14-25_19-default  | Kernel live patch module  | package   
| kernel-livepatch-4_12_14-25_22-default  | Kernel live patch module  | package

&prompt.sudo;zypper in kernel-livepatch-4_12_14-25_22-default</screen>     
    </step>
   </procedure>
  </sect2>
 
  <sect2 xml:id="sec-klp-remove">
  <title>Removing a &klpa; Patch</title>
  <para>
      If you need to remove a &klpa; patch, use <command>zypper</command> just
      as you would for any other package. List your installed live patch
      packages by using <command>zypper</command> to search for 
      <literal>kernel-livepatch</literal>:
  </para>
     <screen>&prompt.sudo;zypper se -kernel-livepatch 
  | kernel-livepatch-4_12_14-25_16-default  | Kernel live patch module  | package   
  | kernel-livepatch-4_12_14-25_19-default  | Kernel live patch module  | package   
i | kernel-livepatch-4_12_14-25_22-default  | Kernel live patch module  | package
</screen>
  <procedure>
   <step>
    <para>
     Remove the patch using <command>zypper</command>:
    </para>
<screen>&prompt.sudo;zypper rm kernel-livepatch-4_12_14-25_22-default</screen>
   </step>
   <step>
    <para>
     Wait for <systemitem>initrd</systemitem> to automatically rebuild, then reboot the 
     machine.
    </para>
   </step>
  </procedure>
</sect2>
 </sect1>
 
  <sect1 xml:id="sec-klp-klp">
  <title>The <command>klp</command> Tool</title>

  <para>
   Several &klp; management tasks can be simplified with the
   <command>klp</command> tool. The available commands are:
  </para>

  <variablelist>
   <varlistentry>
    <term><command>klp status</command></term>
    <listitem>
     <para>
      Displays the overall status of &klp; (<literal>ready</literal> or
      <literal>in_progress</literal>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>klp patches</command></term>
    <listitem>
     <para>
      Displays the list of loaded &klpa; patches.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>klp blocking</command></term>
    <listitem>
     <para>
      Lists processes that are preventing &klp; from finishing. By
      default only the PIDs are listed. Specifying <option>-v</option> prints
      command lines if available. <option>-vv</option> displays stack traces.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   For detailed information, see <command>man klp</command>.
  </para>
 </sect1>

 <sect1 xml:id="sec-klp-exec-threads">
  <title>Stuck Kernel Execution Threads</title>

  <para>
   Kernel threads must be prepared to handle &klp;. Third-party software may
   not support &klp;, and may spawn kernel execution threads. These threads will block the patching process indefinitely. As an emergency measure, you may 
   force the completion of the patching process without waiting for all execution threads to cross the safety checkpoint by writing <literal>0</literal> into
   <filename>/sys/kernel/livepatch/*/transition/</filename> (replacing the
   asterisk wildcard with your file name). Consult &suse; support before 
   performing this procedure.
  </para>
</sect1>

 <sect1 xml:id="sec-klp-lifecycle">
  <title>Patch Lifecycle</title>

  <para>
   Expiration dates of live patches can be accessed with <command>zypper
   lifecycle</command>. (Make sure that the package
   <package>lifecycle-data-sle-module-live-patching</package> is installed.)
  </para>

  <para>
   When the expiration date of a patch is reached, no further live patches for
   this kernel version will be supplied. Plan an update of your kernel before
   the end of the live patch lifecycle period.
  </para>

  <para>
   For details about <command>zypper lifecycle</command>, see the
   <emphasis>Showing Life Cycle Information</emphasis> in the <emphasis>Admin
   Guide</emphasis>.
  </para>
 </sect1>

 <sect1 xml:id="sec-klp-scope">
  <title>Scope of &klp; Technology</title>

  <para>
   &klp; is based on replacing functions. Data structure alteration can be
   accomplished only indirectly with &klp;. As a result, changes to kernel data
   structure require special care and, if the change is too large, rebooting
   might be required. &klp; also might not be able to handle situations where
   one compiler is used to compile the old kernel and another compiler is used
   for compiling the patch.
  </para>

  <para>
   Because of the way &klp; works, support for third-party modules that are
   spawning kernel threads is limited.
<!--Sending SIGSTOP and SIGCONT signals to processes in D process state
  (uninterruptible sleep) does not make them to cross the kernel/user space
  boundary and does not have the intended effect.-->
  </para>
 </sect1>
 <sect1 xml:id="sec-klp-scope-patching">
  <title>Scope of &slea; Live Patching</title>

  <para>
   Fixes for SUSE Common Vulnerability Scoring System (CVSS; SUSE CVSS is based
   on the CVSS v3.0 system) level 7+ vulnerabilities and bug fixes related to
   system stability or data corruption will be shipped in the scope of SLE Live
   Patching. It might not be possible to produce a live patch for all kinds of
   fixes fulfilling the above criteria. SUSE reserves the right to skip fixes
   where production of a kernel live patch is unviable because of technical
   reasons. For more information on CVSS, which is the base for the SUSE CVSS
   rating, see <link xlink:href="https://www.first.org/cvss/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-klp-support-interaction">
  <title>Interaction with the Support Processes</title>

  <para>
   While resolving a technical difficulty with &suse; support, you may receive
   a Program Temporary Fix (PTF). PTFs may be issued for various
   packages including those forming the base of &slea; Live Patching.
  </para>

  <para>
   &klp; PTFs complying with the conditions described in the previous section
   can be installed as usual and &suse; will ensure that the system in question
   does not need to be rebooted and that future live updates are applied
   cleanly.
  </para>

  <para>
   PTFs issued for the base kernel disrupt the live patching process. First,
   installing the PTF kernel means a reboot as the kernel cannot be replaced as
   a whole at runtime. Second, another reboot is needed to replace the PTF with
   any regular maintenance updates for which the live patches are issued.
  </para>

  <para>
   PTFs for other packages in &slea; Live Patching can be treated like regular
   PTFs with the usual guarantees.
  </para>
 </sect1>
</chapter>
