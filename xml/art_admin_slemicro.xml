<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml"
                 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="article-transactional-updates" xml:lang="en">
 <title>&slem; Administration</title>
 <subtitle>&productname; &productnumber;</subtitle>
 <info>
  <productnumber>&productnumber;</productnumber><productname>&productname;</productname><date>
<?dbtimestamp format="B d, Y"?></date>
  <abstract>
   <para>
    This guide describes administration of &slem;.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <section xml:id="sec-transactional-udate">
  <title>Administration by using transactional updates</title>
  <para>
   &slema; was designed to use the read-only root file system. So after the
   deployment is complete, you are not able to perform direct modifications to
   the root file system, e.g. by using <command>zypper</command>. The concept
   of transactional updates has been implemented to enable you to modify and
   keep your system up to date.
  </para>
  <para>
   Transactional updates key features are the following:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     they are atomic - the update is applied only if it completes successfully.
    </para>
   </listitem>
   <listitem>
    <para>
     changes are applied in a separate snapshot and thus they do not influence
     the running system.
    </para>
   </listitem>
   <listitem>
    <para>
     they provide easy rollback.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Each time you call the <command>transactional-update</command> to change
   your system&mdash;either to install a package, perform an update or apply a
   patch; the following actions take place:
  </para>
  <procedure>
   <title>Modifying the root file system</title>
   <step>
    <para>
     A new read-write snapshot is created from your current root file system or
     from a snapshot that you specified.
    </para>
   </step>
   <step>
    <para>
     All changes are applied (update, patches or package installation).
    </para>
   </step>
   <step>
    <para>
     The snapshot is switched back to the read-only mode.
    </para>
   </step>
   <step>
    <para>
     The new root file system snapshot is prepared to be applied after reboot.
    </para>
   </step>
   <step>
    <para>
     After rebooting the new root file system is used instead of the current
     root file system.
    </para>
    <note>
     <para>
      Bear in mind that without rebooting your system, the changes won't be
      applied.
     </para>
    </note>
   </step>
  </procedure>
  <para>
   In case you do not reboot your machine before performing further changes to
   the file system, the new snapshot are created always from the current root.
   You will end up with several parallel snapshots, each spanshots includes the
   particular change, but not changes from the other snapshots. After reboot,
   the last created snapshot will be used as your current root file system and
   will not include changes done in the previous snapshots.
  </para>
  <section xml:id="sec-command-list">
   <title><command>transactional-update</command> usage</title>
   <para>
    The <command>transactional-update</command> command enables atomic
    installation or removal of updates; updates are applied only if all of them
    can be successfully installed. <command>transactional-update</command>
    creates a snapshot of your system before the update is applied, and you can
    restore this snapshot. All changes become active only after reboot.
   </para>
   <para>
    The <command>transactional-update</command> command syntax is the
    following:
   </para>
<screen>
transactional-update <option>[option]</option> <replaceable>[general command]</replaceable> <replaceable>[package command]</replaceable> <replaceable>standalone command</replaceable>
</screen>
   <note>
    <title>Running <command>transactional-update</command> without arguments.</title>
    <para>
     When you do not specify any command or option while running the
     <command>transactional-update</command> command, the system updates
     itself.
    </para>
   </note>
   <para>
    Each command parameter is described further.
   </para>
   <variablelist>
    <title><command>transactional-update</command> options</title>
    <varlistentry>
     <term><literal>--interactive, -i</literal></term>
     <listitem>
      <para>
       Can be used along with the a package command to turn on the interactive
       mode.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--non-interactive, -n</literal></term>
     <listitem>
      <para>
       Can be used along with the a package command to turn on the
       non-interactive mode.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--continue [&lt;number&gt;], -c</literal></term>
     <listitem>
      <para>
       The <command>--continue</command> option is for making multiple changes
       to an existing snapshot without rebooting.
      </para>
      <para>
       The default <command>transactional-update</command> behavior is to
       create a new snapshot from the current root file system. If you forget
       something, such as installing a new package, you have to reboot to apply
       your previous changes, run <command>transactional-update</command> again
       to install the forgotten package, and reboot again. You cannot run the
       <command>transactional-update</command> command multiple times without
       rebooting to add more changes to the snapshot, because that creates
       separate independent snapshots that do not include changes from the
       previous snapshots.
      </para>
      <para>
       Use the <command>--continue</command> option to make as many changes as
       you want without rebooting. A separate snapshot is made each time, and
       each snapshot contains all the changes you made in the previous
       snapshots, plus your new changes. Repeat this process as many times as
       you want, and when the final snapshot includes everything you want
       reboot the system, and your final snapshot becomes the new root file
       system.
      </para>
      <para>
       Another useful feature of the <command>--continue</command> option is
       you may select any existing snapshot as the base for your new snapshot.
       The following example demonstrates running
       <command>transactional-update</command> to install a new package in a
       snapshot based on snapshot 13, and then running it again to install
       another package:
      </para>
<screen>&prompt.root;<command>transactional-update pkg install <replaceable>package_1</replaceable></command></screen>
<screen>&prompt.root;<command>transactional-update --continue 13 pkg install <replaceable>package_2</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--no-selfupdate</literal></term>
     <listitem>
      <para>
       Disables self updating of <command>transactional-update</command>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--drop-if-no-change, -d</literal></term>
     <listitem>
      <para>
       The snapshot created when the <command>transactional-update</command>
       command is run, is removed if there has not been any change to the file
       system.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--quiet</literal></term>
     <listitem>
      <para>
       The <command>transactional-update</command> command will not output to
       stdout.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--help, -h</literal></term>
     <listitem>
      <para>
       Prints help for the <command>transactional-update</command> command.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>--version</literal></term>
     <listitem>
      <para>
       Displays the version of the <command>transactional-update</command>
       command.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The general commands are the following:
   </para>
   <variablelist>
    <title>General commands</title>
    <varlistentry>
     <term><literal>cleanup-snapshots</literal></term>
     <listitem>
      <para>
       The command marks all unused snapshots that are intended to be removed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>cleanup-overlays</literal></term>
     <listitem>
      <para>
       The command removes all unused overlay layers of
       <filename>/etc</filename>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>cleanup</literal></term>
     <listitem>
      <para>
       The command combines the <literal>cleanup-snapshots</literal> and
       <literal>cleanup-overlays</literal> commands. For more details refer to
       <xref linkend="sec-cleanup-algorithm"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>grub.cfg</literal></term>
     <listitem>
      <para>
       Use this command to rebuild the GRUB bootloader configuration file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>bootloader</literal></term>
     <listitem>
      <para>
       The command reinstall the bootloader.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>initrd</literal></term>
     <listitem>
      <para>
       Use the command to rebuild initrd.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>kdump</literal></term>
     <listitem>
      <para>
       In case you perform changes to your hardware or storage, you may need to
       rebuild the kdump initrd.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>shell</literal></term>
     <listitem>
      <para>
       Opens a read-write shell in the new snapshot before exiting.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>reboot</literal></term>
     <listitem>
      <para>
       The system reboots after the transactional-update is complete.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>run </literal><replaceable>&lt;command&gt;</replaceable></term>
     <listitem>
      <para>
       Runs the provided command in a new snapshot.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>setup-selinux</literal></term>
     <listitem>
      <para>
       Installs and enables targeted SELinux policy.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The package commands are the following:
   </para>
   <variablelist>
    <varlistentry>
     <term><literal>dup</literal></term>
     <listitem>
      <para>
       Performs upgrade of your system. The default option for this command is
       <literal>--non-interactive</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>migration</literal></term>
     <listitem>
      <para>
       The command migrates your system to a selected target. Typically it is
       used to upgrade your system if it has been registred via &scc;.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>patch</literal></term>
     <listitem>
      <para>
       Checks for available patches and installs them. The default option for
       this command is <literal>--non-interactive</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pkg install</literal></term>
     <listitem>
      <para>
       Installs individual packages from the available channels using the
       <command>zypper install</command> command. This command can also be used
       to install Program Temporary Fix (PTF) RPM files. The default option for
       this command is <literal>--interactive</literal>.
      </para>
<screen>&prompt.root;<command>transactional-update pkg install <replaceable>package_name</replaceable></command></screen>
      <para>
       or
      </para>
<screen>&prompt.root;<command>transactional-update pkg install <replaceable>rpm1 rpm2</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pkg remove</literal></term>
     <listitem>
      <para>
       Removes individual packages from the active snapshot using the
       <command>zypper remove</command> command. This command can also be used
       to remove PTF RPM files. The default option for this command is
       <literal>--interactive</literal>.
      </para>
<screen>&prompt.root;<command>transactional-update pkg remove <replaceable>package_name</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pkg update</literal></term>
     <listitem>
      <para>
       Updates individual packages from the active snapshot using the
       <command>zypper update</command> command. Only packages that are part of
       the snapshot of the base file system can be updated. The default option
       for this command is <literal>--interactive</literal>.
      </para>
<screen>&prompt.root;<command>transactional-update pkg remove <replaceable>package_name</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>register</literal></term>
     <listitem>
      <para>
       The register command enables you to register/deregister your system. For
       a complete usage description, refer to
       <xref linkend="sec-register-command"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>up</literal></term>
     <listitem>
      <para>
       Updates installed packages to newer versions. The default option for
       this command is <literal>--non-interactive</literal>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The standalone commnads are the following:
   </para>
   <variablelist>
    <title>Standalone commands</title>
    <varlistentry>
     <term><literal>rollback</literal> <replaceable>&lt;snapshot number&gt;</replaceable></term>
     <listitem>
      <para>
       This sets the default subvolume. The current system is set to a new
       default root file system. If you specify a number, that snapshot is used
       as the default root file system. On a read-only file system, it does not
       create any additional snapshots.
      </para>
<screen>&prompt.root;<command>transactional-update rollback <replaceable>snapshot_number</replaceable></command></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>rollback last</literal></term>
     <listitem>
      <para>
       This command sets the last working snapshot as the default.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>status</literal></term>
     <listitem>
      <para>
       This prints a list of available snapshots. The currently booted one is
       marked with an asterisk, the default snapshot is marked with a plus
       sign.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <section xml:id="sec-register-command">
    <title>The <literal>register</literal> command</title>
    <para>
     The <literal>register</literal> command enables you to handle all task
     regarding registration and subscription managment. You can input the
     following options:
    </para>
    <variablelist>
     <varlistentry>
      <term><literal>--list-extensions</literal></term>
      <listitem>
       <para>
        With this option, the command will list available extensions for your
        system. You can use the output to find a product identifier for the
        product activation.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-p, --product</literal></term>
      <listitem>
       <para>
        Use the option to specify a product for activation. The product
        identifier has the following format:
        <emphasis>&lt;name&gt;/&lt;version&gt;/&lt;architecture&gt;</emphasis>,
        e.g. <literal>sle-module-live-patching/15.3/x86_64</literal>. The
        command is then the following:
       </para>
<screen>
  &prompt.root;transactional-update register -p sle-module-live-patching/15.3/x86_64
  </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-r, --regcode</literal></term>
      <listitem>
       <para>
        Register your system with the provided registration code. The command
        will register the subscription and enable software repositories.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-d, --de-register</literal></term>
      <listitem>
       <para>
        The option deregister the system, or when used along with the
        <literal>-p</literal> option to deregister an extension.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-e, --email</literal></term>
      <listitem>
       <para>
        Specify an email address that wil be used in &scc; for registration.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--url</literal></term>
      <listitem>
       <para>
        Specify an url of your registration server. The url is stored in
        configuration and is used in next command invocations. Example follows:
       </para>
<screen>
  &prompt.root;transactional-update register --url https://scc.suse.com
  </screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>-s, --status</literal></term>
      <listitem>
       <para>
        Displays the current registration status in the JSON format.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--write-config</literal></term>
      <listitem>
       <para>
        Writes provided options value to the
        <filename>/etc/SUSEConnect</filename> configuration file.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--cleanup</literal></term>
      <listitem>
       <para>
        Removes old system credentials.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--version</literal></term>
      <listitem>
       <para>
        Prints the version.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>--help</literal></term>
      <listitem>
       <para>
        Displays usage of the command.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </section>
  </section>
  <section xml:id="sec-cleanup-algorithm">
   <title>Snapshots cleanup</title>
   <para>
    If you run the command <command>transactional-update cleanup</command>, all
    old snapshots without a cleanup algorithm get a cleanup algorithm set and
    also all important snapshots are marked. The command also removes all
    unreferenced (and thus unused) <filename>/etc</filename> overlay
    directories in <filename>/var/lib/overlay</filename>.
   </para>
   <para>
    The snapshots with the set <literal>number</literal> cleanup algorithm will
    be deleted according to rules configured in
    <filename>/etc/snapper/configs/root</filename> by the following parameters:
   </para>
   <variablelist>
    <varlistentry>
     <term>NUMBER_MIN_AGE</term>
     <listitem>
      <para>
       Defines the minimum age of a snapshot in seconds that can be
       automatically removed.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>NUMBER_LIMIT/NUMBER_LIMIT_IMPORTANT</term>
     <listitem>
      <para>
       Defines the maximim count of stored snapshots. The cleaning algorithms
       delete snapshots above the specified maximum value, without taking the
       snapshot and file system space into account. The algorithms also delete
       snapshots above the minimum value until the limits for the snapshot and
       file system are reached.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <section xml:id="sec-rollback-procedure">
   <title>System rollback</title>
   <para>
    GRUB 2 enables to boot from btrfs snapshots and thus allows you to use any
    older functional snapshot in case the new snapshot is corrupted.
   </para>
   <para>
    When booting a snapshot, the parts of the file system included in the
    snapshot are mounted read-only; all other file systems and parts that are
    excluded from snapshots are mounted read-write and can be modified.
   </para>
   <tip>
    <title>Rolling back to a specific installation state</title>
    <para>
     An initial bootable snapshot is created at the end of the initial system
     installation. You can go back to that state at any time by booting this
     snapshot. The snapshot can be identified by the description <literal>after
     installation</literal>.
    </para>
   </tip>
   <para>
    There are two methods how you can perform a system rollback.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      From a running system you can set the default snapshot, see more in
      <xref linkend="proc-running-snapshot" xrefstyle="template:Combustion"/>.
     </para>
    </listitem>
    <listitem>
     <para>
      Especially in cases where the current snapshot is broken, you can boot to
      the new snapshot and set it then default, for details refer to
      <xref linkend="proc-boot-snapshot"/>.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    In case your current snapshot is functional, you can use the following
    procedure for system rollback.
   </para>
   <procedure xml:id="proc-running-snapshot">
    <step>
     <para>
      Choose the snapshot that should be set as default, run:
     </para>
<screen>
  &prompt.root;transactional-update status
  </screen>
     <para>
      to get a list of available snapshots. Note the number of the snapshot to
      be set as default.
     </para>
    </step>
    <step>
     <para>
      Set the snapshot as the default by running:
     </para>
<screen>
  &prompt.root;transactional-update rollback <replaceable>snapshot number</replaceable>
  </screen>
     <para>
      If you omit the <replaceable>snapshot number</replaceable>, the current
      snapshot will be set as default.
     </para>
    </step>
    <step>
     <para>
      Reboot your system to boot in to the new default snapshot.
     </para>
    </step>
   </procedure>
   <para>
    The following procedure is used in case, the current snapshot is broken and
    you are not able to boot into it.
   </para>
   <procedure xml:id="proc-boot-snapshot">
    <step>
     <para>
      Reboot your system and select <literal>Start bootloader from a read-only
      snapshot</literal>
     </para>
    </step>
    <step>
     <para>
      Choose a snapshot to boot. The snapshots are sorted according to the date
      of creation, the latest being the top one.
     </para>
    </step>
    <step>
     <para>
      Log in to your system and check whether everything works as expected.
      Bear in mind that the snapshot directories are read-only, so you cannot
      write into them. Data written to directories excluded from the snapshots
      will stay untouched.
     </para>
    </step>
    <step>
     <para>
      If the snapshot you booted into is not suitable for rollback, reboot your
      system and choose another one.
     </para>
     <para>
      If the snapshot works as expected, you can perform rollback by running
      the following command:
     </para>
<screen>
   &prompt.root; <command>transactional-update rollback</command>
   </screen>
     <para>
      And reboot afterwards.
     </para>
    </step>
   </procedure>
  </section>
  <section xml:id="sec-automatic-updates">
   <title>Managing automatic transactional updates</title>
   <para>
    Automatic updates are controlled by a <command>systemd.timer</command> that
    runs once per day. This applies all updates, and informs
    <command>rebootmgrd</command> that the machine should be rebooted. You may
    adjust the time when the update runs, see systemd.timer(5). To adjust the
    maintenance window, which is when <command>rebootmgrd</command> reboots the
    system, see rebootmgrd(8).
   </para>
   <para>
    You can disable automatic transactional updates with this command:
   </para>
<screen>&prompt.root;<command>systemctl --now disable transactional-update.timer</command></screen>
  </section>
 </section>
 <section xml:id="sec-snapshots">
  <title>Snapshots</title>
  <warning>
   <title>Snapshots are mandatory</title>
   <para>
    As snapshots are crucial for &slema; correct functioning, do not disable
    the feature and ensure that the root partition is big enough to store the
    snapshots.
   </para>
  </warning>
  <para>
   When a snapshot is created, both the snapshot and the original point to the
   same blocks in the file system. So, initially a snapshot does not occupy
   additional disk space. If data in the original file system is modified,
   changed data blocks are copied while the old data blocks are kept for the
   snapshot.
  </para>
  <para>
   Snapshots always reside on the same partition or subvolume on which the
   snapshot has been taken. It is not possible to store snapshots on a
   different partition or subvolume. As a result, partitions containing
   snapshots need to be larger than partitions not containing snapshots. The
   exact amount depends strongly on the number of snapshots you keep and the
   amount of data modifications. As a rule of thumb, give partitions twice as
   much space as you normally would. To prevent disks from running out of
   space, old snapshots are automatically cleaned up.
  </para>
  <para>
   Snapshot that are known to be working properly are marked as
   <emphasis>important</emphasis>.
  </para>
  <section xml:id="sec-exclude-directories">
   <title>Directories excluded from snapshots</title>
   <para>
    As some directories store user specific or volatile data, these directories
    are excluded from snapshots:
   </para>
   <variablelist>
    <varlistentry>
     <term><filename>/home</filename></term>
     <listitem>
      <para>
       Contains user's data. To avoid overwriting this data, this directory is
       excluded from snapshots.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/root</filename></term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/opt</filename></term>
     <listitem>
      <para>
       Third-party products usually get installed to <filename>/opt</filename>.
       It is excluded to avoid uninstalling these applications on rollbacks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/srv</filename></term>
     <listitem>
      <para>
       Contains data for Web and FTP servers. It is excluded to avoid data loss
       on rollbacks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/usr/local</filename></term>
     <listitem>
      <para>
       This directory is used when manually installing software. It is excluded
       to avoid uninstalling these installations on rollbacks.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/var</filename></term>
     <listitem>
      <para>
       This directory contains many variable files, including logs, temporary
       caches, third party products in <filename>/var/opt</filename>, and is
       the default location for virtual machine images and databases. Therefore
       this subvolume is created to exclude all of this variable data from
       snapshots and has Copy-On-Write disabled.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/tmp</filename></term>
     <listitem>
      <para>
       The directory contains temporal data.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>the architecture specific <filename>/boot/grub2</filename> directory</term>
     <listitem>
      <para>
       A rollback of the boot loader binaries is not supported.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
  <section xml:id="sec-snapshot-size">
   <title>Showing exclusive disk space used by snapshots</title>
   <para>
    Snapshots share data, for efficient use of storage space, so using ordinary
    commands like <command>du</command> and <command>df</command> won't measure
    used disk space accurately. When you want to free up disk space on Btrfs
    with quotas enabled, you need to know how much exclusive disk space is used
    by each snapshot, rather than shared space. The <command>btrfs</command>
    command provides a view of space used by snapshots:
   </para>
<screen>
&prompt.root;btrfs qgroup show -p /
qgroupid         rfer         excl parent  
--------         ----         ---- ------  
0/5          16.00KiB     16.00KiB ---     
[...]    
0/272         3.09GiB     14.23MiB 1/0     
0/273         3.11GiB    144.00KiB 1/0     
0/274         3.11GiB    112.00KiB 1/0     
0/275         3.11GiB    128.00KiB 1/0     
0/276         3.11GiB     80.00KiB 1/0     
0/277         3.11GiB    256.00KiB 1/0     
0/278         3.11GiB    112.00KiB 1/0     
0/279         3.12GiB     64.00KiB 1/0     
0/280         3.12GiB     16.00KiB 1/0     
1/0           3.33GiB    222.95MiB --- 
</screen>
   <para>
    The <literal>qgroupid</literal> column displays the identification number
    for each subvolume, assigning a qgroup level/ID combination.
   </para>
   <para>
    The <literal>rfer</literal> column displays the total amount of data
    referred to in the subvolume.
   </para>
   <para>
    The <literal>excl</literal> column displays the exclusive data in each
    subvolume.
   </para>
   <para>
    The <literal>parent</literal> column shows the parent qgroup of the
    subvolumes.
   </para>
   <para>
    The final item, <literal>1/0</literal>, shows the totals for the parent
    qgroup. In the above example, 222.95 MiB will be freed if all subvolumes
    are removed. Run the following command to see which snapshots are
    associated with each subvolume:
   </para>
  </section>
 </section>
 <section xml:id="sec-health-checker">
  <title>Health checker</title>
  <para>
   Health checker is a program delivered with &slema; that during booting of
   your system checks whether services are running properly.
  </para>
  <para>
   During the boot process <literal>systemd</literal> calls Health checker that
   calls its plugins. Each plugin checks a particular service or condition. If
   each check passes, a status
   file&mdash;<filename>/var/lib/misc/health-checker.state</filename> is
   created. The status file marks the current root file system correct.
  </para>
  <para>
   If any of the health checker plugins reports an error, the action taken
   depends on a particular condition as described below:
  </para>
  <variablelist>
   <varlistentry>
    <term><emphasis>The snapshot is booted for the first time.</emphasis></term>
    <listitem>
     <para>
      If the current snapshot is different from the last one that worked
      properly, an automatic rollback to the last working snapshot is
      performed. This means that the last change performed to the file system
      broke the snapshot.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>The snapshot has already booted correctly in the past.</emphasis></term>
    <listitem>
     <para>
      There coud be just a temporary problem, the system is rebooted
      automatically.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><emphasis>The reboot of a previously correctly booted snapshot has failed.</emphasis></term>
    <listitem>
     <para>
      If there already was a problem during boot and automatic reboot has been
      triggered but the problem still persists, the system is kept running to
      enable to the admnistration to fix the problem. The services that are
      tested by the healtch checker plugins are stopped if possible.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <section xml:id="sec-health-plugins">
   <title>Adding customer plugins</title>
   <para>
    Health checker enables you to add your plugins to check services during the
    booting process. Each plugin is a bash script that must fulfill the
    following requirements:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      The plugins are located within a secific
      directory&mdash;<filename>/usr/libexec/health-checker</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      The service that will be checked by the particular plugin must be defined
      in the
      <filename>/usr/lib/systemd/system/health-checker.service</filename> file
      in the <literal>Unit</literal> section. For example, the
      <literal>etcd</literal> service is defined as follows:
     </para>
<screen>
 [Unit]
 ...
 After=etcd.service
 ...
 </screen>
    </listitem>
    <listitem>
     <para>
      Each plugin has the <literal>run.checks</literal> and
      <literal>stop_services</literal> functions defined. The
      <literal>run.checks</literal> function checks whether a particular
      service has started properly. Bear in mind that service that has not been
      enabled by systemd, should be ignored. The function
      <literal>stop_services</literal> is called in case a service has not been
      started properly to stop the particular service. You can use the plugin
      template for your reference.
     </para>
    </listitem>
   </itemizedlist>
  </section>
 </section>
 <section xml:id="sec-admin-cockpit">
  <title>&slema; administration by using Cockpit</title>
  <para>
   Cockpit is a web-based graphical interface that enables you to manage your
   &slema; deployment in one place. Cockpit is a standard delivery in case of
   raw images, or can be installed in case of the manual installation, for the
   installation process refer to <xref linkend="sec-settings-software"/>.
  </para>
  <para>
   Before running Cockpit on you machine, you need to enable the cockpit socket
   in systemd by running:
  </para>
<screen>
 &prompt.root;systemctl enable --now cockpit.socket
 </screen>
  <para>
   In case you have enabled the firewall, you also must open the firewall for
   Cockpit as follows:
  </para>
<screen>
 &prompt.root;firewall-cmd --permanent --zone=public --add-service=cockpit
 </screen>
  <para>
   And then reload the firewall configuration by running:
  </para>
<screen>
 &prompt.root;firewall-cmd --reload
 </screen>
  <para>
   Now you can access the Cockpit web interface by opening the following
   address in your web browser:
  </para>
<screen>
 https://ip-address-of-machine:9090
 </screen>
  <para>
   A login screen opens. To login, use the same credentials as you use to login
   to your machine via console or SSH.
  </para>
  <figure>
   <title>Cockpit login screen</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata  fileref="cockpit_login_screen.png" width="100%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cockpit_login_screen.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>
  <para>
   After successful login, an overview of your machine opens. Here you can view
   and/or administrate your system performance, network interfaces, Podman
   containers, services, logs or you can access your machine by using a shell
   terminal.
  </para>
  <figure>
   <title>Cockpit login screen</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata  fileref="cockpit_dashboard.png" width="100%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="cockpit_dashboard.png" width="100%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </section>
</article>
