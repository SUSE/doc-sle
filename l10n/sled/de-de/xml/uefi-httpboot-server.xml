<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="uefi-httpboot-server.xml" version="5.0" xml:id="cha-deployment-prep-uefi-httpboot">
 <title>Einrichten eines UEFI HTTP-Boot-Servers</title>
 <info>
  <abstract>
   <para>
    In diesem Kapitel wird beschrieben, wie Sie einen UEFI HTTP-Boot-Server einrichten und konfigurieren.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>Ja</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="httpboot-intro">
  <title>Einführung</title>

  <para>
   HTTP-Boot kombiniert DHCP, DNS und HTTP, um das Booten und Bereitstellen von Systemen über das Netzwerk zu ermöglichen. HTTP-Boot kann als leistungsstarker Ersatz für PXE verwendet werden. HTTP-Boot ermöglicht das Booten eines Servers von einem URI über HTTP und damit die schnelle Übertragung großer Dateien, wie zum Beispiel des Linux-Kernels und des Root-Dateisystems, von Servern außerhalb Ihres lokalen Netzwerks.
  </para>

  <sect2 xml:id="httpboot-client">
   <title>Konfigurieren des Client-Rechners</title>
   <para>
    Die Aktivierung von HTTP-Boot auf einem physischen Client-Rechner hängt von Ihrer spezifischen Hardware ab. In der Dokumentation finden Sie weitere Informationen zur Aktivierung von HTTP-Boot auf Ihrem Rechner.
   </para>
  </sect2>

  <sect2 xml:id="httpboot-preparation">
   <title>Vorbereitung</title>
   <para>
    Bei der hier beschriebenen Einrichtung werden die IP-Teilnetze 192.168.111.0/24 (IPv4) und 2001:db8:f00f:cafe::/64 (IPv6) verwendet. Die Server-IP-Adressen lauten beispielsweise 192.168.111.1(IPv4) und 2001:db8:f00f:cafe::1/64 (IPv6). Passen Sie diese Werte an Ihre spezifische Einrichtung an.
   </para>
   <para>
    Installieren Sie die folgenden Pakete auf dem Rechner, den Sie als HTTP-Boot-Server verwenden möchten: <package>dhcp-server</package>,
    <package>apache2</package> (oder <package>lighttpd</package>), und
    <package>dnsmasq</package>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="httpboot-configure-server">
  <title>Konfigurieren des Servers</title>

  <sect2 xml:id="httpboot-dns-server">
   <title>DNS-Server</title>
   <para>
    Die Konfiguration des DNS-Servers ist zwar optional, ermöglicht aber die Vergabe eines benutzerfreundlichen Namens für den HTTP-Boot-Server. Fügen Sie zum Einrichten des DNS-Servers Folgendes zur Datei <filename>/etc/dnsmasq.conf</filename> hinzu:
   </para>
<screen>interface=eth0
addn-hosts=/etc/dnsmasq.d/hosts.conf</screen>
   <para>
    Weisen Sie den IP-Adressen in der Datei <filename>/etc/dnsmasq.d/hosts.conf</filename> einen Domänennamen zu:
   </para>
<screen>192.168.111.1 www.httpboot.local
2001:db8:f00f:cafe::1 www.httpboot.local</screen>
   <para>
    Starten Sie den DNS-Server.
   </para>
<screen>systemctl start dnsmasq</screen>
   <note>
    <title>Verwenden des <phrase role="productname">Schnittstellenmodul</phrase>-Bootloaders</title>
    <para>
     Aufgrund einer Änderung in UEFI 2.7 empfehlen wir die Verwendung eines Schnittstellenmodul-Bootloaders von SLE 15 oder neuer, um mögliche Fehler durch den zusätzlichen DNS-Knoten zu vermeiden.
    </para>
   </note>
   <sect3 xml:id="httpboot-dhcpv4-server">
    <title>Konfigurieren des LDAP-Servers</title>
    <para>
     Geben Sie die Netzwerkschnittstelle für die DHCP-Server in <filename>/etc/sysconfig/dhcpd</filename> an, bevor Sie sie einrichten:
    </para>
<screen>DHCPD_INTERFACE="eth0"
DHCPD6_INTERFACE="eth0"</screen>
    <para>
     Auf diese Weise stellen die DHCP-Server den Dienst nur auf der <literal>eth0</literal>-Schnittstelle  zur Verfügung.
    </para>
    <para>
     Fügen Sie die folgende Konfiguration zur Datei <filename>/etc/dhcpd.conf</filename> hinzu, um einen DHCPv4-Server sowohl für PXE-Boot als auch für HTTP-Boot einzurichten:
    </para>
<screen>option domain-name-servers 192.168.111.1;
option routers 192.168.111.1;
default-lease-time 14400;
ddns-update-style none;
  subnet 192.168.111.0 netmask 255.255.255.0 {
    range dynamic-bootp 192.168.111.100 192.168.111.120;
    default-lease-time 14400;
    max-lease-time 172800;
    class "pxeclients"{
      match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
      next-server 192.168.111.1;
      filename "/bootx64.efi";
    }
    class "httpclients" {
      match if substring (option vendor-class-identifier, 0, 10) = "HTTPClient";
      option vendor-class-identifier "HTTPClient";
      filename "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
    }
}</screen>
    <para>
     Beachten Sie, dass der DHCPv4-Server den <literal>HTTPClient</literal>-Parameter für die ID der Herstellerklasse verwenden muss, da der Client diesen zur Identifizierung eines HTTP-Boot-Angebots verwendet.
    </para>
    <para>
     Starten Sie den DHCP-Daemon:
    </para>
    <para>
     <literal>systemctl start dhcpd</literal>
    </para>
   </sect3>
   <sect3 xml:id="httpboot-dhcpv6-server">
    <title>Konfigurieren des DHCPv6-Servers</title>
    <para>
     Fügen Sie zum Einrichten des DHCPv6-Servers Folgendes zur Datei <filename>/etc/dhcpd6.conf</filename> hinzu:
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};
subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
        option dhcp6.name-servers 2001:db8:f00f:cafe::1;
        option dhcp6.vendor-class 0 10 "HTTPClient";
}</screen>
    <para>
     Diese Konfiguration definiert den Typ der Boot-URL, die Herstellerklasse und andere erforderliche Optionen. Ähnlich wie bei den DHCPv4-Einstellungen ist es erforderlich, die Boot-URL anzugeben, die eine IPv6-Adresse enthalten muss. Es ist auch notwendig, die Option der Herstellerklasse anzugeben. Bei DHCPv6 besteht sie aus der Unternehmensnummer und den Daten der Herstellerklasse (Länge und Inhalt). Da der HTTP-Boot-Treiber die Unternehmensnummer ignoriert, können Sie sie auf <literal>0</literal> festlegen. Der Inhalt der Herstellerklassedaten muss <literal>HTTPClient</literal> lauten, da ansonsten der Client das Angebot ignoriert.
    </para>
    <para>
     Für die ältere HTTP-Boot-Implementierung, die nicht <link xlink:href="https://tools.ietf.org/html/rfc3315">RFC 3315</link> folgt, ist eine andere Konfiguration erforderlich:
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = string;
        subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi;
	option dhcp6.name-servers 2001:db8:f00f:cafe::1;
	option dhcp6.vendor-class "HTTPClient";
}</screen>
    <para>
     Starten Sie den <literal>dhcpv6</literal>-Daemon.
    </para>
<screen>systemctl start dhcpd6</screen>
    <sect4 xml:id="httpboot-dhcpv6-pxe-server">
     <title>Einrichten des DHCPv6-Servers für PXE- und HTTP-Boot</title>
     <para>
      Mit der folgenden Konfiguration ist es möglich, den DHCPv6-Server sowohl für PXE-Boot als auch für HTTP-Boot zu konfigurieren:
     </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};

subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;

        class "PXEClient" {
	        match substring (option dhcp6.vendor-class, 6, 9);
	}

        subclass "PXEClient" "PXEClient" {
	        option dhcp6.bootfile-url "tftp://[2001:db8:f00f:cafe::1]/bootloader.efi";
	}

	class "HTTPClient"; {
	        match substring (option dhcp6.vendor-class, 6, 10);
	}

	subclass "HTTPClient" "HTTPClient" {
	        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
		option dhcp6.name-servers 2001:db8:f00f:cafe::1;
		option dhcp6.vendor-class 0 10 "HTTPClient";
	}
}</screen>
     <para>
      Es ist auch möglich, die Herstellerklasse einer bestimmten Architektur zuzuordnen, und zwar wie folgt:
     </para>
<screen>class "HTTPClient" {
        match substring (option dhcp6.vendor-class, 6, 21);
	}

subclass "HTTPClient" "HTTPClient":Arch:00016 {
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
	option dhcp6.name-servers 2001:db8:f00f:cafe::1;
	option dhcp6.vendor-class 0 10 "HTTPClient";
}</screen>
     <para>
      In diesem Beispiel bezieht sich <literal>HTTPClient:Arch:00016</literal> auf einen AMD64/Intel 64 HTTP-Boot-Client. Mit dieser Konfiguration kann der Server verschiedene Architekturen gleichzeitig bedienen.
     </para>
    </sect4>
    <sect4 xml:id="httpboot-firewall">
     <title>Konfigurieren der Firewall</title>
     <para>
      Falls DHCPv6-Pakete vom RP-Filter in der Firewall verworfen werden, überprüfen Sie das Protokoll. Sollte es den Eintrag <literal>rpfilter_DROP</literal> enthalten, deaktivieren Sie den Filter mit der folgenden Konfiguration in <filename>/etc/firewalld/firewalld.conf</filename>:
     </para>
     <para>
      <literal>IPv6_rpfilter=no</literal>
     </para>
    </sect4>
   </sect3>
   <sect3 xml:id="httpboot-tftp-server">
    <title>Bereitstellen eines TFTP-Servers (optional)</title>
    <para>
     Stellen Sie einen TFTP-Server bereit, wenn sowohl PXE-Boot als auch HTTP-Boot unterstützt werden soll. Installieren Sie die Pakete <package>tftp</package> und starten Sie den Dienst:
    </para>
<screen> systemctl start tftp.socket
systemctl start tftp.service</screen>
    <para>
     Außerdem muss ein spezielles
     <package>tftpboot-installation</package> -Paket installiert werden, um PXE-Boot zu verwenden. Führen Sie das Kommando <command>zypper se tftpboot</command> aus, um die verfügbaren <package>tftp-installation</package> -Pakete aufzulisten. Installieren Sie dann das Paket für die gewünschte Systemversion und Architektur, z. B.
     <package>tftpboot-installation-SLE-15-SP3-x86_64</package> Beispiel:
     <package os="sles;sled">tftpboot-installation-SLE-<replaceable>VERSION</replaceable>-x86_64</package>
     (ersetzen Sie<replaceable>VERSION</replaceable> durch die tatsächliche Version). Kopieren Sie den Inhalt des Verzeichnisses <filename os="sles;sled">SLE-<replaceable>VERSION</replaceable>-x86_64</filename> in das Root-Verzeichnis des TFTP-Servers:
    </para>

<screen os="slas;sled">cp -r /usr/share/tftpboot-installation/SLE-<replaceable>VERSION</replaceable>-x86_64 /srv/tftpboot</screen>
    <para>
     Weitere Informationen finden Sie unter <filename os="sles;sled">/usr/share/tftpboot-installation/SLE-<replaceable>VERSION</replaceable>-x86_64/README</filename>
    </para>
   </sect3>
   <sect3 xml:id="httpboot-http-server">
    <title>Einrichten des HTTP-Servers</title>
    <para>
     Kopieren Sie den gesamten Inhalt des ersten System-ISO-Image in das Verzeichnis <filename os="sles;sled">/srv/www/htdocs/sle/</filename>. Bearbeiten Sie dann die Datei <filename os="sles;sled">/srv/www/htdocs/sle/grub.cfg</filename>. Verwenden Sie das folgende Beispiel als Referenz:
    </para>
<screen>timeout=60
default=1

menuentry 'Installation IPv4' --class opensuse --class gnu-linux --class gnu --class os {
    set gfxpayload=keep
    echo 'Loading kernel ...'
    linuxefi /sle/boot/x86_64/loader/linux install=http://www.httpboot.local/sle
    echo 'Loading initial ramdisk ...'
    initrdefi /sle/boot/x86_64/loader/initrd
}

menuentry 'Installation IPv6' --class opensuse --class gnu-linux --class gnu --class os {
    set gfxpayload=keep
    echo 'Loading kernel ...'
    linuxefi /sle/boot/x86_64/loader/linux install=install=http://www.httpboot.local/sle ipv6only=1 ifcfg=*=dhcp6,DHCLIENT6_MODE=managed
    echo 'Loading initial ramdisk ...'
    initrdefi /sle/boot/x86_64/loader/initrd
}</screen>
    <sect4 xml:id="httpboot-lighttpd">
     <title>Konfigurieren von lighttpd</title>
     <para>
      Ändern Sie <filename>/etc/lighttpd/lighttpd.conf</filename> wie folgt, um die Unterstützung sowohl für IPv4 als auch für IPv6 in lighttpd zu aktivieren:
     </para>
<screen>##
## Use IPv6?
##
#server.use-ipv6 = "enable"
$SERVER["socket"] == "[::]:80" {  }</screen>
     <para>
      Starten Sie den <literal>lighttpd</literal>-Daemon:
     </para>
<screen>systemctl start lighttpd</screen>
    </sect4>
    <sect4 xml:id="httpboot-apache2">
     <title>Konfigurieren von apache2</title>
     <para>
      Für Apache ist keine zusätzliche Konfiguration erforderlich. Starten Sie den <literal>apache2</literal>-Daemon:
     </para>
<screen>systemctl start apache2</screen>
    </sect4>
   </sect3>
   <sect3 xml:id="httpboot-http-server-ssl-support">
    <title>Aktivieren der SSL-Unterstützung für den HTTP-Server (optional)</title>
    <para>
     Zur Verwendung des HTTPS-Boot müssen Sie ein vorhandenes Serverzertifikat in das <literal>DER</literal>-Format konvertieren und in die Firmware des Clients eintragen.
    </para>
    <para>
     Falls auf Ihrem Server bereits ein Zertifikat installiert ist, konvertieren Sie es mit folgendem Kommando in das <literal>DER</literal>-Format, damit es vom Client verwendet werden kann:
    </para>
<screen>openssl x509 -in <replaceable>CERTIFICATE</replaceable>.crt -outform der -out <replaceable>CERTIFICATE</replaceable>.der</screen>
    <sect4 xml:id="httpboot-enroll-certificate-physical-machine">
     <title>Tragen Sie das Serverzertifikat in der Client-Firmware ein</title>
     <para>
      Die genaue Vorgehensweise zum Eintragen des konvertierten Zertifikats hängt von der spezifischen Implementierung der Firmware des Clients ab. Bei bestimmter Hardware müssen Sie das Zertifikat manuell über die Firmware-Benutzeroberfläche eintragen. Verwenden Sie dazu ein externes Speichermedium, auf dem sich das Zertifikat befindet. Rechner mit Redfish-Unterstützung können das Zertifikat im Fernverfahren eintragen. Weitere Informationen zum Eintragen von Zertifikaten finden Sie in der Dokumentation zu Ihrer spezifischen Hardware.
     </para>
    </sect4>
    <sect4 xml:id="httpboot-ssl-lighttpd">
     <title>Aktivieren der SSL-Unterstützung in lighttpd</title>
     <para>
      Da lighttpd den privaten Schlüssel und das Zertifikat in derselben Datei benötigt, vereinheitlichen Sie sie mit folgendem Kommando:
     </para>
<screen>cat <replaceable>CERTIFICATE</replaceable>.crt server.key &gt; <replaceable>CERTIFICATE</replaceable>.pem</screen>
     <para>
      Kopieren Sie <filename><replaceable>CERTIFICATE</replaceable>.pem</filename> in das Verzeichnis <filename>/etc/ssl/private/</filename>.
     </para>
<screen>cp server-almighty.pem /etc/ssl/private/
chown -R root:lighttpd /etc/ssl/private/server-almighty.pem
chmod 640 /etc/ssl/private/server-almighty.pem</screen>
     <para>
      Vergewissern Sie sich, dass <literal>mod_openssl</literal> in der Datei <filename>/etc/lighttpd/modules.conf</filename> im Abschnitt <literal>server.modules</literal> aufgelistet ist, wie zum Beispiel:
     </para>
<screen>server.modules = (
  "mod_access",
  "mod_openssl",
)</screen>
     <para>
      Fügen Sie die folgenden Zeilen in der Datei <filename>/etc/lighttpd/lighttpd.conf</filename> zum Abschnitt <literal>SSL-Unterstützung</literal> hinzu:
     </para>
<screen># IPv4
$SERVER["socket"] == ":443" {
    ssl.engine                 = "enable"
    ssl.pemfile                = "/etc/ssl/private/server-almighty.pem"
}
# IPv6
$SERVER["socket"] == "[::]:443" {
    ssl.engine                 = "enable"
    ssl.pemfile                = "/etc/ssl/private/server-almighty.pem"
}</screen>
     <para>
      Starten Sie lighttpd neu, um die SSL-Unterstützung zu aktivieren:
     </para>
<screen>systemctl restart lighttpd</screen>
    </sect4>
    <sect4 xml:id="http-ssl-apache">
     <title>Aktivieren der SSL-Unterstützung in Apache</title>
     <para>
      Öffnen Sie die Datei <filename>/etc/sysconfig/apache2</filename> und fügen Sie das SSL-Flag wie folgt hinzu:
     </para>
<screen>APACHE_SERVER_FLAGS="SSL"</screen>
     <para>
      Vergewissern Sie sich, dass das <literal>ssl</literal>-Modul in <literal>APACHE_MODULES</literal> aufgeführt ist, wie zum Beispiel:
     </para>
     <para>
      Als Nächstes kopieren Sie den privaten Schlüssel und das Zertifikat in das Verzeichnis <filename>/etc/apache2/</filename>.
     </para>
<screen>cp server.key /etc/apache2/ssl.key/
chown wwwrun /etc/apache2/ssl.key/server.key
chmod 600 /etc/apache2/ssl.key/server.key
cp server.crt /etc/apache2/ssl.crt/</screen>
     <para>
      Erstellen Sie die ssl vhost-Konfiguration.
     </para>
<screen>cd /etc/apache2/vhosts.d
cp vhost-ssl.template vhost-ssl.conf</screen>
     <para>
      Bearbeiten Sie <filename>/etc/apache2/vhosts.d/vhost-ssl.conf</filename>, um den privaten Schlüssel und das Zertifikat zu ändern:
     </para>
<screen>SSLCertificateFile /etc/apache2/ssl.crt/server.crt
 SSLCertificateKeyFile /etc/apache2/ssl.key/server.key</screen>
     <para>
      Starten Sie Apache neu, um die SSL-Unterstützung zu aktivieren:
     </para>
<screen>systemctl restart apache2</screen>
    </sect4>
    <sect4 xml:id="httpboot-modify-dhcp-configuration">
     <title>Ändern der DHCP-Konfiguration</title>
     <para>
      Ersetzen Sie in <filename>dhcpd.conf/dhcpd6.conf</filename> das Präfix <literal>http://</literal> durch <literal>https://</literal> und starten Sie den DHCP-Server neu.
     </para>
<screen>systemctl restart dhcpd
systemctl restart dhcpd6</screen>
    </sect4>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="httpboot-client-boot">
  <title>Booten des Client über HTTP-Boot</title>

  <para>
   Wenn die Firmware bereits HTTP-Boot unterstützt, stecken Sie das Kabel ein und wählen Sie die richtige Boot-Option.
  </para>
 </sect1>
</chapter>
