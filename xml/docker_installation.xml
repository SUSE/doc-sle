<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.docker.installation" xml:lang="en">
        <title>&deng; Installation</title>
        <sect1 xml:id="Preparation">
        <title>General Preparation</title>
   <para>
    Prepare the host as described below. Before installing any
    Docker-related packages, you need to enable the container module:
   </para>
   <note>
        <title>Built-in Docker Orchestration Support</title>
        <para>
         Starting with &deng; 1.12, the container orchestration is now an
         integral part of the &deng;. Even though this feature is
         available in &slsa;SP1 and in &slsa;SP2, it is not supported and is
         only a technical preview. Use Kubernetes for Docker container
         orchestration, for details refer to the <link
         xlink:href="http://kubernetes.io/docs/getting-started-guides/kubeadm/">Kubernetes
         documentation</link>.
        </para>
   </note>
<!--taroth 2015-07-02: http://doccomments.provo.novell.com/comments/28724 -->
   <procedure>
    <title>Enabling the Container Module Using &yast;</title>
    <step>
     <para>
      Start &yast;, and select <menuchoice> <guimenu>Software</guimenu>
      <guimenu> Software Repositories</guimenu> </menuchoice>.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Add</guimenu> to open the add-on dialog.
     </para>
    </step>
    <step>
     <para>
      Select <guimenu>Extensions and Modules from Registration
      Server</guimenu> and click <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      From the list of available extensions and modules, select
      <guimenu>Container Module 12 x86_64</guimenu> and click
      <guimenu>Next</guimenu>.
     </para>
     <para>
      The containers module and its repositories will be added to your
      system.
     </para>
    </step>
    <step>
     <para> If you use &smtool;, update the list of repositories on the
            &smt; server. </para>
    </step>
   </procedure>
   <procedure>
    <title>Enabling the Container Module Using SUSEConnect</title>
    <step>
     <para>
      The Container Module can be added also with the following command:
     </para>
     <screen>$ sudo SUSEConnect -p sle-module-containers/12/x86_64 -r ''</screen>
     <note>
      <title>Note about the SUSEConnect syntax</title>
      <para>
       The <option>-r ''</option> flag is required to avoid a known
       limitation of SUSEConnect.
      </para>
     </note>
    </step>
   </procedure>
   <procedure>
    <title>Installing and Setting Up &deng;</title>
    <step>
     <para>
      Install the <systemitem>docker</systemitem> package:
     </para>
<screen>sudo zypper install docker</screen>
    </step>
    <step>
     <para>
      To automatically start the Docker service at boot time:
     </para>
<screen>sudo systemctl enable docker.service</screen>
     <para>
      This will automatically enable docker.socket in consequence.
     </para>
    </step>
    <step>
    <para>
    In case you will use Portus and an SSL secured registry, open the <filename>/etc/sysconfig/docker</filename> file. Search for the parameter
     <parameter>DOCKER_OPTS</parameter> and add
     <literal>--insecure-registry <replaceable>ADDRESS_OF_YOUR_REGISTRY</replaceable></literal>.
    </para>
    </step>
    <step>
    <para>
    In the production environment when using the SSL secured registry with Portus, add CA certificates to the directory <filename>/etc/docker/certs.d/&lt;registry address&gt;</filename> and copy the CA certificates to your system:
    </para>
    <screen>
    sudo cp CA /etc/pki/trust/anchors/ &amp;&amp; update-ca-certificates
    </screen>
    </step>
    <step>
     <para>
      Start the Docker service:
     </para>
<screen>sudo systemctl start docker.service</screen>
     <para>
      This will automatically start docker.socket in consequence.
     </para>
    </step>
   </procedure>
   <para>
    The Docker daemon listens on a local socket which is accessible only by
    the <systemitem class="username">root</systemitem> user and by the
    members of the <systemitem class="groupname">docker</systemitem> group.
    The <systemitem class="groupname">docker</systemitem> group is
    automatically created at package installation time. To allow a certain
    user to connect to the local Docker daemon, use the following command:
   </para>
<screen>sudo /usr/sbin/usermod -aG docker <replaceable>USERNAME</replaceable></screen>
   <para>
    The user can communicate with the local Docker daemon upon his next
    login.
   </para>
</sect1>
<sect1 xml:id="sec.docker.setup.net">
<title>Networking</title>
    <para>
      If you want your containers to be able to access the external
      network, you must enable the <option>ipv4 ip_forward</option>
      rule. This can be done using &yast; by browsing to <menuchoice>
      <guimenu>System</guimenu> <guimenu>Network Settings</guimenu>
      <guimenu>Routing</guimenu> </menuchoice> menu and ensuring
      <option>Enable IPv4 Forwarding</option> is checked.
    </para>
    <para> This option cannot be changed when networking is handled by
        the Network Manager. In such cases the
          <filename>/etc/sysconfig/SuSEfirewall2</filename> file needs
        to be edited manually to ensure the <option>FW_ROUTE</option>
        flag is set to <option>yes</option>:
    </para>
    <screen>FW_ROUTE="yes"</screen>

    <sect2 xml:id="sec.docker.setup.net.power">
      <title>Networking Limitations on Power Architecture</title>
      <para>
        Currently Docker networking has two limitations on the &power; architecture.
      </para>
      <para>
        The first limitation is about iptables. &slea;&nbsp;12 machines cannot
        run &deng; with the iptables support enabled. An update of the kernel
        is going to solve this issue. In the meantime the <package>docker</package>
        package for &power; has iptables support disabled via a dedicated
        directive inside of <filename>/etc/sysconfig/docker</filename>.
      </para>
      <para>
        As a result of this limitation &docker; containers will not have
        access to the outer network. A possible workaround is to share the same
        network namespace between the host and the containers.
        This however reduces the isolation of the containers.
      </para>
      <para>
        The network namespace of the host can be shared on a per-container basis
        by adding <option>--net=host</option> to the
        <option>docker run</option> command.
      </para>
      <note>
        <title>iptables support on &slea;&nbsp;12 SP1 </title>
        <para>
          &slea;&nbsp;12 SP1 hosts are not affected by this limitation but, given they
          use the same &slea;&nbsp;12 package, they will have iptables
          support disabled. This can be changed by removing the
          <option>-iptables=false</option> setting inside of
          <filename>/etc/sysconfig/docker</filename>.
        </para>
      </note>
      <para>
        The second limitation is about network isolation between the containers
        and the host. Currently it is not possible to prevent containers from
        probing or accessing arbitrary ports of each other.
      </para>
    </sect2>
</sect1>
</chapter>
