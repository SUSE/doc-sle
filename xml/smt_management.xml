<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="smt.management">
 <title>Managing Repositories with &yast; &smt; Server Management</title>
 <info/>
 <para>
  You can use the &yast; &smt; Server Management module for day-to-day
  management. &smt; Server Management enables and disables the mirroring of
  repositories, the staging flag for repositories, and performs the mirroring
  and staging.
 </para>
 <sect1 xml:id="smt.yast.staging.starting">
  <title>Starting &smt; Management Module</title>

  <para>
   &smt; Management is a &yast; module. To start the module, do one of the
   following:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Start &yast; and select <guimenu>Network Services</guimenu>, then
     <guimenu>&smt; Server Management</guimenu>.
    </para>
   </listitem>
   <listitem>
    <para>
     Enter <command>yast2 smt</command> in the command line as &rootuser;.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The &smt; Management application window opens with the
   <guimenu>Repositories</guimenu> tab active.
  </para>

  <figure>
   <title>List of Repositories</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="smt_repos.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="smt_repos.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="smt.yast.staging.viewing">
  <title>Viewing and Managing Repositories</title>

  <para>
   In the <guimenu>Repositories</guimenu> tab, you can see the list of all
   available package repositories for &smt;. For each repository, the list
   shows the repository's name, target product and architecture, mirroring and
   staging flag, date of last mirroring, and a short description. You can sort
   the list by clicking the relevant column's header, and scroll the list items
   using the scrollbars on the window's right side.
  </para>

  <sect2 xml:id="smt.yast.staging.viewing.filter">
   <title>Filtering Repositories</title>
   <para>
    You can also filter out groups of repositories with the <guimenu>Repository
    Filter</guimenu> text box. Enter the phrase that you want included in the
    repository name and click <guimenu>Filter</guimenu>. The list of
    repositories reduces depending on the given phrase. To cancel the filtering
    and display all repositories, erase the <guimenu>Repository
    Filter</guimenu> field and click <guimenu>Filter</guimenu>.
   </para>
   <figure>
    <title>Repository Filter</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="smt_repo_filter.png" width="70%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="smt_repo_filter.png" width="70%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>

  <sect2 xml:id="smt.yast.staging.viewing.mirror">
   <title>Mirroring Repositories</title>
   <para>
    Before you can start to offer package repositories, you need to create a
    local mirror of their packages. To do so, follow this procedure:
   </para>
   <procedure>
    <step>
     <para>
      From the list, select the line containing the name of the repository you
      want to mirror.
     </para>
    </step>
    <step>
     <para>
      Click the selected line to highlight it.
     </para>
    </step>
    <step>
     <para>
      Click the <guimenu>Toggle Mirroring</guimenu> button in the lower left
      part of the window. In the <guimenu>Mirroring</guimenu> column of the
      selected repository, a check mark appears. If the repository was already
      selected for mirroring before, the check mark will disappear, and the
      repository will not be mirrored anymore.
     </para>
    </step>
    <step>
     <para>
      Hit the <guimenu>Mirror Now</guimenu> button and the repository will be
      mirrored immediately.
     </para>
    </step>
    <step>
     <para>
      A pop-up window appears with the information about mirroring status and
      result.
     </para>
    </step>
    <step>
     <para>
      Click OK and the original window with the list of repositories will be
      refreshed.
     </para>
    </step>
   </procedure>
   <figure>
    <title>Status of Mirroring Process</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="smt_mirroring-done.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="smt_mirroring-done.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>
 </sect1>
 <sect1 xml:id="smt.yast.staging.stage">
  <title>Staging Repositories</title>

  <para>
   After the mirroring is finished, you can stage the mirrored repositories. In
   &smt;, <emphasis>staging</emphasis> is a process where you create either
   testing or production repositories based on the mirrored ones. The testing
   repository helps you examine the repository and its packages before you make
   them available in a production environment. To make repositories available
   for staging, do the following:
  </para>

  <procedure>
   <step>
    <para>
     From the repository list, select the line containing the name of the
     repository you want to manage.
    </para>
   </step>
   <step>
    <para>
     Click the selected line, highlighting it.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Toggle Staging</guimenu> button in the lower left part
     of the window next to the <guimenu>Toggle Mirroring</guimenu> button. In
     the <guimenu>Staging</guimenu> column of the selected repository, a check
     mark appears. If the repository was already selected for staging before,
     the check mark will disappear, and the repository will not be available
     for staging.
    </para>
   </step>
   <step>
    <para>
     Repeat steps 1 to 3 for all directories whose staging flag you want to
     change.
    </para>
   </step>
  </procedure>

  <important>
   <title>Toggle Staging Button Not Active</title>
   <para>
    You can only stage the repositories that were previously selected for
    mirroring. If it is not the case, the <guimenu>Toggle Staging</guimenu>
    button will not be active.
   </para>
  </important>

  <para>
   Once you mirror the repositories and make them available for staging, click
   the <guimenu>Staging</guimenu> tab. In the upper left part of the window,
   there is a <guimenu>Repository Name</guimenu> drop-down box of all
   repositories which are available for staging. There the repository names
   have the name of the staging group attached in parentheses. Select the one
   you want to stage and a list of packages of this repository appears below.
   Information about the patch name, its version and category, testing and
   production flags, and a short summary is available for each patch.
  </para>

  <para>
   Next to the <guimenu>Repository Name</guimenu> drop-down box, there is a
   <guimenu>Patch Category</guimenu> filter. It helps you to list only the
   patches that belong to one of the predefined categories.
  </para>

  <para>
   If the selected repository allows for patch filtering, you can toggle the
   status flag for individual patches. Do so by clicking the <guimenu>Toggle
   Patch Status</guimenu> button in the lower left part of the window.
  </para>

  <para>
   Before creating a repository of packages that are available in the
   <emphasis>production</emphasis> environment, you need to create and test the
   <emphasis>testing</emphasis> repository. Click the <guimenu>Create
   Snapshot</guimenu> drop-down box and select the <guimenu>From Full Mirror to
   Testing</guimenu> menu item. A small pop-up window appears informing you
   about the staging process. After the testing repository snapshot is created,
   the relevant check marks in the <guimenu>Testing</guimenu> column will be
   displayed.
  </para>

  <figure>
   <title>Testing Snapshot Created</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="smt_staging1.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="smt_staging1.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <important>
   <title>Creating a Production Snapshot</title>
   <para>
    After you enable <emphasis>staging</emphasis> for an update repository, you
    need to create its <emphasis>production</emphasis> snapshot to make it
    available to the clients. Otherwise the clients will not be able to find
    the update repository.
   </para>
  </important>

  <para>
   After you have examined the newly created testing repository, you can safely
   create a production one. Click the <guimenu>Create Snapshot</guimenu>
   drop-down box and select the <guimenu>From Testing to Production</guimenu>
   menu item. A small pop-up window appears informing you about linking the
   testing repository to the production one. After the production snapshot is
   created, the relevant check marks in the <guimenu>Production</guimenu>
   column will be displayed. Also, a green check mark appears in the
   <guimenu>Repository Name</guimenu> drop-down box.
  </para>
 </sect1>
 <sect1 xml:id="smt.yast.staging.client">
  <title>Jobs and Client Status Monitoring</title>

  <para>
   For each client that is registered against the &smt; server, &smt; creates a
   job queue. To make use of the job queue, you need to install the
   <systemitem>smt-client</systemitem> package on the client. During the
   installation of the <systemitem>smt-client</systemitem> package, a cron job
   is created that runs the client executable
   <command>/usr/sbin/smt-agent</command> every three hours by default. The
   agent then asks the server if it has any jobs in the queue belonging to this
   client, and executes these jobs. When there are no more jobs in the queue,
   the agent terminates completely. It is important to understand that jobs are
   not pushed directly to the clients when they get created, and are not
   executed until the client asks for them in the preconfigured intervals of
   the cron job. Therefore, a delay of several hours may occur from the
   creation time of a job on the server until the job is executed on the
   client.
  </para>

  <para>
   Every job can have a parent job, which means that the child job only runs
   after the parent job has successfully finished. It is also possible to configure
   advanced timing and recurrence/persistence of jobs. You can find more
   details about &smt; jobs in <xref linkend="smt.scripts.job"/>.
  </para>

  <para>
   When creating jobs, you need to specify the GUID of the target clients using
   the <option>-g <replaceable>GUID</replaceable></option> parameter. Although
   the <option>-g</option> parameter can be specified multiple times on a
   single command, there is no "wild card" functionality to assign a job to all
   clients.
  </para>

  <para>
   Currently the following types of jobs are relevant:
  </para>

  <variablelist>
   <varlistentry>
    <term>Execute</term>
    <listitem>
     <para>
      Run commands on the client.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Eject</term>
    <listitem>
     <para>
      Open, close, or toggle the CD tray of the client.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Patchstatus</term>
    <listitem>
     <para>
      Report the status of installed patches.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Reboot</term>
    <listitem>
     <para>
      Reboot the client.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Softwarepush</term>
    <listitem>
     <para>
      Install packages.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Update</term>
    <listitem>
     <para>
      Install available updates.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>Default Job Types</title>
   <para>
    By default only 'softwarepush', 'patchstatus', and 'update' jobs are
    allowed. To allow more types of jobs, append the job type to the
    <literal>ALLOWED_AGENTS</literal> list in
    <filename>/etc/sysconfig/smt-client</filename>.
   </para>
  </tip>

  <para>
   All clients that register against the &smt; server automatically get a
   persistent 'patchstatus' job added to their job queue. This is also true for
   clients with no <systemitem>smt-clients</systemitem> package (&sle; 10 and
   older, or non-SUSE based distributions). These clients will appear with a
   patchstatus of "Unknown" in the client lists. The 'patchstatus' jobs for
   such clients are not required, and clients can safely be deleted to clean
   up the output of <command>smt-job</command>. Remember that if you
   update a machine to &sle; 11 or later, you will need to create the
   'patchstatus' job manually.
  </para>

  <para>
   Whenever the client runs a 'patchstatus' job, it compares the currently
   installed updates with what is available in the repositories on the &smt;
   server. The job then reports back the number of missing patches that need to
   be installed in each of the four categories:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Security
    </para>
   </listitem>
   <listitem>
    <para>
     Package Manager
    </para>
   </listitem>
   <listitem>
    <para>
     Recommended
    </para>
   </listitem>
   <listitem>
    <para>
     Optional
    </para>
   </listitem>
  </itemizedlist>

  <tip>
   <title>The <option>--agreelicense</option> Option</title>
   <para>
    To install a package and its dependencies, the job type 'softwarepush' is
    used. When creating this type of job, it is handy to always add the
    <option>--agreelicense</option> option. The reason for this is that if a
    package displays a license agreement and expects it to be accepted, the job
    will skip the package if <option>--agreelicense</option> was not
    specified. The <command>smt-client</command> forwards the installation
    process to <command>zypper</command>, which does not consider a failed
    acceptance of a license agreement to be an error. This results in the job
    being completed successfully, even though the package may not be installed.
   </para>
  </tip>

  <sect2 xml:id="smt.yast.staging.client.yast">
   <title>Checking the Client Status with &yast;</title>
   <para>
    The <guimenu>Clients Status</guimenu> tab of the <guimenu>&smt;
    Management</guimenu> window contains the status information about all the
    clients that use the repositories on your &smt; server. It is divided into
    two main parts: the list of the clients and the detailed information.
   </para>
   <para>
    You can read the client's host name, the date and time of the last network
    contact with the &smt; server, and its update status. The update status can
    be one of the following:
   </para>
   <variablelist>
    <varlistentry>
     <term>Up-to-date</term>
     <listitem>
      <para>
       The client packages are updated to their last version available in the
       production repository.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Updates available</term>
     <listitem>
      <para>
       This status means that there are updates available for the client that
       are either <literal>optional</literal> or
       <literal>recommended</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Critical</term>
     <listitem>
      <para>
       Either <literal>security</literal> patches or <literal>package
       manager</literal> patches are available for the client.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    In the lower part of the window, more detailed information about the
    selected client is available. It usually consists of extended status
    information and detailed information about the number and types of
    available updates.
   </para>
   <figure>
    <title>Clients Status</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="smt_clients_status.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="smt_clients_status.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    The date and time in the <guimenu>Last Contact</guimenu> column is the real
    last time contact of the server, even if it only ran the regular
    registration update script. This date is not the date of the last
    'patchstatus' report. The command line tool <command>smt-client</command>
    prints the correct date and calls it <literal>Patch Status Date</literal>
    (<command>smt-client -v</command> prints both dates, the 'patchstatus' date
    and the last contact of the client system).
   </para>
   <note>
    <title>Hidden Patches</title>
    <para>
     Package manager patches can "hide" other patches, since they may be a
     prerequisite to other patches in such a way that these do not show up as
     available until the package manager patch(es) have been installed.
    </para>
   </note>
  </sect2>
 </sect1>
</chapter>
