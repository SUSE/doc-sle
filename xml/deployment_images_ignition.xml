<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha-images-ignition"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Configuration using Ignition</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  <abstract>
   <para>
    This chapter provides details about the Ignition provisioning tool that is
    used to set up a machine. Here you will learn how to provide required
    configuration files used for the machine definition.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="sec-about-ignition">
  <title>About Ignition</title>

  <para>
   Ignition is a provisioning tool that enables you to configure a system on the
   first boot according to your specification . When the system is booted for
   the first time, Ignition is loaded as a part of the initramfs and
   searches for a configuration file within a specific directory (on a USB
   flash disk, or you can provide a URL). All changes are performed before the
   kernel switches from the temporary file system to the real root file system
   (before the <literal>switch_root</literal> command is issued).
  </para>

  <para>
   Ignition uses a configuration file in JSON format. The file is called
   <filename>config.ign</filename>. For the purpose of better human readability
   you can create a YAML file and convert this file to JSON. For details, refer
   to <xref linkend="sec-converting-config"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec-ignition-configuration">
  <title><literal>config.ign</literal></title>

  <para>
   When installing on bare metal, the configuration file
   <filename>config.ign</filename> must reside in the
   <filename>ignition</filename> subdirectory on the configuration media. The
   directory structure must look as follows:
  </para>

<screen>
 &lt;root directory&gt;
 	- ignition
 		- config.ign
</screen>
<!-- This is a *very* strange way to illustrate a directory layout and I do not
 like it at all. I suggest revising it.
 - lproven@suse.cz 2021-10-13 -->
  <para>
   In case you intend to configure a QEMU/KVM virtual machine, provide the path
   to the <filename>config.ign</filename> as an attribute of the
   <command>qemu</command> command. For example:
  </para>

<screen>
 -fw_cfg name=opt/com.coreos/config,file=<replaceable>PATH TO config.ign</replaceable>
 </screen>

  <para>
   The <filename>config.ign</filename> file contains various data
   types: Objects, strings, integers, booleans, and lists of objects. For a
   complete specification, refer to
   <link xlink:href="https://coreos.github.io/ignition/configuration-v3_1/">Ignition
   specification v3.1.0</link>.
  </para>

  <para>
   The <literal>version</literal> attribute is mandatory and in case of &slema;
   its value must be set to <literal>3.1.0</literal>. Otherwise, Ignition will
   fail.
  </para>

  <para>
   The minimum configuration must include a password for &rootuser;. Make sure
   to configure a secure password. In case you use a randomly generated
   password, use at least 10 characters. If you create your password manually,
   use even more than 10 characters and combine upper case letters, lower case
   letters, and numbers.
  </para>

  <sect2 xml:id="sec-converting-config">
   <title>Converting YAML <literal>fcc</literal> file to JSON <literal>ign</literal></title>
   <para>
    To make the Ignition configuration more human-readable, you can use
    two-phase configuration. At first, you prepare your configuration in YAML as
    a <literal>fcc</literal> file, and then you transpile this configuration to
    JSON. The transpilation can be done by the <command>butane</command> tool.
   </para>
   <para>
    During the transpilation process, <command>butane</command> also verifies
    the syntax of the YAML file to catch potential errors in the structure. For
    the latest version of the <command>butane</command> tool, add a repository:
   </para>
<screen>&prompt.sudo; zypper ar -f https://download.opensuse.org/repositories/devel:/kubic:/ignition/<replaceable>distribution</replaceable>/ devel_kubic_ignition</screen>
   <para>
    where <replaceable>distribution</replaceable> is one of the following
    (depending on your distribution):
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>openSUSE_Tumbleweed</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>openSUSE_Leap_$release_number</literal>
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>SLE_15</literal>
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Now you can install the <command>butane</command> tool:
   </para>
<screen>
 &prompt.sudo; zypper in ignition-config-transpiler
 </screen>
   <para>
    Now you can invoke <command>butane</command> by running:
   </para>
<screen>
 &prompt.user; butane -p -o config.ign config.fcc
 </screen>
   <para>
    where:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <filename>config.fcc</filename> is a path to the YAML configuration file
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>config.ign</filename> is a path to the output JSON
      configuration file
     </para>
    </listitem>
    <listitem>
     <para>
      the <option>-p</option> command option adds lines and breaks to the
      output file and thus make it more readable.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-ignition-examples">
   <title>YAML Configuration examples</title>
   <para>
    This section will provide you with some common examples of the Ignition
    configuration in the YAML format.
   </para>
   <note>
    <title>The <literal>version</literal> attribute is mandatory</title>
    <para>
     Bear in mind that each <filename>config.fcc</filename> must state
     version&mdash;1.1.0 in case of &slema;&mdash;that is then converted to the
     Ignition specification version (3.1.0).
    </para>
   </note>
   <sect3 xml:id="sec-ignition-storage">
    <title>Storage configuration</title>
    <para>
     The <literal>storage</literal> attribute is used to configure partitions,
     RAID, define file systems, create files, etc. To define partitions, use the
     <literal>disks</literal> attribute. The <literal>filesystem</literal> is
     used to format partitions and define the mount points for particular
     partitions. The <literal>files</literal> attribute can be used to create
     files in the file system. Each of these attributes is described in the
     following sections.
    </para>
    <sect4 xml:id="sec-storage-disks">
     <title>The <literal>disks</literal> attribute</title>
     <para>
      The <literal>disks</literal> attributes is a list of devices that enables
      you to define partitions on these devices. The <literal>disks</literal>
      attribute must contain at least one <literal>device</literal>; other
      attributes are optional. The following example will use a single virtual
      device and divide the disk into four partitions.
     </para>
<screen>
variant: fcos
version: 1.0.0
storage:
  disks:
    - device:	"/dev/vda"
      wipeTable: true
      partitions: 
      	- label: root
      	  number: 1
      	  typeGuid: 4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709
      	- label: boot
      	  number: 2
      	  typeGuid: BC13C2FF-59E6-4262-A352-B275FD6F7172
        - label: swap
      	  number: 3
      	  typeGuid: 0657FD6D-A4AB-43C4-84E5-0933C84B4F4F
      	- label: home
      	  number: 4
      	  typeGuid: 933AC7E1-2EB4-4F13-B844-0E14E2AEF915
 </screen>
    </sect4>
    <sect4 xml:id="sec-storage-raid">
     <title>The <literal>raid</literal> attribute</title>
     <para>
      The <literal>raid</literal> is a list of RAID arrays. The following
      attributes of <literal>raid</literal> are mandatory:
     </para>
     <variablelist>
      <varlistentry>
       <term>level</term>
       <listitem>
        <para>
         a level of the particular RAID array (<literal>linear</literal>,
         <literal>raid0</literal>, <literal>raid1</literal>,
         <literal>raid2</literal>, <literal>raid3</literal>,
         <literal>raid4</literal>, <literal>raid5</literal>, or
         <literal>raid6</literal>).
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>devices</term>
       <listitem>
        <para>
         a list of devices in the array, referenced by their absolute paths.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>name</term>
       <listitem>
        <para>
         a name that will be used for the <literal>md</literal> device.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
<screen>
variant: fcos
version: 1.0.0
storage:
	- raid: data
	  name: system
	  level: raid1
	  devices: "/dev/sda", "/dev/sdb"
	  	
 </screen>
    </sect4>
    <sect4 xml:id="sec-storage-filesystem">
     <title>The <literal>filesystem</literal> attribute</title>
     <para>
      <literal>filesystem</literal> must contain the following attributes:
     </para>
     <variablelist>
      <varlistentry>
       <term>device</term>
       <listitem>
        <para>
         is the absolute path to the device, typically
         <literal>/dev/sda</literal> in case of a physical disk.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>format</term>
       <listitem>
        <para>
         the file system format (<literal>btrfs</literal>,
         <literal>ext4</literal>, <literal>xfs</literal>,
         <literal>vfat</literal> or <literal>swap</literal>)
        </para>
        <note>
         <para>
          In case of &slema;, the <literal>root</literal> file system must be
          formatted as Btrfs.
         </para>
        </note>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      The following example demonstrates using the
      <literal>filesystem</literal> attribute. The <literal>/dev/sda1</literal>
      partition will be formatted as Btrfs and mounted on the
      <filename>/opt</filename> directory. The partition table will not be
      erased.
     </para>
<screen>
variant: fcos
version: 1.0.0
storage:
  filesystems:
    - path: /opt
      device: "/dev/sda1"
      format: btrfs
      wipe_filesystem: false
 </screen>
    </sect4>
    <sect4 xml:id="sec-storage-files">
     <title>The <literal>files</literal></title>
     <para>
      You can use the <literal>files</literal> setting to create any files on
      your machine. Bear in mind that if you want to create files outside the
      <xref linkend="sec-default-partitioning" xrefstyle="template:default mounted directories"/>,
      you need to define the directories by using the
      <literal>filesystem</literal> attibute.
     </para>
     <para>
      In the following example, a host name is specified using the
      <literal>files</literal> attribute. The
      <filename>/etc/hostname</filename> will be created, containing the text
      <literal>slemicro-1</literal>:
     </para>
<screen>
variant: fcos
version: 1.0.0
storage:
  files:
    - path: /etc/hostname
      mode: 0644
      overwrite: true
      contents:
        inline: "slemicro-1"
 </screen>
    </sect4>
    <sect4 xml:id="sec-storage-directories">
     <title>The <literal>directories</literal> attribute</title>
     <para>
      The <literal>directories</literal> attributes is a list of directories
      that will be created in the file system. The
      <literal>directories</literal> attribute must contain at least one
      <literal>path</literal> attribute.
     </para>
<screen>
 variant: fcos
version: 1.0.0
storage:
  directories:
  	- path: /home/tux/
  	  user: 
  	   - name: tux  	
 </screen>
    </sect4>
   </sect3>
   <sect3 xml:id="sec-ignition-users">
    <title>Users administration</title>
    <para>
     For adding users, the <literal>passwd</literal> attribute is used. You need
     to create &rootuser; and set the &rootuser;'s password. You need to hash
     the &rootuser; password, for example by using the
     <command>openssl</command>:
    </para>
<screen>
 openssl passwd -6
 </screen>
    <para>
     The command creates a hash of the password you chose. Use this hash as the
     value of the <literal>password_hash</literal> attribute. In our example
     <emphasis>password4root</emphasis> has been used.
    </para>
<screen>
 variant: fcos
version: 1.1.0
 passwd:
  users:
   - name: root
     password_hash: "$6$PfKm6Fv5WbqOvZ0C$g4kByYM.D2A5GQsgluuqDNL87oeXiHqctr6INNNmF75WPGgkLn9O9uVx4iGe3UdbbhaHbTJ1vpZymKWuDIrWI1"
     ssh_authorized_keys:
       - ssh-rsa long...key user@host
 </screen>
    <para>
     The <literal>users</literal> attribute must contain at least one
     <literal>name</literal> attribute. <literal>ssh_authorized_keys</literal>
     is a list of SSH keys for the user.
    </para>
   </sect3>
   <sect3 xml:id="sec-ignition-systemd">
    <title>Enabling <literal>systemd</literal> services</title>
    <para>
     You can enable systemd services by specifying them in the
     <literal>systemd</literal> attribute.
    </para>
<screen>
variant: fcos
version: 1.0.0
	systemd
	 units:
	  - name: sshd.service
      	    enabled: true
 </screen>
    <para>
     The <literal>name</literal> must be an exact name of the service to be
     enabled (including the suffix).
    </para>
   </sect3>
  </sect2>
 </sect1>
</chapter>
