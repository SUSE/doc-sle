<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="libvirt_storage.xml" version="5.0" xml:id="cha-libvirt-storage">
  <title>高级存储主题</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>
    本章介绍有关从 VM 主机服务器的角度操作存储设备的高级主题。
  </para>
  <sect1 xml:id="sec-libvirt-storage-locking">
    <title>使用 <systemitem class="daemon">virtlockd</systemitem> 锁定磁盘文件和块设备</title>

    <para>
      锁定块设备和磁盘文件可以防止从不同的 VM Guest 并发向这些资源写入数据。它可以防范启动同一个 VM Guest 两次，或者将同一个磁盘添加到两个不同的虚拟机。这样就会减少由于配置错误导致虚拟机磁盘映像损坏的风险。
    </para>

    <para>
      锁定操作由名为 <systemitem class="daemon">virtlockd</systemitem> 的守护程序控制。由于此守护程序独立于 <systemitem class="daemon">libvirtd</systemitem> 守护程序运行，在 <systemitem class="daemon">libvirtd</systemitem> 崩溃或重启动后，锁将会保留。甚至在更新 <systemitem class="daemon">virtlockd</systemitem> 本身期间，锁也仍会保留，因为此守护程序能够自行重新执行。这可以确保当 <systemitem class="daemon">virtlockd</systemitem> 更新后，<emphasis>无需</emphasis>重启动 VM Guest。KVM、QEMU 和 Xen 支持 <systemitem class="daemon">virtlockd</systemitem>。
    </para>

    <sect2 xml:id="sec-libvirt-storage-locking-enable">
      <title>启用锁定</title>
      <para>
        <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上默认未启用锁定虚拟磁盘的功能。要启用锁定并在系统重引导时自动启动锁定，请执行以下步骤：
      </para>
      <procedure>
        <step>
          <para>
            编辑 <filename>/etc/libvirt/qemu.conf</filename> 并设置
          </para>
<screen>lock_manager = "lockd"</screen>
        </step>
        <step>
          <para>
            使用以下命令启动 <systemitem class="daemon">virtlockd</systemitem> 守护程序：
          </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start virtlockd</screen>
        </step>
        <step>
          <para>
            使用以下命令重启动 <systemitem class="daemon">libvirtd</systemitem> 守护程序：
          </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl restart libvirtd</screen>
        </step>
        <step>
          <para>
            确保引导系统时自动启动 <systemitem class="daemon">virtlockd</systemitem>：
          </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl enable virtlockd</screen>
        </step>
      </procedure>
    </sect2>

    <sect2 xml:id="sec-libvirt-storage-locking-configure">
      <title>配置锁定</title>
      <para>
        <systemitem class="daemon">virtlockd</systemitem> 默认配置为自动锁定为 VM Guest 配置的所有磁盘。默认设置使用<quote>直接</quote>锁空间，在这种情况下，系统会根据与 VM Guest &lt;disk&gt; 设备关联的实际文件路径获取锁。例如，如果 VM Guest 包含以下 &lt;disk&gt; 设备，将直接针对 <filename>/var/lib/libvirt/images/my-server/disk0.raw</filename> 调用 <literal>flock(2)</literal>：
      </para>
<screen>&lt;disk type='file' device='disk'&gt;
 &lt;driver name='qemu' type='raw'/&gt;
 &lt;source file='/var/lib/libvirt/images/my-server/disk0.raw'/&gt;
 &lt;target dev='vda' bus='virtio'/&gt;
&lt;/disk&gt;</screen>
      <para>
        可以通过编辑 <filename>/etc/libvirt/qemu-lockd.conf</filename> 文件来更改 <systemitem class="daemon">virtlockd</systemitem> 配置。此文件还包含详细注释及其他信息。确保通过重新装载 <systemitem class="daemon">virtlockd</systemitem> 来激活配置更改：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl reload virtlockd</screen>
      
      <sect3 xml:id="sec-libvirt-storage-locking-configure-shared-fs">
        <title>启用间接锁空间</title>
        <para>
          <systemitem class="daemon">virtlockd</systemitem> 的默认配置使用<quote>直接</quote>锁空间。这意味着，系统会根据与 &lt;disk&gt; 设备关联的实际文件路径来获取锁。
        </para>
        <para>
          如果磁盘文件路径不可供所有主机访问，可将 <systemitem class="daemon">virtlockd</systemitem> 配置为允许<quote>间接</quote>锁空间。这意味着，系统会使用磁盘映像路径的哈希在间接锁空间目录中创建一个文件。然后，将在这些哈希文件而不是实际的磁盘文件路径中存放锁。如果包含磁盘文件的文件系统不支持 <literal>fcntl()</literal> 锁，也可以使用间接锁空间。使用 <option>file_lockspace_dir</option> 设置指定间接锁空间：
        </para>
<screen>file_lockspace_dir = "<replaceable>/MY_LOCKSPACE_DIRECTORY</replaceable>"</screen>
      </sect3>
      <sect3 xml:id="sec-libvirt-storage-locking-configure-lvm-iscsi">
        <title>在 LVM 或 iSCSI 卷上启用锁定</title>
        <para>
          如果您要锁定由多个主机共享的 LVM 或 iSCSI 卷上的虚拟磁盘，则需要按 UUID 而不是路径（默认使用路径）执行锁定。此外，需将锁空间目录放在可供共享该卷的所有主机访问的共享文件系统上。为 LVM 和/或 iSCSI 设置以下选项：
        </para>
<screen>lvm_lockspace_dir = "<replaceable>/MY_LOCKSPACE_DIRECTORY</replaceable>"
iscsi_lockspace_dir = "<replaceable>/MY_LOCKSPACE_DIRECTORY</replaceable>"</screen>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-libvirt-storage-resize">
    <title>联机调整 Guest 块设备的大小</title>

    <para>
      有时，您需要更改（扩展或收缩）Guest 系统使用的块设备的大小。例如，当最初分配的磁盘空间不再足够时，便需要增大空间大小。如果 Guest 磁盘驻留在<emphasis>逻辑卷</emphasis>中，您可以在 Guest 系统正在运行时调整该磁盘的大小。与脱机调整磁盘大小相比（请参见 <xref linkend="sec-guestfs-tools"/> 软件包中的 <command>virt-resize</command> 命令），这是一项巨大的优势，因为 Guest 提供的服务在调整大小期间不会受到干扰。要调整 VM Guest 磁盘的大小，请执行以下步骤：
    </para>

    <procedure>
      <title>联机调整 Guest 磁盘的大小</title>
      <step>
        <para>
          在 Guest 系统内部，检查磁盘（例如 <filename>/dev/vda</filename>）的当前大小。
        </para>
<screen><prompt role="root"># </prompt>fdisk -l /dev/vda
Disk /dev/sda: 160.0 GB, 160041885696 bytes, 312581808 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes</screen>
      </step>
      <step>
        <para>
          在主机上，将容纳 Guest 磁盘 <filename>/dev/vda</filename> 的逻辑卷调整到所需大小，例如 200 GB。
        </para>
<screen><prompt role="root"># </prompt>lvresize -L 200G /dev/mapper/vg00-home
Extending logical volume home to 200 GiB
Logical volume home successfully resized</screen>
      </step>
      <step>
        <para>
          在主机上，调整与 Guest 磁盘 <filename>/dev/mapper/vg00-home</filename> 相关的块设备的大小。可以使用 <command>virsh
          list</command> 查找 <replaceable>DOMAIN_ID</replaceable>。
        </para>
<screen><prompt role="root"># </prompt>virsh blockresize  --path /dev/vg00/home --size 200G <replaceable>DOMAIN_ID</replaceable>
Block device '/dev/vg00/home' is resized</screen>
      </step>
      <step>
        <para>
          检查 Guest 是否接受新磁盘大小。
        </para>
<screen><prompt role="root"># </prompt>fdisk -l /dev/vda
Disk /dev/sda: 200.0 GB, 200052357120 bytes, 390727260 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes</screen>
      </step>
    </procedure>
  </sect1>
  <sect1 xml:id="sec-libvirt-storage-share">
    <title>在主机与 Guest 之间共享目录（文件系统直通）</title>

    <para>
      libvirt 允许使用 QEMU 的文件系统直通（也称为 VirtFS）功能在主机与 Guest 之间共享目录。此类目录还可由多个 VM Guest 同时访问，因此可用于在 VM Guest 之间交换文件。
    </para>

    <note>
      <title>Windows Guest 和文件系统直通</title>
      <para>
        无法通过文件系统直通在 VM 主机服务器与 Windows Guest 之间共享目录，因为 Windows 缺少挂载共享目录所需的驱动程序。
      </para>
    </note>

    <para>
      要使共享目录可在 VM Guest 上使用，请执行以下操作：
    </para>

    <procedure>
      <step>
        <para>
          在虚拟机管理器中打开 Guest 的控制台，然后从菜单中选择<menuchoice><guimenu>视图</guimenu>
          <guimenu>细节</guimenu></menuchoice>，或者在工具栏中单击<guimenu>显示虚拟硬件细节</guimenu>。选择<menuchoice> <guimenu>添加硬件</guimenu>
          <guimenu>文件系统</guimenu> </menuchoice>打开<guimenu>文件系统直通</guimenu>对话框。
        </para>
      </step>
      <step>
        <para>
          可以在<guimenu>驱动程序</guimenu>中选择<guimenu>句柄</guimenu>或<guimenu>路径</guimenu>基本驱动程序。默认设置为<guimenu>路径</guimenu>。可以在<guimenu>模式</guimenu>中选择安全模型，这会影响在主机上设置文件权限的方式。有三个选项可用：
        </para>
        <variablelist>
          <varlistentry>
            <term><guimenu>直通</guimenu>（默认设置）</term>
            <listitem>
              <para>
                使用客户端用户的身份凭证直接在文件系统上创建文件。这与 NFSv3 使用的设置相似。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><guimenu>Squash</guimenu></term>
            <listitem>
              <para>
                与<guimenu>直通</guimenu>相同，但会忽略 <command>chown</command> 等特权操作的失败事件。当以 <systemitem class="username">root</systemitem> 特权之外的身份运行 KVM 时，需要选择此选项。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><guimenu>已映射</guimenu></term>
            <listitem>
              <para>
                使用文件服务器的身份凭证 (<literal>qemu.qemu</literal>) 创建文件。用户身份凭证和客户端用户的身份凭证保存在扩展属性中。当主机和 Guest 域应该隔离时，建议使用此模型。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </step>
      <step>
        <para>
          使用<guimenu>源路径</guimenu>指定 VM 主机服务器上的目录的路径。在<guimenu>目标路径</guimenu>中输入一个字符串，作为挂载共享目录时使用的标记。此字段中的字符串仅作为标记，不是 VM Guest 上的路径。
        </para>
      </step>
      <step>
        <para>
          <guimenu>应用</guimenu>设置。如果 VM Guest 当前正在运行，需要将其关闭才能应用新设置（重引导 Guest 是不够的）。
        </para>
      </step>
      <step>
        <para>
          引导 VM Guest。要挂载共享目录，请输入以下命令：
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> mount -t 9p -o trans=virtio,version=9p2000.L,rw <replaceable>TAG</replaceable> /<replaceable>MOUNT_POINT</replaceable></screen>
        <para>
          要使共享目录永久可用，请将下面一行添加到 <filename>/etc/fstab</filename> 文件中：
        </para>
<screen><replaceable>TAG</replaceable>   /<replaceable>MOUNT_POINT</replaceable>    9p  trans=virtio,version=9p2000.L,rw    0   0</screen>
      </step>
    </procedure>
  </sect1>
  <sect1 xml:id="libvirt-storage-rbd">
    <title>通过 <systemitem class="library">libvirt</systemitem> 使用 RADOS 块设备</title>

    <para>
      RADOS 块设备 (RBD) 将数据存储在 Ceph 群集中。这些设备支持快照、复制和数据一致性。您可以像使用其他块设备一样，从 <systemitem class="library">libvirt</systemitem> 管理的 VM Guest 使用 RBD。
    </para>

    <para os="sles;sled">
      有关更多细节，请参见 SUSE Enterprise Storage《<citetitle><citetitle>Administration Guide</citetitle></citetitle>》中的“<citetitle>Using libvirt with Ceph</citetitle>”一章。<link xlink:href="https://documentation.suse.com/ses/"/> 中提供了 SUSE Enterprise Storage 文档。
    </para>
  </sect1>
</chapter>
