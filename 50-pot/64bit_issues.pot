msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-08-18 23:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr ""

#. (itstool) path: chapter/title
#: xml/64bit_issues.xml:12
msgid "32-Bit and 64-Bit Applications in a 64-Bit System Environment"
msgstr ""

#. (itstool) path: docmanager/translation
#: xml/64bit_issues.xml:16
msgid "yes"
msgstr ""

#. (itstool) path: chapter/indexterm
#: xml/64bit_issues.xml:18
msgid "<primary>64-bit Linux</primary>"
msgstr ""

#. (itstool) path: chapter/para
#: xml/64bit_issues.xml:20
msgid "<phrase role=\"productname\"><phrase os=\"osuse\">openSUSE® Leap</phrase><phrase os=\"sles\">SUSE® Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE® Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE® Linux Enterprise Real Time Extension</phrase></phrase> is available for <phrase os=\"sles\">several</phrase> 64-bit platforms. This does not necessarily mean that all the applications included have already been ported to 64-bit platforms. <phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> supports the use of 32-bit applications in a 64-bit system environment. This chapter offers a brief overview of how this support is implemented on 64-bit <phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> platforms. It explains how 32-bit applications are executed and how 32-bit applications should be compiled to enable them to run both in 32-bit and 64-bit system environments. Additionally, find information about the kernel API and an explanation of how 32-bit applications can run under a 64-bit kernel."
msgstr ""

#. (itstool) path: chapter/para
#: xml/64bit_issues.xml:31
msgid "<phrase os=\"sles\"><phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> for the 64-bit platforms POWER, z Systems and AMD64/Intel 64</phrase><phrase os=\"sled;osuse\"><phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> for the 64-bit platforms amd64 and Intel 64</phrase> is designed so that existing 32-bit applications run in the 64-bit environment <quote>out-of-the-box.</quote> <phrase os=\"sles\">The corresponding 32-bit platforms are ppc for POWER, and x86 for AMD64/Intel 64.</phrase> This support means that you can continue to use your preferred 32-bit applications without waiting for a corresponding 64-bit port to become available.<phrase os=\"sles\"> The current POWER system runs most applications in 32-bit mode, but you can run 64-bit applications.</phrase>"
msgstr ""

#. (itstool) path: sect1/title
#: xml/64bit_issues.xml:45
msgid "Runtime Support"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/64bit_issues.xml:45
msgid "<primary>64-bit Linux</primary> <secondary>runtime support</secondary>"
msgstr ""

#. (itstool) path: important/title
#: xml/64bit_issues.xml:52
msgid "Conflicts Between Application Versions"
msgstr ""

#. (itstool) path: important/para
#: xml/64bit_issues.xml:53
msgid "If an application is available both for 32-bit and 64-bit environments, parallel installation of both versions is bound to lead to problems. In such cases, decide on one of the two versions and install and use this."
msgstr ""

#. (itstool) path: important/para
#: xml/64bit_issues.xml:58
msgid "An exception to this rule is PAM (pluggable authentication modules). <phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> uses PAM in the authentication process as a layer that mediates between user and application. On a 64-bit operating system that also runs 32-bit applications it is necessary to always install both versions of a PAM module."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:67
msgid "To be executed correctly, every application requires a range of libraries. Unfortunately, the names for the 32-bit and 64-bit versions of these libraries are identical. They must be differentiated from each other in another way."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:74
msgid "To retain compatibility with the 32-bit version, the libraries are stored at the same place in the system as in the 32-bit environment. The 32-bit version of <filename>libc.so.6</filename> is located under <filename>/lib/libc.so.6</filename> in both the 32-bit and 64-bit environments."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:82
msgid "All 64-bit libraries and object files are located in directories called <filename>lib64</filename>. The 64-bit object files that you would normally expect to find under <filename>/lib</filename> and <filename>/usr/lib</filename> are now found under <filename>/lib64</filename> and <filename>/usr/lib64</filename>. This means that there is space for the 32-bit libraries under <filename>/lib</filename> and <filename>/usr/lib</filename>, so the file name for both versions can remain unchanged."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:93
msgid "Subdirectories of 32-bit <filename>/lib</filename> directories which contain data content that does not depend on the word size are not moved. This scheme conforms to LSB (Linux Standards Base) and FHS (File System Hierarchy Standard)."
msgstr ""

#. (itstool) path: sect1/title
#: xml/64bit_issues.xml:101
msgid "Software Development"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/64bit_issues.xml:101
msgid "<primary>64-bit Linux</primary> <secondary>software development</secondary>"
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:107
msgid "All 64-bit architectures support the development of 64-bit objects. The level of support for 32-bit compiling depends on the architecture. These are the various implementation options for the toolchain from GCC (GNU Compiler Collection) and binutils, which include the assembler <command>as</command> and the linker <command>ld</command>:"
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:115
msgid "Both 32-bit and 64-bit objects can be generated with a biarch development toolchain. A biarch development toolchain allows generation of 32-bit and 64-bit objects. The compilation of 64-bit objects is the default on almost all platforms. 32-bit objects can be generated if special flags are used. This special flag is <option>-m32</option> for GCC. The flags for the binutils are architecture-dependent, but GCC transfers the correct flags to linkers and assemblers. A biarch development toolchain currently exists for amd64 (supports development for x86 and amd64 instructions), for z Systems and for POWER. 32-bit objects are normally created on the POWER platform. The <literal>-m64</literal> flag must be used to generate 64-bit objects."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:129
msgid "A biarch development toolchain allows generation of 32-bit and 64-bit objects. The default is to compile 64-bit objects. It is possible to generate 32-bit objects by using special flags. For GCC, this special flag is <option>-m32</option>."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:136
msgid "All header files must be written in an architecture-independent form. The installed 32-bit and 64-bit libraries must have an API (application programming interface) that matches the installed header files. The normal <phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> environment is designed according to this principle. In the case of manually updated libraries, resolve these issues yourself."
msgstr ""

#. (itstool) path: sect1/title
#: xml/64bit_issues.xml:145
msgid "Software Compilation on Biarch Platforms"
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:147
msgid "To develop binaries for the other architecture on a biarch architecture, the respective libraries for the second architecture must additionally be installed. These packages are called <systemitem class=\"resource\">rpmname-32bit</systemitem><phrase os=\"sles\"> or <systemitem class=\"resource\">rpmname-x86</systemitem> if the second architecture is a 32-bit architecture or <systemitem class=\"resource\">rpmname-64bit</systemitem> if the second architecture is a 64-bit architecture</phrase>. You also need the respective headers and libraries from the <systemitem class=\"resource\">rpmname-devel</systemitem> packages and the development libraries for the second architecture from <systemitem class=\"resource\">rpmname-devel-32bit</systemitem><phrase os=\"sles\"> or <systemitem class=\"resource\">rpmname-devel-64bit</systemitem></phrase>."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:163
msgid "For example, to compile a program that uses <command>libaio</command> on a system with a 32-bit second architecture (x86_64<phrase os=\"sles\"> or z Systems</phrase>), you need the following RPMs:"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/64bit_issues.xml:172
msgid "libaio-32bit"
msgstr ""

#. (itstool) path: listitem/para
#: xml/64bit_issues.xml:174
msgid "32-bit runtime package"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/64bit_issues.xml:180
msgid "libaio-devel-32bit"
msgstr ""

#. (itstool) path: listitem/para
#: xml/64bit_issues.xml:182
msgid "Headers and libraries for 32-bit development"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/64bit_issues.xml:188
msgid "libaio"
msgstr ""

#. (itstool) path: listitem/para
#: xml/64bit_issues.xml:190
msgid "64-bit runtime package"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/64bit_issues.xml:196
msgid "libaio-devel"
msgstr ""

#. (itstool) path: listitem/para
#: xml/64bit_issues.xml:198
msgid "64-bit development headers and libraries"
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:205
msgid "Most open source programs use an <command>autoconf</command>-based program configuration. To use <command>autoconf</command> for configuring a program for the second architecture, overwrite the normal compiler and linker settings of <command>autoconf</command> by running the <command>configure</command> script with additional environment variables."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:213
msgid "The following example refers to an x86_64 system with x86 as the second architecture. <phrase os=\"sles\">Examples for POWER with ppc as the second architecture would be similar.</phrase>"
msgstr ""

#. (itstool) path: step/para
#: xml/64bit_issues.xml:221
msgid "Use the 32-bit compiler:"
msgstr ""

#. (itstool) path: step/screen
#: xml/64bit_issues.xml:224
#, no-wrap
msgid ""
"CC=\"gcc -m32\""
msgstr ""

#. (itstool) path: step/para
#: xml/64bit_issues.xml:227
msgid "Instruct the linker to process 32-bit objects (always use <command>gcc</command> as the linker front-end):"
msgstr ""

#. (itstool) path: step/screen
#: xml/64bit_issues.xml:231
#, no-wrap
msgid ""
"LD=\"gcc -m32\""
msgstr ""

#. (itstool) path: step/para
#: xml/64bit_issues.xml:234
msgid "Set the assembler to generate 32-bit objects:"
msgstr ""

#. (itstool) path: step/screen
#: xml/64bit_issues.xml:237
#, no-wrap
msgid ""
"AS=\"gcc -c -m32\""
msgstr ""

#. (itstool) path: step/para
#: xml/64bit_issues.xml:240
msgid "Specify linker flags, such as the location of 32-bit libraries, for example:"
msgstr ""

#. (itstool) path: step/screen
#: xml/64bit_issues.xml:244
#, no-wrap
msgid ""
"LDFLAGS=\"-L/usr/lib\""
msgstr ""

#. (itstool) path: step/para
#: xml/64bit_issues.xml:247
msgid "Specify the location for the 32-bit object code libraries:"
msgstr ""

#. (itstool) path: step/screen
#: xml/64bit_issues.xml:250
#, no-wrap
msgid ""
"--libdir=/usr/lib"
msgstr ""

#. (itstool) path: step/para
#: xml/64bit_issues.xml:253
msgid "Specify the location for the 32-bit X libraries:"
msgstr ""

#. (itstool) path: step/screen
#: xml/64bit_issues.xml:256
#, no-wrap
msgid ""
"--x-libraries=/usr/lib"
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:260
msgid "Not all of these variables are needed for every program. Adapt them to the respective program."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:265
msgid "An example <command>configure</command> call to compile a native 32-bit application on x86_64<phrase os=\"sles\">, POWER or z Systems</phrase> could appear as follows:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/64bit_issues.xml:271
#, no-wrap
msgid ""
"CC=\"gcc -m32\"\n"
"LDFLAGS=\"-L/usr/lib;\"\n"
"./configure --prefix=/usr --libdir=/usr/lib --x-libraries=/usr/lib\n"
"make\n"
"make install"
msgstr ""

#. (itstool) path: sect1/title
#: xml/64bit_issues.xml:278
msgid "Kernel Specifications"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/64bit_issues.xml:278
msgid "<primary>64-bit Linux</primary> <secondary>kernel specifications</secondary>"
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:284
msgid "The 64-bit kernels for AMD64/Intel 64<phrase os=\"sles\">, POWER and z Systems</phrase> offer both a 64-bit and a 32-bit kernel ABI (application binary interface). The latter is identical with the ABI for the corresponding 32-bit kernel. This means that the 32-bit application can communicate with the 64-bit kernel in the same way as with the 32-bit kernel."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:293
msgid "The 32-bit emulation of system calls for a 64-bit kernel does not support all the APIs used by system programs. This depends on the platform. For this reason, few applications, like <command>lspci</command>, must be compiled<phrase os=\"sles\"> on non-POWER platforms as 64-bit programs to function properly. On IBM z Systems, not all ioctls are available in the 32-bit kernel ABI</phrase>."
msgstr ""

#. (itstool) path: sect1/para
#: xml/64bit_issues.xml:302
msgid "A 64-bit kernel can only load 64-bit kernel modules that have been specially compiled for this kernel. It is not possible to use 32-bit kernel modules."
msgstr ""

#. (itstool) path: tip/title
#: xml/64bit_issues.xml:308
msgid "Kernel-loadable Modules"
msgstr ""

#. (itstool) path: tip/para
#: xml/64bit_issues.xml:309
msgid "Some applications require separate kernel-loadable modules. If you intend to use such a 32-bit application in a 64-bit system environment, contact the provider of this application and SUSE to make sure that the 64-bit version of the kernel-loadable module and the 32-bit compiled version of the kernel API are available for this module."
msgstr ""

