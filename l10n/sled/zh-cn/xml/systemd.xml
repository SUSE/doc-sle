<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="systemd.xml" version="5.0" xml:id="cha-systemd">
 <title><systemitem class="daemon">systemd</systemitem> 守护程序</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  <systemitem class="daemon">systemd</systemitem> 负责初始化系统，它的进程 ID 为 1。<systemitem class="daemon">systemd</systemitem> 由内核直接启动，信号 9（该信号通常会终止进程）对它不起作用。所有其他程序或由 <systemitem class="daemon">systemd</systemitem> 直接启动，或由它的其中一个子进程启动。<systemitem class="daemon">systemd</systemitem> 取代了 System V init 守护程序，并且通过支持 init 脚本与 System V init 完全兼容。
 </para>
 <para>
  <systemitem class="daemon">systemd</systemitem> 的主要优点是通过并行化服务启动，大大加快了引导速度。另外，<systemitem class="daemon">systemd</systemitem> 只在确实有需要时才会启动服务。即不会在系统引导时无条件启动守护程序，而是在第一次需要时才会启动。<systemitem class="daemon">systemd</systemitem> 还支持内核控制组 (cgroup)、创建快照和恢复系统状态。有关更多细节，请参见 <link xlink:href="http://www.freedesktop.org/wiki/Software/systemd/"/>。
 </para>
   
 <sect1 xml:id="sec-boot-systemd-concept">
  <title><systemitem class="daemon">systemd</systemitem> 概念</title>
  <para>
   下面的部分解释了 <systemitem class="daemon">systemd</systemitem> 背后的概念。
  </para>
  <para>
    <systemitem class="daemon">systemd</systemitem> 是适用于 Linux 的系统和会话管理器，它与 System V 及 LSB init 脚本兼容。<systemitem class="daemon">systemd</systemitem> 的主要功能包括：
  </para>
    <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      并行化能力
     </para>
    </listitem>
    <listitem>
     <para>
      使用套接字及 D-Bus 激活来启动服务
     </para>
    </listitem>
    <listitem>
     <para>
      按需启动守护程序
     </para>
    </listitem>
    <listitem>
     <para>
      使用 Linux cgroup 跟踪进程
     </para>
    </listitem>
    <listitem>
     <para>
      创建快照和恢复系统状态
     </para>
    </listitem>
    <listitem>
     <para>
      维护挂载点和自动挂载点
     </para>
    </listitem>
    <listitem>
     <para>
      实施精细的、基于事务依赖性的服务控制逻辑
     </para>
    </listitem>
   </itemizedlist>

   <sect2 xml:id="sec-boot-systemd-unitfile">
   <title>单元文件</title>
   <para>
    单元配置文件包含有关以下项目的信息：服务、套接字、设备、挂载点、自动挂载点、交换文件或分区、启动目标、监控的文件系统路径、受 <systemitem class="daemon">systemd</systemitem> 控制和监管的计时器、临时系统状态快照、资源管理部分或一组外部创建的进程。
   </para>
   <para>
    <quote>单元文件</quote>是 <systemitem class="daemon">systemd</systemitem> 用于描述下列各项的通用术语：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>服务</title>
      <para>
       进程相关信息（例如运行守护程序）；文件以 .service 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>目标</title>
      <para>
       用于将单元分组以及在启动期间用作同步点；文件以 .target 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>套接字</title>
      <para>
       IPC 或网络套接字或文件系统 FIFO 相关信息，适用于基于套接字的激活（如 <systemitem class="daemon">inetd</systemitem>）；文件以 .socket 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>路径</title>
      <para>
       用于触发其他单元（例如，在文件更改时运行服务）；文件以 .path 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>计时器</title>
      <para>
       受控制计时器相关信息，适用于基于计时器的激活；文件以 .timer 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>挂载点</title>
      <para>
       通常由 fstab 生成器自动生成；文件以 .mount 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>自动挂载点</title>
      <para>
       文件系统自动挂载点相关信息；文件以 .automount 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>交换</title>
      <para>
       内存分页的交换设备或文件相关信息；文件以 .swap 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>设备</title>
      <para>
       sysfs/udev(7) 设备树中公开的设备相关信息；文件以 .device 结尾
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>范围/部分</title>
      <para>
       有关分层管理一组进程的资源的概念；文件以 .scope/.slice 结尾
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
     
   <para>
    有关 <systemitem class="daemon">systemd</systemitem> 单元文件的详细信息，请参见 <link xlink:href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"/>
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-boot-systemd-basics">
  <title>基本用法</title>

  <para>
   System V init 系统使用若干命令来处理服务：init 脚本、<command>insserv</command>、<command>telinit</command> 及其他。<systemitem class="daemon">systemd</systemitem> 可简化服务管理，因为对于大部分处理服务的任务，只需要记住一条命令：<command>systemctl</command>。它使用<quote>命令加子命令</quote>表示法，与 <command>git</command> 或 <command>zypper</command> 相似：
  </para>

<screen>systemctl <replaceable>GENERAL OPTIONS</replaceable> <replaceable>SUBCOMMAND</replaceable> <replaceable>SUBCOMMAND OPTIONS</replaceable></screen>

  <para>
   有关完整的手册，请参见 <command>man 1 systemctl</command>。
  </para>

  <tip>
   <title>终端输出和 Bash 补全</title>
   <para>
    如果输出传递到某个终端（而不是某个管道或文件），<systemitem class="daemon">systemd</systemitem> 命令默认会将长输出发送到分页器。使用 <option>--no-pager</option> 选项可关闭分页模式。
   </para>
   <para>
    <systemitem class="daemon">systemd</systemitem> 还支持 bash 补全，允许您输入子命令的头几个字母，然后按 <keycap function="tab"/>。此功能只能在 <systemitem>bash</systemitem> 外壳中使用，并且需要安装 <systemitem class="resource">bash-completion</systemitem> 软件包。
   </para>
  </tip>

  <sect2 xml:id="sec-boot-systemd-basics-services">
   <title>管理正在运行的系统中的服务</title>
   <para>
    用于管理服务的子命令与使用 System V init 管理服务的子命令相同（<command>start</command>、<command>stop</command> 等）。服务管理命令的一般语法如下所示：
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem class="daemon">systemd</systemitem></term>
     <listitem>
<screen>systemctl reload|restart|start|status|stop|<replaceable>...</replaceable> <replaceable>MY_SERVICE(S)</replaceable></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>System V init</term>
     <listitem>
<screen>rc<replaceable>MY_SERVICE(S)</replaceable> reload|restart|start|status|stop|<replaceable>...</replaceable></screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    <systemitem class="daemon">systemd</systemitem> 允许您一次管理多个服务。不用像 System V init 要逐个执行 init 脚本，而是执行如下命令：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl start <replaceable>MY_1ST_SERVICE</replaceable> <replaceable>MY_2ND_SERVICE</replaceable></screen>
   <para>
    要列出系统上所有可用的服务，请运行：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl list-unit-files --type=service</screen>
   <para>
    下表列出了 <systemitem class="daemon">systemd</systemitem> 和 System V init 最重要的服务管理命令：
   </para>
   <table rowsep="1">
    <title>服务管理命令</title>
    <tgroup cols="3">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="30*"/>
     <colspec colnum="3" colname="3" colwidth="20*"/>
     <thead>
      <row>
       <entry colname="1">
        <para>
         任务
        </para>
       </entry>
       <entry colname="2">
        <para>
         <systemitem class="daemon">systemd</systemitem> 命令
        </para>
       </entry>
       <entry colname="3">
        <para>
         System V init 命令
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <formalpara>
         <title>启动</title>
         <para/>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>start</screen>
       </entry>
       <entry colname="3">
<screen>start</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>停止</title>
         <para/>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>stop</screen>
       </entry>
       <entry colname="3">
<screen>stop</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>重启动</title>
         <para>
          关闭服务，然后再启动这些服务。如果某项服务尚未运行，它将会启动。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>restart</screen>
       </entry>
       <entry colname="3">
<screen>restart</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>有条件地重启动</title>
         <para>
          如果服务当前正在运行，则重启动它们。对未在运行的服务不执行任何操作。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>try-restart</screen>
       </entry>
       <entry colname="3">
<screen>try-restart</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>重新装载</title>
         <para>
          让服务在不中断操作的情况下重新装载它们的配置文件。使用案例：让 Apache 重新装载修改过的 <filename>httpd.conf</filename> 配置文件。请注意，并非所有服务都支持重新装载。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>reload</screen>
       </entry>
       <entry colname="3">
<screen>reload</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>重新装载或重启动</title>
         <para>
          如果支持重新装载则重新装载服务，否则重启动服务。如果某项服务尚未运行，它将会启动。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>reload-or-restart</screen>
       </entry>
       <entry colname="3">
<screen>n/a</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>有条件地重新装载或重启动</title>
         <para>
          如果支持重新装载则重新装载服务，否则，如果服务当前正在运行，则重启动服务。对未在运行的服务不执行任何操作。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>reload-or-try-restart</screen>
       </entry>
       <entry colname="3">
<screen>n/a</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>获得详细的状态信息</title>
         <para>
          列出服务状态的相关信息。<systemitem class="daemon">systemd</systemitem> 命令会显示说明、可执行文件、状态、cgroup 及服务发出的最新消息等细节（请参见<xref linkend="sec-boot-systemd-basics-services-debugging"/>）。使用 System V init 显示的详细程度因服务而异。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>status</screen>
       </entry>
       <entry colname="3">
<screen>status</screen>
       </entry>
      </row>
      <row>
       <entry colname="1">
        <formalpara>
         <title>获得简要的状态信息</title>
         <para>
          显示服务是否处于活动状态。
         </para>
        </formalpara>
       </entry>
       <entry colname="2">
<screen>is-active</screen>
       </entry>
       <entry colname="3">
<screen>status</screen>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-basics-services-enabling">
   <title>永久启用/禁用服务</title>
   <para>
    上一节中提到的服务管理命令可让您操控当前会话的服务。<systemitem class="daemon">systemd</systemitem> 还允许您永久启用或禁用服务，让它们在用户要求时自动启动或永远不可用。您可以使用 YaST 或在命令行上运行命令来实现此目的。
   </para>
   <sect3 xml:id="sec-boot-systemd-basics-services-enabling-cmd">
    <title>在命令行上启用/禁用服务</title>
    <para>
     下表列出了 <systemitem class="daemon">systemd</systemitem> 和 System V init 用于启用和禁用服务的命令：
    </para>
    <important>
     <title>服务启动</title>
     <para>
      在命令行上启用服务时，服务不会自动启动。它会安排在下一次系统启动或运行级别/目标发生更改时启动。要在启用服务之后立即启动它，请显式运行 <command>systemctl start <replaceable>MY_SERVICE</replaceable></command> 或 <command>rc <replaceable>MY_SERVICE</replaceable> start</command>。
     </para>
    </important>
    <table rowsep="1">
     <title>用于启用和禁用服务的命令</title>
     <tgroup cols="3">
      <colspec colnum="1" colname="1" colwidth="32*"/>
      <colspec colnum="2" colname="2" colwidth="40*"/>
      <colspec colnum="3" colname="3" colwidth="28*"/>
      <thead>
       <row>
        <entry colname="1">
         <para>
          任务
         </para>
        </entry>
        <entry colname="2">
         <para>
          <systemitem class="daemon">systemd</systemitem> 命令
         </para>
        </entry>
        <entry colname="3">
         <para>
          System V init 命令
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry colname="1">
         <formalpara>
          <title>启用</title>
          <para/>
         </formalpara>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl enable <replaceable>MY_SERVICE(S)</replaceable></command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          <command>insserv <replaceable>MY_SERVICE(S)</replaceable></command>, <command>chkconfig -a <replaceable>MY_SERVICE(S)</replaceable></command>
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <formalpara>
          <title>禁用</title>
          <para/>
         </formalpara>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl disable <replaceable>MY_SERVICE(S)</replaceable>.service</command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          <command>insserv -r <replaceable>MY_SERVICE(S)</replaceable></command>、&#x200b;<command>chkconfig -d <replaceable>MY_SERVICE(S)</replaceable></command>
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <formalpara>
          <title>检查</title>
          <para>
           显示某项服务是否启用。
          </para>
         </formalpara>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl is-enabled <replaceable>MY_SERVICE</replaceable></command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          <command>chkconfig <replaceable>MY_SERVICE</replaceable></command>
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <formalpara>
          <title>重新启用</title>
          <para>
           与重启动服务相似，此命令先禁用服务，然后再启用该服务。可用来使用默认值重新启用服务。
          </para>
         </formalpara>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl reenable <replaceable>MY_SERVICE</replaceable></command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          无
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <formalpara>
          <title>屏蔽</title>
          <para>
           <quote>禁用</quote>某项服务之后，仍然可以手动启动它。要彻底禁用服务，您需要屏蔽它。须谨慎使用该功能。
          </para>
         </formalpara>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl mask <replaceable>MY_SERVICE</replaceable></command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          无
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <formalpara>
          <title>取消屏蔽</title>
          <para>
           屏蔽某项服务之后，只有在将其取消屏蔽之后才能再次使用它。
          </para>
         </formalpara>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl unmask <replaceable>MY_SERVICE</replaceable></command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          无
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-boot-systemd-boot">
  <title>系统启动和目标管理</title>

  <para>
   启动和关闭系统的整个过程由 <systemitem class="daemon">systemd</systemitem> 负责维护。从这一点来看，可以将内核视为一个后台进程，其任务是维护所有其他进程，以及根据其他程序的请求来调整 CPU 时间和硬件访问。
  </para>

  <sect2 xml:id="sec-boot-systemd-targets">
   <title>目标与运行级别的比较</title>
   <para>
    使用 System V init 时，系统引导到所谓的<quote>运行级别</quote>。运行级别定义系统如何启动以及正在运行的系统中有哪些服务可用。运行级别是有编号的；最知名的运行级别是 <literal>0</literal>（关闭系统）、<literal>3</literal>（联网的多用户模式）和 <literal>5</literal>（联网并使用显示管理器的多用户模式）。
   </para>
   <para>
    <systemitem class="daemon">systemd</systemitem> 使用所谓的<quote>目标单元</quote>引入新的概念。不过，它仍然与运行级别概念完全兼容。目标单元用名称而不是编号来标识，并具有特定的作用。例如，目标 <systemitem>local-fs.target</systemitem> 和 <systemitem>swap.target</systemitem> 用于挂载本地文件系统和交换空间。
   </para>
   <para>
    目标 <systemitem>graphical.target</systemitem> 提供联网并使用显示管理器的多用户系统，作用与运行级别 5 相当。复杂目标（如 <systemitem>graphical.target</systemitem>）通过将一部分其他目标组合起来充当<quote>元</quote>目标。<systemitem class="daemon">systemd</systemitem> 通过组合现有目标简化了创建自定义目标的工作，从而提供了极大的灵活性。
   </para>
   <para>
    下面的列表显示了最重要的 <systemitem class="daemon">systemd</systemitem> 目标单元。有关完整列表，请参见 <command>man 7 systemd.special</command>。
   </para>
   <variablelist>
    <title>选定的 <systemitem class="daemon">systemd</systemitem> 目标单元</title>
    <varlistentry>
     <term><systemitem>default.target</systemitem></term>
     <listitem>
      <para>
       默认引导的目标。这并不是<quote>实际</quote>目标，而是指向另一个目标（如 <systemitem>graphic.target</systemitem>）的符号链接，可通过 YaST 永久更改（请参见<xref linkend="sec-boot-runlevel-edit"/>）。要为某个会话更改它，请在引导提示处使用内核参数 <literal>systemd.unit=<replaceable>MY_TARGET.target</replaceable></literal>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>emergency.target</systemitem></term>
     <listitem>
      <para>
       在控制台上启动紧急外壳。请仅在引导提示处按以下格式使用它：<literal>systemd.unit=emergency.target</literal>。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>graphical.target</systemitem></term>
     <listitem>
      <para>
       启动联网的具有多用户支持和显示管理器的系统。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>halt.target</systemitem></term>
     <listitem>
      <para>
       关闭系统。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mail-transfer-agent.target</systemitem></term>
     <listitem>
      <para>
       启动发送和接收邮件所需的所有服务。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>multi-user.target</systemitem></term>
     <listitem>
      <para>
       启动联网的多用户系统。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>reboot.target</systemitem></term>
     <listitem>
      <para>
       重新引导系统。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>rescue.target</systemitem></term>
     <listitem>
      <para>
       启动不联网的单用户系统。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    为了与 System V init 运行级别系统保持兼容，<systemitem class="daemon">systemd</systemitem> 提供了名为 <literal>runlevel<replaceable>X</replaceable>.target</literal> 的特殊目标，与编号为 <replaceable>X</replaceable> 的相应运行级别相对应。
   </para>
   <para>
    如果您想知道当前的目标，请使用命令：<command>systemctl get-default</command>
   </para>
   <table rowsep="1">
    <title>System V 运行级别和 <systemitem class="daemon">systemd</systemitem> 目标单元</title>
    <tgroup cols="3">
     <colspec colnum="1" colname="1" colwidth="20*"/>
     <colspec colnum="2" colname="2" colwidth="40*"/>
     <colspec colnum="3" colname="3" colwidth="40*"/>
     <thead>
      <row>
       <entry>
        <para>
         System V 运行级别
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="daemon">systemd</systemitem> target
        </para>
       </entry>
       <entry>
        <para>
         用途
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         0
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel0.target</systemitem>、<systemitem>halt.target</systemitem>、<systemitem>poweroff.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         系统关闭
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         1、S
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel1.target</systemitem>、<systemitem>rescue.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         单用户模式
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         2
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel2.target</systemitem>、<systemitem>multi-user.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         无远程联网的本地多用户模式
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         3
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel3.target</systemitem>、<systemitem>multi-user.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         完整的联网多用户模式
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         4
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel4.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         未使用/用户定义
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         5
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel5.target</systemitem>、<systemitem>graphical.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         联网并使用显示管理器的完整多用户模式
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         6
        </para>
       </entry>
       <entry>
        <para>
         <systemitem>runlevel6.target</systemitem>、<systemitem>reboot.target</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         系统重引导
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <important>
    <title><systemitem class="daemon">systemd</systemitem> 会忽略 <filename>/etc/inittab</filename></title>
    <para>
     System V init 系统中的运行级别在 <filename>/etc/inittab</filename> 中配置。<systemitem class="daemon">systemd</systemitem> <emphasis>不</emphasis>使用此配置。有关如何创建您自己的可引导目标的指导，请参考<xref linkend="sec-boot-systemd-custom-targets"/>。
    </para>
   </important>
   <sect3 xml:id="sec-boot-systemd-targets-commands">
    <title>用于更改目标的命令</title>
    <para>
     可使用下列命令来操作目标单元：
    </para>
    <informaltable rowsep="1">
     <tgroup cols="3">
      <colspec colnum="1" colname="1" colwidth="20*"/>
      <colspec colnum="2" colname="2" colwidth="50*"/>
      <colspec colnum="3" colname="3" colwidth="30*"/>
      <thead>
       <row>
        <entry colname="1">
         <para>
          任务
         </para>
        </entry>
        <entry colname="2">
         <para>
          <systemitem class="daemon">systemd</systemitem> 命令
         </para>
        </entry>
        <entry colname="3">
         <para>
          System V init 命令
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry colname="1">
         <para>
          更改当前目标/运行级别
         </para>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl isolate</command> <replaceable>MY_TARGET</replaceable>.target
         </para>
        </entry>
        <entry colname="3">
         <para>
          <command>telinit</command> <replaceable> X</replaceable>
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          更改为默认目标/运行级别
         </para>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl default</command>
         </para>
        </entry>
        <entry colname="3">
         <para>
          无
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          获得当前目标/运行级别
         </para>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl list-units --type=target</command>
         </para>
         <para>
          对于 <systemitem class="daemon">systemd</systemitem>，一般会有多个活动目标。该命令可列出当前处于活动状态的所有目标。
         </para>
        </entry>
        <entry colname="3">
         <para>
          <command>who -r</command>
         </para>
         <para>
          或
         </para>
         <para>
          <command>runlevel</command>
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          永久更改默认运行级别
         </para>
        </entry>
        <entry colname="2">
         <para>
          使用服务管理器或运行以下命令：
         </para>
         <para>
          <command>ln -sf /usr/lib/systemd/system/</command> <replaceable>MY_TARGET</replaceable>.target /etc/systemd/system/default.target
         </para>
        </entry>
        <entry colname="3">
         <para>
          使用服务管理器或更改以下行
         </para>
         <para>
          <command>id:</command> <replaceable>X</replaceable>:initdefault:
         </para>
         <para>
          （<filename>/etc/inittab</filename> 中）
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          更改当前引导进程的默认运行级别
         </para>
        </entry>
        <entry colname="2">
         <para>
          在引导提示处输入以下选项
         </para>
         <para>
          <command>systemd.unit=</command> <replaceable>MY_TARGET</replaceable>.target
         </para>
        </entry>
        <entry colname="3">
         <para>
          在引导提示处输入所需的运行级别编号。
         </para>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          显示目标/运行级别的依赖项
         </para>
        </entry>
        <entry colname="2">
         <para>
          <command>systemctl show -p &quot;Requires&quot;</command> <replaceable>MY_TARGET</replaceable>.target
         </para>
         <para>
          <command>systemctl show -p &quot;Wants&quot;</command> <replaceable>MY_TARGET</replaceable>.target
         </para>
         <para>
          <quote>Requires</quote> 会列出硬性依赖项（必须解决的依赖项），而 <quote>Wants</quote> 会列出软性依赖项（情况允许时解决的依赖项）。
         </para>
        </entry>
        <entry colname="3">
         <para>
          无
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-debug">
   <title>调试系统的启动</title>
   <para>
    <systemitem class="daemon">systemd</systemitem> 提供了分析系统启动过程的方法。您可以查看所有服务及其状态的列表（而不必分析 <filename>/var/log/</filename>）。<systemitem class="daemon">systemd</systemitem> 还允许您扫描启动过程，以了解每项服务启动用了多长时间。
   </para>
   <sect3 xml:id="sec-boot-systemd-debug-review">
    <title>查看服务的启动情况</title>
    <para>
     要查看系统引导后所启动服务的完整列表，请输入命令 <command>systemctl</command>。该命令会列出所有活动服务，如下所示（已精简）。要获得特定服务的详细信息，请使用 <command>systemctl status <replaceable>MY_SERVICE</replaceable></command>。
    </para>
    <example>
     <title>列出活动服务</title>
<screen><prompt role="root"># </prompt>systemctl
UNIT                        LOAD   ACTIVE SUB       JOB DESCRIPTION
[...]
iscsi.service               loaded active exited    Login and scanning of iSC+
kmod-static-nodes.service   loaded active exited    Create list of required s+
libvirtd.service            loaded active running   Virtualization daemon
nscd.service                loaded active running   Name Service Cache Daemon
chronyd.service             loaded active running   NTP Server Daemon
polkit.service              loaded active running   Authorization Manager
postfix.service             loaded active running   Postfix Mail Transport Ag+
rc-local.service            loaded active exited    /etc/init.d/boot.local Co+
rsyslog.service             loaded active running   System Logging Service
[...]
LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.

161 loaded units listed. Pass --all to see loaded but inactive units, too.
To show all installed unit files use 'systemctl list-unit-files'.</screen>
    </example>
    <para>
     要想只列出无法启动的服务，请使用 <option>--failed</option> 选项。
    </para>
    <example>
     <title>列出失败的服务</title>
<screen><prompt role="root"># </prompt>systemctl --failed
UNIT                   LOAD   ACTIVE SUB    JOB DESCRIPTION
apache2.service        loaded failed failed     apache
NetworkManager.service loaded failed failed     Network Manager
plymouth-start.service loaded failed failed     Show Plymouth Boot Screen

[...]</screen>
    </example>
   </sect3>
   <sect3 xml:id="sec-boot-systemd-debug-time">
    <title>调试启动时间</title>
    <para>
     为了调试系统启动时间，<systemitem class="daemon">systemd</systemitem> 提供了 <command>systemd-analyze</command> 命令。该命令会显示总启动时间及按启动时间排序的服务列表，还可以生成 SVG 图，以显示各服务相对于其他服务的启动时间。
    </para>
    <variablelist>
     <varlistentry>
      <term>列出系统启动时间</term>
      <listitem>
<screen><prompt role="root"># </prompt>systemd-analyze
Startup finished in 2666ms (kernel) + 21961ms (userspace) = 24628ms</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>列出服务启动时间</term>
      <listitem>
<screen><prompt role="root"># </prompt>systemd-analyze blame
    15.000s backup-rpmdb.service
    14.879s mandb.service
     7.646s backup-sysconfig.service
     4.940s postfix.service
     4.921s logrotate.service
     4.640s libvirtd.service
     4.519s display-manager.service
     3.921s btrfsmaintenance-refresh.service
     3.466s lvm2-monitor.service
     2.774s plymouth-quit-wait.service
     2.591s firewalld.service
     2.137s initrd-switch-root.service
     1.954s ModemManager.service
     1.528s rsyslog.service
     1.378s apparmor.service
    [...]
</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>服务启动时间图</term>
      <listitem>
<screen><prompt role="root"># </prompt>systemd-analyze plot &gt; jupiter.example.com-startup.svg</screen>
       <informalfigure>
        <mediaobject>
         <imageobject role="fo">
          <imagedata fileref="systemd_startup.svg" width="75%"/>
         </imageobject>
         <imageobject role="html">
          <imagedata fileref="systemd_startup.png" width="75%"/>
         </imageobject>
        </mediaobject>
       </informalfigure>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3 xml:id="sec-boot-systemd-debug-complete">
    <title>查看完整的启动过程</title>
    <para>
     上面的命令列出了已启动的服务及其启动时间。如需更详细的概述，请在引导提示符处指定以下参数，以指示 <systemitem class="daemon">systemd</systemitem> 创建完整启动过程的详细日志。
    </para>
<screen>systemd.log_level=debug systemd.log_target=kmsg</screen>
    <para>
     现在，<systemitem class="daemon">systemd</systemitem> 会将日志消息写入内核环缓冲区。使用 <command>dmesg</command> 查看该缓冲区：
    </para>
<screen><prompt>&gt; </prompt>dmesg -T | less</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-sysv-compatibility">
   <title>System V 兼容性</title>
   <para>
    <systemitem class="daemon">systemd</systemitem> 与 System V 兼容，因此，您仍可以使用现有的 System V init 脚本。但是，至少有一个已知问题会导致 System V init 脚本不能立即与 <systemitem class="daemon">systemd</systemitem> 配合使用：通过 init 脚本中的 <command>su</command> 或 <command>sudo</command> 以其他用户身份启动服务会导致脚本失败，生成<quote>访问被拒绝</quote>错误。
   </para>
   <para>
    使用 <command>su</command> 或 <command>sudo</command> 更改用户时，会启动 PAM 会话。完成 init 脚本后会终止此会话。因此，init 脚本启动的服务也会终止。要解决此问题，请执行以下步骤：
   </para>
   <procedure>
    <step>
     <para>
      创建与 init 脚本同名、扩展名为 <filename>.service</filename> 的服务文件封装程序：
     </para>
<screen>[Unit]
Description=<replaceable>DESCRIPTION</replaceable>
After=network.target

[Service]
User=<replaceable>USER</replaceable>
Type=forking<co xml:id="co-service-wrapper-type"/>
PIDFile=<replaceable>PATH TO PID FILE</replaceable><xref linkend="co-service-wrapper-type" xrefstyle="select:label nopage"/>
ExecStart=<replaceable>PATH TO INIT SCRIPT</replaceable> start
ExecStop=<replaceable>PATH TO INIT SCRIPT</replaceable> stop
ExecStopPost=/usr/bin/rm -f <replaceable>PATH TO PID FILE</replaceable><xref linkend="co-service-wrapper-type" xrefstyle="select:label nopage"/>

[Install]
WantedBy=multi-user.target<co xml:id="co-service-wrapper-target"/></screen>
     <para>
      将 <replaceable>UPPERCASE LETTERS</replaceable> 中写入的所有值替换为适当的值。
     </para>
     <calloutlist>
      <callout arearefs="co-service-wrapper-type">
       <para>
        可选 — 仅当 init 脚本启动守护程序时才使用。
       </para>
      </callout>
      <callout arearefs="co-service-wrapper-target">
       <para>
        <literal>multi-user.target</literal> 在引导进入 <literal>graphical.target</literal> 时也会启动 init 脚本。如果只应在引导进入显示管理器时才将它启动，请在此处使用 <literal>graphical.target</literal>。
       </para>
      </callout>
     </calloutlist>
    </step>
    <step>
     <para>
      使用 <command>systemctl start <replaceable>应用程序</replaceable></command>启动守护程序。
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-boot-runlevel-edit">
  <title>使用 YaST 管理服务</title>

  <para>
   基本服务管理也可以通过 YaST 服务管理器模块实现。该模块支持启动、停止、启用和禁用服务。它还可让您显示服务的状态以及更改默认目标。要启动 YaST 模块，请选择 <menuchoice> <guimenu>YaST</guimenu> <guimenu> 系统</guimenu> <guimenu> 服务管理器</guimenu> </menuchoice>。
  </para>

  <figure xml:id="fig-yast2-runlevel">
   <title>服务管理器</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="yast2_runlevel.png" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="yast2_runlevel.png" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <variablelist>
   <varlistentry>
    <term>更改<guimenu>默认系统目标</guimenu></term>
    <listitem>
     <para>
      要更改系统引导到的目标，请从<guimenu>默认系统目标</guimenu>下拉框中选择某个目标。最常用的目标是<guimenu>图形界面</guimenu>（启动图形登录屏幕）和<guimenu>多用户</guimenu>（以命令行模式启动系统）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>启动或停止服务</term>
    <listitem>
     <para>
      从表中选择一个服务。<guimenu>状态</guimenu>列显示它当前是（<guimenu>活动</guimenu>）否（<guimenu>非活动</guimenu>）正在运行。通过选择<guimenu>启动</guimenu>或<guimenu>停止</guimenu>可切换其状态。
     </para>
     <para>
      为当前正在运行的会话启动或停止服务会更改其状态。要更改服务在整个重引导过程中的状态，您需要启用或禁用服务。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>定义服务启动行为</term>
    <listitem>
     <para>
      服务可以在引导时自动启动，也可以手动启动。从表中选择一个服务。<guimenu>启动</guimenu>列显示它当前是<guimenu>手动</guimenu>启动还是<guimenu>引导时</guimenu>启动。通过选择<guimenu>启动模式</guimenu>可切换其状态。
     </para>
     <para>
      要在当前会话中更改服务状态，您需要按照上述方式启动或停止服务。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>查看状态消息</term>
    <listitem>
     <para>
      要查看某个服务的状态消息，请从列表中选择该服务，然后选择<guimenu>显示细节</guimenu>。您看到的输出与 <command>systemctl </command> <option>-l</option> status <replaceable>MY_SERVICE</replaceable> 命令生成的输出完全相同。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-boot-systemd-custom">
  <title>自定义 <systemitem>systemd</systemitem></title>

  <para>
   以下几节介绍了 <systemitem>systemd</systemitem> 自定义的一些示例。
  </para>

  <warning>
   <title>防止您的自定义被覆盖</title>
   <para>
    在自定义 <systemitem class="daemon">systemd</systemitem> 时，请务必使用目录 <filename>/etc/systemd/</filename>，<emphasis>切勿</emphasis>使用 <filename>/usr/lib/systemd/</filename>。否则，您的更改将在 <systemitem class="daemon">systemd</systemitem> 下次更新时被覆盖。
   </para>
  </warning>

  <sect2 xml:id="sec-boot-systemd-custom-service">
   <title>自定义单元文件</title>
   <para>
    建议使用 <command>systemctl edit <replaceable>SERVICE</replaceable></command> 命令来自定义单元文件。此命令会启动默认的文本编辑器，并创建一个在 <filename>/etc/systemd/system/<replaceable>NAME</replaceable>.service.d/</filename> 中包含 <filename>override.conf</filename> 文件的目录。该命令还确保会向正在运行的 <systemitem class="daemon">systemd</systemitem> 进程通知这些更改。
   </para>
   <para>
    或者，您可以通过运行 <command>systemctl edit --full <replaceable>SERVICE</replaceable></command> 打开原始文件的副本进行编辑，而不是打开空白文件。编辑文件时，请确保未去除任何现有部分。
   </para>
   <para>
    下面将练习如何更改系统等待 MariaDB 启动的时间。以 root 身份运行 <command>systemctl edit --full mariadb.service</command>。打开的文件如下所示：
   </para>
<screen>
[Unit]
Description=MySQL server
Wants=basic.target
Conflicts=mariadb.target
After=basic.target network.target

[Install]
WantedBy=multi-user.target
Alias=mysql.service

[Service]
Restart=on-abort
Type=notify
ExecStartPre=/usr/lib/mysql/mysql-systemd-helper  install
ExecStartPre=/usr/lib/mysql/mysql-systemd-helper  upgrade
ExecStart=/usr/lib/mysql/mysql-systemd-helper     start

# Configures the time to wait for start-up/stop
TimeoutSec=300

# Prevent writes to /usr, /boot, and /etc
ProtectSystem=full

# Prevent accessing /home, /root and /run/user
ProtectHome=true

UMask=007</screen>
   <para>
    调整 <literal>TimeoutSec</literal> 值并保存更改。要启用更改，请以 root 身份运行 <command>systemctl daemon-reload</command>。
   </para>
   <para>
    有关详细信息，请参考可使用 <command>man 1 systemctl</command> 命令调用的手册页。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-custom-drop-in">
   <title>创建插入式文件</title>
   <para>
    要对配置文件进行细微更改，请使用所谓的插入式文件。使用插入式文件，您无需编辑或覆盖单元文件本身，即可扩展单元文件的配置。
   </para>
   <para>
    例如，要更改位于 <filename>/usr/lib/systemd/system/<replaceable>FOOBAR.SERVICE</replaceable></filename> 中 <replaceable>FOOBAR</replaceable> 服务的单个值，请按以下步骤操作：
   </para>
   <procedure>
    <step>
     <para>
      创建名为 <filename>/etc/systemd/system/<replaceable>FOOBAR</replaceable>.service.d/</filename> 的目录。
     </para>
     <para>
      注意 <literal>.d</literal> 后缀。该目录必须命名为与要用插入式文件修补的服务相似的名称。
     </para>
    </step>
    <step>
     <para>
      在该目录中，创建 <filename><replaceable>your_modification</replaceable>.conf</filename> 文件。
     </para>
     <para>
      确保文件中仅包含要修改的值所在的那一行。
     </para>
    </step>
    <step>
     <para>
      将更改保存到 文件中。
     </para>
    </step>
   </procedure>
   
   <note>
    <title>避免名称冲突</title>
    <para>
    为避免插入式文件与 SUSE 自带的文件之间出现名称冲突，建议在所有插入式文件名前加上一个两位数和一个短划线：例如，<filename>80-override.conf</filename>。
    </para>
    <para>
     以下范围为预留值范围：
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>0-19</literal>，为 <systemitem class="daemon">systemd</systemitem> 上游预留
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>20-25</literal>，为 SUSE 自带的 <systemitem class="daemon">systemd</systemitem> 预留
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>26-29</literal>，为 SUSE 软件包（systemd 除外）预留
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>50</literal>，为使用 <command>systemctl set-property</command> 创建的插入式文件预留
      </para>
     </listitem>
    </itemizedlist>
    <para>
    请使用大于此范围的两位数，以确保 SUSE 自带的任何插入式文件都不会覆盖您自己的插入式文件。
    </para>
    <para>
    您可以使用 <command>systemctl cat $UNIT</command> 来列出并校验哪些文件考虑纳入单元配置。
    </para>
   </note>
  </sect2>

  <sect2 xml:id="systemd-xinetd-conversion">
   <title>将 <systemitem>xinetd</systemitem> 服务转换为 <systemitem class="daemon">systemd</systemitem></title>
   <para>
    从 <phrase role="productname"><phrase os="sled">SUSE Linux Enterprise Desktop</phrase></phrase> 15 版本开始，去除了 <systemitem>xinetd</systemitem> 基础架构。本节概述如何将现有的自定义 <systemitem>xinetd</systemitem> 服务文件转换为 <systemitem class="daemon">systemd</systemitem> 套接字。
   </para>
   <para>
    对于每个 <systemitem>xinetd</systemitem> 服务文件，您至少要有两个 <systemitem class="daemon">systemd</systemitem> 单元文件：套接字文件 (<filename>*.socket</filename>) 和关联的服务文件 (<filename>*.service</filename>)。套接字文件告诉 <systemitem class="daemon">systemd</systemitem> 要创建哪个套接字，服务文件告诉 <systemitem class="daemon">systemd</systemitem> 要启动哪个可执行文件。
   </para>
   <para>
    以下面的 <systemitem>xinetd</systemitem> 服务文件为例：
   </para>
<screen><prompt role="root"># </prompt>cat /etc/xinetd.d/example
service example
{
  socket_type = stream
  protocol = tcp
  port = 10085
  wait = no
  user = user
  group = users
  groups = yes
  server = /usr/libexec/example/exampled
  server_args = -auth=bsdtcp exampledump
  disable = no
}</screen>
   <para>
    要将它转换为 <systemitem class="daemon">systemd</systemitem>，需要下面两个配套的文件：
   </para>
<screen><prompt role="root"># </prompt>cat /usr/lib/systemd/system/example.socket
[Socket]
ListenStream=0.0.0.0:10085
Accept=false

[Install]
WantedBy=sockets.target</screen>
<screen><prompt role="root"># </prompt>cat /usr/lib/systemd/system/example.service
[Unit]
Description=example

[Service]
ExecStart=/usr/libexec/example/exampled -auth=bsdtcp exampledump
User=user
Group=users
StandardInput=socket
</screen>
   <para>
    有关 <systemitem class="daemon">systemd</systemitem> 的“套接字”和“服务”文件选项的完整列表，请参见 systemd.socket 和 systemd.service 手册页（<command>man 5 systemd.socket</command>、<command>man 5 systemd.service</command>）。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-custom-targets">
   <title>创建自定义目标</title>
   <para>
    System V init SUSE 系统上未使用运行级别 4，以便允许管理员创建自己的运行级别配置。<systemitem class="daemon">systemd</systemitem> 允许您创建任意数目的自定义目标。建议您从采用 <systemitem>graphical.target</systemitem> 等现有目标开始。
   </para>
   <procedure>
    <step>
     <para>
      将配置文件 <filename>/usr/lib/systemd/system/graphical.target</filename> 复制到 <filename>/etc/systemd/system/<replaceable>MY_TARGET</replaceable>.target</filename>，并根据需要调整该文件。
     </para>
    </step>
    <step>
     <para>
      上一步中复制的配置文件已涵盖目标的必要（<quote>硬性</quote>）依赖项。如果还要涵盖需要的（<quote>软性</quote>）依赖项，请创建目录 <filename>/etc/systemd/system/<replaceable>MY_TARGET</replaceable>.target.wants</filename>。
     </para>
    </step>
    <step>
     <para>
      对每个需要的服务，创建从 <filename>/usr/lib/systemd/system</filename> 链到 <filename>/etc/systemd/system/<replaceable>MY_TARGET</replaceable>.target.wants</filename> 的符号链接。
     </para>
    </step>
    <step>
     <para>
      设置好目标后，重新装载 <systemitem class="daemon">systemd</systemitem> 配置以使新目标可用：
     </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl daemon-reload</screen>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-boot-systemd-advanced">
  <title>高级用法</title>

  <para>
   以下几节介绍了适合系统管理员的高级主题。有关更高级的 <systemitem class="daemon">systemd</systemitem> 文档，请参考 Lennart Pöttering 撰写的适用于管理员的 <systemitem class="daemon">systemd</systemitem> 相关系列，网址为 <link xlink:href="http://0pointer.de/blog/projects"/>。
  </para>

  <sect2 xml:id="sec-boot-systemd-advanced-tmp">
   <title>清理临时目录</title>
   <para>
    <systemitem class="daemon">systemd</systemitem> 支持定期清理临时目录。将会自动迁移并激活前一系统版本中的配置。<literal>tmpfiles.d</literal>（负责管理临时文件）将从 <filename>/etc/tmpfiles.d/*.conf</filename>、<filename>/run/tmpfiles.d/*.conf</filename> 和 <filename>/usr/lib/tmpfiles.d/*.conf</filename> 文件中读取其配置。<filename>/etc/tmpfiles.d/*.conf</filename> 中的配置将覆盖其他两个目录中的相关配置（<filename>/usr/lib/tmpfiles.d/*.conf</filename> 是软件包用于储存其配置文件的位置）。
   </para>
   <para>
    配置格式为每个路径一行，该行包含操作与路径、（可选）模式、所有权、期限和参数字段，具体取决于操作。以下示例将取消链接 X11 锁定文件：
   </para>
<screen>Type Path               Mode UID  GID  Age Argument
r    /tmp/.X[0-9]*-lock</screen>
   <para>
    要获取 tmpfile 计时器的状态：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl status systemd-tmpfiles-clean.timer
systemd-tmpfiles-clean.timer - Daily Cleanup of Temporary Directories
 Loaded: loaded (/usr/lib/systemd/system/systemd-tmpfiles-clean.timer; static)
 Active: active (waiting) since Tue 2018-04-09 15:30:36 CEST; 1 weeks 6 days ago
   Docs: man:tmpfiles.d(5)
         man:systemd-tmpfiles(8)

Apr 09 15:30:36 jupiter systemd[1]: Starting Daily Cleanup of Temporary Directories.
Apr 09 15:30:36 jupiter systemd[1]: Started Daily Cleanup of Temporary Directories.</screen>
   <para>
    有关处理临时文件的详细信息，请参见 <command>man 5 tmpfiles.d</command>。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-advanced-logging">
   <title>系统日志</title>
   <para>
    <xref linkend="sec-boot-systemd-basics-services-debugging"/> 介绍如何查看给定服务的日志消息。但可显示的日志消息并不仅限于服务日志。您还可以访问和查询 <systemitem class="daemon">systemd</systemitem> 写入的完整日志，即所谓的<quote>日志</quote>。使用 <command>journalctl</command> 命令可显示完整的日志消息，从最早的项开始。有关诸如应用过滤器或更改输出格式的选项，请参考 <command>man 1 journalctl</command>。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-advanced-snapshots">
   <title>快照</title>
   <para>
    您可以使用 <command>isolate</command> 子命令将 <systemitem class="daemon">systemd</systemitem> 的当前状态保存到指定快照中，并在日后还原到该状态。此功能在测试服务或自定义目标时非常有用，因为它可让您随时回到定义的状态。快照仅在当前会话中可用，重引导时将自动删除。快照名称必须以 <filename>.snapshot</filename> 结尾。
   </para>
   <variablelist>
    <varlistentry>
     <term>创建快照</term>
     <listitem>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl snapshot <replaceable>MY_SNAPSHOT</replaceable>.snapshot</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>删除快照</term>
     <listitem>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl delete <replaceable>MY_SNAPSHOT</replaceable>.snapshot</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>查看快照</term>
     <listitem>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl show <replaceable>MY_SNAPSHOT</replaceable>.snapshot</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>激活快照</term>
     <listitem>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl isolate <replaceable>MY_SNAPSHOT</replaceable>.snapshot</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  

  

  <sect2 xml:id="sec-boot-systemd-advanced-kernel-modules">
   <title>装载内核模块</title>
   <para>
    通过使用 <systemitem class="daemon">systemd</systemitem> 以及 <filename>/etc/modules-load.d</filename> 中的配置文件，可以在引导时自动装载内核模块。该文件应该命名为 <replaceable>MODULE</replaceable>.conf 并包含以下内容：
   </para>
<screen># load module <replaceable>MODULE</replaceable> at boot time
<replaceable>MODULE</replaceable></screen>
   <para>
    如果某个软件包安装了用于装载内核模块的配置文件，该文件将安装到 <filename>/usr/lib/modules-load.d</filename>。如果存在两个同名的配置文件，将优先使用 <filename>/etc/modules-load.d</filename> 中的那个配置文件。
   </para>
   <para>
    有关更多信息，请参见 <systemitem>modules-load.d(5)</systemitem> 手册页。
   </para>
  </sect2>

  

  <sect2 xml:id="sec-boot-systemd-advanced-before-local">
   <title>装载服务之前执行操作</title>
   <para>
    使用 System V init 时，需要在装载服务之前执行的操作必须在 <filename>/etc/init.d/before.local</filename> 中指定。<systemitem class="daemon">systemd</systemitem> 不再支持此过程。如果您需要在启动服务之前执行操作，请执行以下步骤：
   </para>
   <variablelist>
    <varlistentry>
     <term>装载内核模块</term>
     <listitem>
      <para>
       在 <filename>/etc/modules-load.d</filename> 目录中创建一个 drop-in 文件（有关语法，请参见 <command>man modules-load.d</command>）
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>创建文件或目录、清理目录、更改所有权</term>
     <listitem>
      <para>
       在 <filename>/etc/tmpfiles.d</filename> 中创建一个 drop-in 文件（有关语法，请参见 <command>man tmpfiles.d</command>）
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>其他任务</term>
     <listitem>
      <para>
       基于下面的模板创建一个系统服务文件，例如 <filename>/etc/systemd/system/before.service</filename>：
      </para>
<screen>[Unit]
Before=<replaceable>NAME OF THE SERVICE YOU WANT THIS SERVICE TO BE STARTED BEFORE</replaceable>
[Service]
Type=oneshot
RemainAfterExit=true
ExecStart=<replaceable>YOUR_COMMAND</replaceable>
# beware, executable is run directly, not through a shell, check the man pages
# systemd.service and systemd.unit for full syntax
[Install]
# target in which to start the service
WantedBy=multi-user.target
#WantedBy=graphical.target</screen>
      <para>
       创建服务文件后，应运行以下命令（以 <systemitem class="username">root</systemitem> 身份）：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl daemon-reload
<prompt>&gt; </prompt><command>sudo</command> systemctl enable before</screen>
      <para>
       每次修改服务文件时，都需要运行：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl daemon-reload</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  

  <sect2 xml:id="sec-boot-systemd-advanced-cgroups">
   <title>内核控制组 (cgroup)</title>
   <para>
    在传统 System V init 系统上，并不总是能够明确地将某个进程指派给生成它的服务。一些服务（例如 Apache）会生成大量第三方进程（例如 CGI 或 Java 进程），这些进程本身又会生成更多进程。这使得明确指派变得非常困难，甚至无法做到。另外，服务可能不会正常终止，导致部分子服务仍保持运行状态。
   </para>
   <para>
    <systemitem class="daemon">systemd</systemitem> 通过将每个服务放入它自己的 cgroup 中，解决了这个问题。cgroups 是一项内核功能，允许将进程及其所有子进程聚合到分层组织的组中。<systemitem class="daemon">systemd</systemitem> 根据每个 cgroup 的服务名称命名各 cgroup。因为非特权进程不允许<quote>离开</quote>它的 cgroup，这提供了一种行之有效的方式，可通过服务名称来标记该服务生成的所有进程。
   </para>
   <para>
    要列出属于某个服务的所有进程，请使用命令 <command>systemd-cgls</command>。结果将如下所示（已精简）：
   </para>
   <example>
    <title>列出属于某个服务的所有进程</title>
<screen><prompt role="root"># </prompt>systemd-cgls --no-pager
├─1 /usr/lib/systemd/systemd --switched-root --system --deserialize 20
├─user.slice
│ └─user-1000.slice
│   ├─session-102.scope
│   │ ├─12426 gdm-session-worker [pam/gdm-password]
│   │ ├─15831 gdm-session-worker [pam/gdm-password]
│   │ ├─15839 gdm-session-worker [pam/gdm-password]
│   │ ├─15858 /usr/lib/gnome-terminal-server

[...]

└─system.slice
  ├─systemd-hostnamed.service
  │ └─17616 /usr/lib/systemd/systemd-hostnamed
  ├─cron.service
  │ └─1689 /usr/sbin/cron -n
  ├─postfix.service
  │ ├─ 1676 /usr/lib/postfix/master -w
  │ ├─ 1679 qmgr -l -t fifo -u
  │ └─15590 pickup -l -t fifo -u
  ├─sshd.service
  │ └─1436 /usr/sbin/sshd -D

[...]</screen>
   </example>
   <para>
    有关 cgroups 的更多信息，请参见<xref linkend="cha-tuning-cgroups"/>。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-advanced-kill">
   <title>终止服务（发送信号）</title>
   <para>
    如<xref linkend="sec-boot-systemd-advanced-cgroups"/>中所述，在 System V init 系统中，并不总是能够将某个进程指派给其父服务。这导致终止服务及其所有子进程变得很困难。尚未终止的子进程将一直保持为僵停状态。
   </para>
   <para>
    <systemitem class="daemon">systemd</systemitem> 的概念是将每个服务限定在某个 cgroup 中，从而可以明确识别一个服务的所有子进程，因此可让您将信号发送到这些进程中的每一个进程。您可使用 <command>systemctl kill</command> 向服务发送信号。有关可用信号的列表，请参考 <command>man 7 signals</command>。
   </para>
   <variablelist>
    <varlistentry>
     <term>向服务发送 <systemitem>SIGTERM</systemitem></term>
     <listitem>
      <para>
       <systemitem>SIGTERM</systemitem> 是发送的默认信号。
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl kill <replaceable>MY_SERVICE</replaceable></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>向服务发送 <replaceable>SIGNAL</replaceable></term>
     <listitem>
      <para>
       可使用 <option>-s</option> 选项指定应该发送的信号。
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl kill -s <replaceable>SIGNAL</replaceable> <replaceable>MY_SERVICE</replaceable></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>选择进程</term>
     <listitem>
      <para>
       默认情况下，<command>kill</command> 命令会向指定 cgroup 的<option>所有</option>进程发送信号。您可以将发送范围限制为 <option>control</option> 或 <option>main</option> 进程。后一个选项可用于通过发送 <systemitem>SIGHUP</systemitem> 强制服务重新装载其配置的情况：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl kill -s SIGHUP --kill-who=main <replaceable>MY_SERVICE</replaceable></screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-dbus">
   <title>有关 D-Bus 服务的重要说明</title>
   <para>
    D-Bus 服务是 <systemitem class="daemon">systemd</systemitem> 客户端与作为 pid 1 运行的 systemd 管理器之间进行通讯的消息总线。虽然 <systemitem class="daemon">dbus</systemitem> 是个独立的守护程序，但它也是 init 基础架构的组成部分。
   </para>
   <para>
    在正在运行的系统中终止或重启动 <systemitem class="daemon">dbus</systemitem> 的效果类似于尝试终止或重启动 pid 1。此操作将中断 <systemitem class="daemon">systemd</systemitem> 客户端与服务器间的通讯，并使大部分 <systemitem class="daemon">systemd</systemitem> 功能不可用。
   </para>
   <para>
    因此，不建议也不支持终止或重启动 <systemitem class="daemon">dbus</systemitem>。
   </para>
   <para>
    更新 <systemitem>dbus</systemitem> 或与 <systemitem>dbus</systemitem> 有关的软件包需要重引导系统。如果不确定是否需要重引导，请运行 <command>sudo zypper ps -s</command>。如果 <literal>dbus</literal> 显示在所列服务之中，则表明您需要重引导系统。
   </para>
   <para>
    请记住，即使自动更新配置为跳过需要重引导的软件包，<systemitem>dbus</systemitem> 仍会更新。
   </para>
  </sect2>

  

  <sect2 xml:id="sec-boot-systemd-basics-services-debugging">
   <title>调试服务</title>
   <para>
    默认情况下，<systemitem class="daemon">systemd</systemitem> 的输出不会太详细。如果服务启动成功，则不会产生任何输出。如果服务启动失败，则会显示简短的错误消息。不过，<command>systemctl status</command> 提供了调试服务的启动和操作的途径。
   </para>
   <para>
    <systemitem class="daemon">systemd</systemitem> 附带了自己的日志记录机制（<quote>日志</quote>）来记录系统消息。这可让您一并显示服务消息与状态消息。<command>status</command> 命令的工作方式与 <command>tail</command> 相似，也可以采用不同的格式显示日志消息，是一个功能强大的调试工具。
   </para>
   <variablelist>
    <varlistentry>
     <term>显示服务启动失败消息</term>
     <listitem>
      <para>
       每当服务启动失败时，使用 <command>systemctl status <replaceable>MY_SERVICE</replaceable></command> 可获得详细的错误消息：
      </para>
<screen><prompt role="root"># </prompt>systemctl start apache2
Job failed. See system journal and 'systemctl status' for details.
<prompt role="root"># </prompt>systemctl status apache2
   Loaded: loaded (/usr/lib/systemd/system/apache2.service; disabled)
   Active: failed (Result: exit-code) since Mon, 04 Apr 2018 16:52:26 +0200; 29s ago
   Process: 3088 ExecStart=/usr/sbin/start_apache2 -D SYSTEMD -k start (code=exited, status=1/FAILURE)
   CGroup: name=systemd:/system/apache2.service

Apr 04 16:52:26 g144 start_apache2[3088]: httpd2-prefork: Syntax error on line
205 of /etc/apache2/httpd.conf: Syntax error on li...alHost&gt;</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>显示最后 <replaceable>N</replaceable> 条服务消息</term>
     <listitem>
      <para>
       <command>status</command> 子命令的默认行为是显示服务发出的最后 10 条消息。若要更改要显示的消息数目，请使用 <option>--lines=<replaceable>N</replaceable></option> 参数：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl status chronyd
<prompt>&gt; </prompt><command>sudo</command> systemctl --lines=20 status chronyd</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>以附加模式显示服务消息</term>
     <listitem>
      <para>
       要显示服务消息的<quote>实时流</quote>，请使用 <option>--follow</option> 选项，效果与 <command>tail </command> <option>-f</option> 相似：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> systemctl --follow status chronyd</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>消息输出格式</term>
     <listitem>
      <para>
       <option>--output=<replaceable>模式</replaceable></option>参数可让您更改服务消息的输出格式。最重要的可用模式包括：
      </para>
      <variablelist>
       <varlistentry>
        <term><option>short</option></term>
        <listitem>
         <para>
          默认格式。显示日志消息，以及用户能看懂的时戳。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><option>verbose</option></term>
        <listitem>
         <para>
          所有字段的完整输出。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><option>cat</option></term>
        <listitem>
         <para>
          精简输出，不含时戳。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-boot-systemd-timer-units">
  <title><systemitem class="daemon">systemd</systemitem> 计时器单元</title>

  <para>
   与 cron 类似，<systemitem class="daemon">systemd</systemitem> 计时器单元提供了一种在 Linux 上安排作业的机制。虽然 <systemitem class="daemon">systemd</systemitem> 计时器单元的用途与 cron 相同，但其具备几项优点。
  </para>

  <itemizedlist>
   <listitem>
    <para>
     使用计时器单元安排的作业可以依赖其他 <systemitem class="daemon">systemd</systemitem> 服务。
    </para>
   </listitem>
   <listitem>
    <para>
     计时器单元被视为常规 <systemitem class="daemon">systemd</systemitem> 服务，因此可以使用 <command>systemctl</command> 进行管理。
    </para>
   </listitem>
   <listitem>
    <para>
     计时器可以是实时计时器，也可以是单调计时器。
    </para>
   </listitem>
   <listitem>
    <para>
     时间单元会被记录到 <systemitem class="daemon">systemd</systemitem> 日志中，使得更易于监视和查错。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   <systemitem class="daemon">systemd</systemitem> 计时器单元通过 <literal>.timer</literal> 文件扩展名标识。
  </para>

  <sect2 xml:id="sec-boot-systemd-timer-types">
   <title><systemitem class="daemon">systemd</systemitem> 计时器类型</title>
   <para>
    计时器单元可以使用单调和实时计时器。
   </para>
   <itemizedlist>
    <listitem>
     <para>
      与 cron 作业类似，实时计时器是根据日历事件触发的。实时计时器使用选项 <option>OnCalendar</option> 进行定义。
     </para>
    </listitem>
    <listitem>
     <para>
      单调计时器将从某个特定起点开始经过指定时间后触发。后者可以是系统引导或系统单元激活事件。有几个选项可用于定义单调计时器，包括 <option>OnBootSec</option>、<option>OnUnitActiveSec</option> 和 <option>OnTypeSec</option>。单调计时器不是永久的，每次重引导后都将被重置。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-timer-service-units">
   <title><systemitem class="daemon">systemd</systemitem> 计时器和服务单元</title>
   <para>
    每个计时器单元都必须有一个其所控制的对应 <systemitem class="daemon">systemd</systemitem> 单元文件。也就是说，将由 <filename>.timer</filename> 文件激活并管理对应的 <filename>.service</filename> 文件。使用计时器时，<filename>.service</filename> 文件不需要 <literal>[Install]</literal> 部分，因为服务将由计时器管理。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-timer-example">
   <title>具体示例</title>
   <para>
    为了理解 <systemitem class="daemon">systemd</systemitem> 计时器单元的基本知识，我们设置了一个触发 <filename>foo.sh</filename> 外壳脚本的计时器。
   </para>
   <para>
    第一步是创建用于控制外壳脚本的 <systemitem class="daemon">systemd</systemitem> 服务单元。为此，请打开一个新的文本文件进行编辑，并添加以下服务单元定义：
   </para>
<screen>[Unit]
Description="Foo shell script"

[Service]
ExecStart=/usr/local/bin/foo.sh</screen>
   <para>
    将文件以名称 <filename>foo.service</filename> 保存到目录 <filename>/etc/systemd/system/</filename> 中。
   </para>
   <para>
    接下来，打开一个新的文本文件进行编辑，并添加以下计时器定义：
   </para>
<screen>[Unit]
Description="Run foo shell script"

[Timer]
OnBootSec=5min
OnUnitActiveSec=24h
Unit=foo.service

[Install]
WantedBy=multi-user.target</screen>
   <para>
    上述示例中的 <literal>[Timer]</literal> 部分指定了要触发的服务 (<literal>foo.service</literal>) 以及触发时间。在本例中，选项 <option>OnBootSec</option> 指定了一个在系统引导后五分钟触发服务的单调计时器，而选项 <option>OnUnitActiveSec</option> 会在服务被激活后 24 小时触发服务（即计时器将每天触发一次服务）。最后，选项 <option>WantedBy</option> 指定应在系统达到多用户目标时启动计时器。
   </para>
   <para>
    您也可以不指定单调计时器，而是使用选项 <option>OnCalendar</option> 指定实时计时器。下面的实时计时器定义从星期一 12:00 开始，每周触发一次相关服务单元。
   </para>
<screen>[Timer]
OnCalendar=weekly
Persistent=true</screen>
   <para>
    选项 <option>Persistent=true</option> 表示如果计时器错过了上一次启动时间（例如，由于系统关闭），则会在计时器激活后立即触发服务。
   </para>
   <para>
    选项 <option>OnCalendar</option> 还可以用于使用以下格式来定义触发服务的具体日期和时间：<literal>DayOfWeek Year-Month-Day Hour:Minute:Second</literal>。下面的示例会在每天早上 5 点触发服务：
   </para>
<screen>OnCalendar=*-*-* 5:00:00</screen>
   <para>
    您可以使用星号指定任何值，使用逗号列出可能的值。使用由 .. 分隔的两个值可表示一个连续的范围。下面的示例会在每个月的星期五下午 6 点触发服务：
   </para>
<screen>OnCalendar=Fri *-*-1..7 18:00:00</screen>
   <para>
    要在不同的时间触发服务，您可以指定多个 <option>OnCalendar</option> 项：
   </para>
<screen>OnCalendar=Mon..Fri 10:00
OnCalendar=Sat,Sun 22:00</screen>
   <para>
    在上面的示例中，会在工作日的上午 10 点和周末的晚上 10 点触发服务。
   </para>
   <para>
    编辑好计时器单元文件后，使用名称 <filename>foo.timer</filename> 将其保存到 <filename>/etc/systemd/system/</filename> 目录中。要检查所创建的单元文件是否正确，请运行以下命令：
   </para>
<screen><prompt>&gt; </prompt><command>sudo</command>  systemd-analyze verify /etc/systemd/system/foo.*</screen>
   <para>
    如果命令未返回任何输出，则表示文件成功通过了校验。
   </para>
   <para>
    要启动计时器，请使用命令 <command>sudo systemctl start foo.timer</command>。要在引导时启用计时器，请运行命令 <command>sudo systemctl enable foo.timer</command>。
   </para>
  </sect2>

  <sect2 xml:id="sec-boot-systemd-timer-manage">
   <title>管理 <systemitem class="daemon">systemd</systemitem> 计时器</title>
   <para>
    由于计时器被视为常规 <systemitem class="daemon">systemd</systemitem> 单元，因此您可以使用 <command>systemctl</command> 来管理它们。您可以使用 <command>systemctl start</command> 启动计时器，使用 <command>systemctl enable</command> 启用计时器，依此类推。除此之外，您还可以使用命令 <command>systemctl list-timers</command> 列出所有活动计时器。要列出包括非活动计时器在内的所有计时器，请运行命令 <command>systemctl list-timers --all</command>。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-boot-systemd-info">
  <title>更多信息</title>

  <para>
   有关 <systemitem class="daemon">systemd</systemitem> 的详细信息，请参考以下联机资源：
  </para>

  <variablelist>
   <varlistentry>
    <term>主页</term>
    <listitem>
     <para>
      <link xlink:href="http://www.freedesktop.org/wiki/Software/systemd"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>面向管理员的 <systemitem class="daemon">systemd</systemitem></term>
    <listitem>
     <para>
      Lennart Pöttering 是 <systemitem class="daemon">systemd</systemitem> 的作者之一，他撰写了一系列博客文章（写本章时已有 13 篇）。它们可在 <link xlink:href="http://0pointer.de/blog/projects"/> 找到。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
