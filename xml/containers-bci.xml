<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
    [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xml:id="cha-bci" xml:lang="en"
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>&bci;s</title>
 </info>
 <sect1 xml:id="sec-bci-intro">
  <title>Introduction to &bci;s</title>

  <para>
   &bci; (&bcia;) are minimal &sls; 15-based images that you can use to
   develop, deploy, and share applications. There are two types of &bcia;:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     General-purpose &bcia; can be used for building custom container images
     and for deploying applications.
    </para>
   </listitem>
   <listitem>
    <para>
     Language stack &bcia; provide minimal environments for developing and
     deploying applications in specific programming languages.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   In addition to that, we will provide Application Container Images based on
   &bcia; featuring popular containerized applications like Nginx, PostgreSQL,
   MariaDB and <link xlink:href="https://github.com/SUSE/rmt">RMT</link>.
  </para>

  <sect2 xml:id="sec-bci-highlihts">
   <title>Highlights</title>
   <itemizedlist>
    <listitem>
     <para>
      &bcia; are fully compatible with &sls;, but <emphasis>they do not require
      a subscription to run and distribute them.</emphasis>
     </para>
    </listitem>
    <listitem>
     <para>
      &bcia; automatically run in FIPS-compatible mode when the host operating
      system is running in FIPS mode.
     </para>
    </listitem>
    <listitem>
     <para>
      Each &bcia; includes the RPM database, which makes it possible to audit
      the contents of the container image. You can use the RPM database to
      determine the specific version of the RPM package any given file belongs
      to. This allows you to ensure that a container image is not susceptible
      to known and already fixed vulnerabilities.
     </para>
    </listitem>
    <listitem>
     <para>
      All &bcia; (except for those without <systemitem>zypper</systemitem>)
      come with the <systemitem>container-suseconnect</systemitem> service.
      This gives containers that run on a registered &slsa; host access to the
      full &slsa; repositories. <systemitem>container-suseconnect</systemitem>
      is invoked automatically when you run <systemitem>zypper</systemitem> for
      the first time, and the service adds the correct &slsa; repositories into
      the running container. On an unregistered &slsa; host or on a non-&slsa;
      host, the service does nothing.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-general-purpose-bci">
   <title>General-purpose &bcia;</title>
   <para>
    There are four general purpose &bcia;, and each container image comes with
    a minimum set of packages to keep its size low. You can use a general
    purpose &bcia; either as a starting point for building custom container
    images, or as a platform for deploying specific software. For more
    information about general purpose &bcia;, see
    <xref linkend="sec-bci-variants" />.
   </para>
  </sect2>

  <sect2 xml:id="language-stack-bci">
   <title>Language stack &bcia;</title>
   <para>
    Language stack &bcia; are built on top of the BCI-Base general-purpose
    &bcia;. Each container image comes with the <systemitem>zypper</systemitem>
    stack and the free <literal>SLE_BCI</literal> repository. Additionally,
    each image includes most common tools for building and deploying
    applications in the specific language environment. This includes tools like
    a compiler or interpreter as well as the language specific package manager.
    For more information about language stack &bcia;, see
    <xref linkend="sec-language-stack-bci" />.
   </para>
  </sect2>

  <sect2 xml:id="status-lifecycle-bci">
   <title>Important note on status and lifecycle</title>
   <para>
    All container images, except for base, are currently classified as tech
    preview, and SUSE doesn't provide official support for them. This
    information is visible on the web on
    <link xlink:href="https://registry.suse.com">registry.suse.com</link>. In
    addition to that, it is also indicated via the
    <literal>com.suse.techpreview</literal> label whether a container image
    still has the tech preview status. You can use the skopeo and jq utilities
    to check the status of the desired &bcia; as follows:
   </para>
<screen>skopeo inspect docker://registry.suse.com/bci/bci-micro:15.4 | jq '.Labels["com.suse.techpreview"]'
skopeo inspect docker://registry.suse.com/bci/bci-base:15.4 | jq '.Labels["com.suse.techpreview"]'
null</screen>
   <para>
    In the example above, the <literal>com.suse.techpreview</literal> label is
    set to 1 in the <literal>bci-micro</literal> container image, indicating
    that the image still has the tech preview status. Unlike like the general
    purpose &bcia;, the language stack &bcia; may not follow the lifecycle of
    the &slea; distribution: they are supported as long as the respective
    language stack receives support. In other words, new versions of &bcia;
    (indicated by the OCI tags) may be released during the lifecycle of a
    &slea; Service Pack, while older versions may become unsupported. Refer to
    <link xlink:href="https://suse.com/lifecycle">suse.com/lifecycle</link> to
    find out whether the container in question is still under support.
   </para>
  </sect2>

  <sect2 xml:id="getting-started-bci">
   <title>Getting started</title>
   <para>
    The &bcia; are available as OCI-compatible container images directly from
    <link xlink:href="https://registry.suse.com">registry.suse.com</link> and
    can be used like any other container image. For example, using one of the
    general purpose containers:
   </para>
<screen>&prompt.user;podman run --rm -it registry.suse.com/bci/bci-base:15.4 grep '^NAME' /etc/os-release
NAME="SLES"</screen>
   <para>
    Alternatively, you can use &bcia; in Dockerfile as follows:
   </para>
<screen>FROM registry.suse.com/bci/bci-base:15.4
RUN zypper -n in python3 &amp;&amp; \
    echo "Hello Green World!" > index.html
ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
EXPOSE 8000</screen>
   <para>
    You can then build container images using the <command>docker build
    .</command> or <command>buildah bud .</command> commands:
   </para>
<screen>&prompt.user;docker build .
Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM registry.suse.com/bci/bci-base:15.4
 ---> e34487b4c4e1
Step 2/4 : RUN zypper -n in python3 &amp;&amp;     echo "Hello Green World!" > index.html
 ---> Using cache
 ---> 9b527dfa45e8
Step 3/4 : ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
 ---> Using cache
 ---> 953080e91e1e
Step 4/4 : EXPOSE 8000
 ---> Using cache
 ---> 48b33ec590a6
Successfully built 48b33ec590a6
 
&prompt.user;docker run -p 8000:8000 --rm -d 48b33ec590a6
575ad7edf43e11c2c9474055f7f6b7a221078739fc8ce5765b0e34a0c899b46a
 
&prompt.user;curl localhost:8000
Hello Green World!</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-bci-why">
  <title>Why &bci;s</title>

  <para>
   &bcia;s offer a platform for creating &slea;-based custom container images
   and containerized applications that can be distributed freely. &bcia;s
   feature the same predictable enterprise lifecycle as &slsa;. The SLE_BCI 15
   SP3 and SP4 repository (which is a subset of the &slea; repository) gives
   &bcia;s access to 4,000 packages available for the &x86-64;, &aarch64;,
   &ppc64le;, and s390x architectures. The packages in the repository have
   undergone quality assurance and security audits by &suse;. The container
   images are FIPS-compliant when running on a host in FIPS mode. In addition
   to that, &suse; can provide official support for &bcia;s through &suse;
   subscription plans.
  </para>

  <variablelist>
   <varlistentry>
    <term>Security</term>
    <listitem>
     <para>
      Each package in the SLE_BCI repository undergoes security audits, and
      &bcia;s benefit from the same mechanism of dealing with CVEs as SLES. All
      discovered and fixed vulnerabilities are announced via e-mail, the
      dedicated <link xlink:href="https://www.suse.com/security/cve/">CVE
      pages</link>, and as OVAL and CVRF data. To ensure a secure supply chain,
      all container images are signed with Notary v1, &podman;'s GPG
      signatures, and Sigstore Cosign.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Stability</term>
    <listitem>
     <para>
      Since &bcia;s are based on &slea;, they feature the same level of
      stability and quality assurance as &sls;. Similar to &slsa;, &bcia;s
      receive maintenance updates that provide bug fixes, improvements, and
      security patches.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Tooling and integration</term>
    <listitem>
     <para>
      &bcia;s are designed to provide drop-in replacements for popular
      container images available on hub.docker.com. You can use the
      general-purpose &bcia;s and the tools they put at your disposal to create
      custom container images, while the language stack &bcia;s provide a
      foundation and the required tooling for building containerized
      applications.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Redistribution</term>
    <listitem>
     <para>
      BCIs are covered by a permissive
      <link xlink:href="https://www.suse.com/de-de/licensing/eula/#bci">EULA</link>
      that allows you to redistribute custom container images based on a BCI.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-bci-variants">
  <title>BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox</title>

  <para>
   &suse; offers several general-purpose &bci;s that are intended as deployment
   targets or as foundations for creating customized images: BCI-Base,
   BCI-Minimal, BCI-Micro, and BCI-BusyBox. These images share the common
   &slsa; base, and none of them ship with a specific language or an
   application stack. All images feature the RPM database (even if the specific
   image does not include the RPM package manager) that can be used to verify
   the provenance of every file in the image. Each image includes the &slsa;
   certificate bundle, which allows the deployed applications to use the
   system's certificates to verify TLS connections.
  </para>

  <sect2 xml:id="bci-variants-table">
   <title>Quick overview</title>
   <para>
    The table below provides a quick overview of the differences between
    BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox.
   </para>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="bci-variants.png" width="80%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="bci-variants.png" width="100%"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
  </sect2>

  <sect2 xml:id="bci-variants-base">
   <title>BCI-Base and BCI-Init: When you need flexibility</title>
   <para>
    This &bcia; comes with the Zypper package manager and a free SLE-BCI
    repository. This allows you to install software available in the repository
    and customize the image during the build. The downside is the size of the
    image. It is the largest of the general-purpose &bcia;s, so it is not
    always the best choice for a deployment image.
   </para>
   <para>
    A variant of BCI-Base called BCI-Init comes with systemd preinstalled. The
    BCI-Init container image can be useful in scenarios requiring systemd for
    managing services in a single container.
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-minimal">
   <title>BCI-Minimal: When you do not need Zypper</title>
   <para>
    This is a stripped-down version of the BCI-Base image. BCI-Minimal comes
    without Zypper, but it does have the RPM package manager installed. This
    significantly reduces the size of the image. However, while RPM can install
    and remove packages, it lacks support for repositories and automated
    dependency resolution. The BCI-Minimal image is therefore intended for
    creating deployment containers, and then installing the desired RPM
    packages inside the containers. Although you can install the required
    dependencies, you need to download and resolve them manually. However, this
    approach is not recommended as it is prone to errors.
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-micro">
   <title>BCI-Micro: When you need to deploy static binaries</title>
   <para>
    This image is similar to BCI-Minimal but without the RPM package manager.
    The primary use case for the image is deploying static binaries produced
    externally or during multi-stage builds. As there is no straightforward way
    to install additional dependencies inside the container image, we recommend
    deploying a project using the BCI-Minimal image only when the final build
    artifact bundles all dependencies and has no external runtime requirements
    (like Python or Ruby).
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-busybox">
   <title>BCI-BusyBox: When you need the smallest and GPLv3-free image</title>
   <para>
    Similar to BCI-Micro, the BCI-BusyBox image comes with the most basic tools
    only. However, these tools are provided by the BusyBox project. This has
    the benefit of further size reduction. Furthermore, the image contains no
    GPLv3 licensed software. When using the image, keep in mind that there are
    certain differences between the BusyBox tools and the GNU Coreutils. So
    scripts written for a system that uses GNU Coreutils may require
    modification to work with BusyBox.
   </para>
  </sect2>

  <sect2 xml:id="bci-variants-size">
   <title>Approximate sizes</title>
   <para>
    For your reference, the list below provides an approximate size of each
    &bcia;. Keep in mind that the provided numbers are rough estimations.
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>BCI-Base</literal> ~94&nbsp;MB
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>BCI-Minimal</literal> ~42&nbsp;MB
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>BCI-Micro</literal> ~26&nbsp;MB
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>BCI-BusyBox</literal> ~14&nbsp;MB
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-language-stack-bci">
  <title>Language stack &bci;s</title>

  <para>
   If you have a working knowledge of containers, you will not have any
   difficulties using &bcia;s. However, there are certain features that set
   &bcia;s apart from similar offerings, like images based on Debian or Alpine
   Linux. And understanding the specifics can help you to get the most out of
   &bcia;s in the shortest time possible.
  </para>

  <sect2 xml:id="environment-bci-language-stack">
   <title>Language stack &bcia;s</title>
   <para>
    Language stack &bcia; are built on top of BCI-Base. Below is an overview of
    the available language stack &bcia;s.
   </para>
   <variablelist>
    <varlistentry>
     <term>python</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/python">registry.suse.com/bci/python</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 3.6, 3.9, 3.10
        </para>
       </listitem>
       <listitem>
        <para>
         Ships with the <package>python3</package> version from the tag and
         <package>pip3</package>, <package>curl</package>,
         <package>git</package> tools.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>node</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/node">registry.suse.com/bci/node</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 12, 14, 16
        </para>
       </listitem>
       <listitem>
        <para>
         Comes with <package>nodejs</package> version from the tag,
         <package>npm</package> and <package>git</package>. The
         <package>yarn</package> package manager can be installed with the
         <command>npm install -g yarn</command> command.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>openjdk</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/openjdk">registry.suse.com/bci/openjdk</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 11, 17
        </para>
       </listitem>
       <listitem>
        <para>
         Ships with the OpenJDK runtime. Designed for deploying Java
         applications.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>openjdk-devel</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/openjdk-devel">registry.suse.com/bci/openjdk-devel</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 11, 17
        </para>
       </listitem>
       <listitem>
        <para>
         Includes the development part of OpenJDK in addition to the OpenJDK
         runtime. Instead of Bash, the default entry point is the
         <systemitem>jshell</systemitem> shell.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ruby</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/ruby">registry.suse.com/bci/ruby</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 2.5
        </para>
       </listitem>
       <listitem>
        <para>
         A standard development environment based on Ruby 2.5, featuring
         <package>ruby</package>, <package>gem</package> and
         <package>bundler</package> as well as <package>git</package> and
         <package>curl</package>.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>golang</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/golang">registry.suse.com/bci/golang</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 1.16, 1.17, 1.18
        </para>
       </listitem>
       <listitem>
        <para>
         Ships with the <package>go</package> compiler version specified in the
         tag.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dotnet-runtime</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/dotnet-runtime">registry.suse.com/bci/dotnet-runtime</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 3.1, 5.0, 6.0
        </para>
       </listitem>
       <listitem>
        <para>
         Includes the .NET runtime from Microsoft and the Microsoft .NET
         repository.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dotnet-aspnet</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/dotnet-aspnet">registry.suse.com/bci/dotnet-aspnet</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 3.1, 5.0, 6.0
        </para>
       </listitem>
       <listitem>
        <para>
         Ships with the ASP.NET runtime from Microsoft and the Microsoft .NET
         repository.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>dotnet-sdk</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/suse/dotnet-sdk">registry.suse.com/suse/dotnet-sdk</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 3.1, 5.0, 6.0
        </para>
       </listitem>
       <listitem>
        <para>
         Comes with the .NET and ASP.NET SDK from Microsoft as well as the
         Microsoft .NET repository.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>rust</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         URL:
         <link xlink:href="registry.suse.com/bci/rust">registry.suse.com/bci/rust</link>
        </para>
       </listitem>
       <listitem>
        <para>
         Tags: 1.56, 1.57, 1.58, 1.59
        </para>
       </listitem>
       <listitem>
        <para>
         Ships with the Rust compiler and the <package>cargo</package> package
         manager.
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="bci-package-manager">
   <title>Package manager</title>
   <para>
    The default package manager in &sle; is Zypper. Similar to APT in Debian
    and APK in Alpine Linux, Zypper offers a command-line interface for all
    package management tasks. Below is brief overview of commonly used
    container-related Zypper commands.
   </para>
   <variablelist>
    <varlistentry>
     <term>Install packages</term>
     <listitem>
      <para>
       <command>zypper --non-interactive install
       <replaceable>PACKAGE_NAME</replaceable></command>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Add a repository</term>
     <listitem>
      <para>
       <command>zypper --non-interactive addrepo
       <replaceable>REPOSITORY_URL</replaceable>;</command> <command>zypper
       --non-interactive refresh</command>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Update all packages</term>
     <listitem>
      <para>
       <command>zypper --non-interactive update</command>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Remove a package</term>
     <listitem>
      <para>
       <command>zypper --non-interactive remove --clean-deps
       <replaceable>PACKAGE_NAME</replaceable></command> (the
       <option>--clean-deps</option> flag ensures that no longer required
       dependencies are removed as well)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Clean up temporary files</term>
     <listitem>
      <para>
       <command>zypper clean</command>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    For more information on using Zypper, refer to
    <link xlink:href="https://documentation.suse.com/sles-15/html/SLES-all/cha-sw-cl.html#sec-zypper"/>.
   </para>
   <para>
    All the described commands use the <option>--non-interactive</option> flag
    to skip confirmations, since you cannot approve these manually during
    container builds. Keep in mind that you must use the flag with any command
    that modifies the system. Also note that <option>--non-interactive</option>
    is not a "yes to all" flag. Instead, <option>--non-interactive</option>
    confirms what is considered to be the intention of the user. For example,
    an installation command with the <option>--non-interactive</option> option
    fails if it needs to import new repository signing keys, as that is
    something that the user should verify themselves.
   </para>
  </sect2>

  <sect2 xml:id="bci-task-examples">
   <title>Common patterns</title>
   <para>
    Here are a few examples that can give you an idea how to accomplish certain
    tasks in &bcia; compared to Debian.
   </para>
   <variablelist>
    <varlistentry>
     <term>Remove orphaned packages</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian: <command>apt-get autoremove -y</command>
        </para>
       </listitem>
       <listitem>
        <para>
         &bcia;: Not required as long as you remove installed packages using
         the <command>zypper --non-interactive remove --clean-deps
         <replaceable>PACKAGE_NAME</replaceable></command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Obtain container's architecture</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian: <command>dpkgArch="$(dpkg --print-architecture | awk -F- '{
         print $NF }')"</command>
        </para>
       </listitem>
       <listitem>
        <para>
         &bcia;: <command>arch="$(uname -p|sed 's/x86_64/amd64/')"</command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Install packages required for compilation</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian: <command>apt-get install -y build-essential</command>
        </para>
       </listitem>
       <listitem>
        <para>
         &bcia;: <command>zypper -n in gcc gcc-c++ make</command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Verify GnuPG signatures</term>
     <listitem>
      <itemizedlist>
       <listitem>
        <para>
         Debian: <command>gpg --batch --verify
         <replaceable>SIGNATURE_URL</replaceable>
         <replaceable>FILE_TO_VERIFY</replaceable></command>
        </para>
       </listitem>
       <listitem>
        <para>
         &bcia;: <command>zypper -n in dirmngr; gpg --batch --verify
         <replaceable>SIGNATURE_URL</replaceable>
         <replaceable>FILE_TO_VERIFY</replaceable>; zypper -n remove
         --clean-deps dirmngr; zypper -n clean</command>
        </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="bci-package-naming">
   <title>Package naming conventions</title>
   <para>
    &sle; package naming conventions differ from Debian, Ubuntu, and Alpine,
    and they are closer to those of &rhel;. The main difference is that
    development packages of libraries (that is, packages containing headers and
    build description files) are named
    <package><replaceable>PACKAGE</replaceable>-devel</package> in &sle;, as
    opposed to <package><replaceable>PACKAGE</replaceable>-dev</package> as
    they are in Debian and Ubuntu. When in doubt, search for the package
    directly using the following command: <command>docker run --rm
    registry.suse.com/bci/bci-base:<replaceable>OS_VERSION</replaceable> zypper
    search <replaceable>PACKAGE_NAME</replaceable></command> (replace
    <replaceable>OS_VERSION</replaceable> with the appropriate service version
    number, for example: <literal>15.3</literal> or <literal>15.4</literal>).
   </para>
   <para></para>
  </sect2>

  <sect2 xml:id="bci-gpg-keys">
   <title>Adding GPG signing keys</title>
   <para>
    Adding external repositories to a container or container image normally
    requires importing the GPG key used for signing the packages. This can be
    done with the <command>rpm --import
    <replaceable>KEY_URL</replaceable></command> command. This adds the key to
    the RPM database, and all packages from the repository can be installed
    afterwards.
   </para>
  </sect2>
 </sect1>
</chapter>
