<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-ldap">
 <title>LDAP&mdash;a directory service</title>
 <info>
      <abstract>
        <para>
    The Lightweight Directory Access Protocol (LDAP) is a protocol
    designed to access and maintain information directories. LDAP can be
    used for tasks such as user and group management, system configuration 
    management, and address management. In &productname; &productnumbershort; the
    LDAP service is provided by the &ds389;, replacing OpenLDAP.    
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>

  <para>
   Ideally, a central server stores the data in a directory and distributes
   it to all clients using a well-defined protocol. The structured data allow
   a wide range of applications to access them. A central repository reduces
   the necessary administrative effort. The use of an open and standardized
   protocol such as LDAP ensures that as many client applications as
   possible can access such information.
  </para>
  <para>
   A directory in this context is a type of database optimized for quick and
   effective reading and searching. The type of data stored in a directory tends
   to be long lived and changes infrequently. This allows the LDAP service to be
   optimized for high performance concurrent reads, whereas conventional databases
   are optimized for accepting many writes to data in a short time.
  </para>

 <sect1 xml:id="sec-security-ldap-tree">
  <title>Structure of an LDAP directory tree</title>
<!--
  taroth 2019-02-27: acc. to wbrown the content of this section is still correct,
  but the section should be revised in the future - for input, see
  https://fy.blackhats.net.au/blog/html/pages/ldap_guide_part_1_foundations.html
-->
   <para>
   This section introduces the layout of an LDAP directory tree, and provides
   the basic terminology used with regard to LDAP. <phrase os="sles;osuse">If
    you are familiar with LDAP, read on at <xref linkend="sec-security-ldap-server"/>.
   </phrase>
  </para>

  <para>
   An LDAP directory has a tree structure. All entries (called objects) of
   the directory have a defined position within this hierarchy. This
   hierarchy is called the <emphasis>directory information tree</emphasis>
   (DIT). The complete path to the desired entry, which unambiguously
   identifies it, is called the <emphasis>distinguished name</emphasis> or
   DN. An object in the tree is identified by its <emphasis>relative distinguished
   name</emphasis> (RDN). The distinguished name is built from the RDNs of all
   entries on the path to the entry.
  </para>

  <para>
   The relations within an LDAP directory tree become more evident in the
   following example, shown in <xref linkend="fig-ldap-tree"/>.
  </para>

  <figure xml:id="fig-ldap-tree">
   <title>Structure of an LDAP directory</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ldap_tree.svg" width="85%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ldap_tree.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   The complete diagram is a fictional directory information tree. The
   entries on three levels are depicted. Each entry corresponds to one box
   in the image. The complete, valid <emphasis>distinguished name</emphasis>
   for the fictional employee <systemitem class="username">Geeko
   Linux</systemitem>, in this case, is <literal>cn=Geeko
   Linux,ou=doc,dc=example,dc=com</literal>. It is composed by adding the
   RDN <literal>cn=Geeko Linux</literal> to the DN of the preceding entry
   <literal>ou=doc,dc=example,dc=com</literal>.
  </para>

<!-- ke: yes, these things are called "Schema" -->

  <para>
   The types of objects that can be stored in the DIT are globally
   determined following a <emphasis>Schema</emphasis>. The type of an object
   is determined by the <emphasis>object class</emphasis>. The object class
   determines what attributes the relevant object must or may be assigned.
   The Schema contains all object classes and attributes which can be used by
   the LDAP server. Attributes are a structured data type. Their syntax, ordering
   and other behavior is defined by the Schema. LDAP servers supply a core set of
   Schemas which can work in a broad variety of environments. If a custom Schema
   is required, you can upload it to an LDAP server.
  </para>

  <para>
   <xref linkend="tab-ldap-schema"/> offers a small overview of the object
   classes from <filename>00core.ldif</filename> and
   <filename>06inetorgperson.ldif</filename> used in the example, including
   required attributes (Req. Attr.) and valid attribute values. After installing
   <systemitem>389-ds</systemitem>, these can be found in
   <filename>usr/share/dirsrv/schema</filename>.
<!-- intro abbrev "Req. Attr." too shorten the table header -->
  </para>

  <table xml:id="tab-ldap-schema">
   <title>Commonly used object classes and attributes</title>
   <tgroup cols="4">
    <colspec colname="c1" colwidth="30*"/>
    <colspec colname="c2" colwidth="40*"/>
    <colspec colname="c3" colwidth="16*"/>
    <colspec colname="c4" colwidth="14*"/>
    <thead>
     <row>
      <entry>
       <para>
        Object Class
       </para>
      </entry>
      <entry>
       <para>
        Meaning
       </para>
      </entry>
      <entry>
       <para>
        Example Entry
       </para>
      </entry>
      <entry>
       <para>
        Req. Attr.
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <literal>domain</literal>
       </para>
      </entry>
      <entry>
       <para>
        name components of the domain
       </para>
      </entry>
      <entry>
       <para>
        example
       </para>
      </entry>
      <entry>
       <para>
        displayName
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>organizationalUnit</literal>
       </para>
      </entry>
      <entry>
       <para>
        organizational unit
       </para>
      </entry>
      <entry>
       <para>
        doc
       </para>
      </entry>
      <entry>
       <para>
        ou
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>nsPerson</literal>
       </para>
      </entry>
      <entry>
       <para>
        person-related data for the
        intranet or Internet
       </para>
      </entry>
      <entry>
       <para>
        Geeko Linux
       </para>
      </entry>
      <entry>
       <para>
        cn
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   <xref linkend="aus-ldap-schema-help"/> shows an excerpt from a Schema
   directive with explanations.
  </para>

  <example xml:id="aus-ldap-schema-help">
   <title>Excerpt from CN=schema</title>
<screen>attributetype (1.2.840.113556.1.2.102 NAME 'memberOf' <co xml:id="co-ldap-schema-core-att-type"/>
       DESC 'Group that the entry belongs to' <co xml:id="co-ldap-schema-core-desc"/>
       SYNTAX 1.3.6.1.4.1.1466.115.121.1.12 <co xml:id="co-ldap-schema-core-syntax"/>
       X-ORIGIN 'Netscape Delegated Administrator') <co xml:id="co-ldap-schema-core-xorigin"/>

objectclass (2.16.840.1.113730.3.2.333 NAME 'nsPerson' <co xml:id="co-ldap-schema-core-oc"/>
       DESC 'A representation of a person in a directory server' <co xml:id="co-ldap-schema-core-desc-oc"/>
       SUP top STRUCTURAL <co xml:id="co-ldap-schema-core-sup-oc"/>
       MUST ( displayName $ cn ) <co xml:id="co-ldap-schema-core-must-oc"/>
       MAY ( userPassword $ seeAlso $ description $ legalName $ mail \
             $ preferredLanguage ) <co xml:id="co-ldap-schema-core-may-oc"/>
       X-ORIGIN '389 Directory Server Project'
  ...</screen>
  </example>
  <calloutlist>
   <callout arearefs="co-ldap-schema-core-att-type">
    <para>
     The name of the attribute, its unique <emphasis>object
     identifier</emphasis> (OID, numerical), and the abbreviation of the
     attribute.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-desc">
    <para>
     A brief description of the attribute with <literal>DESC</literal>. The
     corresponding RFC, on which the definition is based, may also mentioned
     here.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-syntax">
    <para>
      The type of data that can be held in the attribute. In this case, it is a
      case-insensitive directory string.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-xorigin">
    <para>
     The source of the schema element (for example, the name of the project).
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-oc">
    <para>
     The definition of the object class <literal>nsPerson</literal> begins with
     an OID and the name of the object class (like the definition of
     the attribute).
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-desc-oc">
    <para>
     A brief description of the object class.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-sup-oc">
    <para>
     The <literal>SUP top</literal> entry indicates that this object class
     is not subordinate to another object class.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-must-oc">
    <para>
     With <literal>MUST</literal> list all attribute types that must be used
     with an object of the type
     <literal>nsPerson</literal>.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-may-oc">
    <para>
     With <literal>MAY</literal> list all attribute types that are optionally
     permitted with this object class.
    </para>
   </callout>
  </calloutlist>
 </sect1>

 <sect1 xml:id="sec-security-ldap-server-install">
  <title>Installing the software for &ds389;</title>
   <para>
    The <systemitem>389-ds</systemitem> package contains the &ds389; and the
    administration tools. Install it with the following command:
    </para>
    <screen>&prompt.sudo;zypper install 389-ds</screen>
    <para>
     After installation, you can set up the server 
     <phrase os="sles;osuse">as described in <xref linkend="sec-security-ldap-server"
      xrefstyle="select:label"/>.</phrase>      
     <!--or create a
     very basic setup with &yast; <phrase os="sles;osuse">(as described in
      <xref linkend="sec-security-ldap-server-yast"
     xrefstyle="select:label"/>)</phrase>.-->
    </para>
 </sect1>

 <sect1 xml:id="sec-security-ldap-server">
  <title>Setting up a &ds389; testing and development instance</title>
  <para>
      You will use the <command>dscreate</command> command to create new
      &ds389; instances, and the <command>dsctl</command> command to cleanly
      remove them.
  </para>
  <para>
      There are two ways to configure and create a new instance: from a custom
      configuration file, and from an auto-generated template file.
      You may use the auto-generated template without changes for a test instance,
      though for a production system you must carefully review it and make 
      necessary changes.
  </para>
  <para>
      Then you will set up administration credentials, manage users and groups,
      and configure identity services.
  </para>
  <para>
      Follow these steps to set up a simple instance for testing and development, 
      populated with a small set of sample entries.
  </para>
  <procedure>
   <step>
    <para>
     <!--Creating the Directory Server Instance from inf file-->
     <xref linkend="sec-security-ldap-server-instance" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
     <!--Creating the Directory Server Instance from a template-->
     <xref linkend="sec-security-ldap-server-template" xrefstyle="select:title"/>
    </para>
   </step>
    <!-- <step>
  <para>
     Using CA Certificates for TLS Connections
      <xref linkend="sec-security-ldap-server-ca" xrefstyle="select:title"/>
    </para>
    </step> -->
   <step>
    <para>
     <!--Configuring Admin Credentials for Local Access-->
      <xref linkend="sec-security-ldap-server-credentials" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
    <!--Configuring Users and Groups-->
     <xref linkend="sec-security-ldap-server-users" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
    <!--Configuring SSSD-->
     <xref linkend="sec-security-ldap-server-sssd" xrefstyle="select:title"/>
    </para>
   </step>
  </procedure>
  <para>
   <remark>taroth 2019-06-19: some topics like 'configuring other applications'
    and 'backup and restore' to be added later on</remark>
  </para>
   <!--
    *  configuring other applications (showing "dsidm instance client_config display")
    * backup and restore
   -->
   <para>
   The &ds389; is controlled by three primary commands:
  </para>
  <variablelist>
   <varlistentry>
    <term><command>dsctl</command></term>
    <listitem>
     <para>
      Manages a local instance and requires &rootuser; permissions. Requires you
      to be connected to a terminal which is running the directory server instance.
      Used for starting, stopping, backing up the database, and more.
     </para>
    </listitem>
   </varlistentry>
    <varlistentry>
     <term><command>dsconf</command></term>
     <listitem>
      <para>
       The primary tool used for administration and configuration of the server.
       Manages an instance's configuration via its external interfaces. This allows
       you to make configuration changes remotely on the instance.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>dsidm</command></term>
     <listitem>
      <para>
       Used for identity management (managing users, groups, passwords etc.).
       The permissions are granted by access controls, so, for example, users can
       reset their own password or change details of their own account.
      </para>
     </listitem>
    </varlistentry>
  </variablelist>
 
    <sect2 xml:id="sec-security-ldap-server-instance">
  <title>Creating a &ds389; instance with a custom configuration file</title>
    <para>
     You may create a new &ds389; instance from a simple custom configuration
     file. This file must be in the INF format, and you may name it anything you
     like.
    </para>
    <para>
       The default instance name is <literal>localhost</literal>. The instance 
       name cannot be changed after it has been created. It is better
       to create your own instance name, rather than using the default, to avoid 
       confusion and to enable a better understanding of how it all works.
    </para>
    <para>
     <xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/> shows an
     example configuration file that you can use to create a new &ds389; instance.
     You may copy and use this file, though be sure to create your own password.
    </para>
   <procedure>
    <step>
     <para>
      Copy the following example file, <filename>ldap1.inf</filename>, to 
      your home directory:
     </para>
     <example xml:id="ex-ldap-389-ds-inf">
      <title>Minimal &ds389; instance configuration file</title>
      <screen># <replaceable>ldap1.inf</replaceable>
        
[general]
config_version = 2 <co xml:id="co-ldap-389-ds-config-version"/>

[slapd]
root_password = <replaceable>password</replaceable><co xml:id="co-ldap-389-ds-rootpasswd"/>
self_sign_cert = True <co xml:id="co-ldap-389-ds-cert"/>
instance_name = <replaceable>ldap1</replaceable>

[backend-userroot]
sample_entries = yes <co xml:id="co-ldap-389-ds-sample-entries"/>
suffix = <replaceable>dc=ldap1,dc=com</replaceable></screen>

      <calloutlist>
       <callout arearefs="co-ldap-389-ds-config-version">
        <para>
         This line is required, indicating that this is a version 2 setup INF
         file.
        </para>
       </callout>
       <callout arearefs="co-ldap-389-ds-rootpasswd">
        <para>
         Create a <varname>root_password</varname> for
         the ldap user <literal>cn=Directory Manager</literal>. This user is for
         connecting (binding) to the directory.
        </para>
       </callout>
       <callout arearefs="co-ldap-389-ds-cert">
        <para>
         Create self-signed server certificates in 
         <filename>/etc/dirsrv/slapd-<replaceable>instance-name</replaceable></filename>.
        </para>
       </callout>
       <callout arearefs="co-ldap-389-ds-sample-entries">
        <para>
         Populate the new instance with sample user and group entries.
        </para>
       </callout>       
      </calloutlist>
     </example>
   </step>
   <step>
    <para>
     To create the &ds389; instance from <xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/>, run the following command:
    </para>
    <screen>&prompt.sudo;dscreate -v from-file <replaceable>ldap1.inf</replaceable> | tee <replaceable>ldap1-output.txt</replaceable></screen>
    <para>
     This shows all activity during the instance creation, stores all the messages in
     <filename>ldap1-output.txt</filename>, and creates a working 
     LDAP server in about a minute. The verbose output contains a lot of useful
     information. If you don't want to save it then delete the 
     <literal>| tee <replaceable>ldap1-output.txt</replaceable></literal>
     portion of the command.
    </para>
   </step>
   <step>
    <para>
     If the <command>dscreate</command> command should fail, the messages will 
     tell you why. After correcting any issues remove the instance 
     (see <xref linkend="sec-security-ldap-server-remove"/>) and create a
     new instance.    
    </para>
   </step>
   <step>
    <para>
     A successful installation reports "<literal>Completed installation for 
       <replaceable>ldap1</replaceable></literal>". Check the status of your
     new server:
    </para>
    <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> status
Instance "ldap1" is running</screen>
   </step>
   <step xml:id="sec-security-ldap-server-remove">
    <para>
     The following commands are for cleanly removing the instance. The first 
     command performs a dry-run and does not remove the instance. When are you 
     sure you want to remove it, use the second command with the
     <command>--do-it</command> option:
    </para>
    <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> remove
Not removing: if you are sure, add --do-it

&prompt.sudo;dsctl <replaceable>ldap1</replaceable> remove --do-it</screen>
    <para>
     This command also removes partially-installed or corrupted instances. You 
     may reliably create and remove instances as much as you want.
    </para>
   </step>
  </procedure>
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-server-template">
   <title>Creating a &ds389; instance from a template</title>
   <para>
       You may auto-create a template for a new &ds389; instance with the
       <command>dscreate</command> command. This creates a template that you
       may use without making any changes, and you may change it to suit your own
       requirements. All of the defaults are documented in the template file,
       and commented out. To make changes, uncomment the default and enter your
       own value. All options are well-documented.
   </para>
   <para>
       The following example prints the template to stdout:
   </para>
   <screen>&prompt.user;dscreate create-template</screen>
   <para>
       This is good for a quick review of the template, but you must create a
       file to use in creating your new &ds389; instance. You may name this file
       anything you want:
   </para>
   <screen>&prompt.user;dscreate create-template <replaceable>ldap1-template.txt</replaceable></screen>
   <para>
       This is a snippet from the new file:
   </para>
   <screen># full_machine_name (str)
# Description: Sets the fully qualified hostname (FQDN) of this system. When 
# installing this instance with GSSAPI authentication behind a load balancer, set 
# this parameter to the FQDN of the load balancer and, additionally, set 
# "strict_host_checking" to "false".
# Default value: ldapserver1.test.net
;full_machine_name = ldapserver1.test.net

# selinux (bool)
# Description: Enables SELinux detection and integration during the installation 
# of this instance. If set to "True", dscreate auto-detects whether SELinux is 
# enabled. Set this parameter only to "False" in a development environment.
# Default value: True 
;selinux = True</screen>

   <para>
    You see how it automatically configures the defaults from your existing
    environment. Use this file with no changes to create a new instance:
   </para>
   <screen>&prompt.sudo;dscreate from-file <replaceable>ldap1-template.txt</replaceable></screen>
   <para>
       This creates a new instance named <literal>localhost</literal>, and 
       automatically starts it after creation:
   </para>
   <screen>&prompt.sudo;dsctl <replaceable>localhost</replaceable> status
Instance "localhost" is running</screen>
    <para>
        The default values create a fully-operational instance, but there are
        some values you might want to change.
    </para>
    <para>
        The instance name cannot be changed after it has been created. It is 
        better to create your own instance name, rather than using the default, 
        to avoid confusion and to enable a better understanding of how it all 
        works. To do this, uncomment the 
        <literal>;instance_name = localhost</literal> line and change
        <literal>localhost</literal> to your chosen name. In the following
        examples the instance name is <replaceable>ldap1</replaceable>.
    </para>
    <para>
        Another useful change is to populate your new instance with sample
        users and groups. Uncomment <literal>;sample_entries = no</literal> and
        change <literal>no</literal> to <literal>yes</literal>.
    </para>
    <para>
        Set your own password by uncommenting <literal>;root_password</literal>,
        and replacing the default password with your own.
    </para>
    <para>
        The template does not create a default suffix, so you should
        configure your own on the <literal>suffix</literal> line, like 
        this example:
    </para>    
    <screen>suffix = <replaceable>dc=ldap1,dc=com</replaceable></screen>
    <para>
       You may cleanly remove any instance and start over with 
       <command>dsctl</command>:
    </para>
    <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> remove --do-it</screen>
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-server-stop-start">
     <title>Stopping and Starting &ds389;</title>
     <para>
         Use &systemd; to manage your &ds389; server instance. Get the
         status of your server:
     </para>
     <screen>&prompt.user;systemctl status --no-pager --full <replaceable>dirsrv@ldap1.service</replaceable>       
   ● dirsrv@ldap1.service - 389 Directory Server ldap1.
     Loaded: loaded (/usr/lib/systemd/system/dirsrv@.service; enabled; vendor preset: disabled)
     Active: active (running) since Thu 2021-03-11 08:55:28 PST; 2h 7min ago
    Process: 4451 ExecStartPre=/usr/lib/dirsrv/ds_systemd_ask_password_acl /etc/dirsrv/slapd-ldap1/dse.ldif (code=exited, status=0/SUCCESS)
   Main PID: 4456 (ns-slapd)
     Status: "slapd started: Ready to process requests"
      Tasks: 26
     CGroup: /system.slice/system-dirsrv.slice/dirsrv@ldap1.service
             └─4456 /usr/sbin/ns-slapd -D /etc/dirsrv/slapd-ldap1 -i /run/dirsrv/slapd-ldap1.pid
</screen>
   <para>
       Start and stop your server:
   </para>
   <screen>&prompt.sudo;systemctl start <replaceable>dirsrv@ldap1.service</replaceable>
&prompt.sudo;systemctl stop <replaceable>dirsrv@ldap1.service</replaceable></screen>
   <para>
       See <xref linkend="cha-systemd"/> for more information on using 
       <command>systemctl</command>.
   </para>
   <para>
       The <command>dsctl</command> command also starts and stops your server:
   </para>
   <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> status
&prompt.sudo;dsctl <replaceable>ldap1</replaceable> stop
&prompt.sudo;dsctl <replaceable>ldap1</replaceable> restart
&prompt.sudo;dsctl <replaceable>ldap1</replaceable> start
</screen>
</sect2>

 <sect2 xml:id="sec-security-ldap-server-credentials">
  <title>Configuring admin credentials for local administration</title>
   <para>
    For local administration of the &ds389;, you can create a
    <filename>.dsrc</filename> configuration file in the <filename>/root</filename>
    directory, allowing root and sudo users to administer the server without
    typing connection details with every command. 
    <xref linkend="ex-security-ldap-server-credentials-local" xrefstyle="select:label"/> 
    shows an example for local administration on the server, using ldap1
    for the instance name, and test3.com for the machine's domain name.
   </para>
   <para>
     After creating your <filename>/root/.dsrc</filename> file, try a few
     administration commands, such as creating new users (see 
     <xref linkend="sec-security-ldap-server-users"/>).
   </para>
   <example xml:id="ex-security-ldap-server-credentials-local">
    <title>A <filename>.dsrc</filename> file for local administration</title>
     <screen># /root/.dsrc file for administering the ldap1 instance
         
[<replaceable>ldap1</replaceable>] <co xml:id="co-ldap-server-dsrc-instance-name"/>

uri = ldapi://<replaceable>%%2fvar%%2frun%%2fslapd-ldap1.socket</replaceable> <co xml:id="co-ldap-server-dsrc-remote-ldapi"/>
basedn = <replaceable>dc=ldap1,dc=com</replaceable>
binddn = cn=Directory Manager
</screen>
   <calloutlist>
    <callout arearefs="co-ldap-server-dsrc-instance-name">
      <para>
        This must specify your exact instance name.
      </para>
    </callout>       
    <callout arearefs="co-ldap-server-dsrc-remote-ldapi">
      <para>
        <literal>ldapi</literal> detects the UID and GID of the user attempting 
        to log in to the server. If the UID/GID are <literal>0/0</literal> or
        <literal>dirsrv:dirsrv</literal>, <literal>ldapi</literal> binds the user 
        as the directory server root dn, which is 
        <literal>cn=Directory Manager</literal>.
      </para>
      <para>
        In the URI the slashes are replaced with <literal>%%2f</literal>, so
        in this example the path is 
        <filename>/var/run/slapd-ldap1.socket</filename>.
      </para> 
    </callout>
   </calloutlist>
  </example>
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-firewall">
  <title>Firewall configuration</title>
  <para>
      The default TCP ports for &ds389; are 389 and 636. TCP 389 is for unencrypted 
      connections, and STARTTLS. 636 is for encrypted connections over TLS.
  </para>
  <para>
      &firewalld; is the default firewall manager for &sle;. The following rules
      activate the <literal>ldap</literal> and <literal>ldaps</literal> firewall
      services:
  </para>
  <screen>&prompt.sudo;firewall-cmd --add-service=ldap --zone=<replaceable>internal</replaceable>
&prompt.sudo;firewall-cmd --add-service=ldaps --zone=<replaceable>internal</replaceable>
&prompt.sudo;firewall-cmd --runtime-to-permanent
</screen>
  <para>
      Replace the zone with the appropriate zone for your server. See
      <xref linkend="sec-security-ldap-server-ca"/> for information on securing
          your connections with TLS, and 
          <xref linkend="sec-security-firewall-fw"/> to learn about &firewalld;.
  </para>
</sect2>

 <sect2 xml:id="sec-security-ldap-server-users">
  <title>Creating LDAP users and groups</title>
   <para>
    Users and groups are created and managed with the <command>dsidm</command>
    command. It runs interactively, or you can run it on the command line, and
    enter all options in a single command. 
   </para>
   <para>
     List your existing users and groups:
   </para>
   <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> user list
&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group list</screen>
   <para>
       List all information on a single user:
   </para>
   <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> user get <replaceable>username</replaceable></screen>
   <para>
       List all information on a single group:
   </para>
      <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group get <replaceable>groupname</replaceable></screen>
   <para>
   In the following example we add two users, &exampleuserII; and &exampleuserIII;,
   by specifying their data via command-line arguments. The example server 
   instance is named <replaceable>ldap1</replaceable>, and the instance's suffix is 
   <replaceable>dc=ldap1,dc=com</replaceable>.
   </para>
  <procedure xml:id="pro-security-ldap-server-users">
   <title>Creating LDAP users</title>
   <step>
    <para>
    Create the user &exampleuserII;:
    </para>
    <screen>&prompt.sudo;<command>dsidm</command> <replaceable>ldap1</replaceable> user create --uid &exampleuserII; \
  --cn &exampleuserII; --displayName '&exampleuserIIfull;' --uidNumber 1000 --gidNumber 1000 \
  --homeDirectory /home/&exampleuserII;</screen>
   </step>
   <step>
    <para>
     Look up a user's <literal>distinguished name</literal> (fully qualified
     name to the directory object, which is guaranteed unique):
    </para>
    <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> user get &exampleuserII;
dn: uid=&exampleuserII;,ou=people,dc=ldap1,dc=com
[...]</screen>
    <para>
     You need the distinguished name for actions such as changing the password
     for a user.
    </para>
   </step>
   <step>
    <para>
     To set or change the password for &exampleuserII;:
    </para>
    <substeps>
      <step>
       <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> account reset_password \
  uid=&exampleuserII;,ou=people,dc=ldap1,dc=com</screen>
       <para>
        The system prompts you for the directory server &rootuser; user password
        (unless you configured remote or local access as described in <xref
        linkend="sec-security-ldap-server-credentials"/>).
       </para>
      </step>
      <step>
       <para>
        Enter the new password for &exampleuserII; twice.
       </para>
       <para>
        If the action was successful, you get the following message:
       </para>
       <screen>reset password for uid=&exampleuserII;,ou=people,dc=ldap1,dc=com</screen>
      </step>
    </substeps>
   </step>
   <step>
    <para>Create the user &exampleuserIII;:</para>
    <screen>&prompt.sudo;<command>dsidm</command> <replaceable>ldap1</replaceable> user create --uid &exampleuserIII;\
  --cn &exampleuserIII; --displayName '&exampleuserIIIfull;' \
  --uidNumber 1001 --gidNumber 1001 --homeDirectory /home/&exampleuserIII;
&prompt.sudo;reset password for uid=&exampleuserIII;,ou=people,dc=ldap1,dc=com
  </screen>
   </step>
  </procedure>
  <procedure xml:id="pro-security-ldap-server-groups">
   <title>Creating LDAP groups and assigning users to them</title>
   <para>
    In the following examples, we create a group, 
    <systemitem class="groupname">group1</systemitem>, and assign the user 
    &exampleuserII; to this group. The example server instance is named 
    <literal>ldap1</literal>, and the instance's suffix is 
    <literal>dc=ldap1,dc=com</literal>.
    </para>
   <step>
    <para>
     Create the group:
    </para>
    <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group create</screen>
    <para>
     You will be prompted for a group name:
    </para>
    <screen>Enter value for cn :<systemitem class="groupname">group1</systemitem></screen>
   </step>
   <step>
    <para>
     Enter the name for the group, for example: <literal>group1</literal>.
    </para>
   </step>
   <step>
    <para>
     Add the user &exampleuserII; to the group:
    </para>
    <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group add_member <systemitem class="groupname">group1</systemitem> uid=&exampleuserII;,ou=people,<replaceable>dc=ldap1,dc=com</replaceable>
added member: uid=&exampleuserII;,ou=people,<replaceable>dc=ldap1,dc=com</replaceable></screen>
   </step>
   <step>
    <para>
     Verify that authentication works:
    </para>
   <screen>&prompt.sudo;ldapwhoami -H ldaps://localhost -D \
     uid=&exampleuserII;,ou=people,<replaceable>dc=ldap1,dc=com</replaceable> -W -x</screen>
    <para>
     If you are prompted for the LDAP password of &exampleuserII;, authentication works.
    </para>
    <para>
     If the command fails with the following error, you are probably using a
     self-signed certificate:
    </para>
    <screen>ldap_sasl_bind(SIMPLE): Can't contact LDAP server (-1)</screen>
    <para>
     In that case, edit <filename>/etc/openldap/ldap.conf</filename> and add the path to the certificate, your basedn, and your localhost URI. For example:
    </para>
    <screen>BASE    <replaceable>dc=ldap1,dc=com</replaceable>
URI     ldap://localhost
TLS_CACERT /etc/dirsrv/<replaceable>slapd-ldap1/ca.crt</replaceable></screen>
    <para>
     Alternatively, include the path to the certificate in the
     <filename>whoami</filename> command:
    </para>
    <screen>&prompt.sudo;LDAPTLS_CACERT=/etc/dirsrv/<replaceable>slapd-ldap1</replaceable>/ca.crt \
  ldapwhoami -H ldaps://localhost -D \
  uid=&exampleuserII;,ou=people,<replaceable>dc=ldap1,dc=com</replaceable> -W -x</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-sssd">
  <title>Setting up SSSD</title>
  <para>
   SSSD (System Security Services Daemon) is a daemon that communicates with
   remote identity providers and allows <literal>pam</literal> and
   <literal>nsswitch</literal> to consume that data. SSSD can have multiple
   back-ends, cache users and groups and provides features like SSH key
   distributions.
  </para>
  <procedure>
   <step>
     <para>On a separate server, install the <systemitem>sssd</systemitem> package:
     </para>
    <screen>&prompt.sudo;zypper in sssd</screen>
   </step>
   <step>
    <para>
     Disable and stop the <systemitem class="daemon">nscd</systemitem> daemon
     because it conflicts with <systemitem class="daemon">sssd</systemitem>:
    </para>
    <screen>&prompt.sudo;systemctl disable nscd &amp;&amp; systemctl stop nscd</screen>
   </step>
   <step>
    <para>
     Create the SSSD configuration and restrict the login to the members of the group <systemitem
     class="groupname">server_admins</systemitem> that we created in <xref
      linkend="pro-security-ldap-server-groups" xrefstyle="select:label"/>:
    </para>
    <tip>
     <para>
      The <literal>memberOf</literal> plugin needs to be enabled, so that
      clients can log in and authorise.
     </para>
    </tip>
    <screen>&prompt.sudo;dsidm localhost client_config sssd.conf server_admins</screen>
   </step>
   <step>
    <para>
     Review the output and paste (or redirect) it to <filename>/etc/sssd/sssd.conf</filename>.
     If required, edit the configuration file according to your needs.
    </para>
   </step>
   <step>
    <para>
     To configure the certificates on your client, copy <filename>ca.crt</filename>
     from the LDAP server to your client:</para>
    <screen>&prompt.sudo;mkdir -p /etc/openldap/certs
cp [...]>/ca.crt /etc/openldap/certs/
/usr/bin/c_rehash /etc/openldap/certs</screen>
   </step>
   <step>
    <para>
     Enable and start SSSD:
    </para>
    <screen>&prompt.sudo;systemctl enable sssd
systemctl start sssd</screen>
   </step>
   <step>
    <para>
     To make sure SSSD is part of PAM and NSS, follow the instructions in sections <citetitle>Configure PAM
      (&suse;)</citetitle> and <citetitle>Configure NSS (&suse;)</citetitle> at <link
     xlink:href="https://www.port389.org/docs/389ds/howto/howto-sssd.html"/>.
    </para>
   </step>
   <step>
    <para>
     Verify if the client can provide the details for user &exampleuserII;:
    </para>
    <screen>&prompt.sudo;id &exampleuserII;
    uid=1000(&exampleuserII;) gid=100(users) groups=100(users)</screen>
    <para>
     If everything is set up correctly, &exampleuserII; can access the &ds389;
     instance via SSH to the machine where you have installed and configured
     SSSD. However, &exampleuserIII; will fail to do so, because &exampleuserIII;
     does not belong to the group <literal>server_admins</literal> that we have
     configured in <xref linkend="pro-security-ldap-server-groups"
      xrefstyle="select:label"/>.
    </para>
   </step>
  </procedure>
 </sect2>
</sect1>

<!-- default installation uses self-signed cert -->
 <sect1 xml:id="sec-security-ldap-server-ca">
 <title>Using CA certificates for TLS</title>
 <para>
  You can manage the CA certificates for &ds389; with the following command
  line tools: <command>certutil</command>, <command>openssl</command>, and
  <command>pk12util</command>.
 </para>
 <para>
  For testing purposes, you can create a self-signed certificate with
  <command>dscreate</command>. Find the certificate at
  <filename>/etc/dirsrv/slapd-localhost/ca.crt</filename>. For remote administration,
  copy the certificate to a readable location. For production environments,
  contact a CA authority of your organization's choice and request a server
  certificate, a client certificate, and a root certificate.
 </para>
 <para>
 Make sure to meet the following requirements before executing the procedure below:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You have a server certificate and a private key to use for the TLS connection.
   </para>
  </listitem>
  <listitem>
   <para>
    You have set up an NSS (Network Security Services) database (for example,
    with the <command>certutil</command> command).
   </para>
  </listitem>
 </itemizedlist>

 <procedure>
  <para>
  Before you can import an existing private key and certificate into the NSS
  (Network Security Services) database, you need to create a bundle of the
  private key and the server certificate. This results in a <filename>*.p12</filename>
  file.
  </para>
  <important>
  <title><filename>*.p12</filename> file and friendly name</title>
  <para>
   When creating the PKCS12 bundle, you must encode a friendly name
   in the <filename>*.p12</filename> file.
  </para>
  <para>
   Make sure to use <literal>Server-Cert</literal> as the friendly name. Otherwise
   the TLS connection will fail, because the &ds389; searches for this exact string.
  </para>
  <para>
    Keep in mind that the friendly name cannot be changed after you
    import the <filename>*.p12</filename> file into the NSS
    database.
  </para>
 </important>
 <step>
  <para>
   Use the following command to create the PKCS12 bundle with the required friendly name:
  </para>
 <screen>&prompt.root;openssl pkcs12 -export -in <replaceable>SERVER.crt</replaceable> \
  -inkey <replaceable>SERVER.key</replaceable> -out <replaceable>SERVER.p12</replaceable> \
  -name Server-Cert</screen>
  <para>
   Replace <replaceable>SERVER.crt</replaceable> with the server certificate
   and <replaceable>SERVER.key</replaceable> with the private key to be bundled.
   With <option>-out</option>, specify the name of the <filename>*.p12</filename>
   file. Use <option>-name</option> to set the friendly name to use:
   <literal>Server-Cert</literal>.
  </para>
 </step>
 <step>
   <para>
     Before you can import the file into the NSS database, you need to
     obtain its password. To do this, use the following command:
   </para>
<screen>pk12util -i <replaceable>PATH_TO_SERVER.p12</replaceable> -d sql:PATH_TO_NSS_DB -n Server-cert -W <replaceable>SERVER.p12_PASSWORD</replaceable></screen>
   <para>
     You can then find the password in the
     <filename>pwdfile.txt</filename> file in the
     <replaceable>PATH_TO_NSS_DB</replaceable> directory.
   </para>
 </step>
 <step>
  <para>
   Now import the <replaceable>SERVER.p12</replaceable> file
   into your NSS database:
  </para>
  <screen>pk12util -i <replaceable>SERVER.p12</replaceable> -d <replaceable>PATH_TO_NSS_DB</replaceable></screen>
 </step>
 </procedure>
 </sect1> 

<sect1 xml:id="sec-security-ldap-info">
  <title>More information</title>
  <para>
   For more information about &ds389;, see the upstream documentation,
   available at <link xlink:href="https://www.port389.org/docs/389ds/documentation.html"/>.
  </para>
 </sect1>
</chapter>
