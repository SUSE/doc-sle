<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="apache2.xml" version="5.0" xml:id="cha-apache2">
 <title>Apache HTTP 服务器</title>
 <info>
  <abstract>
   <para>
    <link xlink:href="http://www.netcraft.com/"/> 的调查表明，Apache HTTP 服务器 (Apache) 是世界上应用最广泛的 Web 服务器。Apache 由 Apache 软件基金会 (<link xlink:href="http://www.apache.org/"/>) 开发，适用于大多数操作系统。<phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 包含 Apache 版本 2.4。本章将介绍如何安装、配置和设置 Web 服务器；如何使用 SSL、CGI 和其他模块；以及如何对 Apache 进行查错。
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-apache2-quickstart">
  <title>快速入门</title>

  <para>
   借助本节内容，可快速设置并启动 Apache。您必须是 <systemitem class="username">root</systemitem> 用户才能安装和配置 Apache。
  </para>

  <sect2 xml:id="sec-apache-quickstart-requirements">
   <title>要求</title>
   <para>
    在尝试设置 Apache Web 服务器之前，请确保满足以下要求：
   </para>
   <orderedlist spacing="normal">
    <listitem>
     <para>
      计算机的网络配置正确。有关该主题的详细信息，请参见<xref linkend="cha-basicnet"/>。
     </para>
    </listitem>
    <listitem>
     <para>
      通过与时间服务器同步来维护计算机的准确系统时间。这一点是必需的，因为 HTTP 协议的多个部分依赖于正确的时间。请参见<xref linkend="cha-netz-xntp"/>来了解该主题的更多信息。
     </para>
    </listitem>
    <listitem>
     <para>
      将安装最新的安全更新。如果存在疑问，请运行 YaST 联机更新。
     </para>
    </listitem>
    <listitem>
     <para>
      默认 Web 服务器端口 (<literal>80</literal>) 将在防火墙中打开。为此，请将 SuSEFirewall2 配置为允许外部区域中的服务 <guimenu>HTTP 服务器</guimenu>。这可以使用 YaST 完成。有关详细信息，请参见<xref linkend="sec-security-firewall-SuSE-yast"/>。
     </para>
    </listitem>
   </orderedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-quickstart-installation">
   <title>安装</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 默认不会安装到系统中。要用<quote>即装即用</quote>的标准预定义配置来安装它，请按如下所示继续：
   </para>
   <procedure>
    <title>用默认配置安装 Apache</title>
    <step>
     <para>
      启动 YaST，然后选择<menuchoice> <guimenu> 软件</guimenu>
      <guimenu> 软件管理</guimenu> </menuchoice> 。
     </para>
    </step>
    <step>
     <para>
      选择<menuchoice> <guimenu>视图</guimenu> <guimenu> 模式</guimenu>
      </menuchoice>，然后选择 <guimenu>Web 和 LAMP 服务器</guimenu>。
     </para>
    </step>
    <step>
     <para>
      确认安装相关的包来完成安装进程。
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sect-apache-quickstart-start">
   <title>开始</title>
   <para>
    可以自动在引导时启动 Apache 或手动启动它。
   </para>
   <para>
    要确保 Apache 在引导期间自动启动，请在目标 <literal>multi-user.target</literal> 和 <literal>graphical.target</literal> 中执行以下命令：
   </para>
<screen><prompt role="root">root # </prompt>systemctl enable apache2</screen>
   <para>
    <remark>taroth 2014-02-11: commenting the following procedure as it is unsure
      how to enable a service for certain targets with YaST Services Manager,
      filed bnc# 863333 for it
     UPDATE tbazant 2015-08-20: still not clear, leaving commented out
     </remark>
   </para>
   <para>
    有关 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中 systemd 目标的更多信息以及 YaST <guimenu>服务管理器</guimenu> 的说明，请参见<xref linkend="sec-boot-runlevel-edit"/>。
   </para>
   <para>
    要使用外壳手动启动 Apache，请运行 <command>systemctl start apache2</command>。
   </para>
   <procedure>
    <title>检查 Apache 是否正在运行</title>
    <para>
     如果在启动 Apache 时没有收到错误消息，这通常表示 Web 服务器正在运行。测试 Apache 是否正在运行：
    </para>
    <step>
     <para>
      启动浏览器，然后打开 <link xlink:href="http://localhost/"/>。
     </para>
     <para>
      如果 Apache 已启动并正在运行，您将看到一个测试页，指示<quote>它正在运行！</quote>。
     </para>
    </step>
    <step>
     <para>
      如果看不到此页面，请参见<xref linkend="sec-apache2-troubleeshooting"/>。
     </para>
    </step>
   </procedure>
   <para>
    既然 Web 服务器已在运行，因此可以添加您自己的文档、根据需要调整配置或通过安装模块来添加功能。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-configuration">
  <title>配置 Apache</title>

  <para>
   <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了两个配置选项：
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-manually" xrefstyle="select:title"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-apache2-configuration-yast" xrefstyle="select:title"/>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   手工配置可提供更详细的信息，但没有 YaST GUI 方便。
  </para>

  <important>
   <title>配置更改后重新装载或重启动 Apache</title>
   <para>
    大多数配置更改需要重新装载（有些还需要重启动）Apache 后才能生效。使用 <command>systemctl reload apache2</command> 或<xref linkend="sec-apache2-start-stop"/>中所述的某个重启动选项手动重新装载 Apache。
   </para>
   <para>
    如果用 YaST 配置 Apache，按<xref linkend="sec-apache2-configuration-yast-server-configuration"/>中所述将 <guimenu>HTTP 服务</guimenu>设置为<guimenu>已启用</guimenu>即可让上述操作自动完成。
   </para>
  </important>

  <sect2 xml:id="sec-apache2-configuration-manually-configfiles">
   <title>Apache 配置文件</title>
   <para>
    本部分概述了 Apache 配置文件。如果使用 YaST 进行配置，则不需要使用这些文件；但如果以后要切换到手动配置，则此信息可能有用。
   </para>
   <para>
    Apache 配置文件可在两个不同位置处获取：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-configuration-manually-configfiles-etc-apache2" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-sysconfig-apache2">
    <title><filename>/etc/sysconfig/apache2</filename></title>
    <para>
     <filename>/etc/sysconfig/apache2</filename> 控制 Apache 的某些全局设置，例如要装载的模块、要包含的其他配置文件、启动服务器时应同时启动的标志，以及应添加到命令行的标志。此文件中的每个配置选项都有详细记录，因此在此不再描述。对于一般用途的 Web 服务器，<filename>/etc/sysconfig/apache2</filename> 中的设置应足以满足所有配置需要。
    </para>
   </sect3>
   <sect3 xml:id="sec-apache2-configuration-manually-configfiles-etc-apache2">
    <title><filename>/etc/apache2/</filename></title>
    <para>
     <filename>/etc/apache2/</filename> 托管 Apache 的所有配置文件。下面描述了每个文件的用途。每个文件均包含几个配置选项（也称为<emphasis>指令</emphasis>）。这些文件中的每个配置选项都有详细记录，因此在此不再描述。
    </para>
    <para>
     Apache 配置文件按如下所示组织：
    </para>
<screen>/etc/apache2/
     |
     |- charset.conv
     |- conf.d/
     |   |
     |   |- *.conf
     |
     |- default-server.conf
     |- errors.conf
     |- httpd.conf
     |- listen.conf
     |- magic
     |- mime.types
     |- mod_*.conf
     |- server-tuning.conf
     |- ssl.*
     |- ssl-global.conf
     |- sysconfig.d
     |   |
     |   |- global.conf
     |   |- include.conf
     |   |- loadmodule.conf . .
     |
     |- uid.conf
     |- vhosts.d
     |   |- *.conf</screen>
    <variablelist>
     <title>/etc/apache2/ 中的 Apache 配置文件</title>
     <varlistentry>
      <term><filename>charset.conv</filename>
      </term>
      <listitem>
       <para>
        指定要用于不同语言的字符集。不要编辑此文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>conf.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        其他模块添加的配置文件。可在需要时将这些配置包含进虚拟主机配置。有关示例请参见 <filename>vhosts.d/vhost.template</filename>。如此操作后，可以为不同的虚拟主机提供不同的模块集。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>default-server.conf</filename>
      </term>
      <listitem>
       <para>
        具有合理默认值的所有虚拟主机的全局配置。除了更改值之外，还可以使用虚拟主机配置来覆盖它们。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>errors.conf</filename>
      </term>
      <listitem>
       <para>
        定义 Apache 如何响应错误。要为所有虚拟主机自定义这些消息，请编辑此文件。否则在您的虚拟主机配置中覆盖这些指令。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>httpd.conf</filename>
      </term>
      <listitem>
       <para>
        主 Apache 服务器配置文件。请勿更改此文件。它主要包含 include 语句和全局设置。重写此处列出的相关配置文件中的全局设置。更改您的虚拟主机配置中的特定于主机的设置（例如文档根目录）。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>listen.conf</filename>
      </term>
      <listitem>
       <para>
        将 Apache 绑定到特定的 IP 地址和端口。基于名称的虚拟主机也在此处配置。有关细节，请参见<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>magic</filename>
      </term>
      <listitem>
       <para>
        mime_magic 模块的数据帮助 Apache 自动确定 MIME 类型的未知文件。不要更改此文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mime.types</filename>
      </term>
      <listitem>
       <para>
        MIME 类型可由系统识别（它实际上是一个指向 <filename>/etc/mime.types</filename> 的链接）。不要编辑此文件。如果需要添加此处没有列出的 MIME 类型，那么请将它们添加到 <filename>mod_mime-defaults.conf</filename>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>mod_*.conf</filename>
      </term>
      <listitem>
       <para>
        默认情况下安装的模块的配置文件。有关细节，请参见<xref linkend="sec-apache2-modules"/>。注意，可选模块的配置文件储存在目录 <filename>conf.d</filename> 中。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>server-tuning.conf</filename>
      </term>
      <listitem>
       <para>
        包含不同 MPM（请参见<xref linkend="sec-apache2-modules-mpm"/>）的配置指令以及控制 Apache 性能的一般配置选项。在此处更改时，请对 Web 服务器进行合理的测试。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>ssl-global.conf</filename> 和 <filename>ssl.*</filename>
      </term>
      <listitem>
       <para>
        全局 SSL 配置和 SSL 证书数据。有关细节，请参见<xref linkend="sec-apache2-ssl"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>sysconfig.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        从 <filename>/etc/sysconfig/apache2</filename> 自动生成的配置文件。请勿更改这些文件，而应编辑 <filename>/etc/sysconfig/apache2</filename>。不要在此目录中放置其他配置文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>uid.conf</filename>
      </term>
      <listitem>
       <para>
        指定运行 Apache 的用户和组 ID。不要更改此文件。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><filename>vhosts.d/*.conf</filename>
      </term>
      <listitem>
       <para>
        虚拟主机配置应位于此处。该目录包含使用和不使用 SSL 的虚拟主机的模板文件。该目录中以 <filename>.conf</filename> 结尾的所有文件均自动包含在 Apache 配置中。有关详细信息，请参见<xref linkend="sec-apache2-configuration-manually-vhost"/>。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-configuration-manually">
   <title>手动配置 Apache</title>
   <para>
    手动配置 Apache 包括作为 <systemitem class="username">root</systemitem> 用户来编辑纯文本配置文件。
   </para>
   <sect3 xml:id="sec-apache2-configuration-manually-vhost">
    <title>虚拟主机配置</title>
    <para>
     术语<emphasis>虚拟主机</emphasis>指的是 Apache 在一台物理计算机上为多个统一资源标识符 (URI) 提供服务的能力。这意味着在一个物理计算机上的一个 Web 服务器可以运行几个域（例如 www.example.com 和 www.example.net）。
    </para>
    <para>
     通常的做法是使用虚拟主机来节省管理精力（只需维护一个 Web 服务器即可）和硬件费用（每个域不需要专用的服务器）。虚拟主机可以是基于名称、基于 IP 或基于端口的。
    </para>
    <para>
     要列出所有现有的虚拟主机，请使用命令 <command>apache2ctl</command> <option>-S</option>。这将输出一个列表，显示默认服务器和所有虚拟主机以及它们的 IP 地址和侦听端口。此外，该列表还针对每个虚拟主机包含一项，显示其在配置文件中的位置。
    </para>
    <para>
     可以通过 YaST（如<xref linkend="sec-apache2-configuration-yast-wizard-virtual-hosts"/>中所述）或通过手动编辑配置文件来配置虚拟主机。默认情况下，系统会根据 <phrase role="productname"><phrase os="sles">/etc/apache2/vhosts.d/</phrase></phrase> 中每个虚拟主机一个配置文件的设置，为 <filename>SUSE Linux Enterprise Server</filename> 中的 Apache 做好准备。该目录中扩展名为 <filename>.conf</filename> 的所有文件均会自动包含到配置中。虚拟主机的基本模板将在目录 <filename>vhost.template</filename> 或 <filename>vhost-ssl.template</filename> 中提供，以用于带有 SSL 支持的虚拟主机。
    </para>
    <tip>
     <title>始终创建虚拟主机配置</title>
     <para>
      建议您始终创建虚拟主机配置文件，即使您的 Web 服务器仅主管一个域。这样不但可以将特定于域的配置保存在一个文件中，还可以只需移动、删除或重命名虚拟主机的配置文件就能始终回退到有效的基本配置。因此，还应该为每个虚拟主机创建单独的配置文件。
     </para>
     <para>
      使用基于名称的虚拟主机时，建议设置将在域名与虚拟主机配置不匹配时使用的默认配置。默认虚拟主机即最先装载其配置的虚拟主机。由于配置文件的装载顺序取决于文件名，因此请在默认虚拟主机配置的文件名的开头使用下划线字符 (<literal>_</literal>)，以确保最先装载它（例如：<filename>_default_vhost.conf</filename>）。
     </para>
    </tip>
    <para>
     <systemitem>&lt;VirtualHost&gt;</systemitem><systemitem>&lt;/VirtualHost&gt;</systemitem> 块保存适用于特定域的信息。当 Apache 接收到客户端对某已定义虚拟主机的请求时，将使用此部分包含的指令。几乎所有指令均可用在虚拟主机环境中。请参见 <link xlink:href="http://httpd.apache.org/docs/2.4/mod/quickreference.html"/> 来获取有关 Apache 的配置指令的进一步信息。
    </para>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-named-vhosts">
     <title>基于名称的虚拟主机</title>
     <para>
      使用基于名称的虚拟主机，每个 IP 地址能服务于多个网站。Apache 使用客户端发送的 HTTP 报头中的主机字段来将请求连接到某个虚拟主机声明中匹配的 <systemitem>ServerName</systemitem> 项。如果找不到匹配的 <systemitem>ServerName</systemitem>，则默认使用第一个指定的虚拟主机。
     </para>
     <para>
      第一步是为您要提供服务的每个基于名称的不同主机创建 <literal>&lt;VirtualHost&gt;</literal> 块。在每个 <literal>&lt;VirtualHost&gt;</literal> 块内，至少需要有一个 <literal>ServerName</literal> 指令来指定要为哪个主机提供服务，还需要有一个 <literal>DocumentRoot</literal> 指令指出该主机的内容位于文件系统中的哪个位置。
     </para>
     <example xml:id="ex-apache2-virtual-hosts-name-based">
      <title>基于名称的 <systemitem>VirtualHost</systemitem> 项的基本示例</title>
<screen>&lt;VirtualHost *:80&gt;
# This first-listed virtual host is also the default for *:80
ServerName www.example.com
ServerAlias example.com
DocumentRoot /srv/www/htdocs/domain
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
ServerName other.example.com
DocumentRoot /srv/www/htdocs/otherdomain
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      <systemitem>VirtualHost</systemitem> 开始标记会使该 IP 地址（或完全限定的域名）在基于名称的虚拟主机配置中作为自变量。端口号指令为可选项目。
     </para>
     <para>
      允许使用通配符 <emphasis>*</emphasis> 代替 IP 地址。当使用 IPv6 地址时，地址必须括在方括号中。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-name-based">
      <title>基于名称的 <systemitem>VirtualHost</systemitem> 指令</title>
<screen>&lt;VirtualHost 192.168.3.100:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.100&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost [2002:c0a8:364::]&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-ip-vhosts">
     <title>基于 IP 的虚拟主机</title>
     <para>
      这种备选的虚拟主机配置要求为计算机设置多个 IP。Apache 的一个实例储存多个域，并为每个域指派一个不同的 IP。
     </para>
     <para>
      物理服务器必须为每个基于 IP 的虚拟主机指定一个 IP 地址。如果计算机没有多个网卡，也可以使用虚拟网络接口（IP 别名）。
     </para>
     <para>
      以下示例显示，Apache 在 IP 为 <systemitem class="ipaddress">192.168.3.100</systemitem> 且储存着其它两个 IP 为 <systemitem class="ipaddress">192.168.3.101</systemitem> 和 <systemitem class="ipaddress">192.168.3.102</systemitem> 的域的计算机上运行的情况。请为每个虚拟服务器指定一个单独的 <systemitem>VirtualHost</systemitem> 块。
     </para>
     <example xml:id="ex-apache-directives-virtualhost-ip-based">
      <title>基于 IP 的 <systemitem>VirtualHost</systemitem> 指令</title>
<screen>&lt;VirtualHost 192.168.3.101&gt;
  ...
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.3.102&gt;
  ...
&lt;/VirtualHost&gt;</screen>
     </example>
     <para>
      在此，<systemitem>VirtualHost</systemitem> 指令只针对除 <systemitem>192.168.3.100</systemitem> 以外的接口。在也为 <systemitem>192.168.3.100</systemitem> 配置<systemitem>监听</systemitem>指令时，必须创建单独的、基于 IP 的虚拟主机才能答复对该接口的 HTTP 请求，否则应用在默认服务器配置 (<filename>/etc/apache2/default-server.conf</filename>) 中找到的指令。
     </para>
    </sect4>
    <sect4 xml:id="sec-apache2-configuration-manually-vhost-basic-configuration">
     <title>基本虚拟主机配置</title>
     <para>
      每个虚拟主机配置中至少要有以下指令，才能设置虚拟主机。请参见 <filename>/etc/apache2/vhosts.d/vhost.template</filename> 获取更多选项。
     </para>
     <variablelist>
      <varlistentry>
       <term><systemitem>ServerName</systemitem>
       </term>
       <listitem>
        <para>
         主机所在的全限定域名。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>DocumentRoot</systemitem>
       </term>
       <listitem>
        <para>
         Apache 应该为此主机提供文件的目录路径。出于安全考虑，在默认情况下禁止访问整个文件系统，所以必须在<systemitem>目录</systemitem>容器中显示地解锁此目录。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ServerAdmin</systemitem>
       </term>
       <listitem>
        <para>
         服务器管理员的电子邮件地址。例如，此地址将显示在 Apache 创建的错误页面上。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>ErrorLog</systemitem>
       </term>
       <listitem>
        <para>
         该虚拟主机的错误日志文件。尽管不必为每个虚拟主机创建单独的错误日志文件，但是通常建议执行此操作，因为这样能使错误调试变得容易些。<filename>/var/log/apache2/</filename> 是 Apache 日志文件的默认目录。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><systemitem>CustomLog</systemitem>
       </term>
       <listitem>
        <para>
         该虚拟主机的访问日志文件。尽管不必为每个虚拟主机创建单独的访问日志文件，但是通常建议执行此操作，因为这样可单独分析每个主机的访问统计数字。<filename>/var/log/apache2/</filename> 是 Apache 日志文件的默认目录。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      综上所述，出于安全考虑，在默认情况下禁止访问整个文件系统。因此，明确对您放置了 Apache 应为其提供服务的文件所在的目录解除锁
定，例如 <systemitem>DocumentRoot</systemitem>：
     </para>
<screen>&lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
&lt;/Directory&gt;</screen>
     <note>
      <title><literal>Require all granted</literal></title>
      <para>
       在旧版 Apache 中，<literal>Require all granted</literal> 语句表达为：
      </para>
<screen>Order allow,deny
Allow from all</screen>
      <para>
       <literal>mod_access_compat</literal> 模块仍然支持该旧语法。
      </para>
     </note>
     <para>
      完整的配置文件外观如下所示：
     </para>
     <example xml:id="ex-apache-directives-virtualhost-basic-configuration">
      <title>基本 <systemitem>VirtualHost</systemitem> 配置</title>
<screen>&lt;VirtualHost 192.168.3.100&gt;
  ServerName www.example.com
  DocumentRoot /srv/www/www.example.com/htdocs
  ServerAdmin webmaster@example.com
  ErrorLog /var/log/apache2/www.example.com_log
  CustomLog /var/log/apache2/www.example.com-access_log common
  &lt;Directory "/srv/www/www.example.com/htdocs"&gt;
  Require all granted
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;</screen>
     </example>
    </sect4>
   </sect3>
  </sect2>



  <xi:include href="apache2_yast_i.xml"/>


 </sect1>
 <sect1 xml:id="sec-apache2-start-stop">
  <title>启动和停止 Apache</title>

  <remark>taroth 2014-02-11: @file-maintainer: please give the following a
 thorough check - so far I only replaced the rc* commands by the systemctl
 (and where those are not available, by apachectl commands as advised by
 crrodriguez), but the descriptions might need adjustment and some commands
 are probably no longer around, therefore I commented them</remark>

  <para>
   如果按<xref linkend="sec-apache2-configuration-yast"/>中所述使用 YaST 配置，Apache 会在引导时在 <systemitem>multi-user.target</systemitem> 和 <systemitem>graphical.target</systemitem> 中启动。您可以使用 YaST 的 <guimenu>服务管理器</guimenu>或借助 <command>systemctl</command> 命令行工具（<command>systemctl enable</command> 或 <command>systemctl disable</command>）更改此行为。
  </para>

  <para>
   要在正在运行的系统上启动、停止或操作 Apache，请使用 <command>systemctl</command> 或 <command>apachectl</command> 命令，详见下面的说明。
  </para>

  <para>
   有关 <command>systemctl</command> 命令的一般信息，请参考<xref linkend="sec-boot-systemd-basics-services"/>。
  </para>

  <variablelist>
   <varlistentry>
    <term><command>systemctl status apache2</command>
    </term>
    <listitem>
     <para>
      请检查 Apache 是否已启动。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl start apache2</command>
    </term>
    <listitem>
     <para>
      如果 Apache 未在运行，则启动它。
     </para>
    </listitem>
   </varlistentry>


   <varlistentry>
    <term><command>systemctl stop apache2</command>
    </term>
    <listitem>
     <para>
      通过终止父进程来停止 Apache。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><command>systemctl restart apache2</command>
    </term>
    <listitem>
     <para>
      停止然后重启动 Apache。如果 Web 服务器没有预先运行，则启动它。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl try-restart apache2</command>
    </term>
    <listitem>
     <para>
      仅当 Apache 已在运行时才停止并重启动它。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>systemctl reload apache2</command>
    </term>
    <listitem>
     <para>
      停止 Web 服务器时，应建议所有生成的 Apache 进程在关闭之前首先完成它们的请求。每个进程终止时，会替换为一个新启动的进程，继而导致 Apache 完全<quote>重启动</quote>。
     </para>
     <tip>
      <title>在生产环境中重启动 Apache</title>
      <para>
       使用此命令，无需中断连接，即可激活 Apache 配置中的更改。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   
   <varlistentry>
    <term><command>systemctl stop apache2</command></term>
    <listitem>
     <para>
      在经过 <systemitem>GracefulShutdownTimeout</systemitem> 所配置的指定时间段后停止 Web 服务器，以确保现有请求可以完成。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl configtest</command>
    </term>
    <listitem>
     <para>
      在不影响运行的 Web 服务器的情况下检查配置文件的语法。由于此检查是在服务器每次启动时强制执行的，所以通常不需要显式运行测试（如果发现配置错误，则 Web 服务器将不启动、重装载或重启动）。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>apachectl status</command> 和 <command>apachectl fullstatus</command>
    </term>
    <listitem>
     <para>
      分别转储不全或完整状态屏幕。需要启用 <systemitem>mod_status</systemitem> 模块，以及安装基于文本的浏览器（例如 <command>links</command> 或 <command>w3m</command>）。<remark>
       FIXME: Not sure about whether the following bit has changed since SLE
       11 and rcapache2. - sknorr, 2017-06-07
      </remark>此外，还必须将<literal>状态</literal>添加到文件 <systemitem>/etc/sysconfig/apache2</systemitem> 中的 <filename>APACHE_SERVER_FLAGS</filename>。
     </para>
    </listitem>
   </varlistentry>





  </variablelist>

  <tip>
   <title>其他标志</title>
   <para>
    如果您为命令指定了其他标志，这些标志就会传递给 Web 服务器。
   </para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-apache2-modules">
  <title>安装、激活和配置模块</title>

  <para>
   Apache 软件是以模块化方式构建的：除某些核心任务外的所有功能都是通过模块处理的。这方面的发展很快，甚至连 HTTP 都是由模块 (<systemitem>http_core</systemitem>) 处理的。
  </para>

  <para>
   Apache 模块可以在构建时编译成 Apache 二进制文件，或在运行时动态装载。请参见<xref linkend="sec-apache2-modules-activating"/>以获取有关如何动态装载模块的详细信息。
  </para>

  <para>
   Apache 模块可以划分为四个不同的类别：
  </para>

  <variablelist>
   <varlistentry>
    <term>基础模块</term>
    <listitem>
     <para>
      默认情况下，基础模块将编译到 Apache 中。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上的 Apache 中仅编译了 <systemitem>mod_so</systemitem>（装载其他模块时需要）和 <systemitem>http_core</systemitem>。所有其他对象都可用作共享对象：它们可在运行时被包含，而不是包含在服务器二进制文件本。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>扩展模块</term>
    <listitem>
     <para>
      通常，扩展模块包含在 Apache 软件包中，但一般不静态编译到服务器中。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，它们以共享对象方式提供，在运行时装载到 Apache 中。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>外部模块</term>
    <listitem>
     <para>
      标注为外部的模块不包含在正式 Apache 发行版中。不过，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了其中的几个模块。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>多处理模块 (MPM)</term>
    <listitem>
     <para>
      MPM 负责接受和处理对 Web 服务器的请求，代表 Web 服务器软件的核心。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-apache2-modules-installing">
   <title>模块安装</title>
   <para>
    如果您按<xref linkend="sec-apache2-quickstart-installation"/>中所述执行了默认安装，那么以下模块已经安装：所有基本和扩展模块、多处理模块 Prefork MPM 以及外部模块 <systemitem>mod_python</systemitem>。
   </para>
   <para>
    您可以启动 YaST，然后选择<menuchoice><guimenu>软件</guimenu> <guimenu> 软件管理</guimenu></menuchoice>，来安装其他外部模块。现在请选择<menuchoice><guimenu>视图</guimenu> <guimenu>搜索</guimenu></menuchoice>并搜索 <emphasis>apache</emphasis>。在其他包中，结果列表将包含所有可用的外部 Apache 模块。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-activating">
   <title>激活和停用</title>
   <para>
    手动或用 YaST 激活或停用特定模块。在 YaST 中，需要使用<xref linkend="sec-apache2-configuration-yast-wizard"/>中所述的模块配置启用或禁用脚本语言模块（PHP5、Perl 和 Python）。可以按<xref linkend="sec-apache2-configuration-yast-server-configuration-modules"/>中所述启用或禁用所有其他模块。
   </para>
   <para>
    如果您想手动激活或停用这些模块，请分别使用命令 <command>a2enmod</command> <replaceable>MODULE</replaceable> 或 <command>a2dismod</command> <replaceable>MODULE</replaceable>。<command>a2enmod -l</command> 会输出所有当前活动的模块列表。
   </para>
   <important>
    <title>包含外部模块的配置文件</title>
    <para>
     如果已经手动激活外部模块，则确保在所有虚拟主机配置中装载其配置文件。外部模块的配置文件位于 <filename>/etc/apache2/conf.d/</filename> 下，并且默认装载到 <filename>/etc/apache2/default-server.conf</filename> 中。要获取更精密的控制，您可以注释掉 <filename>/etc/apache2/default-server.conf</filename> 中的内容，并仅将该文件添加到特定虚拟主机。请参见 <filename>/etc/apache2/vhosts.d/vhost.template</filename> 获取示例。
    </para>
   </important>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-base-extension">
   <title>基础模块和扩展模块</title>
   <para>
    Apache 文档中对所有基础模块和扩展模块均进行了详细的描述。此处仅提供大多数重要模块的简短描述。请参见 <link xlink:href="http://httpd.apache.org/docs/2.4/mod/">http://httpd.apache.org/docs/2.4/mod/</link> 以了解有关每个模块的详细信息。
   </para>
   <remark>taroth 2010-07-07: new module "mod_reqtimeout" to set timeouts and
    minimum data rates for receiving requests from a client (see changelog entry
    from Mar 08th 2010) -- module classified as "experimental" on the Apache
    Web site </remark>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_actions</systemitem>
     </term>
     <listitem>
      <para>
       请求某个特定 MIME 类型（如 <systemitem>application/pdf</systemitem>）、带特定扩展名的文件（如 <filename>.rpm</filename>）或某个特定请求方法（如 <systemitem>GET</systemitem>）时，提供执行脚本的方法。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_alias</systemitem>
     </term>
     <listitem>
      <para>
       提供 <systemitem>Alias</systemitem> 和 <systemitem>Redirect</systemitem> 指令，供您将 URL 映射到特定目录 (<systemitem>Alias</systemitem>)，或将请求的 URL 重定向到另一个位置。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth*</systemitem>
     </term>
     <listitem>
      <para>
       身份验证模块提供不同的身份验证方法：使用 <systemitem>mod_auth_basic</systemitem> 的基本身份验证或使用 <systemitem>mod_auth_digest</systemitem> 的摘要身份验证。
      </para>
      <para>
       <systemitem>mod_auth_basic</systemitem> 和 <systemitem>mod_auth_digest</systemitem> 必须与身份验证提供程序模块 <systemitem>mod_authn_*</systemitem>（例如，用于基于文本文件的身份验证的 <systemitem>mod_authn_file</systemitem>），以及授权模块 <systemitem>mod_authz_*</systemitem>（例如，用于用户授权的 <systemitem>mod_authz_user</systemitem>）结合使用。
      </para>
      <para>
       有关该主题的更多信息可以从<citetitle>Authentication HOWTO</citetitle>中获取，网址是 <link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_autoindex</systemitem>
     </term>
     <listitem>
      <para>
       当不存在索引文件（例如 <filename>index.html</filename>）时，Autoindex 将生成目录列表。这些索引的外观是可配置的。默认情况下启用此模块。但是，在默认情况下，目录列表将通过<systemitem>选项</systemitem>指令禁用，覆盖虚拟主机配置中的此设置。此模块的默认配置文件位于 <filename>/etc/apache2/mod_autoindex-defaults.conf</filename> 处。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_cgi</systemitem>
     </term>
     <listitem>
      <para>
       执行 CGI 脚本时需要有 <systemitem>mod_cgi</systemitem>。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_deflate</systemitem>
     </term>
     <listitem>
      <para>
       可使用此模块配置 Apache，使其在传递给定文件类型之前实时压缩这些文件类型。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_dir</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_dir</systemitem> 提供 <systemitem>DirectoryIndex</systemitem> 指令，它可用来配置在请求目录时自动传递的文件（默认使用 <filename>index.html</filename>）。当目录请求不包含尾部斜杠时，它还能自动重定向到正确的 URL。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_env</systemitem>
     </term>
     <listitem>
      <para>
       控制传递到 CGI 脚本或 SSI 页面的环境。环境变量可设置或取消设置，或者从调用 httpd 进程的外壳传递。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_expires</systemitem>
     </term>
     <listitem>
      <para>
       使用 <systemitem>mod_expires</systemitem>，便可通过发送 <systemitem>Expires</systemitem> 报头来控制代理和浏览器缓存刷新文档的频率。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_http2</systemitem>
     </term>
     <listitem>
      <para>
       通过 <systemitem>mod_http2</systemitem>，Apache 可获取对 HTTP/2 协议的支持。这可以通过在 <systemitem>VirtualHost</systemitem> 中指定 <literal>Protocols h2 http/1.1</literal> 来实现。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_include</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_include</systemitem> 允许您使用服务器端包含 (SSI)，它能提供动态生成 HTML 页面的基本功能。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_info</systemitem>
     </term>
     <listitem>
      <para>
       在 http://localhost/server-info/ 下提供服务器配置的完整概述。出于安全考虑，始终应该限制对此 URL 的访问。默认情况下，仅允许 <systemitem class="domainname">localhost</systemitem> 访问此 URL。<systemitem>mod_info</systemitem> 是在 <filename>/etc/apache2/mod_info.conf</filename> 中配置的。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_log_config</systemitem>
     </term>
     <listitem>
      <para>
       使用此模块可配置 Apache 日志文件的外观。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_mime</systemitem>
     </term>
     <listitem>
      <para>
       Mime 模块会根据所传递文件的扩展名（例如，HTML 文档的扩展名为 <systemitem>text/html</systemitem>）来确定文件是否具有正确的 MIME 报头。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_negotiation</systemitem>
     </term>
     <listitem>
      <para>
       对于内容协商是必需的。请参见 <link xlink:href="http://httpd.apache.org/docs/2.4/content-negotiation.html">http://httpd.apache.org/docs/2.4/content-negotiation.html</link> 获取更多信息。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_rewrite</systemitem>
     </term>
     <listitem>
      <para>
       提供 <systemitem>mod_alias</systemitem> 的功能，但功能更全且更为灵活。使用 <systemitem>mod_rewrite</systemitem>，便可根据多个规则、请求报头等来重定向 URL。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_setenvif</systemitem>
     </term>
     <listitem>
      <para>
       基于客户端的请求细节（如客户端发送的浏览器字符串或客户端的 IP 地址）来设置环境变量。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_spelling</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_speling</systemitem> 会尝试自动更正 URL 中的打字错误，例如大小写错误。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_ssl</systemitem>
     </term>
     <listitem>
      <para>
       在 Web 服务器和客户端之间启用加密连接。有关详细信息，请参见<xref linkend="sec-apache2-ssl"/>。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_status</systemitem>
     </term>
     <listitem>
      <para>
       在 http://localhost/server-status/ 下提供有关服务器活动和性能的信息。出于安全考虑，始终应该限制对此 URL 的访问。默认情况下，仅允许 <systemitem class="domainname">localhost</systemitem> 访问此 URL。<systemitem>mod_status</systemitem> 是在 <filename>/etc/apache2/mod_status.conf</filename> 中配置的。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_suexec</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_suexec</systemitem> 允许您在不同的用户和组下运行 CGI 脚本。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_userdir</systemitem>
     </term>
     <listitem>
      <para>
       启用 <filename>~<replaceable>USER</replaceable>/</filename> 下特定于用户的目录。必须在配置中指定 <systemitem>UserDir</systemitem> 指令。默认情况下启用此模块。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-mpm">
   <title>多处理模块</title>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了两个不同的多处理模块 (MPM) 来结合 Apache 使用：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-prefork" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="sec-apache2-modules-mpm-worker" xrefstyle="select:title"/>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-modules-mpm-prefork">
    <title>Prefork MPM</title>
    <para>
     prefork MPM 实施了一个非线程的预生成 Web 服务器。它使 Web 服务器在行为上类似于 Apache 版本 1.x。在该版本中，它隔离每个请求并通过派生单独的子进程来处理请求。这样，有问题的请求就不会影响其他请求，避免了 Web 服务器被锁定。
    </para>
    <para>
     此基于进程的方法 prefork MPM 虽然提供了稳定性，但比相应的 worker MPM 消耗更多的系统资源。prefork MPM 被视为是基于 Unix 操作系统的默认 MPM。
    </para>
    <important>
     <title>本文档中的 MPM</title>
     <para>
      本文档假设 Apache 使用 prefork MPM。
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-modules-mpm-worker">
    <title>Worker MPM</title>
    <para>
     worker MPM 提供一种多线程 Web 服务器。线程是一种<quote>更小</quote>的进程。线程相对于进程的优点是它占用较少的资源。worker MPM 并非仅生成子进程，还通过在服务器进程中使用线程来处理请求。预派生的子进程是多线程的。此方法相比 prefork MPM，使 Apache 消耗更少的系统资源，从而提高了 Apache 的执行效率。
    </para>
    <para>
     一个主要缺点是 worker MPM 的稳定性：如果一个线程损坏，进程的所有线程都会受影响。最严重的情况会导致服务器崩溃。尤其是，如果在高负载下将通用网关接口 (CGI) 与 Apache 一起使用，就可能由于线程无法与系统资源通讯而发生内部服务器错误。将 worker MPM 与 Apache 搭配使用的另一个争议是，并非所有可用的 Apache 模块都是线程安全的，因此它不能与 worker MPM 搭配使用。
    </para>
    <warning>
     <title>将 PHP 模块与 MPM 一起使用</title>
     <para>
      并非所有可用的 PHP 模块都是线程安全的。强烈建议不要将 worker MPM 与 <systemitem>mod_php</systemitem> 一起使用。
     </para>
    </warning>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-external">
   <title>外部模块</title>
   <para>
    此处提供了 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 随附的所有外部模块的列表。在列出的目录中查找模块的文档。
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem>
     </term>
     <listitem>
      <para>
       为 Apache 提供额外支持，以便对由 <systemitem>mod_php5</systemitem> 和 <systemitem>mod_perl</systemitem> 等模块处理的各个 CGI 脚本设置 <phrase>AppArmor</phrase> 限制。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_apparmor</systemitem>
       </member>
       <member> 更多信息：<xref linkend="part-apparmor"/>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_perl</systemitem> 使您能够在嵌入的解释器中运行 Perl 脚本。服务器中嵌入的持久解释器能够避免启动外部解释器并且不会损失 Perl 启动时间。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_perl</systemitem>
       </member>
       <member> 配置文件：<filename>/etc/apache2/conf.d/mod_perl.conf</filename>
       </member>
       <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_perl</filename>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       PHP 是一种服务器端、跨平台 HTML 嵌入式脚本编写语言。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_php5</systemitem>
       </member>
       <member> 配置文件：<filename>/etc/apache2/conf.d/php5.conf</filename>
       </member>
       <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_php5</filename>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_python</systemitem> 允许将 Python 嵌入到 Apache HTTP 服务器中以增强性能并使基于 Web 的应用程序的设计更为灵活。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_python</systemitem>
       </member>
       <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_python</filename>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <systemitem>mod_security</systemitem> 提供用于保护 Web 应用程序免受一系列攻击的 Web 应用程序防火墙。它可以实现对 HTTP 流量的监控和实时分析。
      </para>
      <simplelist>
       <member>包名称：<systemitem>apache2-mod_security2</systemitem>
       </member>
       <member> 配置文件：<filename>/etc/apache2/conf.d/mod_security2.conf</filename>
       </member>
       <member> 更多信息：<filename>/usr/share/doc/packages/apache2-mod_security2</filename>
       </member>
       <member>文档：<link xlink:href="http://modsecurity.org/documentation/"/>
       </member>
      </simplelist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-modules-building-modules">
   <title>编译</title>
   <para>
    高级用户可以通过编写自定义模块来扩展 Apache。要开发 Apache 模块或编译第三方模块，就需要 <systemitem>apache2-devel</systemitem> 包以及相应的开发工具。<systemitem>apache2-devel</systemitem> 还包含 <command>apxs2</command> 工具，此工具是编译其他 Apache 模块所必需的。
   </para>
   <para>
    <command>apxs2</command> 允许从源代码编译和安装模块（包括对配置文件进行必要的更改），这将创建可在运行时装载入 Apache 的<emphasis>动态共享对象</emphasis> (DSO)。
   </para>
   <para>
    <command>apxs2</command> 二进制文件在 <filename>/usr/sbin</filename> 中：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2</filename> — 适合用来构建可搭配任何 MPM 使用的扩展模块。安装位置为 <filename>/usr/lib64/apache2</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-prefork</filename> — 适用于 prefork MPM 模块。安装位置为 <filename>/usr/lib64/apache2-prefork</filename>。
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>/usr/sbin/apxs2-worker</filename> — 适用于 worker MPM 模块。安装位置为 <filename>/usr/lib64/apache2-worker</filename>。
     </para>
    </listitem>
   </itemizedlist>
   <para>
    使用以下命令从源代码安装并激活模块：
   </para>
<screen>cd /path/to/module/source
apxs2 -cia <replaceable>MODULE</replaceable>.c</screen>
   <para>
    其中，<option>-c</option> 编译该模块，<option>-i</option> 安装该模块，<option>-a</option> 激活该模块。<command>apxs2</command> 的其他选项在 <systemitem>apxs2(1)</systemitem> 手册页中有描述。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-cgi">
  <title>启用 CGI 脚本</title>

  <para>
   Apache 的通用网关接口 (CGI) 允许您使用程序或脚本（通常称为 CGI 脚本）创建动态内容。可以用任何编程语言来编写 CGI 脚本。通常使用诸如 Perl 或 PHP 之类的脚本语言。
  </para>

  <para>
   为了使 Apache 能够递送由 CGI 脚本创建的内容，需要激活 <systemitem>mod_cgi</systemitem>。另外还需要 <systemitem>mod_alias</systemitem>。默认情况下启用这两种模块。请参见<xref linkend="sec-apache2-modules-activating"/>来获取有关激活模块的详细信息。
  </para>

  <warning>
   <title>CGI 安全性</title>
   <para>
    允许服务器执行 CGI 脚本是一项潜在的安全性漏洞。请参见<xref linkend="sec-apache2-security"/>以了解更多信息。
   </para>
  </warning>

  <sect2 xml:id="sec-apache2-cgi-configuration">
   <title>Apache 配置</title>
   <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，仅允许在目录 <filename>/srv/www/cgi-bin/</filename> 中执行 CGI 脚本。已配置此位置来执行 CGI 脚本。如果已经创建了虚拟主机配置（请参见<xref linkend="sec-apache2-configuration-manually-vhost"/>）并且想将脚本放置在特定于主机的目录中，必须解锁并配置此目录。
   </para>
   <example xml:id="ex-apache2-cgi-configuration">
    <title>VirtualHost CGI 配置</title>
<screen>ScriptAlias /cgi-bin/ "/srv/www/www.example.com/cgi-bin/"<co xml:id="co-apache2-cgi-script-alias"/>

&lt;Directory "/srv/www/www.example.com/cgi-bin/"&gt;
 Options +ExecCGI<co xml:id="co-apache2-cgi-options"/>
 AddHandler cgi-script .cgi .pl<co xml:id="co-apache2-cgi-handler"/>
 Require all granted<co xml:id="co-apache2-cgi-order"/>
&lt;/Directory&gt;</screen>
    <calloutlist>
     <callout arearefs="co-apache2-cgi-script-alias">
      <para>
       指示 Apache 在此目录中将所有文件作为 CGI 脚本处理。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-options">
      <para>
       启用 CGI 脚本执行
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-handler">
      <para>
       指示服务器将扩展名为 .pl 和 .cgi 的文件视为 CGI 脚本。根据需要进行调整。
      </para>
     </callout>
     <callout arearefs="co-apache2-cgi-order">
      <para>
       <systemitem>Require</systemitem> 指令控制默认访问状态。在此例中，授予对指定目录的访问权且无任何限制。有关身份验证和授权的更多信息，请参见<link xlink:href="http://httpd.apache.org/docs/2.4/howto/auth.html"/>。
      </para>
     </callout>
    </calloutlist>
   </example>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-example-script">
   <title>运行示例脚本</title>
   <para>
    CGI 编程不同于“常规”编程，因为 CGI 程序和脚本前面必须有一个 MIME 类型的报头，例如 <literal>Content-type: text/html</literal>。此报头将发送到客户端，所以它知道所接收内容的类型。其次，脚本的输出必须是客户端（通常是 Web 浏览器）所知道的东西，比如 HTML（通常情况）、纯文本或图像。
   </para>
   <para>
    在 <filename>/usr/share/doc/packages/apache2/test-cgi</filename> 下提供的简单测试脚本是 Apache 包的一部分。它将某些环境变量的内容输出为纯文本。将此脚本复制到 <filename>/srv/www/cgi-bin/</filename> 或您虚拟主机的脚本目录 (<filename>/srv/www/www.example.com/cgi-bin/</filename>) 中，并将它命名为 <filename>test.cgi</filename>。编辑该文件，将 <literal>#!/bin/sh</literal> 作为第一行。
   </para>
   <para>
    可通过 Web 服务器访问的文件应由用户 <systemitem class="username">root</systemitem> 拥有。有关更多信息，请参见<xref linkend="sec-apache2-security"/>。由于该 Web 服务器是由不同用户运行的，所以 CGI 脚本必须可被世界各地的用户执行和读取。更改为 CGI 目录并使用命令 <command>chmod 755 test.cgi</command> 来应用正确的权限。
   </para>
   <para>
    现在调用 <literal>http://localhost/cgi-bin/test.cgi</literal> 或 <literal>http://www.example.com/cgi-bin/test.cgi</literal>。应该能看到 <quote>CGI/1.0 测试脚本报告</quote>。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-cgi-troubleshooting">
   <title>CGI 查错</title>
   <para>
    如果没有看到测试程序的输出而是看到了错误消息，则请检查以下项：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <title>CGI 查错</title>
    <listitem>
     <para>
      <emphasis>是否在更改配置后重装载了服务器？</emphasis>如果没有，请使用 <command>systemctl reload apache2</command> 重新装载
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>如果已经配置了自定义 CGI 目录，那么该配置是否正确？</emphasis>如果不确定，请尝试默认 CGI 目录 <filename>/srv/www/cgi-bin/</filename> 中的脚本并用 <literal>http://localhost/cgi-bin/test.cgi</literal> 调用它。
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>文件权限是否正确？</emphasis>更改为 CGI 目录并执行 <command>ls -l test.cgi</command>。输出应该以下面的字符串开头
     </para>
<screen>-rwxr-xr-x  1 root root</screen>
    </listitem>
    <listitem>
     <para>
      确保脚本中没有编程错误。如果还未更改 <filename>test.cgi</filename>，则问题应该不大，但是如果正在使用您自己的程序，则始终要确保它们没有编程错误。
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-ssl">
  <title>使用 SSL 设置安全性 Web 服务器</title>

  <para>
   只要在 Web 服务器和客户端之间传送敏感数据（如信用卡信息），就需要具有带身份验证的安全的加密连接。<systemitem>mod_ssl</systemitem> 使用安全套接字层（SSL）和传输层安全（TLS）协议来为客户端和 Web 服务器之间的 HTTP 通信提供强有力的加密机制。使用 SSL/TLS 时，将在 Web 服务器和客户端之间建立专用连接。如此可确保数据完整性，并且客户端和服务器能够彼此验证。
  </para>

  <para>
   基于此目的，服务器在回答对 URL 的任何请求之前，会发送一个 SSL 证书，其中包含证明服务器有效身份的信息。反过来，这保证了该服务器对于通信来说是唯一正确的终端。此外，证书使得在客户端和服务器之间建立起加密连接，确保在不泄露敏感的明文内容的情况下传输信息。
  </para>

  <para>
   <systemitem>mod_ssl</systemitem> 不会实施 SSL/TLS 协议本身，而是充当 Apache 和 SSL 库之间的接口。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，将使用 OpenSSL 库。OpenSSL 将自动随 Apache 安装。
  </para>

  <para>
   将 <systemitem>mod_ssl</systemitem> 与 Apache 一起使用的最明显效果就是 URL 的前缀为 <literal>https://</literal>（而不是 <literal>http://</literal>）。
  </para>

  <sect2 xml:id="sec-apache2-ssl-certificate">
   <title>创建 SSL 证书</title>
   <para>
    要将 SSL/TLS 与 Web 服务器搭配使用，您需要创建 SSL 证书。在 Web 服务器和客户端之间授权时需要此证书，以便每一方都能明确地识别另一方。为了确保证书的完整性，证书必须由所有用户都信任的一方签署。
   </para>
   <para>
    您可创建三种类型的证书：<quote>虚设</quote>证书（仅用于测试）、自我签名证书（用于信任您的指定用户群）和由独立的、众所周知的证书颁发机构 (CA) 签署的证书。
   </para>
   <para>
    创建证书分两步执行。首先，生成证书颁发机构的私用密钥，然后使用此密钥签署服务器证书。
   </para>
   <tip>
    <title>更多信息</title>
    <para>
     要想更多地了解 SSL/TLS 的概念和定义，请参见 <link xlink:href="http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html">http://httpd.apache.org/docs/2.4/ssl/ssl_intro.html</link>。
    </para>
   </tip>
   <sect3 xml:id="sec-apache2-ssl-certificate-dummy">
    <title>创建<quote>虚拟</quote>证书</title>
    <para>
     要生成虚设证书，请调用脚本 <command>/usr/bin/gensslcert</command>。它创建或重写下列文件。使用 <command>gensslcert</command> 的可选开关调整证书。调用 <command>/usr/bin/gensslcert </command>
     <option>-h</option> 了解更多信息。
    </para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/ca.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.crt/server.crt</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.key/server.key</filename>
      </para>
     </listitem>
     <listitem>
      <para>
       <filename>/etc/apache2/ssl.csr/server.csr</filename>
      </para>
     </listitem>
    </itemizedlist>
    <para>
     还会将 <filename>ca.crt</filename> 的副本放在 <filename>/srv/www/htdocs/CA.crt</filename> 下以供下载。
    </para>
    <important>
     <title>仅供测试</title>
     <para>
      不能在生产系统上使用虚设证书。它只能用来测试。
     </para>
    </important>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-custom">
    <title>创建自签署证书</title>
    <para>
     如果要为内部网或指定用户群设置安全的 Web 服务器，通过您自己的证书颁发机构 (CA） 对证书签名可能就足矣。请注意，访问此类网站的用户将会看到类似<quote>此网站不可信</quote>的警告，因为 Web 浏览器不能识别自我签名证书。
    </para>
    <important>
     <title>自我签名证书</title>
     <para>
      仅在 Web 服务器上使用自签署证书，此证书必须可由知道并相信您是证书授权者的人员访问。例如，不建议在公共商店使用此类证书。
     </para>
    </important>
    <para>
     首先，您需要生成证书签名请求 (CSR)。您将需要使用 <command>openssl</command>，并采用 <literal>PEM</literal> 证书格式。在执行此步骤期间，系统将要求您输入通行口令并回答几个问题。请记住您输入的通行口令，将来还要使用它。
    </para>
<screen>sudo openssl req -new &gt; new.cert.csr
Generating a 1024 bit RSA private key
..++++++
.........++++++
writing new private key to 'privkey.pem'
Enter PEM pass phrase:<co xml:id="co-ssl-self-pass1"/>
Verifying - Enter PEM pass phrase:<co xml:id="co-ssl-self-pass2"/>
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:<co xml:id="co-ssl-self-country"/>
State or Province Name (full name) [Some-State]:<co xml:id="co-ssl-self-state"/>
Locality Name (eg, city) []:<co xml:id="co-ssl-self-city"/>
Organization Name (eg, company) [Internet Widgits Pty Ltd]:<co xml:id="co-ssl-self-org"/>
Organizational Unit Name (eg, section) []:<co xml:id="co-ssl-self-uname"/>
Common Name (for example server FQDN, or YOUR name) []:<co xml:id="co-ssl-self-cname"/>
Email Address []:<co xml:id="co-ssl-self-email"/>

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:<co xml:id="co-ssl-self-challenge"/>
An optional company name []:<co xml:id="co-ssl-self-optional"/></screen>
    <calloutlist>
     <callout arearefs="co-ssl-self-pass1">
      <para>
       填写您的通行口令，
      </para>
     </callout>
     <callout arearefs="co-ssl-self-pass2">
      <para>
       ...再次填写通行口令（并记住它）。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-country">
      <para>
       填写两个字母的国家/地区代码，例如 <literal>GB</literal> 或 <literal>CZ</literal>。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-state">
      <para>
       填写您所在的省/自治区/直辖市名称。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-city">
      <para>
       填写城市名称，例如 <literal>Prague</literal>。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-org">
      <para>
       填写您的工作单位名称。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-uname">
      <para>
       填写您的组织单位，没有则保留为空白。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-cname">
      <para>
       填写服务器的域名，或者您的名字和姓氏。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-email">
      <para>
       填写您的办公电子邮件地址。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-challenge">
      <para>
       将询问口令保留为空白，否则您每次重启动 Apache Web 服务器都需要输入该口令。
      </para>
     </callout>
     <callout arearefs="co-ssl-self-optional">
      <para>
       填写选填的公司名称，或保留为空白。
      </para>
     </callout>
    </calloutlist>
    <para>
     现在可以生成证书。您将再次使用 <command>openssl</command>，并且证书的格式是默认的 <literal>PEM</literal>。
    </para>
    <procedure>
     <title>生成证书</title>
     <step>
      <para>
       将密钥的私用部分导出到 <filename>new.cert.key</filename>。系统将提示您输入您在创建证书签名请求 (CSR) 时所输入的通行口令。
      </para>
<screen>sudo openssl rsa -in privkey.pem -out new.cert.key</screen>
     </step>
     <step>
      <para>
       根据您在签名请求中填写的信息生成证书的公共部分。<option>-days</option> 选项指定证书多长时间以后失效。您可以在证书失效前将其撤消或更换。
      </para>
<screen>sudo openssl x509 -in new.cert.csr -out new.cert.cert -req \
-signkey new.cert.key -days 365</screen>
     </step>
     <step>
      <para>
       将证书文件复制到相关的目录，以便 Apache 服务器可以读取它们。确保私用密钥 <filename>/etc/apache2/ssl.key/server.key</filename> 不是人们可以看懂的格式，而公共 PEM 证书 <filename>/etc/apache2/ssl.crt/server.crt</filename> 则是。
      </para>
<screen>sudo cp new.cert.cert /etc/apache2/ssl.crt/server.crt
sudo cp new.cert.key /etc/apache2/ssl.key/server.key</screen>
     </step>
    </procedure>
    <tip>
     <title>公共证书位置</title>
     <para>
      最后一步是将公共证书文件从 <filename>/etc/apache2/ssl.crt/server.crt</filename> 复制到用户可以访问的位置，以便将它合并到用户 Web 浏览器中已知且可信的 CA 列表中。否则，浏览器将指示证书是由未知授权者发出的。
     </para>
    </tip>
   </sect3>
   <sect3 xml:id="sec-apache2-ssl-certificate-official">
    <title>获取正式签署的证书</title>
    <para>
     签署证书的正式证书颁发机构有多个。证书是由值得信任的第三方签署的，所以可以完全相信。公共操作安全 Web 服务器通常具有正式签署的证书。有关最常用的证书颁发机构 (CA) 列表，请访问 <link xlink:href="https://en.wikipedia.org/wiki/Certificate_authority#Providers"/>。
    </para>
    <para>
     请求正式签署的证书时，无需向 CA 发送证书。相反，请发出证书签署请求 (CSR)。要创建 CSR，请运行以下命令：
    </para>
<screen>openssl req -new -newkey rsa:2048 -nodes -keyout newkey.pem -out newreq.pem</screen>
    <para>

     系统将要求您输入判别名。这要求您回答几个问题，例如国家/地区名称或组织名称。输入有效的数据，在此处输入的所有内容稍后都会显示在证书中并检查。无需回答所有问题。如果有问题不适用于您或者您不想回答，请使用<quote>.</quote>. 常用名就是 CA，请选择一个重要的名称，例如<replaceable>我的公司</replaceable> CA。最后，必须输入询问口令和备用的公司名称。
    </para>
    <para>
     在调用脚本的目录中查找 CSR。文件名是 <filename>newreq.pem</filename>。
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-apache2-ssl-configuration">
   <title>使用 SSL 配置 Apache</title>
   <para>
    Web 服务器端的 SSL 和 TLS 请求的默认端口是 443。在端口 80 上的<quote>普通</quote> Apache 侦听和端口 443 上支持 SSL/TLS 的 Apache 侦听之间没有冲突。事实上，HTTP 和 HTTPS 可以使用相同的 Apache 实例运行。通常使用一个虚拟主机将请求发送到端口 80 和端口 443 以区分虚拟服务器。
   </para>
   <important>
    <title>防火墙配置</title>
    <para>
     记住在端口 443 上为支持 SSL 的 Apache 打开防火墙。可以按<xref linkend="sec-security-firewall-SuSE-yast"/>中的描述使用 YaST 来完成此操作。
    </para>
   </important>
   <para>
    在全局服务器配置中，SSL 模块默认情况下处于启用状态。如果它在您的主机上已禁用，请使用以下命令激活它：<command>a2enmod ssl</command>。要最终启用 SSL，需要使用标志<quote>SSL</quote>启动服务器。要执行此操作，请调用 <command>a2enflag SSL</command>（区分大小写！）。如果打算使用口令加密服务器证书，则还应增加 <filename>/etc/sysconfig/apache2</filename> 中 <systemitem>APACHE_TIMEOUT</systemitem> 的值，这样在 Apache 启动时，您就有足够的时间输入通行口令。重启动服务器可使这些更改生效。仅重装载是不够的。
   </para>
   <para>
    虚拟主机配置目录中包含模板 <filename>/etc/apache2/vhosts.d/vhost-ssl.template</filename>，该模板带有详细记录的特定于 SSL 的指令。请参见<xref linkend="sec-apache2-configuration-manually-vhost"/>了解通用虚拟主机配置。
   </para>
   <para>
    要开始配置，请将模板复制到 <filename>/etc/apache2/vhosts.d/<replaceable>mySSL-host</replaceable>.conf</filename>，并对其进行编辑。调整以下指令的值应该就足够了：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem>DocumentRoot</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerName</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ServerAdmin</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>ErrorLog</systemitem>
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem>TransferLog</systemitem>
     </para>
    </listitem>
   </itemizedlist>
   <sect3 xml:id="sec-apache2-ssl-configuration-name-based">
    <title>基于名称的虚拟主机和 SSL</title>
    <para>
     默认情况下，不能在仅具有一个 IP 地址的服务器上运行多个启用了 SSL 的虚拟主机。基于名称的虚拟主机要求 Apache 了解已请求了哪些服务器名称。SSL 连接问题在于，此类请求只能在已建立 SSL 连接之后读取（通过使用默认虚拟主机）。因此用户将收到警告消息，指示证书与服务器名称不匹配。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 提供了一个 SSL 协议扩展：服务器名称指示 (SNI)。该协议会在 SSL 协商过程中发送虚拟域的名称，从而解决了这一问题。这样服务器就能提前<quote>切换</quote>到正确的虚拟域，并向浏览器显示正确的证书。
    </para>
    <para>
     <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上默认会启用 SNI。为了使基于名称的虚拟主机能够使用 SSL，可按<xref linkend="sec-apache2-configuration-manually-vhost-named-vhosts"/>中所述配置服务器（请注意，需要将端口 <literal>443</literal> 而不是端口 <literal>80</literal> 用于 SSL）。
    </para>
    <important>
     <title>SNI 浏览器支持</title>
     <para>
      客户端也必须支持 SNI。不过，只有大部分浏览器支持 SNI，某些较旧的浏览器不支持。更多信息请参见<link xlink:href="https://en.wikipedia.org/wiki/Server_Name_Indication#Support"/>。
     </para>
     <para>
      要配置对不支持 SNI 的浏览器的处理方式，请使用指令 <systemitem>SSLStrictSNIVHostCheck</systemitem>。在服务器配置中设置为 <literal>on</literal> 时，所有虚拟主机都将拒绝不支持 SNI 的浏览器。如果 <systemitem>VirtualHost</systemitem> 指令中设置为 <literal>on</literal>，对此特定主机的访问将被拒。
     </para>
     <para>
      在服务器配置中设置为 <literal>off</literal> 时，服务器的行为类似于不支持 SNI。SSL 请求将由定义的<emphasis>第一个</emphasis>虚拟主机（端口 443）处理。
     </para>
    </important>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-multiple-instances">
  <title>在同一服务器上运行多个 Apache 实例</title>

  <para>
   从 <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> <phrase os="sles;sled"/> 12 SP1 开始，您可以在同一服务器上运行多个 Apache 实例。与运行多个虚拟主机相比，这提供了诸多优势（请参见<xref linkend="sec-apache2-configuration-manually-vhost"/>）：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     如果需要将虚拟主机禁用一段时间，您需要更改 Web 服务器配置，并将其重启动以使更改生效。
    </para>
   </listitem>
   <listitem>
    <para>
     如果一个虚拟主机出现问题，您需要重启动所有的虚拟主机。
    </para>
   </listitem>
  </itemizedlist>

  <para>
   您可以照常运行默认的 Apache 实例：
  </para>

<screen>sytemctl start apache2</screen>

  <para>
   它会读取默认的 <filename>/etc/sysconfig/apache2</filename> 文件。如果该文件不存在，或者存在但未设置 <systemitem>APACHE_HTTPD_CONF</systemitem> 变量，则该实例将读取 <filename>/etc/apache2/httpd.conf</filename>。
  </para>

  <para>
   要激活另一个 Apache 实例，请运行：
  </para>

<screen>systemctl start apache2@<replaceable>INSTANCE_NAME</replaceable></screen>

  <para>
   例如：
  </para>

<screen>systemctl start apache2@example_web.org</screen>

  <para>
   默认情况下，该实例会使用 <filename>/etc/apache2@example_web.org/httpd.conf</filename> 作为主要配置文件，您可以在 <filename>/etc/sysconfig/apache2@example_web.org</filename> 中设置 <systemitem>APACHE_HTTPD_CONF</systemitem> 来重写此设置。
  </para>

  <para>
   下面显示了一个设置更多 Apache 实例的示例。请注意，您需要以 <systemitem class="username">root</systemitem> 身份执行所有命令。
  </para>

  <procedure>
   <title>配置其他 Apache 实例</title>
   <step>
    <para>
     在 <filename>/etc/sysconfig/apache2</filename> 的基础上创建一个新的配置文件，例如 <filename>/etc/sysconfig/apache2@example_web.org</filename>：
    </para>
<screen>cp /etc/sysconfig/apache2 /etc/sysconfig/apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     编辑文件 <filename>/etc/sysconfig/apache2@example_web.org</filename>，将包含以下内容的行
    </para>
<screen>APACHE_HTTPD_CONF</screen>
    <para>
     更改为
    </para>
<screen>APACHE_HTTPD_CONF="/etc/apache2/httpd@example_web.org.conf"</screen>
   </step>
   <step>
    <para>
     在 <filename>/etc/apache2/httpd.conf</filename> 的基础上创建文件 <filename>/etc/apache2/httpd@example_web.org.conf</filename>。
    </para>
<screen>cp /etc/apache2/httpd.conf /etc/apache2/httpd@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     编辑 <filename>/etc/apache2/httpd@example_web.org.conf</filename>，将
    </para>
<screen>Include /etc/apache2/listen.conf</screen>
    <para>
     更改为
    </para>
<screen>Include /etc/apache2/listen@example_web.org.conf</screen>
    <para>
     检查所有指令，并根据需要予以更改。您可能需要更改
    </para>
<screen>Include /etc/apache2/global.conf</screen>
    <para>
     并为每个实例创建新的 <filename>global@example_web.org.conf</filename>。建议将
    </para>
<screen>ErrorLog /var/log/apache2/error_log</screen>
    <para>
     更改为
    </para>
<screen>ErrorLog /var/log/apache2/error@example_web.org_log</screen>
    <para>
     以便每个实例都有独立的日志。
    </para>
   </step>
   <step>
    <para>
     在 <filename>/etc/apache2/listen.conf</filename> 的基础上创建 <filename>/etc/apache2/listen@example_web.org.conf</filename>。
    </para>
<screen>cp /etc/apache2/listen.conf /etc/apache2/listen@example_web.org.conf</screen>
   </step>
   <step>
    <para>
     编辑 <filename>/etc/apache2/listen@example_web.org.conf</filename>，将
    </para>
<screen>Listen 80</screen>
    <para>
     更改为要用于运行新实例的端口号，例如 82：
    </para>
<screen>Listen 82</screen>
    <para>
     要通过安全协议（请参见<xref linkend="sec-apache2-ssl"/>）运行新的 Apache 实例，还需将下面一行
    </para>
<screen>Listen 443</screen>
    <para>
     更改为（示例）
    </para>
<screen>Listen 445</screen>
   </step>
   <step>
    <para>
     启动新的 Apache 实例：
    </para>
<screen>systemctl start apache2@example_web.org</screen>
   </step>
   <step>
    <para>
     在 Web 浏览器中打开 <literal>http://server_name:82</literal>，检查服务器是否正在运行。如果以前更改了新实例的错误日志文件名，您可以检查这项更改：
    </para>
<screen>tail -f /var/log/apache2/error@example_web.org_log</screen>
   </step>
  </procedure>

  <para>
   下面是在同一服务器上设置多个 Apache 实例时要注意的几点：
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <filename>/etc/sysconfig/apache2@<replaceable>INSTANCE_NAME</replaceable></filename> 文件可以包含与 <filename>/etc/sysconfig/apache2</filename> 相同的变量，包括模块装载和 MPM 设置。
    </para>
   </listitem>
   <listitem>
    <para>
     当有其他实例在运行时，默认的 Apache 实例就无需运行。
    </para>
   </listitem>
   <listitem>
    <para>
     如果未使用 <systemitem>HTTPD_INSTANCE</systemitem> 环境变量另行指定，Apache 助手实用程序 <command>a2enmod</command>、<command>a2dismod</command> 和 <command>apachectl</command> 将在默认的 Apache 实例上运行。下面的示例
    </para>
<screen>export HTTPD_INSTANCE=example_web.org
a2enmod access_compat
a2enmod status
apachectl start</screen>
    <para>
     会将 <systemitem>access_compat</systemitem> 和 <systemitem>status</systemitem> 模块添加到 <filename>/etc/sysconfig/apache2@example_web.org</filename> 的 <systemitem>APACHE_MODULES</systemitem> 变量，然后启动 <literal>example_web.org</literal> 实例。
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-apache2-security">
  <title>避免安全性问题</title>

  <para>
   对公共因特网开放的 Web 服务器需要不断加强管理。对于软件和意外的错误配置，安全问题似乎都是不可避免的。有关如何处理这些问题，在此有一些提示。
  </para>

  <sect2 xml:id="sec-apache2-security-up-to-date">
   <title>最新软件</title>
   <para>
    在 Apache 软件中发现漏洞时，SUSE 将会发出安全忠告。其中包含修复漏洞的相关指导，用户应该在情况允许时予以采纳。SUSE 安全性声明可以从以下位置处获取：
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>网页</title>
      <para>
       <link xlink:href="http://www.suse.com/support/security/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>邮件列表存档</title>
      <para>
       <link xlink:href="http://lists.opensuse.org/opensuse-security-announce/"/>
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>安全性声明列表</title>
      <para>
       <link xlink:href="http://www.suse.com/support/update/"/>
      </para>
     </formalpara>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-apache2-security-permissions">
   <title>DocumentRoot 权限</title>
   <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，默认情况下，<systemitem>DocumentRoot</systemitem> 目录 (<filename>/srv/www/htdocs</filename>) 和 CGI 目录 (<filename>/srv/www/cgi-bin</filename>) 的所有权属于 <systemitem>root</systemitem> 用户和组。您不能更改这些权限。如果任何用户都可写入这些目录，则任何用户都可以将文件放入这些目录中。之后，具有 <systemitem>wwwrun</systemitem> 权限（该权限允许用户随意访问文件系统资源）的 Apache 可能会执行这些文件。使用 <filename>/srv/www</filename> 的子目录可存放虚拟主机的 <systemitem>DocumentRoot</systemitem> 和 CGI 指令，并确保目录和文件属于用户和组 <systemitem class="username">root</systemitem>。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-filesystem">
   <title>文件系统访问权</title>
   <para>
    默认情况下，在 <filename>/etc/apache2/httpd.conf</filename> 中拒绝对整个文件系统的访问。不应该重写这些指令，而是要明确启用对 Apache 可读的所有目录的访问权。有关详细信息，请参见<xref linkend="sec-apache2-configuration-manually-vhost-basic-configuration"/>。如此操作后，请确保任何重要文件（例如口令或系统配置文件）均不能从外部读取。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-cgi">
   <title>CGI 脚本</title>
   <para>
    Perl、PHP、SSI 或任何其他编程语言中的交互脚本基本上可以运行任意命令，因此存在通常的安全性问题。从服务器执行的脚本只能从服务器管理员信任的源安装，允许用户运行他们拥有的所有脚本通常不是好的做法。还建议对所有脚本执行安全性审计。
   </para>
   <para>
    为了尽可能简化脚本的管理，通常会将 CGI 脚本的执行限制于特定目录而不是全局使用它们。指令 <systemitem>ScriptAlias</systemitem> 和 <systemitem>Option ExecCGI</systemitem> 用于配置。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 的默认配置不允许随处执行 CGI 脚本。
   </para>
   <para>
    所有 CGI 脚本都会作为同一个用户运行，所以不同的脚本可能会彼此冲突。模块 suEXEC 允许您在不同的用户和组下运行 CGI 脚本。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-security-users">
   <title>用户目录</title>
   <para>
    启用用户目录（使用 <systemitem>mod_userdir</systemitem> 或 <systemitem>mod_rewrite</systemitem>）时，一定不要使用 <filename>.htaccess</filename> 文件，这些文件允许用户重写安全设置。至少应该使用指令 <systemitem>AllowOverRide</systemitem> 来限制用户的注册。在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中，<filename>.htaccess</filename> 文件默认处于启用状态，但用户在使用 <systemitem>mod_userdir</systemitem>（请参见 <filename>/etc/apache2/mod_userdir.conf</filename> 配置文件）时不允许覆盖任何 <systemitem>Option</systemitem> 指令。
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apache2-troubleeshooting">
  <title>查错</title>

  <para>
   如果 Apache 不启动、网页不可访问或用户无法连接到 Web 服务器，那么找出问题的原因是很重要的。下面是几处查找错误描述的常见位置和需要检查的重要事项：
  </para>

  <variablelist>
   <varlistentry>
    <term><systemitem class="service">apache2.service</systemitem> 子命令的输出：</term>
    <listitem>
     <para>
      不要使用 <filename>/usr/sbin/apache2ctl</filename> 二进制文件启动和停止 Web 服务器，而应使用 <command>systemctl</command> 命令（如<xref linkend="sec-apache2-start-stop"/>中所述）。<command>systemctl status apache2</command> 详细描述了错误，甚至还提供了解决配置错误的提示。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>日志文件和详细程度</term>
    <listitem>
     <para>
      不管是致命错误还是非致命错误，都请检查 Apache 日志文件了解原因，主要是默认位于 <filename>/var/log/apache2/error_log</filename> 的错误日志文件。此外，如果需要日志文件记录得更详细一些，可以使用 <systemitem>LogLevel</systemitem> 指令来控制所记录消息的详细程度。
     </para>
     <tip>
      <title>简单测试</title>
      <para>
       使用 <command>tail -F /var/log/apache2/<replaceable>MY_ERROR_LOG</replaceable></command> 命令查看 Apache 日志讯息。然后运行 <command>systemctl restart apache2</command>。现在，请尝试连接浏览器并检查输出。
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>防火墙和端口</term>
    <listitem>
     <para>
      常见错误之一是在服务器的防火墙配置中未打开针对 Apache 的端口。如果使用 YaST 配置 Apache，有一个单独的选项用于这个具体问题（请参见<xref linkend="sec-apache2-configuration-yast"/>）。如果正在手工配置 Apache，则请通过 YaST 的防火墙模块打开 HTTP 和 HTTPS 的防火墙端口。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   如果使用以上任何信息均无法找到错误原因，请检查联机 Apache Bug 数据库（网址为 <link xlink:href="http://httpd.apache.org/bug_report.html"/>）。此外，可以通过 <link xlink:href="http://httpd.apache.org/userslist.html"/> 上的邮件列表联系 Apache 用户社区。
  </para>
 </sect1>
 <sect1 xml:id="sec-apache2-more-information">
  <title>更多信息</title>

  <para>
   包 <systemitem>apache2-doc</systemitem> 中包含有关本地安装和参考的多种本地化版本的完整 Apache 手册。它在默认情况下是不安装的，最快的安装方法是使用命令 <command>zypper in apache2-doc</command>。完成安装之后，<link xlink:href="http://localhost/manual/"/> 中将会有 Apach 手册可供使用。还可在 Web 上的 <link xlink:href="http://httpd.apache.org/docs-2.4/"/> 访问它。特定于 SUSE 的配置提示可以在目录 <filename>/usr/share/doc/packages/apache2/README.*</filename> 中获得。
  </para>

  <sect2 xml:id="sec-apache2-more-information-apache22">
   <title>Apache 2.4</title>
   <para>
    有关 Apache 2.4 中新功能的列表，请参见 <link xlink:href="http://httpd.apache.org/docs/2.4/new_features_2_4.html"/>。可以在 <link xlink:href="http://httpd.apache.org/docs-2.4/upgrading.html"/> 获得有关从版本 2.2 升级到 2.4 的信息。
   </para>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-modules">
   <title>Apache 模块</title>
   <para>
    有关<xref linkend="sec-apache2-modules-external"/>中简述的外部 Apache 模块的更多信息，可在以下位置找到：
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem>mod_apparmor</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://en.opensuse.org/SDB:AppArmor"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_auth_kerb</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://modauthkerb.sourceforge.net/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_perl</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://perl.apache.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_php5</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.php.net/manual/en/install.unix.apache2.php"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_python</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://www.modpython.org/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>mod_security</systemitem>
     </term>
     <listitem>
      <para>
       <link xlink:href="http://modsecurity.org/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-cgi">
   <title>开发</title>
   <para>
    有关开发 Apache 模块和涉及 Apache Web 服务器项目的更多信息，可以从以下位置处获得：
   </para>
   <variablelist>
    <varlistentry>
     <term>Apache 开发人员信息</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/dev/"/>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Apache 开发人员文档</term>
     <listitem>
      <para>
       <link xlink:href="http://httpd.apache.org/docs/2.4/developer/"/>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-apache2-more-information-miscellaneous-sources" os="sles;sled">
   <title>其他来源</title>
   <para>
    如果遇到特定于 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 中的 Apache 的问题，请查看“技术信息搜索”，网址为：<link xlink:href="http://www.suse.com/support"/>。<link xlink:href="http://httpd.apache.org/ABOUT_APACHE.html"/> 提供了对 Apache 历史的介绍。此页还解释此服务器为什么被称为 Apache。
   </para>
  </sect2>
 </sect1>
</chapter>
