<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="adm_sudo.xml" version="5.0" xml:id="cha-adm-sudo">
  <title><command>sudo</command> 基础知识</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>
    运行某些命令需要 root 特权。但是，出于安全考虑以及为了避免出错，我们不建议以 <systemitem class="username">root</systemitem> 身份登录。更安全的做法是先以普通用户身份登录，再使用 <command>sudo</command> 以提升的特权来运行命令。
  </para>
  <para>
    在 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 上，<command>sudo</command> 配置为与 <command>su</command> 的工作方式类似。但是，<command>sudo</command> 提供了一种灵活机制，可让用户使用其他任何用户的特权运行命令。这样，便可为某些用户和组指派具有特定特权的角色。例如，可以允许组 <systemitem class="groupname">users</systemitem> 的成员使用用户 <systemitem class="username">wilber</systemitem> 的特权运行命令。您可以通过禁止任何命令选项，来进一步限制对命令的访问。虽然 su 始终需要 <systemitem class="username">root</systemitem> 口令才能使用 PAM 进行身份验证，但是您可以将 <command>sudo</command> 配置为使用您自己的身份凭证进行身份验证。这意味着用户无需共享 <systemitem class="username">root</systemitem> 口令，因而提高了安全性。
  </para>
  <sect1 xml:id="sec-adm-sudo-usage">
    <title><command>sudo</command> 基本用法</title>

    <para>
      以下章节将会介绍 <command>sudo</command> 的基本用法。
    </para>

    <sect2 xml:id="sec-adm-sudo-usage-cmd">
      <title>运行单个命令</title>
      <para>
        作为普通的用户，您可以在命令前加上 <command>sudo</command> 来以 <systemitem class="username">root</systemitem> 身份运行任何命令。系统会提示您提供 root 口令。如果身份验证成功，便会以 <systemitem class="username">root</systemitem> 身份运行命令：
      </para>
<screen>
<prompt>&gt; </prompt><command>id -un</command><co xml:id="co-sudo-usage-id"/>
tux
<prompt>&gt; </prompt><command>sudo</command> <command>id -un</command>
root's password:<co xml:id="co-sudo-usage-pw"/>
root
<prompt>&gt; </prompt><command>id -un</command>
tux<co xml:id="co-sudo-usage-after"/>
<prompt>&gt; </prompt><command>sudo</command> <command>id -un</command>
<co xml:id="co-sudo-usage-nopw"/>
root
</screen>
      <calloutlist>
        <callout arearefs="co-sudo-usage-id">
          <para>
            <command>id -un</command> 命令会打印当前用户的登录名。
          </para>
        </callout>
        <callout arearefs="co-sudo-usage-pw">
          <para>
            在输入过程中不会显示口令，无论是明文还是屏蔽字符都不显示。
          </para>
        </callout>
        <callout arearefs="co-sudo-usage-after">
          <para>
            只有以 <command>sudo</command> 开头的命令才会以提升的特权运行。
          </para>
        </callout>
        <callout arearefs="co-sudo-usage-nopw">
          <para>
            提升的特权会持续一段时间，因此您不必再次提供 <systemitem class="username">root</systemitem> 口令。
          </para>
        </callout>
      </calloutlist>
      <tip>
        <title>I/O 重定向</title>
        <para>
          使用 <command>sudo</command> 时，I/O 重定向不起作用：
        </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> echo s &gt; /proc/sysrq-trigger
bash: /proc/sysrq-trigger: Permission denied
<prompt>&gt; </prompt><command>sudo</command> cat &lt; /proc/1/maps
bash: /proc/1/maps: Permission denied
</screen>
        <para>
          在上面的示例中，只有 <command>echo</command> 和 <command>cat</command> 命令才以提升的特权运行。重定向将由用户的外壳以用户特权执行。要以提升的特权执行重定向，请根据<xref linkend="sec-sudo-shell"/>中所述启动外壳，或使用 <command>dd</command> 实用程序：
        </para>
<screen>
echo s | sudo dd of=/proc/sysrq-trigger
sudo dd if=/proc/1/maps | cat 
</screen>
      </tip>
    </sect2>

    <sect2 xml:id="sec-sudo-shell">
      <title>启动外壳</title>
      <para>
        使用 <command>sudo</command> 来以提升的特权运行命令的做法并不总是可行。虽然可以使用 <command>sudo
        bash</command> 命令，但还是建议您使用以下其中一种内置机制来启动外壳：
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>sudo -s (&lt;command&gt;)</literal></term>
          <listitem>
            <para>
              启动 <envar>SHELL</envar> 环境变量所指定的外壳或目标用户的默认外壳。如果指定了某个命令，该命令会传递到外壳（使用 <option>-c</option> 选项）。否则，外壳将以交互模式运行。
            </para>
<screen>
<prompt>tux:~ &gt; </prompt>sudo -s
root's password:
<prompt>root:/home/tux # </prompt>exit
<prompt>tux:~ &gt; </prompt>
</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>sudo -i (&lt;command&gt;)</literal></term>
          <listitem>
            <para>
              与 <option>-s</option> 类似，但会作为登录外壳启动外壳。这表示系统会处理该外壳的启动文件（<filename>.profile</filename> 等），并会将当前的工作目录设置为目标用户的主目录。
            </para>
<screen>
<prompt>tux:~ &gt; </prompt>sudo -i
root's password:
<prompt>root:~ # </prompt>exit
<prompt>tux:~ &gt; </prompt>
            </screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <tip>
        <title>环境变量</title>
        <para>
          默认情况下，<command>sudo</command> 不会传播环境变量。可以使用 <literal>env_reset</literal> 选项更改此行为（请参见<xref linkend="tab-adm-sudo-options"/>）。
        </para>
      </tip>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-sudo-conf">
    <title>配置 <command>sudo</command></title>

    <para>
      <command>sudo</command> 提供各种可配置的选项。
    </para>

    <note>
      <title>无法使用 sudo</title>
      <para>
        如果您不小心将自己锁定在 <command>sudo</command> 之外，可以使用 <command>su
        -</command> 和 <systemitem class="username">root</systemitem> 口令来启动 root 外壳。要修复该错误，请运行 <command>visudo</command>。
      </para>
    </note>
    
    <warning>
      <title>示例配置仅用于演示目的</title>
      <para>
        下面所述的示例规则纯粹用于演示目的。请使用这些示例来了解 <command>sudo</command> 配置文件的一般语法。不要在现实设置中使用它们，因为它们不能反映这些环境的复杂性。
      </para>
    </warning>
    <sect2 xml:id="sudo-creating-custom-configuration-bp">
      <title><command>sudo</command> 配置最佳实践</title>
      <para>
        在开始之前，请注意以下有关维护 <command>sudo</command> 配置的几条基本规则：
      </para>
      <variablelist>
        <varlistentry>
          <term>始终使用 <command>visudo</command> 来编辑 <command>sudo</command> 配置文件</term>
          <listitem>
            <para>
              应使用 <command>visudo</command> 命令对 <command>sudo</command> 配置进行任何更改。<command>visudo</command> 是一个定制的工具，可用于编辑 <command>sudo</command> 配置文件和运行基本语法检查，以确保配置保持完整且能正常运行。错误的 <command>sudo</command> 配置可能导致用户被锁定在自己的系统之外。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>始终在 <filename>/etc/sudoers.d/</filename> 下创建自定义配置</term>
          <listitem>
            <para>
              自定义配置必须位于 <filename>/etc/sudoers.d/</filename> 下才能由 <command>sudo</command> 拉入。自定义配置文件中的设置优先于 <filename>/etc/sudoers</filename> 包含的默认配置中的设置。 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>始终注意配置读取顺序</term>
          <listitem>
            <para>
              为确保以正确的顺序读取自定义配置，请在配置前面加上数字作为前缀。使用前导零来建立文件的读取顺序。例如，<filename>01_myfirstconfig</filename> 在 <filename>10_myotherconfig</filename> 之前分析。如果在某个文件中设置了一个指令，而该文件是在包含冲突信息的另一个文件之前读取的，则会应用最后读取的指令。 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>始终使用描述性文件名</term>
          <listitem>
            <para>
              使用能够提示配置文件作用的文件名。这可以帮助您跟踪 <command>sudo</command> 设置的预期功能。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="sudo-creating-custom-config-single-user">
      <title>创建用户特定的配置文件</title>
      <para>
        创建一个 <command>sudo</command> 配置文件，以允许普通用户 (<systemitem class="username">tux</systemitem>) 使用自己的口令（而不是 <systemitem class="username">root</systemitem> 口令）运行 <command>useradd</command> 命令。 
      </para>
      <example xml:id="ex-sudo-custom-config-user">
        <title>创建用户特定的配置文件</title>
        <procedure>
          <step>
            <para>
              以系统管理员 (<systemitem class="username">root</systemitem>) 身份启动 <command>visudo</command>，创建一个用于保存新用户特定的指令的自定义配置文件。使用带编号的描述性名称：
            </para>
            <screen>
  <prompt role="root"># </prompt><command>visudo -f /etc/sudoers.d/02_usermanagement</command>
            </screen>
          </step>
          <step>
            <para>
              创建一条规则，以允许 <systemitem class="username">tux</systemitem> 在此 <command>sudo</command> 配置应用到的整个环境中执行 <command>/usr/sbin/useradd</command> 二进制文件：
            </para>
            <screen>
  tux<co xml:id="co-who"/> ALL<co xml:id="co-where"/> = /usr/sbin/useradd<co xml:id="co-what"/>
            </screen>
            <calloutlist>
              <callout arearefs="co-who">
                <para>
                  指定用户或组。按名称或 <literal>#UID</literal> 列出用户，按 <literal>%GROUPNAME</literal> 列出组。用逗号分隔多项。要否定项，请使用 <literal>!</literal>。
                </para>
              </callout>
              <callout arearefs="co-where">
                <para>
                  指定一个或多个主机（用逗号分隔）。使用完全限定的主机名或 IP 地址。添加 <literal>ALL</literal> 以在所有主机上全局强制实施此设置。使用 <literal>!</literal> 进行否定。
                </para>
              </callout>
              <callout arearefs="co-what">
                <para>
                  指定一个或多个可执行文件（用逗号分隔）。指定可执行文件时，请务必注意以下规则：
                </para>
                <variablelist>
                  <varlistentry>
                    <term><command>/usr/sbin/useradd</command></term>
                    <listitem>
                      <para>
                        在不添加任何其他选项的情况下，此操作允许执行每个可能的 <command>useradd</command> 命令。
                      </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><command>/usr/sbin/useradd -c</command></term>
                    <listitem>
                      <para>
                        如果您显式指定某个选项，则该选项是唯一允许的选项。在上面指定的用户无法使用其他任何选项。
                      </para>
                    </listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><command>/usr/sbin/useradd ""</command></term>
                    <listitem>
                      <para>
                        这样，用户只能单纯调用 <command>useradd</command>，而根本不能使用任何选项。 
                      </para>
                    </listitem>
                  </varlistentry>
                </variablelist>
                <para>
                  在上面的示例中，您可能希望允许使用所有选项和子命令，或者出于安全考虑将允许的选项和子命令限制为少数几个，但在这种情况下，完全禁止用户指定任何选项是毫无意义的。
                </para>
              </callout>
            </calloutlist>
          </step>
          <step>
            <para>
              要让用户使用自己的口令而不是 <systemitem class="username">root</systemitem> 口令，请添加以下一行内容：
            </para>
            <screen>Defaults:tux !targetpw
            </screen>
            <para>
              如果启用，此标志要求用户输入目标用户（即 <systemitem class="username">root</systemitem>）的口令。此标志在任何 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 系统上默认都处于启用状态。使用 <literal>!</literal> 可以对其否定，要求用户只输入自己的口令而不是 <systemitem class="username">root</systemitem> 口令。
            </para>
          </step>
          <step>
            <para>
              保存配置，退出编辑器，并打开另一个外壳来测试 <command>sudo</command> 是否遵循您的新配置。
            </para>
          </step>
        </procedure>
      </example>
    </sect2>

    <sect2 xml:id="sudo-creating-custom-config-group">
      <title>通过对项目进行分组来创建自定义配置</title>
      <para>
        修改<xref linkend="ex-sudo-custom-config-user"/>中的配置，使一组命名用户无需输入 <systemitem class="username">root</systemitem> 口令即可运行 <command>useradd</command> 命令。另外，将 <command>usermod</command> 和 <command>userdel</command> 添加到此组可用的命令列表中。
      </para>
      <example xml:id="ex-sudo-custom-config-group">
        <title>通过对项目进行分组来创建自定义配置</title>
        <procedure>
          <step>
            <para>
              要修改示例配置，请以系统管理员身份使用 <command>visudo</command> 将其打开：
            </para>
            <screen><prompt role="root"># </prompt><command>visudo /etc/sudoers.d/02_usermanagement</command>
            </screen>
          </step>
          <step>
            <para>
              使用逗号分隔的列表将更多用户添加到规则：
            </para>
            <screen>tux, wilber ALL = /usr/sbin/useradd
            </screen>
          </step>
          <step>
            <para>
              要允许列出的用户执行一系列命令，请将这些命令指定为逗号分隔的列表：
            </para>
            <screen>tux, wilber ALL = /usr/sbin/useradd, /usr/sbin/usermod, /usr/sbin/userdel
            </screen>
          </step>
          <step>
            <para>
              要让列出的用户使用自己的口令而不是 <systemitem class="username">root</systemitem> 口令，请添加以下一行内容：
            </para>
            <screen>Defaults:tux, wilber !targetpw
            </screen>
            <para>
              如果启用，此标志要求列出的用户输入目标用户（即 <systemitem class="username">root</systemitem>）的口令。此标志在任何 <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 系统上默认都处于启用状态。使用 <literal>!</literal> 可以对其否定，要求列出的用户只输入自己的口令而不是 <systemitem class="username">root</systemitem> 口令。
            </para>
          </step>
          <step>
            <para>
              保存配置，退出编辑器，并打开另一个外壳来测试 <command>sudo</command> 是否遵循您的新配置。
            </para>
          </step>
        </procedure>
      </example>
    </sect2>

    <sect2 xml:id="sudo-creating-custom-config-aliases">
      <title>通过应用别名简化配置</title>
      <para>
        使用别名可以进一步简化<xref linkend="ex-sudo-custom-config-group"/>中的自定义配置。对项目进行分组在一定程度上有所帮助，但使用用户、命令和主机的全局别名是使 <command>sudo</command> 配置保持整洁精简的最有效方法。
      </para>
      <para>
        使用别名和组（而不是列表）是处理设置更改的更好方法。如果某个用户离职，只需将其从别名声明文件内的全局 <literal>User_Alias</literal> 声明中去除即可，而无需寻源到所有单独的自定义配置文件。该过程同样适用于任何其他类型的别名（<literal>Host_Alias</literal>、<literal>Cmnd_Alias</literal> 和 <literal>Runas_Alias</literal>）。
      </para>
      <example xml:id="ex-sudo-custom-config-alias">
        <title>通过应用别名简化配置</title>
        <procedure>
          <step>
            <para>
              创建一个新文件来保存全局别名定义：
            </para>
            <screen><prompt role="root"># </prompt><command>visudo /etc/sudoers.d/01_aliases</command>
  </screen>
          </step>
          <step>
            <para>
              添加以下一行内容以创建 <literal>TEAMLEADERS</literal> 别名：
            </para>
            <screen>User_Alias    TEAMLEADERS = tux, wilber
            </screen>
          </step>
          <step>
            <para>
              添加以下一行内容以创建 <literal>USERMANAGEMENT</literal> 别名：
            </para>
            <screen>Cmnd_Alias    USERMANAGEMENT = /usr/sbin/useradd, /usr/sbin/usermod, /usr/sbin/userdel
            </screen>
          </step>
          <step>
            <para>
              保存更改并退出 <command>visudo</command>。
            </para>
          </step>
          <step>
            <para>
              以系统管理员身份启动 <command>visudo</command> 以编辑示例配置文件：
            </para>
            <screen><prompt role="root"># </prompt><command>visudo -f /etc/sudoers.d/02_usermanagement</command>
            </screen>
          </step>
          <step>
            <para>
              删除先前的规则并将其替换为以下规则，该规则使用您刚刚定义的别名：
            </para>
            <screen>TEAMLEADERS ALL = USERMANAGEMENT
            </screen>
          </step>
          <step>
            <para>
              要让 <literal>User_Alias</literal> 定义的所有用户都使用自己的口令而不是 <systemitem class="username">root</systemitem> 口令，请添加以下一行内容：
            </para>
            <screen>Defaults:TEAMLEADERS !targetpw</screen>
          </step>
          <step>
            <para>
              保存配置，退出编辑器，并打开另一个外壳来测试 <command>sudo</command> 是否遵循您的新配置。
            </para>
          </step>
        </procedure>
      </example>
    </sect2>

    <sect2 xml:id="sec-sudo-conf-syntax">
      <title>sudoers 基本配置语法</title>
      <para>
        sudoers 配置文件包含两种类型的选项：字符串和标志。字符串可以包含任何值，而标志则只能在“ON”或“OFF”之间切换。sudoers 配置文件最重要的语法构造如下：
      </para>
<screen>
# Everything on a line after # is ignored <co xml:id="co-sudo-syntax-comment"/>
Defaults !insults # Disable the insults flag <co xml:id="co-sudo-syntax-flag"/>
Defaults env_keep += "DISPLAY HOME" # Add DISPLAY and HOME to env_keep
tux ALL = NOPASSWD: /usr/bin/frobnicate, PASSWD: /usr/bin/journalctl <co xml:id="co-sudo-syntax-rule"/>
</screen>
      <calloutlist>
        <callout arearefs="co-sudo-syntax-comment">
          <para>
            存在两个例外：<literal>#include</literal> 和 <literal>#includedir</literal> 是普通命令。
          </para>
        </callout>
        <callout arearefs="co-sudo-syntax-flag">
          <para>
            去除 <literal>!</literal> 字符会将所需标志设置为 ON。
          </para>
        </callout>
        <callout arearefs="co-sudo-syntax-rule">
          <para>
            请参见<xref linkend="sec-sudo-conf-rule"/>。
          </para>
        </callout>
      </calloutlist>
      <variablelist xml:id="tab-adm-sudo-options">
        <title>有用的标志和选项</title>
        <varlistentry>
          <term><literal>targetpw</literal></term>
          <listitem>
            <para>
              此标志控制调用用户是需要输入目标用户（例如 <systemitem class="username">root</systemitem>）的口令 (ON) 还是需要输入调用用户的口令 (OFF)。
            </para>
<screen>Defaults targetpw # Turn targetpw flag ON</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>rootpw</literal></term>
          <listitem>
            <para>
              如果设置，<command>sudo</command> 将提示输入 <systemitem class="username">root</systemitem> 口令。默认值为 OFF。
            </para>
<screen>Defaults !rootpw # Turn rootpw flag OFF</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>env_reset</literal></term>
          <listitem>
            <para>
              如果设置，<command>sudo</command> 会构造一个具有 <envar>TERM</envar>、<envar>PATH</envar>、<envar>HOME</envar>、<envar>MAIL</envar>、<envar>SHELL</envar>、<envar>LOGNAME</envar>、<envar>USER</envar>、<envar>USERNAME</envar> 和 <envar>SUDO_*</envar> 的极简环境。此外，会从调用环境导入 <literal>env_keep</literal> 中列出的变量。默认值为“ON”。
            </para>
<screen>Defaults env_reset # Turn env_reset flag ON</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>env_keep</literal></term>
          <listitem>
            <para>
              <literal>env_reset</literal> 标志设为“ON”时要保留的环境变量列表。
            </para>
<screen>
# Set env_keep to contain EDITOR and PROMPT
Defaults env_keep = "EDITOR PROMPT"
Defaults env_keep += "JRE_HOME" # Add JRE_HOME
Defaults env_keep -= "JRE_HOME" # Remove JRE_HOME
</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>env_delete</literal></term>
          <listitem>
            <para>
              <literal>env_reset</literal> 标志设为“OFF”时要去除的环境变量列表。
            </para>
<screen>
# Set env_delete to contain EDITOR and PROMPT
Defaults env_delete = "EDITOR PROMPT"
Defaults env_delete += "JRE_HOME" # Add JRE_HOME
Defaults env_delete -= "JRE_HOME" # Remove JRE_HOME
</screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        还可以使用 <literal>Defaults</literal> 令牌为用户、主机和命令集合创建别名。并且，可以仅将选项应用到特定用户集。
      </para>
      <para>
        有关 sudoers 配置文件的详细信息，请参见 <command>man 5
        sudoers</command>。
      </para>
    </sect2>

    <sect2 xml:id="sec-sudo-conf-rule">
      <title>基本 sudoers 规则</title>
      <para>
        每条规则都遵循以下模式（<literal>[]</literal> 标记的是可选部分）：
      </para>
<screen>
#Who      Where         As whom      Tag                What
User_List Host_List = [(User_List)] [NOPASSWD:|PASSWD:] Cmnd_List
</screen>
      <variablelist>
        <title>sudoers 规则语法</title>
        <varlistentry>
          <term><literal>User_List</literal></term>
          <listitem>
            <para>
              一个或多个（用逗号分隔）标识符：用户名、<literal>%GROUPNAME</literal> 格式的组或 <literal>#UID</literal> 格式的用户 ID。可以使用 <literal>!</literal> 前缀指定求反。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Host_List</literal></term>
          <listitem>
            <para>
              一个或多个（用逗号分隔）标识符：（完全限定的）主机名或 IP 地址。可以使用 <literal>!</literal> 前缀指定求反。<literal>Host_List</literal> 的常用选项为 <literal>ALL</literal>。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>NOPASSWD:|PASSWD:</literal></term>
          <listitem>
            <para>
              如果用户在 <literal>NOPASSWD:</literal> 后面运行的命令与 <literal>Cmd_List</literal> 匹配，系统不会提示用户输入口令。
            </para>
            <para>
              <literal>PASSWD</literal> 为默认选项。仅当 <literal>PASSWD</literal> 和 <literal>NOPASSWD</literal> 位于同一行时，才需要指定此选项：
            </para>
<screen>tux ALL = PASSWD: /usr/bin/foo, NOPASSWD: /usr/bin/bar</screen>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>Cmnd_List</literal></term>
          <listitem>
            <para>
              一个或多个（用逗号分隔）说明符：可执行文件的路径，后跟允许使用的可选参数。
            </para>
<screen>
/usr/bin/foo     # Anything allowed
/usr/bin/foo bar # Only "/usr/bin/foo bar" allowed
/usr/bin/foo ""  # No arguments allowed
</screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        <literal>ALL</literal> 可以用作 <literal>User_List</literal>、<literal>Host_List</literal> 和 <literal>Cmnd_List</literal>。
      </para>
      <para>
        允许 <systemitem class="username">tux</systemitem> 在无需输入口令的情况下以 root 身份运行所有命令的规则：
      </para>
<screen>tux ALL = NOPASSWD: ALL</screen>
      <para>
        允许 <systemitem class="username">tux</systemitem> 运行 <command>systemctl restart
        apache2</command> 的规则：
      </para>
<screen>tux ALL = /usr/bin/systemctl restart apache2</screen>
      <para>
        允许 <systemitem class="username">tux</systemitem> 在不带参数的情况下以 <systemitem>admin</systemitem> 身份运行 <command>wall</command> 的规则：
      </para>
<screen>tux ALL = (admin) /usr/bin/wall ""</screen>
      <warning>
        <title>不安全的规则</title>
        <para>
          使用 <literal>ALL ALL =
          ALL</literal> 之类的规则时<emphasis>切勿</emphasis>不带 <literal>Defaults targetpw</literal>。否则，任何人都能够以 <systemitem class="username">root</systemitem> 身份运行命令。
        </para>
      </warning>
      <important>
        <title>Winbind 和 sudo</title>
        <para>
          在 <filename>sudoers</filename> 文件中指定组名时，请确保使用 NetBIOS 域名而不是领域，例如：
        </para>
<screen><replaceable>%DOMAIN</replaceable>\\<replaceable>GROUP_NAME</replaceable> ALL = (ALL) ALL</screen>
        <para>
          请注意，使用 winbindd 时，其格式还取决于 <filename>smb.conf</filename> 文件中的 <option>winbind separator</option> 选项。默认为 <literal>\</literal>.例如，如果将其更改为 <literal>+</literal>，则 <filename>sudoers</filename> 文件中的帐户格式必须为 <literal>DOMAIN+GROUP_NAME</literal>。
        </para>
      </important>
    </sect2>
  </sect1>

  <sect1 xml:id="sec-sudo-usecases-xorg">
    <title>对 X.Org 应用程序使用 <command>sudo</command></title>
    <para>
      使用 <command>sudo</command> 启动图形应用程序通常会导致以下错误：
    </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> xterm
xterm: Xt error: Can't open display: %s
xterm: DISPLAY is not set
</screen>
    <para>
      一种简单的解决方法是使用 xhost 来暂时允许 root 用户访问本地用户的 X 会话。可使用以下命令完成此操作：
    </para>
<screen>xhost si:localuser:root</screen>
    <para>
      以下命令可去除授予的访问权限：
    </para>
<screen>xhost -si:localuser:root</screen>
    <warning>
      <title>潜在安全问题</title>
      <para>
        以 root 特权运行图形应用程序存在安全隐患。建议仅在例外的情况下，才启用对图形应用程序的 root 访问权限。另外，建议在关闭图形应用程序后，立即撤消授予的 root 访问权限。
      </para>
    </warning>
  </sect1>
  <sect1 xml:id="sec-adm-sudo-moreinfo">
    <title>更多信息</title>

    <para>
      <command>sudo --help</command> 命令提供可用命令行选项的简要概述，而 <command>man sudoers</command> 命令则会提供有关 <filename>sudoers</filename> 及其配置的详细信息。
    </para>
  </sect1>
</chapter>
