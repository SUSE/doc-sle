<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="qemu_guest_installation.xml" version="5.0" xml:id="cha-qemu-guest-inst">
  <title>Guest 安装</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>
    <command>virt-manager</command> 和 <command>virt-install</command> 等基于 <systemitem class="library">libvirt</systemitem> 的工具提供了方便的界面用于设置和管理虚拟机。这些工具充当 <command>qemu-system-ARCH</command> 命令的某种封装程序。不过，您也可以直接使用 <command>qemu-system-ARCH</command>，而无需使用基于 <systemitem class="library">libvirt</systemitem> 的工具。
  </para>
  <warning>
    <title><command>qemu-system-ARCH</command> 和 libvirt</title>
    <para>
      使用 <command>qemu-system-ARCH</command> 创建的 <xref linkend="gloss-vt-vm"/> 对于基于 <systemitem class="library">libvirt</systemitem> 的工具不可见。
    </para>
  </warning>
  <sect1 xml:id="cha-qemu-guest-inst-qemu-kvm">
    <title>使用 <command>qemu-system-ARCH</command> 进行基本安装</title>

    <para>
      在下面的示例中，将为 SUSE Linux Enterprise Server 11 安装创建一个虚拟机。有关命令的详细信息，请参见相关的手册页。
    </para>

    <para>
      如果您尚未创建要在虚拟化环境中运行的系统的映像，需要从安装媒体创建一个映像。在这种情况下，您需要准备一个硬盘映像，并获取安装媒体的映像或该媒体本身。
    </para>

    <para>
      使用 <command>qemu-img</command> 创建硬盘。
    </para>

<screen><prompt>&gt; </prompt>qemu-img create<co xml:id="co-qemu-img-create"/> -f raw<co xml:id="co-qemu-img-format"/> /images/sles/hda<co xml:id="co-qemu-img-path"/> 8G<co xml:id="co-qemu-img-size"/></screen>

    <calloutlist>
      <callout arearefs="co-qemu-img-create">
        <para>
          <option>create</option> 子命令告知 <command>qemu-img</command> 创建新映像。
        </para>
      </callout>
      <callout arearefs="co-qemu-img-format">
        <para>
          使用 <option>-f</option> 参数指定磁盘的格式。
        </para>
      </callout>
      <callout arearefs="co-qemu-img-path">
        <para>
          映像文件的完整路径。
        </para>
      </callout>
      <callout arearefs="co-qemu-img-size">
        <para>
          映像大小，在本例中为 8 GB。该映像创建为<xref linkend="gloss-vt-storage-sparse"/>文件，会随着数据填充到磁盘中而增长。指定的大小定义映像文件可增长到的最大大小。
        </para>
      </callout>
    </calloutlist>

    <para>
      至少创建了一个硬盘映像后，您可以使用 <command>qemu-system-ARCH</command> 设置一个将引导到安装系统的虚拟机：
    </para>

<screen><prompt role="root"># </prompt>qemu-system-x86_64 -name "sles"<co xml:id="co-qemu-kvn-name"/>-machine accel=kvm -M pc<co xml:id="co-qemu-kvm-type"/> -m 768<co xml:id="co-qemu-kvm-memory"/> \
-smp 2<co xml:id="co-qemu-kvm-cpu"/> -boot d<co xml:id="co-qemu-kvm-boot"/> \
-drive file=/images/sles/hda,if=virtio,index=0,media=disk,format=raw<co xml:id="co-qemu-kvm-hdd"/> \
-drive file=/isos/SLE-15-SP5-Online-<replaceable>ARCH</replaceable>-GM-media1.iso,index=1,media=cdrom<co xml:id="co-qemu-kvm-cdrom"/> \
-net nic,model=virtio,macaddr=52:54:00:05:11:11<co xml:id="co-qemu-kvm-nic"/> -net user \
-vga cirrus<co xml:id="co-qemu-kvm-gfx"/> -balloon virtio<co xml:id="co-qemu-kvm-balloon"/></screen>

    <calloutlist>
      <callout arearefs="co-qemu-kvn-name">
        <para>
          虚拟机的名称，将在窗口标题中显示，并用于 VNC 服务器。此名称必须是唯一的。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-type">
        <para>
          指定计算机类型。使用 <command>qemu-system-ARCH</command>
          <option>-M ?</option> 显示有效参数的列表。<literal>pc</literal> 是默认的<guimenu>标准 PC</guimenu>。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-memory">
        <para>
          虚拟机的最大内存量。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-cpu">
        <para>
          定义包含两个处理器的 SMP 系统。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-boot">
        <para>
          指定引导顺序。有效值为 <literal>a</literal>、<literal>b</literal>（软盘 1 和 2）、<literal>c</literal>（第一个硬盘）、<literal>d</literal>（第一个 CD-ROM）或 <literal>n</literal> 到 <literal>p</literal>（从网络适配器 1-3 进行无盘引导）。默认值为 <literal>c</literal>。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-hdd">
        <para>
          定义第一个 (<literal>index=0</literal>) 硬盘。系统会将该硬盘作为 <literal>raw</literal> 格式的半虚拟化 (<literal>if=virtio</literal>) 驱动器来访问。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-cdrom">
        <para>
          第二个 (<literal>index=1</literal>) 映像驱动器充当 CD-ROM。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-nic">
        <para>
          定义 MAC 地址为 <literal>52:54:00:05:11:11</literal> 的半虚拟化 (<literal>model=virtio</literal>) 网络适配器。请务必指定唯一的 MAC 地址，否则会发生网络冲突。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-gfx">
        <para>
          指定显卡。如果指定 <literal>none</literal>，将禁用显卡。
        </para>
      </callout>
      <callout arearefs="co-qemu-kvm-balloon">
        <para>
          定义允许动态更改内存量（最大为使用参数 <option>-m</option> 指定的最大值）的半虚拟化气球设备。
        </para>
      </callout>
    </calloutlist>

    <para>
      安装完 Guest 操作系统后，您无需指定 CD-ROM 设备即可启动相关的虚拟机：
    </para>

<screen><prompt role="root"># </prompt>qemu-system-x86_64 -name "sles" -machine type=pc,accel=kvm -m 768 \
-smp 2 -boot c \
-drive file=/images/sles/hda,if=virtio,index=0,media=disk,format=raw \
-net nic,model=virtio,macaddr=52:54:00:05:11:11 \
-vga cirrus -balloon virtio
</screen>
  </sect1>
  <sect1 xml:id="cha-qemu-guest-inst-qemu-img">
    <title>使用 <command>qemu-img</command> 管理磁盘映像</title>

    <para>
      在上一节中（请参见<xref linkend="cha-qemu-guest-inst-qemu-kvm"/>），我们使用 <command>qemu-img</command> 命令创建了硬盘的映像。另一方面，您可以使用 <command>qemu-img</command> 来执行一般的磁盘映像操作。本节介绍可帮助您灵活管理磁盘映像的 <command>qemu-img</command> 子命令。
    </para>

    <sect2 xml:id="cha-qemu-guest-inst-qemu-img-general-invocation">
      <title>有关 qemu-img 调用的一般信息</title>
      <para>
        <command>qemu-img</command>（像 <command>zypper</command> 那样）使用子命令来执行特定的任务。每个子命令会识别一组不同的选项。有些选项是通用的，其中的多数子命令都可使用，而有些选项则专用于相关的子命令。有关所有受支持选项的列表，请参见 qemu-img 手册页 (<command>man 1
        qemu-img</command>)。<command>qemu-img</command> 使用以下一般语法：
      </para>
<screen><prompt>&gt; </prompt>qemu-img subcommand [options]</screen>
      <para>
        支持以下子命令：
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>create</literal></term>
          <listitem>
            <para>
              在文件系统上创建新磁盘映像。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>check</literal></term>
          <listitem>
            <para>
              检查现有磁盘映像是否有错误。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>compare</literal></term>
          <listitem>
            <para>
              检查两个映像的内容是否相同。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>map</literal></term>
          <listitem>
            <para>
              转储映像文件名的元数据及其后备文件链。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>amend</literal></term>
          <listitem>
            <para>
              修正映像文件名的映像格式特定选项。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>convert</literal></term>
          <listitem>
            <para>
              将现有磁盘映像转换为其他格式的新映像。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>info</literal></term>
          <listitem>
            <para>
              显示相关磁盘映像的信息。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>snapshot</literal></term>
          <listitem>
            <para>
              管理现有磁盘映像的快照。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>commit</literal></term>
          <listitem>
            <para>
              应用对现有磁盘映像进行的更改。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>rebase</literal></term>
          <listitem>
            <para>
              基于现有映像创建新的基本映像。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>resize</literal></term>
          <listitem>
            <para>
              增大或减小现有映像的大小。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="cha-qemu-guest-inst-qemu-img-create">
      <title>创建、转换和检查磁盘映像</title>
      <para>
        本节介绍如何创建磁盘映像、检查其状态、转换磁盘映像的格式，以及获取有关特定磁盘映像的详细信息。
      </para>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-create">
        <title>qemu-img create</title>
        <para>
          使用 <command>qemu-img create</command> 可为 VM Guest 操作系统创建新磁盘映像。该命令使用以下语法：
        </para>
<screen><prompt>&gt; </prompt>qemu-img create -f fmt<co xml:id="co-qemu-img-create-f"/> -o options<co xml:id="co-qemu-img-create-o"/> fname<co xml:id="co-qemu-img-create-filename"/> size<co xml:id="co-qemu-img-create-size"/></screen>
        <calloutlist>
          <callout arearefs="co-qemu-img-create-f">
            <para>
              目标映像的格式。支持的格式为 <literal>raw</literal> 和 <literal>qcow2</literal>。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-create-o">
            <para>
              某些映像格式支持在命令行上传递其他选项。可在此处使用 <literal>-o</literal> 选项指定这些附加选项。<literal>raw</literal> 映像格式仅支持 <literal>size</literal> 选项，因此可以插入 <literal>-o size=8G</literal>，而不要在命令的末尾添加大小选项。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-create-filename">
            <para>
              要创建的目标磁盘映像的路径。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-create-size">
            <para>
              目标磁盘映像的大小（如果尚未使用 <literal>-o size=&lt;image_size&gt;</literal> 选项指定）。映像大小的可选后缀为 <literal>K</literal> (KB)、<literal>M</literal> (MB)、<literal>G</literal> (GB) 或 <literal>T</literal> (TB)。
            </para>
          </callout>
        </calloutlist>
        <para>
          要在 <filename>/images</filename> 目录中创建最大可增长至 4 GB 的新磁盘映像 <filename>sles.raw</filename>，请运行以下命令：
        </para>
<screen><prompt>&gt; </prompt>qemu-img create -f raw -o size=4G /images/sles.raw
Formatting '/images/sles.raw', fmt=raw size=4294967296

<prompt>&gt; </prompt>ls -l /images/sles.raw
-rw-r--r-- 1 tux users 4294967296 Nov 15 15:56 /images/sles.raw

<prompt>&gt; </prompt>qemu-img info /images/sles.raw
image: /images/sles11.raw
file format: raw
virtual size: 4.0G (4294967296 bytes)
disk size: 0
</screen>
        <para>
          可以看到，新创建的映像的<emphasis>虚拟</emphasis>大小为 4 GB，但报告的实际磁盘大小为 0，因为尚未将任何数据写入该映像。
        </para>
        <tip>
          <title>Btrfs 文件系统上的 VM Guest 映像</title>
          <para>
            如果您需要在 Btrfs 文件系统上创建磁盘映像，可以使用 <option>nocow=on</option> 来减少 Btrfs 的写入时复制功能产生的性能开销。
          </para>
<screen><prompt>&gt; </prompt>qemu-img create -o nocow=on test.img 8G</screen>
          <para>
            但是，如果您想使用写入时复制（例如，要使用此功能来创建快照或者在虚拟机之间共享快照），请在命令行中省略 <option>nocow</option> 选项。
          </para>
        </tip>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-convert">
        <title>qemu-img convert</title>
        <para>
          使用 <command>qemu-img convert</command> 可将磁盘映像转换为另一种格式。要获取 QEMU 支持的映像格式的完整列表，请运行 <command>qemu-img</command> <option>-h</option> 并查看输出的最后一行。该命令使用以下语法：
        </para>
<screen><prompt>&gt; </prompt>qemu-img convert -c<co xml:id="co-qemu-img-convert-c"/> -f fmt<co xml:id="co-qemu-img-convert-fmt"/> -O out_fmt<co xml:id="co-qemu-img-convert-ofmt"/> -o options<co xml:id="co-qemu-img-convert-o"/> fname<co xml:id="co-qemu-img-convert-fname"/> out_fname<co xml:id="co-qemu-img-convert-ofname"/></screen>
        <calloutlist>
          <callout arearefs="co-qemu-img-convert-c">
            <para>
              对目标磁盘映像应用压缩。只有 <literal>qcow</literal> 和 <literal>qcow2</literal> 格式支持压缩。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-convert-fmt">
            <para>
              源磁盘映像的格式。系统通常会自动检测格式，因此可以省略此参数。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-convert-ofmt">
            <para>
              目标磁盘映像的格式。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-convert-o">
            <para>
              指定目标映像格式相关的其他选项。使用 <literal>-o ?</literal> 可查看目标映像格式支持的选项列表。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-convert-fname">
            <para>
              要转换的源磁盘映像的路径。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-convert-ofname">
            <para>
              转换后的目标磁盘映像的路径。
            </para>
          </callout>
        </calloutlist>
<screen><prompt>&gt; </prompt>qemu-img convert -O vmdk /images/sles.raw \
/images/sles.vmdk

<prompt>&gt; </prompt>ls -l /images/
-rw-r--r-- 1 tux users 4294967296 16. lis 10.50 sles.raw
-rw-r--r-- 1 tux users 2574450688 16. lis 14.18 sles.vmdk
</screen>
        <para>
          要查看选定目标映像格式相关的选项列表，请运行以下命令（请将 <literal>vmdk</literal> 替换为您的映像格式）：
        </para>
<screen><prompt>&gt; </prompt>qemu-img convert -O vmdk /images/sles.raw \
/images/sles.vmdk -o ?
Supported options:
size             Virtual disk size
backing_file     File name of a base image
compat6          VMDK version 6 image
subformat        VMDK flat extent format, can be one of {monolithicSparse \
    (default) | monolithicFlat | twoGbMaxExtentSparse | twoGbMaxExtentFlat}
scsi             SCSI image
</screen>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-check">
        <title>qemu-img check</title>
        <para>
          使用 <command>qemu-img check</command> 可检查现有磁盘映像是否有错误。并非所有磁盘映像格式都支持此功能。该命令使用以下语法：
        </para>
<screen><prompt>&gt; </prompt>qemu-img check -f fmt<co xml:id="co-qemu-img-check-fmt"/> fname<co xml:id="co-qemu-img-check-fname"/></screen>
        <calloutlist>
          <callout arearefs="co-qemu-img-check-fmt">
            <para>
              源磁盘映像的格式。系统通常会自动检测格式，因此可以省略此参数。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-check-fname">
            <para>
              要检查的源磁盘映像的路径。
            </para>
          </callout>
        </calloutlist>
        <para>
          如果未发现错误，该命令不返回任何输出，否则会显示所发现的错误的类型和数量。
        </para>
<screen><prompt>&gt; </prompt>qemu-img check -f qcow2 /images/sles.qcow2
ERROR: invalid cluster offset=0x2af0000
[...]
ERROR: invalid cluster offset=0x34ab0000
378 errors were found on the image.
</screen>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-incr">
        <title>增大现有磁盘映像的大小</title>
        <para>
          创建新映像时，必须在创建映像之前指定其最大大小（请参见<xref linkend="cha-qemu-guest-inst-qemu-img-create-create"/>）。安装 VM Guest 并使用一段时间后，映像的初始大小可能不再够用。在这种情况下，可向映像增加空间。
        </para>
        <para>
          要将现有磁盘映像的大小增大 2 GB，请使用：
        </para>
<screen><prompt>&gt; </prompt>qemu-img resize /images/sles.raw +2GB</screen>
        <note>
          <para>
            您可以调整 <literal>raw</literal> 和 <literal>qcow2</literal> 格式的磁盘映像的大小。要调整其他格式的映像的大小，请先使用 <command>qemu-img convert</command> 将其转换为支持的格式。
          </para>
        </note>
        <para>
          现在，该映像的最后一个分区后面包含 2 GB 可用空间。您可以调整现有分区的大小，或添加新分区。
        </para>
      </sect3>
      <sect3 xml:id="qemu-qcow2-advanced-options">
        <title>qcow2 文件格式的高级选项</title>
        <para>
          <emphasis>qcow2</emphasis> 是 QEMU 使用的主要磁盘映像格式。其大小可按需增长，仅当虚拟机需要磁盘空间时才分配磁盘空间。
        </para>
        <para>
          qcow2 格式的文件以恒定大小的单元进行组织。这些单元称为<emphasis>簇</emphasis>。从 Guest 的角度而言，虚拟磁盘也可划分为相同大小的簇。QEMU 默认为 64 kB 簇，但您可以在创建新映像时指定不同的值：
        </para>
<screen><prompt>&gt; </prompt>qemu-img create -f qcow2 -o cluster_size=128K virt_disk.qcow2 4G</screen>
        <para>
          qcow2 映像包含一组表，这些表划分为两个级别，分别称为 L1 表和 L2 表。每个磁盘映像只有一个 L1 表，而根据映像的大小，L2 表可能有很多。
        </para>
        <para>
          要在虚拟磁盘中读取或写入数据，QEMU 需要读取其对应的 L2 表，以确定相关数据位置。由于为每个 I/O 操作读取该表会消耗系统资源，QEMU 会在内存中缓存 L2 表，以提高磁盘访问速度。
        </para>
        <sect4>
          <title>选择适当的缓存大小</title>
          <para>
            缓存大小与分配的空间量相关。L2 缓存可以映射以下虚拟磁盘空间量：
          </para>
<screen>disk_size = l2_cache_size * cluster_size / 8</screen>
          <para>
            使用默认 64 kB 簇大小，即
          </para>
<screen>disk_size = l2_cache_size * 8192</screen>
          <para>
            因此，要使缓存在使用默认簇大小的情况下映射 <literal>n</literal> GB 磁盘空间，需要
          </para>
<screen>l2_cache_size = disk_size_GB * 131072</screen>
          <para>
            QEMU 默认使用 1 MB（1048576 字节）的 L2 缓存。根据上面的公式，1 MB 的 L2 缓存涵盖了 8 GB (1048576 / 131072) 的虚拟磁盘空间。这意味着，如果您的虚拟磁盘大小不超过 8 GB，则使用默认 L2 缓存大小可使性能保持正常。如果磁盘更大，则可以通过增大 L2 缓存大小来提高磁盘访问速度。
          </para>
        </sect4>
        <sect4>
          <title>配置缓存大小</title>
          <para>
            可以在 QEMU 命令行上使用 <option>-drive</option> 选项来指定缓存大小。或者，可以在通过 QMP 通讯时使用 <command>blockdev-add</command> 命令。有关 QMP 的详细信息，请参见<xref linkend="qemu-monitor-qmp"/>。
          </para>
          <para>
            以下选项配置虚拟 Guest 的缓存大小：
          </para>
          <variablelist>
            <varlistentry>
              <term>l2-cache-size</term>
              <listitem>
                <para>
                  L2 表缓存的最大大小。
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>refcount-cache-size</term>
              <listitem>
                <para>
                  <emphasis>refcount</emphasis> 块缓存的最大大小。有关 <emphasis>refcount</emphasis> 的详细信息，请参见 <link xlink:href="https://raw.githubusercontent.com/qemu/qemu/master/docs/qcow2-cache.txt"/>。
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>cache-size</term>
              <listitem>
                <para>
                  上述两个缓存的合计最大大小。
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            指定上述选项的值时，请注意以下几点：
          </para>
          <itemizedlist>
            <listitem>
              <para>
                L2 缓存和 refcount 块缓存的大小需是簇大小的倍数。
              </para>
            </listitem>
            <listitem>
              <para>
                如果您仅设置其中一个选项，QEMU 将自动调整其他选项，使 L2 缓存比 refcount 缓存大 4 倍。
              </para>
            </listitem>
          </itemizedlist>
          <para>
            refcount 缓存的使用频率比 L2 缓存要低得多，因此您可以将 refcount 缓存设置得小一些：
          </para>
<screen><prompt role="root"># </prompt>qemu-system-ARCH [...] \
 -drive file=disk_image.qcow2,l2-cache-size=4194304,refcount-cache-size=262144</screen>
        </sect4>
        <sect4>
          <title>减少内存使用量</title>
          <para>
            缓存越大，消耗的内存就越多。每个 qcow2 文件都有一个单独的 L2 缓存。使用大量较大的磁盘映像时，您可能需要相当大的内存量。如果您将后备文件（<xref linkend="cha-qemu-guest-inst-qemu-img-effect"/>）和快照（请参见<xref linkend="cha-qemu-guest-inst-qemu-img-snapshots"/>）添加到 Guest 的设置链，则内存的消耗甚至更严重。
          </para>
          <para>
            正因如此，QEMU 引入了 <option>cache-clean-interval</option> 设置。此设置定义一个以秒为单位的间隔，在此间隔过后，将从内存中去除未访问过的所有缓存项。
          </para>
          <para>
            下面的示例每 10 分钟去除一次所有未使用的缓存项：
          </para>
<screen><prompt role="root"># </prompt>qemu-system-ARCH [...] -drive file=hd.qcow2,cache-clean-interval=600</screen>
          <para>
            如果未设置此选项，则默认值为 0，这会禁用此功能。
          </para>
        </sect4>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-guest-inst-qemu-img-snapshots">
      <title>使用 qemu-img 管理虚拟机的快照</title>
      <para>
        <xref linkend="gloss-vt-vm"/>快照是运行 VM Guest 的整个环境的快照。该快照包含处理器 (CPU)、内存 (RAM)、设备和所有可写磁盘的状态。
      </para>
      <para>
        当您需要保存特定状态的虚拟机时，快照非常有用。例如，在虚拟化服务器上配置网络服务后，您可以从上次保存的虚拟机状态快速启动虚拟机。或者，您可以在关闭虚拟机之后创建快照，以便在尝试执行某种会导致 VM Guest 不稳定的试验性操作之前创建备份状态。本节介绍后一种做法，前一种做法会在<xref linkend="cha-qemu-monitor"/>中介绍。
      </para>
      <para>
        要使用快照，您的 VM Guest 必须至少包含一个 <literal>qcow2</literal> 格式的可写硬盘映像。此设备通常是第一个虚拟硬盘。
      </para>
      <para>
        <xref linkend="gloss-vt-vm"/>快照是在交互式 QEMU 监视器中使用 <literal>savevm</literal> 命令创建的。为了更方便地识别特定的快照，可为其指派一个<emphasis>标记</emphasis>。有关 QEMU 监视器的详细信息，请参见<xref linkend="cha-qemu-monitor"/>。
      </para>
      <para>
        <literal>qcow2</literal> 磁盘映像包含保存的快照后，您可以使用 <command>qemu-img snapshot</command> 命令检查这些快照。
      </para>
      <warning>
        <title>关闭 VM Guest</title>
        <para>
          请不要在虚拟机正在运行时使用 <command>qemu-img snapshot</command> 命令创建或删除虚拟机快照。否则，可能会损坏包含保存的虚拟机状态的磁盘映像。
        </para>
      </warning>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-snapshots-l">
        <title>列出现有快照</title>
        <para>
          使用 <command>qemu-img snapshot -l</command>
          <replaceable>DISK_IMAGE</replaceable> 可查看 <literal>disk_image</literal> 映像中保存的所有现有快照的列表。即使 VM Guest 正在运行，您也可以获取该列表。
        </para>
<screen><prompt>&gt; </prompt>qemu-img snapshot -l /images/sles.qcow2
Snapshot list:
ID<co xml:id="co-qemu-img-snapshot-l-id"/>       TAG<co xml:id="co-qemu-img-snapshot-l-tag"/>               VM SIZE<co xml:id="co-qemu-img-snapshot-l-size"/>        DATE<co xml:id="co-qemu-img-snapshot-l-date"/>          VM CLOCK<co xml:id="co-qemu-img-snapshot-l-clock"/>
1         booting                4.4M 2013-11-22 10:51:10   00:00:20.476
2         booted                 184M 2013-11-22 10:53:03   00:02:05.394
3         logged_in              273M 2013-11-22 11:00:25   00:04:34.843
4         ff_and_term_running    372M 2013-11-22 11:12:27   00:08:44.965</screen>
        <calloutlist>
          <callout arearefs="co-qemu-img-snapshot-l-id">
            <para>
              快照的自动递增唯一标识号。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-snapshot-l-tag">
            <para>
              快照的唯一说明字符串。它以直观易懂的 ID 形式来表示。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-snapshot-l-size">
            <para>
              快照占用的磁盘空间。请注意，运行中应用程序消耗的内存越多，快照就越大。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-snapshot-l-date">
            <para>
              快照的创建时间和日期。
            </para>
          </callout>
          <callout arearefs="co-qemu-img-snapshot-l-clock">
            <para>
              虚拟机时钟的当前状态。
            </para>
          </callout>
        </calloutlist>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-snapshots-c">
        <title>创建已关闭虚拟机的快照</title>
        <para>
          使用 <command>qemu-img snapshot -c</command>
          <replaceable>SNAPSHOT_TITLE</replaceable>
          <replaceable>DISK_IMAGE</replaceable> 可创建事先已关闭的虚拟机的当前状态快照。
        </para>
<screen><prompt>&gt; </prompt>qemu-img snapshot -c backup_snapshot /images/sles.qcow2</screen>
<screen><prompt>&gt; </prompt>qemu-img snapshot -l /images/sles.qcow2
Snapshot list:
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         booting                4.4M 2013-11-22 10:51:10   00:00:20.476
2         booted                 184M 2013-11-22 10:53:03   00:02:05.394
3         logged_in              273M 2013-11-22 11:00:25   00:04:34.843
4         ff_and_term_running    372M 2013-11-22 11:12:27   00:08:44.965
5         backup_snapshot           0 2013-11-22 14:14:00   00:00:00.000</screen>
        <para>
          如果某种情况干扰了 VM Guest 的运行，而您需要恢复到所保存快照（在本示例中为 ID 5）的状态，请关闭 VM Guest 并执行以下命令：
        </para>
<screen><prompt>&gt; </prompt>qemu-img snapshot -a 5 /images/sles.qcow2</screen>
        <para>
          下一次您使用 <command>qemu-system-ARCH</command> 运行虚拟机时，它将处于编号为 5 的快照的状态。
        </para>
        <note>
          <para>
            <command>qemu-img snapshot -c</command> 命令与 QEMU 监视器的 <literal>savevm</literal> 命令（请参见<xref linkend="cha-qemu-monitor"/>）无关。例如，对于使用 <literal>savevm</literal> 在 QEMU 监视器中创建的快照，无法使用 <command>qemu-img snapshot -a</command> 应用快照。
          </para>
        </note>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-snapshots-d">
        <title>删除快照</title>
        <para>
          使用 <command>qemu-img snapshot -d</command>
          <replaceable>SNAPSHOT_ID</replaceable>
          <replaceable>DISK_IMAGE</replaceable> 可删除虚拟机的旧快照或不需要的快照。这可以节省 <literal>qcow2</literal> 磁盘映像中的磁盘空间，因为快照数据占用的空间将会恢复：
        </para>
<screen><prompt>&gt; </prompt>qemu-img snapshot -d 2 /images/sles.qcow2</screen>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-guest-inst-qemu-img-effect">
      <title>有效操作磁盘映像</title>
      <para>
        假设存在以下真实情况：您是一名运行和管理多个虚拟化操作系统的服务器管理员。其中一组系统基于一个特定的发行套件，而另一组（或多个组）基于不同版本的发行套件，甚至不同的平台（也许不是 Unix）。使情况变得更复杂的是，基于同一发行套件的虚拟 Guest 系统会因部门和部署而各不相同。文件服务器使用的设置和服务通常与 Web 服务器不同，不过，两者可能都仍然基于 <phrase os="sles;sled">SUSE® Linux Enterprise Server</phrase>。
      </para>
      <para>
        使用 QEMU 可以创建<quote>基本</quote>磁盘映像。您可以将这些映像作为模板虚拟机使用。这些基本映像将为您节省大量时间，因为您无需多次安装同一个操作系统。
      </para>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-base-and-derived">
        <title>基本映像和派生映像</title>
        <para>
          首先，照常构建一个磁盘映像，并在其中安装目标系统。有关详细信息，请参见<xref linkend="cha-qemu-guest-inst-qemu-kvm"/>和<xref linkend="cha-qemu-guest-inst-qemu-img-create"/>。然后使用第一个映像作为基本映像来构建新映像。基本映像也称为<emphasis>后备</emphasis>文件。构建新的<emphasis>派生</emphasis>映像后，切勿再次引导基本映像，而是引导派生映像。多个派生映像可以同时依赖于一个基本映像。因此，更改基本映像可能会损坏依赖性。使用派生映像时，QEMU 会将更改写入其中，并仅使用基本映像进行读取操作。
        </para>
        <para>
          比较好的做法是基于一个全新安装（并已根据需要注册）并且未应用任何补丁且未在其中安装或去除其他应用程序的操作系统创建基本映像。以后，您可以在应用最新补丁后基于原始基本映像创建另一个基本映像。
        </para>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-create-derived">
        <title>创建派生映像</title>
        <note>
          <para>
            尽管您可以对基本映像使用 <literal>raw</literal> 格式，但不能对派生映像使用该格式，因为 <literal>raw</literal> 格式不支持 <literal>backing_file</literal> 选项。可对派生映像使用 <literal>qcow2</literal> 等格式。
          </para>
        </note>
        <para>
          例如，<filename>/images/sles_base.raw</filename> 是包含全新安装的系统的基本映像。
        </para>
<screen><prompt>&gt; </prompt>qemu-img info /images/sles_base.raw
image: /images/sles_base.raw
file format: raw
virtual size: 4.0G (4294967296 bytes)
disk size: 2.4G</screen>
        <para>
          该映像的保留大小为 4 GB，实际大小为 2.4 GB，格式为 <literal>raw</literal>。使用以下命令创建自 <filename>/images/sles_base.raw</filename> 基本映像派生的映像：
        </para>
<screen><prompt>&gt; </prompt>qemu-img create -f qcow2 /images/sles_derived.qcow2 \
-o backing_file=/images/sles_base.raw
Formatting '/images/sles_derived.qcow2', fmt=qcow2 size=4294967296 \
backing_file='/images/sles_base.raw' encryption=off cluster_size=0
</screen>
        <para>
          查看派生映像的细节：
        </para>
<screen><prompt>&gt; </prompt>qemu-img info /images/sles_derived.qcow2
image: /images/sles_derived.qcow2
file format: qcow2
virtual size: 4.0G (4294967296 bytes)
disk size: 140K
cluster_size: 65536
backing file: /images/sles_base.raw \
(actual path: /images/sles_base.raw)</screen>
        <para>
          尽管派生映像的保留大小与基本映像的大小相同 (4 GB)，但实际大小仅为 140 KB。原因是只有对派生映像内部的系统进行的更改会保存下来。运行派生的虚拟机，根据需要注册，并应用最新补丁。在系统中进行任何其他更改，例如，去除不需要的软件包或安装新软件包。然后关闭 VM Guest 并再次检查其细节：
        </para>
<screen><prompt>&gt; </prompt>qemu-img info /images/sles_derived.qcow2
image: /images/sles_derived.qcow2
file format: qcow2
virtual size: 4.0G (4294967296 bytes)
disk size: 1.1G
cluster_size: 65536
backing file: /images/sles_base.raw \
(actual path: /images/sles_base.raw)</screen>
        <para>
          <literal>disk size</literal> 值已增长为 1.1 GB，这是文件系统（而不是基本映像）中的更改所占用的磁盘空间。
        </para>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-rebase">
        <title>从派生映像重建基本映像</title>
        <para>
          在修改派生映像（应用补丁、安装特定的应用程序、更改环境设置，等等）之后，它会达到所需的状态。此时，您可以合并原始基本映像和派生映像以创建新的基本映像。
        </para>
        <para>
          原始基本映像 (<filename>/images/sles_base.raw</filename>) 包含全新安装的系统。它可以是经过修改的新基本映像的模板，而新的基本映像可以包含与第一个基本映像相同的系统，加上所有安全补丁和更新补丁等内容。在创建此新基本映像后，还可将它用作更专用的派生映像的模板。新基本映像便会独立于原始基本映像。基于派生映像创建基本映像的过程称为<emphasis>重建基本映像</emphasis>：
        </para>
<screen><prompt>&gt; </prompt>qemu-img convert /images/sles_derived.qcow2 \
-O raw /images/sles_base2.raw</screen>
        <para>
          此命令创建了使用 <literal>raw</literal> 格式的新基本映像 <filename>/images/sles_base2.raw</filename>。
        </para>
<screen><prompt>&gt; </prompt>qemu-img info /images/sles_base2.raw
image: /images/sles11_base2.raw
file format: raw
virtual size: 4.0G (4294967296 bytes)
disk size: 2.8G</screen>
        <para>
          新映像比原始基本映像大 0.4 GB。它不使用任何后备文件，您可以轻松基于此映像创建新的派生映像。这样，您便可以为组织中的虚拟磁盘映像创建复杂的层次结构，并节省大量的时间和工作。
        </para>
      </sect3>
      <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-mount">
        <title>在 VM 主机服务器上挂载映像</title>
        <para>
          在主机系统下挂载虚拟磁盘映像的做法可能会很实用。强烈建议阅读<xref linkend="chap-guestfs"/>，并使用专用的工具来访问虚拟机映像。不过，如果您需要手动执行此操作，请按照本指南所述操作。
        </para>
        <para>
          Linux 系统可以使用回写设备挂载 <literal>raw</literal> 磁盘映像的内部分区。第一个示例过程更复杂，但阐释得更清楚，而第二个过程则更简单直接：
        </para>
        <procedure>
          <title>通过计算分区偏移来挂载磁盘映像</title>
          <step>
            <para>
              在您要挂载其分区的磁盘映像中设置一个<emphasis>循环</emphasis>设备。
            </para>
<screen><prompt>&gt; </prompt>losetup /dev/loop0 /images/sles_base.raw</screen>
          </step>
          <step>
            <para>
              确定您要挂载的分区的<emphasis>扇区大小</emphasis>和起始<emphasis>扇区编号</emphasis>。
            </para>
<screen><prompt>&gt; </prompt>fdisk -lu /dev/loop0

Disk /dev/loop0: 4294 MB, 4294967296 bytes
255 heads, 63 sectors/track, 522 cylinders, total 8388608 sectors
Units = sectors of 1 * 512 = 512<co xml:id="co-qemu-img-loopback-sector-size"/> bytes
Disk identifier: 0x000ceca8

       Device Boot      Start         End      Blocks   Id  System
/dev/loop0p1              63     1542239      771088+  82  Linux swap
/dev/loop0p2   *     1542240<co xml:id="co-qemu-img-loopback-sector-start"/>    8385929     3421845   83  Linux</screen>
            <calloutlist>
              <callout arearefs="co-qemu-img-loopback-sector-size">
                <para>
                  磁盘扇区大小。
                </para>
              </callout>
              <callout arearefs="co-qemu-img-loopback-sector-start">
                <para>
                  分区的起始扇区。
                </para>
              </callout>
            </calloutlist>
          </step>
          <step>
            <para>
              计算分区起始偏移：
            </para>
            <para>
              <literal>sector_size * sector_start = 512 * 1542240 = 789626880
              </literal>
            </para>
          </step>
          <step>
            <para>
              删除循环，并在准备好的目录中，根据计算出的偏移挂载磁盘映像内的分区。
            </para>
<screen><prompt>&gt; </prompt>losetup -d /dev/loop0
<prompt>&gt; </prompt>mount -o loop,offset=789626880 \
/images/sles_base.raw /mnt/sles/
<prompt>&gt; </prompt>ls -l /mnt/sles/
total 112
drwxr-xr-x   2 root root  4096 Nov 16 10:02 bin
drwxr-xr-x   3 root root  4096 Nov 16 10:27 boot
drwxr-xr-x   5 root root  4096 Nov 16 09:11 dev
[...]
drwxrwxrwt  14 root root  4096 Nov 24 09:50 tmp
drwxr-xr-x  12 root root  4096 Nov 16 09:16 usr
drwxr-xr-x  15 root root  4096 Nov 16 09:22 var
</screen>
          </step>
          <step>
            <para>
              将一个或多个文件复制到挂载的分区，并在完成后卸载该分区。
            </para>
<screen><prompt>&gt; </prompt>cp /etc/X11/xorg.conf /mnt/sles/root/tmp
<prompt>&gt; </prompt>ls -l /mnt/sles/root/tmp
<prompt>&gt; </prompt>umount /mnt/sles/</screen>
          </step>
        </procedure>
        <warning>
          <title>不要向当前正在使用的映像写入数据</title>
          <para>
            切勿挂载处于 <literal>read-write</literal> 模式的运行中虚拟机映像的分区。这可能会损坏该分区并破坏整个 VM Guest。
          </para>
        </warning>
      </sect3>
    </sect2>
  </sect1>
</chapter>
