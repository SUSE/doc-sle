<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!--

2015-12-16: suggestion from Frank
When user has SDK repo installed, it should be make sure that
the user needs to change the repo URL to the new SP version.

Check with Simona, if this is supported or needed.

-->
<chapter version="5.0" xml:id="cha.update.sle"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Upgrading &sle;</title>
 <info>
  <abstract>
   <para>
    &slereg; (&slea;) allows to update an existing system to the new version,
    for example, going from &slea; 11 SP4 to &slea; 12. No new installation is
    needed. Existing data, such as home and data directories and system
    configuration, is kept intact. You can update from a local CD or DVD drive
    or from a central network installation source.
   </para>

   <para>
    This chapter explains how to manually upgrade your &sle; system, be it by
    DVD, network, an automated process, or &susemgr;.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec.update.prep">
  <title>General Preparations</title>

  <para>
   Before starting the update procedure, make sure your system is properly
   prepared. Among others, preparation involves backing up data and checking
   the release notes.
  </para>

  <sect2 xml:id="sec.update.prep.multiversion">
   <title>Temporarily Disable Kernel Multiversion Support</title>
   <para>
    &productname; allows to install multiple Kernel versions by enabling the
    respective settings in <filename>/etc/zypp/zypp.conf</filename>. Support
    for this feature needs to be temporarily disabled for updating to a service
    pack. When the update has successfully finished; multiversion support can be
    re-enabled again. To disable multiversion support, comment the respective
    lines in <filename>/etc/zypp/zypp.conf</filename>. The result should look
    like this:
   </para>
<screen>#multiversion = provides:multiversion(kernel)
#multiversion.kernels = latest,running</screen>
   <para>
    To re-activate this feature after a successful update, remove the comment
    signs. For more information about multiversion support, refer to
    <xref linkend="cha.tuning.multikernel.enable"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.relnotes">
   <title>Check the Release Notes</title>
   <para>
    In the release notes you can find additional information on what has
    changed since the previous release of &sle;. Verify there if your specific
    hardware or setup needs special considerations, which of your favorite
    specific software packages have changed significantly, and which
    precautions you should take in addition to the general recommendations of
    this section. The release notes also provide last-minute information and
    known issues that could not make it to the manual on time.
   </para>
   <para>
    The current version of the release notes document containing the latest
    information on &productname; can be read online at
    <link
      xlink:href="http://www.suse.com/documentation/"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.backup">
   <title>Make a Backup</title>
   <para>
    Before updating, copy existing configuration files to a separate medium
    (such as tape device, removable hard disk, etc.) to back up the data. This
    primarily applies to files stored in <filename>/etc</filename> and some
    directories and files in <filename>/var</filename> and
    <filename>/opt</filename>. You may also want to write the user data in
    <filename>/home</filename> (the <envar>HOME</envar> directories) to a
    backup medium. Back up this data as &rootuser;. Only &rootuser; has read
    permissions for all local files.
   </para>
   <para>
    If you have selected <guimenu>Update an Existing System</guimenu> as the
    installation mode in &yast;, you can choose to do a (system) backup at a
    later point in time. You can choose to include all modified files and files
    from the <filename>/etc/sysconfig</filename> directory. However, this is
    not a complete backup, as all the other important directories mentioned
    above are missing. Find the backup in the
    <filename>/var/adm/backup</filename> directory.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.mariadb">
   <title>Migrate your MySQL Database</title>
   <remark>toms 2015-09-03: already reviewed by Ondrej and Krist√Ωna.</remark>
   <para>
    As of &sle; 12, &suse; switched from MySQL to MariaDB. Before you start any
    upgrade, it is highly recommended to back up your database.
   </para>
<!--<para>If you are familiar with the <command>mysql_upgrade</command>
        tool, you do not need to call it explicitly. This command is called
        during the installation of MariaDB.</para>-->
   <para>
    To perform the database migration, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Log in to your &sle; 11 machine.
     </para>
    </step>
    <step>
     <para>
      Create a dump file:
     </para>
<screen>&prompt.root;<command>mysqldump</command> -u root -p --all-databases > mysql_backup.sql</screen>
     <para>
      By default, <command>mysqldump</command> does not dump the
      <literal>INFORMATION_SCHEMA</literal> or
      <literal>performance_schema</literal> database. For more details refer to
      <link xlink:href="https://dev.mysql.com/doc/refman/5.5/en/mysqldump.html"/>.
     </para>
    </step>
    <step>
     <para>
      Store your dump file, the configuration file
      <filename>/etc/my.cnf</filename>, and the directory
      <filename>/etc/mysql/</filename> for later investigation
      (<emphasis>NOT</emphasis> installation!) in a safe place.
     </para>
    </step>
    <step>
     <para>
      Perform your upgrade. After the upgrade, your former configuration file
      <filename>/etc/my.cnf</filename> is still intact. You can find the new
      configuration in the file <filename>/etc/my.cnf.rpmnew</filename>.
     </para>
    </step>
    <step>
     <para>
      Configure your MariaDB database to your needs. Do
      <emphasis>NOT</emphasis> use the former configuration file and directory,
      but use it as a reminder and adapt it.
     </para>
    </step>
    <step>
     <para>
      Make sure you start the MariaDB server:
     </para>
<screen>&prompt.root;<command>systemctl</command> start mysql</screen>
     <para>
      If you want to start the MariaDB server on every boot, enable the
      service:
     </para>
<screen>&prompt.root;<command>systemctl</command> enable mysql</screen>
<!--<para>If you want to test the server, install the package
          <package>mariadb-test</package>.</para>-->
    </step>
    <step>
     <para>
      Verify that MariaDB is running properly by connecting to the database:
     </para>
<screen>&prompt.root;<command>mysql</command> -u root -p</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update.prep.postgresql">
   <title>Migrate your &postgresql; Database</title>
   <remark>toms 2015-09-09: FATE#319049</remark>
   <remark>Already reviewd by Reinhard</remark>
   <para>
    &slea;11 SP3 and &slea;12 GA get a newer version of the &postgresql;
    database as a maintenance update. Because of the required migration work of
    the database, there is no automatic upgrade process. As such, the switch
    from one version to another needs to be done manually.
   </para>
   <para>
    The migration process is conducted by the <command>pg_upgrade</command>
    command which is an alternative method of the classic dump and reload. In
    comparison with the <quote>dump &amp; reload</quote> method,
    <command>pg_upgrade</command> makes the migration less time-consuming.
   </para>
   <para>
    Each &postgresql; version stores its files in different, version-dependent
    directories. After the update the directories will change to:
   </para>
   <variablelist>
    <varlistentry>
     <term>&slea;11 SP3/SP4</term>
     <listitem>
      <para>
       <filename>/usr/lib/postgresql91/</filename> to
       <filename>/usr/lib/postgresql94/</filename>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&slea;12 GA</term>
     <listitem>
      <para>
       <filename>/usr/lib/postgresql93/</filename> to
       <filename>/usr/lib/postgresql94/</filename>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To perform the database migration, do the following:
   </para>
   <procedure>
    <step>
     <para>
      Make sure the following preconditions are fulfilled:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        If not already done, upgrade any package of the old &postgresql;
        version to the latest release through a maintenance update.
       </para>
      </listitem>
      <listitem>
       <para>
        Create a backup of your existing database.
       </para>
      </listitem>
      <listitem>
       <para>
        Install the packages of the new &postgresql; major version. For
        &slea;12 this means to install
        <package>postgresql94-server</package>
        and all the packages it depends on.
       </para>
      </listitem>
      <listitem>
       <para>
        Install the package
        <package>postgresql94-contrib</package>
        which contains the command <command>pg_upgrade</command>.
       </para>
      </listitem>
      <listitem>
       <para>
        Make sure you have enough free space in your &postgresql; data area,
        which is <filename>/var/lib/pgsql/data</filename> by default. If space
        is tight, try to reduce size with the following SQL command on each
        database (can take very long!):
       </para>
<screen>VACUUM FULL</screen>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Stop the &postgresql; server:
     </para>
<screen>&prompt.root;<command>/usr/sbin/rcpostgresql</command> stop</screen>
    </step>
    <step>
     <para>
      Rename your old data directory:
     </para>
<screen>&prompt.root;<command>mv</command> /var/lib/pgsql/data /var/lib/pgsql/data.old</screen>
    </step>
    <step>
     <para>
      Create a new data directory:
     </para>
<screen>&prompt.root;<command>mkdir</command> -p /var/lib/pgsql/data</screen>
    </step>
    <step>
     <para>
      If you have changed your configuration files in the old version, copy the
      files <filename>postgresql.conf</filename>
      <filename>pg_hba.conf</filename> to your new <filename>data</filename>
      directory:
     </para>
<screen>&prompt.root;<command>cp</command> /var/lib/pgsql/data.old/*.conf \
     /var/lib/pgsql/data</screen>
    </step>
    <step>
     <para>
      Initialize your new database instance either manually with
      <command>initdb</command> or by starting and stopping &postgresql;, which
      will do it automatically:
     </para>
<screen>&prompt.root;<command>/usr/sbin/rcpostgresql</command> start
&prompt.root;<command>/usr/sbin/rcpostgresql</command> stop</screen>
    </step>
    <step>
     <para>
      Start the migration process and replace the
      <replaceable>OLD</replaceable> placeholder with the older version:
     </para>
<screen>&prompt.root;<command>pg_upgrade</command> \
   --old-datadir "/var/lib/pgsql/data.old" \
   --new-datadir "/var/lib/pgsql/data" \
   --old-bindir "/usr/lib/postgresql<replaceable>OLD</replaceable>/bin/" \
   --new-bindir "/usr/lib/postgresql94/bin/"</screen>
    </step>
    <step>
     <para>
      Start your new database instance:
     </para>
<screen>&prompt.root;<command>/usr/sbin/rcpostgresql</command> start</screen>
    </step>
    <step>
     <para>
      Check if the migration was successful. There is no general tool to
      automate this step. It depends on your use case how much and what you
      want to test.
     </para>
    </step>
    <step>
     <para>
      Remove any old &postgresql; packages and your old data directory:
     </para>
<screen>&prompt.root;<command>zypper</command> search -s postgresql<replaceable>OLD</replaceable> | xargs zypper rm -u
&prompt.root;<command>rm</command> -rf /var/lib/pgsql/data.old</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update.prep.ssl">
   <title>Create Non-MD5 Server Certificates for Java Applications</title>
   <remark>toms 2016-07-27: from bsc#970153, c#24</remark>
   <para>
    During the update from SP1 to SP2, MD5-based certificates were disabled as
    part of a security fix. If you have certificates created as MD5, recreate
    your certificates with the following steps:
   </para>
   
   <procedure>
    <step>
     <para>
      Open a terminal and log in as &rootuser;.
     </para>
    </step>
    <step>
     <para>
      Create a private key:
     </para>
     <screen>&prompt.root;<command>openssl</command> genrsa -out server.key 1024</screen>
     <para>
      If you want a stronger key, exchange <literal>1024</literal> with a
      higher number, for example, <literal>4096</literal>.
     </para>
    </step>
    <step>
     <para>
      Create a certificate signing request (CSR):
     </para>
     <screen>&prompt.root;<command>openssl</command> req -new -key server.key -out server.csr</screen>
    </step>
    <step>
     <para>
      Self-sign the certificate:
     </para>
     <screen>&prompt.root;<command>openssl</command> x509 -req -days 365 -in <!--
     -->server.csr -signkey server.key -out server.crt</screen>
    </step>
    <step>
     <para>
      Create the PEM file:
     </para>
     <screen>&prompt.root;<command>cat</command> server.key server.crt > server.pem</screen>
    </step>
    <step>
     <para>Place the files <filename>server.crt</filename>,
      <filename>server.csr</filename>, <filename>server.key</filename>, and
      <filename>server.pem</filename> in the respective directories where
      the keys can be found. For Tomcat, for example, this directory is
      <filename>/etc/tomcat/ssl/</filename>.
     </para>
    </step>
   </procedure>
  </sect2>
  
  <sect2 xml:id="sec.update.prep.vms">
   <title>Shut Down Virtual Machine Guests</title>
   <para>
    If your machine serves as a &vmhost; for &kvm; or &xen;, make sure to
    properly shut down all running &vmguest;s prior to the update. Otherwise
    you may not be able to access the guests after the update.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.prep.smt">
   <title>Check the <command>clientSetup4SMT.sh</command> script on SMT clients</title>
   <para>
    If you are migrating your client OS that is registered against an &smt; server, you need to check if the version
    of the <command>clientSetup4SMT.sh</command> script on your host is up to date.
<command>clientSetup4SMT.sh</command> from older versions of &smt; cannot manage &smt; 12 clients.
    If you apply software patches regularly on your SMT server, you can always find the latest version
    of <command>clientSetup4SMT.sh</command> at <filename>&lt;SMT_HOSTNAME&gt;/repo/tools/clientSetup4SMT.sh</filename>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.disk">
  <title>Disk Space</title>

  <para>
   Software tends to <quote>grow</quote> from version to version. Therefore,
   take a look at the available partition space before updating. If you suspect
   you are running short of disk space, secure your data before increasing the
   available space by resizing partitions, for example. There is no general
   rule regarding how much space each partition should have. Space requirements
   depend on your particular partitioning profile and the software selected.
  </para>

  <note>
   <title>Automatic Check for Enough Space in &yast;</title>
   <para>
    During the update procedure, &yast; will check the free disk space and
    display a warning to the user if the installation may exceed the available
    amount. In that case, performing the update may lead to an
    <emphasis>unusable system</emphasis>! Only if you know exactly what you are
    doing (by testing beforehand), you can skip the warning and continue the
    update.
   </para>
  </note>

  <sect2 xml:id="sec.update.disk.space">
   <title>Checking Disk Space on Non-Btrfs File Systems</title>
   <para>
    Use the <command>df</command> command to list available disk space. For
    example, in <xref linkend="aus.update.df"/>, the root partition is
    <filename>/dev/sda3</filename> (mounted as <filename>/</filename>).
   </para>
   <example xml:id="aus.update.df">
    <title>List with <command>df -h</command></title>
<screen os="sled">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       39G  1.6G   37G   4% /windows/C
/dev/sda2      4.6G  2.6G  2.1G  57% /windows/D</screen>
<screen os="sles">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       44G    4G   40G   9% /data</screen>
   </example>
  </sect2>

  <sect2 xml:id="sec.update.disk.btrfs-on-root">
   <title>Checking Disk Space on Btrfs Root File Systems</title>
   <para>
    If you use Btrfs as root file systems on your machine, make sure there is
    enough free space. Getting disk space can be done with these two commands:
   </para>
<screen>&prompt.root;<command>btrfs</command> filesystem df /
&prompt.root;<command>df</command> /</screen>
   <para>
    The results of the two commands show similar numbers of how much disk space
    is used. However, the problem with Btrfs and free space is that you do not
    know what is referenced in a snapshot and what is not; you cannot calculate
    how much disk space a change would need.
   </para>
   <para>
    In the worst case, an upgrade needs as much disk space as the current root
    file system (without <filename>/.snapshot</filename>). Besides any Btrfs
    file systems, check for free space on other file systems as well. The
    following recommendation has been proven:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      For all file systems including Btrfs you need enough free disk space to
      download and install big RPMs. The space of old RPMs are only freed after
      new RPMs are installed.
     </para>
    </listitem>
    <listitem>
     <para>
      For Btrfs with snapshots, you need at minimum as much free space as your
      current installation takes. It is recommended to have twice as much free
      space as the current installation.
     </para>
     <para>
      If you do not have enough free space, you can try to delete old snapshots
      with <command>snapper</command> like this:
     </para>
<screen>&prompt.root;<command>snapper</command> list
&prompt.root;<command>snapper</command> delete NUMBER</screen>
     <para>
      However, this may not help in all cases. Before migration, most snapshots
      occupy only little space.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.proc.prep.paths">
  <title>Supported Upgrade Paths for &slea;</title>

  <important>
   <title>Cross-architecture Upgrades Are Not Supported</title>
   <para>
    Cross-architecture upgrades, such as upgrading from a 32-bit version of
    &productname; to the 64-bit version, or upgrading from big endian to little
    endian are <emphasis>not</emphasis> supported!
   </para>
   <para>
    Specifically, &slea; 11 on &ppc; (big endian) to &slea; 12 SP1 on &ppc;
    (new: little endian!), is <emphasis>not</emphasis> supported.
   </para>
   <para>
    Also, since &sle; 12 is 64-bit only, upgrades from any 32-bit &sle; 11
    systems to &sle; 12 and later are <emphasis>not</emphasis> supported.
   </para>
  </important>

  <para>
   Before you perform any migration, read <xref linkend="sec.update.prep"/>.
  </para>

  <variablelist>
   <varlistentry>
    <term>Upgrading from &sle; 10 (any Service Pack)</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12. A fresh
      installation is recommended instead.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 GA, SP1 or SP2</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12. You need at
      least &slea; 11 SP3 before you can proceed to &slea; 12.
     </para>
     <para>
      If you cannot do a fresh install, you need to first update from &slea; 11
      GA to SP1, then from &slea; 11 SP1 to SP2, and then from &slea; 11 SP2 to
      SP3. These steps are described in the
      <link xlink:href="https://www.suse.com/documentation/sles11/">&sle; 11
      Deployment Guide</link>.
     </para>
     <para>
      Then proceed with <xref linkend="sec.update.sle12"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 SP3 or SP4</term>
    <listitem>
     <para>
      Refer to <xref linkend="sec.update.sle12"/> for details.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 12 to SP1</term>
    <listitem>
     <para>
      Refer to <xref linkend="cha.update.spmigration"/> for details.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.update.sle12">
  <title>Supported Methods for Upgrading &sle;</title>

  <remark>toms 2014-02-11: See FATEs #315969 and #313189</remark>

  <para>
   Upgrading from &sle;&nbsp;11 SP3 to &sle;&nbsp;12, &sle;&nbsp;11 SP3 to
   &sle;&nbsp;12 SP1, or &sle;&nbsp;11 SP4 to &sle;&nbsp;12 SP1 is supported
   using one of the following methods:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <xref linkend="sec.update.sle12.manual" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.update.sle12.automated" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.update.sle12zseries" os="sles">
  <title>Upgrading on IBM &zseries;</title>
  <para>Upgrading a &sle; installation on &zseries; requires the
   <command>Upgrade=1</command> kernel parameter, for example via the
   parmfile. See <xref linkend="sec.appdendix.parm" xrefstyle="HeadingOnPage"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.update.sle12.manual">
  <title>Upgrading Manually from &slea;&nbsp;11 SP3 to &slea; 12 SP1, Using an Installation Source</title>

  <para>
   Before you upgrade your system, read <xref linkend="sec.update.prep"/>
   first.
  </para>

  <para>
   To upgrade your system this way, you need to boot from an installation
   source, like you would do for a fresh installation. However, when the boot
   screen appears, you need to select <guimenu>Upgrade</guimenu> (instead of
   <guimenu>Installation</guimenu>). The installation source to boot from can
   be one of the following:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     A local installation medium (like a DVD, or an ISO image on a USB mass
     storage device). For detailed instructions, see
     <xref linkend="sec.update.sle12.manual.dvd"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     A network installation source. You can either boot from the local medium
     and then select the respective network installation type, or boot via PXE.
     For detailed instructions, see
     <xref linkend="sec.update.sle12.manual.network"/>.
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.update.sle12.manual.dvd">
   <title>Upgrading from an Installation Medium</title>
   <para>
    The procedure below describes booting from a DVD as an example, but you can
    also use another local installation medium like an ISO image on a USB mass
    storage device. The way to select the boot method and to start up the
    system from the medium depends on the system architecture and on whether
    the machine has a traditional BIOS or UEFI. For details, see the links
    below.
   </para>
   <procedure xml:id="pro.update.sle12.manual.dvd">
    <title>Manually Upgrading from &slea;&nbsp;11 SP3 to &slea;&nbsp;12 SP1, Using a DVD</title>
    <step>
     <para>
      Insert DVD 1 of the &sle; 12 SP1 installation medium and boot your
      machine. A <guimenu>Welcome</guimenu> screen is displayed, followed by
      the boot screen.
     </para>
    </step>
    <step>
     <para>
      Select the respective boot method to start the system from the medium
      (see <xref linkend="sec.i.yast2.method"/>).
     </para>
    </step>
    <step>
     <para>
      Start up the system from the medium (see
      <xref linkend="sec.i.yast2.startup"/>).
     </para>
    </step>
    <step>
     <para>
      Proceed with the upgrade process as described in
      <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.update.sle12.manual.network">
   <title>Upgrading from a Network Installation Source</title>
   <para>
    If you want to start an upgrade from a network installation source, make
    sure that the following requirements are met:
   </para>
   <variablelist>
    <title>Requirements for Upgrading from a Network Installation Source</title>
    <varlistentry>
     <term>Network Installation Source</term>
     <listitem>
      <para>
       A network installation source is set up according to
       <xref linkend="cha.deployment.instserver"/>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Network Connection and Network Services</term>
     <listitem>
      <para>
       Both the installation server and the target machine have a functioning
       network connection. The network must provide the following services: a
       name service, DHCP (optional, but needed for booting via PXE), and
       OpenSLP (optional).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Installation Media</term>
     <listitem>
      <para>
       You have a &sle; DVD 1 (or a local ISO image) at hand to boot the target
       system <emphasis>or</emphasis> a target system that is set up for
       booting via PXE according to
       <xref linkend="sec.deployment.prep_boot.pxeprep" xrefstyle="HeadingOnPage"/>.
       Refer to <xref linkend="cha.deployment.remoteinst"/> for in-depth
       information on starting the upgrade from a remote server.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    When upgrading from network installation source, you can either boot from
    the local medium and then select the respective network installation type,
    or boot via PXE. Select the method of your choice and proceed as described
    in
    <xref linkend="pro.update.sle12.manual.network.boot-from-dvd" xrefstyle="select:label"/>
    or
    <xref linkend="pro.update.sle12.manual.network.pxe-boot" xrefstyle="select:label"/>.
   </para>
   <procedure xml:id="pro.update.sle12.manual.network.boot-from-dvd">
    <title>Manually Upgrading from &slea;&nbsp;11 SP3 or SP4 to &slea;&nbsp;12 SP1 via Network Installation Source&mdash;Booting from DVD</title>
    <para>
     This procedure describes booting from a DVD as an example, but you can
     also use another local installation medium like an ISO image on a USB mass
     storage device. The way to select the boot method and to start up the
     system from the medium depends on the system architecture and on whether
     the machine has a traditional BIOS or UEFI. For details, see the links
     below.
    </para>
    <step>
     <para>
      Insert DVD 1 of the &sle; 12 SP1 installation media and boot your
      machine. A <guimenu>Welcome</guimenu> screen is displayed, followed by
      the boot screen.
     </para>
    </step>
    <step>
     <para>
      Select the type of network installation source you want to use (FTP,
      HTTP, NFS, SMB, or SLP). Usually you get this choice by pressing
      <keycap>F4</keycap>, but in case your machine is equipped with UEFI
      instead of a traditional BIOS, you may need to manually adjust boot
      parameters. For details, see <xref linkend="sec.i.yast2.source.net"/> in
      <xref linkend="cha.inst"/>.
     </para>
    </step>
    <step>
     <para>
      Proceed with the upgrade process as described in
      <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
     </para>
    </step>
   </procedure>
   <procedure xml:id="pro.update.sle12.manual.network.pxe-boot">
    <title>Manually Upgrading from &slea;&nbsp;11 SP3 or SP4 to &slea;&nbsp;12 SP1 via Network Installation Source&mdash;Booting via PXE</title>
    <para>
     To perform an upgrade from a network installation source using PXE Boot,
     proceed as follows:
    </para>
    <step>
     <para>
      Adjust the setup of your DHCP server to provide the address information
      needed for booting via PXE. For details, see
      <xref linkend="sec.deployment.prep_boot.pxeprep"/>.
     </para>
    </step>
    <step>
     <para>
      Set up a TFTP server to hold the boot image needed for booting via PXE.
      Use DVD 1 of your &sle; 12 SP1 installation media for this or follow the
      instructions in <xref linkend="sec.deployment.prep_boot.tftp"/>.
     </para>
    </step>
    <step>
     <para>
      Prepare PXE Boot and Wake-on-LAN on the target machine.
     </para>
    </step>
    <step>
     <para>
      Initiate the boot of the target system and use VNC to remotely connect to
      the installation routine running on this machine. For more information,
      see <xref linkend="sec.deployment.remoteinst.monitor.vnc"/>.
     </para>
    </step>
    <step>
     <para>
      Proceed with the upgrade process as described in
      <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.update.sle12.automated">
  <title>Migrating Automatically from &slea; 11 SP3 or SP4 to &slea; 12 SP1</title>

  <para>
   Before you upgrade your system, read <xref linkend="sec.update.prep"/>
   first. To perform an automated migration, proceed as follows:
  </para>

  <procedure xml:id="pro.update.sle12.automated">
   <title>Automated Migration from &sle; 11 SP3 to &sle; 12 SP1</title>
   <remark>toms 2014-03-19: See FATE#315037</remark>
   <remark role="future">toms 2014-03-20: From SLE12 SP1 on, we should probably base
    this example on GRUB2, but not for GA.</remark>
   <remark>jsrain 2015-09-02: This is still the old system; at some point
       of time we should switch to GRUB2, but as long as amjority of
       customers still runs SLE11, I would stay with legacy GRUB. Anyway, we
       could include both op6tions, that would be probably best solution</remark>
   <step>
    <para>
     Copy the installation Kernel <filename>linux</filename> and the file
     <filename>initrd</filename> from <filename>/boot/x86_64/loader/</filename>
     from your first installation DVD to your system's
     <filename>/boot</filename> directory:
    </para>
<screen><command>cp</command> -vi <replaceable>DVDROOT</replaceable>/boot/x86_64/loader/linux /boot/linux.upgrade
<command>cp</command> -vi <replaceable>DVDROOT</replaceable>/boot/x86_64/loader/initrd /boot/initrd.upgrade</screen>
    <para>
     <replaceable>DVDROOT</replaceable> denotes the path where your system
     mounts the DVD, usually <filename>/run/media/$USER/$DVDNAME</filename>.
    </para>
   </step>
   <step>
    <para>
     Open the GRUB legacy configuration file
     <filename>/boot/grub/menu.lst</filename> and add another section. For
     other boot loaders, edit the respective configuration file(s). Adjust
     device names and the <parameter>root</parameter> parameter accordingly.
     For example:
    </para>
<screen>title Linux Upgrade Kernel
kernel (hd0,0)/boot/linux.upgrade root=/dev/sda1 upgrade=1 <replaceable>OPTIONAL_PARAMETERS</replaceable>
initrd (hd0,0)/boot/initrd.upgrade</screen>
    <para>
     <replaceable>OPTIONAL_PARAMETERS</replaceable> denote additional boot
     parameters which you might need to boot your system and perform the
     upgrade. These may be kernel parameters needed for your system&mdash;check
     if you need to review and copy those from an existing GRUB entry. They
     also may be &suse;
     <link xlink:href="http://en.opensuse.org/Linuxrc">linuxrc parameters,
     documented online</link>.
    </para>
   </step>
   <step>
    <para>
<!-- cwickert 2016-04-14: FIXME DEPLOY_REWRITE
            <phrase os="sles">
                (see <link xlink:href="Link to SBP goes here once it has been published"/>)
            </phrase>
      -->
     If the upgrade should be done automated, add the
     <option>autoupgrade=1</option> to the end of the <literal>kernel</literal>
     line in your GRUB configuration.
    </para>
   </step>
   <step>
    <para>
     Reboot your machine and select the newly added section from the boot menu
     (here: <emphasis>Linux Upgrade Kernel</emphasis>). You can use
     <command>grubonce</command> to preselect the newly created GRUB entry for
     an unattended automatic reboot into the newly created entry. You can also
     use <command>reboot</command> to initiate the reboot from the command
     line.
    </para>
   </step>
   <step>
    <para>
     Proceed with the usual upgrade process as described in
     <xref linkend="sec.update.sle12.start.upgr.after.boot"/>.
    </para>
   </step>
   <step>
    <para>
     After the upgrade process was finished successfully, remove the
     installation Kernel and initrd files
     (<filename>/boot/linux.upgrade</filename> and
     <filename>/boot/initrd.upgrade</filename>). They are not needed anymore.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.update.sle12.start.upgr.after.boot">
  <title>Starting the Upgrade Process After Booting</title>

  <para>
   <remark>taroth 2014-11-13: argh, the following is terminology hell regarding
     the software strings: "upgrade"/"update" are used intermittently and
     without clear differentiation...</remark>
  </para>

  <procedure>
   <step>
    <para>
     After you have booted (either from an installation medium or the network),
     select the <guimenu>Upgrade</guimenu> entry on the boot screen.
    </para>
    <warning>
     <title>Wrong Choice May Lead to Data Loss</title>
     <para>
      If you select <guimenu>Installation</guimenu> instead of
      <guimenu>Upgrade</guimenu>, data may be lost later. You need to be extra
      careful to not destroy your data partitions by doing a fresh
      installation, for example by repartitioning the disks (which can destroy
      the existing partitions) or by reformatting the data partitions (which
      erases all data on them).
     </para>
     <para>
      Make sure to select <guimenu>Upgrade</guimenu> here.
     </para>
    </warning>
    <para>
     &yast; starts the installation system.
    </para>
   </step>
   <step>
    <para>
     On the <guimenu>Welcome</guimenu> screen choose
     <guimenu>Language</guimenu> and <guimenu>Keyboard</guimenu> and accept the
     license agreement. Proceed with <guimenu>Next</guimenu>.
    </para>
    <para>
     &yast; checks your partitions for already installed &sle; systems.
    </para>
   </step>
   <step>
    <para>
     On the <guimenu>Select for Upgrade</guimenu> screen, select the partition
     to upgrade and click <guimenu>Next</guimenu>.
    </para>
    <para>
     &yast; mounts the selected partition and displays all repositories that
     have been found on the partition that you want to upgrade.
    </para>
   </step>
   <step>
    <para>
     On the <guimenu>Previously Used Repositories</guimenu> screen, adjust the
     status of the repositories: enable those you want to include in the
     upgrade process and disable any repositories that are no longer needed.
     Proceed with <guimenu>Next</guimenu>.
    </para>
   </step>
   <step>
    <para>
     On the <guimenu>Registration</guimenu> screen, select whether to register
     the upgraded system now (by entering your registration data and clicking
     <guimenu>Next</guimenu>) or if to <guimenu>Skip Registration</guimenu>.
     For details on registering your system, see
     <xref linkend="sec.update.registersystem"/>.
    </para>
   </step>
   <step>
    <para>
     Review the <guimenu>Installation Settings</guimenu> for the upgrade,
     especially the <guimenu>Update Options</guimenu>. Choose between the
     following options:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <guimenu>Only Update Installed Packages</guimenu>, in which case you
       might miss new features shipped with the latest &sle; version.
      </para>
     </listitem>
     <listitem>
      <para>
       <guimenu>Update with Installation of New Software and
       Features</guimenu>. Click <guimenu>Select Patterns</guimenu> if you want
       to enable or disable patterns and packages according to your wishes.
      </para>
     </listitem>
    </itemizedlist>
<!--taroth 2014-11-19: fix for bsc#904188-->
    <note>
     <title>Choice of Desktop</title>
     <para>
      If you used KDE before upgrading to &sle; 12
      (<varname>DEFAULT_WM</varname> in
      <filename>/etc/sysconfig/windowmanager</filename> was set to
      <literal>kde*</literal>), your desktop environment will automatically be
      replaced with &gnome; after the upgrade. By default, the KDM display
      manager will be replaced with GDM.
     </para>
     <para>
      To change the choice of desktop environment or window manager, adjust the
      software selection by clicking <guimenu>Select Patterns</guimenu>.
     </para>
    </note>
   </step>
   <step>
    <para>
     If all settings are according to your wishes, start the installation and
     removal procedure by clicking <guimenu>Update</guimenu>.
    </para>
   </step>
   <step>
    <para>
     After the upgrade process was finished successfully, check for any
     <quote>orphaned packages</quote>. Orphaned packages are packages which
     belong to no active repository anymore. The following command gives you a
     list of these:
    </para>
<screen>zypper packages --orphaned</screen>
    <para>
     With this list, you can decide if a package is still needed or can be
     uninstalled safely.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.update.sle12.manager">
  <title>Updating via &susemgr;</title>

  <para>
   &susemgr; is a server solution for providing updates, patches, and security
   fixes for &sle; clients. It comes with a set of tools and a Web-based user
   interface for management tasks. See
   <link
    xlink:href="https://www.suse.com/products/suse-manager/"/> for
   details.
  </para>
 </sect1>
 <sect1 xml:id="sec.update.reg.status.after.rollback">
  <title>Updating Registration Status After Rollback</title>

  <para>
   When performing a service pack migration, it is necessary to change the
   configuration on the registration server to provide access to the new
   repositories. If the migration process is interrupted or reverted (via
   restoring from a backup or snapshot), the information on the registration
   server is inconsistent with the status of the system. This may lead to you
   being prevented from accessing update repositories or to wrong repositories
   being used on the client.
  </para>

  <para>
   When a rollback is done via Snapper, the system will notify the registration
   server to ensure access to the correct repositories is set up during the
   boot process. If the system was restored any other way or the communication
   with the registration server failed for any reason (for example, because the
   server was not accessible because of network issues), trigger the rollback
   on the client manually by calling:
  </para>

<screen><command>snapper</command> rollback</screen>

  <para>
   We suggest always checking that the correct repositories are set up on the
   system, especially after refreshing the service using
  </para>

<screen><command>zypper</command> ref -s</screen>

  <para>
   This functionality is available in the
   <package>rollback-helper</package>
   package.
  </para>
 </sect1>
 <sect1 xml:id="sec.update.registersystem">
<!-- was: sec.add-ons.register -->

  <title>Registering Your System</title>

  <para>
   If you skipped the registration step during the installation, you can
   register your system at any time using the <guimenu>Product
   Registration</guimenu> module in &yast;.
  </para>

  <para>
   Registering your systems has these advantages:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Getting support
    </para>
   </listitem>
   <listitem>
    <para>
     Getting security updates and bug fixes
    </para>
   </listitem>
   <listitem>
    <para>
     Access to &scc;
    </para>
   </listitem>
  </itemizedlist>

  <procedure>
   <step>
    <para>
     Start &yast; and select <menuchoice> <guimenu>Software</guimenu>
     <guimenu>Product Registration</guimenu> </menuchoice> to open the
     <guimenu>Registration</guimenu> dialog.
    </para>
   </step>
   <step>
    <para>
     Provide the <guimenu>E-mail</guimenu> address associated with the &suse;
     account you or your organization uses to manage subscriptions. In case you
     do not have a SUSE account yet, go to the &scc; home page
     (<link xlink:show="new" xlink:href="&sccurl;"/>) to create one.
    </para>
   </step>
   <step>
    <para>
     Enter the <guimenu>Registration Code</guimenu> you received with your copy
     of &productname;.
    </para>
   </step>
   <step xml:id="step.y2.register.final">
    <para>
     Proceed with <guimenu>Next</guimenu> to start the registration process. If
     one or more local registration servers are available on your network, you
     can choose one of them from a list. Alternatively, choose
     <guimenu>Cancel</guimenu> to ignore the local registration servers and
     register with the default &suse; registration server.
    </para>
    <para>
     During the registration, the online update repositories will be added to
     your upgrade setup. When finished, you can choose whether to install the
     latest available package versions from the update repositories. This
     provides a clean upgrade path for all packages and ensures that
     &productname; is upgraded with the latest security updates available. If
     you choose <guimenu>No</guimenu>, all packages will be installed from the
     installation media. Proceed with <guimenu>Next</guimenu>.
    </para>
    <para>
     After successful registration, &yast; lists extensions, add-ons, and
     modules that are available for your system. To select and install them,
     proceed with <xref linkend="sec.add-ons.extensions"/>.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.update.sle12.multiversion">
  <title>Retaining Kernel Packages</title>

  <remark>toms 2015-08-26: bsc#753809</remark>

  <remark>toms 2015-08-26: some parts are taken ("stolen") from the
      wiki at https://en.opensuse.org/SDB:Keep_multiple_kernel_versions
      and adapted
    </remark><indexterm>

  <primary>multiversion kernels</primary></indexterm>

  <para>
   When installing a new kernel with &yast; or Zypper, &sle; preserves the last
   two kernels and the running one. Usually this is sufficient.
  </para>

  <para>
   However, there may be situations where you need to preserve more kernel
   versions, for example, for testing purposes. To enable this, &sle; supports
   the <emphasis>multiversion kernel feature</emphasis>. By enabling and
   configuring this feature the default behavior can be changed and configured
   to:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     delete an old kernel only after the system has been rebooted successfully
     with the new kernel
    </para>
   </listitem>
   <listitem>
    <para>
     keep a specified number of older kernels as fallback
    </para>
   </listitem>
   <listitem>
    <para>
     keep a specific kernel version
    </para>
   </listitem>
  </itemizedlist>

  <para>
   After the successful reboot, a script will compare the list of installed
   kernels with the settings in <filename>/etc/zypp/zypp.conf</filename> and
   delete those kernels that are no longer needed.
  </para>

  <sect2 xml:id="sec.update.sle12.multiversion.enable">
   <title>Enabling the Multiversion Kernel Feature</title>
   <para>
    The default behavior is defined in the configuration file
    <filename>/etc/zypp/zypp.conf</filename>:
   </para>
<screen>&prompt.root;<command>grep</command> ^multiversion /etc/zypp/zypp.conf
multiversion = provides:multiversion(kernel)
multiversion.kernels = latest,latest-1,running</screen>
   <para>
    Remove any hash mark (#) before the line <literal>multiversion</literal>
    above to enable this feature (which should already be the case). The second
    line is used to configure <emphasis>which</emphasis> kernels need to be
    preserved. You need to enable both, otherwise the system will keep
    <emphasis>all</emphasis> kernels and it will fill up your hard disk.
   </para>
   <para>
    The <literal>multiversion.kernels</literal> line can contain several
    keywords in different combinations and order:
   </para>
   <variablelist>
    <varlistentry>
     <term><option>latest</option>
     </term>
     <listitem>
      <para>
       Keep kernel with the highest version number
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>latest-<replaceable>N</replaceable></option>
     </term>
     <listitem>
      <para>
       Keep kernel with the <replaceable>N</replaceable>th highest version
       number; <replaceable>N</replaceable> is a number starting from 1
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>running</option>
     </term>
     <listitem>
      <para>
       Keep the current running kernel
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>oldest</option>
     </term>
     <listitem>
      <para>
       Keep kernel with the lowest version number (the kernel on the released
       product)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>oldest-<replaceable>N</replaceable></option>
     </term>
     <listitem>
      <para>
       Keep kernel with the <replaceable>N</replaceable>th lowest version
       number
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><option>3.12.28-4.6</option>
     </term>
     <listitem>
      <para>
       Keep this exact kernel version
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.update.sle12.multiversion.deleteoldkernel">
   <title>Use Case: Deleting an Old Kernel After Reboot Only</title>
   <para>
    You want to make sure that an old kernel will only be deleted after the
    system has rebooted successfully of the new kernel.
   </para>
   <para>
    Change the following line in <filename>/etc/zypp/zypp.conf</filename>:
   </para>
<screen>multiversion.kernels = latest,running</screen>
   <para>
    The previous parameters tell the system to keep the latest kernel and the
    running one only if they differ.
   </para>
  </sect2>

  <sect2 xml:id="sec.update.sle12.multiversion.fallback">
   <title>Use Case: Keeping Older Kernels as Fallback</title>
   <para>
    You want to keep one or more kernel versions to have one or more
    <quote>spare</quote> kernels.
   </para>
   <para>
    This use case can be useful if you need kernels for testing reasons. In
    case something goes wrong, for example, your machine does not boot, you
    still can use one or more kernel versions which are known to be good.
   </para>
   <para>
    Change the following line in <filename>/etc/zypp/zypp.conf</filename>:
   </para>
<screen>multiversion.kernels = latest,latest-1,latest-2,running</screen>
   <para>
    When you reboot your system after the installation of a new kernel, the
    system will keep three kernels: the new and running kernel (configured as
    <literal>latest,running</literal>), the previous kernel version of the new
    kernel (configured as <literal>latest-1</literal>), and the predecessor of
    the previous kernel version (configured as <literal>latest-2</literal>).
   </para>
  </sect2>

  <sect2 xml:id="sec.update.sle12.multiversion.specificversion">
   <title>Use Case: Keep a Specific Kernel Version</title>
   <para>
    You make regular system updates and install new kernel versions. However,
    you are also compiling your own kernel version for various reasons and want
    to make sure that the system will keep it.
   </para>
   <para>
    Change the following line in <filename>/etc/zypp/zypp.conf</filename>:
   </para>
<screen>multiversion.kernels = latest,3.12.28-4.20,running</screen>
   <para>
    When you reboot your system after the installation of a new kernel, the
    system will keep two kernels: the new and running kernel (configured as
    <literal>latest,running</literal>) and your self-compiled kernel
    (configured as <literal>3.12.28-4.20</literal>).
   </para>
  </sect2>
 </sect1>
</chapter>
