<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 version="5.0" xml:id="sec-aarch64-deprpi"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>&rpi;</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  &slsreg; is the first enterprise Linux distribution to support the inexpensive
  &rpireg; single-board computer. &productname; &productnumber; supports the
  following models:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    &rpi3; Model&nbsp;A+
   </para>
  </listitem>
  <listitem>
   <para>
    &rpi3; Model&nbsp;B
   </para>
  </listitem>
  <listitem>
   <para>
    &rpi3; Model&nbsp;B+
   </para>
  </listitem>
  <listitem>
   <para>
    &rpi4; Model&nbsp;B
   </para>
  </listitem>
  <listitem>
   <para>
    &rpi; Compute Module&nbsp;3
   </para>
  </listitem>
  <listitem>
   <para>
    &rpi; Compute Module&nbsp;3+
   </para>
  </listitem>
 </itemizedlist>

 <para>
  The &rpi; differs from more conventional server machines in several ways.
  First and foremost, it does not come with a boot loader capable of loading
  operating systems. &productname; therefore ships additional boot loader
  software to fill that gap.
 </para>

 <sect2 xml:id="sec-aarch64-deprpi-boot">
  <title>Boot Process</title>
  <para>
   The primary processor on the &rpi;'s System-on-Chip (SoC) is the &vc;
   Graphics Processing Unit (GPU), not the &arm; Central Processing Unit (CPU).
   It is the GPU which starts initializing the hardware from a first-stage
   boot loader in the on-chip Boot Read-Only Memory (Boot ROM). Only a few
   configuration options can influence the Boot ROM; see
   <xref linkend="sec-aarch64-deprpi-otp"/>.
  </para>
  <para>
   The &rpi;&nbsp;3 hardware does not have any built-in firmware. Instead,
   its second-stage boot loader firmware <literal>bootcode.bin</literal> is
   loaded from the boot medium every time the machine is powered on. It in turn
   loads the third-stage boot loader <literal>start.elf</literal>.
  </para>
  <para>
   The &rpi;&nbsp;4 hardware has a small Electrically Erasable Programmable
   Read-Only Memory (EEPROM) for the second-stage boot loader. Apart from that,
   its boot sequence is similar to that of the &rpi;&nbsp;3, loading the
   third-stage boot loader <literal>start4.elf</literal> from the boot medium.
  </para>
  <warning>
   <title>EEPROM Update on &rpi;&nbsp;4</title>
   <para>
    An update of the second-stage boot loader can be performed by booting
    from a specially prepared &microsd; card.
   </para>
   <para>
    Only insert boot media that you trust, and verify that no file called
    <literal>recovery.bin</literal> is unintentionally present.
   </para>
  </warning>
  <para>
   If an <literal>armstub8.bin</literal> file is present, it will be loaded as
   a fourth-stage boot loader at &aarch64; Exception Level 3 (EL3). Otherwise,
   a minimal integrated stub will be used.
  </para>
  <note>
   <title>EL3 Security Considerations</title>
   <para>
    Code loaded for EL3 (often called BL31) will reside in memory,
    and Linux may attempt hypercalls into EL3 throughout its runtime.
   </para>
   <para>
    Verify that your boot media have no <literal>armstub8.bin</literal> file
    unintentionally present. &productname; &productnumber; does not include it.
   </para>
   <para>
    Beware that the &rpi;'s SoC does not provide TrustZone secure memory.
    Both the OS on the CPU and any software on the GPU may access
    its RAM. It is therefore unsuited for cryptographic EL0-s applications.
    &productname; does not provide an EL1-s Trusted Execution Environment (TEE)
    for that reason.
   </para>
  </note>
  <para>
   &productname; for the &rpi; is configured to load a fifth-stage
   boot loader called <literal>Das U-Boot</literal>.
  </para>

  <sect3 xml:id="sec-aarch64-deprpi-configtxt">
   <title>Config.txt</title>
   <para>
    There is no non-volatile memory to hold configuration information.
    This means there are no conventional settings to adjust for boot device
    order, time and date, and so on.
   </para>
   <para>
    Instead, the boot loader reads a configuration file <literal>config.txt</literal>
    from the boot medium. The <literal>config.txt</literal> provided by &suse;
    should not be modified. It allows the user to optionally provide an
    <literal>extraconfig.txt</literal> file, which can override any setting
    from <literal>config.txt</literal> if needed. This permits &productname;
    to update the <literal>config.txt</literal> file when needed, without
    overwriting any user settings.
   </para>
  </sect3>

  <sect3 xml:id="sec-aarch64-deprpi-otp">
   <title>OTP Memory</title>
   <para>
    The SoC also has a very small amount of One-Time Programmable Memory
    (OTP memory). This can be used to configure some settings, such as whether
    the Boot ROM should attempt to boot from USB devices or over Ethernet.
   </para>
   <para>
    This OTP memory is described on the &rpi; Foundation Web site: <link
     xlink:href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/otpbits.md"/>
   </para>
   <warning>
    <title>One-Time Programmable Only</title>
    <para>
     Configuration settings written into OTP memory cannot be reversed.
    </para>
   </warning>
   <para>
    The most common use case for OTP memory will be enabling USB boot
    on &rpi3; Model&nbsp;B or Compute Module&nbsp;3.
   </para>

   <sect4>
    <title>Enabling USB Boot Mode for &rpi3; Model&nbsp;B</title>
    <para>
     To permanently allow booting from connected USB mass storage devices
     on &rpi3; Model&nbsp;B, and from its on-board USB Ethernet,
     prepare a &microsd; card as described in <xref linkend="sec-aarch64-deprpi-img"/>.
     Before unmounting or ejecting the card and booting from it,
     add to its FAT partition a text file <literal>extraconfig.txt</literal>
     (<xref linkend="sec-aarch64-deprpi-configtxt"/>) with the following setting:
    </para>
    <screen>program_usb_boot_mode=1</screen>
    <para>
     Then continue to boot from the modified &microsd; card as usual.
     Once you see output from the U-Boot or GRUB boot loaders or the Linux
     kernel, you can remove power and then the &microsd; card. Your device
     should now be able to boot from USB (<xref linkend="sec-aarch64-deprpi-usb"/>).
    </para>
    <para>
     Note that once USB boot mode has been enabled for &rpi3; Model&nbsp;B,
     USB boot mode cannot be disabled again (<xref linkend="sec-aarch64-deprpi-otp"/>).
    </para>
    <para>
     For more details, refer to the &rpi; Foundation Web site:
     <link xlink:href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md"/>
    </para>
    <para>
     For the &rpi; Compute Module&nbsp;3, the setting required is the same,
     but the deployment of the modified image is a little more complicated.
    </para>
   </sect4>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-aarch64-deprpi-rtc">
  <title>Lack of a Real-Time Clock</title>
  <para>
   There is no battery-backed Real-Time Clock (RTC) on the &rpi; itself.
  </para>
  <note>
   <title>Time Synchronization</title>
   <para>
    The lack of a Real-Time Clock means that &rpi; devices need to
    be configured to fetch the time from a network server by &ntp;.
   </para>
  </note>
  <para>
   However, base boards for the &rpi; Compute Modules may feature an RTC.
  </para>
  <para>
   It is also possible to connect an RTC via the GPIO connector,
   using Hardware Attached on Top (HATs) or other expansion boards.
  </para>
  <para>
   Either way, check whether the respective RTC chipset
   is supported by &productname;.
   The connected RTC will need to be described to the operating system
   via a Device Tree Overlay (<xref linkend="sec-aarch64-deprpi-configtxt"/>).
   For example, the MyPi base board might use:
  </para>
  <screen>dtparam=i2c1=on
dtoverlay=i2c-rtc,ds1307</screen>
 </sect2>

 <sect2 xml:id="sec-aarch64-deprpi-img">
  <title>Deploying an Appliance Image</title>
  <para>
   The most common method to deploy an operating system onto &rpi; hardware is
   to copy a pre-installed system image onto a boot medium, usually a
   &microsd; card. This is the simplest and easiest method.
  </para>
  <para>
   &suse; provides a preconfigured bootable image of &productname; for &rpi;
   hardware. This comes with the Btrfs file system, with compression enabled
   to improve performance and reduce wear on &microsd; media.
  </para>
  <para>
   A &microsd; card with a minimum size of 8&nbsp;GB is recommended. Faster cards will
   give better system performance. On the first boot, the operating system
   automatically expands the file system to fill the card. This means that the
   first boot will be substantially slower than subsequent boots.
  </para>
  <para>
   The process of writing the card image onto &microsd; media is described in the
   <link xlink:href="https://documentation.suse.com/sles/15-SP2/html/SLES-rpi-quick/art-rpiquick.html">&rpiquick;</link>.
  </para>
 </sect2>

 <sect2 xml:id="sec-aarch64-deprpi-usb">
  <title>Installation from USB Media</title>
  <para>
   Some models of &rpi; allow booting from USB mass storage devices.
   This will then allow deploying &productname; on &rpi; similar to server platforms.
  </para>
  <para>
   Installation can be performed from a removable USB medium, such as a memory stick,
   onto a &microsd; card in the machine's internal slot. Alternatively, it can be performed
   from a removable USB medium onto another USB medium, such as a USB-connected hard disk.
  </para>
  <note>
   <title>USB Bandwidth Limitations</title>
   <para>
    Note that the Ethernet controller on the &rpi3; is connected to the device's
    on-board USB 2.0 bus.
   </para>
   <para>
    Therefore an operating system running from a disk attached via USB
    must share the total 480&nbsp;Mbps bandwidth of the USB 2.0 controller.
    This will limit performance, and could significantly impact network performance.
   </para>
   <para>
    This limitation does not apply to the &rpi4;.
   </para>
  </note>
  <para>
   Newer models of &rpi3; with BCM2837 B0 silicon (silver instead of black chip),
   including &rpi3; Model&nbsp;B+ and Compute Module&nbsp;3+, allow booting from USB-connected
   storage devices by default.
  </para>
  <para>
   On older models, such as &rpi3; Model&nbsp;B or Compute Module&nbsp;3, USB boot can
   be enabled by booting from a specially prepared &microsd; card once.
   See <xref linkend="sec-aarch64-deprpi-otp"/> for instructions.
  </para>
 </sect2>

 <sect2 xml:id="sec-aarch64-deprpi-net">
  <title>Installation from Network</title>
  <para>
   Because of the hardware's lack of on-board firmware (<xref linkend="sec-aarch64-deprpi-boot"/>),
   network-booting the &rpi; using PXE is more complex than with more conventional computers.
  </para>
  <para>
   The process of setting up a PXE boot server for &x86; and &arm; is described
   in the &suse; Best Practices document
   <link xlink:href="https://documentation.suse.com/sbp/all/html/SBP-Multi-PXE-Install/index.html"><citetitle>How
   to Set Up a Multi-PXE Installation Server</citetitle></link>.
  </para>
  <para>
   The &rpi; Foundation publishes information on how to boot using PXE one &rpi; from
   another &rpi;:
   <link xlink:href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/net_tutorial.md"/>
  </para>
 </sect2>

 <sect2>
  <title>For More Information</title>
  <para>
   For more information, consult the following resources:
  </para>
  <variablelist>
   <varlistentry>
    <term>
     &sls; 15 SP2 Release Notes
    </term>
    <listitem>
     <para>
      For more information about hardware compatibility, supported options and
      functionality when running on &rpi; hardware, consult the
      <citetitle>Boot and Driver Enablement for Raspberry Pi</citetitle>
      section of the &sls; Release Notes:
     </para>
     <para>
      <link xlink:href="https://www.suse.com/releasenotes/aarch64/SUSE-SLES/15-SP2/#aarch64-rpi"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     &rpiquick;
    </term>
    <listitem>
     <para>
      <link xlink:href="https://documentation.suse.com/sles/15-SP2/html/SLES-rpi-quick/art-rpiquick.html"/>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     &opensuse; Hardware Compatibility List: &rpi3;
    </term>
    <listitem>
     <para>
      The &opensuse; project also has information about installing and configuring
      &rpi; hardware. Much of this also applies to &sle;.
     </para>
     <para>
      See <link xlink:href="https://en.opensuse.org/HCL:Raspberry_Pi3"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     Das U-Boot
    </term>
    <listitem>
     <para>
      More information about <literal>Das U-Boot</literal> boot loader can
      be found on the project's GitHub page at
      <link xlink:href="https://github.com/u-boot/u-boot"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

</sect1>
