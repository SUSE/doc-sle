<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- cwickert 2016-06-08: This chapter must not be removed without
 talking to the PMs listed in https://fate.suse.com/318262 first. -->
<chapter version="5.0" xml:id="cha.update.backporting"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Backporting Source Code</title>
  <info>
   <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
    <dm:translation>yes</dm:translation>
   </dm:docmanager>
   <abstract>
    <para>
     &suse; extensively uses backports, for example for the migration of
     current software fixes and features into released &sle; packages. The
     information in this chapter helps you understand why it can be deceptive
     to compare version numbers to judge the capabilities and the security of
     &sle; software packages. You will understand how &suse; keeps the system
     software secure and current while maintaining compatibility for your
     application software on top of &sle; products.  You will also learn how
     to check which public security issues actually are addressed in your
     &sle; system software, and how current your software really is.
        <!--To
       do so, we first provide some background on how free software is
       developed and how it gets into Linux distributions.-->
    </para>
   </abstract>
  </info>

  <sect1 xml:id="sec.update.backports.reasons-for">
   <title>Reasons for Backporting</title>
   <para>
    Upstream developers are primarily concerned with advancing the software
    they develop. Often they combine fixing bugs with introducing
    new features which have not yet received extensive testing and which may
    introduce new bugs.
   </para>
   <para>
    For distribution developers, it is important to distinguish between:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      bugfixes with a limited potential for disrupting functionality; and
     </para>
    </listitem>
    <listitem>
     <para>
      changes that may disrupt existing functionality.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Usually, distribution developers do not follow all upstream
    changes when a package has become part of a released distribution.
    Usually they stick instead with the upstream version that they initially
    released and create patches based on upstream changes to fix bugs. This
    practice is known as <emphasis>backporting</emphasis>.
   </para>
   <para>
    Distribution developers generally will only introduce a newer version of
    software in two cases:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      when the changes between their packages and the upstream versions have
      become so large that backporting is no longer feasible, or
     </para>
    </listitem>
    <listitem>
     <para>
      for software that inherently ages badly, like anti-malware software.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    &suse; uses backports extensively as we strike a good balance between
    several concerns for enterprise software. The most important of
    them are:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Having stable interfaces (APIs) that software vendors can rely on when
      building products for use on &suse;'s enterprise products.
     </para>
    </listitem>
    <listitem>
     <para>
      Ensuring that packages used in the release of &suse;'s enterprise
      products are of the highest quality and have been thoroughly tested,
      both in themselves and as part of the whole enterprise product.
     </para>
    </listitem>
    <listitem>
     <para>
      Maintaining the various certifications of &suse;'s enterprise
      products by other vendors, like certifications for Oracle or SAP
      products.
     </para>
    </listitem>
    <listitem>
     <para>
      Allowing &suse;'s developers to focus on making the next version of
      the product as good as they can make it, rather than them having to
      spread their focus thinly across a wide range of releases.
     </para>
    </listitem>
    <listitem>
     <para>
      Keeping a clear view of what is in a particular enterprise release, so
      that our support can provide accurate and timely information about it.
     </para>
    </listitem>
   </itemizedlist>
  </sect1>

  <sect1 xml:id="sec.update.backports.reasons-against">
   <title>Reasons against Backports</title>
   <para>
    It is a general policy rule that no new upstream versions of a package
    are introduced into our enterprise products. This rule is not an
    absolute rule however. For a limited class of packages, in particular
    anti-virus software, security concerns weigh heavier than the
    conservative approach that is preferable from the perspective of quality
    assurance. For packages in that class, occasionally newer versions are
    introduced into a released version of an enterprise product line.
   </para>
   <para>
    Sometimes also for other types of packages the choice is made to
    introduce a new version rather than a backport. This is done when
    producing a backport is not economically feasible or when there is a
    very relevant technical reason to introduce the newer version.
   </para>
  </sect1>

  <sect1 xml:id="sec.update.backports.implications">
   <title>The Implications of Backports for Interpreting Version Numbers</title>
   <para>
    Because of the practice of backporting, one cannot simply compare
    version numbers to determine whether a &suse; package contains a fix
    for a particular issue or has had a particular feature added to it. With
    backporting, the upstream part of a &suse; package's version number
    merely indicates what upstream version the &suse; package is based
    on. It may contain bug fixes and features that are not in the
    corresponding upstream release, but that have been backported into the
    &suse; package.
   </para>
   <para>
    <remark>froh: there will be some new "CVE fixed in &sle;"
    lookup tool, need to work with sarsene@ to figure the details or a
    link.</remark>
    One particular area where this limited value of version numbers when
    backporting is involved can cause problems is with security scanning
    tools. Some security vulnerability scanning tools (or particular tests
    in such tools) operate solely on version information. These tools/tests
    are thus prone to generating <quote>false positives</quote> (claims that
    a vulnerable piece of software has been found which in fact is not
    vulnerable) when backports are involved. When evaluating reports from
    security scanning tools, one should always investigate whether an entry
    is based on a version number or on an actual test of whether an actual
    vulnerability exists.
   </para>
  </sect1>

  <sect1 xml:id="sec.update.backports.checks">
   <title>How to Check Which Bugs are Fixed and Which Features are Backported and Available</title>
   <para>
    There are several locations where information regarding backported
    bug fixes and features are stored:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The package's changelog:
     </para>
<screen>rpm -q --changelog name-of-installed-package
rpm -qp --changelog packagefile.rpm</screen>
     <para>
      The output briefly documents the change history of the package.
     </para>
    </listitem>
    <listitem>
     <para>
      The package changelog may contain entries like
      <literal>bsc#1234</literal> (<quote><emphasis>B</emphasis>ugzilla <emphasis>S</emphasis>use.<emphasis>C</emphasis>om</quote>) that
       refer to bugs in &suse;'s Bugzilla tracking system or links to other
       bugtracking systems.
      Because of confidentiality policies, not all such information may be
      accessible to you.
     </para>
    </listitem>
    <listitem>
     <para>
      A package may contain a
      <filename>/usr/share/doc/<replaceable>packagename</replaceable>/README.SUSE</filename>
      file which contains general, high-level information specific to the
      &suse; package.
     </para>
    </listitem>
    <listitem>
     <para>
      The RPM source package contains the patches that were applied during
      the building of the regular binary RPMs as separate files that can be
      interpreted if you are familiar with reading source code. See
      <xref linkend="sec.zypper.softman.sources"/> for installing sources of
      &sle; software, see <xref linkend="sec.rpm.sources"/> for building
      packages on &sle; and see the
      <link xlink:href="http://www.rpm.org/max-rpm/">Maximum RPM</link> book
      for the inner workings of &sle; software package builds.
     </para>
    </listitem>
    <listitem>
     <para>
      For security bug fixes, consult the
      <link xlink:href="http://www.suse.com/support/security/#1">&suse;
      security announcements</link>. These often refer to bugs through
      standardized names like <literal>CAN-2005-2495</literal> which are
      maintained by the <link xlink:href="http://cve.mitre.org">Common
      Vulnerabilities and Exposures (CVE)</link> project.
     </para>
    </listitem>
   </itemizedlist>
  </sect1>

</chapter>
