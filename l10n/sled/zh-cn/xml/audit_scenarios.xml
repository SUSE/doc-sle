<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="audit_scenarios.xml" version="5.0" xml:id="cha-audit-scenarios">
 <title>审计规则集简介</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
	<dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
  下面的示例配置说明如何使用审计来监视系统。其中重点指出了要涵盖受控访问保护配置文件 (CAPP) 指定的可审计事件列表而需审计的最重要的事项。
 </para>
 <para>
  示例规则集分为以下几个部分：
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    基本审计配置（参见<xref linkend="sec-audit-scenbasic"/>）
   </para>
  </listitem>
  <listitem>
   <para>
    审计日志文件和配置文件监测项（参见<xref linkend="sec-audit-scenauconf"/>）
   </para>
  </listitem>
  <listitem>
   <para>
    监视对文件系统对象的操作（参见<xref linkend="sec-audit-scenfs"/>）
   </para>
  </listitem>
  <listitem>
   <para>
    监视安全数据库（参见<xref linkend="sec-audit-scensecurity"/>）
   </para>
  </listitem>
  <listitem>
   <para>
    监视其他系统调用（<xref linkend="sec-audit-scenmisc"/>）
   </para>
  </listitem>
  <listitem>
   <para>
    过滤系统调用参数（参见<xref linkend="sec-audit-scenipc"/>）
   </para>
  </listitem>
 </itemizedlist>
 <para>
  要将此示例转换为配置文件以在您的在线环境中使用，请执行以下操作：
 </para>
 <procedure>
  <step>
   <para>
    根据您的环境选择相应的设置并进行调整。
   </para>
  </step>
  <step>
   <para>
    通过添加以下示例中的规则或修改现有规则来调整文件 <filename>/etc/audit/audit.rules</filename>。
   </para>
  </step>
 </procedure>
 <note>
  <title>调整审计日志记录级别</title>
  <para>
   如未根据您的需要调整，请勿将下面的示例复制到您的审计环境中。确定审计内容和审计范围。
  </para>
 </note>
 <para>
  整个 <filename>audit.rules</filename> 是 <command>auditctl</command> 命令的集合。此文件中的每一行都将扩展为完整的 <command>auditctl</command> 命令行。规则集中使用的语法与 <command>auditctl</command> 命令的语法相同。
 </para>
 <sect1 xml:id="sec-audit-scenbasic">
  <title>添加基本审计配置参数</title>

<screen>-D<co xml:id="co-auctld"/>
-b 8192<co xml:id="co-auctlb"/>
-f 2<co xml:id="co-auctlf"/></screen>

  <calloutlist>
   <callout arearefs="co-auctld">
    <para>
     在开始定义新规则之前，请删除所有以前存在的规则。
    </para>
   </callout>
   <callout arearefs="co-auctlb">
    <para>
     设置用于容纳审计消息的缓冲区数目。根据系统上的审计日志记录级别增大或减小此数字。
    </para>
   </callout>
   <callout arearefs="co-auctlf">
    <para>
     设置当内核需要处理严重错误时要使用的故障标志。可能的值为 <literal>0</literal>（静默）、<literal>1</literal>（printk，列显故障消息）和 <literal>2</literal>（恐慌，暂停系统）。
    </para>
   </callout>
  </calloutlist>

  <para>
   使用 <option>-D</option> 选项清空规则队列可以确保审计只使用您通过此文件向其提供的规则集，而不使用任何其他规则集。要避免系统由于审计负载过高而发生故障，选择适当的缓冲区数目 (<option>-b</option>) 至关重要。选择恐慌故障标志 <option>-f
   2</option> 可确保即使系统遇到严重错误也能保持审计记录的完整。审计会在出现严重错误时关闭系统，确保不会有任何进程脱离审计的控制，而如果选择级别 1 (<option>printk</option>)，则可能会发生脱离控制的情况。
  </para>

  <important>
   <title>选择故障标志</title>
   <para>
    在在线系统上使用审计规则集之前，请确保在测试系统上使用<emphasis>最差状况的生产工作负载</emphasis>全面评估设置。如果指定了 <option>-f 2</option> 标志，那么这种做法将更加重要，因为这会指示内核在超过任何阈值时进入恐慌状态（不将等待中数据刷写到磁盘即执行立即暂停）。请仅对最注重安全的环境考虑使用 <option>-f 2</option> 标志。
   </para>
  </important>
 </sect1>
 <sect1 xml:id="sec-audit-scenauconf">
  <title>添加审计日志文件和配置文件监测项</title>

  <para>
   添加审计配置文件和日志文件本身的监测项可确保您能够跟踪任何尝试篡改配置文件的操作，或检测任何尝试访问日志文件的操作。
  </para>

  <note>
   <title>创建目录和文件监测项</title>
   <para>
    如果您需要有关文件访问的事件，创建目录监测项不一定足够实现此目的。仅当保存元数据更改以更新目录的 inode 时，才会触发有关目录访问的事件。要触发有关文件访问的事件，请添加要监视的每个文件的监测项。
   </para>
  </note>

<screen>-w /var/log/audit/ <co xml:id="co-auctllog"/>
-w /var/log/audit/audit.log

-w /var/log/audit/audit_log.1
-w /var/log/audit/audit_log.2
-w /var/log/audit/audit_log.3
-w /var/log/audit/audit_log.4

-w /etc/audit/auditd.conf -p wa<co xml:id="co-auctlconf"/>
-w /etc/audit/audit.rules -p wa
-w /etc/libaudit.conf -p wa</screen>

  <calloutlist>
   <callout arearefs="co-auctllog">
    <para>
     设置审计日志所在目录的监测项。对任何类型访问此目录的尝试均触发事件。如果您在使用日志轮换，请另外也添加所轮换日志的监测项。
    </para>
   </callout>
   <callout arearefs="co-auctlconf">
    <para>
     设置审计配置文件的监测项。记录对此文件的所有写入和属性更改尝试。
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenfs">
  <title>监视文件系统对象</title>

  <para>
   审计系统调用有助于您跟踪高于应用程序级别的系统活动。通过跟踪文件系统相关的系统调用，可大致了解应用程序是如何使用这些系统调用的，并确定这种用法是否适当。通过跟踪挂载和卸载操作来跟踪外部资源（可移动媒体、远程文件系统等）的使用情况。
  </para>

  <important>
   <title>审计系统调用</title>
   <para>
    审计系统调用会产生高负载日志记录活动，而此活动又会给内核带来繁重的负载。如果内核的响应能力低于正常水平，可能会超出系统的积压和速率上限。请仔细评估要在审计规则集中包含哪些系统调用，并相应地调整日志设置。有关如何优化相关设置的细节，请参见<xref linkend="sec-audit-auditd"/>。
   </para>
  </important>

<screen>-a entry,always -S chmod -S fchmod -S chown -S chown32 -S fchown -S fchown32 -S lchown -S lchown32<co xml:id="co-auctlfso"/>

-a entry,always -S creat -S open -S truncate -S truncate64 -S ftruncate -S ftruncate64<co xml:id="co-auctlmod"/>

-a entry,always -S mkdir -S rmdir<co xml:id="co-auctlfsdir"/>

-a entry,always -S unlink -S rename -S link -S symlink<co xml:id="co-auctlfsmov"/>

-a entry,always -S setxattr<co xml:id="co-auctlfsea"/>
-a entry,always -S lsetxattr
-a entry,always -S fsetxattr
-a entry,always -S removexattr
-a entry,always -S lremovexattr
-a entry,always -S fremovexattr

-a entry,always -S mknod<co xml:id="co-auctlfssf"/>

-a entry,always -S mount -S umount -S umount2<co xml:id="co-auctlfsfso"/></screen>

  <calloutlist>
   <callout arearefs="co-auctlfso">
    <para>
     对更改文件所有权和权限相关的系统调用启用审计环境。根据系统的硬件体系结构启用或禁用 <literal>*32</literal> 规则。AMD64/Intel 64 等 64 位系统要求去除 <literal>*32</literal> 规则。
    </para>
   </callout>
   <callout arearefs="co-auctlmod">
    <para>
     对文件内容修改相关的系统调用启用审计环境。根据系统的硬件体系结构启用或禁用 *64 规则。AMD64/Intel 64 等 64 位系统要求去除 *64 规则。
    </para>
   </callout>
   <callout arearefs="co-auctlfsdir">
    <para>
     对任何目录操作（例如创建或去除目录）启用审计环境。
    </para>
   </callout>
   <callout arearefs="co-auctlfsmov">
    <para>
     对任何链接操作（例如创建符号链接、创建链接、取消链接或重命名）启用审计环境。
    </para>
   </callout>
   <callout arearefs="co-auctlfsea">
    <para>
     对扩展文件系统属性相关的任何操作启用审计环境。
    </para>
   </callout>
   <callout arearefs="co-auctlfssf">
    <para>
     对用于创建特殊（设备）文件的 <command>mknod</command> 系统调用启用审计环境。
    </para>
   </callout>
   <callout arearefs="co-auctlfsfso">
    <para>
     对任何挂载或卸载操作启用审计环境。对于 x86 体系结构，请禁用 <literal>umount</literal> 规则。对于 Intel 64 体系结构，请禁用 <literal>umount2</literal> 规则。
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scensecurity">
  <title>监视安全配置文件和数据库</title>

  <para>
   为确保您的系统不会出现意外的行为，请跟踪任何尝试更改 <systemitem>cron</systemitem> 和 <systemitem>at</systemitem> 配置或已安排作业列表的操作。跟踪任何对用户、组、口令和登录数据库的写入访问有助于识别操控系统用户数据库的尝试。
  </para>

  <para>
   跟踪您系统配置的更改（内核、服务、时间等）有助于您发现他人尝试操纵您系统的基础功能的任何行为。还应监视对安全环境中的 PAM 配置的更改，因为身份验证堆栈中的更改只能由管理员做出，并且应该记录哪些应用程序正在使用 PAM 及其使用方式。上面所述同样适用于与安全身份验证和通讯相关的任何其他配置文件。
  </para>

<screen><co xml:id="co-audit-at"/>
-w /var/spool/atspool
-w /etc/at.allow
-w /etc/at.deny

-w /etc/cron.allow -p wa
-w /etc/cron.deny -p wa
-w /etc/cron.d/ -p wa
-w /etc/cron.daily/ -p wa
-w /etc/cron.hourly/ -p wa
-w /etc/cron.monthly/ -p wa
-w /etc/cron.weekly/ -p wa
-w /etc/crontab -p wa
-w /var/spool/cron/root

<co xml:id="co-audit-security"/>
-w /etc/group -p wa
-w /etc/passwd -p wa
-w /etc/shadow

-w /etc/login.defs -p wa
-w /etc/securetty
-w /var/log/lastlog

<co xml:id="co-audit-nw"/>
-w /etc/hosts -p wa
-w /etc/sysconfig/
w /etc/init.d/
w /etc/ld.so.conf -p wa
w /etc/localtime -p wa
w /etc/sysctl.conf -p wa
w /etc/modprobe.d/
w /etc/modprobe.conf.local -p wa
w /etc/modprobe.conf -p wa
<co xml:id="co-audit-pam"/>
w /etc/pam.d/
<co xml:id="co-audit-pfix"/>
-w /etc/aliases -p wa
-w /etc/postfix/ -p wa

<co xml:id="co-audit-ssh"/>
-w /etc/ssh/sshd_config

-w /etc/stunnel/stunnel.conf
-w /etc/stunnel/stunnel.pem

-w /etc/vsftpd.ftpusers
-w /etc/vsftpd.conf

<co xml:id="co-audit-misc"/>
-a exit,always -S sethostname
-w /etc/issue -p wa
-w /etc/issue.net -p wa</screen>

  <calloutlist>
   <callout arearefs="co-audit-at">
    <para>
     设置 <systemitem>at</systemitem> 和 <systemitem>cron</systemitem> 配置及已安排作业的监测项，并向这些事件指派标签。
    </para>
    <remark>jsegitz 2014-07-23: no labels get assigned</remark>
   </callout>
   <callout arearefs="co-audit-security">
    <para>
     设置用户、组、口令、登录数据库和日志的监测项，并设置标签以更好地识别任何登录相关的事件，例如失败的登录尝试。
    </para>
   </callout>
   <callout arearefs="co-audit-nw">
    <para>
     对 <filename>/etc/hosts</filename> 中的静态主机名配置设置监测项和标签。跟踪对系统配置目录 <filename>/etc/sysconfig</filename> 的更改。如果您要跟踪文件事件，请启用每个文件的监测项。对 <filename>/etc/init.d</filename> 目录中的引导配置发生的更改设置监测项和标签。如果您要跟踪文件事件，请启用每个文件的监测项。对 <filename>/etc/ld.so.conf</filename> 中的链接器配置发生的任何更改设置监测项和标签。对 <filename>/etc/localtime</filename> 设置监测项和标签。对内核配置文件 <filename>/etc/sysctl.conf</filename>、<filename>/etc/modprobe.d/</filename>、<filename>/etc/modprobe.conf.local</filename> 和 <filename>/etc/modprobe.conf</filename> 设置监测项和标签。
    </para>
   </callout>
   <callout arearefs="co-audit-pam">
    <para>
     设置 PAM 配置目录的监测项。如果您要跟踪目录级别下的特定文件，还需添加这些文件的显式监测项。
    </para>
   </callout>
   <callout arearefs="co-audit-pfix">
    <para>
     设置 postfix 配置的监测项，以在日志中记录任何写入尝试或属性更改，并使用标签来更好地进行跟踪。
    </para>
   </callout>
   <callout arearefs="co-audit-ssh">
    <para>
     对 SSH、<command>stunnel</command> 和 <command>vsftpd</command> 配置文件设置监测项和标签。
    </para>
   </callout>
   <callout arearefs="co-audit-misc">
    <para>
     执行对 <systemitem>sethostname</systemitem> 系统调用的审计，并对 <filename>/etc/issue</filename> 与 <filename>/etc/issue.net</filename> 中的系统标识配置设置监测项和标签。
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenmisc">
  <title>监视其他系统调用</title>

  <para>
   除了根据<xref linkend="sec-audit-scenfs"/>中所述审计文件系统相关的系统调用以外，您还可以跟踪其他各种系统调用。跟踪任务创建有助于了解应用程序的行为。审计 <systemitem>umask</systemitem> 系统调用可以跟踪进程是如何修改创建掩码的。跟踪任何尝试更改系统时间的操作有助于识别尝试操控系统时间的任何人或进程。
  </para>

<screen><co xml:id="co-audit-attrib"/>
-a entry,always -S clone -S fork -S vfork

<co xml:id="co-audit-umask"/>
-a entry,always -S umask

<co xml:id="co-audit-time"/>
-a entry,always -S adjtimex -S settimeofday</screen>

  <calloutlist>
   <callout arearefs="co-audit-attrib">
    <para>
     跟踪任务创建。
    </para>
   </callout>
   <callout arearefs="co-audit-umask">
    <para>
     添加 umask 系统调用的审计环境。
    </para>
   </callout>
   <callout arearefs="co-audit-time">
    <para>
     跟踪尝试更改系统时间的操作。可以使用 <literal>adjtimex</literal> 来调整时间。<literal>settimeofday</literal> 设置绝对时间。
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenipc">
  <title>过滤系统调用参数</title>

  <para>
  除了<xref linkend="sec-audit-scenfs"/>和<xref linkend="sec-audit-scenmisc"/>中介绍的系统调用审计以外，您还可以更深入地跟踪应用程序行为。应用过滤器有助于将审计重点放在您主要关注的方面。本节介绍如何过滤非多路转换系统调用（例如 access）和多路转换系统调用（例如 socketcall 或 ipc）的系统调用参数。系统调用是否会进行多路转换取决于所用的硬件体系结构。socketcall 和 ipc 在 AMD64/Intel 64 等 64 位体系结构上均不会进行多路转。
  </para>

  <important>
   <title>审计系统调用</title>
   <para>
    审计系统调用会产生高负载的日志记录活动，而后者又会给内核带来繁重的负载。如果内核的响应能力低于正常水平，可能会远远超出系统的积压和速率上限。请仔细评估要在审计规则集中包含哪些系统调用，并相应地调整日志设置。有关如何优化相关设置的细节，请参见<xref linkend="sec-audit-auditd"/>。
   </para>
  </important>

  <para>
   access 系统调用会检查是否允许某个进程读取、写入文件或文件系统对象或者测试该对象是否存在。使用 <option>-F</option> 过滤器标志，以 <option>-F
   a1=<replaceable>ACCESS_MODE</replaceable></option> 格式构建与特定访问调用匹配的规则。在 <filename>/usr/include/fcntl.h</filename> 中检查 access 系统调用的可能参数列表。
  </para>

<screen>-a entry,always -S access -F a1=4<co xml:id="co-audit-accessr"/>
-a entry,always -S access -F a1=6<co xml:id="co-audit-accessrw"/>
-a entry,always -S access -F a1=7<co xml:id="co-audit-accessrwx"/></screen>

  <calloutlist>
   <callout arearefs="co-audit-accessr">
    <para>
     审计 access 系统调用，但仅当该系统调用的第二个参数 (<literal>mode</literal>) 为 <literal>4</literal> (<literal>R_OK</literal>) 时进行审计。此规则过滤所有用于测试对用户或进程所访问的文件或文件系统是否拥有足够读取权限的 access 调用。
    </para>
   </callout>
   <callout arearefs="co-audit-accessrw">
    <para>
     审计 access 系统调用，但仅当该系统调用的第二个参数 (<literal>mode</literal>) 为 <literal>6</literal>（即 <literal>4 OR 2</literal>，将转换为 <literal>R_OK OR
     W_OK</literal>）时进行审计。此规则过滤用于测试是否拥有足够读取和写入权限的 access 调用。
    </para>
   </callout>
   <callout arearefs="co-audit-accessrwx">
    <para>
     审计 access 系统调用，但仅当该系统调用的第二个参数 (<literal>mode</literal>) 为 <literal>7</literal>（即 <literal>4 OR 2 OR 1</literal>，将转换为 <literal>R_OK OR
     W_OK OR X_OK</literal>）时进行审计。此规则过滤用于测试是否拥有足够读取、写入和执行权限的 access 调用。
    </para>
   </callout>
  </calloutlist>

  <para>
   socketcall 系统调用是多路转换系统调用。多路转换是指在所有可能的调用中只存在一个系统调用，并且 libc 会传递实际的系统调用作为第一个参数 (<literal>a0</literal>)。有关可能的系统调用，请查看 socketcall 的手册页；有关可能的参数值和系统调用名称的列表，请参见 <filename>/usr/src/linux/include/linux/net.h</filename>。审计支持使用 <option>-F
   a0=<replaceable>SYSCALL_NUMBER</replaceable></option> 过滤特定的系统调用。
  </para>

<screen>-a entry,always -S socketcall -F a0=1 -F a1=10<co xml:id="co-audit-socket1"/>
## Use this line on x86_64, ia64 instead
#-a entry,always -S socket -F a0=10

-a entry,always -S socketcall -F a0=5<co xml:id="co-audit-socket2"/>
## Use this line on x86_64, ia64 instead
#-a entry, always -S accept</screen>

  <calloutlist>
   <callout arearefs="co-audit-socket1">
    <para>
     审计 socket(PF_INET6) 系统调用。<option>-F a0=1</option> 过滤器会匹配所有 socket 系统调用，<option>-F
     a1=10</option> 过滤器可将匹配范围缩小为传递 IPv6 协议系列域参数 (PF_INET6) 的 socket 系统调用。检查第一个参数 (<literal>a0</literal>) 的 <filename>/usr/include/linux/net.h</filename> 和第二个参数 (<literal>a1</literal>) 的 <filename>/usr/src/linux/include/linux/socket.h</filename>。AMD64/Intel 64 等 64 位平台不会对 socketcall 系统调用使用多路转换。对于这些平台，请将规则注释掉，并添加对 PF_INET6 进行过滤的普通系统调用规则。
    </para>
   </callout>
   <callout arearefs="co-audit-socket2">
    <para>
     审计 socketcall 系统调用。过滤标志设置为过滤 <option>a0=5</option>（socketcall 的第一个参数），如果您检查 <filename>/usr/include/linux/net.h</filename>，会发现此设置转换为 accept 系统调用。AMD64/Intel 64 等 64 位平台不会对 socketcall 系统调用使用多路转换。对于这些平台，请将规则注释掉，并添加不含参数过滤的普通系统调用规则。
    </para>
   </callout>
  </calloutlist>

  <para>
   ipc 系统调用是多路转换系统调用的另一个示例。要调用的实际调用由传递给 ipc 系统调用的第一个参数决定。过滤这些参数有助于您将重点放在要关注的 IPC 调用上。有关可能的参数值，请查看 <filename>/usr/include/linux/ipc.h</filename>。
  </para>

<screen><co xml:id="co-audit-mqueue"/>
## msgctl
-a entry,always -S ipc -F a0=14
## msgget
-a entry,always -S ipc -F a0=13
## Use these lines on x86_64, ia64 instead
#-a entry,always -S msgctl
#-a entry,always -S msgget

<co xml:id="co-audit-semaph"/>
## semctl
-a entry,always -S ipc -F a0=3
## semget
-a entry,always -S ipc -F a0=2
## semop
-a entry,always -S ipc -F a0=1
## semtimedop
-a entry,always -S ipc -F a0=4
## Use these lines on x86_64, ia64 instead
#-a entry,always -S semctl
#-a entry,always -S semget
#-a entry,always -S semop
#-a entry,always -S semtimedop

<co xml:id="co-audit-sharedmem"/>
## shmctl
-a entry,always -S ipc -F a0=24
## shmget
-a entry,always -S ipc -F a0=23
## Use these lines on x86_64, ia64 instead
#-a entry,always -S shmctl
#-a entry,always -S shmget</screen>

  <calloutlist>
   <callout arearefs="co-audit-mqueue">
    <para>
     审计与 IPC SYSV 消息队列相关的系统调用。在本例中，<literal>a0</literal> 值指定要针对 msgctl 和 msgget 系统调用（<literal>14</literal> 和 <literal>13</literal>）添加审计。AMD64/Intel 64 等 64 位平台不会对 ipc 系统调用使用多路转换。对于这些平台，请将前两条规则注释掉，并添加不含参数过滤的普通系统调用规则。
    </para>
   </callout>
   <callout arearefs="co-audit-semaph">
    <para>
     审计与 IPC SYSV 消息信号相关的系统调用。在本例中，<literal>a0</literal> 值指定要针对 semctl、semget、semop 和 semtimedop 系统调用（<literal>3</literal>、<literal>2</literal>、<literal>1</literal> 和 <literal>4</literal>）添加审计。AMD64/Intel 64 等 64 位平台不会对 ipc 系统调用使用多路转换。对于这些平台，请将前四条规则注释掉，并添加不含参数过滤的普通系统调用规则。
    </para>
   </callout>
   <callout arearefs="co-audit-sharedmem">
    <para>
     审计与 IPC SYSV 共享内存相关的系统调用。在本例中，<literal>a0</literal> 值指定要针对 shmctl 和 shmget 系统调用（<literal>24</literal> 和 <literal>23</literal>）添加审计。AMD64/Intel 64 等 64 位平台不会对 ipc 系统调用使用多路转换。对于这些平台，请将前两条规则注释掉，并添加不含参数过滤的普通系统调用规则。
    </para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenkeys">
  <title>使用键管理审计事件记录</title>

  <para>
   配置了一些会生成事件的规则并填充日志后，您需要找到一种方法来辨别不同的事件。使用 <command>ausearch</command> 命令可以根据不同的准则过滤日志。使用 <command>ausearch</command> <option>-m
   <replaceable>MESSAGE_TYPE</replaceable></option> 至少可以过滤特定类型的事件。但是，要过滤与特定规则相关的事件，需要在 <filename>/etc/audit/audit.rules</filename> 文件中将一个键添加到此规则。然后，每次该规则记录一个事件时，此键就会添加到相应事件记录。要检索这些日志项，只需运行 <command>ausearch</command> <option>-k
   <replaceable>YOUR_KEY</replaceable></option> 获取与该规则相关且带有此特定键的记录列表。
  </para>

  <para>
   例如，假设您已将下面的规则添加到规则文件：
  </para>

<screen>-w /etc/audit/audit.rules -p wa</screen>

  <para>
   如果未向该规则指派键，您需要过滤 <literal>SYSCALL</literal> 或 <literal>PATH</literal> 事件，然后使用 grep 或类似工具来隔离与上述规则相关的所有事件。现在，使用 <option>-k</option> 选项将一个键添加到上述规则：
  </para>

<screen>-w /etc/audit/audit.rules -p wa -k CFG_audit.rules</screen>

  <para>
   您可以指定任何文本字符串作为键。使用不同的键前缀（<literal>CFG</literal>、<literal>LOG</literal> 等）后接文件名来区分与不同文件类型（配置文件或日志文件）相关的各监测项。现在，可按如下所示查找与上述规则相关的所有记录：
  </para>

<screen><command>ausearch -k CFG_audit.rules</command>
----
time-&gt;Thu Feb 19 09:09:54 2009
type=PATH msg=audit(1235030994.032:8649): item=3 name="audit.rules~" inode=370603 dev=08:06 mode=0100640 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=2 name="audit.rules" inode=370603 dev=08:06 mode=0100640 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=1  name="/etc/audit" inode=368599 dev=08:06 mode=040750 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=0  name="/etc/audit" inode=368599 dev=08:06 mode=040750 ouid=0 ogid=0 rdev=00:00
type=CWD msg=audit(1235030994.032:8649):  cwd="/etc/audit"
type=SYSCALL msg=audit(1235030994.032:8649): arch=c000003e syscall=82 success=yes exit=0 a0=7deeb0 a1=883b30 a2=2 a3=ffffffffffffffff items=4 ppid=25400 pid=32619 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1164 comm="vim" exe="/bin/vim-normal" key="CFG_audit.rules"</screen>
 </sect1>
</chapter>
