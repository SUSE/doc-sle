<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml"
                 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="article-podman-guide" xml:lang="en">
 <title>Podman guide</title>
 <subtitle>&productname; &productnumber;</subtitle>
 <info>
  <productnumber>&productnumber;</productnumber><productname>&productname;</productname><date>
<?dbtimestamp format="B d, Y"?></date>
  <abstract>
   <para>
    This guide describes Podman and containers.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <section xml:id="sec-introduction-containers">
  <title>Introduction to containers</title>
  <para>
   Containers offer a lightweight virtualization method to run multiple virtual
   environments (containers) simultaneously on a single host. Unlike
   technologies like &xen; or &kvm;, where the processor simulates a complete
   hardware environment and a hypervisor controls virtual machines, containers
   provide virtualization at the operating system level, where the kernel
   controls the isolated containers.
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <title>Advantages of using containers</title>
   <listitem>
    <para>
     Containers make it possible to isolate applications in self-contained
     units.
    </para>
   </listitem>
   <listitem>
    <para>
     Containers provide near-native performance. Depending on the runtime, a
     container can use the host kernel directly, thus minimizing overhead.
    </para>
   </listitem>
   <listitem>
    <para>
     It is possible to control network interfaces and apply resources inside
     containers through kernel control groups.
    </para>
   </listitem>
  </itemizedlist>
  <itemizedlist mark="bullet" spacing="normal">
   <title>Limitations of containers</title>
   <listitem>
    <para>
     Containers run on the host system's kernel, so they cannot use different
     kernels or different kernel versions.
    </para>
   </listitem>
   <listitem>
    <para>
     Containers are not secure, and the overall security depends on the host
     system. Containerized applications can be secured through &aa; or &selnx;
     profiles. Securing containers is harder than securing virtual machines,
     due to the larger attack surface.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="sec-introduction-podman">
  <title>Podman overview</title>
  <para>
   Podman is a short name for Pod Manager Tool. It is a daemonless container
   engine that enables you to run and deploy applications using containers and
   containers images. Podman provides a command line interface to manage
   containers.
  </para>
  <para>
   As Podman does not have a daemon, it provides integration with systemd. This
   makes it possible to control containers via systemd units. You can create
   these units for existing containers as well as generate units that can start
   containers if they do not exist in the system. Moreover, Podman can run
   systemd inside containers.
  </para>
  <para>
   Podman enables you to organize your containers into pods. Pods share the
   same network interface and resources. Typical use case for organizing a
   group of containers into a pod can be a container that runs a database and a
   container with a client that accesses the database. For details about pods,
   refer to <xref linkend="pod-architecture"/>.
  </para>
  <section xml:id="pod-architecture">
   <title>Pod architecture</title>
   <para>
    A pod is a group of containers that share the same namespace, ports and
    network connection. Usually containers within one pod can communicate
    directly with each other. Each pod contains an infrastructure container,
    which purpose is to hold the name space and it enables Podman to add other
    containers to the pod. Port bindings, cgroup-parent values, and kernel
    namespaces are all assigned to the infrastructure container. Thus later
    changes of these values are not possible.
   </para>
   <para>
    Each container in a pod has its own instance of a monitoring program. The
    monitoring program watches the container's process and if the container
    dies, the monitoring program saves its exit code. The program also holds
    open the tty for the particular container. The monitoring program enables
    to run containers in the detached mode when Podman exits, but this program
    continues to run and enables to attach tty later.
   </para>
  </section>
 </section>
 <section xml:id="sec-podman-delivery">
  <title>Getting Podman</title>
  <para>
   In case of &slema;, Podman is delivered in all raw images or is by default
   installed if you installed your system manually. But to verify that Podman
   is installed in your system, run the following command:
  </para>
<screen>
 zypper se -i podman
 </screen>
  <para>
   In the Cockpit web interface you need to start Podman as a service by
   clicking <guimenu>Start podman</guimenu> to access the containers
   management.
  </para>
  <para>
   By default, Podman requires root privileges. To enable rootless mode for the
   current user, run the following command:
  </para>
<screen>
 &prompt.user;sudo usermod --add-subuids 200000-201000 --add-subgids 200000-201000 $USER
 </screen>
  <para>
   Reboot the machine to enable the change. The command above defines a range
   of local UIDs to which the UIDs allocated to users inside the container are
   mapped on the host. Note that the ranges defined for different users must
   not overlap. It is also important that the ranges do not reuse the UID of an
   existing local user or group. By default, adding a user with the
   <command>useradd</command> command automatically allocates subUID and subGID
   ranges.
  </para>
  <para>
   Running a container with Podman in rootless mode on &slema; may fail,
   because the container needs read access to the SUSE Customer Center
   credentials. Running containers as &rootuser; is recommended.
  </para>
 </section>
 <section xml:id="sec-getting-images">
  <title>Getting container images</title>
  <para>
   To run a container, you need an image. An image includes all the
   dependencies needed to run an application. You can obtain images from image
   registry. Available registries are defined in the
   <filename>/etc/containers/registries.conf</filename> configuration file. If
   you have your local image registry or want to use other registry, add the
   registries into the configuration file.
  </para>
  <important>
  <title>No tools for building images in &slema;</title>
  <para>
   &slema; does not provide tools for building custom container images. Thus
   all images need to be pulled from an image registry.
  </para>
  </important>
  
  <para>
  The <command>podman pull</command> is used to pull an image from an image registry. The syntax is as follows:
  </para>
  
  <screen>
  &prompt.root;podman pull <replaceable>[options]</replaceable> <replaceable>source</replaceable>
  </screen>
  <para>
  The <replaceable>source</replaceable> can be an image without the registry name. In that case you, Podman tries to pull the image from all registries configured in the <filename>/etc/containers/registries.conf</filename> file. The default image tag is <literal>latest</literal>.
  </para>
  <para>
  For all possible options of the <command>podman pull</command> command, run:
  </para>
  <screen>
  &prompt.root;podman pull --help
  </screen>
  <note>
   <title>Getting images using Cockpit</title>
   <para>
    If you are using Cockpit, you can also pull container images from a image
    registry in the <literal>Podman containers</literal> menu.
   </para>
  </note>
 </section>
 <section xml:id="sec-working-containers">
  <title>Containers commands</title>  
  <para>
  The following section gives an overview of several basic Podman commands to create, start, stop a container or to commit changes made to your container.
  </para>
  <section xml:id="sec-podman-run">
  <title>Podman <command>run</command> command</title>
  <para>
   After you have pulled your container image you can use containers based on
   it. You can run an instance of the image using the <command>podman
   run</command>. The command syntax is the following:
  </para>
<screen>
 &prompt.root;podman run [<replaceable>options</replaceable>] <replaceable>image</replaceable> [<replaceable>container name</replaceable>]
 </screen>
  <para>
   A list of frequently used options follows. For a full list of available
   options, run the command: <command>podman run --help</command>.
  </para>
  <variablelist>
   <varlistentry>
    <term><literal>--detach, -d</literal></term>
    <listitem>
     <para>
      The container will run in the background.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--env, -e=env</literal></term>
    <listitem>
     <para>
      This option allows arbitrary environment variables that are available for
      the process to be launched inside of the container. If an environment
      variable is specified without a value, Podman will check the host
      environment for a value and set the variable only if it is set on the
      host.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--help</literal></term>
    <listitem>
     <para>
      Prints help for the <command>podman run</command> command.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--hostname=</literal><emphasis>name</emphasis>,<literal> -h</literal></term>
    <listitem>
     <para>
      Sets the container host name that is available inside the container.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--pod=</literal><emphasis>name</emphasis></term>
    <listitem>
     <para>
      Run container in an existing pod. If you want Podman to make the pod for
      you, prefix the pod name with <literal>new:</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--read-only</literal></term>
    <listitem>
     <para>
      Mount the container’s root filesystem as read only.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--systemd=true|false|always</literal></term>
    <listitem>
     <para>
      Run container in systemd mode. The default is true.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  </section>
  
  <section xml:id="sec-podman-stop">
  <title>Podman <command>stop</command> command</title>
  <para>
   If the <command>podman run</command> command finished succesfully a new
   container has been started. You can stop the container by running:
  </para>
<screen>
 &prompt.root;podman stop <replaceable>[options]</replaceable> <replaceable>container</replaceable>
 </screen>
  <para>
   You can specify a single container or a space-separated list of containers.
   The command takes the following options:
  </para>
  <variablelist>
   <varlistentry>
    <term><literal>--all, -a</literal></term>
    <listitem>
     <para>
      With this option the command will stop all running containers.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--latest, -l</literal></term>
    <listitem>
     <para>
      Instead of providing a container name, the last created container will be
      stopped.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>--time, -t=</literal><emphasis>seconds</emphasis></term>
    <listitem>
     <para>
      Seconds to wait before forcibly stopping the container.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   To view all possible options of the <command>podman stop</command> command,
   run the following:
  </para>
<screen>
 &prompt.root;podman stop --help
 </screen>
 </section>
 
 <section xml:id="sec-podman-start">
 <title>Podman <command>start</command> command</title>
  <para>
   To start already created but stopped containers, use the <command>podman
   start</command> command. The command syntax is as follows:
  </para>
<screen>
 &prompt.root;podman start <replaceable>[options]</replaceable> <replaceable>container</replaceable>
 </screen>
  <para>
   For a full list of available options of <command>podman start</command>, run
   the command:
  </para>
<screen>
 &prompt.root;podman start --help
 </screen>
 </section>
 
 <section xml:id="sec-podman-commit">
 <title>Podman <command>commit</command> command</title>
 <para>
 TBD
 </para>
 </section>
 </section>
 
 <section xml:id="sec-working-pods">
  <title>Working with pods</title>
  <para>
   TBD
  </para>
 </section>
</article>
