<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xml:id="cha.docker.overview" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Docker Overview</title>
 <para>
  Docker is a lightweight virtualization solution to run multiple virtual units
  (containers) simultaneously on a single control host. Containers are isolated
  with Kernel Control Groups (<xref linkend="vle.docker.cgroup"/>) and
  <xref linkend="vle.docker.namespace"/>.
 </para>
 <para>
  Full virtualization solutions such as &xen;, &kvm;, or &libvirt; are based on
  the processor simulating a complete hardware environment and controlling the
  virtual machines. However, Docker only provides operating system-level
  virtualization where the Linux kernel controls isolated containers.
 </para>
 <para>
  Before going into detail about Docker, let us define some of the terms used:
 </para>
 <variablelist>
  <varlistentry xml:id="Docker_engine">
   <term>
    Docker engine
   </term>
   <listitem>
    <para>
     The docker engine is a server-client type application that performs all
     tasks related to virtual machines. The Docker engine comprises the
     following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       daemon - is the server side of the docker engine that manages all docker
       objects (images, containers, network used by containers, etc.)
      </para>
     </listitem>
     <listitem>
      <para>
       REST API - applications can use this API to communicate directly with
       the daemon
      </para>
     </listitem>
     <listitem>
      <para>
       a CLI client - that enables you to communicate with the daemon. If the
       daemon is running on a different machine than the CLI client, the CLI
       client can communicate by using network sockets or the REST API provided
       by the docker engine.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="Docker_Image">
   <term>Image</term>
   <listitem>
    <para>
     An <emphasis>image</emphasis> is a read-only template used to create a
     <emphasis>virtual machine</emphasis> on the host server. A Docker image is
     made by a series of layers built one over the other. Each layer
     corresponds to a permanent change, for example an update of an
     application. The changes are stored in a file called a
     <emphasis>dockerfile</emphasis>. For more details see
     <link xlink:href="http://docs.docker.com/engine/reference/glossary#image">the
     official Docker documentation</link>.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Dockerfile
   </term>
   <listitem>
    <para>
     A <emphasis>dockerfile</emphasis> stores changes made on top of the base
     image. The <xref linkend="Docker_engine"/> reads instructions in the
     <emphasis>dockerfile</emphasis> and builds a new image according to the
     instructions.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Container
   </term>
   <listitem>
    <para>
     A <emphasis>container</emphasis> is a running instance based on a
     particular Docker <xref linkend="Docker_Image"/>. Each
     <emphasis>container</emphasis> can be distinguished by a unique container
     ID.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Registry
   </term>
   <listitem>
    <para>
     A <emphasis>registry</emphasis> is storage for already created images. It
     typically contains several <emphasis>repositories</emphasis> There are two
     types of registry:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       public registry - where everyone (usually registered) can download and
       use images. A typical public registry is
       <link xlink:href="https://hub.docker.com/">Docker Hub</link>.
      </para>
     </listitem>
     <listitem>
      <para>
       private registry - these are accessible for particular users or from a
       particular private network.
      </para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    Repository
   </term>
   <listitem>
    <para>
     A <emphasis>repository</emphasis> is storage in a
     <emphasis>registry</emphasis> that stores a different version of a
     particular image. You can pull or push images from or to a repository.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle.docker.cgroup">
   <term>
    Control groups
   </term>
   <listitem>
    <para>
     <emphasis>Control groups</emphasis>, also called
     <literal>cgroups</literal>, is a Linux kernel feature that allows
     aggregating or partitioning tasks (processes) and all their children into
     hierarchically organized groups to isolate resources.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="vle.docker.namespace">
   <term>
    Namespace
   </term>
   <listitem>
    <para>
     Docker uses <emphasis>namespaces</emphasis> for its containers that
     isolates resources reserved for particular containers.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>Orchestration</term>
   <listitem>
    <para>
     In a production environment you typically need a cluster with many
     containers on each cluster node. The containers must cooperate and you
     need a framework that enables you to manage the containers automatically.
     The act of automatic container management is called container
     orchestration and is typically handled by Kubernetes.
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  Docker is a platform that allows developers and system administrators to
  manage the complete life cycle of images. Docker makes it easy to build, ship
  and run images containing applications.
 </para>
 <para>
  Docker provides you with the following advantages:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    Isolation of applications and operating systems through containers.
   </para>
  </listitem>
  <listitem>
   <para>
    Near native performance, as Docker manages allocation of resources in real
    time.
   </para>
  </listitem>
  <listitem>
   <para>
    Controls network interfaces and resources available inside containers
    through cgroups.
   </para>
  </listitem>
  <listitem>
   <para>
    Versioning of images.
   </para>
  </listitem>
  <listitem>
   <para>
    Allows building new images based on existing ones.
   </para>
  </listitem>
  <listitem>
   <para>
    Provides you with container orchestration.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  On the other hand, Docker has the following limitations:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <title>Limitations of Docker</title>
  <listitem>
   <para>
    Containers run inside the host system's kernel and cannot use a different
    kernel.
   </para>
  </listitem>
  <listitem>
   <para>
    Only allows Linux <emphasis>guest</emphasis> operating systems.
   </para>
  </listitem>
  <listitem>
   <para>
    Docker is not a full virtualization stack like &xen;, &kvm;, or &libvirt;.
   </para>
  </listitem>
  <listitem>
   <para>
    Security depends on the host system. Refer to the
    <link xlink:href="http://docs.docker.com/articles/security/">official
    security documentation</link> for more details.
   </para>
  </listitem>
 </itemizedlist>
 <sect1 xml:id="Docker_Architecture">
  <title>Docker Architecture</title>

  <para>
   Docker uses a client/server architecture. You can use the <emphasis>CLI
   client</emphasis> to communicate with the <emphasis>daemon</emphasis>. The
   <emphasis>daemon</emphasis> then performs operations with containers and
   manages images locally or in registry. The <emphasis>CLI client</emphasis>
   can run on the same server as the host daemon or on a different machine. The
   <emphasis>CLI client</emphasis> communicates with the
   <emphasis>daemon</emphasis> by using network sockets. The architecture is
   depicted in <xref linkend="Docker_architecture"/>.
  </para>

  <figure xml:id="Docker_architecture">
   <title>The Docker architecture</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="docker_architecture.png" format="PNG" width="70%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="Docker_Used_Drivers">
  <title>Docker Drivers</title>

  <sect2 xml:id="Container_Drivers">
   <title>Container Drivers</title>
   <para>
    Docker uses
    <link xlink:href="https://github.com/docker/libcontainer">libcontainer</link>
    as the back-end driver to handle containers.
   </para>
  </sect2>

  <sect2 xml:id="sec.docker.storaged">
   <title>Storage Drivers</title>
   <para>
    Docker supports different storage drivers:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem class="resource">vfs</systemitem>: this driver is
      automatically used when the Docker host file system does not support
      copy-on-write. This is a simple driver which does not offer some
      advantages of Docker (like sharing layers, more on that in the next
      sections). It is highly reliable but also slow.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">devicemapper</systemitem>: this driver
      relies on the device-mapper thin provisioning module. It supports
      copy-on-write, hence it offers all the advantages of Docker.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">btrfs</systemitem>: this driver relies on
      Btrfs to provide all the features required by Docker. To use this driver
      the <filename>/var/lib/docker</filename> directory must be on a Btrfs
      file system.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">AUFS</systemitem>: this driver relies on the
      AUFS union file system. Neither the upstream kernel nor the SUSE one
      supports this file system. Hence the AUFS driver is not built into the
      SUSE Docker package.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    &slea;&nbsp;12 uses the Btrfs file system by default, which leads Docker to
    use the <systemitem class="resource">btrfs</systemitem> driver.
   </para>
   <para>
    It is possible to specify which driver to use by changing the value of the
    <envar>DOCKER_OPTS</envar> variable defined inside of the
    <filename>/etc/sysconfig/docker</filename> file. This can be done either
    manually or using &yast; by browsing to <menuchoice>
    <guimenu>System</guimenu> <guimenu>/etc/sysconfig Editor</guimenu>
    <guimenu>System</guimenu> <guimenu>Management</guimenu>
    <guimenu>DOCKER_OPTS</guimenu> </menuchoice> menu and entering the
    <systemitem class="library">-s storage_driver</systemitem> string.
   </para>
   <para>
    For example, to force the usage of the
    <systemitem class="resource">devicemapper</systemitem> driver enter the
    following text:
   </para>
   <screen>DOCKER_OPTS="-s devicemapper"</screen>
   <important>
    <title>Mounting <filename>/var/lib/docker</filename></title>
    <para>
     It is recommended to have <filename>/var/lib/docker</filename> mounted on
     a separate partition or volume to not affect the Docker host operating
     system in case of a file system corruption.
    </para>
    <remark condition="clarity">
     2017-03-13 - fs: For SLE 12 SP3, check whether this still applies. Maybe a
     subvolume will be created by default, see bsc #102029.
    </remark>
    <para>
     In case you choose the Btrfs file system for
     <filename>/var/lib/docker</filename>, it is strongly recommended to create
     a subvolume for it. This ensures that the directory is excluded from file
     system snapshots. If not excluding <filename>/var/lib/docker</filename>
     from snapshots, the file system will likely run out of disk space soon
     after you start deploying containers. What's more, a rollback to a
     previous snapshot will also reset the Docker database and images. Refer to
     <citetitle>Creating and Mounting New Subvolumes</citetitle> at
     <link
     xlink:href="https://www.suse.com/documentation/sles-12/book_sle_admin/data/sec_snapper_setup.html"/>
     for details.
    </para>
   </important>
  </sect2>
 </sect1>
</chapter>
