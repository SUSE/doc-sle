<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="smt.management">
 <title>Managing Repositories with &yast; &smt; Server Management</title>
 <info/>
 <para>
  The &yast; &smt; Server Management module is designed to perform daily
  management tasks. It can be used to enable and disable the mirroring of
  repositories, the staging flag for repositories, and perform the
  mirroring and staging.
 </para>
 <sect1 xml:id="smt.yast.staging.starting">
  <title>Starting &smt; Management Module</title>

  <para>
   &smt; Management is a &yast; module. There are two ways to start the module:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Start &yast; and select <guimenu>Network Services</guimenu>, then
     <guimenu>&smt; Server Management</guimenu>
    </para>
   </listitem>
   <listitem>
    <para>
     Run the  <command>yast2 smt</command> command in the terminal as &rootuser;
    </para>
   </listitem>
  </itemizedlist>

  <para>
   This opens the &smt; Management application window and switches to the
   <guimenu>Repositories</guimenu> section.
  </para>

  <figure>
   <title>List of Repositories</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="smt_repos.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="smt_repos.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="smt.yast.staging.viewing">
  <title>Viewing and Managing Repositories</title>

  <para>
   In the <guimenu>Repositories</guimenu> section, you can see the list of all
   available package repositories for &smt;. For each repository, the list
   shows the repository's name, target product and architecture, mirroring and
   staging flag, date of last mirroring, and a short description. Sort
   the list by clicking the desired column header, and scroll the list items
   using the scrollbar on the right side.
  </para>

  <sect2 xml:id="smt.yast.staging.viewing.filter">
   <title>Filtering Repositories</title>
   <para>
    You can also filter out groups of repositories using the <guimenu>Repository
    Filter</guimenu> text box. Enter the desired filter term and click
    <guimenu>Filter</guimenu> to see only the matching entries. To cancel the
    current filter and display all repositories, clear the <guimenu>Repository
    Filter</guimenu> field and click <guimenu>Filter</guimenu>.
   </para>
   <figure>
    <title>Repository Filter</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="smt_repo_filter.png" width="70%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="smt_repo_filter.png" width="70%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>

  <sect2 xml:id="smt.yast.staging.viewing.mirror">
   <title>Mirroring Repositories</title>
   <para>
    Before you can offer package repositories, you need to create a
    local mirror of their packages. To do this, follow the procedure below.
   </para>
   <procedure>
    <step>
     <para>
      From the list, select the line containing the name of the repository you
      want to mirror.
     </para>
    </step>
    <step>
     <para>
      Click the selected line to highlight it.
     </para>
    </step>
    <step>
     <para>
      Click the <guimenu>Toggle Mirroring</guimenu> button in the lower-left
      part of the window. This enables the option in the <guimenu>Mirroring</guimenu> column of the
      selected repository. If the repository was already
      selected for mirroring, clicking the <guimenu>Toggle Mirroring</guimenu>
      button disables the mirroring.
     </para>
    </step>
    <step>
     <para>
      Hit the <guimenu>Mirror Now</guimenu> button to mirror the repository.
     </para>
    </step>
    <step>
     <para>
      A pop-up window appears with the information about mirroring status and
      result.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>OK</guimenu> to refresh the list of repositories.
     </para>
    </step>
   </procedure>
   <figure>
    <title>Status of Mirroring Process</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="smt_mirroring-done.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="smt_mirroring-done.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
  </sect2>
 </sect1>
 <sect1 xml:id="smt.yast.staging.stage">
  <title>Staging Repositories</title>

  <para>
   After the mirroring is finished, you can stage the mirrored repositories. In
   &smt;, <emphasis>staging</emphasis> is a process where you create either
   testing or production repositories based on the mirrored ones. The testing
   repository helps you examine the repository and its packages before you make
   them available in a production environment. To make repositories available
   for staging, follow the steps below.
  </para>

  <procedure>
   <step>
    <para>
     From the repository list, select the line containing the name of the
     repository you want to manage.
    </para>
   </step>
   <step>
    <para>
     Click the selected line to highlight it.
    </para>
   </step>
   <step>
    <para>
     Click the <guimenu>Toggle Staging</guimenu> button next to the
     <guimenu>Toggle Mirroring</guimenu> button. This enables the option in
     the <guimenu>Staging</guimenu> column of the selected repository. If the
     repository was already selected for staging before, clicking the
     <guimenu>Toggle Staging</guimenu> button disables staging.
    </para>
   </step>
   <step>
    <para>
     Repeat steps 1 to 3 for all directories you want to stage.
    </para>
   </step>
  </procedure>

  <important>
   <title>Toggle Staging Button Not Active</title>
   <para>
    You can only stage the repositories that were previously selected for
    mirroring. Otherwise, the <guimenu>Toggle Staging</guimenu>
    button will disabled.
   </para>
  </important>

  <para>
   After you have mirrored the repositories and made them available for staging, click
   the <guimenu>Staging</guimenu> tab. In the upper-left part of the window,
   you will find the <guimenu>Repository Name</guimenu> drop-down box
   containing all repositories available for staging. The repository names there
   have the name of the attached staging group. Select the group
   you want to stage, and you should see a list of packages in this repository.
   For each patch, there is information about the patch name, its version and category, testing and
   production flags, and a short summary.
  </para>

  <para>
   Next to the <guimenu>Repository Name</guimenu> drop-down box, there is a
   <guimenu>Patch Category</guimenu> filter. It can be used for listing only the
   patches that belong to one of the predefined categories.
  </para>

  <para>
   If the selected repository allows for patch filtering, you can toggle the
   status flag for individual patches. This is done by clicking the <guimenu>Toggle
   Patch Status</guimenu> button.
  </para>

  <para>
   Before creating a repository of packages that are available in the
   <emphasis>production</emphasis> environment, you need to create and test the
   <emphasis>testing</emphasis> repository. Select the <guimenu>From Full Mirror to
   Testing</guimenu> item from the <guimenu>Create Snapshot</guimenu> drop-down
   list. A small pop-up window appears informing you
   about the staging process. After the testing repository snapshot has been created,
   you should see the appropriate options enabled in the <guimenu>Testing</guimenu> column.
  </para>

  <figure>
   <title>Testing Created Snapshot</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="smt_staging1.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="smt_staging1.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <important>
   <title>Creating a Production Snapshot</title>
   <para>
    After you have enabled <emphasis>staging</emphasis> for an update repository, you
    need to create its <emphasis>production</emphasis> snapshot to make it
    available to the clients. Otherwise, the clients cannot find
    the update repository.
   </para>
  </important>

  <para>
   Select the <guimenu>From Testing to Production</guimenu>
   item from the <guimenu>Create Snapshot</guimenu>
   drop-down box. A small pop-up window appears informing you about linking the
   testing repository to the production one. After the production snapshot has been
   created, you should see the appropriate options enabled in the <guimenu>Production</guimenu>
   column. Also, a green check mark appears in the <guimenu>Repository Name</guimenu> drop-down box.
  </para>
 </sect1>
 <sect1 xml:id="smt.yast.staging.client">
  <title>Jobs and Client Status Monitoring</title>

  <para>
   For each client that is registered against the &smt; server, &smt; creates a
   job queue. To use the job queue, you need to install the
   <systemitem>smt-client</systemitem> package on the client. During the
   installation of the <systemitem>smt-client</systemitem> package, a cron job
   is created that runs the client executable
   <command>/usr/sbin/smt-agent</command> every three hours. The
   agent then asks the server if it has any jobs in the queue belonging to this
   client and executes these jobs. When there are no more jobs in the queue,
   the agent terminates completely. It is important to understand that jobs are
   not pushed directly to the clients when they get created. They are not
   executed until the client asks for them at the intervals specified in the cron job.
   Therefore, from the time a job is created on the server until it is executed on the
   client, a delay of several hours may occur.
  </para>

  <para>
   Every job can have a parent job. This means that the child job only runs
   after the parent job has successfully finished. It is also possible to configure
   advanced timing and recurrence and persistence of jobs. You can find more
   details about &smt; jobs in <xref linkend="smt.scripts.job"/>.
  </para>

  <para>
   When creating jobs, you need to specify the GUID of the target clients using
   the <option>-g <replaceable>GUID</replaceable></option> parameter. Although
   the <option>-g</option> parameter can be specified multiple times in a
   single command, you cannot use wild cards to assign a job to all
   clients.
  </para>

  <para>
   Currently, the following types of jobs are available:
  </para>

  <variablelist>
   <varlistentry>
    <term>Execute</term>
    <listitem>
     <para>
      Run commands on the client
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Eject</term>
    <listitem>
     <para>
      Open, close, or toggle the CD tray of the client
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Patchstatus</term>
    <listitem>
     <para>
      Report the status of installed patches
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Reboot</term>
    <listitem>
     <para>
      Reboot the client
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Softwarepush</term>
    <listitem>
     <para>
      Install packages
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Update</term>
    <listitem>
     <para>
      Install available updates
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <tip>
   <title>Default Job Types</title>
   <para>
    By default only <literal>softwarepush</literal>, <literal>patchstatus</literal>, and <literal>update</literal> jobs are
    allowed. To allow more types of jobs, append the job type to the
    <literal>ALLOWED_AGENTS</literal> list in
    <filename>/etc/sysconfig/smt-client</filename>.
   </para>
  </tip>

  <para>
   All clients that register against the &smt; server automatically get a
   persistent <literal>patchstatus</literal> job added to their job queue. This
   is also the case for
   clients without the <systemitem>smt-clients</systemitem> package (&sle; 10 and
   older, or non-SUSE based distributions). These clients appear with the
   <literal>Unknown</literal> patchstatus in the client lists. The <literal>patchstatus</literal> jobs for
   such clients are not required, and clients can safely be deleted to clean
   up the output of <command>smt-job</command>. Keep in mind that if you
   update a machine to &sle; 11 or later, you need to create the
   <literal>patchstatus</literal> job manually.
  </para>

  <para>
   Whenever the client runs a <literal>patchstatus</literal> job, it compares the currently
   installed updates with what is available in the repositories on the &smt;
   server. The job then reports back the number of missing patches that need to
   be installed in each of the four categories:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Security
    </para>
   </listitem>
   <listitem>
    <para>
     Package Manager
    </para>
   </listitem>
   <listitem>
    <para>
     Recommended
    </para>
   </listitem>
   <listitem>
    <para>
     Optional
    </para>
   </listitem>
  </itemizedlist>

  <tip>
   <title>The <option>--agreelicense</option> Option</title>
   <para>
    To install a package and its dependencies, the job type <literal>softwarepush</literal> is
    used. When creating this type of job, it is a good idea to use the
    <option>--agreelicense</option> option. If a
    package displays a license agreement and expects it to be accepted, the job
    will skip the package if <option>--agreelicense</option> is not
    specified. The <command>smt-client</command> command forwards the installation
    process to <command>zypper</command>, which does not consider a failed
    acceptance of a license agreement to be an error. This results in the job
    being completed successfully, even if the package is not installed. Using the
    <option>--agreelicense</option> option prevents this from happening.
   </para>
  </tip>

  <sect2 xml:id="smt.yast.staging.client.yast">
   <title>Checking the Client Status with &yast;</title>
   <para>
    The <guimenu>Clients Status</guimenu> section of the <guimenu>&smt;
    Management</guimenu> window provides the status information about all the
    clients that use the repositories on your &smt; server. This information
    consists of two main parts: the list of the clients and the detailed information.
   </para>
   <para>
    You can see the client's host name, the date and time of the last network
    contact with the &smt; server, and its update status. The update status can
    be one of the following:
   </para>
   <variablelist>
    <varlistentry>
     <term>Up-to-date</term>
     <listitem>
      <para>
       The client packages are updated to their last version available in the
       production repository
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Updates available</term>
     <listitem>
      <para>
       This status means that there are updates available for the client that
       are either <literal>optional</literal> or
       <literal>recommended</literal>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Critical</term>
     <listitem>
      <para>
       Either <literal>security</literal> patches or <literal>package
       manager</literal> patches are available for the client
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    Detailed information about the selected client is available in the lower
    part of the window. This usually includes extended status
    information and detailed information about the number and types of
    available updates.
   </para>
   <figure>
    <title>Clients Status</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="smt_clients_status.png" width="75%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="smt_clients_status.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>
    The date and time in the <guimenu>Last Contact</guimenu> column is the
    last time contact of the server&mdash;even if it only ran the regular
    registration update script. This date is not the date of the last
    'patchstatus' report. The <command>smt-client</command> command-line tool
    prints the correct date and calls it <literal>Patch Status Date</literal>.
    The <command>smt-client -v</command> command prints both dates: the
    <literal>patchstatus</literal> date
    and the last contact of the client system.
   </para>
   <note>
    <title>Hidden Patches</title>
    <para>
     Some patches may not be visible if they are required by other patches that
     are only shown as available after the package manager patch or patches
     have been installed.
    </para>
   </note>
  </sect2>
 </sect1>
</chapter>
