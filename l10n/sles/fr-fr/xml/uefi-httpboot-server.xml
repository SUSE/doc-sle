<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="uefi-httpboot-server.xml" version="5.0" xml:id="cha-deployment-prep-uefi-httpboot">
 <title>Configuration d'un serveur de démarrage HTTP UEFI</title>
 <info>
  <abstract>
   <para>
    Ce chapitre décrit comment installer et configurer un serveur de démarrage HTTP UEFI.
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>oui</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="httpboot-intro">
  <title>Introduction</title>

  <para>
   Le démarrage HTTP associe DHCP, DNS et HTTP pour permettre l'amorçage et le déploiement de systèmes via le réseau. Le démarrage HTTP peut être utilisé comme solution de remplacement haute performance pour PXE. Le démarrage HTTP permet d'amorcer un serveur à partir d'un URI via HTTP, en transférant rapidement des fichiers volumineux, tels que le kernel Linux et le système de fichiers racine à partir de serveurs situés en dehors de votre réseau local.
  </para>

  <sect2 xml:id="httpboot-client">
   <title>Configuration de la machine cliente</title>
   <para>
    L'activation du démarrage HTTP sur une machine cliente physique dépend de votre matériel. Pour plus d'informations sur l'activation du démarrage HTTP sur votre machine, consultez la documentation.
   </para>
  </sect2>

  <sect2 xml:id="httpboot-preparation">
   <title>Préparation</title>
   <para>
    La configuration décrite ici utilise les sous-réseaux IP 192.168.111.0/24 (IPv4) et 2001:db8:f00f:cafe::/64 (Ipv6) et les adresses IP serveur sont 192.168.111.1 (IPv4) et 2001:db8:f00f:cafe::1/64 (IPv6), à titre d'exemple. Ajustez ces valeurs en fonction de votre configuration spécifique.
   </para>
   <para>
    Installez les paquetages suivants sur la machine que vous envisagez d'utiliser comme serveur de démarrage HTTP : <package>dhcp-server</package>,
    <package>apache2</package> (ou <package>lighttpd</package>) et
    <package>dnsmasq</package>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="httpboot-configure-server">
  <title>Configuration du serveur</title>

  <sect2 xml:id="httpboot-dns-server">
   <title>Serveur DNS</title>
   <para>
    Bien que la configuration du serveur DNS soit facultative, elle vous permet d'assigner un nom convivial au serveur de démarrage HTTP. Pour configurer le serveur DNS, ajoutez ce qui suit au fichier <filename>/etc/dnsmasq.conf</filename> :
   </para>
<screen>interface=eth0
addn-hosts=/etc/dnsmasq.d/hosts.conf</screen>
   <para>
    Assignez un nom de domaine aux adresses IP dans le fichier <filename>/etc/dnsmasq.d/hosts.conf</filename> :
   </para>
<screen>192.168.111.1 www.httpboot.local
2001:db8:f00f:cafe::1 www.httpboot.local</screen>
   <para>
    Démarrez le serveur DNS.
   </para>
<screen>systemctl start dnsmasq</screen>
   <note>
    <title>utilisation du chargeur d'amorçage de module d'interface (<phrase role="productname">shim</phrase>)</title>
    <para>
     En raison d'un changement dans UEFI 2.7, nous vous recommandons d'utiliser un chargeur d'amorçage de module d'interface à partir de SLE 15 ou version plus récente, pour éviter des erreurs potentielles causées par le noeud DNS supplémentaire.
    </para>
   </note>
   <sect3 xml:id="httpboot-dhcpv4-server">
    <title>Configuration du serveur DHCPv4</title>
    <para>
     Avant de configurer les serveurs DHCP, spécifiez leur interface réseau dans <filename>/etc/sysconfig/dhcpd</filename> :
    </para>
<screen>DHCPD_INTERFACE="eth0"
DHCPD6_INTERFACE="eth0"</screen>
    <para>
     De cette façon, les serveurs DHCP fournissent le service sur l'interface <literal>eth0</literal> uniquement.
    </para>
    <para>
     Pour configurer un serveur DHCPv4 en vue du démarrage PXE et HTTP, ajoutez la configuration suivante au fichier <filename>/etc/dhcpd.conf</filename> :
    </para>
<screen>option domain-name-servers 192.168.111.1;
option routers 192.168.111.1;
default-lease-time 14400;
ddns-update-style none;
  subnet 192.168.111.0 netmask 255.255.255.0 {
    range dynamic-bootp 192.168.111.100 192.168.111.120;
    default-lease-time 14400;
    max-lease-time 172800;
    class "pxeclients"{
      match if substring (option vendor-class-identifier, 0, 9) = "PXEClient";
      next-server 192.168.111.1;
      filename "/bootx64.efi";
    }
    class "httpclients" {
      match if substring (option vendor-class-identifier, 0, 10) = "HTTPClient";
      option vendor-class-identifier "HTTPClient";
      filename "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
    }
}</screen>
    <para>
     Notez que le serveur DHCPv4 doit utiliser le paramètre <literal>HTTPClient</literal> pour l'ID de classe du fournisseur, car le client l'utilise pour identifier une offre de démarrage HTTP.
    </para>
    <para>
     Démarrez le daemon DHCP :
    </para>
    <para>
     <literal>systemctl start dhcpd</literal>
    </para>
   </sect3>
   <sect3 xml:id="httpboot-dhcpv6-server">
    <title>Configuration du serveur DHCPv6</title>
    <para>
     Pour configurer le serveur DHCPv6, ajoutez la configuration suivante au fichier <filename>/etc/dhcpd6.conf</filename> :
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};
subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
        option dhcp6.name-servers 2001:db8:f00f:cafe::1;
        option dhcp6.vendor-class 0 10 "HTTPClient";
}</screen>
    <para>
     Cette configuration définit le type de l'URL de démarrage, la classe du fournisseur et les autres options requises. Comme pour les paramètres DHCPv4, il est nécessaire de fournir l'URL de démarrage, qui doit présenter une adresse IPv6. Il est également nécessaire de spécifier l'option de classe du fournisseur. Dans DHCPv6, il se compose du numéro d'entreprise et des données de classe du fournisseur (longueur et contenu). Étant donné que le pilote de démarrage HTTP ignore le numéro d'entreprise, vous pouvez le définir sur <literal>0</literal>. Le contenu des données de classe du fournisseur doit être <literal>HTTPClient</literal>, sinon, le client ignore l'offre.
    </para>
    <para>
     L'ancienne implémentation du démarrage HTTP, qui ne respecte pas la norme <link xlink:href="https://tools.ietf.org/html/rfc3315">RFC 3315</link>, nécessite une configuration différente :
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = string;
        subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi;
	option dhcp6.name-servers 2001:db8:f00f:cafe::1;
	option dhcp6.vendor-class "HTTPClient";
}</screen>
    <para>
     Démarrez le daemon <literal>dhcpv6</literal>.
    </para>
<screen>systemctl start dhcpd6</screen>
    <sect4 xml:id="httpboot-dhcpv6-pxe-server">
     <title>Configuration du serveur DHCPv6 pour le démarrage PXE et HTTP</title>
     <para>
      À l'aide de la configuration suivante, il est possible de configurer le serveur DHCPv6 pour le démarrage PXE et HTTP:
     </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};

subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;

        class "PXEClient" {
	        match substring (option dhcp6.vendor-class, 6, 9);
	}

        subclass "PXEClient" "PXEClient" {
	        option dhcp6.bootfile-url "tftp://[2001:db8:f00f:cafe::1]/bootloader.efi";
	}

	class "HTTPClient"; {
	        match substring (option dhcp6.vendor-class, 6, 10);
	}

	subclass "HTTPClient" "HTTPClient" {
	        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
		option dhcp6.name-servers 2001:db8:f00f:cafe::1;
		option dhcp6.vendor-class 0 10 "HTTPClient";
	}
}</screen>
     <para>
      Il est également possible de faire correspondre la classe du fournisseur à une architecture spécifique, comme suit :
     </para>
<screen>class "HTTPClient" {
        match substring (option dhcp6.vendor-class, 6, 21);
	}

subclass "HTTPClient" "HTTPClient":Arch:00016 {
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";
	option dhcp6.name-servers 2001:db8:f00f:cafe::1;
	option dhcp6.vendor-class 0 10 "HTTPClient";
}</screen>
     <para>
      Dans cet exemple, <literal>HTTPClient:Arch:00016</literal> fait référence à un client de démarrage HTTP AMD64/Intel 64. Cette configuration permet au serveur de servir simultanément différentes architectures.
     </para>
    </sect4>
    <sect4 xml:id="httpboot-firewall">
     <title>Configuration du pare-feu</title>
     <para>
      Si des paquets DHCPv6 sont abandonnés par le filtre RP dans le pare-feu, vérifiez son journal. S'il contient l'entrée <literal>rpfilter_DROP</literal>, désactivez le filtre à l'aide de la configuration suivante dans le fichier <filename>/etc/firewalld/firewalld.conf</filename> :
     </para>
     <para>
      <literal>IPv6_rpfilter=no</literal>
     </para>
    </sect4>
   </sect3>
   <sect3 xml:id="httpboot-tftp-server">
    <title>Déploiement d'un serveur TFTP (facultatif)</title>
    <para>
     Pour prendre en charge le démarrage PXE et HTTP, déployez un serveur TFTP. Installez <package>tftp</package> et démarrez le service :
    </para>
<screen> systemctl start tftp.socket
systemctl start tftp.service</screen>
    <para>
     Il est également nécessaire d'installer un paquetage
     <package>tftpboot-installation</package> spécifique à utiliser avec le démarrage PXE. Exécutez la commande <command>zypper se tftpboot</command> pour répertorier les paquetages <package>tftp-installation</package> disponibles, puis installez le paquetage pour la version et l'architecture système souhaitées, par exemple
     <package>tftpboot-installation-SLE-15-SP3-x86_64</package> Exemples :
     <package os="sles;sled">tftpboot-installation-SLE-<replaceable>VERSION</replaceable>-x86_64</package>
     (remplacez <replaceable>VERSION</replaceable> par la version actuelle). Copiez le contenu du répertoire <filename os="sles;sled">SLE-<replaceable>VERSION</replaceable>-x86_64</filename> dans le répertoire racine du serveur TFTP.
    </para>


    <para>
     Pour plus d'informations, reportez-vous au document <filename os="sles;sled">/usr/share/tftpboot-installation/SLE-<replaceable>VERSION</replaceable>-x86_64/README</filename>.
    </para>
   </sect3>
   <sect3 xml:id="httpboot-http-server">
    <title>Configuration du serveur HTTP</title>
    <para>
     Copiez tout le contenu de la première image ISO du système dans le répertoire <filename os="sles;sled">/srv/www/htdocs/sle/</filename>. Modifiez ensuite le fichier <filename os="sles;sled">/srv/www/htdocs/sle/grub.cfg</filename>. Utilisez l'exemple suivant comme référence :
    </para>
<screen>timeout=60
default=1

menuentry 'Installation IPv4' --class opensuse --class gnu-linux --class gnu --class os {
    set gfxpayload=keep
    echo 'Loading kernel ...'
    linuxefi /sle/boot/x86_64/loader/linux install=http://www.httpboot.local/sle
    echo 'Loading initial ramdisk ...'
    initrdefi /sle/boot/x86_64/loader/initrd
}

menuentry 'Installation IPv6' --class opensuse --class gnu-linux --class gnu --class os {
    set gfxpayload=keep
    echo 'Loading kernel ...'
    linuxefi /sle/boot/x86_64/loader/linux install=install=http://www.httpboot.local/sle ipv6only=1 ifcfg=*=dhcp6,DHCLIENT6_MODE=managed
    echo 'Loading initial ramdisk ...'
    initrdefi /sle/boot/x86_64/loader/initrd
}</screen>
    <sect4 xml:id="httpboot-lighttpd">
     <title>Configuration de lighttpd</title>
     <para>
      Pour activer la prise en charge d'IPv4 et d'IPv6 dans lighttpd, modifiez /<filename>etc/lighttpd/lighttpd.conf</filename> comme suit :
     </para>
<screen>##
## Use IPv6?
##
#server.use-ipv6 = "enable"
$SERVER["socket"] == "[::]:80" {  }</screen>
     <para>
      Démarrez le daemon <literal>lighttpd</literal> :
     </para>
<screen>systemctl start lighttpd</screen>
    </sect4>
    <sect4 xml:id="httpboot-apache2">
     <title>Configuration d'apache2</title>
     <para>
      Apache ne nécessite aucune configuration supplémentaire. Démarrez le daemon <literal>apache2</literal> :
     </para>
<screen>systemctl start apache2</screen>
    </sect4>
   </sect3>
   <sect3 xml:id="httpboot-http-server-ssl-support">
    <title>Activation de la prise en charge de SSL pour le serveur HTTP (facultatif)</title>
    <para>
     Pour utiliser le démarrage HTTPS, vous devez convertir un certificat de serveur existant au format <literal>DER</literal> et l'enregistrer dans le microprogramme du client.
    </para>
    <para>
     En supposant qu'un certificat soit déjà installé sur votre serveur, convertissez-le au format <literal>DER</literal> pour l'utiliser avec le client à l'aide de la commande suivante :
    </para>
<screen>openssl x509 -in <replaceable>CERTIFICATE</replaceable>.crt -outform der -out <replaceable>CERTIFICATE</replaceable>.der</screen>
    <sect4 xml:id="httpboot-enroll-certificate-physical-machine">
     <title>Enregistrement du certificat de serveur dans le microprogramme client</title>
     <para>
      La procédure exacte d'enregistrement du certificat converti dépend de l'implémentation spécifique du microprogramme du client. Pour certains matériels, vous devez enregistrer le certificat manuellement, via l'interface utilisateur du microprogramme, à l'aide d'un périphérique de stockage externe sur lequel se trouve le certificat. Les machines prenant en charge Redfish peuvent enregistrer le certificat à distance. Consultez la documentation de votre matériel pour plus d'informations sur l'enregistrement de certificats.
     </para>
    </sect4>
    <sect4 xml:id="httpboot-ssl-lighttpd">
     <title>Activation de la prise en charge de SSL dans lighttpd</title>
     <para>
      Étant donné que lighttpd a besoin de la clé privée et du certificat dans le même fichier, unifiez-les à l'aide de la commande suivante :
     </para>
<screen>cat <replaceable>CERTIFICATE</replaceable>.crt server.key &gt; <replaceable>CERTIFICATE</replaceable>.pem</screen>
     <para>
      Copiez <filename><replaceable>CERTIFICATE</replaceable>.pem</filename> dans le répertoire <filename>/etc/ssl/private/</filename>.
     </para>
<screen>cp server-almighty.pem /etc/ssl/private/
chown -R root:lighttpd /etc/ssl/private/server-almighty.pem
chmod 640 /etc/ssl/private/server-almighty.pem</screen>
     <para>
      Assurez-vous que <literal>mod_openssl</literal> est répertorié dans la section <literal>server.modules</literal> du fichier <filename>/etc/lighttpd/modules.conf</filename>, par exemple :
     </para>
<screen>server.modules = (
  "mod_access",
  "mod_openssl",
)</screen>
     <para>
      Ajoutez les lignes suivantes à la section <literal>SSL Support</literal> du fichier <filename>/etc/lighttpd/lighttpd.conf</filename> :
     </para>
<screen># IPv4
$SERVER["socket"] == ":443" {
    ssl.engine                 = "enable"
    ssl.pemfile                = "/etc/ssl/private/server-almighty.pem"
}
# IPv6
$SERVER["socket"] == "[::]:443" {
    ssl.engine                 = "enable"
    ssl.pemfile                = "/etc/ssl/private/server-almighty.pem"
}</screen>
     <para>
      Redémarrez lighttpd pour activer la prise en charge de SSL :
     </para>
<screen>systemctl restart lighttpd</screen>
    </sect4>
    <sect4 xml:id="http-ssl-apache">
     <title>Activation de la prise en charge de SSL dans Apache</title>
     <para>
      Ouvrez le fichier <filename>/etc/sysconfig/apache2</filename> et ajoutez le drapeau SSL comme suit :
     </para>
<screen>APACHE_SERVER_FLAGS="SSL"</screen>
     <para>
      Assurez-vous que le module <literal>ssl</literal> est répertorié dans <literal>APACHE_MODULES</literal>, par exemple :
     </para>
     <para>
      Ensuite, copiez la clé privée et le certificat dans le répertoire <filename>/etc/apache2/</filename>.
     </para>
<screen>cp server.key /etc/apache2/ssl.key/
chown wwwrun /etc/apache2/ssl.key/server.key
chmod 600 /etc/apache2/ssl.key/server.key
cp server.crt /etc/apache2/ssl.crt/</screen>
     <para>
      Créez la configuration ssl vhost.
     </para>
<screen>cd /etc/apache2/vhosts.d
cp vhost-ssl.template vhost-ssl.conf</screen>
     <para>
      Modifiez le fichier <filename>/etc/apache2/vhosts.d/vhost-ssl.conf</filename> pour changer la clé privée et le certificat :
     </para>
<screen>SSLCertificateFile /etc/apache2/ssl.crt/server.crt
 SSLCertificateKeyFile /etc/apache2/ssl.key/server.key</screen>
     <para>
      Redémarrez apache pour activer la prise en charge SSL :
     </para>
<screen>systemctl restart apache2</screen>
    </sect4>
    <sect4 xml:id="httpboot-modify-dhcp-configuration">
     <title>Modification de la configuration DHCP</title>
     <para>
      Remplacez le préfixe <literal>http://</literal> par <literal>https://</literal> dans le fichier <filename>dhcpd.conf/dhcpd6.conf</filename> et redémarrez le serveur DHCP.
     </para>
<screen>systemctl restart dhcpd
systemctl restart dhcpd6</screen>
    </sect4>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="httpboot-client-boot">
  <title>Amorçage du client via le démarrage HTTP</title>

  <para>
   Si le microprogramme prend déjà en charge le démarrage HTTP, branchez le câble et choisissez l'option d'amorçage appropriée.
  </para>
 </sect1>
</chapter>
