<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<!--
  TODO for 11.2: Maybe add csync utility into this chapter?

  Add section about csync (http://www.csync.org) from Andreas Schneider (anschneider)
  First announced at opensuse-announce mailinglist 08. January 2008 by Zonker.

  From the announcement:
  »[...] As mobile computing becomes more and more important, file
  synchronization is more important than ever. Our jobs often require
  working not only on multiple computers, but in multiple locations, and
  disconnected from our networks. To help solve this problem, we need
  effective strategies for replication of user data and files.

  csync is a bidirectional file synchronizer for Linux and allows to
  keep two copies of files and directories in sync. It uses uses widely
  adopted protocols like smb or sftp so that there is no need for a
  server component of csync. It is a user-level program which means
  there is no need to be a superuser. With pam_csync it is possible to
  create roaming home directories.
  [...]«

-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.net.sync">
 <title>File Synchronization</title>
 <info>
      <abstract>
        <para>
    These days, many people use several computers&mdash;one computer at
    home, one or several computers at the workplace, and possibly a laptop,
    tablet, or a smartphone on the road. Many files are needed on all these
    computers. You should be able to work with all computers and modify
    the files so that you have the latest version of the data available on
    all computers.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <indexterm xml:id="idx.files_syncronizing" class="startofrange">
 <primary>files</primary>
 <secondary>synchronizing</secondary></indexterm>
 <sect1 xml:id="sec.net.sync.soft">
  <title>Available Data Synchronization Software</title>

  <para>
   Data synchronization is no problem for computers that are permanently
   linked by means of a fast network. In this case, use a network file
   system, like NFS, and store the files on a server, enabling all hosts to
   access the same data via the network. This approach is impossible if the
   network connection is poor or not permanent. When you are on the road
   with a laptop, copies of all needed files must be on the local hard disk.
   However, it is then necessary to synchronize modified files. When you
   modify a file on one computer, make sure a copy of the file is updated on
   all other computers. For occasional copies, this can be done manually
   with scp or rsync. However, if many files are involved, the procedure can
   be complicated and requires great care to avoid errors, such as
   overwriting a new file with an old file.
  </para>

  <warning>
   <title>Risk of Data Loss</title>
   <para>
    Before you start managing your data with a synchronization system, you
    should be well acquainted with the program used and test its
    functionality. A backup is indispensable for important files.
   </para>
  </warning>

  <para>
   The time-consuming and error-prone task of manually synchronizing data
   can be avoided by using one of the programs that use various methods to
   automate this job. The following summaries are merely intended to convey
   a general understanding of how these programs work and how they can be
   used. If you plan to use them, read the program documentation.
  </para>

  <para>
   <!-- http://doccomments.provo.novell.com/comments/28800 -->
   These days file synchronization can also be done with a cloud
   computing solution.
  </para>

  <sect2 xml:id="sec.net.sync.soft.cvs">
   <title>CVS</title><indexterm>
   <primary>files</primary>
   <secondary>synchronizing</secondary>
   <tertiary>CVS</tertiary></indexterm><indexterm>
   <primary>CVS</primary></indexterm>
   <para>
    CVS, which is mostly used for managing program source versions, offers
    the possibility of keeping copies of the files on multiple computers.
    Accordingly, it is also suitable for data synchronization. CVS maintains
    a central repository on the server in which the files and changes to
    files are saved. Changes that are performed locally are committed to the
    repository and can be retrieved from other computers by means of an
    update. Both procedures must be initiated by the user.
   </para>
   <para>
    CVS is very resilient to errors when changes occur on several computers.
    The changes are merged and (if changes took place in the same lines) a
    conflict is reported. When a conflict occurs, the database remains in a
    consistent state. The conflict is only visible for resolution on the
    client host.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.soft.rsync">
   <title>rsync</title><indexterm>
   <primary>rsync</primary></indexterm><indexterm>
   <primary>files</primary>
   <secondary>synchronizing</secondary>
   <tertiary>rsync</tertiary></indexterm>
   <para>
    When no version control is needed but large directory structures need to
    be synchronized over slow network connections, the tool rsync offers
    well-developed mechanisms for transmitting only changes within files.
    This not only applies to text files, but also binary files. To detect
    the differences between files, rsync subdivides the files into blocks
    and computes check sums over them.
   </para>
   <para>
    The effort put into the detection of the changes comes at a price. The
    systems to synchronize should be scaled generously for the usage of
    rsync. RAM is especially important.
   </para>
  </sect2>

<!--taroth 060621: dropped iFolder for SLED 10 according to mail from
   Elizabeth-->

<!-- <sect2 id="sec.net.sync.soft.ifolder">
   <title>Novell iFolder</title>
   <indexterm>
    <primary>files</primary>
    <secondary>synchronizing</secondary>
    <tertiary>iFolder</tertiary>
   </indexterm>
   <indexterm>
    <primary>iFolder</primary>
   </indexterm>
   <indexterm>
    <primary>Novell iFolder</primary>
   </indexterm>
   <para> Novell iFolder lets you access your files from anywhere at any
    time. If you place your files in your iFolder directory, it is
    instantly synchronized to the server. With this method, you can work
    from everywhere. </para>
   <para> Novell iFolder also lets you work offline. This is very
    convenient if you do not have an Internet connection, for example,
    when working with a laptop on the road. After you successfully
    connect to the Internet, the changes to your work is sent to the
    server.</para>
   <para>Working with iFolder involves these steps:</para>
   <remark role="xml">rwalter: shouldn't this be a procedure?</remark>
   <orderedlist>
    <listitem>
     <para>Log in before you work with iFolder.</para>
    </listitem>
    <listitem>
     <para>Change your preferences for how often you want to
      synchronize.</para>
    </listitem>
    <listitem>
     <para>Synchronize your files and view the activity between your
      client and the iFolder server.</para>
    </listitem>
    <listitem>
     <para>Resolve any conflicts during the synchronization. Conflicts
      occur when you change the same file on two different computers.
      iFolder stores conflicted files in a separate directory to prevent
      data loss. </para>
    </listitem>
   </orderedlist>

   <para>For more information about iFolder, see <ulink
     url="http://www.novell.com/en-en/documentation/"></ulink>. Find
    tips and tricks about iFolder at <ulink
     url="http://www.novell.com/coolsolutions/ifmag/"></ulink>.</para>
  </sect2>-->
 </sect1>
 <sect1 xml:id="sec.net.sync.select">
  <title>Determining Factors for Selecting a Program</title>

  <para>
   There are some important factors to consider when deciding which program
   to use.
  </para>

  <sect2 xml:id="sec.net.sync.select.client-server">
   <title>Client/Server versus Peer-to-Peer</title>
   <para>
    Two different models are commonly used for distributing data. In the
    first model, all clients synchronize their files with a central server.
    The server must be accessible by all clients at least occasionally. This
    model is used by CVS.
   </para>
   <para>
    The other possibility is to let all networked hosts synchronize their
    data between each other as peers. rsync actually works in client mode,
    but any client can also act as a server.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.port">
   <title>Portability</title>
   <para>
    CVS and rsync are also available for many other operating systems,
    including various Unix and Windows systems.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.auto">
   <title>Interactive versus Automatic</title>
   <para>
    In CVS, the data synchronization is started manually by the user. This
    allows fine control over the data to synchronize and easy conflict
    handling. However, if the synchronization intervals are too long,
    conflicts are more likely to occur.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.problems">
   <title>Conflicts: Incidence and Solution</title>
   <para>
    Conflicts only rarely occur in CVS, even when several people work on one
    large program project. This is because the documents are merged on the
    basis of individual lines. When a conflict occurs, only one client is
    affected. Usually conflicts in CVS can easily be resolved.
   </para>
   <para>
    There is no conflict handling in rsync. The user is responsible for not
    accidentally overwriting files and manually resolving all possible
    conflicts. To be on the safe side, a versioning system like RCS can
    additionally be employed.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.files">
   <title>Selecting and Adding Files</title>
   <para>
    In CVS, new directories and files must be added explicitly using the
    command <command>cvs</command>&nbsp;<option>add</option>. This
    results in greater user control over the files to synchronize. On the
    other hand, new files are often overlooked, especially when the question
    marks in the output of
    <command>cvs</command>&nbsp;<option>update</option> are ignored
    because of the large number of files.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.history">
   <title>History</title>
   <para>
    An additional feature of CVS is that old file versions can be
    reconstructed. A brief editing remark can be inserted for each change
    and the development of the files can easily be traced later based on the
    content and the remarks. This is a valuable aid for theses and program
    texts.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.size">
   <title>Data Volume and Hard Disk Requirements</title>
   <para>
    A sufficient amount of free space for all distributed data is required
    on the hard disks of all involved hosts. CVS require additional space
    for the repository database on the server. The file history is also
    stored on the server, requiring even more space. When files in text
    format are changed, only the modified lines need to be saved. Binary
    files require additional space amounting to the size of the file every
    time the file is changed.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.gui">
   <title>GUI</title>
   <para>
    Experienced users normally run CVS from the command line. However,
    graphical user interfaces are available for Linux (such as cervisia) and
    other operating systems (like wincvs). Many development tools and text
    editors (such as Emacs) provide support for CVS. The resolution of
    conflicts is often much easier to perform with these front-ends.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.use">
   <title>User Friendliness</title>
   <para>
    rsync is rather easy to use and is also suitable for newcomers. CVS is
    somewhat more difficult to operate. Users should understand the
    interaction between the repository and local data. Changes to the data
    should first be merged locally with the repository. This is done with
    the command <command>cvs</command>&nbsp;<option>update</option>. Then
    the data must be sent back to the repository with the command
    <command>cvs</command>&nbsp;<option>commit</option>. Once this
    procedure has been understood, newcomers are also able to use CVS with
    ease.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.sec">
   <title>Security against Attacks</title>
   <para>
    During transmission, the data should ideally be protected against
    interception and manipulation. CVS and rsync can easily be used via SSH
    (secure shell), providing security against attacks of this kind. Running
    CVS via rsh (remote shell) should be avoided. Accessing CVS with the
    <emphasis>pserver</emphasis> mechanism in insecure networks is likewise
    not advisable.
   </para>
  </sect2>

  <sect2 xml:id="sec.net.sync.select.loss">
   <title>Protection against Data Loss</title>
   <para>
    CVS has been used by developers for a long time to manage program
    projects and is extremely stable. Because the development history is
    saved, CVS even provides protection against certain user errors, such as
    unintentional deletion of a file.
   </para>
   <table xml:id="tab.sync_overview">
    <title>Features of the File Synchronization Tools: -- = very poor, - = poor or not available, o = medium, + = good, ++ = excellent, x = available</title>
<!-- titleabbrev: "Features of the File Synchronization Tools" -->
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para/>
       </entry>
       <entry>
        <para>
         CVS
        </para>
       </entry>
       <entry>
        <para>
         rsync
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Client/Server
        </para>
       </entry>
       <entry>
        <para>
         C-S
        </para>
       </entry>
       <entry>
        <para>
         C-S
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Portability
        </para>
       </entry>
       <entry>
        <para>
         Lin,Un*x,Win
        </para>
       </entry>
       <entry>
        <para>
         Lin,Un*x,Win
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Interactivity
        </para>
       </entry>
       <entry>
        <para>
         x
        </para>
       </entry>
       <entry>
        <para>
         x
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Speed
        </para>
       </entry>
       <entry>
        <para>
         o
        </para>
       </entry>
       <entry>
        <para>
         +
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Conflicts
        </para>
       </entry>
       <entry>
        <para>
         ++
        </para>
       </entry>
       <entry>
        <para>
         o
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         File Sel.
        </para>
       </entry>
       <entry>
        <para>
         Sel./file, dir.
        </para>
       </entry>
       <entry>
        <para>
         Dir.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         History
        </para>
       </entry>
       <entry>
        <para>
         x
        </para>
       </entry>
       <entry>
        <para>
         -
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Hard Disk Space
        </para>
       </entry>
       <entry>
        <para>
         --
        </para>
       </entry>
       <entry>
        <para>
         o
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         GUI
        </para>
       </entry>
       <entry>
        <para>
         o
        </para>
       </entry>
       <entry>
        <para>
         -
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Difficulty
        </para>
       </entry>
       <entry>
        <para>
         o
        </para>
       </entry>
       <entry>
        <para>
         +
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Attacks
        </para>
       </entry>
       <entry>
        <para>
         + (SSH)
        </para>
       </entry>
       <entry>
        <para>
         +(SSH)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Data Loss
        </para>
       </entry>
       <entry>
        <para>
         ++
        </para>
       </entry>
       <entry>
        <para>
         +
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.net.sync.cvs">
  <title>Introduction to CVS</title><indexterm xml:id="idx.CVS" class="startofrange">

  <primary>CVS</primary></indexterm><indexterm xml:id="idx.files_synchronizing_CVS" class="startofrange">

  <primary>files</primary>

  <secondary>synchronizing</secondary>

  <tertiary>CVS</tertiary></indexterm>

  <para>
   CVS is suitable for synchronization purposes if individual files are
   edited frequently and are stored in a file format, such as ASCII text or
   program source text. The use of CVS for synchronizing data in other
   formats (such as JPEG files) is possible, but leads to large amounts of
   data, because all variants of a file are stored permanently on the CVS
   server. In such cases, most of the capabilities of CVS cannot be used.
   The use of CVS for synchronizing files is only possible if all
   workstations can access the same server.
  </para>

  <sect2 xml:id="sec.net.sync.cvs.config">
   <title>Configuring a CVS Server</title>
   <para>
    The <emphasis>server</emphasis> is the host on which all valid files are
    located, including the latest versions of all files. Any stationary
    workstation can be used as a server. If possible, the data of the CVS
    repository should be included in regular backups.
   </para>
   <para>
    When configuring a CVS server, it might be a good idea to grant users
    access to the server via SSH. If the user is known to the server as
    &exampleuser; and the CVS software is installed on the server and the
    client, the following environment variables must be set on the client
    side:
   </para>
<screen>CVS_RSH=ssh CVSROOT=&exampleuser_plain;@server:/serverdir</screen>
   <para>
    The command <command>cvs</command>&nbsp;<option>init</option> can be
    used to initialize the CVS server from the client side. This needs to be
    done only once.
   </para>
   <para>
    Finally, the synchronization must be assigned a name. Select or create a
    directory on the client to contain files to manage with CVS (the
    directory can also be empty). The name of the directory is also the name
    of the synchronization. In this example, the directory is called
    <literal>synchome</literal>. Change to this directory and enter the
    following command to set the synchronization name to
    <literal>synchome</literal>:
   </para>
<screen>cvs import synchome &exampleuser_plain; &exampleuserII_plain;</screen>
   <para>
    Many CVS commands require a comment. For this purpose, CVS starts an
    editor (the editor defined in the environment variable
    <literal>$EDITOR</literal> or vi if no editor was defined). The editor
    call can be circumvented by entering the comment in advance on the
    command line, such as in the following example:
   </para>
<screen>cvs import -m 'this is a test' synchome &exampleuser_plain; &exampleuserII_plain;</screen>
  </sect2>

  <sect2 xml:id="sec.net.sync.cvs.using">
   <title>Using CVS</title>
   <para>
    The synchronization repository can now be checked out from all hosts
    with <command>cvs</command>&nbsp;<option>co synchome</option>. This
    creates a new subdirectory <filename>synchome</filename> on the client.
    To commit your changes to the server, change to the directory
    <filename>synchome</filename> (or one of its subdirectories) and enter
    <command>cvs</command>&nbsp;<option>commit</option>.
   </para>
   <para>
    By default, all files (including subdirectories) are committed to the
    server. To commit only individual files or directories, specify them as
    in <command>cvs</command>&nbsp;<option>commit file1
    directory1</option>. New files and directories must be added to the
    repository with a command like
    <command>cvs</command>&nbsp;<option>add file1 directory1</option>
    before they are committed to the server. Subsequently, commit the newly
    added files and directories with
    <command>cvs</command>&nbsp;<option>commit file1 directory1</option>.
   </para>
   <para>
    If you change to another workstation, check out the synchronization
    repository if this has not been done during an earlier session at the
    same workstation.
   </para>
   <para>
    Start the synchronization with the server with
    <command>cvs</command>&nbsp;<option>update</option>. Update
    individual files or directories as in
    <command>cvs</command>&nbsp;<option>update file1 directory1</option>.
    To see the difference between the current files and the versions stored
    on the server, use the command
    <command>cvs</command>&nbsp;<option>diff</option> or
    <command>cvs</command>&nbsp;<option>diff file1 directory1</option>.
    Use <command>cvs</command>&nbsp;<option>-nq update</option> to see
    which files would be affected by an update.
   </para>
   <para>
    Here are some status symbols displayed during an update:
   </para>
   <variablelist>
    <varlistentry>
     <term>U</term>
     <listitem>
      <para>
       The local version was updated. This affects all files that are
       provided by the server and missing on the local system.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>M</term>
     <listitem>
      <para>
       The local version was modified. If there were changes on the server,
       it was possible to merge the differences in the local copy.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>P</term>
     <listitem>
      <para>
       The local version was patched with the version on the server.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>C</term>
     <listitem>
      <para>
       The local file conflicts with current version in the repository.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>?</term>
     <listitem>
      <para>
       This file does not exist in CVS.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The status <literal>M</literal> indicates a locally modified file.
    Either commit the local copy to the server or remove the local file and
    run the update again. In this case, the missing file is retrieved from
    the server. If you commit a locally modified file and the file was
    changed in the same line and committed, you might get a conflict,
    indicated with <literal>C</literal>.
   </para>
   <para>
    In this case, look at the conflict marks
    (<quote><literal>&gt;&gt;</literal></quote> and
    <quote><literal>&lt;&lt;</literal></quote>) in the file and decide
    between the two versions. As this can be a rather unpleasant job, you
    might decide to abandon your changes, delete the local file, and enter
    <command>cvs</command>&nbsp;<option>up</option> to retrieve the
    current version from the server.
   </para><indexterm class="endofrange" startref="idx.CVS"/><indexterm class="endofrange" startref="idx.files_synchronizing_CVS"/>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.net.sync.rsync">
  <title>Introduction to rsync</title><indexterm>

  <primary>rsync</primary></indexterm>

  <para>
   rsync is useful when large amounts of data need to be transmitted
   regularly while not changing too much. This is, for example, often the
   case when creating backups. Another application concerns staging servers.
   These are servers that store complete directory trees of Web servers that
   are regularly mirrored onto a Web server in a DMZ.
  </para>

  <sect2 xml:id="sec.net.sync.rsync.usage">
   <title>Configuration and Operation</title>
   <para>
    rsync can be operated in two different modes. It can be used to archive
    or copy data. To accomplish this, only a remote shell, like SSH, is
    required on the target system. However, rsync can also be used as a
    daemon to provide directories to the network.
   </para>
   <para>
    The basic mode of operation of rsync does not require any special
    configuration. rsync directly allows mirroring complete directories onto
    another system. As an example, the following command creates a backup of
    the home directory of &exampleuser; on a backup server named
    &exampleserver;:
   </para>
<screen>rsync -baz -e ssh<!--
   --> /home/&exampleuser_plain;/ &exampleuser_plain;@&exampleserver;:backup</screen>
   <para>
    The following command is used to play the directory back:
   </para>
<screen>rsync -az -e ssh<!--
   --> &exampleuser_plain;@&exampleserver;:backup /home/&exampleuser_plain;/</screen>
   <para>
    Up to this point, the handling does not differ much from that of a
    regular copying tool, like scp.
   </para>
   <para>
    rsync should be operated in <quote>rsync</quote> mode to make all its
    features fully available. This is done by starting the rsyncd daemon on
    one of the systems. Configure it in the file
    <filename>/etc/rsyncd.conf</filename>. For example, to make the
    directory <filename>/srv/ftp</filename> available with rsync, use the
    following configuration:
   </para>
<screen>gid = nobody
uid = nobody
read only = true
use chroot = no
transfer logging = true
log format = %h %o %f %l %b
log file = /var/log/rsyncd.log

[FTP]
        path = /srv/ftp
        comment = An Example</screen>
   <para>
    Then start rsyncd with <command>systemctl start
    rsyncd</command>. rsyncd can also be started automatically
    during the boot process. Set this up by activating this service in the
    &yast; <guimenu>Services Manager</guimenu> or by manually entering
    the command:
   </para>
<screen>&prompt.root; systemctl enable rsyncd</screen>
   <para>
<!--<remark>taroth 2014-02-25: systemd - what about xinetd? is this
    still valid?</remark> - taroth 2014-03-17: for the records, here fcrozat's
    answer: xinetd is still there (although systemd can provide similar  functionalities
    but the configuration is different)
   -->
    syncd can alternatively be started by xinetd. This is, however, only
    recommended for servers that rarely use rsyncd.
   </para>
   <para>
    The example also creates a log file listing all connections. This file
    is stored in <filename>/var/log/rsyncd.log</filename>.
   </para>
   <para>
    It is then possible to test the transfer from a client system. Do this
    with the following command:
   </para>
<screen>rsync -avz &exampleserver;::FTP</screen>
   <para>
    This command lists all files present in the directory
    <filename>/srv/ftp</filename> of the server. This request is also logged
    in the log file <filename>/var/log/rsyncd.log</filename>. To start an
    actual transfer, provide a target directory. Use <literal>.</literal>
    for the current directory. For example:
   </para>
<screen>rsync -avz &exampleserver;::FTP .</screen>
   <para>
    By default, no files are deleted while synchronizing with rsync. If this
    should be forced, the additional option <option>--delete</option> must
    be stated. To ensure that no newer files are deleted, the option
    <option>--update</option> can be used instead. Any conflicts that arise
    must be resolved manually.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.net.sync.summary">
  <title>For More Information</title>

  <variablelist>
   <varlistentry>
    <term>CVS</term>
    <listitem>
     <para>
      Important information about CVS can be found in the home page
      <link xlink:href="http://www.cvshome.org"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>rsync</term>
    <listitem>
     <para>
      Important information about rsync is provided in the man pages
      <command>man</command>&nbsp;<option>rsync</option> and
      <command>man</command>&nbsp;<option>rsyncd.conf</option>. A
      technical reference about the operating principles of rsync is
      featured in
      <filename>/usr/share/doc/packages/rsync/tech_report.ps</filename>.
      Find the latest news about rsync on the project Web site at
      <link xlink:href="http://rsync.samba.org/"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Subversion</term>
    <listitem>
     <para>
      Subversion is available from the &sle; SDK.
      The SDK is a module for &sle; and is available via an online channel from
      the &scc;.  Alternatively, go to <link
      xlink:href="http://download.suse.com/"/>, search for <literal>&sle;
      Software Development Kit</literal> and download it from there.
      Refer to <xref linkend="cha.add-ons"/> for details.
     </para>
    </listitem>
   </varlistentry>
  </variablelist><indexterm class="endofrange" startref="idx.files_syncronizing"/>
 </sect1>
</chapter>
