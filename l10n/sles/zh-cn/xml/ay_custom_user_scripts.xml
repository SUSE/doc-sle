<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="ay_custom_user_scripts.xml" version="5.0" xml:id="createprofile-scripts">  <title>自定义用户脚本</title>

 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker/>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>
    通过将脚本添加到自动安装过程，您可以根据自己的需求自定义安装，并实现对不同安装阶段的控制。
   </para>

   <para os="sles;sled;osuse">
    在自动安装过程中，可以在不同的时间点执行五种类型的脚本：
   </para>
   
    

   <para>
    所有脚本需位于 &lt;scripts&gt; 部分。
   </para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <literal>pre-scripts</literal>（初期，在任何其他操作尚未真正发生之前）
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>postpartitioning-scripts</literal>（在分区并挂载到 <filename>/mnt</filename> 之后，但在 RPM 安装之前）
     </para>
    </listitem>
    <listitem>
     <para>
      <literal>chroot-scripts</literal>（在安装软件包之后，首次引导之前）
     </para>
    </listitem>
    <listitem os="sles;sled;osuse">
     <para>
      <literal>post-scripts</literal>（在首次引导已安装系统期间，未运行任何服务）
     </para>
    </listitem>
    <listitem os="sles;sled;osuse">
     <para>
      <literal>init-scripts</literal>（在首次引导已安装的系统期间，所有服务已启动并正在运行）
     </para>
    </listitem>
   </itemizedlist>

   <sect2 xml:id="pre-install-scripts">
    <title>安装前脚本</title>
    <para>
     在 YaST 对系统进行任何实际更改之前执行（进行分区和软件包安装之前，但在硬件检测之后）。
    </para>
    <para>
     您可以使用安装前脚本来修改控制文件，并让 AutoYaST 重新读取控制文件。在 <filename>/tmp/profile/autoinst.xml</filename> 中找到您的控制文件。调整该文件，并将修改后的版本储存在 <filename>/tmp/profile/modified.xml</filename> 中。完成安装前脚本后，AutoYaST 将读取修改后的文件。
    </para>
    <para>
     还可以修改安装前脚本中的储存设备。例如，您可以创建新的分区，或更改某些技术（例如多路径）的配置。执行所有安装前脚本后，AutoYaST 始终会再次检查储存设备。
    </para>
    <note>
     <title>安装前脚本和确认</title>
     <para>
      安装前脚本于早期安装阶段执行。这意味着，如果您请求确认安装，则会先执行安装前脚本，然后再显示确认屏幕 (<literal>profile/install/general/mode/confirm</literal>)。
     </para>
    </note>
    <note>
     <title>安装前脚本和 Zypper</title>
     <para>
      要在安装前脚本中调用 <emphasis>Zypper</emphasis>，需要设置环境变量 <emphasis>ZYPP_LOCKFILE_ROOT="/var/run/autoyast"</emphasis>，以免与正在运行的 YaST 进程冲突。
     </para>
    </note>
    <para>
     必须按如下所示放置安装前脚本元素：
    </para>
<screen>&lt;scripts&gt;
  &lt;pre-scripts config:type="list"&gt;
    &lt;script&gt;
      ...
    &lt;/script&gt;
  &lt;/pre-scripts&gt;
&lt;/scripts&gt;</screen>
   </sect2>

   <sect2 xml:id="postpartitioning-install-scripts">
    <title>分区后脚本</title>
    <para>
     在 YaST 已完成分区并已写入 <filename>/etc/fstab</filename> 之后执行。空系统已挂载到 <filename>/mnt</filename>。
    </para>
    <para>
     必须按如下所示放置分区后脚本元素：
    </para>
<screen>&lt;scripts&gt;
  &lt;postpartitioning-scripts config:type="list"&gt;
    &lt;script&gt;
      ...
    &lt;/script&gt;
  &lt;/postpartitioning-scripts&gt;
&lt;/scripts&gt;</screen>
   </sect2>

   <sect2 xml:id="chroot-scripts">
    <title>Chroot 环境脚本</title>
    <para>
     Chroot 脚本是在首次重引导计算机之前执行的。您可以在安装 chroot 进入已安装的系统并配置引导加载程序之前执行 chroot 脚本，也可以在 chroot 进入已安装的系统之后（请查看 <literal>chrooted</literal> 参数来确定该状态）执行脚本。
    </para>
    <para>
     必须按如下所示放置 Chroot 环境脚本元素：
    </para>
<screen>&lt;scripts&gt;
  &lt;chroot-scripts config:type="list"&gt;
    &lt;script&gt;
      ...
    &lt;/script&gt;
  &lt;/chroot-scripts&gt;
&lt;/scripts&gt;</screen>
   </sect2>

   <sect2 os="sles;sled;osuse" xml:id="post-install-scripts">
    <title>安装后脚本</title>
    <para>
     这些脚本是在 AutoYaST 已完成系统配置并已首次引导系统之后执行的。
    </para>
    <para>
     必须按如下所示放置安装后脚本元素：
    </para>
<screen>&lt;scripts&gt;
    &lt;post-scripts config:type="list"&gt;
      &lt;script&gt;
        ...
      &lt;/script&gt;
    &lt;/post-scripts&gt;
  &lt;/scripts&gt;</screen>
   </sect2>

   <sect2 os="sles;sled;osuse" xml:id="init-scripts">
    <title>Init 脚本</title>
    <para>
     当 YaST 已完成，于已初始化网络之后的初始引导过程中会执行这些脚本。这些最终脚本是使用 <filename>/usr/lib/YaST2/bin/autoyast-initscripts.sh</filename> 执行的，并且只会执行一次。Init 脚本是使用标记 <emphasis>init-scripts</emphasis> 配置的。
    </para>
    <para>
     必须按如下所示放置 Init 脚本元素：
    </para>
<screen>&lt;scripts&gt;
    &lt;init-scripts config:type="list"&gt;
      &lt;script&gt;
        ...
      &lt;/script&gt;
    &lt;/init-scripts&gt;
&lt;/scripts&gt;</screen>

    <para>
     Init 脚本与其他脚本类型不同，因为它们不是由 YaST 执行，而是在 YaST 已完成后执行。因此，它们的 XML 表示不同于其他脚本类型。
    </para>
<variablelist>
  <title>Init 脚本 XML 表示</title>
  <varlistentry><term><literal>location</literal></term>
<listitem><para>
          定义从中提取脚本的位置。该位置可与配置文件的位置相同（HTTP、FTP、NFS 等）。
         </para><screen>&lt;location&gt;http://10.10.0.1/myInitScript.sh&lt;/location&gt;</screen><para>
          必须定义 &lt;location&gt; 或 &lt;source&gt;。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>source</literal></term>
<listitem><para>
          脚本本身（源代码），封装在 CDATA 标记中。如果您不想将整个外壳脚本放入 XML 配置文件，请使用位置参数。
         </para><screen>&lt;source&gt;
&lt;![CDATA[echo "Testing the init script" &gt;/tmp/init_out.txt]]&gt;&lt;/source&gt;</screen><para>
          必须定义 &lt;location&gt; 或 &lt;source&gt;。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>filename</literal></term>
<listitem><para>
          脚本的文件名。此文件将储存在 <filename>/tmp</filename> 下的临时目录中。</para><screen>&lt;filename&gt;mynitScript5.sh&lt;/filename&gt;</screen><para>
          如果您只有一个 init 脚本，则此元素是可选的。在这种情况下，将使用默认名称 (<filename>init-scripts</filename>)。如果您指定了多个 init 脚本，则必须为每个脚本设置唯一的名称。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>rerun</literal></term>
<listitem><para>
          正常情况下，一个脚本只运行一次，即使您使用 <literal>ayast_setup</literal> 多次运行 XML 文件也是如此。将此布尔值设置为 <literal>true</literal> 可更改此默认行为。
         </para><screen>&lt;rerun config:type="boolean"&gt;true&lt;/rerun&gt;</screen><para>
          可选。默认值为 <literal>false</literal>（脚本只运行一次）。
         </para></listitem>
</varlistentry>
</variablelist>
    <para>
     手动将脚本添加到控制文件时，需将脚本包含在 <emphasis>CDATA</emphasis> 元素中，以避免与文件语法以及控制文件中定义的其他标记产生混淆。
    </para>
   </sect2>

   <sect2 xml:id="scripts-syntax">
    <title>脚本 XML 表示</title>
    <para os="sles;sled;osuse">
     下面所述的大多数 XML 元素都可用于上述所有脚本类型，但 <emphasis>init 脚本</emphasis>除外，此类脚本的定义可能只包含这些元素的一部分。有关此类脚本的更多信息，请参见<xref linkend="init-scripts"/>。
    </para>
    
    <important os="sles;sled;osuse">
      <title>弃用的元素</title>
      <para>
       <literal>debug</literal> 元素已弃用，在将来的版本中可能会将其去除。为适应此情况，请在 <literal>interpreter</literal> 中使用解释器特定的调试参数。例如，不要使用 &lt;interpreter&gt;shell&lt;/interpreter&gt;，而是使用 &lt;interpreter&gt;/bin/sh -x&lt;/interpreter&gt;，其效果等同于启用 <literal>debug</literal> 标志。
      </para>
    </important>
<variablelist>
  <title>脚本 XML 表示</title>
  <varlistentry><term><literal>location</literal></term>
<listitem><para>
          定义从中提取脚本的位置。该位置可与控制文件的位置相同（HTTP、FTP、NFS 等）。此外，也可以使用相对 URL 来定义控制文件所在目录的相对路径，语法为 <literal>relurl://script.sh</literal>。
         </para><screen>&lt;location&gt;http://10.10.0.1/myPreScript.sh&lt;/location&gt;</screen><para>
          必须定义 <literal>location</literal> 或 <literal>source</literal>。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>source</literal></term>
<listitem><para>
          脚本本身（源代码），封装在 CDATA 标记中。如果您不想将整个外壳脚本放入 XML 控制文件，请引用位置参数。
         </para><screen>&lt;source&gt;
&lt;![CDATA[
echo "Testing the pre script" &gt; /tmp/pre-script_out.txt
]]&gt;
&lt;/source&gt;</screen><para>
          必须定义 <literal>location</literal> 或 <literal>source</literal>。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>interpreter</literal></term>
<listitem><para>
          指定必须为脚本使用的解释器。可以指定给定环境中任何可用的解释器。您可以提供解释器的完整路径，包括参数。<literal>debug</literal> 标志支持的关键字解释器“shell”、“perl”和“python”也已弃用。
         </para><screen>&lt;interpreter&gt;/bin/bash -x&lt;/interpreter&gt;</screen><para>
          可选；默认值为 <literal>shell</literal>。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>file name</literal></term>
<listitem><para>
          脚本的文件名。此文件将储存在 <filename>/tmp</filename> 下的临时目录中。
         </para><screen>&lt;filename&gt;myPreScript5.sh&lt;/filename&gt;</screen><para>
          可选；默认值为脚本的类型（在本例中为 pre-scripts）。如果您有多个脚本，应该为每个脚本定义不同的名称。如果未定义 <literal>filename</literal>，但定义了 <literal>location</literal>，将会使用该位置路径中的文件名。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>feedback</literal></term>
<listitem><para>
          如果此布尔值为 <literal>true</literal>，则会在弹出窗口中显示脚本的输出和错误消息（STDOUT 和 STDERR）。用户需要通过“确定”按钮确认这些消息。
         </para><screen>&lt;feedback config:type="boolean"&gt;true&lt;/feedback&gt;</screen><para>
          可选；默认值为 <literal>false</literal>。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>feedback_type</literal></term>
<listitem><para>
          可以是 <literal>message</literal>、<literal>warning</literal> 或 <literal>error</literal>。在 &lt;report&gt; 部分设置这些弹出窗口的超时。
         </para><screen>&lt;feedback_type&gt;warning&lt;/feedback_type&gt;</screen><para>
          可选；如果未指定，将使用始终阻止弹出窗口。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>debug</literal></term>
<listitem><para>
          如果此元素为 <literal>true</literal>，将记录外壳脚本的每一行。将在打开警告的情况下运行 Perl 脚本。这仅适用于弃用的关键字 <literal>interpreter</literal>。对于其他语言，请在 <literal>interpreter</literal> 值中以参数形式提供解释器的路径，例如“&lt;interpreter&gt;ruby -w&lt;/interpreter&gt;”。
         </para><screen>&lt;debug config:type="boolean"&gt;true&lt;/debug&gt;</screen><para>
          可选；默认值为 <literal>true</literal>。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>notification</literal></term>
<listitem><para>
          将会根据脚本在后台运行的时间长短在弹出窗口中显示此文本。
         </para><screen>&lt;notification&gt;Please wait while script is running...&lt;/notification&gt;</screen><para>
          可选；如果未配置，则不显示通知弹出窗口。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>param-list</literal></term>
<listitem><para>
          可以指定提供给所要调用的脚本的参数。您可以指定多个 <literal>param</literal> 项。在脚本命令行上使用单个空格字符串联这些项。如果必须指定任何外壳引用（例如，为了保护嵌入的空格），则需要包含此元素。
         </para><screen>&lt;param-list config:type="list"&gt;
  &lt;param&gt;par1&lt;/param&gt;
  &lt;param&gt;par2 par3&lt;/param&gt;
  &lt;param&gt;"par4.1 par4.2"&lt;/param&gt;
&lt;/param-list&gt;</screen><para>
          可选；如果未配置，则不会将任何参数传递给脚本。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>rerun</literal></term>
<listitem><para>
          一个脚本只运行一次。即使您使用 <literal>ayast</literal>_setup 多次运行 XML 文件，该脚本也只运行一次。将此布尔值设置为 <literal>true</literal> 可更改此默认行为。
         </para><screen>&lt;rerun config:type="boolean"&gt;true&lt;/rerun&gt;</screen><para>
          可选；默认值为 <literal>false</literal>，表示脚本只运行一次。
         </para></listitem>
</varlistentry>
  <varlistentry><term><literal>chrooted</literal></term>
<listitem><para>
          在安装期间，新系统将挂载到 <filename>/mnt</filename>。如果此参数设置为 <literal>false</literal>，AutoYaST 将不运行 <command>chroot</command>，并且在此阶段不会安装引导加载程序。如果该参数设置为 <literal>true</literal>，则 AutoYaST 会执行 <command>chroot</command> 进入 <filename>/mnt</filename> 并安装引导加载程序。结果是，您不再需要使用 <filename>/mnt</filename> 前缀就能更改新安装系统中的任何设置。
         </para><screen>&lt;chrooted config:type="boolean"&gt;true&lt;/chrooted&gt;</screen><para>
          可选；默认值为 <literal>false</literal>。此选项仅适用于 chroot 环境脚本。
         </para></listitem>
</varlistentry>
</variablelist>
   </sect2>

   <sect2 os="sles;sled;osuse" xml:id="script-examples">
    <title>脚本示例</title>
    <example>
     <title>脚本配置</title>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE profile&gt;
&lt;profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns"&gt;
&lt;scripts&gt;
  &lt;chroot-scripts config:type="list"&gt;
    &lt;script&gt;
      &lt;chrooted config:type="boolean"&gt;true&lt;/chrooted&gt;
      &lt;filename&gt;chroot-post.sh&lt;/filename&gt;
      &lt;interpreter&gt;shell&lt;/interpreter&gt;
      &lt;source&gt;&lt;![CDATA[
echo "Testing chroot (chrooted) scripts"
ls
]]&gt;
      &lt;/source&gt;
    &lt;/script&gt;
    &lt;script&gt;
      &lt;filename&gt;chroot-pre.sh&lt;/filename&gt;
        &lt;interpreter&gt;/bin/bash -x&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
echo "Testing chroot scripts"
df
cd /mnt
ls
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/chroot-scripts&gt;
    &lt;post-scripts config:type="list"&gt;
      &lt;script&gt;
        &lt;filename&gt;post.sh&lt;/filename&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
echo "Running Post-install script"
systemctl start portmap
mount -a 192.168.1.1:/local /mnt
cp /mnt/test.sh /tmp
umount /mnt
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
      &lt;script&gt;
        &lt;filename&gt;post.pl&lt;/filename&gt;
        &lt;interpreter&gt;perl&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
print "Running Post-install script";
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/post-scripts&gt;
    &lt;pre-scripts config:type="list"&gt;
      &lt;script&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;location&gt;http://192.168.1.1/profiles/scripts/prescripts.sh&lt;/location&gt;
      &lt;/script&gt;
      &lt;script&gt;
        &lt;filename&gt;pre.sh&lt;/filename&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
echo "Running pre-install script"
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/pre-scripts&gt;
    &lt;postpartitioning-scripts config:type="list"&gt;
      &lt;script&gt;
        &lt;filename&gt;postpart.sh&lt;/filename&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;debug config:type="boolean"&gt;false&lt;/debug&gt;
        &lt;feedback config:type="boolean"&gt;true&lt;/feedback&gt;
        &lt;source&gt;&lt;![CDATA[
touch /mnt/testfile
echo Hi
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/postpartitioning-scripts&gt;
  &lt;/scripts&gt;
&lt;/profile&gt;</screen>
    </example>
    <para>
     完成安装后，可以在 <filename>/var/adm/autoinstall</filename> 目录中找到脚本和输出日志。脚本位于 <filename>scripts</filename> 子目录中，输出日志位于 <filename>log</filename> 目录中。
    </para>
    <para>
     日志中包含执行脚本时产生的输出，包括标准输出和标准错误输出的组合。
    </para>
    <para>
     如果脚本以非零退出代码结束，一条包含日志内容的警告将会显示，除非提供了 <literal>feedback</literal> 选项。
    </para>
   </sect2>
  </sect1>
