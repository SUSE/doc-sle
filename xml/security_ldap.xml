<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-ldap">
 <title>LDAP&mdash;A Directory Service</title>
 <info>
      <abstract>
        <para>
    The Lightweight Directory Access Protocol (LDAP) is a protocol
    designed to access and maintain information directories. LDAP can be
    used for user and group management, system configuration management,
    address management, and more. This chapter provides a basic
    understanding of how LDAP works.
   </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>

  <para>
   Ideally, a central server stores the data in a directory and distributes
   it to all clients using a well-defined protocol. The structured data allow
   a wide range of applications to access them. A central repository reduces
   the necessary administrative effort. The use of an open and standardized
   protocol such as LDAP ensures that as many client applications as
   possible can access such information.
  </para>
  <para>
   A directory in this context is a type of database optimized for quick and
   effective reading and searching. The type of data stored in a directory tends
   to be long lived and changes infrequently. This allows the LDAP service to be
   optimized for high performance concurrent reads, whereas conventional databases
   are optimized for accepting many writes to data in a short time.
  </para>

 <sect1 xml:id="sec-security-ldap-tree">
  <title>Structure of an LDAP Directory Tree</title>
<!--
  taroth 2019-02-27: acc. to wbrown the content of this section is still correct,
  but the section should be revised in the future - for input, see
  https://fy.blackhats.net.au/blog/html/pages/ldap_guide_part_1_foundations.html
-->
   <para>
   This section introduces the layout of an LDAP directory tree, and provides
   the basic terminology used with regard to LDAP. <phrase os="sles;osuse">If
    you are familiar with LDAP, read on at <xref linkend="sec-security-ldap-server"/>.
   </phrase>
  </para>

  <para>
   An LDAP directory has a tree structure. All entries (called objects) of
   the directory have a defined position within this hierarchy. This
   hierarchy is called the <emphasis>directory information tree</emphasis>
   (DIT). The complete path to the desired entry, which unambiguously
   identifies it, is called the <emphasis>distinguished name</emphasis> or
   DN. An object in the tree is identified by its <emphasis>relative distinguished
   name</emphasis> (RDN). The distinguished name is built from the RDNs of all
   entries on the path to the entry.
  </para>

  <para>
   The relations within an LDAP directory tree become more evident in the
   following example, shown in <xref linkend="fig-ldap-tree"/>.
  </para>

  <figure xml:id="fig-ldap-tree">
   <title>Structure of an LDAP Directory</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ldap_tree.svg" width="85%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ldap_tree.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   The complete diagram is a fictional directory information tree. The
   entries on three levels are depicted. Each entry corresponds to one box
   in the image. The complete, valid <emphasis>distinguished name</emphasis>
   for the fictional employee <systemitem class="username">Geeko
   Linux</systemitem>, in this case, is <literal>cn=Geeko
   Linux,ou=doc,dc=example,dc=com</literal>. It is composed by adding the
   RDN <literal>cn=Geeko Linux</literal> to the DN of the preceding entry
   <literal>ou=doc,dc=example,dc=com</literal>.
  </para>

<!-- ke: yes, these things are called "Schema" -->

  <para>
   The types of objects that can be stored in the DIT are globally
   determined following a <emphasis>Schema</emphasis>. The type of an object
   is determined by the <emphasis>object class</emphasis>. The object class
   determines what attributes the relevant object must or may be assigned.
   The Schema contains all object classes and attributes which can be used by
   the LDAP server. Attributes are a structured data type. Their syntax, ordering
   and other behavior is defined by the Schema. LDAP servers supply a core set of
   Schemas which can work in a broad variety of environments. If a custom Schema
   is required, you can upload it to an LDAP server.
  </para>

  <para>
   <xref linkend="tab-ldap-schema"/> offers a small overview of the object
   classes from <filename>00core.ldif</filename> and
   <filename>06inetorgperson.ldif</filename> used in the example, including
   required attributes (Req. Attr.) and valid attribute values. After installing
   <systemitem>389-ds</systemitem>, these can be found in
   <filename>usr/share/dirsrv/schema</filename>.
<!-- intro abbrev "Req. Attr." too shorten the table header -->
  </para>

  <table xml:id="tab-ldap-schema">
   <title>Commonly Used Object Classes and Attributes</title>
   <tgroup cols="4">
    <colspec colname="c1" colwidth="30*"/>
    <colspec colname="c2" colwidth="40*"/>
    <colspec colname="c3" colwidth="16*"/>
    <colspec colname="c4" colwidth="14*"/>
    <thead>
     <row>
      <entry>
       <para>
        Object Class
       </para>
      </entry>
      <entry>
       <para>
        Meaning
       </para>
      </entry>
      <entry>
       <para>
        Example Entry
       </para>
      </entry>
      <entry>
       <para>
        Req. Attr.
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <literal>domain</literal>
       </para>
      </entry>
      <entry>
       <para>
        name components of the domain
       </para>
      </entry>
      <entry>
       <para>
        example
       </para>
      </entry>
      <entry>
       <para>
        displayName
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>organizationalUnit</literal>
       </para>
      </entry>
      <entry>
       <para>
        organizational unit
       </para>
      </entry>
      <entry>
       <para>
        doc
       </para>
      </entry>
      <entry>
       <para>
        ou
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <literal>nsPerson</literal>
       </para>
      </entry>
      <entry>
       <para>
        person-related data for the
        intranet or Internet
       </para>
      </entry>
      <entry>
       <para>
        Geeko Linux
       </para>
      </entry>
      <entry>
       <para>
        cn
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   <xref linkend="aus-ldap-schema-help"/> shows an excerpt from a Schema
   directive with explanations.
  </para>

  <example xml:id="aus-ldap-schema-help">
   <title>Excerpt from CN=schema</title>
<screen>attributetype (1.2.840.113556.1.2.102 NAME 'memberOf' <co xml:id="co-ldap-schema-core-att-type"/>
       DESC 'Group that the entry belongs to' <co xml:id="co-ldap-schema-core-desc"/>
       SYNTAX 1.3.6.1.4.1.1466.115.121.1.12 <co xml:id="co-ldap-schema-core-syntax"/>
       X-ORIGIN 'Netscape Delegated Administrator') <co xml:id="co-ldap-schema-core-xorigin"/>

objectclass (2.16.840.1.113730.3.2.333 NAME 'nsPerson' <co xml:id="co-ldap-schema-core-oc"/>
       DESC 'A representation of a person in a directory server' <co xml:id="co-ldap-schema-core-desc-oc"/>
       SUP top STRUCTURAL <co xml:id="co-ldap-schema-core-sup-oc"/>
       MUST ( displayName $ cn ) <co xml:id="co-ldap-schema-core-must-oc"/>
       MAY ( userPassword $ seeAlso $ description $ legalName $ mail \
             $ preferredLanguage ) <co xml:id="co-ldap-schema-core-may-oc"/>
       X-ORIGIN '389 Directory Server Projectâ€™
  ...</screen>
  </example>
  <calloutlist>
   <callout arearefs="co-ldap-schema-core-att-type">
    <para>
     The name of the attribute, its unique <emphasis>object
     identifier</emphasis> (OID, numerical), and the abbreviation of the
     attribute.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-desc">
    <para>
     A brief description of the attribute with <literal>DESC</literal>. The
     corresponding RFC, on which the definition is based, may also mentioned
     here.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-syntax">
    <para>
      The type of data that can be held in the attribute. In this case, it is a
      case-insensitive directory string.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-xorigin">
    <para>
     The source of the schema element (for example, the name of the project).
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-oc">
    <para>
     The definition of the object class <literal>nsPerson</literal> begins with
     an OID and the name of the object class (like the definition of
     the attribute).
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-desc-oc">
    <para>
     A brief description of the object class.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-sup-oc">
    <para>
     The <literal>SUP top</literal> entry indicates that this object class
     is not subordinate to another object class.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-must-oc">
    <para>
     With <literal>MUST</literal> list all attribute types that must be used
     with an object of the type
     <literal>nsPerson</literal>.
    </para>
   </callout>
   <callout arearefs="co-ldap-schema-core-may-oc">
    <para>
     With <literal>MAY</literal> list all attribute types that are optionally
     permitted with this object class.
    </para>
   </callout>
  </calloutlist>
 </sect1>

 <sect1 xml:id="sec-security-ldap-server-install">
  <title>Installing the Software for &ds389;</title>
   <para>
    The <systemitem>389-ds</systemitem> package contains the &ds389; and the
    administration tools. Install it with the following command:
    </para>
    <screen>&prompt.sudo;zypper install 389-ds</screen>
    <para>
     After installation, you can set up the server 
     <phrase os="sles;osuse">as described in <xref linkend="sec-security-ldap-server"
      xrefstyle="select:label"/>.</phrase>      
     <!--or create a
     very basic setup with &yast; <phrase os="sles;osuse">(as described in
      <xref linkend="sec-security-ldap-server-yast"
     xrefstyle="select:label"/>)</phrase>.-->
    </para>
 </sect1>

 <sect1 xml:id="sec-security-ldap-server">
  <title>Setting up a &ds389; Testing and Development Instance</title>
  <para>
   Follow these steps to set up a simple instance for testing and development, 
   populated with a small set of sample entries.
  </para>
  <procedure>
   <step>
    <para>
     <!--Creating the Directory Server Instance-->
     <xref linkend="sec-security-ldap-server-instance" xrefstyle="select:title"/>
    </para>
   </step>
    <!-- <step>
  <para>
     Using CA Certificates for TLS Connections
      <xref linkend="sec-security-ldap-server-ca" xrefstyle="select:title"/>
    </para>
    </step> -->
   <step>
    <para>
     <!--Configuring Admin Credentials for Local Access-->
      <xref linkend="sec-security-ldap-server-credentials" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
    <!--Configuring Users and Groups-->
     <xref linkend="sec-security-ldap-server-users" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
    <!--Configuring SSSD-->
     <xref linkend="sec-security-ldap-server-sssd" xrefstyle="select:title"/>
    </para>
   </step>
  </procedure>
  <para>
   <remark>taroth 2019-06-19: some topics like 'configuring other applications'
    and 'backup and restore' to be added later on</remark>
  </para>
   <!--
    *  configuring other applications (showing "dsidm instance client_config display")
    * backup and restore
   -->
   <para>
   The &ds389; is controlled by three primary commands:
  </para>
  <variablelist>
   <varlistentry>
    <term><command>dsctl</command></term>
    <listitem>
     <para>
      Manages a local instance and requires &rootuser; permissions. Requires you
      to be connected to a terminal which is running the directory server instance.
      Used for starting, stopping, backing up the database, and more.
     </para>
    </listitem>
   </varlistentry>
    <varlistentry>
     <term><command>dsconf</command></term>
     <listitem>
      <para>
       The primary tool used for administration and configuration of the server.
       Manages an instance's configuration via its external interfaces. This allows
       you to make configuration changes remotely on the instance.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>dsidm</command></term>
     <listitem>
      <para>
       Used for identity management (managing users, groups, passwords etc.).
       The permissions are granted by access controls, so, for example, users can
       reset their own password or change details of their own account.
      </para>
     </listitem>
    </varlistentry>
  </variablelist>

  <sect2 xml:id="sec-security-ldap-server-instance">
  <title>Creating a &ds389; Instance with a Custom Configuration File</title>
    <para>
     Use the <command>dscreate</command> command to create a new &ds389; instance.
     There are several ways to create a new instance: interactively, from a 
     template file, and using a custom configuration file.
     In this section you will learn how to use a custom configuration file. This 
     file must be in the INF format. You may name it anything you like.
    </para>
    <para>
       The default instance name is <literal>localhost</literal>. The instance 
       name cannot be changed after it has been created. It is better
       to create your own instance name, rather than using the default, to avoid 
       confusion and to enable a better understanding of how it all works.
    </para>
    <para>
     <xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/> shows an
     example configuration file that you can use to create a new &ds389; instance.
     You may copy and use this file, though be sure to create your own password.
    </para>
   <procedure>
    <step>
     <para>
      Copy the following example file, <filename>389ds-test.inf</filename>, to 
      your home directory:
     </para>
     <example xml:id="ex-ldap-389-ds-inf">
      <title>Minimal &ds389; Instance Configuration File</title>
      <screen># <replaceable>389ds-test.inf</replaceable>
          
[general]
config_version = 2 <co xml:id="co-ldap-389-ds-config-version"/>

[slapd]
root_password = <replaceable>password</replaceable><co xml:id="co-ldap-389-ds-rootpasswd"/>
self_sign_cert = True <co xml:id="co-ldap-389-ds-cert"/>
instance_name = <replaceable>389ds-test</replaceable>

[backend-userroot]
sample_entries = yes <co xml:id="co-ldap-389-ds-sample-entries"/>
suffix = <replaceable>dc=test1,dc=com</replaceable></screen>

      <calloutlist>
       <callout arearefs="co-ldap-389-ds-config-version">
        <para>
         This line is required, indicating that this is a version 2 setup INF
         file.
        </para>
       </callout>
       <callout arearefs="co-ldap-389-ds-rootpasswd">
        <para>
         Create a <varname>root_password</varname> for
         the ldap user <literal>cn=Directory Manager</literal>. This user is for
         connecting (binding) to the directory.
        </para>
       </callout>
       <callout arearefs="co-ldap-389-ds-cert">
        <para>
         Create self-signed server certificates in 
         <filename>/etc/dirsrv/slapd-<replaceable>instance-name</replaceable></filename>.
        </para>
       </callout>
       <callout arearefs="co-ldap-389-ds-sample-entries">
        <para>
         Populate the new instance with sample user and group entries.
        </para>
       </callout>       
      </calloutlist>
     </example>
   </step>
   <step>
    <para>
     To create the &ds389; instance from <xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/>, run the following command:
    </para>
    <screen>&prompt.sudo;dscreate -v from-file 389ds-test.inf | tee 389ds-test-output.txt</screen>
    <para>
     This shows all activity during the instance creation, stores all the messages in
     <filename>389ds-test-output.txt</filename>, and creates a working 
     LDAP server in about a minute. The verbose output contains a lot of useful
     information. If you don't want to save it then delete the 
     <literal>| tee 389ds-test-output.txt</literal> portion of the command.
    </para>
   </step>
   <step>
    <para>
     If the <command>dscreate</command> command should fail, the messages will 
     tell you why. After correcting any issues remove the instance 
     (see <xref linkend="sec-security-ldap-server-remove"/>) and create a
     new instance.    
    </para>
   </step>
   <step>
    <para>
     A successful installation reports "<literal>Completed installation for 
     389ds-test</literal>". Check the status of your new server:
    </para>
    <screen>&prompt.sudo;dsctl 389ds-test status
Instance "389ds-test" is running</screen>
   </step>
   <step xml:id="sec-security-ldap-server-remove">
    <para>
     The following commands are for cleanly removing the instance. The first 
     command performs a dry-run and does not remove the instance. When are you 
     sure you want to remove it, use the second command with the
     <command>--do-it</command> option:
    </para>
    <screen>&prompt.sudo;dsctl 389ds-test remove
Not removing: if you are sure, add --do-it

&prompt.sudo;dsctl 389ds-test remove --do-it</screen>
    <para>
     This command also removes partially-installed or corrupted instances. You 
     may reliably create and remove instances as much as you want.
    </para>
   </step>
  </procedure>
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-server-credentials">
  <title>Configuring Admin Credentials for Local Administration</title>
   <para>
    For local administration of the &ds389;, you can create a
    <filename>.dsrc</filename> configuration file in the <filename>/root</filename>
    directory, allowing root and sudo users to administer the server without
    typing connection details with every command. 
    <xref linkend="ex-security-ldap-server-credentials-local" xrefstyle="select:label"/> 
    shows an example for local administration on the server.
   </para>
   <para>
     After creating your <filename>/root/.dsrc</filename> file, try a few
     administration commands, such as creating new users (see 
     <xref linkend="sec-security-ldap-server-users"/>).
   </para>
   <example xml:id="ex-security-ldap-server-credentials-local">
    <title>A <filename>.dsrc</filename> File for Local Administration</title>
     <screen># /root/.dsrc file for administering 389ds-test
         
[<replaceable>389ds-test</replaceable>] <co xml:id="co-ldap-server-dsrc-instance-name"/>

uri = ldapi://<replaceable>%%2fvar%%2frun%%2fslapd-389ds-test.socket</replaceable> <co xml:id="co-ldap-server-dsrc-remote-ldapi"/>
basedn = <replaceable>dc=test1,dc=com</replaceable>
binddn = cn=Directory Manager
</screen>
   <calloutlist>
    <callout arearefs="co-ldap-server-dsrc-instance-name">
      <para>
        This must specify the instance name that you created in your
        INF file.
      </para>
    </callout>       
    <callout arearefs="co-ldap-server-dsrc-remote-ldapi">
      <para>
        <literal>ldapi</literal> detects the UID and GID of the user attempting 
        to log in to the server. If the UID/GID are <literal>0/0</literal> or
        <literal>dirsrv:dirsrv</literal>, <literal>ldapi</literal> binds the user 
        as the directory server root dn, which is 
        <literal>cn=Directory Manager</literal>.
      </para>
      <para>
        In the URI the slashes are replaced with <literal>%%2f</literal>, so
        in this example the path is 
        <filename>/var/run/slapd-389/slapd-389ds-test.socket</filename>.
      </para> 
    </callout>
   </calloutlist>
  </example>
 <!-- WIP, need to address privileges more completely cschroder 23-11-2020      <para>
        You may also copy <filename>.dsrc</filename> to your home directory, for
        running commands that do not need root privileges, such as listing 
        users and groups:
      </para>
      <screen>&prompt.user;dsidm 389ds-test user list
demo_user
&prompt.user;dsidm 389ds-test group list
demo_group</screen>
     <para>
       If you run a command that requires elevated privileges, such as creating
       new users, you will see an "Error: Insufficient access" message.
  </para> -->
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-users">
  <title>Configuring LDAP Users and Groups</title>
   <para>
    Users and groups can be created and managed with the <command>dsidm</command>
    command. It runs interactively, or you can run it on the command line, and
    list all options in a single command. 
   </para>
  <para>
   In the following example we add two users, &exampleuserII; and &exampleuserIII;,
   by specifying their data via command-line arguments.
  </para>
  <procedure xml:id="pro-security-ldap-server-users">
   <title>Creating LDAP Users</title>
   <step>
    <para>
    Create the user &exampleuserII;:
    </para>
    <screen>&prompt.sudo;<command>dsidm</command> localhost user create --uid &exampleuserII; \
  --cn &exampleuserII; --displayName '&exampleuserIIfull;' --uidNumber 1000 --gidNumber 1000 \
  --homeDirectory /home/&exampleuserII;</screen>
   </step>
   <step>
    <para>
     To look up a user's <literal>distinguished name</literal> (fully qualified
     name to the directory object, which is guaranteed unique):
    </para>
    <screen>&prompt.sudo;dsidm localhost user get &exampleuserII;
dn: uid=&exampleuserII;,ou=people,dc=example,dc=com
[...]</screen>
    <para>
     You need the distinguished name for actions such as changing the password
     for a user.
    </para>
   </step>
   <step>
    <para>
     To set or change the password for &exampleuserII;:
    </para>
    <substeps>
      <step>
       <screen>&prompt.sudo;dsidm localhost account reset_password \
  uid=&exampleuserII;,ou=people,dc=example,dc=com</screen>
       <para>
        The system prompts you for the directory server &rootuser; user password
        (unless you configured remote or local access as described in <xref
        linkend="sec-security-ldap-server-credentials"/>).
       </para>
      </step>
      <step>
       <para>
        Enter the new password for &exampleuserII; twice.
       </para>
       <para>
        If the action was successful, you get the following message:
       </para>
       <screen>reset password for uid=&exampleuserII;,ou=people,dc=example,dc=com</screen>
      </step>
    </substeps>
   </step>
   <step>
    <para>Create the user &exampleuserIII;:</para>
    <screen>&prompt.sudo;<command>dsidm</command> localhost user create --uid \
  --cn &exampleuserIII; --displayName '&exampleuserIIIfull;' \
  --uidNumber 1001 --gidNumber 1001 --homeDirectory /home/&exampleuserIII;
&prompt.sudo;reset password for uid=&exampleuserII;,ou=people,dc=example,dc=com
  </screen>
   </step>
  </procedure>
  <procedure xml:id="pro-security-ldap-server-groups">
   <title>Creating LDAP Groups and Assigning Users to Them</title>
   <para>
    In the following, we create a group, <systemitem
     class="groupname">server_admins</systemitem>, and assign the user
    &exampleuserII; to this group.</para>
   <step>
    <para>
     Create the group:
    </para>
    <screen>&prompt.sudo;dsidm localhost group create</screen>
    <para>
     You will be prompted for a group name:
    </para>
    <screen>Enter value for cn :</screen>
   </step>
   <step>
    <para>
     Enter the name for the group, for example: <literal>server_admins</literal>.
    </para>
   </step>
   <step>
    <para>
     Add the user &exampleuserII; to the group:
    </para>
    <screen>&prompt.sudo;dsidm localhost group add_member server_admins uid=&exampleuserII;,ou=people,dc=example,dc=com
added member: uid=&exampleuserII;,ou=people,dc=example,dc=com</screen>
   </step>
   <step>
    <para>
     Verify if authentication works:
    </para>
   <screen>&prompt.sudo;ldapwhoami -H ldaps://localhost -D \
  uid=&exampleuserII;,ou=people,dc=example,dc=com -W -x</screen>
    <para>
     If you are prompted for the LDAP password of &exampleuserII;, authentication works.
    </para>
    <para>
     If the command fails with the following error, you are probably using a
     self-signed certificate:
    </para>
    <screen>ldap_sasl_bind(SIMPLE): Can't contact LDAP server (-1)</screen>
    <para>
     In that case, edit <filename>/etc/openldap/ldap.conf</filename> and add the
     path to the certificate. For example:
    </para>
    <screen>TLS_CACERT /etc/dirsrv/slapd-localhost/ca.crt</screen>
    <para>
     Alternatively, include the path to the certificate in the
     <filename>whoami</filename> command:
    </para>
    <screen>&prompt.sudo;LDAPTLS_CACERT=/etc/dirsrv/slapd-localhost/ca.crt \
  ldapwhoami -H ldaps://localhost -D \
  uid=&exampleuserII;,ou=people,dc=example,dc=com -W -x</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-sssd">
  <title>Setting Up SSSD</title>
  <para>
   SSSD (System Security Services Daemon) is a daemon that communicates with
   remote identity providers and allows <literal>pam</literal> and
   <literal>nsswitch</literal> to consume that data. SSSD can have multiple
   back-ends, cache users and groups and provides features like SSH key
   distributions.
  </para>
  <procedure>
   <step>
     <para>On a separate server, install the <systemitem>sssd</systemitem> package:
     </para>
    <screen>&prompt.sudo;zypper in sssd</screen>
   </step>
   <step>
    <para>
     Disable and stop the <systemitem class="daemon">nscd</systemitem> daemon
     because it conflicts with <systemitem class="daemon">sssd</systemitem>:
    </para>
    <screen>&prompt.sudo;systemctl disable nscd &amp;&amp; systemctl stop nscd</screen>
   </step>
   <step>
    <para>
     Create the SSSD configuration and restrict the login to the members of the group <systemitem
     class="groupname">server_admins</systemitem> that we created in <xref
      linkend="pro-security-ldap-server-groups" xrefstyle="select:label"/>:
    </para>
    <tip>
     <para>
      The <literal>memberOf</literal> plugin needs to be enabled, so that
      clients can log in and authorise.
     </para>
    </tip>
    <screen>&prompt.sudo;dsidm localhost client_config sssd.conf server_admins</screen>
   </step>
   <step>
    <para>
     Review the output and paste (or redirect) it to <filename>/etc/sssd/sssd.conf</filename>.
     If required, edit the configuration file according to your needs.
    </para>
   </step>
   <step>
    <para>
     To configure the certificates on your client, copy <filename>ca.crt</filename>
     from the LDAP server to your client:</para>
    <screen>&prompt.sudo;mkdir -p /etc/openldap/certs
cp [...]>/ca.crt /etc/openldap/certs/
/usr/bin/c_rehash /etc/openldap/certs</screen>
   </step>
   <step>
    <para>
     Enable and start SSSD:
    </para>
    <screen>&prompt.sudo;systemctl enable sssd
systemctl start sssd</screen>
   </step>
   <step>
    <para>
     To make sure SSSD is part of PAM and NSS, follow the instructions in sections <citetitle>Configure PAM
      (&suse;)</citetitle> and <citetitle>Configure NSS (&suse;)</citetitle> at <link
     xlink:href="http://www.port389.org/docs/389ds/howto/howto-sssd.html"/>.
    </para>
   </step>
   <step>
    <para>
     Verify if the client can provide the details for user &exampleuserII;:
    </para>
    <screen>&prompt.sudo;id &exampleuserII;
    uid=1000(&exampleuserII;) gid=100(users) groups=100(users)</screen>
    <para>
     If everything is set up correctly, &exampleuserII; can access the &ds389;
     instance via SSH to the machine where you have installed and configured
     SSSD. However, &exampleuserIII; will fail to do so, because &exampleuserIII;
     does not belong to the group <literal>server_admins</literal> that we have
     configured in <xref linkend="pro-security-ldap-server-groups"
      xrefstyle="select:label"/>.
    </para>
   </step>
  </procedure>
 </sect2>
</sect1>

<!-- default installation uses self-signed cert -->
 <sect1 xml:id="sec-security-ldap-server-ca">
 <title>Using CA Certificates for TLS</title>
 <para>
  You can manage the CA certificates for &ds389; with the following command
  line tools: <command>certutil</command>, <command>openssl</command>, and
  <command>pk12util</command>.
 </para>
 <para>
  For testing purposes, you can create a self-signed certificate with
  <command>dscreate</command>. Find the certificate at
  <filename>/etc/dirsrv/slapd-localhost/ca.crt</filename>. For remote administration,
  copy the certificate to a readable location. For production environments,
  contact a CA authority of your organization's choice and request a server
  certificate, a client certificate, and a root certificate.
 </para>
 <para>
 Make sure to meet the following requirements before executing the procedure below:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You have a server certificate and a private key to use for the TLS connection.
   </para>
  </listitem>
  <listitem>
   <para>
    You have set up an NSS (Network Security Services) database (for example,
    with the <command>certutil</command> command).
   </para>
  </listitem>
 </itemizedlist>

 <procedure>
  <para>
  Before you can import an existing private key and certificate into the NSS
  (Network Security Services) database, you need to create a bundle of the
  private key and the server certificate. This results in a <filename>*.p12</filename>
  file.
  </para>
  <important>
  <title><filename>*.p12</filename> File and Friendly Name</title>
  <para>
   When creating the PKCS12 bundle, you must encode a friendly name
   in the <filename>*.p12</filename> file.
  </para>
  <para>
   Make sure to use <literal>Server-Cert</literal> as the friendly name. Otherwise
   the TLS connection will fail, because the &ds389; searches for this exact string.
  </para>
  <para>
    Keep in mind that the friendly name cannot be changed after you
    import the <filename>*.p12</filename> file into the NSS
    database.
  </para>
 </important>
 <step>
  <para>
   Use the following command to create the PKCS12 bundle with the required friendly name:
  </para>
 <screen>&prompt.root;openssl pkcs12 -export -in <replaceable>SERVER.crt</replaceable> \
  -inkey <replaceable>SERVER.key</replaceable> -out <replaceable>SERVER.p12</replaceable> \
  -name Server-Cert</screen>
  <para>
   Replace <replaceable>SERVER.crt</replaceable> with the server certificate
   and <replaceable>SERVER.key</replaceable> with the private key to be bundled.
   With <option>-out</option>, specify the name of the <filename>*.p12</filename>
   file. Use <option>-name</option> to set the friendly name to use:
   <literal>Server-Cert</literal>.
  </para>
 </step>
 <step>
   <para>
     Before you can import the file into the NSS database, you need to
     obtain its password. To do this, use the following command:
   </para>
<screen>pk12util -i <replaceable>PATH_TO_SERVER.p12</replaceable> -d sql:PATH_TO_NSS_DB -n Server-cert -W <replaceable>SERVER.p12_PASSWORD</replaceable></screen>
   <para>
     You can then find the password in the
     <filename>pwdfile.txt</filename> file in the
     <replaceable>PATH_TO_NSS_DB</replaceable> directory.
   </para>
 </step>
 <step>
  <para>
   Now import the <replaceable>SERVER.p12</replaceable> file
   into your NSS database:
  </para>
  <screen>pk12util -i <replaceable>SERVER.p12</replaceable> -d <replaceable>PATH_TO_NSS_DB</replaceable></screen>
 </step>
 </procedure>
 </sect1> 

<sect1 xml:id="sec-security-ldap-server-yast" os="sles;osuse">
 <title>Setting Up a &ds389; with &yast;</title>
  <para>
   You can use &yast; to quickly create a very basic setup of the &ds389;.
  </para>
  
 <sect2 xml:id="sec-security-ldap-server-yast-create">
  <title>Creating a &ds389; Instance with &yast;</title>
  <procedure>
   <step>
   <para>
    In &yast;, click <menuchoice>
    <guimenu>Network Services</guimenu>
    <guimenu>Create New Directory Server</guimenu>
   </menuchoice>. Alternatively, start the module from command line with
   <command>yast2 ldap-server</command>.
   </para>
   <para>
    In the window that opens, you need to fill in all mandatory text fields.
   </para>
  </step>
  <step>
   <para>
    Enter the <guimenu>Fully qualified domain name</guimenu> of the &ds389;.
    It must be resolvable from the host.
   </para>
  </step>
  <step>
   <para>
    In <guimenu>Directory server instance name</guimenu>, enter a local name for
    the LDAP server instance.</para>
   <note>
    <title>Instance Name</title>
    <para>
     The instance name <emphasis>cannot</emphasis> be changed after the instance
     has been created. If you plan for only one LDAP server, use the default
     instance name <literal>localhost</literal>. However, if you plan to host
     multiple LDAP servers, use meaningful names for the individual instances.
    </para>
   </note>
  </step>
  <step>
   <para>
   In <guimenu>Directory suffix</guimenu>, enter the base domain name of the LDAP
   tree. It is your domain name split by component. For example,
   <literal>example.com</literal> becomes <literal>dc=example,dc=com</literal>.
   </para>
  </step>
  <step>
   <para>
    In the mandatory security options, enter the password for the directory manager
    (LDAP's root/admin account) and repeat the password in the next step. The
    password must be at least 8 characters long.
   </para>
  </step>
    <step>
     <para>
      To run &ds389; with a CA certificate, specify both of the following options:
     </para>
     <substeps>
      <step>
       <para>
        Enter the path to the <guimenu>Server TLS certificate authority in PEM
        format</guimenu>, with which the server certificates have been signed.
        <remark>taroth 2020-01-22: string may be simplified in the future, see
         https://github.com/yast/yast-auth-server/issues/55</remark>
       </para>
      </step>
      <step>
       <para>
        Enter the path to the <guimenu>Server TLS certificate and key in PKCS12
        format with friendly name "Server-Cert"</guimenu>. The
        <filename>*.p12</filename> file contains the server's private key and
        certificate. These must have been signed by the CA in PEM format that you
        have specified above. The <guimenu>friendly name</guimenu> must be
        <literal>Server-Cert</literal>, see <xref linkend="sec-security-ldap-server-ca"/>
        for details.
        <remark>taroth 2020-01-22: string may be  simplified in the future, see
        https://github.com/yast/yast-auth-server/issues/55</remark>
       </para>
       <para>
        If you do not specify a CA certificate here, a self-signed certificate
        will be created automatically. After the instance has been created,
        find the related files in
        <filename>/etc/dirsrv/slapd-<replaceable>INSTANCENAME</replaceable></filename>.
       </para>
      </step>
     </substeps>
    </step>
   <step>
   <para>
    If you are ready to create the instance, click <guimenu>OK</guimenu>.
   </para>
   <informalfigure>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="yast2-ldap-server.png" width="95%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="yast2-ldap-server.png" width="90%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <para>&yast; displays a message stating whether the creation was successful and where
    to find the log files.
   </para>
  </step>
 </procedure>

 <!--taroth 2020-01-28: disabling reference to commented section-->
 <!--
 <para>
  After you have created the instance, you can configure LDAP users and groups
  as shown in <xref linkend="sec-security-ldap-yast-usergr" xrefstyle="select:label"/>.
 </para>
 <para>
  The setup with &yast; provides only a very basic configuration of the &ds389;.
  To fine-tune more settings, see <xref linkend="sec-security-ldap-server"/>
  or the documentation mentioned in <xref linkend="sec-security-ldap-info"/>.
 </para>
</sect2> -->

<!--taroth 2020-01-27: commenting this section for now as agreed with firstyear-->
<!--<sect2 xml:id="sec-security-ldap-yast-usergr">
  <title>Configuring LDAP Users and Groups in &yast;</title>
  <procedure>
   <step>
    <para>
     Access the &yast; user administration with <menuchoice>
     <guimenu>Security and Users</guimenu><guimenu>User and Group
     Management</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     To view and manage LDAP users, click the <guimenu>Users</guimenu> tab.
    </para>
   </step>
   <step>
    <para>
     Select <menuchoice><guimenu>Set Filter</guimenu>
     <guimenu>LDAP Users</guimenu></menuchoice> and enter the password for
     Root DN.
     <remark>taroth 2020-01-24: argh, this does not work for me, need to check
     with firstyear</remark>
    </para>
   </step>
   <step>
    <para>
     Click <guimenu>Add</guimenu> to enter the user configuration. A dialog
     with four tabs opens:
    </para>
    <substeps performance="required">
     <step>
      <para>
       Specify the user's name, login name, and password in the
       <guimenu>User Data</guimenu> tab.
      </para>
     </step>
     <step>
      <para>
       Check the <guimenu>Details</guimenu> tab for the group membership,
       login shell, and home directory of the new user. If necessary, change
       the default to values that better suit your needs.
<!-\- The default values
       (as well as those of the password settings) can be defined with the
       procedure described in
       <xref linkend="sec-security-auth-yast-client-conf-mod"/>.-\->
      </para>
     </step>
     <step>
      <para>
       Modify or accept the default <guimenu>Password Settings</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Enter the <guimenu>Plug-Ins</guimenu> tab, select the LDAP plug-in,
       and click <guimenu>Launch</guimenu> to configure additional LDAP
       attributes assigned to the new user.
<!-\- (see
       <xref linkend="fig-ldap-y2-adset"/>).-\->
      </para>
     </step>
    </substeps>
   </step>
   <step>
    <para>
     Click <guimenu>OK</guimenu> to apply your settings and leave the user
     configuration.
    </para>
   </step>
  </procedure>

 <para>
  You can administer groups in a similar way on the <guimenu>Groups</guimenu>
  tab.
</para>
<!-\-
  <figure id="fig-ldap-y2-adset">
   <title>&yast;: Additional LDAP Settings</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ldap_y2_adset.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ldap_y2_adset.png" width="75%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>
  -\->

  <para>
   The initial input form of user administration offers <guimenu>LDAP
   Options</guimenu>. This allows you to apply LDAP search filters to the
   set of available users. Alternatively open the module for configuring
   LDAP users and groups by selecting <guimenu>LDAP User and Group
   Configuration</guimenu>.
  </para>-->
 </sect2> 

<sect2 xml:id="sec-security-ldap-yast-client">
  <title>Configuring an LDAP Client with &yast;</title>
  <para>
   &yast; includes the module <guimenu>LDAP and Kerberos Client</guimenu>
   that helps define authentication scenarios involving either LDAP or Kerberos.
  </para>
  <para>
   It can also be used to join Kerberos and LDAP separately. However, in
   many such cases, using this module may not be the first choice, such as
   for joining &ad; (which uses a combination of LDAP and Kerberos). For
   more information, see <xref linkend="sec-security-auth-yast-client"/>.
  </para>
  <para>
   Start the module by selecting
   <menuchoice> <guimenu>Network Services</guimenu> <guimenu>LDAP and
   Kerberos Client</guimenu> </menuchoice>.
  </para>
  <figure xml:id="fig-yast2-ldapkerberos-ldap">
   <title><guimenu>LDAP and Kerberos Client</guimenu> Window</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="yast2_auth_client_config.png" width="65%" format="PNG"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="yast2_auth_client_config.png" width="65%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   To configure an LDAP client, follow the procedure below:
  </para>
  <procedure xml:id="pro-security-auth-ldap">
   <step>
    <para>
     In the window <guimenu>LDAP and Kerberos Client</guimenu>, click
     <guimenu>Change Settings</guimenu>.
    </para>
    <para>
     Make sure that the tab <guimenu>Use a Directory as Identity Provider
     (LDAP)</guimenu> is chosen.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="html">
       <imagedata fileref="yast2_auth_client_ldap.png" width="65%" format="PNG"/>
      </imageobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_auth_client_ldap.png" width="65%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
 <para> -->
     <!--
      wbrown 2019-02-25: URLs or hostnames only. IP address would break TLS
      cn/san checking.
     -->
  Specify one or more LDAP server URLs or host names under
     <guimenu>Enter LDAP server locations</guimenu>. For security reasons, we
     recommend to use <literal>LDAPS://</literal> URLs only. When specifying
     multiple addresses, separate them with spaces.
    </para>
   </step>
   <step>
    <para>
     Specify the appropriate LDAP distinguished name (DN) under
     <guimenu>DN of Search Base</guimenu>. For example, a valid entry could
     be <literal>dc=example,dc=com</literal>.
    </para>
   </step>
   <step>
    <para>
     If your LDAP server supports TLS encryption, choose the appropriate
     security option under <guimenu>Secure LDAP Connection</guimenu>.
    </para>
    <para>
     To first ask the server whether it supports TLS encryption and be able
     to downgrade to an unencrypted connection if it does not, use
     <guimenu>Secure Communication via StartTLS</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Activate other options as necessary:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       You can <guimenu>Allow users to authenticate via LDAP</guimenu> and
       <guimenu>Automatically Create Home Directories</guimenu> on the local
       computer for them.
      </para>
     </listitem>
     <listitem>
      <para>
       If you want to cache LDAP entries locally, use <guimenu>Cache LDAP Entries
        For Faster Response</guimenu>.
      </para>
      <warning>
       <title>Potential Security Risk with Caching</title>
       <para>
        Using the cache incurs security risks, depending on the mechanism used.
       </para>
       <variablelist>
        <varlistentry>
         <term>nscd</term>
         <listitem>
          <para>
           If you define an authorization rule (for example, members of group
           <literal>admin</literal> can log in), and you remove a user from that
           group, the client cache will not see that change until the cache expires
           or refreshes. So a user whose account has been revoked can still log in
           later.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>sssd</term>
         <listitem>
          <para>
           This caching mechanism constantly checks if group memberships are still
           valid. Thus the cache risk only exists if the <literal>sssd</literal>
           daemon is disconnected from the LDAP server for any reason.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </warning>
     </listitem>
     <listitem>
      <para>
       Specify the types of data that should be used from the LDAP source,
       such as
       <guimenu>Users</guimenu> and <guimenu>Groups</guimenu>,
       <guimenu>Super-User Commands</guimenu>, and <guimenu>Network Disk
       Locations</guimenu> (network-shared drives that can be automatically
       mounted on request).
      </para>
     </listitem>
     <listitem>
      <para>
       Specify the distinguished name (DN) and password of the user under
       whose name you want to bind to the LDAP directory in <guimenu>DN of
       Bind User</guimenu> and <guimenu>Password of the Bind User</guimenu>.
      </para>
      <para>
       Otherwise, if the server supports it, you can also leave both text
       boxes empty to bind anonymously to the server.
      </para>
      <warning>
       <title>Authentication Without Encryption</title>
       <para>
        When using authentication without enabling transport encryption
        using TLS or StartTLS, the password will be transmitted in the clear.
        </para>
       <!--for the records:
        sknorr, 2017-03-01: Is the YaST dialog compatible with SASL in any way?
        wbrown 2019-02-26: SASL is too complicated for a setup like this,
        not worth including.
       -->
     </warning>
     </listitem>
    </itemizedlist>
    <para>
     Under <guimenu>Extended Options</guimenu>, you can additionally
     configure timeouts for BIND operations.
    </para>
   </step>
   <step>
    <para>
     To check whether the LDAP connection works, click
     <guimenu>Test Connection</guimenu>.
    </para>
   </step>
   <step>
    <para>
     To leave the dialog, click <guimenu>OK</guimenu>. Then wait for the
     setup to complete.
    </para>
    <para>
     Finally, click <guimenu>Finish</guimenu>.
    </para>
   </step>
  </procedure>
  </sect2> 
</sect1>

 <sect1 xml:id="sec-security-ldap-data" os="sles;osuse">
  <title>Manually Administering LDAP Data</title>
   <para>
    The command line tools provided by the <systemitem>openldap2-client</systemitem>
    package (like <command>ldapsearch</command> or <command>ldapmodify</command>)
    can be used for administration of data in the LDAP directory. However, they
    are low-level tools and hard to use. For details about their use, refer to
    the respective man pages and documentation.
   </para>
 </sect1>

<sect1 xml:id="sec-security-ldap-info">
  <title>For More Information</title>
  <para>
   For more information about &ds389;, see the upstream documentation,
   available at <link xlink:href="http://www.port389.org/docs/389ds/documentation.html"/>.
  </para>
 </sect1>
</chapter>
