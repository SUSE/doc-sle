<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" role="General" 
  xml:id="sec-sec-user-management"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>User management</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker></dm:bugtracker>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 
  <sect1 xml:id="sec-sec-prot-general-accounts">
   <title>Various account checks</title>

   <sect2 xml:id="sec-sec-prot-general-accounts-unlocked">
    <title>Unlocked accounts</title>
    <para>
     It is important that all system and vendor accounts that are not used for
     logins are locked. To get a list of unlocked accounts on your system, you
     can check for accounts that do <emphasis>not</emphasis> have an encrypted
     password string starting with <literal>!</literal> or
     <literal>*</literal> in the <filename>/etc/shadow</filename> file. If you
     lock an account using <command>passwd</command> <option>-l</option>, it
     will put a <literal>!!</literal> in front of the encrypted password,
     effectively disabling the password. If you lock an account using
     <command>usermod</command> <option>-L</option>, it will put a
     <literal>!</literal> in front of the encrypted password. Many system and
     shared accounts are usually locked by default by having a
     <literal>*</literal> or <literal>!!</literal> in the password field which
     renders the encrypted password into an invalid string. Hence, to get a
     list of all unlocked (encryptable) accounts, run
     (<command>egrep</command> is used to allow use of regular-expressions):
    </para>
    <screen>&prompt.root;egrep -v ':\*|:\!' /etc/shadow | awk -F: '{print $1}'</screen>
    <para>
     Also make sure all accounts have a <literal>x</literal> in the password
     field in <filename>/etc/passwd</filename>. The following command lists
     all accounts that do not have a <literal>x</literal> in the password
     field:
    </para>
    <screen>&prompt.root;grep -v ':x:' /etc/passwd</screen>
    <para>
     An <literal>x</literal> in the password fields means that the password
     has been shadowed, for example the encrypted password needs to be looked
     up in the <filename>/etc/shadow</filename> file. If the password field in
     <filename>/etc/passwd</filename> is empty, then the system will not look
     up the shadow file and it will not prompt the user for a password at the
     login prompt.
    </para>
   </sect2>

   <sect2 xml:id="sec-sec-prot-general-accounts-unused">
    <title>Unused accounts</title>
    <para>
     All system or vendor accounts that are not being used by users,
     applications, by the system or by daemons should be removed from the
     system. You can use the following command to find out if there are any
     files owned by a specific account:
    </para>
    <screen>&prompt.root;find / -path /proc -prune -o -user <replaceable>ACCOUNT</replaceable> -ls</screen>
    <para>
     The <option>-prune</option> option in this example is used to skip the
     /proc file system. If you are sure that an account can be deleted, you
     can remove the account using the following command:
    </para>
    <screen>&prompt.root;userdel -r <replaceable>ACCOUNT</replaceable></screen>
    <para>
     Without the <option>-r</option> option <command>userdel</command> will
     not delete the user's home directory and mail spool
     (<filename>/var/spool/mail/<replaceable>USER</replaceable></filename>).
     Note that many system accounts have no home directory.
    </para>
   </sect2>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-pw-aging">
   <title>Enabling password aging</title>

   <para>
    Password expiration is a general best practice&mdash;but might need to
    be excluded for some system and shared accounts (for example Oracle,
    etc.). Expiring password on those accounts could lead to system outages if
    the application account expires.
   </para>

   <para>
    Typically a corporate policy should be developed that dictates
    rules/procedures regarding password changes for system and shared
    accounts. However, normal user account passwords should expire
    automatically. The following example shows how password expiration can be
    set up for individual user accounts.
   </para>

   <para>
    The following files and parameters in the table can be used when a new
    account is created with the <command>useradd</command> command. Settings
    such as these are stored for each user account in the
    <filename>/etc/shadow</filename> file. If using the &yast; tool
    (<guimenu>User and Group Management</guimenu>) to add users, the settings
    are available on a per-user basis. Here are the various
    settings&mdash;some of which can also be system-wide (for example
    modification of <filename>/etc/login.defs</filename> and
    <filename>/etc/default/useradd</filename>):
   </para>

   <informaltable>
    <tgroup cols="3">
     <tbody>
      <row>
       <entry>
        <para>
         <filename>/etc/login.defs</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>PASS_MAX_DAYS</literal>
        </para>
       </entry>
       <entry>
        <para>
         Maximum number of days a password is valid.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/login.defs</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>PASS_MIN_DAYS</literal>
        </para>
       </entry>
       <entry>
        <para>
         Minimum number of days before a user can change the password since
         the last change.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/login.defs</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>PASS_WARN_AGE</literal>
        </para>
       </entry>
       <entry>
        <para>
         Number of days when the password change reminder starts.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/default/useradd</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>INACTIVE</literal>
        </para>
       </entry>
       <entry>
        <para>
         Number of days after password expiration that account is disabled.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <filename>/etc/default/useradd</filename>
        </para>
       </entry>
       <entry>
        <para>
         <literal>EXPIRE</literal>
        </para>
       </entry>
       <entry>
        <para>
         Account expiration date in the format YYYY-MM-DD.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <note>
    <para>
     Users created prior to these modifications will not be affected.
    </para>
   </note>

   <para>
    Ensure that the above parameters are changed in the
    <filename>/etc/login.defs</filename> and
    <filename>/etc/default/useradd</filename> files. Review of the
    <filename>/etc/shadow</filename> file will show how these settings get
    stored after adding a user.
   </para>

   <para>
    To create a new user account, execute the following command:
   </para>

   <screen>&prompt.root;useradd -c "<replaceable>TEST_USER</replaceable>" -g <replaceable>USERS</replaceable> <replaceable>TEST</replaceable></screen>

   <para>
    The <option>-g</option> option specifies the primary group for this
    account:
   </para>

<screen>&prompt.root;id <replaceable>TEST</replaceable>
uid=509(test) gid=100(users) groups=100(users)</screen>

   <para>
    The settings in <filename>/etc/login.defs</filename> and
    <filename>/etc/default/useradd</filename> are recorded for the test user
    in the <filename>/etc/shadow</filename> file as follows:
   </para>

<screen>&prompt.root;grep <replaceable>TEST</replaceable> /etc/shadow
test:!!:12742:7:60:7:14::</screen>

   <para>
    Password aging can be modified at any time by use of the
    <command>chage</command> command. To disable password aging for system and
    shared accounts, you can run the following <command>chage</command>
    command:
   </para>

   <screen>&prompt.root;chage -M -1 <replaceable>SYSTEM_ACCOUNT_NAME</replaceable></screen>

   <para>
    To get password expiration information:
   </para>

   <screen>&prompt.root;chage -l <replaceable>SYSTEM_ACCOUNT_NAME</replaceable></screen>

   <para>
    For example:
   </para>

<screen>&prompt.root;chage -l <replaceable>TEST</replaceable>
Minimum: 7
Maximum: 60
Warning: 7
Inactive: 14
Last Change: Jan 11, 2015
Password Expires: Mar 12, 2015
Password Inactive: Mar 26, 2015
Account Expires: Never</screen>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-pw-strength">
   <title>Stronger password enforcement</title>

   <para>
    On an audited system it is important to restrict people from using simple
    passwords that can be cracked too easily. Writing down complex passwords
    is all right as long as they are stored securely. Some will argue that
    strong passwords protect you against dictionary attacks and those type of
    attacks can be defeated by locking accounts after a few failed attempts.
    However, this is not always an option. If set up like this, locking system
    accounts could bring down your applications and systems which would be
    nothing short of a denial of service attack â€“ another issue.
   </para>

   <para>
    At any rate, it is important to practice effective password management
    safety. Most companies require that passwords have at the very least a
    number, one lowercase letter, and one uppercase letter. Policies vary, but
    maintaining a balance between password strength/complexity and management
    is sometimes difficult.
   </para>
  </sect1>
  <xi:include href="hardening_pam_stack.xml"/>
  <sect1 xml:id="sec-sec-prot-restrict-root">
   <title>Restricting &rootuser; logins</title>

   <para>
    By default, the &rootuser; user is assigned a password
    and can log in using various methods&mdash;for example, on a local
    terminal, in a graphical session, or remotely via SSH. These methods
    should be restricted as far as possible. Shared usage of the root account
    should be avoided. Instead, individual administrators should use tools such as
    <literal>su</literal> or <literal>sudo</literal> (for more information,
    type <command>man 1 su</command> or <command>man 8 sudo</command>) to obtain elevated
    privileges. This allows associating &rootuser; logins with particular
    users. This also adds another layer of security; not only the &rootuser;
    password, but both the &rootuser; <emphasis>and</emphasis> the password of
    an an administrator's regular account would need to be compromised to gain full root
    access. This section explains how to limit direct root logins on the different
    levels of the system.
   </para>
   <sect2 xml:id="sec-sec-prot-restrict-root-tty">
    <title>Restricting local text console logins</title>

    <para>
     TTY devices provide text-mode system access via the console. For desktop
     systems these are accessed via the local keyboard or&mdash;in case of server
     systems&mdash;via input devices connected to a KVM switch or a remote
     management card (ILO, DRAC, etc).
     By default, Linux offers 6 different consoles, that can be switched to
     via the key combinations
     <keycombo><keycap function="alt"/><keycap>F1</keycap></keycombo> to
     <keycombo><keycap function="alt"/><keycap>F6</keycap></keycombo>, when
     running in text mode, or
     <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F1</keycap></keycombo> to
     <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F6</keycap></keycombo>
      when running in a graphical session. The
      associated terminal devices are named <literal>tty1</literal> .. <literal>tty6</literal> accordingly.
    </para>

    <para>
     The following steps restrict root access to the first TTY. Even this
     access method is only meant for emergency access to the system and should
     never be used for everyday system administration tasks.
    </para>

    <note>
     <para>
      The steps shown here are tailored towards PC architectures (&x86; and
      &x86-64;). On architectures such as &power;, different terminal
      device names than <literal>tty1</literal> may be used. Be careful not to
      lock yourself out completely by specifying wrong terminal device names.
      You can determine the device name of the terminal you are currently
      logged into by running the <literal>tty</literal> command. Be careful
      not to do this in a virtual terminal, such as via SSH or in a graphical
      session (device names <filename>/dev/pts/<replaceable>N</replaceable></filename>),
      but only from an actual login terminal reachable via
      <keycombo><keycap function="alt"/><keycap>F<replaceable>N</replaceable></keycap></keycombo>.
     </para>
    </note>

    <procedure>
     <title>Restricting root logins on local TTYs</title>
     <step>
      <para>
       Ensure that the PAM stack configuration file <filename>/etc/pam.d/login</filename>
       contains the <literal>pam_securetty</literal> module in the <literal>auth</literal> block:
      </para>
      <screen>auth     requisite      pam_nologin.so
 auth     [user_unknown=ignore success=ok ignore=ignore auth_err=die default=bad] pam_securetty.so noconsole
 auth     include        common-auth</screen>
      <para>
        This will include the <literal>pam_securetty</literal> module during the
        authentication process on local consoles, which restricts &rootuser; to logging-in
        only on TTY devices that are listed in the file <filename>/etc/securetty</filename>.
      </para>
     </step>
     <step>
      <para>
       Remove all entries from <filename>/etc/securetty</filename> except one.
       This limits the access to TTY devices for root.
      </para>
     <screen>#
# This file contains the device names of tty lines (one per line,
# without leading /dev/) on which root is allowed to login.
#
tty1</screen>
     </step>
     <step>
      <para>
       Check whether logins to other terminals will be rejected for
       &rootuser;. A login on <literal>tty2</literal>, for example, should be
       rejected immediately, without even querying the account password.
       Also make sure that you can still successfully login to
       <literal>tty1</literal> and thus that &rootuser; is not locked out of
       the system completely.
      </para>
     </step>
    </procedure>

    <important>
     <para>
      Do not add the <literal>pam_securetty</literal> module to the
      <filename>/etc/pam.d/common-auth</filename> file. This would
      break the <command>su</command> and <command>sudo</command> commands,
      because these tools would then also reject &rootuser; authentications.
     </para>
    </important>

    <important>
     <para>
      These configuration changes will also cause root logins on serial
      consoles such as <filename>/dev/ttyS0</filename> to be denied. In case you
      require such use cases you need to list the respective tty devices
      additionally in the <filename>/etc/securetty</filename> file.
     </para>
    </important>
   </sect2>

   <sect2 xml:id="sec-sec-prot-retrict-root-graphical">
    <title>Restricting graphical session logins</title>

    <para>
     To improve security on your server, avoid using graphical
     environments at all. Graphical programs are often
     not designed to be run as &rootuser; and are more likely to
     contain security issues than console programs. If you require a graphical
     login, use a non-&rootuser; login. Configure your system to disallow
     &rootuser; from logging in to graphical sessions.
    </para>

    <para>
     To prevent &rootuser; from logging in to graphical sessions, you
     can apply the same basic steps as outlined in
     <xref linkend="sec-sec-prot-restrict-root-tty"/>.
     Just add the <literal>pam_securetty</literal> module to the PAM
     stack file belonging to the display manager&mdash;for example,
     <filename>/etc/pam.d/gdm</filename> for GDM. The graphical
     session also runs on a TTY device: by default, <literal>tty7</literal>.
     Therefore, if you restrict &rootuser; logins to <literal>tty1</literal>,
     then &rootuser; will be denied login in the graphical session.
    </para>
   </sect2>

   <sect2 xml:id="sec-sec-prot-restrict-root-ssh">
    <title>Restricting SSH logins</title>
    <para>
     By default, the &rootuser; user is also allowed to log
     into a machine remotely via the SSH network protocol (if the SSH port is
     not blocked by the firewall). To restrict this, make the following
     change to the OpenSSH configuration:
    </para>
    <procedure>
     <step>
      <para>Edit <filename>/etc/ssh/sshd_config</filename> and adjust the following parameter:</para>
      <screen>PermitRootLogin no</screen>
     </step>
     <step>
      <para>Restart the <systemitem class="service">sshd</systemitem> service to make the changes effective:</para>
      <screen>systemctl restart sshd.service</screen>
     </step>
    </procedure>
    <note>
     <para>
      Using the PAM <literal>pam_securetty</literal> module is not suitable in
      case of OpenSSH, because not all SSH logins go through the PAM
      stack during authorization (for example, when using SSH public-key authentication).
      In addition, an attacker could differentiate between a wrong password
      and a successful login that was only rejected later on by policy.
     </para>
    </note>
   </sect2>

  </sect1>
  <sect1 xml:id="sec-sec-prot-inactivity-logout">
   <title>Setting an inactivity timeout for interactive shell sessions</title>
   <para>
    It can be a good idea to terminate an interactive shell session after a
    certain period of inactivity. For example, to revent open, unguarded sessions
    or to avoid waste of system resources.
   </para>
   <para>
    By default, there is no inactivity timeout for shells. Nothing will
    happen if a shell stays open and unused for days or even years. It is possible
    to configure most shells in a way that idle sessions terminate
    automatically after a certain amount of time. The following example
    shows how to set an inactivity timeout for a number of
    common types of shells.
   </para>
   <para>
    The inactivity timeout can be configured for login shells only or for all
    interactive shells. In the latter case the inactivity timeout is running
    individually for each shell instance. This means that timeouts will
    accumulate. When a sub- or child-shell is started, then a new timeout begins for
    the sub- or child-shell, and only afterwards will the
    timeout of the parent continue running.
   </para>
   <para>
    The following table contains configuration details for a selection of
    common shells shipped with &productname;:
   </para>
   <informaltable frame="all" rowsep="1" colsep="1">
    <tgroup cols="7">
     <colspec colname="col_1" colwidth="14.2857*"/>
     <colspec colname="col_2" colwidth="14.2857*"/>
     <colspec colname="col_3" colwidth="14.2857*"/>
     <colspec colname="col_4" colwidth="14.2857*"/>
     <colspec colname="col_5" colwidth="14.2857*"/>
     <colspec colname="col_6" colwidth="14.2857*"/>
     <colspec colname="col_7" colwidth="14.2858*"/>
     <thead>
      <row>
       <entry>package</entry>
       <entry>shell personalities</entry>
       <entry align="center">shell variable</entry>
       <entry align="center">time unit</entry>
       <entry>readonly setting</entry>
       <entry align="center">config path (only login shell)</entry>
       <entry align="center">config path (all shells)</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><para><literal>bash</literal></para></entry>
       <entry><para><literal>bash, sh</literal></para></entry>
       <entry align="center"><para><literal>TMOUT</literal></para></entry>
       <entry align="center"><para>seconds</para></entry>
       <entry><para><literal>readonly TMOUT=</literal></para></entry>
       <entry><para><filename>/etc/profile.local</filename>, <filename>/etc/profile.d/</filename></para></entry>
       <entry><para><filename>/etc/bash.bashrc</filename></para></entry>
      </row>
      <row>
       <entry><para><literal>mksh</literal></para></entry>
       <entry><para><literal>ksh, lksh, mksh, pdksh</literal></para></entry>
       <entry align="center"><para><literal>TMOUT</literal></para></entry>
       <entry align="center"><para>seconds</para></entry>
       <entry><para><literal>readonly TMOUT=</literal></para></entry>
       <entry><para><filename>/etc/profile.local</filename>, <filename>/etc/profile.d/</filename></para></entry>
       <entry><para><filename>/etc/ksh.kshrc.local</filename></para></entry>
      </row>
      <row>
       <entry><para><literal>tcsh</literal></para></entry>
       <entry><para><literal>csh, tcsh</literal></para></entry>
       <entry align="center"><para><literal>autologout</literal></para></entry>
       <entry align="center"><para>minutes</para></entry>
       <entry><para><literal>set -r autologout=</literal></para></entry>
       <entry><para><filename>/etc/csh.login.local</filename></para></entry>
       <entry><para><filename>/etc/csh.cshrc.local</filename></para></entry>
      </row>
      <row>
       <entry><para><literal>zsh</literal></para></entry>
       <entry><para><literal>zsh</literal></para></entry>
       <entry align="center"><para><literal>TMOUT</literal></para></entry>
       <entry align="center"><para>seconds</para></entry>
       <entry><para><literal>readonly TMOUT=</literal></para></entry>
       <entry><para><filename>/etc/profile.local</filename>, <filename>/etc/profile.d/</filename></para></entry>
       <entry><para><filename>/etc/zsh.zshrc.local</filename></para></entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    Every listed shell supports an internal timeout shell variable that can be
    set to a specific time value to cause the inactivity timeout. If you want
    to prevent users from overriding the timeout setting, you can mark the
    corresponding shell timeout variable as readonly. The corresponding variable
    declaration syntax is also found in the table above.
   </para>

   <note>
    <para>
     This feature is only helpful for avoiding risks if a user is forgetful or follows
     unsafe practices. It does not protect against hostile users. The timeout
     only applies to interactive wait states of a shell. A malicious user can always
     find ways to circumvent the timeout and keep their session open regardless.
    </para>
   </note>

   <para>
    To configure the inactivity timeout, you need to add the matching timeout
    variable declaration to each shell's startup script. Use either the path for
    login shells only, or the one for all shells, as listed in the table. The
    following example uses paths and settings that are suitable for
    <command>bash</command> and <command>ksh</command>
    to setup a read-only login shell timeout that cannot be overridden by users.
    Create the file <filename>/etc/profile.d/timeout.sh</filename> with the
    following content:
   </para>
   <screen># /etc/profile.d/timeout.sh for SUSE Linux
#
# Timeout in seconds until the bash/ksh session is terminated
# in case of inactivity.
# 24h = 86400 sec
readonly TMOUT=86400</screen>

   <tip>
    <para>
     We recommend using the <command>screen</command> tool in order to
     detach sessions before logging out. <command>screen</command> sessions
     are not terminated and can be re-attached whenever required. An active
     session can be locked without logging out (read about <keycombo>
      <keycombo><keycap function="control"/><keycap>a</keycap></keycombo>
      <keycap>x</keycap></keycombo> / <command>lockscreen</command> in
     <command>man screen</command> for details).
    </para>
   </tip>

  </sect1>
  <sect1 xml:id="sec-sec-prot-dos">
   <title>Preventing accidental denial of service</title>

   <para>
    Linux allows you to set limits on the amount of system resources that
    users and groups can consume. This is also very handy if bugs in programs
    cause them to use up too much resources (for example memory leaks), slow
    down the machine, or even render the system unusable. Incorrect settings
    can allow programs to use too many resources which may make the server
    unresponsive to new connections or even local logins (for example if a
    program uses up all available file handles on the host). This can also be
    a security concern if someone is allowed to consume all system resources
    and therefore cause a denial of service attack â€“ either unplanned or
    worse, planned. Setting resource limits for users and groups may be an
    effective way to protect systems, depending on the environment.
   </para>

   <sect2 xml:id="sec-sec-prot-dos-restrict-ressources">
    <title>Example for restricting system resources</title>
    <para>
     The following example demonstrates the practical usage of setting or
     restricting system resource consumption for an Oracle user account. For a
     list of system resource settings, see
     <filename>/etc/security/limits.conf</filename> or <command>man
     limits.conf</command>.
    </para>
    <para>
     Most shells like Bash provide control over various resources (for example
     the maximum allowable number of open file descriptors or the maximum
     number of processes) that are available on a per/user basis. To examine
     all current limits in the shell execute:
    </para>
    <screen>&prompt.root;ulimit -a</screen>
    <para>
     For more information on <command>ulimit</command> for the Bash shell,
     examine the Bash man pages.
    </para>
    <important>
     <title>Setting limits for SSH sessions</title>
     <para>
      Setting "hard" and "soft" limits might not behave as expected when using
      an SSH session. To see valid behavior it may be necessary to login as
      root and then su to the id with limits (for example,
      <literal>oracle</literal> in these examples). Resource limits should
      also work assuming the application has been started automatically during
      the boot process. It may be necessary to set
      <option>UsePrivilegeSeparation</option> in
      <filename>/etc/ssh/sshd_config</filename> to "no" and restart the SSH
      daemon (<command>systemctl restart sshd</command>) if it seems that the
      changes to resource limits are not working (via SSH). However this is
      not generally recommended â€“ as it weakens a systems security.
     </para>
    </important>
    <tip>
     <title>Disabling password logins via <command>ssh</command></title>
     <para>
      You can add some extra security to your server by disabling password
      authentication for SSH. Remember that you need to have SSH keys
      configured, otherwise you cannot access the server. To disable password
      login, add the following lines to
      <filename>/etc/ssh/sshd_config</filename>:
     </para>
<screen>UseLogin no
UsePAM no
PasswordAuthentication no
PubkeyAuthentication yes</screen>
    </tip>
    <para>
     In this example, a change to the number of file handles or open files
     that the user <literal>oracle</literal> can use is made by editing
     <filename>/etc/security/limits.conf</filename> as &rootuser; making the
     following changes:
    </para>
<screen>oracle           soft    nofile          4096
oracle           hard    nofile          63536</screen>
    <para>
     The soft limit in the first line defines the limit on the number of file
     handles (open files) that the
     <systemitem class="username">oracle</systemitem> user will have after
     login. If the user sees error messages about running out of file handles,
     then the user can increase the number of file handles like in this
     example up to the hard limit (in this example 63536) by executing:
    </para>
    <screen>&prompt.root;ulimit -n 63536</screen>
    <para>
     You can set the soft and hard limits higher if necessary.
    </para>
    <note>
     <para>
      It is important to be judicious with the usage of ulimits. Allowing a
      "hard" limit for <quote>nofile</quote> for a user that equals the kernel
      limit (<filename>/proc/sys/fs/file-max</filename>) is very bad! If the
      user consumes all the available file handles, the system cannot initiate
      new logins as accessing (opening) PAM modules which are required for
      performing a login will not be possible.
     </para>
    </note>
    <para>
     You also need to ensure that <literal>pam_limits</literal> is either
     configured globally in <filename>/etc/pam.d/common-auth</filename>, or
     for individual services like SSH, su, login, and telnet in:
    </para>
    <simplelist>
     <member><filename>/etc/pam.d/sshd</filename> (for SSH)</member>
     <member><filename>/etc/pam.d/su</filename> (for su)</member>
     <member><filename>/etc/pam.d/login</filename> (local logins and telnet)</member>
    </simplelist>
    <para>
     If you do not want to enable it for all logins, there is a specific PAM
     module that will read the <filename>/etc/security/limits.conf</filename>
     file. Entries in pam configuration directives will have entries like:
    </para>
<screen>session     required      /lib/security/pam_limits.so
session     required      /lib/security/pam_unix.so</screen>
    <para>
     It is important to note that changes are not immediate and require a new
     login session:
    </para>
<screen>&prompt.root;su â€“ oracle
&prompt.user;ulimit -n
4096</screen>
    <para>
     Note that these examples are specific to the Bash shell -
     <command>ulimit</command> options are different for other shells. The
     default limit for the user <literal>oracle</literal> is
     <literal>4096</literal>. To increase the number of file handles the user
     <literal>oracle</literal> can use to <literal>63536</literal>, do:
    </para>
<screen>&prompt.root;su â€“ oracle
&prompt.user;ulimit -n
4096
&prompt.user;ulimit -n 63536
&prompt.user;ulimit -n
63536</screen>
    <para>
     Making this permanent requires the addition of the setting,
     <literal>ulimit -n 63536</literal>, (again, for Bash) to the users
     profile (<filename>~/.bashrc</filename> or
     <filename>~/.profile</filename> file) which is the user start-up file for
     the Bash shell on &productname; (to verify your shell run: echo
     <envar>$SHELL</envar>). To do this you could simply type (or copy/paste
     â€“ if you are reading this on the system) the following commands for the
     Bash shell of the user <literal>oracle</literal>:
    </para>
<screen>&prompt.root;su - oracle
&prompt.user;cat &gt;&gt; ~oracle/.bash_profile &lt;&lt; EOF
ulimit -n 63536
EOF</screen>
   </sect2>
  </sect1>
  
  <sect1 xml:id="sec-sec-prot-banners">
   <title>Displaying login banners</title>

   <para>
    It is often necessary to place a banner on login screens on all servers
    for legal/audit policy reasons or to give security instructions to
    users.
   </para>

   <para>
    If you want to print a login banner <emphasis>after</emphasis> a user
    logs in on a text based terminal for example using SSH or on a local
    console, you can leverage the file <filename>/etc/motd</filename> (motd =
    message of the day). The file exists by default on &productname;, but
    it is empty. Simply add content to the file that is applicable/required
    by the organization.
   </para>

   <note>
    <title>Banner length</title>
    <para>
     Try to keep the login banner content to a single terminal page (or
     less), as it will scroll the screen if it does not fit, making it more
     difficult to read.
    </para>
   </note>

   <para>
    You can also have a login banner printed <emphasis>before</emphasis> a
    user logs in on a text based terminal. For local console
    logins you can edit the <filename>/etc/issue</filename> file, which will
    cause the banner to be displayed before the login prompt. For logins via
    SSH you can edit the <quote>Banner</quote> parameter in the
    <filename>/etc/ssh/sshd_config</filename> file, which will then
    appropriately display the banner text before the SSH login prompt.
   </para>

   <para>
    For graphical logins via GDM, you can follow
    <link xlink:href="https://help.gnome.org/admin/system-admin-guide/stable/login-banner.html.en">
    the GNOME admin guide</link> to set up a login banner. Furthermore
    you can make the following changes to require a user to acknowledge the
    legal banner by selecting <guimenu>Yes</guimenu> or <guimenu>No</guimenu>.
    Edit the <filename>/etc/gdm/Xsession</filename> file and add the
    following lines at the <emphasis>beginning</emphasis> of the script:
   </para>

<screen>if ! /usr/bin/gdialog --yesno '\n<replaceable>This system is classified...</replaceable>\n' 10 10; then
    /usr/bin/gdialog --infobox 'Aborting login'
    exit 1;
fi</screen>

   <para>
    The text <replaceable>This system is classified...</replaceable> needs to
    be replaced with the desired banner text. It is important to note that
    this dialog will not prevent a login from progressing. For more
    information about GDM scripting, refer to the
    <link xlink:href="https://help.gnome.org/admin/gdm/stable/configuration.html.en#scripting">
    GDM Admin Manual</link>.
   </para>
  </sect1>
     <sect1 xml:id="sec-sec-prot-misc-account-utils">
    <title>Connection accounting utilities</title>
    <para>
     Here is a list of commands you can use to get data about user logins:
    </para>
    <formalpara>
     <title><command>who</command></title>
     <para>
      Lists currently logged in users.
     </para>
    </formalpara>
    <formalpara>
     <title><command>w</command></title>
     <para>
      Shows who is logged in and what they are doing.
     </para>
    </formalpara>
    <formalpara>
     <title><command>last</command></title>
     <para>
      Shows a list of last logged in users, including login time, logout time,
      login IP address, etc.
     </para>
    </formalpara>
    <formalpara>
     <title><command>lastb</command></title>
     <para>
      Same as <command>last</command>, except that by default it shows
      <filename>/var/log/btmp</filename>, which contains all the bad login
      attempts.
     </para>
    </formalpara>
    <formalpara>
     <title><command>lastlog</command></title>
     <para>
      This command reports data maintained in
      <filename>/var/log/lastlog</filename>, which is a record of the last
      time a user logged in.
     </para>
    </formalpara>
    <formalpara>
     <title><command>ac</command></title>
     <para>
      Available after installing the <systemitem>acct</systemitem> package.
      Prints the connect time in hours on a per-user basis or daily basis,
      etc. This command reads <filename>/var/log/wtmp</filename>.
     </para>
    </formalpara>
    <formalpara>
     <title><command>dump-utmp</command></title>
     <para>
      Converts raw data from /var/run/utmp or
      <filename>/var/log/wtmp</filename> into ASCII-parseable format.
     </para>
    </formalpara>
    <para>
     Also check the <filename>/var/log/messages</filename> file, or the output
     of <command>journalctl</command> if no logging facility is running. See
     <xref linkend="cha-journalctl"/> for more information on the &systemd;
     journal.
    </para>
   </sect1>
  </chapter>