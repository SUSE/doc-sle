<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="bootconcept.xml" version="5.0" xml:id="cha-boot">
 <title>開機過程簡介</title>
 <info>
  <abstract>
   <para>
    Linux 系統開機涉及多個元件和任務。完成韌體和硬體啟始化程序 (取決於機器的架構) 之後，系統將透過開機載入程式 GRUB 2 啟動核心。在此之後，開機程序完全由作業系統控制，並由 <systemitem class="daemon">systemd</systemitem> 負責處理。<systemitem class="daemon">systemd</systemitem> 會提供一組<quote>目標</quote>，用於啟動與日常使用、維護或緊急情況相關的組態。
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>


 <sect1 xml:id="sec-boot-terminology">
  <title>術語</title>
  <para>
   本章使用的術語可能有不同的解釋。為了理解本章中術語的用法，請閱讀以下定義：
  </para>
  <variablelist>
   <varlistentry>
    <term><systemitem>init</systemitem></term>
    <listitem>
     <para>
      有兩個不同的程序通常會命名為 <quote>init</quote>：
     </para>
     <itemizedlist>
      <listitem>
       <para>
        掛接根檔案系統的 <systemitem>initramfs</systemitem> 程序
       </para>
      </listitem>
      <listitem>
       <para>
        從實際根檔案系統執行且用於啟動其他所有程序的作業系統程序
       </para>
      </listitem>
     </itemizedlist>
     <para>
      在這兩種情況下，<systemitem class="daemon">systemd</systemitem> 程式都會處理此任務。首先會從 <systemitem>initramfs</systemitem> 執行此程序，以掛接根檔案系統。掛接成功後，此程序將做為初始程序從根檔案系統重新執行。為了避免混淆這兩個 <systemitem class="daemon">systemd</systemitem> 程序，我們將第一個程序稱為 <emphasis>init on initramfs</emphasis>，將第二個程序稱為 <emphasis>systemd</emphasis>。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <systemitem>initrd</systemitem>/<systemitem>initramfs</systemitem>
    </term>
    <listitem>
     <para>
      <systemitem>initrd</systemitem> (初始 RAM 磁碟) 是一個影像檔案，內含核心所載入的並且做為暫存根檔案系統從 <filename>/dev/ram</filename> 掛接的根檔案系統影像。掛接此檔案系統需要使用檔案系統驅動程式。
     </para>
     <para>
      從核心 2.6.13 開始，<systemitem>initramfs</systemitem> (初始 RAM 檔案系統) 取代了 initrd，前者無需檔案系統驅動程式即可掛接。<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 只使用 <systemitem>initramfs</systemitem>。但是，由於 <systemitem>initramfs</systemitem> 做為 <filename>/boot/initrd</filename> 儲存，因此通常將其稱為 <quote>initrd</quote>。本章只使用名稱 <systemitem>initramfs</systemitem>。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-boot-proc">
  <title>Linux 開機過程</title>
  <para>
   Linux 開機程序由數個階段組成，每個階段分別由不同的元件所代表：
  </para>
  <orderedlist>
   <listitem>
    <para>
     <xref linkend="sec-boot-proc-initialization" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-proc-kernel" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-initramfs" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec-boot-systemd" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
  </orderedlist>

  <sect2 xml:id="sec-boot-proc-initialization">
   <title>啟始化和開機載入程式階段</title>
   <para>
    在啟始化階段，將設定機器硬體並準備好裝置。此程序根據硬體架構的不同有很大的差別。
   </para>
   <para>
    <phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 在所有架構中使用開機載入程式 GRUB 2。根據架構和韌體，啟動 GRUB 2 開機載入程式的程序可能包括多個步驟。開機載入程式的用途是載入核心以及初始的 RAM 式檔案系統 (initramfs)。如需 GRUB 2 的詳細資訊，請參閱<xref linkend="cha-grub2"/>。
   </para>
   <sect3 xml:id="sec-boot-proc-initialization-x86-aarch" arch="x86_64;aarch64">
    <title>Aarch64 與 AMD64/Intel 64 上的啟始化和開機載入程式階段</title>
    <para>
     開啟電腦之後，BIOS 或 UEFI 會啟始化螢幕和鍵盤，並測試主記憶體。在此階段中，機器不會存取大量儲存媒體。接著，會從 CMOS 值載入目前日期、時間和最重要的周邊。辨識開機媒體及其幾何尺寸之後，系統控制權將會從 BIOS/UEFI 轉到開機載入程式。
    </para>
    <para>
     在配備傳統 BIOS 的機器上，只能載入開機磁碟第一個實體 512 位元組資料磁區 (主開機記錄，MBR) 中的程式碼。只有極少量的 GRUB 2 程式碼能夠裝入 MBR。開機載入程式的唯一作用就是從 MBR 與第一個分割區 (MBR 分割區表) 之間的間隙處，或是從 BIOS 開機分割區 (GPT 分割區表) 載入包含檔案系統驅動程式的 GRUB 2 核心影像。此影像包含檔案系統驅動程式，因此能夠存取根檔案系統中的 <filename>/boot</filename>。<filename>/boot</filename> 包含 GRUB 2 核心 (core) 的附加模組以及核心 (kernel) 和 initramfs 影像。取得此分割區的存取權限之後，GRUB 2 會將核心和 initramfs 影像載入記憶體，並將控制權交給核心。
    </para>
    <para>
     從包含已加密分割區 <filename>/boot</filename> 的加密檔案系統將 BIOS 系統開機時，需要輸入解密密碼兩次。GRUB 2 使用第一次輸入的密碼來解密 <filename>/boot</filename>，<systemitem class="daemon">systemd</systemitem> 使用第二次輸入的密碼來載入加密的磁碟區。
    </para>
    <para>
     在配備 UEFI 的機器上，開機程序比配備傳統 BIOS 的機器要簡單得多。韌體能夠讀取包含 GPT 分割區表的磁碟的 FAT 格式化系統分割區。此 EFI 系統分割區 (在執行中的系統上載入為 <filename>/boot/efi</filename>) 可提供足夠的空間，用於代管由韌體直接載入和執行的完備 GRUB 2。
    </para>
    <para>
     如果 BIOS/UEFI 支援網路開機，則也可以設定提供開機載入程式的開機伺服器。然後，可以透過 PXE 將系統開機。BIOS/UEFI 用做開機載入程式。它會從開機伺服器取得開機影像，然後啟動系統。這與本地硬碟完全無關。
    </para>
   </sect3>
   <sect3 xml:id="sec-boot-proc-initialization-zsystems" arch="zseries">
    <title>
     IBM Z 上的啟始化和開機載入程式階段
    </title>
    <para>
     在 IBM Z 上，必須透過名為 <command>zipl</command> (z initial program load，z 初始程式載入) 的開機載入程式啟始化開機程序。雖然 <command>zipl</command> 支援讀取不同的檔案系統，但它不支援 SLE 預設檔案系統 (Btrfs) 或者從快照開機。因此，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 使用兩階段的開機程序來確定開機時完全支援 Btrfs：
    </para>
    <procedure>
     <step>
      <para>
       <command>zipl</command> 從 <filename>/boot/zipl</filename> 分割區開機，該分割區可格式化為 Ext2、Ext3、Ext4 或 XFS 檔案系統。此分割區包含一個極簡的核心，以及一個載入記憶體中的 initramfs。initramfs 包含 Btrfs 驅動程式 (及其他元件) 和開機載入程式 GRUB 2。系統使用參數 <literal>initgrub</literal> (告知要啟動 GRUB 2) 來啟動核心。
      </para>
     </step>
     <step>
      <para>
       核心會掛接根檔案系統，以使 <filename>/boot</filename> 可存取。現在，將從 initramfs 啟動 GRUB 2。GRUB 2 從 <filename>/boot/grub2/grub.cfg</filename> 讀取其組態，並從 <filename>/boot</filename> 載入最終的核心和 initramfs。現在，將透過 Kexec 載入新核心。
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-proc-kernel">
   <title>核心階段</title>
   <para>
    開機載入程式轉交系統控制權後，所有架構中的開機程序均是相同的。開機載入程式會將核心和初始的 RAM 式檔案系統 (<systemitem>initramfs</systemitem>) 都載入記憶體中，而核心將接管控制權。
   </para>
   <para>
    核心設定記憶體管理並偵測 CPU 類型及其功能之後，將啟始化硬體，並從記憶體中掛接使用 <systemitem>initramfs</systemitem> 載入的暫存根檔案系統。
   </para>

   <sect3 xml:id="sec-boot-initrd">
    <title><systemitem>initramfs</systemitem> 檔案</title>
    <para>
     <systemitem>initramfs</systemitem> (初始 RAM 檔案系統) 是一個小型 cpio 歸檔，可由核心載入 RAM 磁碟。該檔案位於 <filename>/boot/initrd</filename> 中。可以使用名為 <command>dracut</command> 的工具建立該檔案，如需詳細資料，請參閱 <command>man 8 dracut</command>。
    </para>
    <para>
     <systemitem>initramfs</systemitem> 提供了一個極簡的 Linux 環境，可用於在掛接實際根檔案系統之前執行程式。BIOS 或 UEFI 常式會將最精簡的 Linux 環境載入記憶體，該環境只需要有足夠的記憶體，除此之外，沒有特定硬體需求。<systemitem>initramfs</systemitem> 歸檔必須始終提供一個名為 <systemitem>init</systemitem> 的可執行檔，該檔案會執行根檔案系統上的 <systemitem class="daemon">systemd</systemitem> 精靈，使開機程序得以繼續。
    </para>
    <para>
     在根目錄檔案系統能夠掛接以及作業系統可以啟動之前，核心需要相應的驅動程式來存取根目錄檔案系統所在的設備。這些驅動程式可能包含特定類型硬碟的特殊驅動程式，或者甚至包含存取網路檔案系統的網路驅動程式。<systemitem>init</systemitem> on <systemitem>initramfs</systemitem> 會載入根檔案系統所需的模組。當模組載入之後，<systemitem class="service">udev</systemitem> 便會為 <systemitem>initramfs</systemitem> 提供所需的裝置。在後來的開機程序中，變更根檔案系統後，必須重新產生這些裝置。可以使用 <systemitem class="daemon">systemd</systemitem> 單位 <filename>systemd-udev-trigger.service</filename> 來實現此目的。
    </para>

    <sect4 xml:id="sec-boot-initrd-regenerate">
     <title>重新產生 initramfs</title>
     <para>
      由於 <systemitem>initramfs</systemitem> 包含多個驅動程式，因此，每當其中某個驅動程式有新版本可用時，都需要更新 initramfs。在安裝包含驅動程式更新的套件時可以自動完成這種更新。YaST 或 zypper 透過顯示用於產生 <systemitem>initramfs</systemitem> 的指令輸出來告知此狀態。但在某些情況下，您需要手動重新產生 <systemitem>initramfs</systemitem>：
     </para>
     <itemizedlist>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-drivers"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-raidroot"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-lvmadd"/>
       </para>
      </listitem>
      <listitem>
       <para>
        
        <xref xrefstyle="select:title" linkend="var-initrd-regenerate-kernelvars"/>
       </para>
      </listitem>
     </itemizedlist>

     <variablelist>
      <varlistentry xml:id="var-initrd-regenerate-drivers">
       <term>由於更換硬體而需新增驅動程式</term>
       <listitem>
        <para>
         如果需要更換硬體 (例如硬碟)，並且開機時此硬體需要核心中的不同驅動程式，則您必須更新 <systemitem>initramfs</systemitem> 檔案。
        </para>
        <para>
         開啟或建立 <filename>/etc/dracut.conf.d/10-<replaceable>DRIVER</replaceable>.conf</filename>，並新增如下一行 (請注意前置空格)：
        </para>
        <screen>force_drivers+=" <replaceable>DRIVER1</replaceable> "</screen>
        <para>
         以驅動程式的模組名稱取代 <replaceable>DRIVER1</replaceable>。如果您需要新增多個驅動程式，請逐一列出並以空格分隔。
        </para>
        <screen>force_drivers+=" <replaceable>DRIVER1</replaceable> <replaceable>DRIVER2</replaceable> "</screen>
        <para>
         繼續執行<xref linkend="pro-generate-initramfs"/>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-raidroot">
       <term>將系統目錄移至 RAID 或 LVM</term>
       <listitem>
        <para>
         每次您要將執行中系統上的交換檔案或系統目錄 (例如 <filename>/usr</filename>) 移至 RAID 或邏輯磁碟區時，都需要建立一個包含軟體 RAID 或 LVM 驅動程式支援的 <systemitem>initramfs</systemitem>。
        </para>
        <para>
         為此，請在 <filename>/etc/fstab</filename> 中建立相關的項目，並掛接新項目 (例如，使用 <command>mount -a</command> 和/或 <command>swapon -a</command>)。
        </para>
        <para>
         繼續執行<xref linkend="pro-generate-initramfs"/>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-lvmadd">
       <term>將磁碟新增至包含根檔案系統的 LVM 群組或 Btrfs RAID</term>
       <listitem>
        <para>
         每當您要在包含根檔案系統的邏輯磁碟區群組或者 Btrfs RAID 中新增 (或移除) 磁碟時，都需要建立一個支援增大的磁碟區的 <systemitem>initramfs</systemitem>。請遵循<xref linkend="pro-generate-initramfs"/>中的說明操作。
        </para>
        <para>
         繼續執行<xref linkend="pro-generate-initramfs"/>。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-kernelvars">
       <term>變更核心變數</term>
       <listitem>
        <para>
         如果您在 <command>sysctl</command> 介面中透過編輯相關檔案 (<filename>/etc/sysctl.conf</filename> 或 <filename>/etc/sysctl.d/*.conf</filename>) 變更了核心變數的值，系統下次重新開機時，這項變更將會遺失。即使您在執行時使用 <command>sysctl --system</command> 載入這些值，變更也不會儲存到 檔案中。<systemitem>initramfs</systemitem>您需要依照<xref linkend="pro-generate-initramfs"/>中所述更新該檔案。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <procedure xml:id="pro-generate-initramfs">
      <title>產生 initramfs</title>
       <para>
       請注意，您需要以 <systemitem class="username">root</systemitem> 使用者身分執行以下程序中的所有指令。
      </para>
      <step>
      <para>
        進入 <filename>/boot</filename> 目錄：
      </para>
      <screen><prompt role="root"># </prompt>cd /boot</screen>
      </step>
      <step>
       <para>
        使用 <command>dracut</command> 產生一個新的 <systemitem>initramfs</systemitem> 檔案 (以您選取的檔案名稱取代 <replaceable>MY_INITRAMFS</replaceable>)：
       </para>
       <screen><prompt role="root"># </prompt>dracut <replaceable>MY_INITRAMFS</replaceable></screen>
       <para>
        或者，可以執行 <command>dracut -f</command>
        <replaceable>FILENAME</replaceable> 來取代現有的 init 檔案。
       </para>
      </step>
      <step>
       <para>
        (如果在上一步中執行了 <command>dracut -f</command>，請跳過此步驟。)根據您在上一步中建立的 <systemitem>initramfs</systemitem> 檔案建立 <systemitem>initrd</systemitem> 的符號連結：
       </para>
       <screen><prompt role="root"># </prompt> ln -sf <replaceable>MY_INITRAMFS</replaceable> <systemitem>initrd</systemitem> </screen>
      </step>
      <step arch="zseries">
       <para>
        在 IBM Z 架構中，另外還需執行 <command>grub2-install</command>。
       </para>
      </step>
     </procedure>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-initramfs">
   <title>Init on initramfs 階段</title>
   <para>
    由核心從 <systemitem>initramfs</systemitem> 掛接的暫存根檔案系統包含可執行檔案 <systemitem class="daemon">systemd</systemitem> (下文稱為 <systemitem>init</systemitem> on <systemitem>initramfs</systemitem>，另請參閱<xref linkend="sec-boot-terminology"/>)。此程式執行掛接正確根檔案系統所需的全部動作。它為所需的檔案系統提供核心功能，並為使用 <systemitem class="service">udev</systemitem> 的大量儲存控制器提供裝置驅動程式。
   </para>

   <para>
    <systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 主要用途是為掛接以及存取實際根檔案系統做好準備。根據您的系統組態，<systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 負責下列任務。
   </para>

   <variablelist>
    <varlistentry>
     <term>載入核心模組</term>
     <listitem>
      <para>
       根據硬體組態，存取您電腦的硬體元件可能需要特殊的驅動程式 (最重要的元件是硬碟)。若要存取最後根目錄檔案系統，核心需載入適當的檔案系統驅動程式。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>提供區塊特殊檔案</term>
     <listitem>
      <para>
       核心根據載入的模組產生裝置事件。<systemitem class="service">udev</systemitem> 會處理這些事件，並在 <filename>/dev</filename> 內的 RAM 檔案系統中產生所需的特殊區塊檔案。如果沒有這些專用檔案，便無法存取檔案系統和其他裝置。
      </para>
    </listitem>
    </varlistentry>
    <varlistentry>
     <term>管理 RAID 和 LVM 設定</term>
     <listitem>
      <para>
       如果您之前將系統設定為在 RAID 或 LVM 下存放根檔案系統，<systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 此時會設定 LVM 或 RAID，以便之後能夠存取根檔案系統。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>管理網路組態</term>
     <listitem>
      <para>
       如果您之前將系統設定為使用網路掛接的根檔案系統 (透過 NFS 掛接)，那麼 <systemitem>init</systemitem> 此時必須確定是否已載入適當的網路驅動程式，並且這些驅動程式是否設定為允許存取根檔案系統。
      </para>
      <para>
       如果檔案系統位於 iSCSI 或 SAN 這樣的網路區塊裝置上，<systemitem>initramfs</systemitem> 上的 <systemitem>init</systemitem> 還會設定與儲存伺服器間的連線。如果主要目標不可用，<phrase role="productname"><phrase os="sles">SUSE Linux Enterprise Server</phrase></phrase> 支援從次要 iSCSI 目標開機。<phrase os="sles">如需有關開機 iSCSI 目標的組態的更多詳細資料，請參閱<xref linkend="sec-iscsi-initiator-yast"/></phrase>。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

   <note>
    <title>處理掛接失敗問題</title>
    <para>
     如果開機檔案系統無法在開機環境中掛接，則必須對該系統進行檢查與修復，然後才能繼續開機。對於 Ext3 與 Ext4 檔案系統，檔案系統檢查程式會自動啟動。如果是 XFS 和 Btrfs 檔案系統，則不會自動開始修復程序，而是向使用者顯示有關可用於修復檔案系統的選項的資訊。成功修復檔案系統後，結束開機環境將會使系統重新嘗試掛接根檔案系統。如果掛接成功，將繼續正常開機。
    </para>
   </note>

   <sect3 xml:id="sec-boot-linuxrc-initramfs">
    <title>安裝過程中的 init on initramfs 階段</title>
    <para>
     若於安裝過程的啟始開機階段呼叫 <systemitem>init</systemitem> on <systemitem>initramfs</systemitem>，它執行的任務會與上述任務有所不同。請注意，安裝系統也不會從 <systemitem>initramfs</systemitem> 啟動 <systemitem class="daemon">systemd</systemitem> — 這些任務由 <command>linuxrc</command> 執行。
    </para>

    <variablelist>
     <varlistentry>
      <term>尋找安裝媒體</term>
      <listitem>
       <para>
        當您啟動安裝程序時，機器會載入一個安裝核心以及一個包含 YaST 安裝程式的特殊 <systemitem>init</systemitem>。YaST 安裝程式在 RAM 檔案系統中執行，它必須知道安裝媒體的位置，才能存取該媒體來安裝作業系統。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       啟動硬體辨識並載入適當的核心模組
      </term>
      <listitem>
       <para>
        如<xref linkend="sec-boot-initrd"/>中所述，開機程序從最少的一組驅動程式 (可在大多數硬體組態中使用) 開始。在 AArch64、POWER 和 AMD64/Intel 64 機器上，<command>linuxrc</command> 會啟動初始硬體掃描程序，以確定適合您硬體組態的驅動程式集。在 IBM Z 上，需要提供驅動程式及其參數的清單 (例如，透過 linuxrc 或 parmfile 提供)。
       </para>
       <para>
        這些驅動程式用來產生系統開機所需的自訂 <systemitem>initramfs</systemitem>。如果開機不需要這些模組，但是 coldplug 需要這些模組，則可以使用 <systemitem class="daemon">systemd</systemitem> 載入這些模組；如需詳細資訊，請參閱<xref linkend="sec-boot-systemd-advanced-kernel-modules"/>。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>載入安裝系統</term>
      <listitem>
       <para>
        系統正確識別硬體後，會立即載入相應的驅動程式。<systemitem class="service">udev</systemitem> 程式會建立特殊的裝置檔案，<command>linuxrc</command> 將使用 YaST 安裝程式啟動安裝系統。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>啟動 YaST</term>
      <listitem>
       <para>
        最後，<command>linuxrc</command> 啟動 YaST，後者則啟動套件安裝和系統組態。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>


  <sect2 xml:id="sec-boot-systemd">
   <title>systemd 階段</title>
   <para>
    找到<quote>實際的</quote>根檔案系統後，對其進行錯誤檢查並加以掛接。若掛接成功，系統會清理 <systemitem>initramfs</systemitem>，並執行根檔案系統上的 <systemitem class="daemon">systemd</systemitem> 精靈。<systemitem class="daemon">systemd</systemitem> 是 Linux 的系統和服務管理員。它是做為 PID 1 啟動的父程序，用做 init 系統來啟動和維護使用者空間服務。如需詳細資料，請參閱<xref linkend="cha-systemd"/>。
   </para>
  </sect2>
 </sect1>
</chapter>
