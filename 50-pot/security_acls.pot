msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-08-18 22:27+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr ""

#. (itstool) path: chapter/title
#: xml/security_acls.xml:9
msgid "Access Control Lists in Linux"
msgstr ""

#. (itstool) path: abstract/para
#: xml/security_acls.xml:12
msgid "POSIX ACLs (access control lists) can be used as an expansion of the traditional permission concept for file system objects. With ACLs, permissions can be defined more flexibly than with the traditional permission concept."
msgstr ""

#. (itstool) path: chapter/indexterm
#. (itstool) id: security_acls.xml#idx.ACLs
#: xml/security_acls.xml:24
msgid "<primary>ACLs</primary>"
msgstr ""

#. (itstool) path: chapter/indexterm
#. (itstool) id: security_acls.xml#idx.file_systems_access_control_lists
#: xml/security_acls.xml:25
msgid "<primary>file systems</primary> <secondary>ACLs</secondary>"
msgstr ""

#. (itstool) path: chapter/indexterm
#. (itstool) id: security_acls.xml#idx.permissions_ACLs
#: xml/security_acls.xml:27
msgid "<primary>permissions</primary> <secondary>ACLs</secondary>"
msgstr ""

#. (itstool) path: chapter/para
#: xml/security_acls.xml:30
msgid "The term <emphasis>POSIX ACL</emphasis> suggests that this is a true POSIX (<emphasis>portable operating system interface</emphasis>) standard. The respective draft standards POSIX 1003.1e and POSIX 1003.2c have been withdrawn for several reasons. Nevertheless, ACLs (as found on many systems belonging to the Unix family) are based on these drafts and the implementation of file system ACLs (as described in this chapter) follows these two standards."
msgstr ""

#. (itstool) path: sect1/title
#: xml/security_acls.xml:40
msgid "Traditional File Permissions"
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:42
msgid "Find detailed information about the traditional file permissions in the GNU Coreutils Info page, Node <emphasis>File permissions</emphasis> (<command>info coreutils \"File permissions\"</command>). More advanced features are the setuid, setgid, and sticky bit."
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:50
msgid "The setuid Bit"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:51
msgid "In certain situations, the access permissions may be too restrictive. Therefore, Linux has additional settings that enable the temporary change of the current user and group identity for a specific action. For example, the <command>passwd</command> program normally requires root permissions to access <filename>/etc/passwd</filename>. This file contains some important information, like the home directories of users and user and group IDs. Thus, a normal user would not be able to change <filename>passwd</filename>, because it would be too dangerous to grant all users direct access to this file. A possible solution to this problem is the <emphasis>setuid</emphasis> mechanism. setuid (set user ID) is a special file attribute that instructs the system to execute programs marked accordingly under a specific user ID. Consider the <command>passwd</command> command:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:66
#, no-wrap
msgid ""
"-rwsr-xr-x  1 root shadow 80036 2004-10-02 11:08 /usr/bin/passwd"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:67
msgid "You can see the <literal>s</literal> that denotes that the setuid bit is set for the user permission. By means of the setuid bit, all users starting the <command>passwd</command> command execute it as <systemitem class=\"username\">root</systemitem>."
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:76
msgid "The setgid Bit"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:77
msgid "The setuid bit applies to users. However, there is also an equivalent property for groups: the <emphasis>setgid</emphasis> bit. A program for which this bit was set runs under the group ID under which it was saved, no matter which user starts it. Therefore, in a directory with the setgid bit, all newly created files and subdirectories are assigned to the group to which the directory belongs. Consider the following example directory:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:86
#, no-wrap
msgid ""
"drwxrws--- 2 tux archive 48 Nov 19 17:12  backup"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:87
msgid "You can see the <literal>s</literal> that denotes that the setgid bit is set for the group permission. The owner of the directory and members of the group <systemitem class=\"groupname\">archive</systemitem> may access this directory. Users that are not members of this group are <quote>mapped</quote> to the respective group. The effective group ID of all written files will be <systemitem class=\"groupname\">archive</systemitem>. For example, a backup program that runs with the group ID <systemitem class=\"groupname\">archive</systemitem> can access this directory even without root privileges."
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:102
msgid "The Sticky Bit"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:103
msgid "There is also the <emphasis>sticky bit</emphasis>. It makes a difference whether it belongs to an executable program or a directory. If it belongs to a program, a file marked in this way is loaded to RAM to avoid needing to get it from the hard disk each time it is used. This attribute is used rarely, because modern hard disks are fast enough. If this bit is assigned to a directory, it prevents users from deleting each other's files. Typical examples include the <filename>/tmp</filename> and <filename>/var/tmp</filename> directories:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:113
#, no-wrap
msgid ""
"drwxrwxrwt 2 root root 1160 2002-11-19 17:15 /tmp"
msgstr ""

#. (itstool) path: sect1/title
#: xml/security_acls.xml:117
msgid "Advantages of ACLs"
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:119
msgid "Traditionally, three permission sets are defined for each file object on a Linux system. These sets include the read (<literal>r</literal>), write (<literal>w</literal>), and execute (<literal>x</literal>) permissions for each of three types of usersâ€”the file owner, the group, and other users. In addition to that, it is possible to set the <emphasis>set user id</emphasis>, the <emphasis>set group id</emphasis>, and the <emphasis>sticky</emphasis> bit. This lean concept is fully adequate for most practical cases. However, for more complex scenarios or advanced applications, system administrators formerly needed to use several workarounds to circumvent the limitations of the traditional permission concept."
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:133
msgid "ACLs can be used as an extension of the traditional file permission concept. They allow the assignment of permissions to individual users or groups even if these do not correspond to the original owner or the owning group. Access control lists are a feature of the Linux kernel and are currently supported by ReiserFS, Ext2, Ext3, JFS, and XFS. Using ACLs, complex scenarios can be realized without implementing complex permission models on the application level."
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:143
msgid "The advantages of ACLs are evident if you want to replace a Windows server with a Linux server. Some connected workstations may continue to run under Windows even after the migration. The Linux system offers file and print services to the Windows clients with Samba. With Samba supporting access control lists, user permissions can be configured both on the Linux server and in Windows with a graphical user interface (only Windows NT and later). With <command>winbindd</command>, part of the Samba suite, it is even possible to assign permissions to users only existing in the Windows domain without any account on the Linux server."
msgstr ""

#. (itstool) path: sect1/title
#: xml/security_acls.xml:156
msgid "Definitions"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/security_acls.xml:156
msgid "<primary>ACLs</primary> <secondary>definitions</secondary>"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/security_acls.xml:164
msgid "User Class"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:166
msgid "The conventional POSIX permission concept uses three <emphasis>classes</emphasis> of users for assigning permissions in the file system: the owner, the owning group, and other users. Three permission bits can be set for each user class, giving permission to read (<literal>r</literal>), write (<literal>w</literal>), and execute (<literal>x</literal>)."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/security_acls.xml:177
msgid "ACL"
msgstr ""

#. (itstool) path: para/indexterm
#. (itstool) path: sect2/indexterm
#: xml/security_acls.xml:180
#: xml/security_acls.xml:491
msgid "<primary>ACLs</primary> <secondary>access</secondary>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:179
msgid "<_:indexterm-1/> The user and group access permissions for all kinds of file system objects (files and directories) are determined by means of ACLs."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/security_acls.xml:190
msgid "Default ACL"
msgstr ""

#. (itstool) path: listitem/indexterm
#. (itstool) path: sect2/indexterm
#: xml/security_acls.xml:191
#: xml/security_acls.xml:635
msgid "<primary>ACLs</primary> <secondary>default</secondary>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:194
msgid "Default ACLs can only be applied to directories. They determine the permissions a file system object inherits from its parent directory when it is created."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/security_acls.xml:202
msgid "ACL Entry"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:204
msgid "Each ACL consists of a set of ACL entries. An ACL entry contains a type, a qualifier for the user or group to which the entry refers, and a set of permissions. For some entry types, the qualifier for the group or users is undefined."
msgstr ""

#. (itstool) path: sect1/title
#: xml/security_acls.xml:215
msgid "Handling ACLs"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/security_acls.xml:215
msgid "<primary>ACLs</primary> <secondary>handling</secondary>"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/security_acls.xml:219
msgid "<primary>ACLs</primary> <secondary>structure</secondary>"
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:225
msgid "<xref linkend=\"tab.entrytype\"/> summarizes the six possible types of ACL entries, each defining permissions for a user or a group of users. The <emphasis>owner</emphasis> entry defines the permissions of the user owning the file or directory. The <emphasis>owning group</emphasis> entry defines the permissions of the file's owning group. The superuser can change the owner or owning group with <command>chown</command> or <command>chgrp</command>, in which case the owner and owning group entries refer to the new owner and owning group. Each <emphasis>named user</emphasis> entry defines the permissions of the user specified in the entry's qualifier field. Each <emphasis>named group</emphasis> entry defines the permissions of the group specified in the entry's qualifier field. Only the named user and named group entries have a qualifier field that is not empty. The <emphasis>other</emphasis> entry defines the permissions of all other users."
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:242
msgid "The <emphasis>mask</emphasis> entry further limits the permissions granted by named user, named group, and owning group entries by defining which of the permissions in those entries are effective and which are masked. If permissions exist in one of the mentioned entries and in the mask, they are effective. Permissions contained only in the mask or only in the actual entry are not effectiveâ€”meaning the permissions are not granted. All permissions defined in the owner and owning group entries are always effective. The example in <xref linkend=\"tab.mask\"/> demonstrates this mechanism."
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:254
msgid "There are two basic classes of ACLs: A <emphasis>minimum</emphasis> ACL contains only the entries for the types owner, owning group, and other, which correspond to the conventional permission bits for files and directories. An <emphasis>extended</emphasis> ACL goes beyond this. It must contain a mask entry and may contain several entries of the named user and named group types."
msgstr ""

#. (itstool) path: table/title
#: xml/security_acls.xml:264
msgid "ACL Entry Types"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:269
msgid "Type"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:274
#: xml/security_acls.xml:368
msgid "Text Form"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:283
msgid "owner"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:288
msgid "<literal>user::rwx</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:295
#: xml/security_acls.xml:382
msgid "named user"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:300
msgid "<literal>user:name:rwx</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:307
msgid "owning group"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:312
msgid "<literal>group::rwx</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:319
msgid "named group"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:324
msgid "<literal>group:name:rwx</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:331
#: xml/security_acls.xml:399
msgid "mask"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:336
msgid "<literal>mask::rwx</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:343
msgid "other"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:348
msgid "<literal>other::rwx</literal>"
msgstr ""

#. (itstool) path: table/title
#: xml/security_acls.xml:358
msgid "Masking Access Permissions"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:363
msgid "Entry Type"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:373
msgid "Permissions"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:387
msgid "<literal>user:geeko:r-x</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:392
msgid "<literal>r-x</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:404
msgid "<literal>mask::rw-</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:409
msgid "<literal>rw-</literal>"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:419
msgid "effective permissions:"
msgstr ""

#. (itstool) path: entry/para
#: xml/security_acls.xml:424
msgid "<literal>r--</literal>"
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:434
msgid "ACL Entries and File Mode Permission Bits"
msgstr ""

#. (itstool) path: sect2/indexterm
#: xml/security_acls.xml:434
msgid "<primary>ACLs</primary> <secondary>permission bits</secondary>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:437
msgid "<xref linkend=\"fig.acls.map.mini\"/> and <xref linkend=\"fig.acls.map.ext\"/> illustrate the two cases of a minimum ACL and an extended ACL. The figures are structured in three blocksâ€”the left block shows the type specifications of the ACL entries, the center block displays an example ACL, and the right block shows the respective permission bits according to the conventional permission concept (for example, as displayed by <command>ls</command> <option>-l</option>). In both cases, the <emphasis>owner class</emphasis> permissions are mapped to the ACL entry owner. <emphasis>Other class</emphasis> permissions are mapped to the respective ACL entry. However, the mapping of the <emphasis>group class</emphasis> permissions is different in the two cases."
msgstr ""

#. (itstool) path: figure/title
#: xml/security_acls.xml:452
msgid "Minimum ACL: ACL Entries Compared to Permission Bits"
msgstr ""

#. (itstool) path: imageobject/imagedata
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: xml/security_acls.xml:455
#: xml/security_acls.xml:458
msgctxt "_"
msgid "external ref='acls_map_mini.png' md5='__failed__'"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:462
msgid "In the case of a minimum ACLâ€”without maskâ€”the group class permissions are mapped to the ACL entry owning group. This is shown in <xref linkend=\"fig.acls.map.mini\"/>. In the case of an extended ACLâ€”with maskâ€”the group class permissions are mapped to the mask entry. This is shown in <xref linkend=\"fig.acls.map.ext\"/>."
msgstr ""

#. (itstool) path: figure/title
#: xml/security_acls.xml:470
msgid "Extended ACL: ACL Entries Compared to Permission Bits"
msgstr ""

#. (itstool) path: imageobject/imagedata
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: xml/security_acls.xml:473
#: xml/security_acls.xml:476
msgctxt "_"
msgid "external ref='acls_map_ext.png' md5='__failed__'"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:481
msgid "This mapping approach ensures the smooth interaction of applications, regardless of whether they have ACL support. The access permissions that were assigned by means of the permission bits represent the upper limit for all other <quote>fine adjustments</quote> made with an ACL. Changes made to the permission bits are reflected by the ACL and vice versa."
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:491
msgid "A Directory with an ACL"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:494
msgid "With <command>getfacl</command> and <command>setfacl</command> on the command line, you can access ACLs. The usage of these commands is demonstrated in the following example."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:499
msgid "Before creating the directory, use the <command>umask</command> command to define which access permissions should be masked each time a file object is created. The command <command>umask</command> <option>027</option> sets the default permissions by giving the owner the full range of permissions (<literal>0</literal>), denying the group write access (<literal>2</literal>), and giving other users no permissions (<literal>7</literal>). <command>umask</command> actually masks the corresponding permission bits or turns them off. For details, consult the <command>umask</command> man page."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:510
msgid "<command>mkdir mydir</command> creates the <filename>mydir</filename> directory with the default permissions as set by <command>umask</command>. Use <command>ls</command> <option>-dl mydir</option> to check whether all permissions were assigned correctly. The output for this example is:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:517
#, no-wrap
msgid ""
"drwxr-x--- ... tux project3 ... mydir"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:518
msgid "With <command>getfacl</command> <option>mydir</option>, check the initial state of the ACL. This gives information like:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:522
#, no-wrap
msgid ""
"# file: mydir\n"
"# owner: tux\n"
"# group: project3\n"
"user::rwx\n"
"group::r-x\n"
"other::---"
msgstr ""

#. (itstool) path: para/indexterm
#: xml/security_acls.xml:529
msgid "<primary>commands</primary> <secondary>getfacl</secondary>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:528
msgid "<_:indexterm-1/> The first three output lines display the name, owner, and owning group of the directory. The next three lines contain the three ACL entries owner, owning group, and other. In fact, in the case of this minimum ACL, the <command>getfacl</command> command does not produce any information you could not have obtained with <command>ls</command>."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:538
msgid "Modify the ACL to assign read, write, and execute permissions to an additional user <literal>geeko</literal> and an additional group <literal>mascots</literal> with:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:543
#, no-wrap
msgid ""
"setfacl -m user:geeko:rwx,group:mascots:rwx mydir"
msgstr ""

#. (itstool) path: sect2/indexterm
#: xml/security_acls.xml:543
msgid "<primary>commands</primary> <secondary>setfacl</secondary>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:546
msgid "The option <option>-m</option> prompts <command>setfacl</command> to modify the existing ACL. The following argument indicates the ACL entries to modify (multiple entries are separated by commas). The final part specifies the name of the directory to which these modifications should be applied. Use the <command>getfacl</command> command to take a look at the resulting ACL."
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:554
#, no-wrap
msgid ""
"# file: mydir\n"
"# owner: tux\n"
"# group: project3\n"
"user::rwx\n"
"user:geeko:rwx\n"
"group::r-x\n"
"group:mascots:rwx\n"
"mask::rwx\n"
"other::---"
msgstr ""

#. (itstool) path: para/indexterm
#: xml/security_acls.xml:564
msgid "<primary>ACLs</primary> <secondary>masks</secondary>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:563
msgid "<_:indexterm-1/> In addition to the entries initiated for the user <literal>geeko</literal> and the group <literal>mascots</literal>, a mask entry has been generated. This mask entry is set automatically so that all permissions are effective. <command>setfacl</command> automatically adapts existing mask entries to the settings modified, unless you deactivate this feature with <literal>-n</literal>. The mask entry defines the maximum effective access permissions for all entries in the group class. This includes named user, named group, and owning group. The group class permission bits displayed by <command>ls</command> <option>-dl mydir</option> now correspond to the <literal>mask</literal> entry."
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:579
#, no-wrap
msgid ""
"drwxrwx---+ ... tux project3 ... mydir"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:580
msgid "The first column of the output contains an additional <literal>+</literal> to indicate that there is an <emphasis>extended</emphasis> ACL for this item."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:585
msgid "According to the output of the <command>ls</command> command, the permissions for the mask entry include write access. Traditionally, such permission bits would mean that the owning group (here <literal>project3</literal>) also has write access to the directory <filename>mydir</filename>."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:592
msgid "However, the effective access permissions for the owning group correspond to the overlapping portion of the permissions defined for the owning group and for the maskâ€”which is <literal>r-x</literal> in our example (see <xref linkend=\"tab.mask\"/>). As far as the effective permissions of the owning group in this example are concerned, nothing has changed even after the addition of the ACL entries."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:600
msgid "Edit the mask entry with <command>setfacl</command> or <command>chmod</command>. For example, use <command>chmod</command> <option>g-w mydir</option>. <command>ls</command> <option>-dl mydir</option> then shows:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:606
#, no-wrap
msgid ""
"drwxr-x---+ ... tux project3 ... mydir"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:607
msgid "<command>getfacl</command> <option>mydir</option> provides the following output:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/security_acls.xml:611
#, no-wrap
msgid ""
"# file: mydir\n"
"# owner: tux\n"
"# group: project3\n"
"user::rwx\n"
"user:geeko:rwx          # effective: r-x\n"
"group::r-x\n"
"group:mascots:rwx       # effective: r-x\n"
"mask::r-x\n"
"other::---"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:620
msgid "After executing <command>chmod</command> to remove the write permission from the group class bits, the output of <command>ls</command> is sufficient to see that the mask bits must have changed accordingly: write permission is again limited to the owner of <filename>mydir</filename>. The output of the <command>getfacl</command> confirms this. This output includes a comment for all those entries in which the effective permission bits do not correspond to the original permissions, because they are filtered according to the mask entry. The original permissions can be restored at any time with <command>chmod g+w mydir</command>."
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:635
msgid "A Directory with a Default ACL"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:638
msgid "Directories can have a default ACL, which is a special kind of ACL defining the access permissions that objects in the directory inherit when they are created. A default ACL affects both subdirectories and files."
msgstr ""

#. (itstool) path: sect3/title
#: xml/security_acls.xml:645
msgid "Effects of a Default ACL"
msgstr ""

#. (itstool) path: sect3/indexterm
#: xml/security_acls.xml:645
msgid "<primary>ACLs</primary> <secondary>effects</secondary>"
msgstr ""

#. (itstool) path: sect3/para
#: xml/security_acls.xml:648
msgid "There are two ways in which the permissions of a directory's default ACL are passed to the files and subdirectories:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:654
msgid "A subdirectory inherits the default ACL of the parent directory both as its default ACL and as an ACL."
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:660
msgid "A file inherits the default ACL as its ACL."
msgstr ""

#. (itstool) path: sect3/para
#: xml/security_acls.xml:665
msgid "All system calls that create file system objects use a <literal>mode</literal> parameter that defines the access permissions for the newly created file system object. If the parent directory does not have a default ACL, the permission bits as defined by the <literal>umask</literal> are subtracted from the permissions as passed by the <literal>mode</literal> parameter, with the result being assigned to the new object. If a default ACL exists for the parent directory, the permission bits assigned to the new object correspond to the overlapping portion of the permissions of the <literal>mode</literal> parameter and those that are defined in the default ACL. The <literal>umask</literal> is disregarded in this case."
msgstr ""

#. (itstool) path: sect3/title
#: xml/security_acls.xml:680
msgid "Application of Default ACLs"
msgstr ""

#. (itstool) path: sect3/para
#: xml/security_acls.xml:681
msgid "The following three examples show the main operations for directories and default ACLs:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:687
msgid "Add a default ACL to the existing directory <filename>mydir</filename> with:"
msgstr ""

#. (itstool) path: listitem/screen
#: xml/security_acls.xml:691
#, no-wrap
msgid ""
"setfacl -d -m group:mascots:r-x mydir"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:692
msgid "The option <literal>-d</literal> of the <command>setfacl</command> command prompts <command>setfacl</command> to perform the following modifications (option <literal>-m</literal>) in the default ACL."
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:697
msgid "Take a closer look at the result of this command:"
msgstr ""

#. (itstool) path: listitem/screen
#: xml/security_acls.xml:700
#, no-wrap
msgid ""
"getfacl mydir\n"
"\n"
"# file: mydir\n"
"# owner: tux\n"
"# group: project3\n"
"user::rwx\n"
"user:geeko:rwx\n"
"group::r-x\n"
"group:mascots:rwx\n"
"mask::rwx\n"
"other::---\n"
"default:user::rwx\n"
"default:group::r-x\n"
"default:group:mascots:r-x\n"
"default:mask::r-x\n"
"default:other::---"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:716
msgid "<command>getfacl</command> returns both the ACL and the default ACL. The default ACL is formed by all lines that start with <literal>default</literal>. Although you merely executed the <command>setfacl</command> command with an entry for the <literal>mascots</literal> group for the default ACL, <command>setfacl</command> automatically copied all other entries from the ACL to create a valid default ACL. Default ACLs do not have an immediate effect on access permissions. They only come into play when file system objects are created. These new objects inherit permissions only from the default ACL of their parent directory."
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:730
msgid "In the next example, use <command>mkdir</command> to create a subdirectory in <filename>mydir</filename>, which inherits the default ACL."
msgstr ""

#. (itstool) path: listitem/screen
#: xml/security_acls.xml:735
#, no-wrap
msgid ""
"mkdir mydir/mysubdir\n"
"\n"
"getfacl mydir/mysubdir\n"
"\n"
"# file: mydir/mysubdir\n"
"# owner: tux\n"
"# group: project3\n"
"user::rwx\n"
"group::r-x\n"
"group:mascots:r-x\n"
"mask::r-x\n"
"other::---\n"
"default:user::rwx\n"
"default:group::r-x\n"
"default:group:mascots:r-x\n"
"default:mask::r-x\n"
"default:other::---"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:752
msgid "As expected, the newly-created subdirectory <filename>mysubdir</filename> has the permissions from the default ACL of the parent directory. The ACL of <filename>mysubdir</filename> is an exact reflection of the default ACL of <filename>mydir</filename>. The default ACL that this directory will hand down to its subordinate objects is also the same."
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:762
msgid "Use <command>touch</command> to create a file in the <filename>mydir</filename> directory, for example, <command>touch</command> <option>mydir/myfile</option>. <command>ls</command> <option>-l mydir/myfile</option> then shows:"
msgstr ""

#. (itstool) path: listitem/screen
#: xml/security_acls.xml:768
#, no-wrap
msgid ""
"-rw-r-----+ ... tux project3 ... mydir/myfile"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:769
msgid "The output of <command>getfacl</command> <option>mydir/myfile</option> is:"
msgstr ""

#. (itstool) path: listitem/screen
#: xml/security_acls.xml:773
#, no-wrap
msgid ""
"# file: mydir/myfile\n"
"# owner: tux\n"
"# group: project3\n"
"user::rw-\n"
"group::r-x          # effective:r--\n"
"group:mascots:r-x   # effective:r--\n"
"mask::r--\n"
"other::---"
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:781
msgid "<command>touch</command> uses a <literal>mode</literal> with the value <literal>0666</literal> when creating new files, which means that the files are created with read and write permissions for all user classes, provided no other restrictions exist in <command>umask</command> or in the default ACL (see <xref linkend=\"sec.security.acls.handle.defacl.eff\"/>). In effect, this means that all access permissions not contained in the <literal>mode</literal> value are removed from the respective ACL entries. Although no permissions were removed from the ACL entry of the group class, the mask entry was modified to mask permissions not set in <literal>mode</literal>."
msgstr ""

#. (itstool) path: listitem/para
#: xml/security_acls.xml:794
msgid "This approach ensures the smooth interaction of applications (such as compilers) with ACLs. You can create files with restricted access permissions and subsequently mark them as executable. The <command>mask</command> mechanism guarantees that the right users and groups can execute them as desired."
msgstr ""

#. (itstool) path: sect2/title
#: xml/security_acls.xml:807
msgid "The ACL Check Algorithm"
msgstr ""

#. (itstool) path: sect2/indexterm
#: xml/security_acls.xml:807
msgid "<primary>ACLs</primary> <secondary>check algorithm</secondary>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:810
msgid "A check algorithm is applied before any process or application is granted access to an ACL-protected file system object. As a basic rule, the ACL entries are examined in the following sequence: owner, named user, owning group or named group, and other. The access is handled in accordance with the entry that best suits the process. Permissions do not accumulate."
msgstr ""

#. (itstool) path: sect2/para
#: xml/security_acls.xml:818
msgid "Things are more complicated if a process belongs to more than one group and would potentially suit several group entries. An entry is randomly selected from the suitable entries with the required permissions. It is irrelevant which of the entries triggers the final result <quote>access granted</quote>. Likewise, if none of the suitable group entries contain the required permissions, a randomly selected entry triggers the final result <quote>access denied</quote>."
msgstr ""

#. (itstool) path: sect1/title
#: xml/security_acls.xml:830
msgid "ACL Support in Applications"
msgstr ""

#. (itstool) path: sect1/indexterm
#: xml/security_acls.xml:830
msgid "<primary>ACLs</primary> <secondary>support</secondary>"
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:836
msgid "ACLs can be used to implement very complex permission scenarios that meet the requirements of modern applications. The traditional permission concept and ACLs can be combined in a smart manner. The basic file commands (<command>cp</command>, <command>mv</command>, <command>ls</command>, etc.) support ACLs, as do Samba and Nautilus."
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:844
msgid "Unfortunately, many editors and file managers still lack ACL support. When copying files with Emacs, for example, the ACLs of these files are lost. When modifying files with an editor, the ACLs of files are sometimes preserved and sometimes not, depending on the backup mode of the editor used. If the editor writes the changes to the original file, the ACL is preserved. If the editor saves the updated contents to a new file that is subsequently renamed to the old file name, the ACLs may be lost, unless the editor supports ACLs. Except for the <command>star</command> archiver, there are currently no backup applications that preserve ACLs."
msgstr ""

#. (itstool) path: sect1/title
#: xml/security_acls.xml:863
msgid "For More Information"
msgstr ""

#. (itstool) path: sect1/para
#: xml/security_acls.xml:865
msgid "For more information about ACLs, see the man pages for <command>getfacl(1)</command>, <command>acl(5)</command>, and <command>setfacl(1)</command>."
msgstr ""

