<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-nfs">
 <title>Sharing File Systems with NFS</title>
 <info>
  <abstract>
   <para>
    The <emphasis>Network File System</emphasis> (<emphasis>NFS</emphasis>) is
    a protocol that allows access to files on a server ima a manner very
    similar to accessing local files.
   </para>
       <para>
   &sls; SP1 installs NFS v4.2, which introduces support for sparse files, file
   pre-allocation, server-side clone and copy, application data block (ADB), and labeled NFS for
   mandatory access control (MAC) (requires MAC on both client and server).
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <sect1 xml:id="sec-nfs-overview">
  <title>Overview</title>
  <para>
   The <emphasis>Network File System</emphasis> (NFS) is a standardized,
   well-proven and widely supported network protocol that allows files to
   be shared between separate hosts.
  </para>
  <para>
   The <emphasis>Network Information Service</emphasis> (NIS) can be used
   to have a centralized user management in the network. Combining NFS
   and NIS allows using file and directory permissions for access control
   in the network. NFS with NIS makes a network transparent to the user.
  </para>
  <para>
   In the default configuration, NFS completely trusts the network and
   thus any machine that is connected to a trusted network. Any user
   with administrator privileges on any computer with physical access to
   any network the NFS server trusts can access any files that the server
   makes available.
  </para>
  <para>
   Often, this level of security is perfectly satisfactory, such
   as when the network that is trusted is truly private, often localized
   to a single cabinet or machine room, and no unauthorized access is
   possible. In other cases the need to trust a whole subnet as a unit
   is restrictive and there is a need for more fine-grained trust. To
   meet the need in these cases, NFS supports various security levels
   using the <emphasis>Kerberos</emphasis> infrastructure. Kerberos requires
   NFSv4, which is used by default. For details, see
   <xref linkend="cha-security-kerberos"/>.
  </para>

  <para>
   The following are terms used in the &yast; module.
  </para>

  <variablelist>
   <varlistentry>
    <term>Exports</term>
    <listitem>
     <para>
      A directory <emphasis>exported</emphasis> by an NFS server, which clients
      can integrate it into their system.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFS Client</term>
    <listitem>
     <para>
      The NFS client is a system that uses NFS services from an NFS server over
      the Network File System protocol. The TCP/IP protocol is already
      integrated into the Linux kernel; there is no need to install any
      additional software.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFS Server</term>
    <listitem>
     <para>
      The NFS server provides NFS services to clients. A running server depends
      on the following daemons: <systemitem class="daemon">nfsd</systemitem>
      (worker), <systemitem class="daemon">idmapd</systemitem> (ID-to-name
      mapping for NFSv4, needed for certain scenarios only), <systemitem
      class="daemon">statd</systemitem> (file locking), and <systemitem
      class="daemon">mountd</systemitem> (mount requests).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFSv3</term>
    <listitem>
     <para>
      NFSv3 is the version 3 implementation, the <quote>old</quote> stateless
      NFS that supports client authentication.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>NFSv4</term>
    <listitem>
     <para>
      NFSv4 is the new version 4 implementation that supports secure user
      authentication via kerberos. NFSv4 requires one single port only and thus
      is better suited for environments behind a firewall than NFSv3.
     </para>
     <para>
      The protocol is specified as
      <link xlink:href="http://tools.ietf.org/html/rfc3530"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>pNFS</term>
    <listitem>
     <para>
      Parallel NFS, a protocol extension of NFSv4. Any pNFS clients can
      directly access the data on an NFS server.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <important os="sles;osuse">
   <title>Need for DNS</title>
   <para>
    In principle, all exports can be made using IP addresses only. To avoid
    time-outs, you need a working DNS system. DNS is necessary at least for
    logging purposes, because the <systemitem class="daemon">mountd</systemitem> daemon does reverse lookups.
   </para>
  </important>
 </sect1>
<!-- == SLED ======================================================= -->
 <sect1 os="sled" xml:id="sec-nfs-installation-sled">
<!-- For the moment, use different IDs -->

  <title>Installing NFS Server</title>

  <para>
   For installing and configuring an NFS server, see the &sls; documentation.
  </para>
 </sect1>
<!-- == osuse and SLES ============================================ -->
 <sect1 os="sles;osuse" xml:id="sec-nfs-installation">
  <title>Installing NFS Server</title>

   <para>
   The NFS server is not part of the default installation. To install the NFS
   server using &yast;, choose <menuchoice> <guimenu>Software</guimenu>
   <guimenu>Software Management</guimenu></menuchoice>, select
   <guimenu>Patterns</guimenu>, and enable the <guimenu>File Server</guimenu>
   option in the <guimenu>Server Functions</guimenu> section. Click
   <guimenu>Accept</guimenu> to install the required packages.
  </para>
  <para>
   Like NIS, NFS is a client/server system. However, a machine can be
   both&mdash;it can supply file systems over the network (export) and mount
   file systems from other hosts (import).
  </para>

  <note>
<!-- bnc#870129 -->
   <title>Mounting NFS Volumes Locally on the Exporting Server</title>
   <para>
    Mounting NFS volumes locally on the exporting server is not supported on
    &productname;.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-nfs-configuring-nfs-server" os="sles;osuse">
  <title>Configuring NFS Server</title>

  <para>
   Configuring an NFS server can be done either through &yast; or manually. For
   authentication, NFS can also be combined with Kerberos.
  </para>

  <sect2 xml:id="sec-nfs-export-yast2">
   <title>Exporting File Systems with &yast;</title>
   <para>
    With &yast;, turn a host in your network into an NFS server&mdash;a server
    that exports directories and files to all hosts granted access to it or to
    all members of a group. Thus, the server can also provide applications
    without installing the applications locally on every host.
   </para>
   <para>
    To set up such a server, proceed as follows:
   </para>
   <procedure xml:id="pro-nfs-export-yast2-nfs">
    <title>Setting Up an NFS Server</title>
    <step>
     <para>
      Start &yast; and select <menuchoice> <guimenu>Network Services</guimenu>
      <guimenu>NFS Server</guimenu> </menuchoice>; see
      <xref linkend="fig-inst-nfsserver1"/>. You may be prompted to install
      additional software.
     </para>

     <figure xml:id="fig-inst-nfsserver1">
      <title>NFS Server Configuration Tool</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_inst_nfsserver1.png" width="75%"
                   format="PNG" os="sles;sled"/>
        <imagedata fileref="yast2_inst_nfsserver1_kde.png" width="75%"
                   format="PNG" os="osuse"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_inst_nfsserver1.png" width="75%"
                   format="PNG" os="sles;sled"/>
        <imagedata fileref="yast2_inst_nfsserver1_kde.png" width="75%"
                   format="PNG" os="osuse"/>
       </imageobject>
      </mediaobject>
     </figure>

    </step>
    <step>
     <para>
      Activate the <guimenu>Start</guimenu> radio button.
     </para>
    </step>
    <step>
     <para>
      If a firewall is active on your system (&susefirewall;), check
      <guimenu>Open Ports in Firewall</guimenu>. &yast; adapts its
      configuration for the NFS server by enabling the
      <systemitem class="service">nfs</systemitem> service.
     </para>
    </step>
    <step>
     <para>
      Check whether you want to <guimenu>Enable NFSv4</guimenu>. If you
      deactivate NFSv4, &yast; will only support NFSv3. For information about
      enabling NFSv2, see <xref
      linkend="sec-nfs-export-manual-nsfv2"/>.
     </para>
     <substeps performance="required">
      <step>
       <para>
        If NFSv4 is selected, additionally enter the appropriate NFSv4 domain
        name. This parameter is used by the <systemitem
        class="daemon">idmapd</systemitem> daemon that is required for Kerberos
        setups or if clients cannot work with numeric user names. Leave it as
        <literal>localdomain</literal> (the default) if you do not run
        <systemitem class="daemon">idmapd</systemitem> or do not have any
        special requirements. For more information on the <systemitem
        class="daemon">idmapd</systemitem> daemon see <xref
        linkend="var-nfs-export-manual-idmapd"/>.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Click <guimenu>Enable GSS Security</guimenu> if you need secure access to
      the server. A prerequisite for this is to have Kerberos installed on your
      domain and to have both the server and the clients kerberized.
      <remark>emap 2011-0824: A reference to a Kerberos chapter
      would be good.</remark>
      Click <guimenu>Next</guimenu> to proceed with the next configuration
      dialog.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Add Directory</guimenu> in the upper half of the dialog to
      export your directory.
     </para>
    </step>
    <step>
     <para>
      If you have not configured the allowed hosts already, another dialog for
      entering the client information and options pops up automatically. Enter
      the host wild card (usually you can leave the default settings as they
      are).
     </para>
<!--<para>The default settings allow every host in your network to
         connect. In case you want to restrict to a set of allowed
         hosts, enter the IP addresses or host names in the
         <guimenu>Host Wild Card</guimenu> textfield. See
         <citetitle>man exports</citetitle> for a detailed view of all
         possible variants.</para>-->
     <para>
      There are four possible types of host wild cards that can be set for each
      host: a single host (name or IP address), netgroups, wild cards (such as
      <literal>*</literal> indicating all machines can access the server), and
      IP networks.
     </para>
     <para>
      For more information about these options, see the
      <literal>exports</literal> man page.
     </para>
    </step>
    <step>
     <para>
      Click <guimenu>Finish</guimenu> to complete the configuration.
     </para>
    </step>
   </procedure>
  </sect2>

<!-- ============================================================== -->

  <sect2 xml:id="sec-nfs-export-manual" os="sles;osuse">
   <title>Exporting File Systems Manually</title>
   <para>
    The configuration files for the NFS export service are
    <filename>/etc/exports</filename> and
    <filename>/etc/sysconfig/nfs</filename>. In addition to these files,
    <filename>/etc/idmapd.conf</filename> is needed for the NFSv4 server
    configuration with kerberized NFS or if the clients cannot work with
    numeric user names.
   </para>
   <para>
    To start or restart the services, run the command
    <command>systemctl restart nfsserver</command>. This also restarts the
    RPC portmapper that is required by the NFS server.
   </para>
   <para>
    To make sure the NFS server always starts at boot time, run <command>sudo
    systemctl enable nfsserver</command>.
   </para>
   <note>
    <title>NFSv4</title>
    <para>
     NFSv4 is the latest version of NFS protocol available on &productname;.
     Configuring directories for export with NFSv4 is now the same as with
     NFSv3.
    </para>
    <para>
     On <phrase os="sles;sled">&sls; 11</phrase><phrase os="osuse">&opensuse;
     prior to Leap</phrase>, the bind mount in
     <filename>/etc/exports</filename> was mandatory. It is still supported,
     but now deprecated.
    </para>
   </note>
   <variablelist>
    <varlistentry>
     <term><filename>/etc/exports</filename></term>
     <listitem>
      <para>
       The <filename>/etc/exports</filename> file contains a list of entries.
       Each entry indicates a directory that is shared and how it is shared. A
       typical entry in <filename>/etc/exports</filename> consists of:
      </para>
<screen>/<replaceable>SHARED</replaceable>/<replaceable>DIRECTORY</replaceable>   <replaceable>HOST</replaceable>(<replaceable>OPTION_LIST</replaceable>)</screen>
      <para>
       For example:
      </para>
<screen>/export/data   192.168.1.2(rw,sync)</screen>
      <para>
       Here the IP address <literal>192.168.1.2</literal> is used to identify
       the allowed client. You can also use the name of the host, a wild card
       indicating a set of hosts (<literal>*.abc.com</literal>,
       <literal>*</literal>, etc.), or netgroups
       (<literal>@my-hosts</literal>).
      </para>
      <para>
       For a detailed explanation of all options and their meaning, refer to
       the man page of <filename>/etc/exports</filename> (<command>man
       exports</command>).
      </para>
      <para>
       In case you have modified <filename>/etc/exports</filename> while the
       NFS server was running, you need to restart it for the changes to become
       active: <command>sudo systemctl restart nfsserver</command>.
      </para>
<!--
     <para>
      When clients mount from this server, they just mount
      <literal>servername:/</literal> rather than
      <literal>servername:/export</literal>. It is not necessary to mount
      <literal>servername:/data</literal>, because it will automatically
      appear beneath wherever <literal>servername:/</literal> was mounted.
     </para>
     -->
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/etc/sysconfig/nfs</filename></term>
     <listitem>
      <para>
       The <filename>/etc/sysconfig/nfs</filename> file contains a few
       parameters that determine NFSv4 server daemon behavior. It is important
       to set the parameter <systemitem>NFS4_SUPPORT</systemitem> to
       <literal>yes</literal> (default). <systemitem>NFS4_SUPPORT</systemitem>
       determines whether the NFS server supports NFSv4 exports and clients.
      </para>
      <para>
       In case you have modified <filename>/etc/sysconfig/nfs</filename> while
       the NFS server was running, you need to restart it for the changes to
       become active: <command>sudo systemctl restart nfsserver</command>.
      </para>
      <tip>
       <title>Mount Options</title>
       <para>
        On <phrase os="sles;sled">&sls; 11</phrase><phrase
        os="osuse">&opensuse; prior to Leap</phrase>, the
        <option>--bind</option> mount in <filename>/etc/exports</filename> was
        mandatory. It is still supported, but now deprecated. Configuring
        directories for export with NFSv4 is now the same as with NFSv3.
       </para>
      </tip>
      <note xml:id="sec-nfs-export-manual-nsfv2">
<!-- bsc#919708 -->
       <title>NFSv2</title>
       <para>
        If NFS clients still depend on NFSv2, enable it on the server in
        <filename>/etc/sysconfig/nfs</filename> by setting:
       </para>
<screen>NFSD_OPTIONS="-V2"
MOUNTD_OPTIONS="-V2"</screen>
       <para>
        After restarting the service, check whether version 2 is available
        with the command:
       </para>
<screen>&prompt.user;cat /proc/fs/nfsd/versions
+2 +3 +4 +4.1 +4.2</screen>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="var-nfs-export-manual-idmapd">
     <term><filename>/etc/idmapd.conf</filename></term>
     <listitem>
      <para>
       The <systemitem class="daemon">idmapd</systemitem> daemon is only
       required if Kerberos authentication is used, or if clients cannot work
       with numeric user names. Linux clients can work with numeric user names
       since Linux kernel 2.6.39. The <systemitem
       class="daemon">idmapd</systemitem> daemon does the name-to-ID mapping
       for NFSv4 requests to the server and replies to the client.
      </para>
      <para>
       If required, <systemitem class="daemon">idmapd</systemitem>
       needs to run on the NFSv4 server. Name-to-ID mapping on the client will
       be done by <command>nfsidmap</command> provided by the package
       <package>nfs-client</package>.
      </para>
      <para>
       Make sure that there is a uniform way in which user names and IDs (UIDs)
       are assigned to users across machines that might probably be sharing
       file systems using NFS. This can be achieved by using NIS, LDAP, or any
       uniform domain authentication mechanism in your domain.
      </para>
      <para>
       The parameter <literal>Domain</literal> must be set the same for both,
       client and server in the <filename>/etc/idmapd.conf</filename> file. If
       you are not sure, leave the domain as <literal>localdomain</literal> in
       the server and client files. A sample configuration file looks like the
       following:
      </para>
<screen>[General]
Verbosity = 0
Pipefs-Directory = /var/lib/nfs/rpc_pipefs
Domain = localdomain

[Mapping]
Nobody-User = nobody
Nobody-Group = nobody</screen>
      <para>
       To start the <systemitem class="daemon">idmapd</systemitem> daemon, run
       <command>systemctl start nfs-idmapd</command>. In case you have modified
       <filename>/etc/idmapd.conf</filename> while the daemon was running, you
       need to restart it for the changes to become active: <command>systemctl
       start nfs-idmapd</command>.
      </para>
      <para>
       For more information, see the man pages of <literal>idmapd</literal> and
       <literal>idmapd.conf</literal> (<literal>man idmapd</literal> and
       <literal>man idmapd.conf</literal>).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

<!-- ============================================================== -->

  <sect2 xml:id="sec-nfs-kerberos">
   <title>NFS with Kerberos</title>
   <para>
    To use Kerberos authentication for NFS, Generic Security Services (GSS) must be enabled.
    Select <guimenu>Enable GSS Security</guimenu> in the initial &yast; NFS
    Server dialog. You must have a working Kerberos server to use this feature.
    &yast; does not set up the server but only uses the provided functionality.
    To use Kerberos authentication in addition to the &yast;
    configuration, complete at least the following steps before running the NFS
    configuration:
   </para>
   <procedure>
    <step>
     <para>
      Make sure that both the server and the client are in the same Kerberos
      domain. They must access the same KDC (Key Distribution Center) server
      and share their <filename>krb5.keytab</filename> file (the default
      location on any machine is <filename>/etc/krb5.keytab</filename>). For
      more information about Kerberos, see
      <xref linkend="cha-security-kerberos"/>.
     </para>
    </step>
    <step>
     <para>
      Start the gssd service on the client with <command>systemctl start
      rpc-gssd.service</command>.
     </para>
    </step>
    <step os="sles;osuse">
     <para>
      Start the svcgssd service on the server with <command>systemctl start
      rpc-svcgssd.service</command>.
     </para>
    </step>
   </procedure>
   <para>
    Kerberos authentication also requires the <systemitem
    class="daemon">idmapd</systemitem> daemon to run on the server. For more
    information refer to <xref linkend="var-nfs-export-manual-idmapd"/>.
   </para>
   <para>
    For more information about configuring kerberized NFS, refer to the links
    in <xref linkend="sec-nfs-info" xrefstyle="SectTitleOnPage"/>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-nfs-configuring-nfs-clients">
  <title>Configuring Clients</title>

  <para>
   To configure your host as an NFS client, you do not need to install
   additional software. All needed packages are installed by default.
  </para>

  <sect2 xml:id="sec-nfs-import-yast2">
   <title>Importing File Systems with &yast;</title>
   <para>
    Authorized users can mount NFS directories from an NFS server into the
    local file tree using the &yast; NFS client module. Proceed as follows:
   </para>
   <procedure xml:id="pro-nfs-import-yast2">
    <title>Importing NFS Directories</title>
    <step>
     <para>
      Start the &yast; NFS client module.
     </para>
    </step>
<!-- Start: <guimenu>NFS Shares</guimenu> -->
    <step>
     <para>
      Click <guimenu>Add</guimenu> in the <guimenu>NFS Shares</guimenu> tab.
      Enter the host name of the NFS server, the directory to import, and the
      mount point at which to mount this directory locally.
     </para>
    </step>
<!-- End: NFS Shares -->
<!-- Start: <guimenu>NFS Settings</guimenu> -->
    <step>
     <para>
      When using NFSv4, select <guimenu>Enable NFSv4</guimenu> in the
      <guimenu>NFS Settings</guimenu> tab. Additionally, the <guimenu>NFSv4
      Domain Name</guimenu> must contain the same value as used by the NFSv4
      server. The default domain is <literal>localdomain</literal>.
     </para>
    </step>
    <step>
     <para>
      To use Kerberos authentication for NFS, GSS security must be enabled.
      Select <guimenu>Enable GSS Security</guimenu>.
     </para>
    </step>
    <step>
     <para>
      Enable <guimenu>Open Port in Firewall</guimenu> in the <guimenu>NFS
      Settings</guimenu> tab if you use a Firewall and want to allow access to
      the service from remote computers. The firewall status is displayed next
      to the check box.
     </para>
    </step>
<!-- End: NFS Settings -->
    <step>
     <para>
      Click <guimenu>OK</guimenu> to save your changes.
     </para>
    </step>
   </procedure>
   <para>
    The configuration is written to <filename>/etc/fstab</filename> and the
    specified file systems are mounted. When you start the &yast; configuration
    client at a later time, it also reads the existing configuration from this
    file.
   </para>
   <tip>
    <title>NFS as a Root File System</title>
    <para>
     On (diskless) systems, where the root partition is mounted via network as
     an NFS share, you need to be careful when configuring the network device
     with which the NFS share is accessible.
    </para>
    <para>
     When shutting down or rebooting the system, the default processing order
     is to turn off network connections, then unmount the root partition. With
     NFS root, this order causes problems as the root partition cannot be
     cleanly unmounted as the network connection to the NFS share is already
     not activated. To prevent the system from deactivating the relevant
     network device, open the network device configuration tab as described in
     <xref linkend="sec-network-yast-change-start"/> and choose <guimenu>On
     NFSroot</guimenu> in the <guimenu>Device Activation</guimenu> pane.
    </para>
   </tip>
<!--
   <figure id="fig-yast2-nfs-client">
    <title>NFS Client Configuration with YaST</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="yast2_nfsclient.png" width="75%"
              format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="yast2_nfsclient.png" width="75%"
              format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
-->
  </sect2>

  <sect2 xml:id="sec-nfs-import">
   <title>Importing File Systems Manually</title>

<!-- mention nfs.service according to bnc#884690 -->
   <para>
    The prerequisite for importing file systems manually from an NFS server is
    a running RPC port mapper. The <option>nfs</option> service takes care to
    start it properly; thus, start it by entering <command>systemctl start
    nfs</command> as <systemitem class="username">root</systemitem>. Then
    remote file systems can be mounted in the file system like local partitions
    using <command>mount</command>:
   </para>
<screen>&prompt.sudo;mount <replaceable>HOST</replaceable>:<replaceable>REMOTE-PATH</replaceable><replaceable>LOCAL-PATH</replaceable></screen>
   <para>
    To import user directories from the <systemitem>&nfsname;</systemitem>
    machine, for example, use:
   </para>
<screen>&prompt.sudo;mount &nfsname;:/home /home</screen>
   <sect3 xml:id="sec-nfs-automount">
    <title>Using the Automount Service</title>
    <para>
     The autofs daemon can be used to mount remote file systems automatically.
     Add the following entry to the <filename>/etc/auto.master</filename> file:
    </para>
<screen>/nfsmounts /etc/auto.nfs</screen>
    <para>
     Now the <filename>/nfsmounts</filename> directory acts as the root for all
     the NFS mounts on the client if the <filename>auto.nfs</filename> file is
     filled appropriately. The name <filename>auto.nfs</filename> is chosen for
     the sake of convenience&mdash;you can choose any name. In
     <filename>auto.nfs</filename> add entries for all the NFS mounts as
     follows:
    </para>
<screen>localdata -fstype=nfs server1:/data
nfs4mount -fstype=nfs4 server2:/</screen>
    <para>
     Activate the settings with <command>systemctl start autofs</command> as
     &rootuser;. In this example, <filename>/nfsmounts/localdata</filename>,
     the <filename>/data</filename> directory of
     <systemitem>server1</systemitem>, is mounted with NFS and
     <filename>/nfsmounts/nfs4mount</filename> from
     <systemitem>server2</systemitem> is mounted with NFSv4.
    </para>
    <para>
     If the <filename>/etc/auto.master</filename> file is edited while the
     service autofs is running, the automounter must be restarted for the
     changes to take effect with <command>systemctl restart autofs</command>.
    </para>
   </sect3>
   <sect3 xml:id="sec-nfs-fstab">
    <title>Manually Editing <filename>/etc/fstab</filename></title>
    <para>
     A typical NFSv3 mount entry in <filename>/etc/fstab</filename> looks like
     this:
    </para>
<screen>&nfsname;:/data /local/path nfs rw,noauto 0 0</screen>
    <para>
     For NFSv4 mounts, use <literal>nfs4</literal> instead of
     <literal>nfs</literal> in the third column:
    </para>
<screen>&nfsname;:/data /local/pathv4 nfs4 rw,noauto 0 0</screen>
    <para>
     The <literal>noauto</literal> option prevents the file system from being
     mounted automatically at start-up. If you want to mount the respective
     file system manually, it is possible to shorten the mount command
     specifying the mount point only:
    </para>
<screen>&prompt.sudo;mount /local/path</screen>
    <note>
     <title>Mounting at Start-Up</title>
     <para>
      If you do not enter the <literal>noauto</literal> option, the init
      scripts of the system will handle the mount of those file systems at
      start-up.
     </para>
    </note>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-nfs-pnfs">
   <title>Parallel NFS (pNFS)</title>
   <para>
    NFS is one of the oldest protocols, developed in the '80s. As such, NFS is
    usually sufficient if you want to share small files. However, when you want
    to transfer big files or many clients want to access data, an
    NFS server becomes a bottleneck and has a significant impact on the system
    performance. This is because of files quickly getting bigger, whereas the
    relative speed of your Ethernet has not fully kept up.
   </para>
   <para>
    When you request a file from a regular NFS server, the server
    looks up the file metadata, collects all the data and transfers it over the
    network to your client. However, the performance bottleneck becomes
    apparent no matter how small or big the files are:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      With small files most of the time is spent collecting the metadata.
     </para>
    </listitem>
    <listitem>
     <para>
      With big files most of the time is spent on transferring the data from
      server to client.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    pNFS, or parallel NFS, overcomes this limitation as it separates the file
    system metadata from the location of the data. As such, pNFS requires two
    types of servers:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      A <emphasis>metadata</emphasis> or <emphasis>control server</emphasis>
      that handles all the non-data traffic
     </para>
    </listitem>
    <listitem>
     <para>
      One or more <emphasis>storage server(s)</emphasis> that hold(s) the data
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The metadata and the storage servers form a single, logical NFS server.
    When a client wants to read or write, the metadata server tells the NFSv4
    client which storage server to use to access the file chunks. The client
    can access the data directly on the server.
   </para>
   <para>
    &productname; supports pNFS on the client side only.
   </para>
   <sect3 xml:id="sec-nfs-pnfs-yast">
    <title>Configuring pNFS Client With &yast;</title>
    <para>
     Proceed as described in <xref linkend="pro-nfs-import-yast2"/>, but click
     the <guimenu>pNFS (v4.2)</guimenu> check box and optionally <guimenu>NFSv4
     share</guimenu>. &yast; will do all the necessary steps and will write all
     the required options in the file <filename>/etc/exports</filename>.
    </para>
   </sect3>
   <sect3 xml:id="sec-nfs-pnfs-manual">
    <title>Configuring pNFS Client Manually</title>
    <para>
     Refer to <xref linkend="sec-nfs-import"/> to start. Most of the
     configuration is done by the NFSv4 server. For pNFS, the only difference
     is to add the <option>minorversion</option> option and the metadata server
     <replaceable>MDS_SERVER</replaceable> to your <command>mount</command>
     command:
    </para>
<screen>&prompt.sudo;mount -t nfs4 -o minorversion=1 <replaceable>MDS_SERVER</replaceable> <replaceable>MOUNTPOINT</replaceable></screen>
    <para>
     To help with debugging, change the value in the <filename>/proc</filename>
     file system:
    </para>
<screen>&prompt.sudo;echo 32767 &gt; /proc/sys/sunrpc/nfsd_debug
&prompt.sudo;echo 32767 &gt; /proc/sys/sunrpc/nfs_debug</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-nfs-info">
  <title>For More Information</title>
  <para>
   In addition to the man pages of <command>exports</command>,
   <command>nfs</command>, and <command>mount</command>, information about
   configuring an NFS server and client is available in
   <filename>/usr/share/doc/packages/nfsidmap/README</filename>. For further
   documentation online refer to the following Web sites:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Find the detailed technical documentation online at
     <link xlink:href="http://nfs.sourceforge.net/">SourceForge</link>.
    </para>
   </listitem>
   <listitem>
    <para>
     For instructions for setting up kerberized NFS, refer to
     <link xlink:href="http://www.citi.umich.edu/projects/nfsv4/linux/krb5-setup.html">NFS
     Version 4 Open Source Reference Implementation</link>.
    </para>
   </listitem>
   <listitem>
    <para>
     If you have questions on NFSv4, refer to the
     <link xlink:href="http://www.citi.umich.edu/projects/nfsv4/linux/faq/">Linux
     NFSv4 FAQ</link>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
