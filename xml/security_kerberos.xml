<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
         xml:id="cha.security.kerberos">
 <title>Network Authentication with &krb;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>

 <para>
  An open network provides no means of ensuring that a workstation can
  identify its users properly, except through the usual password mechanisms.
  In common installations, the user must enter the password each time a
  service inside the network is accessed. &krb; provides an
  authentication method with which a user registers only once and is trusted
  in the complete network for the rest of the session. To have a secure
  network, the following requirements must be met:
 </para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    Have all users prove their identity for each desired service and make
    sure that no one can take the identity of someone else.
   </para>
  </listitem>
  <listitem>
   <para>
    Make sure that each network server also proves its identity. Otherwise
    an attacker might be able to impersonate the server and obtain sensitive
    information transmitted to the server. This concept is called
    <emphasis>mutual authentication</emphasis>, because the client
    authenticates to the server and vice versa.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  &krb; helps you meet these requirements by providing strongly encrypted
  authentication. Only the basic principles of &krb; are discussed here.
  For detailed technical instruction, refer to the &krb; documentation.
 </para>
 <sect1 xml:id="sec.security.kerberos.terms">
  <title>&krb; Terminology</title>

  <para>
   The following glossary defines some &krb; terminology.
  </para>

  <variablelist>
   <varlistentry>
    <term>credential</term>
    <listitem>
     <para>
      Users or clients need to present some kind of credentials that authorize
      them to request services. &krb; knows two kinds of
      credentials&mdash;tickets and authenticators.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ticket</term>
    <listitem>
     <para>
      A ticket is a per-server credential used by a client to
      authenticate at a server from which it is requesting a service. It
      contains the name of the server, the client's name, the client's
      Internet address, a time stamp, a lifetime, and a random session key.
      All this data is encrypted using the server's key.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>authenticator</term>
    <listitem>
     <para>
      Combined with the ticket, an authenticator is used to prove that the
      client presenting a ticket is really the one it claims to be. An
      authenticator is built using the client's name, the workstation's IP
      address, and the current workstation's time, all encrypted with the
      session key known only to the client and the relevant server. An
      authenticator can only be used once, unlike a ticket. A client can build
      an authenticator itself.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>principal</term>
    <listitem>
     <para>
      A &krb; principal is a unique entity (a user or service) to which it
      can assign a ticket. A principal consists of the following components:
     </para>
     <screen><replaceable>USER</replaceable>/<replaceable>INSTANCE</replaceable>@<replaceable>REALM</replaceable></screen>

     <itemizedlist>
      <listitem>
       <formalpara>
        <title>primary:</title>
        <para>
         The first part of the principal. In the case of users, this is
         usually the same as the user name.
        </para>
       </formalpara>
      </listitem>
      <listitem>
       <formalpara>
        <title>instance <emphasis>(optional)</emphasis>:</title>
        <para>
         Additional information characterizing the
         <emphasis>primary</emphasis>. This string is separated from the
         <emphasis>primary</emphasis> by a <literal>/</literal>.
        </para>
       </formalpara>
       <para>
       <literal>tux@example.org</literal> and
       <literal>tux/admin@example.org</literal> can both exist on the same
       &krb; system and are treated as different principals.
       </para>
      </listitem>
      <listitem>
       <formalpara>
        <title>realm:</title>
        <para>
         Specifies the &krb; realm. Normally, your realm is your domain
         name in uppercase letters.
        </para>
       </formalpara>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>mutual authentication</term>
    <listitem>
     <para>
      &krb; ensures that both client and server can be sure of each
      other's identity. They share a session key, which they can use to
      communicate securely.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>session key</term>
    <listitem>
     <para>
      Session keys are temporary private keys generated by &krb;. They are
      known to the client and used to encrypt the communication between the
      client and the server for which it requested and received a ticket.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>replay</term>
    <listitem>
     <para>
      Almost all messages sent in a network can be eavesdropped, stolen, and
      resent. In the &krb; context, this would be most dangerous if an
      attacker manages to obtain your request for a service containing your
      ticket and authenticator. The attacker could then try to resend it
      (<emphasis>replay</emphasis>) to impersonate you. However, &krb;
      implements several mechanisms to deal with this problem.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>server or service</term>
    <listitem>
     <para>
      <emphasis>Service</emphasis> is used to refer to a specific action to
      perform. The process behind this action is called a
      <emphasis>server</emphasis>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.security.kerberos.how">
  <title>How &krb; Works</title>

  <para>
   &krb; is often called a third-party trusted authentication service,
   which means all its clients trust &krb;'s judgment of another client's
   identity. &krb; keeps a database of all its users and their private
   keys.
  </para>

  <para>
   To ensure &krb; is working correctly, run both the authentication and
   ticket-granting server on a dedicated machine. Make sure that only the
   administrator can access this machine physically and over the network.
   Reduce the (networking) services running on it to the absolute
   minimum&mdash;do not even run
   <systemitem class="daemon">sshd</systemitem>.
  </para>

  <sect2 xml:id="sec.security.kerberos.how.contact">
   <title>First Contact</title>
   <para>
    Your first contact with &krb; is quite similar to any login procedure
    at a normal networking system. Enter your user name. This piece of
    information and the name of the ticket-granting service are sent to the
    authentication server (&krb;). If the authentication server knows
    you, it generates a random session key for further use between your
    client and the ticket-granting server. Now the authentication server
    prepares a ticket for the ticket-granting server. The ticket contains
    the following information&mdash;all encrypted with a session key only
    the authentication server and the ticket-granting server know:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The names of both, the client and the ticket-granting server
     </para>
    </listitem>
    <listitem>
     <para>
      The current time
     </para>
    </listitem>
    <listitem>
     <para>
      A lifetime assigned to this ticket
     </para>
    </listitem>
    <listitem>
     <para>
      The client's IP address
     </para>
    </listitem>
    <listitem>
     <para>
      The newly-generated session key
     </para>
    </listitem>
   </itemizedlist>
   <para>
    This ticket is then sent back to the client together with the session
    key, again in encrypted form, but this time the private key of the
    client is used. This private key is only known to &krb; and the
    client, because it is derived from your user password. Now that the
    client has received this response, you are prompted for your password.
    This password is converted into the key that can decrypt the package
    sent by the authentication server. The package is
    <quote>unwrapped</quote> and password and key are erased from the
    workstation's memory. As long as the lifetime given to the ticket used
    to obtain other tickets does not expire, your workstation can prove your
    identity.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.how.request">
   <title>Requesting a Service</title>
   <para>
    To request a service from any server in the network, the client
    application needs to prove its identity to the server. Therefore, the
    application generates an authenticator. An authenticator consists of the
    following components:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The client's principal
     </para>
    </listitem>
    <listitem>
     <para>
      The client's IP address
     </para>
    </listitem>
    <listitem>
     <para>
      The current time
     </para>
    </listitem>
    <listitem>
     <para>
      A checksum (chosen by the client)
     </para>
    </listitem>
   </itemizedlist>
   <para>
    All this information is encrypted using the session key that the client
    has already received for this special server. The authenticator and the
    ticket for the server are sent to the server. The server uses its copy
    of the session key to decrypt the authenticator, which gives it all the
    information needed about the client requesting its service, to compare
    it to that contained in the ticket. The server checks if the ticket and
    the authenticator originate from the same client.
   </para>
   <para>
    Without any security measures implemented on the server side, this stage
    of the process would be an ideal target for replay attacks. Someone
    could try to resend a request stolen off the net some time before. To
    prevent this, the server does not accept any request with a time stamp
    and ticket received previously. In addition to that, a request with a
    time stamp differing too much from the time the request is received is
    ignored.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.how.mutual">
   <title>Mutual Authentication</title>
   <para>
    &krb; authentication can be used in both directions. It is not only a
    question of the client being the one it claims to be. The server should
    also be able to authenticate itself to the client requesting its
    service. Therefore, it sends an authenticator itself. It adds one to the
    checksum it received in the client's authenticator and encrypts it with
    the session key, which is shared between it and the client. The client
    takes this response as a proof of the server's authenticity and they
    both start cooperating.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.how.tgs">
   <title>Ticket Granting&mdash;Contacting All Servers</title>
   <para>
    Tickets are designed to be used for one server at a time.  Therefore, you
    need to get a new ticket each time you request another service. &krb;
    implements a mechanism to obtain tickets for individual servers. This
    service is called the <quote>ticket-granting service</quote>. The
    ticket-granting service is a service (like any other service mentioned
    before) and uses the same access protocols that have already been
    outlined. Any time an application needs a ticket that has not already been
    requested, it contacts the ticket-granting server.  This request consists
    of the following components:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The requested principal
     </para>
    </listitem>
    <listitem>
     <para>
      The ticket-granting ticket
     </para>
    </listitem>
    <listitem>
     <para>
      An authenticator
     </para>
    </listitem>
   </itemizedlist>
   <para>
    Like any other server, the ticket-granting server now checks the
    ticket-granting ticket and the authenticator. If they are considered
    valid, the ticket-granting server builds a new session key to be used
    between the original client and the new server. Then the ticket for the
    new server is built, containing the following information:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The client's principal
     </para>
    </listitem>
    <listitem>
     <para>
      The server's principal
     </para>
    </listitem>
    <listitem>
     <para>
      The current time
     </para>
    </listitem>
    <listitem>
     <para>
      The client's IP address
     </para>
    </listitem>
    <listitem>
     <para>
      The newly-generated session key
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The new ticket has a lifetime, which is either the remaining lifetime of
    the ticket-granting ticket or the default for the service. The lesser of
    both values is assigned. The client receives this ticket and the session
    key, which are sent by the ticket-granting service. But this time the
    answer is encrypted with the session key that came with the original
    ticket-granting ticket. The client can decrypt the response without
    requiring the user's password when a new service is contacted. &krb;
    can thus acquire ticket after ticket for the client without bothering
    the user.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.security.kerberos.users">
  <title>User View of &krb;</title>

  <para>
   Ideally, a user only contact with &krb; happens during login
   at the workstation. The login process includes obtaining a
   ticket-granting ticket. At logout, a user's &krb; tickets are
   automatically destroyed, which makes it difficult for anyone else to
   impersonate this user.
  </para>

  <para>
   The automatic expiration of tickets can lead to a situation when a user's login session lasts longer than the maximum
   lifespan given to the ticket-granting ticket (a reasonable setting is 10
   hours). However, the user can get a new ticket-granting ticket by running
   <command>kinit</command>. Enter the password again and &krb; obtains
   access to desired services without additional authentication. To get a
   list of all the tickets silently acquired for you by &krb;, run
   <command>klist</command>.
  </para>

  <para>
   Here is a short list of applications that use &krb; authentication.
   These applications can be found under
   <filename>/usr/lib/mit/bin</filename> or
   <filename>/usr/lib/mit/sbin</filename> after installing the package
   <systemitem>krb5-apps-clients</systemitem>. They all have the full
   functionality of their common Unix and Linux brothers plus the additional
   bonus of transparent authentication managed by &krb;:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <command>telnet</command>,
     <systemitem class="daemon">telnetd</systemitem>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>rlogin</command>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>rsh</command>, <command>rcp</command>,
     <systemitem class="daemon">rshd</systemitem>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>ftp</command>, <systemitem class="daemon">ftpd</systemitem>
    </para>
   </listitem>
   <listitem os="sles;osuse">
    <para>
     <command>ksu</command>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   You no longer need to enter your password for using these applications
   because &krb; has already proven your identity.
   <command>ssh</command>, if compiled with &krb; support, can even
   forward all the tickets acquired for one workstation to another one. If
   you use <command>ssh</command> to log in to another workstation,
   <command>ssh</command> makes sure that the encrypted contents of the
   tickets are adjusted to the new situation. Simply copying tickets between
   workstations is not sufficient because the ticket contains
   workstation-specific information (the IP address). XDM and GDM offer
   &krb; support, too. Read more about the &krb; network applications
   in <citetitle>Kerberos V5 UNIX User's Guide</citetitle> at
   <link xlink:href="http://web.mit.edu/kerberos"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.security.kerberos.admin" os="sles;osuse">
  <title>Installing and Administering &krb;</title>

  <para>
   A &krb; environment consists of several components. A key
   distribution center (KDC) holds the central database with all
   &krb;-relevant data. All clients rely on the KDC for proper
   authentication across the network. Both the KDC and the clients need to
   be configured to match your setup:
  </para>

  <variablelist>
   <varlistentry>
    <term>General Preparations</term>
    <listitem>
     <para>
      Check your network setup and make sure it meets the minimum
      requirements outlined in
      <xref linkend="sec.security.kerberos.admin.top"/>. Choose an
      appropriate realm for your &krb; setup, see
      <xref linkend="sec.security.kerberos.admin.realm"/>. Carefully set up
      the machine that is to serve as the KDC and apply tight security, see
      <xref linkend="sec.security.kerberos.admin.kdc"/>. Set up a reliable
      time source in your network to make sure all tickets contain valid
      time stamps, see <xref linkend="sec.security.kerberos.admin.time"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Basic Configuration</term>
    <listitem>
     <para>
      Configure the KDC and the clients, see
      <xref linkend="sec.security.kerberos.admin.instkdc"/> and
      <xref linkend="sec.security.kerberos.admin.client"/>. Enable remote
      administration for your &krb; service, so you do not need physical
      access to your KDC machine, see
      <xref linkend="sec.security.kerberos.admin.remote"/>. Create service
      principals for every service in your realm, see
      <xref linkend="sec.security.kerberos.admin.hostprinc"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Enabling &krb; Authentication</term>
    <listitem>
     <para>
      Various services in your network can use &krb;. To add
      &krb; password-checking to applications using PAM, proceed as
      outlined in <xref linkend="sec.security.kerberos.admin.pam"/>. To
      configure SSH or LDAP with &krb; authentication, proceed as
      outlined in <xref linkend="sec.security.kerberos.admin.sshd"/> and
      <xref linkend="sec.security.kerberos.admin.ldap"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="sec.security.kerberos.admin.top">
   <title>&krb; Network Topology</title>
   <para>
    Any &krb; environment must meet the following requirements to be
    fully functional:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      Provide a DNS server for name resolution across your network, so
      clients and servers can locate each other. Refer to
      <xref linkend="cha.dns"/> for information on DNS setup.
     </para>
    </listitem>
    <listitem>
     <para>
      Provide a time server in your network. Using exact time stamps is
      crucial to a &krb; setup, because valid &krb; tickets must
      contain correct time stamps. Refer to <xref linkend="cha.ntp"/>
      for information on NTP setup.
     </para>
    </listitem>
    <listitem>
     <para>
      Provide a key distribution center (KDC) as the center piece of the
      &krb; architecture. It holds the &krb; database. Use the
      tightest possible security policy on this machine to prevent any
      attacks on this machine compromising your entire infrastructure.
     </para>
    </listitem>
    <listitem>
     <para>
      Configure the client machines to use &krb; authentication.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    The following figure depicts a simple example network with only the
    minimum components needed to build a &krb; infrastructure. Depending
    on the size and topology of your deployment, your setup may vary.
   </para>
   <figure xml:id="fig.netw.kerb">
    <title>&krb; Network Topology</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="network_kerb.png" width="73%" format="PNG"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="network_kerb.svg" width="73%" format="SVG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <tip>
    <title>Configuring Subnet Routing</title>
    <para>
     For a setup similar to the one in <xref linkend="fig.netw.kerb"/>,
     configure routing between the two subnets (&subnetImask; and
     &subnetIImask;). Refer to
     <xref linkend="sec.network.yast.change.route"/> for more information
     on configuring routing with &yast;.
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.realm">
   <title>Choosing the &krb; Realms</title>
   <para>
    The domain of a &krb; installation is called a realm and is
    identified by a name, such as <literal>EXAMPLE.COM</literal> or simply
    <literal>ACCOUNTING</literal>. &krb; is case-sensitive, so
    <literal>example.com</literal> is actually a different realm than
    <literal>EXAMPLE.COM</literal>. Use the case you prefer. It is common
    practice, however, to use uppercase realm names.
   </para>
   <para>
    It is also a good idea to use your DNS domain name (or a subdomain, such
    as <literal>ACCOUNTING.EXAMPLE.COM</literal>). As shown below, your life
    as an administrator can be much easier if you configure your &krb;
    clients to locate the KDC and other &krb; services via DNS. To do so,
    it is helpful if your realm name is a subdomain of your DNS domain name.
   </para>
   <para> Unlike the DNS name space, &krb; is not hierarchical. So if you have
   a realm named <literal>EXAMPLE.COM</literal> with two <quote>subrealms</quote> named
          <literal>DEVELOPMENT</literal> and
          <literal>ACCOUNTING</literal>, and these subordinate realms do not inherit principals from
          <literal>EXAMPLE.COM</literal>. Instead, you would have three
        separate realms, and you would need to configure
        cross-realm authentication for each realm, so that users from one realm to interact
        with servers or other users from another realm. </para>
   <para>
    For the sake of simplicity, let us assume you are setting up just one
    realm for your entire organization. For the remainder of this section,
    the realm name <literal>EXAMPLE.COM</literal> is used in all examples.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.kdc">
   <title>Setting Up the KDC Hardware</title>
   <para>
    The first thing required to use &krb; is a machine that acts as the
    key distribution center, or KDC for short. This machine holds the entire
    &krb; user database with passwords and all information.
   </para>
   <para>
    The KDC is the most important part of your security
    infrastructure&mdash;if someone breaks into it, all user accounts and
    all of your infrastructure protected by &krb; is compromised. An
    attacker with access to the &krb; database can impersonate any
    principal in the database. Tighten security for this machine as much as
    possible:
   </para>
   <procedure>
    <step>
     <para>
      Put the server machine into a physically secured location, such as a
      locked server room to which only a very few people have access.
     </para>
    </step>
    <step>
     <para>
      Do not run any network applications on it except the KDC. This
      includes servers and clients&mdash;for example, the KDC should not
      import any file systems via NFS or use DHCP to retrieve its network
      configuration.
     </para>
    </step>
    <step>
     <para>
      Install a minimal system first then check the list of installed
      packages and remove any unneeded packages. This includes servers, such
      as <systemitem class="daemon">inetd</systemitem>,
      <systemitem class="daemon">portmap</systemitem>, and CUPS, plus
      anything X-based. Even installing an SSH server should be considered a
      potential security risk.
     </para>
    </step>
    <step>
     <para>
      No graphical login is provided on this machine as an X server is a
      potential security risk. &krb; provides its own administration
      interface.
     </para>
    </step>
    <step>
     <para>
      Configure <filename>/etc/nsswitch.conf</filename> to use only local
      files for user and group lookup. Change the lines for
      <literal>passwd</literal> and <literal>group</literal> to look like
      this:
     </para>
<screen>passwd:         files
group:          files</screen>
     <para>
      Edit the <filename>passwd</filename>, <filename>group</filename>, and
      <filename>shadow</filename> files in <filename>/etc</filename> and
      remove the lines that start with a <literal>+</literal> character
      (these are for NIS lookups).
     </para>
    </step>
    <step>
     <para>
      Disable all user accounts except &rootuser;'s account by editing
      <filename>/etc/shadow</filename> and replacing the hashed passwords
      with <literal>*</literal> or <literal>!</literal> characters.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.time">
   <title>Configuring Time Synchronization</title>
   <para>
    To use &krb; successfully, make sure that all system clocks within
    your organization are synchronized within a certain range. This is
    important because &krb; protects against replayed credentials. An
    attacker might be able to observe &krb; credentials on the network
    and reuse them to attack the server. &krb; employs several defenses
    to prevent this. One of them is that it puts time stamps into its
    tickets. A server receiving a ticket with a time stamp that differs from
    the current time rejects the ticket.
   </para>
   <para>
    &krb; allows a certain leeway when comparing time
    stamps. However, computer clocks can be very inaccurate in keeping
    time&mdash;it is not unheard of for PC clocks to lose or gain half
    an hour during a week. For this reason, configure all hosts on the
    network to synchronize their clocks with a central time source.
   </para>
   <para>
    A simple way to do so is by installing an NTP time server on one machine and
    having all clients synchronize their clocks with this server. Do this by
    running an NTP daemon &chronyd; as a client on all these machines. The KDC
    itself needs to be synchronized to the common time source as well. Because
    running an NTP daemon on this machine would be a security risk, it is
    probably a good idea to do this by running <command>chronyd -q</command> via
    a cron job. To configure your machine as an NTP client, proceed as outlined
    in <xref linkend="sec.ntp.yast"/>.
   </para>
   <para>
    A different way to secure the time service and still use the NTP daemon
    is to attach a hardware reference clock to a dedicated NTP server and
    an additional hardware reference clock to the KDC.
   </para>
   <para>
    It is also possible to adjust the maximum deviation &krb; allows when
    checking time stamps. This value (called <emphasis>clock
    skew</emphasis>) can be set in the <filename>krb5.conf</filename> file
    as described in
    <xref linkend="sec.security.kerberos.admin.client.clockskew"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.instkdc">
   <title>Configuring the KDC</title>
   <para>
    This section covers the initial configuration and installation of the
    KDC, including the creation of an administrative principal. This
    procedure consists of several steps:
   </para>
   <procedure>
    <step>
     <formalpara>
      <title>Install the RPMs</title>
      <para>
       On a machine designated as the KDC, install the following software
       packages: <systemitem class="resource">krb5</systemitem>,
       <systemitem class="resource">krb5-server</systemitem> and
       <systemitem class="resource">krb5-client</systemitem> packages.
      </para>
     </formalpara>
    </step>
    <step>
     <formalpara>
      <title>Adjust the Configuration Files</title>
      <para>
       The <filename>/etc/krb5.conf</filename> and
       <filename>/var/lib/kerberos/krb5kdc/kdc.conf</filename> configuration
       files must be adjusted for your scenario. These files contain all
       information on the KDC.
      </para>
     </formalpara>
    </step>
    <step>
     <formalpara>
      <title>Create the &krb; Database</title>
      <para>
       &krb; keeps a database of all principal identifiers and the secret
       keys of all principals that need to be authenticated. Refer to
       <xref linkend="sec.security.kerberos.admin.kdc.database"/> for
       details.
      </para>
     </formalpara>
    </step>
    <step>
     <formalpara>
      <title>Adjust the ACL Files: Add Administrators</title>
      <para>
       The &krb; database on the KDC can be managed remotely. To prevent
       unauthorized principals from tampering with the database, &krb;
       uses access control lists. You must explicitly enable remote access
       for the administrator principal to enable them to manage the database.
       The &krb; ACL file is located under
       <filename>/var/lib/kerberos/krb5kdc/kadm5.acl</filename>. Refer to
       <xref linkend="sec.security.kerberos.admin.remote"/> for details.
      </para>
     </formalpara>
    </step>
    <step>
     <formalpara>
      <title>Adjust the &krb; Database: Add Administrators</title>
      <para>
       You need at least one administrative principal to run and administer
       &krb;. This principal must be added before starting the KDC. Refer
       to <xref linkend="sec.security.kerberos.admin.kdc.princ"/> for
       details.
      </para>
     </formalpara>
    </step>
    <step>
     <formalpara>
      <title>Start the &krb; Daemon</title>
      <para>
       After the KDC software is installed and properly configured, start
       the &krb; daemon to provide &krb; service for your realm. Refer
       to <xref linkend="sec.security.kerberos.admin.kdc.start"/> for
       details.
      </para>
     </formalpara>
    </step>
    <step>
     <formalpara>
      <title>Create a Principal for Yourself</title>
      <para>
       You need a principal for yourself. Refer to
       <xref linkend="sec.security.kerberos.admin.kdc.princ"/> for details.
      </para>
     </formalpara>
    </step>
   </procedure>
   <sect3 xml:id="sec.security.kerberos.admin.kdc.database">
    <title>Setting Up the Database</title>
    <para>
     Your next step is to initialize the database where &krb; keeps all
     information about principals. Set up the database master key, which is
     used to protect the database from accidental disclosure (in particular
     if it is backed up to tape). The master key is derived from a pass
     phrase and is stored in a file called the stash file. This is so you do
     not need to enter the password every time the KDC is restarted. Make
     sure that you choose a good pass phrase, such as a sentence from a book
     opened to a random page.
    </para>
    <para>
     When you make tape backups of the &krb; database
     (<filename>/var/lib/kerberos/krb5kdc/principal</filename>), do not back
     up the stash file (which is in
     <filename>/var/lib/kerberos/krb5kdc/.k5.EXAMPLE.COM</filename>).
     Otherwise, everyone able to read the tape could also decrypt the
     database. Therefore, keep a copy of the pass phrase in a safe or some
     other secure location, because you will need it to restore your
     database from backup tape after a crash.
    </para>
    <para>
     To create the stash file and the database, run:
    </para>
<screen>&prompt.user;sudo kdb5_util create -r EXAMPLE.COM -s</screen>
    <para>
     You will see the following output:
    </para>
<screen>Initializing database '/var/lib/kerberos/krb5kdc/principal' for realm 'EXAMPLE.COM',
master key name 'K/M@EXAMPLE.COM'
You will be prompted for the database Master Password.
It is important that you NOT FORGET this password.
Enter KDC database master key:  <co xml:id="co.kerb.kdb5.pass"/>
Re-enter KDC database master key to verify:  <co xml:id="co.kerb.kdb5.pass.repeat"/>
</screen>
    <calloutlist>
     <callout arearefs="co.kerb.kdb5.pass">
      <para>
       Type the master password.
      </para>
     </callout>
     <callout arearefs="co.kerb.kdb5.pass.repeat">
      <para>
       Type the password again.
      </para>
     </callout>
    </calloutlist>
    <para>
     To verify, use the list command:
    </para>
<screen>&prompt.user;kadmin.local

kadmin&gt; listprincs</screen>
    <para>
     You will see several principals in the database, which are for internal
     use by &krb;:
    </para>
<screen>K/M@EXAMPLE.COM
kadmin/admin@EXAMPLE.COM
kadmin/changepw@EXAMPLE.COM
krbtgt/EXAMPLE.COM@EXAMPLE.COM</screen>
   </sect3>
   <sect3 xml:id="sec.security.kerberos.admin.kdc.princ">
    <title>Creating a Principal</title>
    <para>
     Create two &krb; principals for yourself: one normal principal for
     everyday work and one for administrative tasks relating to &krb;.
     Assuming your login name is &exampleuserIII;, proceed as follows:
    </para>
<screen>&prompt.user;kadmin.local

kadmin&gt; ank &exampleuserIII_plain;
</screen>
    <para>
     You will see the following output:
    </para>
<screen>&exampleuserIII_plain;@EXAMPLE.COM's Password: <co xml:id="co.kerb.geeko.pass"/>
Verifying password: <co xml:id="co.kerb.geeko.pass.repeat"/>
</screen>
    <calloutlist>
     <callout arearefs="co.kerb.geeko.pass">
      <para>
       Type &exampleuserIII;'s password.
      </para>
     </callout>
     <callout arearefs="co.kerb.geeko.pass">
      <para>
       Type &exampleuserIII;'s password again.
      </para>
     </callout>
    </calloutlist>
    <para>
     Next, create another principal named
     <literal>&exampleuserIII_plain;/admin</literal> by typing
     <command>ank</command> <option>&exampleuserIII_plain;/admin</option> at
     the <command>kadmin</command> prompt. The <literal>admin</literal>
     suffixed to your user name is a <emphasis>role</emphasis>. Later, use
     this role when administering the &krb; database. A user can have
     several roles for different purposes. Roles act like completely
     different accounts that have similar names.
    </para>
   </sect3>
   <sect3 xml:id="sec.security.kerberos.admin.kdc.start">
    <title>Starting the KDC</title>
    <para>
     Start the KDC daemon and the kadmin daemon. To start the daemons
     manually, enter:
    </para>
<screen>&prompt.user;sudo systemctl start krb5kdc
sudo systemctl start kadmind</screen>
    <para>
     Also make sure that the services KDC (<systemitem>krb5kdc</systemitem>) and
     kadmind (<systemitem>kadmind</systemitem>) are started by
     default when the server machine is rebooted. Enable them by entering:
    </para>
<screen>&prompt.user;sudo systemctl enable krb5kdc kadmind</screen>
    <para>
     or by using the &yast; <guimenu>&ycc_runlevel;</guimenu>.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.client">
   <title>Configuring &krb; Clients</title>
   <para>
    When the supporting infrastructure is in place (DNS, NTP) and the KDC
    has been properly configured and started, configure the client machines.
    To configure a &krb; client, use one of the two manual approaches
    described below.
   </para>
   <!-- <sect3 xml:id="sec.security.kerberos.admin.client.man"> -->
   <!--  <title>Manually Configuring &krb; Clients</title> -->
    <para>
     When configuring &krb;, there are two approaches you can
     take&mdash;static configuration in the
     <filename>/etc/krb5.conf</filename> file or dynamic configuration with
     DNS. With DNS configuration, &krb; applications try to locate the
     KDC services using DNS records. With static configuration, add the host
     names of your KDC server to <filename>krb5.conf</filename> (and update
     the file whenever you move the KDC or reconfigure your realm in other
     ways).
    </para>
    <para>
     DNS-based configuration is generally a lot more flexible and the amount
     of configuration work per machine is a lot less. However, it requires
     that your realm name is either the same as your DNS domain or a
     subdomain of it. Configuring &krb; via DNS also creates a
     security issue: an attacker can seriously disrupt your
     infrastructure through your DNS (by shooting down the name server,
     spoofing DNS records, etc.). However, this amounts to a denial of
     service at worst. A similar scenario applies to the static
     configuration case unless you enter IP addresses in
     <filename>krb5.conf</filename> instead of host names.
    </para>
    <sect3 xml:id="sec.security.kerberos.admin.client.stat">
     <title>Static Configuration</title>
     <para>
      One way to configure &krb; is to edit
      <filename>/etc/krb5.conf</filename>. The file installed by default
      contains various sample entries. Erase all of these entries before
      starting. <filename>krb5.conf</filename> is made up of several
      sections (stanzas), each introduced by the section name in brackets
      like <literal>[this]</literal>.
     </para>
     <para>
      To configure your &krb; clients, add the following stanza to
      <filename>krb5.conf</filename> (where
      <systemitem class="fqdomainname">kdc.example.com</systemitem> is the
      host name of the KDC):
     </para>
<screen>[libdefaults]
        default_realm = EXAMPLE.COM

[realms]
        EXAMPLE.COM = {
                kdc = kdc.example.com
                admin_server = kdc.example.com
        }</screen>
     <para>
      The <literal>default_realm</literal> line sets the default realm for
      &krb; applications. If you have several realms, add additional
      statements to the <literal>[realms]</literal> section.
     </para>
     <para>
      Also add a statement to this file that tells applications how to map
      host names to a realm. For example, when connecting to a remote host,
      the &krb; library needs to know in which realm this host is
      located. This must be configured in the
      <literal>[domain_realms]</literal> section:
     </para>
<screen>[domain_realm]
.example.com = EXAMPLE.COM
www.example.org = EXAMPLE.COM</screen>
     <para>
      This tells the library that all hosts in the
      <filename>example.com</filename> DNS domains are in the
      <filename>EXAMPLE.COM</filename> &krb; realm. In addition, one
      external host named <filename>www.example.org</filename> should also
      be considered a member of the <filename>EXAMPLE.COM</filename> realm.
     </para>
    </sect3>
    <sect3 xml:id="sec.security.kerberos.admin.client.dns">
     <title>DNS-Based Configuration</title>
     <para>
      DNS-based &krb; configuration makes heavy use of SRV records. See
      <emphasis>(RFC2052) A DNS RR for specifying the location of
      services</emphasis> at <link xlink:href="http://www.ietf.org"/>.
     </para>
     <para>
      The name of an SRV record, as far as &krb; is concerned, is always
      in the format <literal>_service._proto.realm</literal>, where realm is
      the &krb; realm. Domain names in DNS are case-insensitive, so
      case-sensitive &krb; realms would break when using this
      configuration method. <literal>_service</literal> is a service name
      (different names are used when trying to contact the KDC or the
      password service, for example). <literal>_proto</literal> can be
      either <literal>_udp</literal> or <literal>_tcp</literal>, but not all
      services support both protocols.
     </para>
     <para>
      The data portion of SRV resource records consists of a priority value,
      a weight, a port number, and a host name. The priority defines the
      order in which hosts should be tried (lower values indicate a higher
      priority). The weight value is there to support some sort of load
      balancing among servers of equal priority. You probably do not need
      any of this, so it is okay to set these to zero.
     </para>
     <para>
      MIT &krb; currently looks up the following names when looking for
      services:
     </para>
     <variablelist>
      <varlistentry>
       <term>_kerberos</term>
       <listitem>
        <para>
         This defines the location of the KDC daemon (the authentication and
         ticket granting server). Typical records look like this:
        </para>
<screen>_kerberos._udp.EXAMPLE.COM.  IN  SRV    0 0 88 kdc.example.com.
_kerberos._tcp.EXAMPLE.COM.  IN  SRV    0 0 88 kdc.example.com.</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>_kerberos-adm</term>
       <listitem>
        <para>
         This describes the location of the remote administration service.
         Typical records look like this:
        </para>
<screen>
_kerberos-adm._tcp.EXAMPLE.COM. IN  SRV    0 0 749 kdc.example.com.</screen>
        <para>
         Because kadmind does not support UDP, there should be no
         <literal>_udp</literal> record.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      As with the static configuration file, there is a mechanism to inform
      clients that a specific host is in the <literal>EXAMPLE.COM</literal>
      realm, even if it is not part of the <literal>example.com</literal>
      DNS domain. This can be done by attaching a TXT record to
      <literal>_kerberos.host_name</literal>, as shown here:
     </para>
<screen>_kerberos.www.example.org.  IN TXT "EXAMPLE.COM"</screen>
    </sect3>
    <sect3 xml:id="sec.security.kerberos.admin.client.clockskew">
     <title>Adjusting the Clock Skew</title>
     <para>
      The <emphasis>clock skew</emphasis> is the tolerance for accepting
      tickets with time stamps that do not exactly match the host's system
      clock. Usually, the clock skew is set to 300 seconds (five minutes).
      This means a ticket can have a time stamp somewhere between five
      minutes behind and five minutes ahead of the server's clock.
     </para>
     <para>
      When using NTP to synchronize all hosts, you can reduce this value to
      about one minute. The clock skew value can be set in
      <filename>/etc/krb5.conf</filename> like this:
     </para>
<screen>[libdefaults]
        clockskew = 60</screen>
    </sect3>
   <!-- </sect3> -->
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.remote">
   <title>Configuring Remote &krb; Administration</title>
   <para>
    To be able to add and remove principals from the &krb; database
    without accessing the KDC's console directly, tell the &krb;
    administration server which principals are allowed to do what by editing
    <filename>/var/lib/kerberos/krb5kdc/kadm5.acl</filename>. The ACL
    (access control list) file allows you to specify privileges with a
    precise degree of control. For details, refer to the manual page with
    <command>man</command> <option>8 kadmind</option>.
   </para>
   <para>
    For now, grant yourself the privilege to administer the database by
    putting the following line into the file:
   </para>
<screen>&exampleuserIII_plain;/admin              *</screen>
   <para>
    Replace the user name &exampleuserIII; with your own. Restart
    <systemitem>kadmind</systemitem> for the change to take effect.
   </para>
   <para>
    You should now be able to perform &krb; administration tasks remotely
    using the kadmin tool. First, obtain a ticket for your admin role and
    use that ticket when connecting to the kadmin server:
   </para>
<screen>&prompt.user;kadmin -p &exampleuserIII_plain;/admin
Authenticating as principal &exampleuserIII_plain;/admin@EXAMPLE.COM with password.
Password for &exampleuserIII_plain;/admin@EXAMPLE.COM:
kadmin:  getprivs
current privileges: GET ADD MODIFY DELETE
kadmin:</screen>
   <para>
    Using the <command>getprivs</command> command, verify which privileges
    you have. The list shown above is the full set of privileges.
   </para>
   <para>
    As an example, modify the principal &exampleuserIII;:
   </para>
<screen>&prompt.user;kadmin -p &exampleuserIII_plain;/admin
Authenticating as principal &exampleuserIII_plain;/admin@EXAMPLE.COM with password.
Password for &exampleuserIII_plain;/admin@EXAMPLE.COM:

kadmin:  getprinc &exampleuserIII_plain;
Principal: &exampleuserIII_plain;@EXAMPLE.COM
Expiration date: [never]
Last password change: Wed Jan 12 17:28:46 CET 2005
Password expiration date: [none]
Maximum ticket life: 0 days 10:00:00
Maximum renewable life: 7 days 00:00:00
Last modified: Wed Jan 12 17:47:17 CET 2005 (admin/admin@EXAMPLE.COM)
Last successful authentication: [never]
Last failed authentication: [never]
Failed password attempts: 0
Number of keys: 2
Key: vno 1, Triple DES cbc mode with HMAC/sha1, no salt
Key: vno 1, DES cbc mode with CRC-32, no salt
Attributes:
Policy: [none]

kadmin:  modify_principal -maxlife "8 hours" &exampleuserIII_plain;
Principal "&exampleuserIII_plain;@EXAMPLE.COM" modified.
kadmin:  getprinc &exampleuserIII_plain;
Principal: &exampleuserIII_plain;@EXAMPLE.COM
Expiration date: [never]
Last password change: Wed Jan 12 17:28:46 CET 2005
Password expiration date: [none]
Maximum ticket life: 0 days 08:00:00
Maximum renewable life: 7 days 00:00:00
Last modified: Wed Jan 12 17:59:49 CET 2005 (&exampleuserIII_plain;/admin@EXAMPLE.COM)
Last successful authentication: [never]
Last failed authentication: [never]
Failed password attempts: 0
Number of keys: 2
Key: vno 1, Triple DES cbc mode with HMAC/sha1, no salt
Key: vno 1, DES cbc mode with CRC-32, no salt
Attributes:
Policy: [none]
kadmin:</screen>
   <para>
    This changes the maximum ticket life time to eight hours. For more
    information about the <command>kadmin</command> command and the options
    available, see the <systemitem>krb5-doc</systemitem> package or refer to
    the <command>man</command> <option>8 kadmin</option> manual page.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.hostprinc">
   <title>Creating &krb; Service Principals</title>
   <para>
    So far, only user credentials have been discussed. However,
    &krb;-compatible services usually need to authenticate themselves to
    the client user, too. Therefore, special service principals must be
    in the &krb; database for each service offered in the realm.
    For example, if &ldapname; offers an LDAP service, you need a service
    principal, <literal>ldap/&ldapname;@EXAMPLE.COM</literal>, to
    authenticate this service to all clients.
   </para>
   <para>
    The naming convention for service principals is
    <literal><replaceable>SERVICE</replaceable>/<replaceable>HOSTNAME</replaceable>@<replaceable>REALM</replaceable></literal>,
    where <replaceable>HOSTNAME</replaceable> is the host's fully qualified
    host name.
   </para>
   <para>
    Valid service descriptors are:
   </para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>
         Service Descriptor
        </para>
       </entry>
       <entry>
        <para>
         Service
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         <literal>host</literal>
        </para>
       </entry>
       <entry>
        <para>
         Telnet, RSH, SSH
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>nfs</literal>
        </para>
       </entry>
       <entry>
        <para>
         NFSv4 (with &krb; support)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>HTTP</literal>
        </para>
       </entry>
       <entry>
        <para>
         HTTP (with &krb; authentication)
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>imap</literal>
        </para>
       </entry>
       <entry>
        <para>
         IMAP
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>pop</literal>
        </para>
       </entry>
       <entry>
        <para>
         POP3
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <literal>ldap</literal>
        </para>
       </entry>
       <entry>
        <para>
         LDAP
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>
    Service principals are similar to user principals, but have significant
    differences. The main difference between a user principal and a service
    principal is that the key of the former is protected by a
    password. When a user obtains a ticket-granting ticket from the
    KDC, they needs to type their password, so &krb; can decrypt the ticket.
    It would be inconvenient for system administrators to obtain new tickets
    for the SSH daemon every eight hours or so.
   </para>
   <para>
    Instead, the key required to decrypt the initial ticket for the service
    principal is extracted by the administrator from the KDC only once and
    stored in a local file called the <emphasis>keytab</emphasis>. Services
    such as the SSH daemon read this key and use it to obtain new tickets
    automatically, when needed. The default keytab file resides in
    <filename>/etc/krb5.keytab</filename>.
   </para>
   <para>
    To create a host service principal for <literal>&wsIname;</literal>
    enter the following commands during your kadmin session:
   </para>
<screen>&prompt.user;kadmin -p &exampleuserIII_plain;/admin
Authenticating as principal &exampleuserIII_plain;/admin@EXAMPLE.COM with password.
Password for &exampleuserIII_plain;/admin@EXAMPLE.COM:
kadmin:  addprinc -randkey host/&wsIname;
WARNING: no policy specified for host/&wsIname;@EXAMPLE.COM;
defaulting to no policy
Principal "host/&wsIname;@EXAMPLE.COM" created.</screen>
   <para>
    Instead of setting a password for the new principal, the
    <option>-randkey</option> flag tells <command>kadmin</command> to
    generate a random key. This is used here because no user interaction is
    wanted for this principal. It is a server account for the machine.
   </para>
   <para>
    Finally, extract the key and store it in the local keytab file
    <filename>/etc/krb5.keytab</filename>. This file is owned by the
    superuser, so you must be <systemitem class="username">root</systemitem>
    to execute the next command in the kadmin shell:
   </para>
<screen>kadmin:  ktadd host/&wsIname;
Entry for principal host/&wsIname; with kvno 3, encryption type Triple
DES cbc mode with HMAC/sha1 added to keytab WRFILE:/etc/krb5.keytab.
Entry for principal host/&wsIname; with kvno 3, encryption type DES
cbc mode with CRC-32 added to keytab WRFILE:/etc/krb5.keytab.
kadmin:</screen>
   <para>
    When completed, make sure that you destroy the admin ticket obtained
    with kinit above with <command>kdestroy</command>.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.pam">
   <title>Enabling PAM Support for &krb;</title>
   <para>
    &productnamereg; comes with a PAM module named
    <filename>pam_krb5</filename>, which supports &krb; login and
    password update. This module can be used by applications such as console
    login, <command>su</command>, and graphical login applications like GDM.
    That is, it can be used in all cases where the user enters a password
    and expects the authenticating application to obtain an initial &krb;
    ticket on their behalf. To configure PAM support for &krb;, use the
    following command:
   </para>
<screen>&prompt.user;sudo pam-config --add --krb5</screen>
   <para>
    The above command adds the <filename>pam_krb5</filename> module to the
    existing PAM configuration files and makes sure it is called in the
    right order. To make precise adjustments to the way in which
    <filename>pam_krb5</filename> is used, edit the file
    <filename>/etc/krb5.conf</filename> and add default applications to
    <filename>pam</filename>. For details, refer to the manual page with
    <command>man</command> <option>5 pam_krb5</option>.
   </para>
   <para>
    The <filename>pam_krb5</filename> module was specifically not designed
    for network services that accept &krb; tickets as part of user
    authentication. This is an entirely different matter, and is discussed
    below.
   </para>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.sshd">
   <title>Configuring SSH for &krb; Authentication</title>
   <para>
    OpenSSH supports &krb; authentication in both protocol
    version&nbsp;1 and 2. In version&nbsp;1, there are special
    protocol messages to transmit &krb; tickets. Version&nbsp;2 does
    not use &krb; directly anymore, but relies on GSSAPI, the General
    Security Services API. This is a programming interface that is not
    specific to &krb;&mdash;it was designed to hide the peculiarities
    of the underlying authentication system, be it &krb;, a public-key
    authentication system like SPKM, or others. However, the included GSSAPI
    library only supports &krb;.
   </para>
   <para>
    To use sshd with &krb; authentication, edit
    <filename>/etc/ssh/sshd_config</filename> and set the following options:
   </para>
<screen># These are for protocol version 1
#
# KerberosAuthentication yes
# KerberosTicketCleanup yes

# These are for version 2 - better to use this
GSSAPIAuthentication yes
GSSAPICleanupCredentials yes</screen>
   <para>
    Then restart your SSH daemon using <command>sudo systemctl restart
    sshd</command>.
   </para>
   <para>
    To use &krb; authentication with protocol version 2, enable it on the
    client side as well. Do this either in the systemwide configuration file
    <filename>/etc/ssh/ssh_config</filename> or on a per-user level by
    editing <filename>~/.ssh/config</filename>. In both cases, add the
    option <literal>GSSAPIAuthentication yes</literal>.
   </para>
   <para>
    You should now be able to connect using &krb; authentication. Use
    <command>klist</command> to verify that you have a valid ticket, then
    connect to the SSH server. To force SSH protocol version 1, specify the
    <literal>-1</literal> option on the command line.
   </para>
   <tip>
    <title>Additional Information</title>
    <para>
     The file
     <filename>/usr/share/doc/packages/openssh/README.kerberos</filename>
     discusses the interaction of OpenSSH and &krb; in more detail.
    </para>
   </tip>
   <tip>
<!-- fate#313067 -->
    <title>Additional Directives for Protocol Version 2</title>
    <para>
     The <literal>GSSAPIKeyExchange</literal> mechanism (RFC 4462) is
     supported. This directive specifies how host keys are exchanged. For
     more information, see the sshd_config manual page (<command>man
     sshd_config</command>).
    </para>
   </tip>
  </sect2>

  <sect2 xml:id="sec.security.kerberos.admin.ldap">
   <title>Using LDAP and &krb;</title>
   <para>
    When using &krb;, one way to distribute the user information (such as
    user ID, groups, and home directory) in your local network is to use
    LDAP. This requires a strong authentication mechanism that prevents
    packet spoofing and other attacks. One solution is to use &krb; for
    LDAP communication, too.
   </para>
   <para>
    OpenLDAP implements most authentication flavors through SASL, the simple
    authentication session layer. SASL is a network protocol designed for
    authentication. The SASL implementation is cyrus-sasl, which supports
    several authentication flavors. &krb; authentication is
    performed through GSSAPI (General Security Services API). By default,
    the SASL plug-in for GSSAPI is not installed. Install the
    <systemitem>cyrus-sasl-gssapi</systemitem> with &yast;.
   </para>
   <para>
    To enable &krb; to bind to the OpenLDAP server, create a principal
    <literal>ldap/&ldapname;</literal> and add that to the keytab.
   </para>
   <para>
    By default, the LDAP server slapd runs as user and group
    <systemitem class="username">ldap</systemitem>, while the keytab file is
    readable by <systemitem class="username">root</systemitem> only.
    Therefore, either change the LDAP configuration so the server runs as
    <systemitem class="username">root</systemitem> or make the keytab file
    readable by the group <systemitem class="username">ldap</systemitem>.
    The latter is done automatically by the OpenLDAP start script
    (<filename>/usr/lib/openldap/start</filename>) if the keytab file has
    been specified in the <envar>OPENLDAP_KRB5_KEYTAB</envar> variable in
    <filename>/etc/sysconfig/openldap</filename> and the
    <envar>OPENLDAP_CHOWN_DIRS</envar> variable is set to
    <literal>yes</literal>, which is the default setting. If
    <envar>OPENLDAP_KRB5_KEYTAB</envar> is left empty, the default keytab
    under <filename>/etc/krb5.keytab</filename> is used and you must adjust
    the privileges yourself as described below.
   </para>
   <para>
    To run slapd as &rootuser;, edit
    <filename>/etc/sysconfig/openldap</filename>. Disable the
    <systemitem>OPENLDAP_USER</systemitem> and
    <systemitem>OPENLDAP_GROUP</systemitem> variables by putting a comment
    character in front of them.
   </para>
   <para>
    To make the keytab file readable by group LDAP, execute
   </para>
<screen>&prompt.user;sudo chgrp ldap /etc/krb5.keytab
&prompt.user;sudo chmod 640 /etc/krb5.keytab</screen>
   <para>
    A third (and maybe the best) solution is to tell OpenLDAP to use a
    special keytab file. To do this, start kadmin, and enter the following
    command after you have added the principal ldap/&ldapname;:
   </para>
<screen>ktadd -k /etc/openldap/ldap.keytab ldap/&ldapname;@EXAMPLE.COM</screen>
   <para>
    Then in the shell run:
   </para>
<screen>&prompt.user;sudo chown ldap:ldap /etc/openldap/ldap.keytab
&prompt.user;sudo chmod 600 /etc/openldap/ldap.keytab</screen>
   <para>
    To tell OpenLDAP to use a different keytab file, change the following
    variable in <filename>/etc/sysconfig/openldap</filename>:
   </para>
<screen>OPENLDAP_KRB5_KEYTAB="/etc/openldap/ldap.keytab"</screen>
   <para> Finally, restart the LDAP server using <command>sudo systemctl
     restart slapd</command>. </para>
   <sect3 xml:id="sec.security.kerberos.admin.ldap.auth">
    <title>Using &krb; Authentication with LDAP</title>
    <para>
     You are now able to automatically use tools such as ldapsearch with
     &krb; authentication.
    </para>
<screen>&prompt.user;ldapsearch -b ou=people,dc=example,dc=com '(uid=&exampleuserIII_plain;)'

SASL/GSSAPI authentication started
SASL SSF: 56
SASL installing layers
[...]

# &exampleuserIII_plain;, people, example.com
dn: uid=&exampleuserIII_plain;,ou=people,dc=example,dc=com
uid: &exampleuserIII_plain;
cn: &exampleuserIIIfull;
[...]</screen>
    <para>
     As you can see, <command>ldapsearch</command> prints a message that it
     started GSSAPI authentication. The next message is very cryptic, but it
     shows that the <emphasis>security strength factor</emphasis> (SSF for
     short) is 56 (The value 56 is somewhat arbitrary. Most likely it was
     chosen because this is the number of bits in a DES encryption key).
     This means that GSSAPI authentication was successful and that
     encryption is being used to protect integrity and provide
     confidentiality for the LDAP connection.
    </para>
    <para>
     In &krb;, authentication is always mutual. This means that not only
     have you authenticated yourself to the LDAP server, but also the LDAP
     server has authenticated itself to you. In particular, this means
     communication is with the desired LDAP server, rather than some bogus
     service set up by an attacker.
     <!-- ke: I think "set up" is fine here. -->
    </para>
   </sect3>
   <sect3 xml:id="sec.security.kerberos.admin.ldap.acl">
    <title>&krb; Authentication and LDAP Access Control</title>
<!-- see bnc#764297:
     the ACL change isn't even required to make &krb; logins work for
     OpenLDAP.
    -->
<!--
    <para>
     Now, allow each user to modify the login shell attribute of their LDAP
     user record. Assuming you have a schema where the LDAP entry of user
     &exampleuser; is located at
     <filename>uid=&exampleuser_plain;,ou=people,dc=example,dc=com</filename>, set up the
     following access controls in the <systemitem>cn=config</systemitem>
     back-end:
    </para>
    <para>
To update the ACLs for a database you would e.g. update the
<literal>olcAccess</literal> attribute of the
<systemitem>cn=config</systemitem> entry representing that database. For
the first LDAP database such a change could look like this in LDIF:
    </para>
    <screen>dn: olcDatabase={1}hdb,cn=config
replace: olcAccess
olcAccess: to dn="*,ou=people,dc=example,dc=com" attrs=loginShell
       by self write
olcAccess: to * by users read</screen>
   <para>
     This statement first gives authenticated users write access to the
     <literal>loginShell</literal> attribute of their own LDAP
     entry. And the last statement gives all authenticated users read
     access to the entire LDAP directory.
    </para>
<note>
 <para>
  This will replace all existing ACLs for that data. If you want to add
  or delete a single ACL you can use <literal>add</literal> or
  <literal>delete</literal> instead of <literal>replace</literal>. You
  can also add a <literal>{<replaceable>NUMBER</replaceable>}</literal>
  in front of the <literal>olcAcccess</literal> attribute's values to
  insert the ACL at a specific place in the list (the order of ACLs
  matters for their evaluation).
    </para>
</note>
<para>
 To change global ACLs (those that should be in place for the complete
 database, in case none of the database specific ACLs matches you would
 have the special database entry:
</para>

<screen>olcDatabase={-1}frontend,cn=config</screen>
-->
    <para>
     There is one minor piece of the puzzle missing&mdash;how the LDAP
     server can find out that the &krb; user
     <literal>&exampleuser_plain;@EXAMPLE.COM</literal> corresponds to the LDAP
     distinguished name
     <literal>uid=&exampleuser_plain;,ou=people,dc=example,dc=com</literal>.
     This sort of mapping must be configured manually using the
     <literal>saslExpr</literal> directive. In this example, the
     "authz-regexp" change in LDIF would look as follows:
    </para>
<screen>dn: cn=config
add: olcAuthzRegexp
olcAuthzRegexp: uid=(.*),cn=GSSAPI,cn=auth uid=$1,ou=people,dc=example,dc=com</screen>
    <para>
     All these changes can be applied via <command>ldapmodify</command> on
     the command line.
    </para>
    <para>
     When SASL authenticates a user, OpenLDAP forms a distinguished name
     from the name given to it by SASL (such as &exampleuser;) and the
     name of the SASL flavor (<literal>GSSAPI</literal>). The result
     would be
     <literal>uid=&exampleuser_plain;,cn=GSSAPI,cn=auth</literal>.
    </para>
    <para>
     If a <literal>authz-regexp</literal> has been configured, it checks the
     DN formed from the SASL information using the first argument as a
     regular expression. If this regular expression matches, the name is
     replaced with the second argument of the
     <literal>authz-regexp</literal> statement. The placeholder
     <literal>$1</literal> is replaced with the substring matched by the
     <literal>(.*)</literal> expression.
    </para>
    <para>
     More complicated match expressions are possible. If you have a more
     complicated directory structure or a schema in which the user name is
     not part of the DN, you can even use search expressions to map the SASL
     DN to the user DN.
    </para>
    <para>
     For more information, see the <literal>slapd-config</literal> man page.
    </para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="sec.security.kerberos.yast.client">
  <title>Setting up &krb; using <guimenu>LDAP and &krb; Client</guimenu></title>
  <para>
   &yast; includes the module <guimenu>LDAP and &krb; Client</guimenu>
   that helps define authentication scenarios involving either LDAP or &krb;.
  </para>
  <para>
   It can also be used to join &krb; and LDAP separately. However, in
   many such cases, using this module may not be the first choice, such as
   for joining &ad; (which uses a combination of LDAP and &krb;). For
   more information, see <xref linkend="sec.security.auth.yast.client"/>.
  </para>
  <para>
   Start the module by selecting
   <menuchoice> <guimenu>Network Services</guimenu> <guimenu>LDAP and
   &krb; Client</guimenu> </menuchoice>.
  </para>
  <figure xml:id="fig.yast2.ldapkerberos.kerberos">
   <title><guimenu>LDAP and &krb; Client</guimenu> Window</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="yast2_auth_client_config.png" width="65%" format="PNG"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="yast2_auth_client_config.png" width="65%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   To configure a &krb; client, follow the procedure below:
  </para>
  <procedure xml:id="pro.security.auth.kerberos">
   <step>
    <para>
     In the window <guimenu>LDAP and &krb; Client</guimenu>, click
     <guimenu>Change Settings</guimenu>.
    </para>
    <para>
     Choose the tab <guimenu>Authentication via Kerberos</guimenu>.
    </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="html">
       <imagedata fileref="yast2_auth_client_krb5.png" width="65%" format="PNG"/>
      </imageobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_auth_client_krb5.png" width="65%" format="PNG"/>
      </imageobject>
      <textobject>
       <phrase>Tab <guimenu>Authentication via Kerberos</guimenu></phrase>
      </textobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step xml:id="st.kerberos.realm.add">
    <para>
     Click <guimenu>Add Realm</guimenu>.
    </para>
   </step>
   <step xml:id="st.kerberos.realm.configure">
    <para>
     In the appearing dialog, specify the correct
     <guimenu>Realm name</guimenu>. Usually, the realm name is an uppercase
     version of the domain name. Additionally, you can specify the following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       To apply mappings from the realm name to the domain name, activate
       <guimenu>Map Domain Name to the Realm</guimenu> and/or
       <guimenu>Map Wildcard Domain Name to the Realm</guimenu>.
      </para>
     </listitem>
     <listitem>
      <para>
       You can specify the <guimenu>Host Name of Administration
       Server</guimenu>, the <guimenu>Host Name of Master Key Distribution
       Server</guimenu> and additional <guimenu>Key Distribution Centers</guimenu>.
      </para>
      <para>
       All of these items are optional if they can be automatically
       discovered via the <literal>SRV</literal> and
       <literal>TXT</literal> records in DNS.
      </para>
     </listitem>
     <listitem>
      <para>
       To manually map Principals to local user names, use
       <guimenu>Custom Mappings of Principal Names to User Names</guimenu>.
      </para>
      <para>
       You can also use <literal>auth_to_local</literal> rules to supply such
       mappings using <guimenu>Custom Rules for Mapping Principal Names to
       User Names</guimenu>. For more information about using such rules, see
       the official documentation at
       <link xlink:href="https://web.mit.edu/kerberos/krb5-current/doc/admin/conf_files/krb5_conf.html#realms"/>.
      </para>
      <remark>
       FIXME: Do I need to enter <literal>RULE:</literal> at the beginning
       too? - sknorr, 2017-06-06
      </remark>
      <remark>
       Not sure whether the post at
       https://community.hortonworks.com/articles/14463/auth-to-local-rules-syntax.html
       is worth linking to too. Probably too volatile. - sknorr, 2017-06-06
      </remark>
     </listitem>
    </itemizedlist>
    <para>
     Continue with <guimenu>OK</guimenu>.
    </para>
   </step>
   <step>
    <para>
     To add more realms, repeat from <xref linkend="st.kerberos.realm.add"/>.
    </para>
   </step>
   <step>
    <para>
     Enable &krb; users logging in and creation of home directories by
     activating
     <guimenu>Allow Kerberos Users to Authenticate</guimenu> and
     <guimenu>Automatically Create Home Directory</guimenu>.
    </para>
   </step>
   <step>
    <para>
     If you left empty the optional text boxes in
     <xref linkend="st.kerberos.realm.configure"/>, make sure to enable
     automatic discovery of realms and key distribution centers by activating
     <guimenu>Use DNS TXT Record to Discover Realms</guimenu> and
     <guimenu>Use DNS SRV Record to Discover KDC Servers</guimenu>.
    </para>
   </step>
   <step>
    <para>
     You can additionally activate the following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <guimenu>Allow Insecure Encryption (for Windows NT)</guimenu> allows
       the encryption types listed as weak at
       <link xlink:href="http://web.mit.edu/kerberos/krb5-current/doc/admin/conf_files/kdc_conf.html#encryption-types"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       <guimenu>Allow KDC on Other Networks to Issue Authentication
       Tickets</guimenu> allows forwarding of tickets.
      </para>
     </listitem>
     <listitem>
      <para>
       <guimenu>Allow Kerberos-Enabled Services to Take on The Identity Of a
       User</guimenu> allows the use of proxies between the computer of the
       user and the key distribution center.
      </para>
     </listitem>
     <listitem>
      <para>
       <guimenu>Issue Address-Less Tickets for Computers Behind
       NAT</guimenu> allows granting tickets to users behind networks using
       network address translation.
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     To set up allowed encryption types and define the name of the keytab
     file which lists the names of principals and their encrypted keys, use
     the <guimenu>Extended Options</guimenu>.
    </para>
   </step>
   <step>
    <para>
     Finish with <guimenu>OK</guimenu> and <guimenu>Finish</guimenu>.
    </para>
    <para>
     &yast; may now install extra packages.
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 xml:id="sec.security.kerberos.info">
  <title>For More Information</title>

  <para>
   The official site of MIT &krb; is
   <link xlink:href="http://web.mit.edu/kerberos"/>. There, find links to
   any other relevant resource concerning &krb;, including &krb;
   installation, user, and administration guides.
  </para>

 <!-- Paper is from 1995, not sure whether it is a good idea to link it
 again. The official homepage has a section "How Kerberos Works" too. -
 sknorr, 2017-05-19 -->
 <!-- <para>
   The paper at
   <link xlink:href="https://www.usenix.org/publications/library/proceedings/ec95/full_papers/davis.ps"/>
   gives quite an extensive insight to the basic principles of &krb;,
   without being too difficult to read. It also provides a lot of
   opportunities for further investigation and reading about &krb;.
  </para>-->

  <para>
   The book <emphasis>Kerberos&mdash;A Network Authentication
   System</emphasis> by Brian Tung (ISBN 0-201-37924-4) offers extensive
   information.
  </para>
 </sect1>
</chapter>
