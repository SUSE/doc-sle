<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       version="5.0"
       xml:id="sec-security-ldap-server-ca">
 <info>
  <title>Importing TLS server certificates and keys</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  You can manage your CA certificates and keys for &ds389; with the following
  command line tools: <command>certutil</command>, <command>openssl</command>, and
  <command>pk12util</command>.
 </para>
 <para>
  For testing purposes, you can use the self-signed certificate that
  <command>dscreate</command> creates when you create a new &ds389a;
  instance. Find the certificate at
  <filename>/etc/dirsrv/slapd-<replaceable>INSTANCE-NAME</replaceable>/ca.crt</filename>.
  </para>
  <para>
    For production environments, it is a best practice to use a third-party
    certificate authority, such as Let's Encrypt, CAcert.org, SSL.com, or
    whatever CA you choose. Request a server certificate, a client
    certificate, and a root certificate.
  </para>
 <procedure>
  <para>
  Before you can import an existing private key and certificate into the NSS
  database, you need to create a bundle of the private key and the server
  certificate. This results in a <filename>*.p12</filename>
  file.
  </para>
  <important>
  <title><filename>*.p12</filename> file and friendly name</title>
  <para>
   When creating the PKCS12 bundle, you must encode <literal>Server-Cert</literal>
   as the friendly name in the <filename>*.p12</filename> file.
   Otherwise the TLS connection will fail, because the &ds389; searches for
   this exact string.
  </para>
  <para>
    The friendly name cannot be changed after you
    import the <filename>*.p12</filename> file into the NSS
    database.
  </para>
 </important>
 <step>
  <para>
   Use the following command to create the PKCS12 bundle with the required friendly name:
  </para>
<screen>&prompt.sudo;<command>openssl pkcs12 -export -in <replaceable>SERVER.crt</replaceable></command> \
<command>-inkey <replaceable>SERVER.key</replaceable></command> \
<command>-out <replaceable>SERVER.p12</replaceable> -name Server-Cert</command></screen>
  <para>
   Replace <replaceable>SERVER.crt</replaceable> with the server certificate
   and <replaceable>SERVER.key</replaceable> with the private key to be bundled.
   Use <option>-out</option> to specify the name of the <filename>*.p12</filename>
   file. Use <option>-name</option> to set the friendly name, which must be
   <literal>Server-Cert</literal>.
  </para>
 </step>
 <step>
   <para>
     Before you can import the file into the NSS database, you need to
     obtain its password. The password is stored in the
     <filename>pwdfile.txt</filename> file in the
     <filename>/etc/dirsrv/slapd-<replaceable>INSTANCE-NAME/</replaceable></filename> directory.
   </para>
 </step>
 <step>
  <para>
   Now import the <replaceable>SERVER.p12</replaceable> file
   into your &ds389a; NSS database:
  </para>
  <screen>&prompt.sudo;<command>dsctl <replaceable>INSTANCE_NAME</replaceable> tls remove-cert Self-Signed-CA   pk12util -i <replaceable>SERVER.p12</replaceable></command> \
<command>-d /etc/dirsrv/slapd-<replaceable>INSTANCE-NAME</replaceable>/cert9.db</command></screen>
 </step>
 </procedure>
 </sect1>
