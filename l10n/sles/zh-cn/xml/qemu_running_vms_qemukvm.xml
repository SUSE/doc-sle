<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="qemu_running_vms_qemukvm.xml" version="5.0" xml:id="cha-qemu-running">
  <title>使用 qemu-system-ARCH 运行虚拟机</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>
    准备好虚拟磁盘映像后（有关磁盘映像的详细信息，请参见<xref linkend="cha-qemu-guest-inst-qemu-img"/>），便可以启动相关的虚拟机了。<xref linkend="cha-qemu-guest-inst-qemu-kvm"/>介绍了用于安装和运行 VM Guest 的简单命令。本章重点详细解释 <command>qemu-system-ARCH</command> 的用法，并针对更具体的任务提供解决方案。有关 <command>qemu-system-ARCH</command> 选项的完整列表，请参见其手册页 (<command>man 1 qemu</command>)。
  </para>
  <sect1 xml:id="cha-qemu-running-basic">
    <title>基本 <command>qemu-system-ARCH</command> 调用</title>

    <para>
      <command>qemu-system-ARCH</command> 命令使用以下语法：
    </para>

<screen>qemu-system-ARCH <replaceable>OPTIONS</replaceable><co xml:id="co-qemu-running-basic-opts"/> -drive file=<replaceable>DISK_IMAGE</replaceable><co xml:id="co-qemu-running-basic-img"/></screen>

    <calloutlist>
      <callout arearefs="co-qemu-running-basic-opts">
        <para>
          <command>qemu-system-ARCH</command> 接受许多选项。其中的大部分选项定义模拟硬件的参数，其他选项会影响更一般性的模拟器行为。如果您不提供任何选项，则会使用默认值，在此情况下，您需要提供所要运行的磁盘映像的路径。
        </para>
      </callout>
      <callout arearefs="co-qemu-running-basic-img">
        <para>
          包含要虚拟化的 Guest 系统的磁盘映像路径。<command>qemu-system-ARCH</command> 支持许多映像格式。使用 <command>qemu-img</command> <option>--help</option> 可列出这些格式。
        </para>
      </callout>
    </calloutlist>

    <important>
      <title>AArch64 体系结构</title>
      <para>
        KVM 支持仅适用于 64 位 ARM 体系结构 (AArch64)。要在 AArch64 体系结构上运行 QEMU，您需要：
      </para>
      <itemizedlist>
        <listitem>
          <para>
            使用 <option>-machine
            virt-<replaceable>VERSION_NUMBER</replaceable></option> 选项指定专用于 QEMU ARM 虚拟机的计算机类型。
          </para>
        </listitem>
        <listitem>
          <para>
            使用 <option>-bios</option> 选项指定固件映像文件。
          </para>
          <para>
            也可以使用 <option>-drive</option> 选项指定固件映像文件，例如：
          </para>
<screen>
-drive file=/usr/share/edk2/aarch64/QEMU_EFI-pflash.raw,if=pflash,format=raw
-drive file=/var/lib/libvirt/qemu/nvram/opensuse_VARS.fd,if=pflash,format=raw
</screen>
        </listitem>
        <listitem>
          <para>
            使用 <option>-cpu host</option> 选项指定 VM 主机服务器的 CPU（默认值为 <option>cortex-15</option>）。
          </para>
        </listitem>
        <listitem>
          <para>
            使用 <option>-machine gic-version=host</option> 选项指定与主机相同的通用中断控制器 (GIC) 版本（默认值为 <option>2</option>）。
          </para>
        </listitem>
        <listitem>
          <para>
            如需使用图形模式，请指定 <literal>virtio-gpu-pci</literal> 类型的图形设备。
          </para>
        </listitem>
      </itemizedlist>
      <para>
        例如：
      </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> qemu-system-aarch64 [...] \
 -bios /usr/share/qemu/qemu-uefi-aarch64.bin \
 -cpu host \
 -device virtio-gpu-pci \
 -machine virt,accel=kvm,gic-version=host
</screen>
    </important>
  </sect1>
  <sect1 xml:id="cha-qemu-running-gen-opts">
    <title>一般 <command>qemu-system-ARCH</command> 选项</title>

    <para>
      本节介绍一般 <command>qemu-system-ARCH</command> 选项，以及与基本模拟硬件（例如虚拟机的处理器、内存、型号类型或时间处理方法）相关的选项。
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>-name <replaceable>NAME_OF_GUEST</replaceable></literal></term>
        <listitem>
          <para>
            指定运行中 Guest 系统的名称。该名称将显示在窗口标题中，用于 VNC 服务器。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>-boot <replaceable>OPTIONS</replaceable></literal></term>
        <listitem>
          <para>
            指定定义的驱动器的引导顺序。驱动器以字母（盘符）表示，<literal>a</literal> 和 <literal>b</literal> 代表软盘驱动器 1 和 2，<literal>c</literal> 代表第一个硬盘，<literal>d</literal> 代表第一个 CD-ROM 驱动器，<literal>n</literal> 到 <literal>p</literal> 代表无盘引导网络适配器。
          </para>
          <para>
            例如，<literal>qemu-system-ARCH [...] -boot
            order=ndc</literal> 首先尝试从网络引导，然后尝试从第一个 CD-ROM 驱动器引导，最后尝试从第一个硬盘引导。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>-pidfile <replaceable>FILENAME</replaceable></literal></term>
        <listitem>
          <para>
            将 QEMU 的进程标识号 (PID) 储存在文件中。如果您从脚本运行 QEMU，此文件非常有用。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>-nodefaults</literal></term>
        <listitem>
          <para>
            默认情况下，即使您不在命令行上指定基本虚拟设备，QEMU 也会创建这些设备。此选项会关闭此功能，在此情况下，您必须手动指定每个设备，包括显卡和网卡、并行或串行端口，或虚拟控制台。默认连 QEMU 监视器都不会挂接。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>-daemonize</literal></term>
        <listitem>
          <para>
            启动 QEMU 进程后将其<quote>守护程序化</quote>。在 QEMU 准备好接收其任何设备上的连接后，它会从标准输入和标准输出分离。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <title>SeaBIOS BIOS 实现</title>
      <para>
        默认使用的 BIOS 是 SeaBIOS。您可以引导 USB 设备和任何驱动器（CD-ROM、软盘或硬盘）。SeaBIOS 支持 USB 鼠标和键盘，并支持多个 VGA 显卡。有关 SeaBIOS 的详细信息，请参见 <link xlink:href="https://www.seabios.org/SeaBIOS">SeaBIOS
        Website</link>。
      </para>
    </note>

    <sect2 xml:id="cha-qemu-running-gen-opts-basic">
      <title>基本虚拟硬件</title>
      <para/>
      <sect3 xml:id="sec-qemu-running-gen-opts-machine">
        <title>计算机类型</title>
        <para>
          您可以指定模拟计算机的类型。运行 <command>qemu-system-ARCH -M help</command> 可查看支持的计算机类型列表。
        </para>
        <note>
          <title>ISA-PC</title>
          <para>
            不支持 <emphasis>isapc: ISA-only-PC</emphasis> 计算机类型。
          </para>
        </note>
      </sect3>
      <sect3 xml:id="cha-qemu-running-gen-opts-basic-cpu">
        <title>CPU 型号</title>
        <para>
          要指定处理器 (CPU) 型号的类型，请运行 <command>qemu-system-ARCH -cpu</command>
          <replaceable>MODEL</replaceable>。使用 <command>qemu-system-ARCH -cpu
          help</command> 可查看支持的 CPU 型号列表。
        </para>
      </sect3>
      <sect3 xml:id="cha-qemu-running-gen-opts-basic-others">
        <title>其他基本选项</title>
        <para>
          下面是从命令行启动 <emphasis>qemu</emphasis> 时最常用的选项列表。要查看所有可用选项，请参见 <emphasis>qemu-doc</emphasis> 手册页。
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>-m <replaceable>MEGABYTES</replaceable></literal></term>
            <listitem>
              <para>
                指定用作虚拟 RAM 大小的 MB 数。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-balloon virtio</literal></term>
            <listitem>
              <para>
                指定用于动态更改指派给 VM Guest 的虚拟 RAM 量的半虚拟化设备。上限是使用 <literal>-m</literal> 指定的内存量。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-smp <replaceable>NUMBER_OF_CPUS</replaceable></literal></term>
            <listitem>
              <para>
                指定要模拟的 CPU 数量。QEMU 在 PC 平台上最多支持 255 个 CPU（其中最多有 64 个 CPU 可使用 KVM 加速）。此选项还接受其他 CPU 相关的参数，例如<emphasis>插槽</emphasis>数、每个插槽的<emphasis>核心</emphasis>数，或每个核心的<emphasis>线程</emphasis>数。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          下面是有效的 <command>qemu-system-ARCH</command> 命令行示例：
        </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 \
 -name "SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP5</phrase></phrase>" \
 -M pc-i440fx-2.7 -m 512 \
 -machine accel=kvm -cpu kvm64 -smp 2 \
 -drive format=raw,file=/images/sles.raw
</screen>
        <figure>
          <title>显示使用 SLES 作为 VM Guest 的 QEMU 窗口</title>
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="qemu_win_sles.png" width="70%"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="qemu_win_sles.png" width="70%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <variablelist>
          <varlistentry>
            <term><literal>-no-acpi</literal></term>
            <listitem>
              <para>
                禁用 <xref linkend="gloss-vt-acpi"/> 支持。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-S</literal></term>
            <listitem>
              <para>
                QEMU 在 CPU 停止的状态下启动。要启动 CPU，请在 QEMU 监视器中输入 <literal>c</literal>。有关详细信息，请参见<xref linkend="cha-qemu-monitor"/>。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-running-gen-opts-storing-cong">
      <title>储存和读取虚拟设备的配置</title>
      <variablelist>
        <varlistentry>
          <term><literal>-readconfig <replaceable>CFG_FILE</replaceable></literal></term>
          <listitem>
            <para>
              您无需每次想要运行 VM Guest 时都在命令行上输入设备配置选项，<command>qemu-system-ARCH</command> 可以从先前使用 <literal>-writeconfig</literal> 保存的或者手动编辑的文件中读取相应配置。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>-writeconfig <replaceable>CFG_FILE</replaceable></literal></term>
          <listitem>
            <para>
              将当前虚拟机的设备配置转储到文本文件，通过 <literal>-readconfig</literal> 选项可以重复使用该文件。
            </para>
<screen>
<prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -name "SLES <phrase role="productnumber"><phrase os="sles;sled">15 SP5</phrase></phrase>" \
 -machine accel=kvm -M pc-i440fx-2.7 -m 512 -cpu kvm64 \
 -smp 2 /images/sles.raw -writeconfig /images/sles.cfg
(exited)
<prompt>&gt; </prompt>cat /images/sles.cfg
# qemu config file

[drive]
  index = "0"
  media = "disk"
  file = "/images/sles_base.raw"
</screen>
            <para>
              这样，您便可以有条不紊地有效管理虚拟机的设备配置。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2 xml:id="cha-qemu-running-gen-opts-rtc">
      <title>Guest 实时时钟</title>
      <variablelist>
        <varlistentry>
          <term><literal>-rtc <replaceable>OPTIONS</replaceable></literal></term>
          <listitem>
            <para>
              指定在 VM Guest 中处理 RTC 的方式。Guest 的时钟默认自主机系统的时钟派生。因此，建议将主机系统时钟与精确的外部时钟同步（例如，通过 NTP 服务同步）。
            </para>
            <para>
              如果您需要将 VM Guest 时钟与主机时钟隔离，请指定 <literal>clock=vm</literal>，而不要使用默认值 <literal>clock=host</literal>。
            </para>
            <para>
              您也可以使用 <literal>base</literal> 选项来指定 VM Guest 时钟的初始时间：
            </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -rtc clock=vm,base=2010-12-03T01:02:00</screen>
            <para>
              可以不指定时戳，而是指定 <literal>utc</literal> 或 <literal>localtime</literal>。前者指示 VM Guest 按当前 UTC（协调世界时，请参见 <link xlink:href="http://en.wikipedia.org/wiki/UTC"/>）值启动，而后者则应用本地时间设置。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  <sect1 xml:id="cha-qemu-running-devices">
    <title>在 QEMU 中使用设备</title>

    <para>
      QEMU 虚拟机会模拟运行 VM Guest 所需的所有设备。例如，QEMU 支持多种类型的网卡、块设备（硬盘和可移动驱动器）、USB 设备、字符设备（串行和并行端口）或多媒体设备（显卡和声卡）。本节介绍用于配置多种类型的受支持设备的选项。
    </para>

    <tip>
      <para>
        如果需要为设备（例如 <literal>-drive</literal>）设置特殊的驱动程序和驱动程序属性，请使用 <literal>-device</literal> 选项来指定，并使用 <literal>drive=</literal> 子选项进行标识。例如：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -drive if=none,id=drive0,format=raw \
-device virtio-blk-pci,drive=drive0,scsi=off ...</screen>
      <para>
        要获取有关可用驱动程序及其属性的帮助，请使用 <option>-device ?</option> 和 <option>-device
        <replaceable>DRIVER</replaceable>,?</option>。
      </para>
    </tip>

    <sect2 xml:id="cha-qemu-running-devices-block">
      <title>块设备</title>
      <para>
        块设备对于虚拟机而言至关重要。这些设备是称作<emphasis>驱动器</emphasis>的固定或可移动存储媒体。通常会用连接的硬盘中的其中一块保存要虚拟化的 Guest 操作系统。
      </para>
      <para>
        <xref linkend="gloss-vt-vm"/>驱动器使用 <literal>-drive</literal> 来定义。此选项具有许多子选项，本节将介绍其中的一些子选项。有关完整列表，请参见手册页 (<command>man 1 qemu</command>)。
      </para>
      <variablelist>
        <title><literal>-drive</literal> 选项的子选项</title>
        <varlistentry>
          <term><literal>file=image_fname</literal></term>
          <listitem>
            <para>
              指定要用于此驱动器的磁盘映像的路径。如果未指定，将使用一个空（可移动）驱动器。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>if=drive_interface</literal></term>
          <listitem>
            <para>
              指定驱动器要连接到的接口类型。SUSE 目前仅支持 <literal>floppy</literal>、<literal>scsi</literal>、<literal>ide</literal> 或 <literal>virtio</literal>。<literal>virtio</literal> 定义半虚拟化磁盘驱动程序。默认值为 <literal>ide</literal>。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>index=index_of_connector</literal></term>
          <listitem>
            <para>
              指定驱动器所连接到的磁盘接口（请参见 <literal>if</literal> 选项）上某个连接器的索引号。如果未指定，则索引会自动递增。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>media=type</literal></term>
          <listitem>
            <para>
              指定媒体的类型。可以是 <literal>disk</literal>（表示硬盘）或 <literal>cdrom</literal>（表示可移动的 CD-ROM 驱动器）。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>format=img_fmt</literal></term>
          <listitem>
            <para>
              指定连接的磁盘映像的格式。如果未指定，系统会自动检测格式。SUSE 目前支持 <literal>raw</literal> 和 <literal>qcow2</literal> 格式。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>cache=method</literal></term>
          <listitem>
            <para>
              指定驱动器的缓存方法。可能的值为 <literal>unsafe</literal>、<literal>writethrough</literal>、<literal>writeback</literal>、<literal>directsync</literal> 或 <literal>none</literal>。要在使用 <literal>qcow2</literal> 映像格式时提高性能，请选择 <literal>writeback</literal>。<literal>none</literal> 会禁用主机页缓存，因此是最安全的选项。对于映像文件，默认值为 <literal>writeback</literal>。有关详细信息，请参见<xref linkend="cha-cachemodes"/>。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <tip>
        <para>
          为了简化块设备的定义，QEMU 能够识别多种简写形式，以方便您输入 <literal>qemu-system-ARCH</literal> 命令行。
        </para>
        <para>
          可使用
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -cdrom /images/cdrom.iso</screen>
        <para>
          来代替
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -drive format=raw,file=/images/cdrom.iso,index=2,media=cdrom</screen>
        <para>
          可使用
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -hda /images/imagei1.raw -hdb /images/image2.raw -hdc \
/images/image3.raw -hdd /images/image4.raw</screen>
        <para>
          来代替
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -drive format=raw,file=/images/image1.raw,index=0,media=disk \
-drive format=raw,file=/images/image2.raw,index=1,media=disk \
-drive format=raw,file=/images/image3.raw,index=2,media=disk \
-drive format=raw,file=/images/image4.raw,index=3,media=disk</screen>
      </tip>
      <tip>
        <title>使用主机驱动器代替映像</title>
        <para>
          作为使用磁盘映像（请参见<xref linkend="cha-qemu-guest-inst-qemu-img"/>）的替代方式，您还可以使用现有的 VM 主机服务器磁盘，将其作为驱动器进行连接，然后从 VM Guest 访问它们。请直接使用主机磁盘设备，而不要使用磁盘映像文件名。
        </para>
        <para>
          要访问主机 CD-ROM 驱动器，请使用
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -drive file=/dev/cdrom,media=cdrom</screen>
        <para>
          要访问主机硬盘，请使用
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -drive file=/dev/hdb,media=disk</screen>
        <para>
          VM Guest 使用的主机驱动器不可同时由 VM 主机服务器或另一个 VM Guest 访问。
        </para>
      </tip>
      <sect3 xml:id="kvm-freedisk">
        <title>释放未使用的 Guest 磁盘空间</title>
        <para>
          <xref linkend="gloss-vt-storage-sparse"/>这种磁盘映像文件的大小会随着用户在其中添加数据而增长，它所占用的磁盘空间量等于其中储存的数据量。例如，如果您在稀疏磁盘映像中复制 1 GB 数据，则此映像的大小会增长 1 GB。如果您随后删除 500 MB（举例而言）的数据，映像大小默认不会按预期减小。
        </para>
        <para>
          正因如此，KVM 命令行上引入了 <option>discard=on</option> 选项。此选项告知超级管理程序在从稀疏 Guest 映像中删除数据后自动释放<quote>空洞</quote>。请注意，此选项仅对 <literal>if=scsi</literal> 驱动器接口有效：
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -drive format=<replaceable>img_format</replaceable>,file=<replaceable>/path/to/file.img</replaceable>,if=scsi,discard=on</screen>
        <important>
          <title>支持状态</title>
          <para>
            不支持 <option>if=scsi</option>。此接口不会映射到 <emphasis>virtio-scsi</emphasis>，而是映射到 <emphasis>lsi SCSI 适配器</emphasis>。
          </para>
        </important>
      </sect3>
      <sect3 xml:id="kvm-iothreads">
        <title>IOThread</title>
        <para>
          IOThread 是 virtio 设备的专用事件循环线程，用于执行 I/O 请求来提高可缩放性，尤其是在包含 SMP VM Guest 并使用许多磁盘设备的 SMP VM 主机服务器上。IOThread 不使用 QEMU 的主事件循环进行 I/O 处理，而是允许将 I/O 工作分散到多个 CPU 之间，经过正确配置后将可以改善延迟情况。
        </para>
        <para>
          可通过定义 IOThread 对象来启用 IOThread。然后，virtio 设备可将这些对象用于其 I/O 事件循环。许多 virtio 设备都可以使用单个 IOThread 对象，或者可按 1:1 映射配置 virtio 设备和 IOThread 对象。以下示例创建 ID 为 <literal>iothread0</literal> 的单个 IOThread，然后，该 IOThread 将用作两个 virtio-blk 设备的事件循环。
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -object iothread,id=iothread0\
-drive if=none,id=drive0,cache=none,aio=native,\
format=raw,file=filename -device virtio-blk-pci,drive=drive0,scsi=off,\
iothread=iothread0 -drive if=none,id=drive1,cache=none,aio=native,\
format=raw,file=filename -device virtio-blk-pci,drive=drive1,scsi=off,\
iothread=iothread0 [...]</screen>
        <para>
          下面的 qemu 命令行示例说明了 virtio 设备与 IOThread 之间的 1:1 映射：
        </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -object iothread,id=iothread0\
-object iothread,id=iothread1 -drive if=none,id=drive0,cache=none,aio=native,\
format=raw,file=filename -device virtio-blk-pci,drive=drive0,scsi=off,\
iothread=iothread0 -drive if=none,id=drive1,cache=none,aio=native,\
format=raw,file=filename -device virtio-blk-pci,drive=drive1,scsi=off,\
    iothread=iothread1 [...]</screen>
      </sect3>
      <sect3 xml:id="kvm-virtio-blk-use-bio">
        <title>virtio-blk 的基于 Bio 的 I/O 路径</title>
        <para>
          为了提高 I/O 密集型应用程序的性能，内核版本 3.7 中为 virtio-blk 接口引入了新的 I/O 路径。这个基于 bio 的块设备驱动程序会跳过 I/O 调度程序，因此可缩短 Guest 中的 I/O 路径并降低延迟。对于 SSD 磁盘等高速储存设备，该驱动程序特别有用。
        </para>
        <para>
          该驱动程序默认处于禁用状态。要使用该驱动程序，请执行以下操作：
        </para>
        <procedure>
          <step>
            <para>
              在 Guest 上的内核命令行中追加 <option>virtio_blk.use_bio=1</option>。可以通过 <menuchoice><guimenu>YaST</guimenu><guimenu>系统</guimenu><guimenu>引导加载器</guimenu></menuchoice>执行此操作。
            </para>
            <para>
              为此，您也可以编辑 <filename>/etc/default/grub</filename>，搜索包含 <option>GRUB_CMDLINE_LINUX_DEFAULT=</option> 的行，并在末尾添加内核参数。然后运行 <command>grub2-mkconfig &gt;/boot/grub2/grub.cfg</command> 以更新 grub2 引导菜单。
            </para>
          </step>
          <step>
            <para>
              在激活新内核命令行的情况下重引导 Guest。
            </para>
          </step>
        </procedure>
        <tip>
          <title>慢速设备上基于 Bio 的驱动程序</title>
          <para>
            基于 bio 的 virtio-blk 驱动程序对于机械硬盘等慢速设备没有帮助。原因在于，调度所带来的优势大于缩短 bio 路径所带来的优势。请不要在慢速设备上使用基于 bio 的驱动程序。
          </para>
        </tip>
      </sect3>
      <sect3 xml:id="sec-qemu-running-devices-block-iscsi">
        <title>直接访问 iSCSI 资源</title>
        
        <para>
          QEMU 现已与 <literal>libiscsi</literal> 相集成。因此，QEMU 可以直接访问 iSCSI 资源并将其用作虚拟机块设备。此功能不需要任何主机 iSCSI 发起端配置，而基于 iSCSI 目标的 libvirt 储存池设置则需要这种配置。此功能通过用户空间库 libiscsi 直接将 Guest 存储接口连接到 iSCSI 目标 LUN。您也可以在 libvirt XML 配置中指定基于 iSCSI 的磁盘设备。
        </para>
        <note>
          <title>RAW 映像格式</title>
          <para>
            由于 iSCSI 协议存在某些技术方面的限制，仅当使用 RAW 映像格式时，此功能才可用。
          </para>
        </note>
        
        <para>
          下面是用于配置 iSCSI 连接的 QEMU 命令行界面。
        </para>
        <note>
          <title>virt-manager 限制</title>
          <para>
            virt-manager 界面尚未公开基于 libiscsi 的储存供应的用法，但是可以通过直接编辑 Guest XML 对其进行配置。这种访问基于 iSCSI 的储存的新方式通过命令行来实现。
          </para>
        </note>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -machine accel=kvm \
  -drive file=iscsi://192.168.100.1:3260/iqn.2016-08.com.example:314605ab-a88e-49af-b4eb-664808a3443b/0,\
  format=raw,if=none,id=mydrive,cache=none \
  -device ide-hd,bus=ide.0,unit=0,drive=mydrive ...</screen>
        <para>
          下面是使用基于协议的 iSCSI 的 Guest 域 XML 的示例代码段：
        </para>
<screen>&lt;devices&gt;
...
  &lt;disk type='network' device='disk'&gt;
    &lt;driver name='qemu' type='raw'/&gt;
    &lt;source protocol='iscsi' name='iqn.2013-07.com.example:iscsi-nopool/2'&gt;
      &lt;host name='example.com' port='3260'/&gt;
    &lt;/source&gt;
    &lt;auth username='myuser'&gt;
      &lt;secret type='iscsi' usage='libvirtiscsi'/&gt;
    &lt;/auth&gt;
    &lt;target dev='vda' bus='virtio'/&gt;
  &lt;/disk&gt;
&lt;/devices&gt;</screen>
        <para>
          将此代码段与使用 virt-manager 设置的基于主机的 iSCSI 发起端示例相对比：
        </para>
<screen>&lt;devices&gt;
...
  &lt;disk type='block' device='disk'&gt;
    &lt;driver name='qemu' type='raw' cache='none' io='native'/&gt;
    &lt;source dev='/dev/disk/by-path/scsi-0:0:0:0'/&gt;
    &lt;target dev='hda' bus='ide'/&gt;
    &lt;address type='drive' controller='0' bus='0' target='0' unit='0'/&gt;
  &lt;/disk&gt;
  &lt;controller type='ide' index='0'&gt;
    &lt;address type='pci' domain='0x0000' bus='0x00' slot='0x01'
             function='0x1'/&gt;
  &lt;/controller&gt;
&lt;/devices&gt;</screen>
      </sect3>
      <sect3 xml:id="qemu-devices-block-rbd">
        <title>通过 QEMU 使用 RADOS 块设备</title>
        <para>
          RADOS 块设备 (RBD) 将数据储存在 Ceph 群集中。这些设备支持快照、复制和数据一致性。您可以像使用其他块设备一样，从 KVM 管理的 VM Guest 使用 RBD。
        </para>
        <para os="sles;sled">
          有关更多细节，请参见 <link xlink:href="https://documentation.suse.com/ses/html/ses-all/cha-ceph-kvm.html">SUSE Enterprise Storage
          <citetitle><citetitle>Administration Guide</citetitle></citetitle>, chapter <citetitle>Ceph as a Back-end
          for QEMU KVM Instance</citetitle></link>。
        </para>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-running-devices-graphic">
      <title>图形设备和显示选项</title>
      <para>
        本节介绍影响模拟视频卡类型的 QEMU 选项，以及 VM Guest 图形输出的显示方式。
      </para>
      <sect3 xml:id="cha-qemu-running-devices-graphic-vga">
        <title>定义视频卡</title>
        <para>
          QEMU 使用 <literal>-vga</literal> 来定义用于显示 VM Guest 图形输出的视频卡。<literal>-vga</literal> 选项识别以下值：
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>none</literal></term>
            <listitem>
              <para>
                在 VM Guest 上禁用视频卡（不模拟视频卡）。您仍可以通过串行控制台访问运行中的 VM Guest。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>std</literal></term>
            <listitem>
              <para>
                模拟标准的 VESA 2.0 VBE 视频卡。如果您打算在 VM Guest 上使用较高的显示分辨率，请使用此值。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>qxl</term>
            <listitem>
              <para>
                QXL 是半虚拟显卡。它与 VGA 兼容（包括 VESA 2.0 VBE 支持）。使用 <literal>spice</literal> 视频协议时，建议使用 <literal>qxl</literal>。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>virtio</term>
            <listitem>
              <para>
                半虚拟 VGA 显卡。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
      <sect3 xml:id="cha-qemu-running-devices-graphic-display">
        <title>显示选项</title>
        <para>
          以下选项会影响 VM Guest 图形输出的显示方式。
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>-display gtk</literal></term>
            <listitem>
              <para>
                在 GTK 窗口中显示视频输出。此界面提供用于在运行时配置和控制 VM 的 UI 元素。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-display sdl</literal></term>
            <listitem>
              <para>
                通过 SDL 在单独的图形窗口中显示视频输出。有关详细信息，请参见 SDL 文档。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-spice option[,option[,...]]</literal></term>
            <listitem>
              <para>
                启用 spice 远程桌面协议。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-display vnc</literal></term>
            <listitem>
              <para>
                有关更多信息，请参考<xref linkend="cha-qemu-running-vnc"/>。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-nographic</literal></term>
            <listitem>
              <para>
                禁用 QEMU 的图形输出。模拟的串行端口将重定向到控制台。
              </para>
              <para>
                使用 <literal>-nographic</literal> 启动虚拟机后，在虚拟控制台中按 <keycombo><keycap function="control"/><keycap>A</keycap></keycombo>
                <keycap>H</keycap> 可查看其他有用快捷键的列表，例如，用于在控制台与 QEMU 监视器之间切换的快捷键。
              </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -hda /images/sles_base.raw -nographic

C-a h    print this help
C-a x    exit emulator
C-a s    save disk data back to file (if -snapshot)
C-a t    toggle console timestamps
C-a b    send break (magic sysrq)
C-a c    switch between console and monitor
C-a C-a  sends C-a
(pressed C-a c)

QEMU 2.3.1 monitor - type 'help' for more information
(qemu)</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-no-frame</literal></term>
            <listitem>
              <para>
                禁用 QEMU 窗口的装饰。便于在专用桌面工作空间中操作。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-full-screen</literal></term>
            <listitem>
              <para>
                以全屏模式启动 QEMU 图形输出。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-no-quit</literal></term>
            <listitem>
              <para>
                禁用 QEMU 窗口的关闭按钮，防止强行关闭窗口。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>-alt-grab</literal>，<literal>-ctrl-grab</literal></term>
            <listitem>
              <para>
                默认情况下，在按 <keycombo><keycap function="control"/><keycap function="alt"/></keycombo> 之后，QEMU 窗口会释放<quote>捕获的</quote>鼠标。您可以将组合键更改为 <keycombo><keycap function="control"/><keycap function="alt"/><keycap function="shift"/></keycombo> (<literal>-alt-grab</literal>) 或右 <keycap function="control"/> 键 (<literal>-ctrl-grab</literal>)。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-running-devices-usb">
      <title>USB 设备</title>
      <para>
        可通过两种方式来创建可供 KVM 中的 VM Guest 使用的 USB 设备：可以在 VM Guest 中模拟新的 USB 设备，或将现有的主机 USB 设备指派给 VM Guest。要在 QEMU 中使用 USB 设备，首先需要通过 <option>-usb</option> 选项启用通用 USB 驱动程序。然后可以通过 <option>-usbdevice</option> 选项指定各个设备。
      </para>
      <sect3 xml:id="kvm-usb-emulate">
        <title>在 VM Guest 中模拟 USB 设备</title>
        <para>
          SUSE 目前支持以下类型的 USB 设备：<literal>disk</literal>、<literal>host</literal>、<literal>serial</literal>、<literal>braille</literal>、<literal>net</literal>、<literal>mouse</literal> 和 <literal>tablet</literal>。
        </para>
        <variablelist>
          <title><literal>-usbdevice</literal> 选项的 USB 设备类型</title>
          <varlistentry>
            <term><literal>disk</literal></term>
            <listitem>
              <para>
                基于文件模拟大容量储存设备。可以使用可选的 <literal>format</literal> 选项，而不要检测格式。
              </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -usbdevice
        disk:format=raw:/virt/usb_disk.raw</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>host</literal></term>
            <listitem>
              <para>
                直通主机设备（由 bus.addr 标识）。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>serial</literal></term>
            <listitem>
              <para>
                主机字符设备的串行转换器。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>braille</literal></term>
            <listitem>
              <para>
                使用 BrlAPI 模拟盲文设备以显示盲文输出。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>net</literal></term>
            <listitem>
              <para>
                模拟支持 CDC 以太网和 RNDIS 协议的网络适配器。
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>mouse</literal></term>
            <listitem>
              <para>
                模拟虚拟 USB 鼠标。此选项会覆盖默认的 PS/2 鼠标模拟。以下示例显示了使用 <literal>qemu-system-ARCH [...] -usbdevice mouse</literal> 启动的 VM Guest 上的鼠标硬件状态：
              </para>
<screen><prompt>&gt; </prompt><command>sudo</command> hwinfo --mouse
20: USB 00.0: 10503 USB Mouse
[Created at usb.122]
UDI: /org/freedesktop/Hal/devices/usb_device_627_1_1_if0
[...]
Hardware Class: mouse
Model: "Adomax QEMU USB Mouse"
Hotplug: USB
Vendor: usb 0x0627 "Adomax Technology Co., Ltd"
Device: usb 0x0001 "QEMU USB Mouse"
[...]</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>tablet</literal></term>
            <listitem>
              <para>
                模拟使用绝对坐标的定位设备（例如触摸屏）。此选项会覆盖默认的 PS/2 鼠标模拟。如果您要通过 VNC 协议查看 VM Guest，则绘图板设备非常有用。有关更多信息，请参见<xref linkend="cha-qemu-running-vnc"/>。
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-running-devices-char">
      <title>字符设备</title>
      <para>
        使用 <literal>-chardev</literal> 可创建新的字符设备。该选项使用以下一般语法：
      </para>
<screen>qemu-system-x86_64 [...] -chardev <replaceable>BACKEND_TYPE</replaceable>,id=<replaceable>ID_STRING</replaceable></screen>
      <para>
        其中，<replaceable>BACKEND_TYPE</replaceable> 可以是 <literal>null</literal>、<literal>socket</literal>、<literal>udp</literal>、<literal>msmouse</literal>、<literal>vc</literal>、<literal>file</literal>、<literal>pipe</literal>、<literal>console</literal>、<literal>serial</literal>、<literal>pty</literal>、<literal>stdio</literal>、<literal>braille</literal>、<literal>tty</literal> 或 <literal>parport</literal>。所有字符设备都必须有一个最长为 127 个字符的唯一标识字符串。此字符串用于在其他相关指令中标识该设备。有关后端的所有子选项的完整说明，请参见手册页 (<command>man 1 qemu</command>)。下面是可用<literal>back-ends</literal>的简要说明：
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>null</literal></term>
          <listitem>
            <para>
              创建一个空设备，该设备不输出数据且会丢弃收到的所有数据。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>stdio</literal></term>
          <listitem>
            <para>
              连接到 QEMU 的进程标准输入和标准输出。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>socket</literal></term>
          <listitem>
            <para>
              创建双向流套接字。如果指定了 <replaceable>PATH</replaceable>，则创建 Unix 套接字：
            </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -chardev \
socket,id=unix_socket1,path=/tmp/unix_socket1,server</screen>
            <para>
              <replaceable>SERVER</replaceable> 子选项指定该套接字是监听套接字。
            </para>
            <para>
              如果指定了 <replaceable>PORT</replaceable>，则创建 TCP 套接字：
            </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -chardev \
socket,id=tcp_socket1,host=localhost,port=7777,server,nowait</screen>
            <para>
              该命令在端口 7777 上创建一个本地监听 (<literal>server</literal>) TCP 套接字。QEMU 不会因为等待客户端连接到监听端口而进入阻塞状态 (<literal>nowait</literal>)。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>udp</literal></term>
          <listitem>
            <para>
              通过 UDP 协议将来自 VM Guest 的所有网络流量发送到远程主机。
            </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-chardev udp,id=udp_fwd,host=mercury.example.com,port=7777</screen>
            <para>
              该命令在远程主机 mercury.example.com 上绑定端口 7777，并从中发送 VM Guest 网络流量。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>vc</literal></term>
          <listitem>
            <para>
              创建新的 QEMU 文本控制台。您可以选择性地指定虚拟控制台的尺寸：
            </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -chardev vc,id=vc1,width=640,height=480 \
-mon chardev=vc1</screen>
            <para>
              该命令会创建指定大小且名为 <literal>vc1</literal> 的新虚拟控制台，并将 QEMU 监视器连接到该控制台。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>file</literal></term>
          <listitem>
            <para>
              将来自 VM Guest 的所有流量都记录到 VM 主机服务器上的一个文件。必须指定 <literal>path</literal>，如果该路径不存在，系统将予以创建。
            </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-chardev file,id=qemu_log1,path=/var/log/qemu/guest1.log</screen>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        默认情况下，QEMU 将为串行与并行端口创建一组字符设备，并为 QEMU 监视器创建一个特殊控制台。不过，您可以创建自己的字符设备，并将其用于所述目的。以下选项可为您提供帮助：
      </para>
      <variablelist>
        <varlistentry>
          <term><literal>-serial <replaceable>CHAR_DEV</replaceable></literal></term>
          <listitem>
            <para>
              将 VM Guest 的虚拟串行端口重定向到 VM 主机服务器上的字符设备 <replaceable>CHAR_DEV</replaceable>。在图形模式下，此设备默认为一个虚拟控制台 (<literal>vc</literal>)；在非图形模式下，默认为 <literal>stdio</literal>。<literal>-serial</literal> 可识别许多子选项。有关子选项的完整列表，请参见手册页 <command>man 1 qemu</command>。
            </para>
            <para>
              您最多可以模拟四个串行端口。使用 <literal>-serial
              none</literal> 可禁用所有串行端口。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>-parallel <replaceable>DEVICE</replaceable></literal></term>
          <listitem>
            <para>
              将 VM Guest 的并行端口重定向到 <replaceable>DEVICE</replaceable>。此选项支持的设备与 <literal>-serial</literal> 相同。
            </para>
            <tip>
              <para>
                使用 <phrase os="sles;sled">SUSE Linux Enterprise Server</phrase> 作为 VM 主机服务器时，您可以直接使用硬件并行端口设备 <filename>/dev/parportN</filename>（其中的 <literal>N</literal> 是端口号）。
              </para>
            </tip>
            <para>
              您最多可以模拟三个并行端口。使用 <literal>-parallel none</literal> 可禁用所有并行端口。
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>-monitor <replaceable>CHAR_DEV</replaceable></literal></term>
          <listitem>
            <para>
              将 QEMU 监视器重定向到 VM 主机服务器上的字符设备 <replaceable>CHAR_DEV</replaceable>。此选项支持的设备与 <literal>-serial</literal> 相同。在图形模式下，此设备默认为一个虚拟控制台 (<literal>vc</literal>)；在非图形模式下，默认为 <literal>stdio</literal>。
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        有关可用字符设备后端的完整列表，请参见手册页 (<command>man 1 qemu</command>)。
      </para>
    </sect2>
  </sect1>
  <sect1 xml:id="cha-qemu-running-networking">
    <title>QEMU 中的网络</title>

    <para>
      将 <literal>-netdev</literal> 选项与 <option>-device</option> 结合使用可为 VM Guest 定义特定类型的网络和网络接口卡。<option>-netdev</option> 选项的语法为
    </para>

<screen>-netdev type[,prop[=value][,...]]</screen>

    <para>
      SUSE 目前支持以下网络类型：<literal>user</literal>、<literal>bridge</literal> 和 <literal>tap</literal>。有关 <literal>-netdev</literal> 子选项的完整列表，请参见手册页 (<command>man 1 qemu</command>)。
    </para>

    <variablelist>
      <title>支持的 <literal>-netdev</literal> 子选项</title>
      <varlistentry>
        <term><literal>bridge</literal></term>
        <listitem>
          <para>
            使用指定的网络助手来配置 TAP 接口并将其挂接到指定的网桥。有关更多信息，请参见<xref linkend="cha-qemu-running-networking-bridge"/>。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>user</literal></term>
        <listitem>
          <para>
            指定用户模式网络。有关更多信息，请参见<xref linkend="cha-qemu-running-networking-usermode"/>。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>tap</literal></term>
        <listitem>
          <para>
            指定桥接网络或路由网络。有关更多信息，请参见<xref linkend="cha-qemu-running-networking-bridge"/>。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <sect2 xml:id="cha-qemu-running-networking-nic">
      <title>定义网络接口卡</title>
      <para>
        将 <literal>-netdev</literal> 与相关的 <option>-device</option> 选项一起使用可以添加新的模拟网卡：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-netdev tap<co xml:id="co-qemu-running-networking-nic-tap"/>,id=hostnet0 \
-device virtio-net-pci<co xml:id="co-qemu-running-networking-nic-drv"/>,netdev=hostnet0,vlan=1<co xml:id="co-qemu-running-networking-nic-vlan"/>,\
macaddr=00:16:35:AF:94:4B<co xml:id="co-qemu-running-networking-nic-mac"/>,name=ncard1</screen>
      <calloutlist>
        <callout arearefs="co-qemu-running-networking-nic-tap">
          <para>
            指定网络设备类型。
          </para>
        </callout>
        <callout arearefs="co-qemu-running-networking-nic-drv">
          <para>
            指定网卡的型号。使用 <command>qemu-system-ARCH -device help</command> 并搜索 <literal>Network devices:</literal> 部分可获取您平台上受 QEMU 支持的所有网卡型号的列表。
          </para>
          <remark>cwickert 2017-09-01: still up to date?</remark>
          <para>
            SUSE 目前支持型号 <literal>rtl8139</literal>、<literal>e1000</literal> 及其衍生产品 <literal>e1000-82540em</literal>、<literal>e1000-82544gc</literal>、<literal>e1000-82545em</literal> 和 <literal>virtio-net-pci</literal>。要查看特定驱动程序的选项列表，请添加 <option>help</option> 作为驱动程序选项：
          </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -device e1000,help
e1000.mac=macaddr
e1000.vlan=vlan
e1000.netdev=netdev
e1000.bootindex=int32
e1000.autonegotiation=on/off
e1000.mitigation=on/off
e1000.addr=pci-devfn
e1000.romfile=str
e1000.rombar=uint32
e1000.multifunction=on/off
e1000.command_serr_enable=on/off</screen>
        </callout>
        <callout arearefs="co-qemu-running-networking-nic-vlan">
          <para>
            将网络接口连接到 VLAN 1。您可以指定自己的编号，该编号主要用于标识目的。如果您省略此子选项，QEMU 将使用默认值 0。
          </para>
        </callout>
        <callout arearefs="co-qemu-running-networking-nic-mac">
          <para>
            指定网卡的媒体访问控制 (MAC) 地址。它是一个唯一标识符，建议您始终指定该地址。如果未指定，QEMU 将提供自己的默认 MAC 地址，因此可能会在相关 VLAN 中造成 MAC 地址冲突。
          </para>
        </callout>
      </calloutlist>
    </sect2>

    <sect2 xml:id="cha-qemu-running-networking-usermode">
      <title>用户模式网络</title>
      <para>
        <literal>-netdev user</literal> 选项指示 QEMU 使用用户模式网络。如果未选择网络模式，则默认使用用户模式。因此，这些命令行等效于：
      </para>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -hda /images/sles_base.raw</screen>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 -hda /images/sles_base.raw -netdev user,id=hostnet0</screen>
      <para>
        如果您要允许 VM Guest 访问外部网络资源（例如互联网），则此模式非常有用。默认不允许任何传入流量，因此 VM Guest 对于网络中的其他计算机不可见。在此网络模式下，将不需要管理员特权。用户模式还可用于从 VM 主机服务器上的本地目录在 VM Guest 上执行网络引导。
      </para>
      <para>
        VM Guest 会获得虚拟 DHCP 服务器分配的一个 IP 地址。可通过 10.0.2.2 访问 VM 主机服务器（DHCP 服务器），而分配的 IP 地址范围从 10.0.2.15 开始。您可以使用 <command>ssh</command> 连接到 10.0.2.2 上的 VM 主机服务器，并使用 <command>scp</command> 来回复制文件。
      </para>
      <sect3 xml:id="cha-qemu-running-networking-usermode-examples">
        <title>命令行示例</title>
        <para>
          本节提供了有关如何使用 QEMU 设置用户模式网络的几个示例。
        </para>
        <example xml:id="ex-qemu-net-usermode-resctrict">
          <title>受限用户模式网络</title>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-netdev user<co xml:id="co-usermode-user"/>,id=hostnet0 \
-device virtio-net-pci,netdev=hostnet0,vlan=1<co xml:id="co-usermode-vlan"/>,name=user_net1<co xml:id="co-usermode-name"/>,restrict=yes<co xml:id="co-usermode-restrict"/></screen>
          <calloutlist>
            <callout arearefs="co-usermode-user">
              <para>
                指定用户模式网络。
              </para>
            </callout>
            <callout arearefs="co-usermode-vlan">
              <para>
                连接到 VLAN 1。如果省略此选项，则默认使用 0。
              </para>
            </callout>
            <callout arearefs="co-usermode-name">
              <para>
                指定网络堆栈的直观易懂名称。可用于在 QEMU 监视器中标识该堆栈。
              </para>
            </callout>
            <callout arearefs="co-usermode-restrict">
              <para>
                隔离 VM Guest。这样 VM Guest 将无法与 VM 主机服务器通讯，并且网络包将不会路由到外部网络。
              </para>
            </callout>
          </calloutlist>
        </example>
        <example xml:id="ex-qemu-net-usermode-iprange">
          <title>使用自定义 IP 范围的用户模式网络</title>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-netdev user,id=hostnet0 \
-device virtio-net-pci,netdev=hostnet0,net=10.2.0.0/8<co xml:id="co-usermode-net"/>,host=10.2.0.6<co xml:id="co-usermode-host"/>,\
dhcpstart=10.2.0.20<co xml:id="co-usermode-dhcpstart"/>,hostname=tux_kvm_guest<co xml:id="co-usermode-hostname"/></screen>
          <calloutlist>
            <callout arearefs="co-usermode-net">
              <para>
                指定 VM Guest 看到的网络 IP 地址，以及可选的网络掩码。默认值为 10.0.2.0/8。
              </para>
            </callout>
            <callout arearefs="co-usermode-host">
              <para>
                指定 VM Guest 看到的 VM 主机服务器 IP 地址。默认值为 10.0.2.2。
              </para>
            </callout>
            <callout arearefs="co-usermode-dhcpstart">
              <para>
                指定可由内置 DHCP 服务器指派给 VM Guest 的 16 个 IP 地址中的第一个。默认值为 10.0.2.15。
              </para>
            </callout>
            <callout arearefs="co-usermode-hostname">
              <para>
                指定由内置 DHCP 服务器指派给 VM Guest 的主机名。
              </para>
            </callout>
          </calloutlist>
        </example>
        <example xml:id="ex-qemu-net-usermode-netboot-tftp">
          <title>使用网络引导和 TFTP 的用户模式网络</title>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-netdev user,id=hostnet0 \
-device virtio-net-pci,netdev=hostnet0,tftp=/images/tftp_dir<co xml:id="co-usermode-tftp"/>,\
bootfile=/images/boot/pxelinux.0<co xml:id="co-usermode-bootfile"/></screen>
          <calloutlist>
            <callout arearefs="co-usermode-tftp">
              <para>
                激活内置 TFTP（提供基本 FTP 功能的文件传输协议）服务器。指定目录中的文件将以 TFTP 服务器根目录的形式显示给 VM Guest。
              </para>
            </callout>
            <callout arearefs="co-usermode-bootfile">
              <para>
                以 BOOTP（可提供引导映像 IP 地址和网络位置的一种网络协议，通常在无盘工作站中使用）文件的形式广播指定的文件。与 <literal>tftp</literal> 一起使用时，可以通过主机上的本地目录从网络引导 VM Guest。
              </para>
            </callout>
          </calloutlist>
        </example>
        <example xml:id="ex-qemu-net-usermode-hostfwd">
          <title>使用主机端口转发的用户模式网络</title>
<screen><prompt>&gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] \
-netdev user,id=hostnet0 \
-device virtio-net-pci,netdev=hostnet0,hostfwd=tcp::2222-:22</screen>
          <para>
            将主机上端口 2222 的传入 TCP 连接转发到 VM Guest 上的端口 22 (<systemitem class="service">SSH</systemitem>)。如果 <systemitem class="daemon">sshd</systemitem> 正在 VM Guest 上运行，请输入
          </para>
<screen><prompt>&gt; </prompt>ssh qemu_host -p 2222</screen>
          <para>
            （其中，<literal>qemu_host</literal> 是主机系统的主机名或 IP 地址），以获取 VM Guest 的 <systemitem class="daemon">SSH</systemitem> 提示。
          </para>
        </example>
      </sect3>
    </sect2>

    <sect2 xml:id="cha-qemu-running-networking-bridge">
      <title>桥接网络</title>
      <para>
        使用 <literal>-netdev tap</literal> 选项时，QEMU 会通过将主机 TAP 网络设备连接到 VM Guest 的指定 VLAN 来创建网桥。该网络设备的网络接口便会对网络的其余部分可见。此方法默认未启用，需要显式指定。
      </para>
      <para>
        首先创建一个网桥，并将一个 VM 主机服务器物理网络接口（例如 <literal>eth0</literal>）添加到其中：
      </para>
      <procedure>
        <step>
          <para>
            启动 <guimenu>YaST 控制中心</guimenu>并选择<menuchoice><guimenu>系统</guimenu><guimenu>网络设置</guimenu></menuchoice>。
          </para>
        </step>
        <step>
          <para>
            单击<guimenu>添加</guimenu>，然后从<guimenu>硬件对话框</guimenu>窗口的<guimenu>设备类型</guimenu>下拉框中选择<guimenu>网桥</guimenu>。单击<guimenu>下一步</guimenu>。
          </para>
        </step>
        <step>
          <para>
            选择您需要使用动态还是静态指派的 IP 地址，然后填写相关网络设置（如果适用）。
          </para>
        </step>
        <step>
          <para>
            在<guimenu>桥接的设备</guimenu>窗格中，选择要添加到网桥的以太网设备。
          </para>
          <para>
            单击<guimenu>下一步</guimenu>。出现有关调整已配置设备的提示时，请单击<guimenu>继续</guimenu>。
          </para>
        </step>
        <step>
          <para>
            单击<guimenu>确定</guimenu>以应用更改。检查是否已创建网桥：
          </para>
<screen><prompt>&gt; </prompt>bridge link
2: eth0 state UP : &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 master br0 \
 state forwarding priority 32 cost 100
</screen>
        </step>
      </procedure>
      <sect3 xml:id="cha-qemu-running-networking-bridge-manually">
        <title>手动连接到网桥</title>
        <para>
          使用以下示例脚本将 VM Guest 连接到新建的网桥接口 <literal>br0</literal>。脚本中的数个命令通过 <command>sudo</command> 机制运行，原因是这些命令需要 <systemitem class="username">root</systemitem> 特权。
        </para>
        <tip>
          <title>所需的软件</title>
          <para>
            要管理网桥，需要安装 <package>tunctl</package> 软件包。
          </para>
        </tip>
<screen>
#!/bin/bash
bridge=br0<co xml:id="co-qemu-net-bridge-br"/>
tap=$(sudo tunctl -u $(whoami) -b)<co xml:id="co-qemu-net-bridge-tap"/>
sudo ip link set $tap up<co xml:id="co-qemu-net-bridge-up"/>
sleep 1s<co xml:id="co-qemu-net-bridge-sleep"/>
sudo ip link add name $bridge type bridge
sudo ip link set $bridge up
sudo ip link set $tap master $bridge<co xml:id="co-qemu-net-bridge-br3"/>
qemu-system-x86_64 -machine accel=kvm -m 512 -hda /images/sles_base.raw \
 -netdev tap,id=hostnet0 \
 -device virtio-net-pci,netdev=hostnet0,vlan=0,macaddr=00:16:35:AF:94:4B,\
 ifname=$tap<co xml:id="co-qemu-net-bridge-ifname"/>,script=no<co xml:id="co-qemu-net-bridge-script"/>,downscript=no
sudo ip link set $tap nomaster<co xml:id="co-qemu-net-bridge-delif"/>
sudo ip link set $tap down<co xml:id="co-qemu-net-bridge-linkdown"/>
sudo tunctl -d $tap<co xml:id="co-qemu-net-bridge-deltap"/></screen>
        <calloutlist>
          <callout arearefs="co-qemu-net-bridge-br">
            <para>
              网桥设备的名称。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-tap">
            <para>
              准备新的 TAP 设备并将其指派给运行脚本的用户。TAP 设备是常用于虚拟化和模拟设置的虚拟网络设备。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-up">
            <para>
              启动新建的 TAP 网络接口。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-sleep">
            <para>
              暂停 1 秒，以确保新 TAP 网络接口确实启动。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-br3">
            <para>
              将新 <literal>TAP</literal> 设备添加到网桥 <literal>br0</literal>。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-ifname">
            <para>
              <literal>ifname=</literal> 子选项指定用于桥接的 TAP 网络接口的名称。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-script">
            <para>
              <command>qemu-system-ARCH</command> 在连接到网桥之前会检查 <literal>script</literal> 和 <literal>downscript</literal> 值。如果它在 VM 主机服务器文件系统上找到了指定的脚本，将会在连接到网桥之前运行 <literal>script</literal>，并在退出网络环境之后运行 <literal>downscript</literal>。您可以使用这些脚本来设置和拆除桥接接口。默认会检查 <filename>/etc/qemu-ifup</filename> 和 <filename>/etc/qemu-ifdown</filename>。如果指定了 <literal>script=no</literal> 和 <literal>downscript=no</literal>，则会禁用脚本执行功能，您需要手动处理其执行。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-delif">
            <para>
              删除网桥 <literal>br0</literal> 中的 TAP 接口。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-linkdown">
            <para>
              将 TAP 设备的状态设置为 <literal>down</literal>。
            </para>
          </callout>
          <callout arearefs="co-qemu-net-bridge-deltap">
            <para>
              拆除 TAP 设备。
            </para>
          </callout>
        </calloutlist>
      </sect3>
      <sect3 xml:id="qemu-bridge-helper">
        <title>使用 qemu-bridge-helper 连接到网桥</title>
        <para>
          通过网桥将 VM Guest 连接到网络的另一种方式是使用 <filename>qemu-bridge-helper</filename> 助手程序。该程序可为您配置 TAP 接口并将其挂接到指定的网桥。默认的助手可执行文件为 <filename>/usr/lib/qemu-bridge-helper</filename>。该助手可执行文件的权限要求为 setuid root，也就是说，只允许虚拟化组 (<literal>kvm</literal>) 的成员执行。因此，<command>qemu-system-ARCH</command> 命令本身并不需要以 <systemitem class="username">root</systemitem> 特权运行。
        </para>
        <para>
          当您指定网桥时，会自动调用该助手：
        </para>
<screen>qemu-system-x86_64 [...] \
 -netdev bridge,id=hostnet0,vlan=0,br=br0 \
 -device virtio-net-pci,netdev=hostnet0</screen>
        <para>
          您可以使用 <option>helper=/path/to/your/helper</option> 选项指定自己的自定义助手脚本来处理 TAP 设备配置或解除配置：
        </para>
<screen>qemu-system-x86_64 [...] \
 -netdev bridge,id=hostnet0,vlan=0,br=br0,helper=/path/to/bridge-helper \
 -device virtio-net-pci,netdev=hostnet0</screen>
        <tip>
          <para>
            要定义对 <literal>qemu-bridge-helper</literal> 的访问特权，请检查 <filename>/etc/qemu/bridge.conf</filename> 文件。例如，以下指令
          </para>
<screen>allow br0</screen>
          <para>
            允许 <command>qemu-system-ARCH</command> 命令将其 VM Guest 连接到网桥 <literal>br0</literal>。
          </para>
        </tip>
      </sect3>
    </sect2>
  </sect1>
  <sect1 xml:id="cha-qemu-running-vnc">
    <title>使用 VNC 查看 VM Guest</title>

    <para>
      默认情况下，QEMU 使用 GTK（一个跨平台工具包库）窗口来显示 VM Guest 的图形输出。如果指定了 <literal>-vnc</literal> 选项，您可以让 QEMU 监听指定的 VNC 显示器，并将其图形输出重定向到 VNC 会话。
    </para>

    <tip>
      <para>
        通过 VNC 会话操作 QEMU 的虚拟机时，使用 <literal>-usbdevice tablet</literal> 选项会很有用。
      </para>
      <para>
        此外，如果您需要使用另一种键盘布局而不是默认的 <literal>en-us</literal>，请使用 <literal>-k</literal> 选项指定所需布局。
      </para>
    </tip>

    <para>
      <literal>-vnc</literal> 的第一个子选项必须是 <emphasis>display</emphasis> 值。<literal>-vnc</literal> 选项识别以下 display 指定值：
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>host:display</literal></term>
        <listitem>
          <para>
            只接受来自显示器编号 <literal>display</literal> 上的 <literal>host</literal> 的连接。随后运行 VNC 会话的 TCP 端口通常是值为 5900 + <literal>display</literal> 的数字。如果未指定 <literal>host</literal>，系统将接受来自任何主机的连接。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>unix:path</literal></term>
        <listitem>
          <para>
            VNC 服务器监听 Unix 域套接字上的连接。<literal>path</literal> 选项指定相关 Unix 套接字的位置。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>none</literal></term>
        <listitem>
          <para>
            将初始化 VNC 服务器功能，但不启动该服务器本身。您稍后可以使用 QEMU 监视器启动 VNC 服务器。有关更多信息，请参见<xref linkend="cha-qemu-monitor"/>。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      可以在 display 值的后面使用一个或多个选项标志（以逗号分隔）。有效选项为：
    </para>

    <variablelist>
      <varlistentry>
        <term><literal>reverse</literal></term>
        <listitem>
          <para>
            通过<emphasis>反向</emphasis>连接来连接监听方 VNC 客户端。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>websocket</literal></term>
        <listitem>
          <para>
            额外打开一个专用于 VNC Websocket 连接的 TCP 监听端口。根据定义，Websocket 端口为 5700+display。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>password</literal></term>
        <listitem>
          <para>
            要求对客户端连接使用基于口令的身份验证。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>tls</literal></term>
        <listitem>
          <para>
            要求客户端在与 VNC 服务器通讯时使用 TLS。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>x509=/path/to/certificate/dir</literal></term>
        <listitem>
          <para>
            指定了 TLS 时有效。要求使用 x509 身份凭证来协商 TLS 会话。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>x509verify=/path/to/certificate/dir</literal></term>
        <listitem>
          <para>
            指定了 TLS 时有效。要求使用 x509 身份凭证来协商 TLS 会话。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>sasl</literal></term>
        <listitem>
          <para>
            要求客户端使用 SASL 向 VNC 服务器进行身份验证。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>acl</literal></term>
        <listitem>
          <para>
            打开访问控制列表，以检查 x509 客户端证书和 SASL 参与方。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>lossy</literal></term>
        <listitem>
          <para>
            启用有损压缩方法（梯度、JPEG 等）。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>non-adaptive</literal></term>
        <listitem>
          <para>
            禁用自适应编码。默认会启用自适应编码。
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>share=[allow-exclusive|force-shared|ignore]</literal></term>
        <listitem>
          <para>
            设置显示共享策略。
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <para>
        有关显示选项的更多细节，请参见 <emphasis>qemu-doc</emphasis> 手册页。
      </para>
    </note>

    <para>
      VNC 示例用法：
    </para>

<screen><prompt>tux &gt; </prompt><command>sudo</command> qemu-system-x86_64 [...] -vnc :5
# (on the client:)
<prompt>wilber &gt; </prompt>vncviewer venus:5 &amp;</screen>

    <figure>
      <title>QEMU VNC 会话</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="qemu_sles_vnc.png" width="70%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="qemu_sles_vnc.png" width="70%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <sect2 xml:id="cha-qemu-running-vnc-secure">
      <title>保护 VNC 连接</title>
      <para>
        默认的 VNC 服务器设置不使用任何形式的身份验证。在前面的示例中，任何用户都可以从网络中的任何主机连接和查看 QEMU VNC 会话。
      </para>
      <para>
        系统提供了多个级别的安全性，可供您应用于 VNC 客户端/服务器连接。您可以使用口令、x509 证书、SASL 身份验证，甚至可在一条 QEMU 命令中结合多种身份验证方法来保护连接。
      </para>
      <para>
        
        有关在 VM 主机服务器和客户端上配置 x509 证书的详细信息，请参见<xref linkend="sec-libvirt-connect-remote-tls"/>和<xref linkend="sec-libvirt-connect-remote-tls-client"/>。
      </para>
      <para>
        Remmina VNC 查看器支持高级身份验证机制。对于此示例，我们假设服务器 x509 证书 <filename>ca-cert.pem</filename>、<filename>server-cert.pem</filename> 和 <filename>server-key.pem</filename> 位于主机上的 <filename>/etc/pki/qemu</filename> 目录中。可将客户端证书放在任何自定义目录中，Remmina 在连接启动时会要求提供这些证书的路径。
      </para>
      <example xml:id="ex-running-vnc-secure-pwd">
        <title>口令身份验证</title>
<screen>qemu-system-x86_64 [...] -vnc :5,password -monitor stdio</screen>
        <para>
          在 VNC 显示器编号 5（对应于端口 5905）上启动 VM Guest 图形输出。<literal>password</literal> 子选项会初始化一种基于口令的简单身份验证方法。默认未设置口令，您需要在 QEMU 监视器中使用 <command>change vnc password</command> 命令设置一个口令：
        </para>
<screen>QEMU 2.3.1 monitor - type 'help' for more information
(qemu) change vnc password
Password: ****
</screen>
        <para>
          此处需要指定 <literal>-monitor stdio</literal> 选项，因为如果不重定向 QEMU 监视器的输入/输出，您将无法管理该监视器。
        </para>
      </example>
      <figure>
        <title>Remmina 中的身份验证对话框</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="qemu_vnc_pwd.png" width="70%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="qemu_vnc_pwd.png" width="70%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <example xml:id="ex-running-vnc-secure-x509">
        <title>x509 证书身份验证</title>
        <para>
          QEMU VNC 服务器可对会话使用 TLS 加密，并使用 x509 证书进行身份验证。服务器将要求客户端提供证书，并根据 CA 证书验证提供的证书。如果您的公司可提供内部证书颁发机构，请使用此身份验证类型。
        </para>
<screen>qemu-system-x86_64 [...] -vnc :5,tls,x509verify=/etc/pki/qemu</screen>
      </example>
      <example xml:id="ex-running-vnc-secure-pwd-x509">
        <title>x509 证书和口令身份验证</title>
        <para>
          您可以将口令身份验证与 TLS 加密和 x509 证书身份验证结合使用，以便为客户端打造双层身份验证模型。运行以下命令后，请记得在 QEMU 监视器中设置口令：
        </para>
<screen>qemu-system-x86_64 [...] -vnc :5,password,tls,x509verify=/etc/pki/qemu \
-monitor stdio</screen>
      </example>
      <example xml:id="ex-running-vnc-secure-sasl">
        <title>SASL 身份验证</title>
        <para>
          简单身份验证和安全层 (SASL) 是互联网协议中的身份验证和数据安全性框架。它集成了多种身份验证机制，例如 PAM、Kerberos、LDAP 等等。SASL 会维护自己的用户数据库，因此 VM 主机服务器上无需存在连接用户帐户。
        </para>
        <para>
          出于安全原因，建议您将 SASL 身份验证与 TLS 加密和 x509 证书结合使用：
        </para>
<screen>qemu-system-x86_64 [...] -vnc :5,tls,x509,sasl -monitor stdio</screen>
      </example>
    </sect2>
  </sect1>
</chapter>
