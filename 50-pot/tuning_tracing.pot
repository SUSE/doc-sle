msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-08-18 22:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr ""

#. (itstool) path: chapter/title
#: xml/tuning_tracing.xml:9
msgid "Tracing Tools"
msgstr ""

#. (itstool) path: chapter/para
#: xml/tuning_tracing.xml:16
msgid "<phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> comes with several tools that help you obtain useful information about your system. You can use the information for various purposes, for example, to debug and find problems in your program, to discover places causing performance drops, or to trace a running process to find out what system resources it uses. <phrase os=\"sles;sled\">Most of the tools are part of the installation media. In some cases, they need to be installed from the SUSE Software Development Kit, which is a separate download.</phrase>"
msgstr ""

#. (itstool) path: note/title
#: xml/tuning_tracing.xml:26
msgid "Tracing and Impact on Performance"
msgstr ""

#. (itstool) path: note/para
#: xml/tuning_tracing.xml:27
msgid "While a running process is being monitored for system or library calls, the performance of the process is heavily reduced. You are advised to use tracing tools only for the time you need to collect the data."
msgstr ""

#. (itstool) path: sect1/title
#: xml/tuning_tracing.xml:34
msgid "Tracing System Calls with strace"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:36
msgid "The <command>strace</command> command traces system calls of a process and signals received by the process. <command>strace</command> can either run a new command and trace its system calls, or you can attach <command>strace</command> to an already running command. Each line of the command's output contains the system call name, followed by its arguments in parentheses and its return value."
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:45
msgid "To run a new command and start tracing its system calls, enter the command to be monitored as you normally do, and add <command>strace</command> at the beginning of the command line:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:51
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace ls\n"
"execve(\"/bin/ls\", [\"ls\"], [/* 52 vars */]) = 0\n"
"brk(0)                                  = 0x618000\n"
"mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \\\n"
"        = 0x7f9848667000\n"
"mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \\\n"
"        = 0x7f9848666000\n"
"access(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT \\\n"
"(No such file or directory)\n"
"open(\"/etc/ld.so.cache\", O_RDONLY)      = 3\n"
"fstat(3, {st_mode=S_IFREG|0644, st_size=200411, ...}) = 0\n"
"mmap(NULL, 200411, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f9848635000\n"
"close(3)                                = 0\n"
"open(\"/lib64/librt.so.1\", O_RDONLY)     = 3\n"
"[...]\n"
"mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \\\n"
"= 0x7fd780f79000\n"
"write(1, \"Desktop\\nDocuments\\nbin\\ninst-sys\\n\", 31Desktop\n"
"Documents\n"
"bin\n"
"inst-sys\n"
") = 31\n"
"close(1)                                = 0\n"
"munmap(0x7fd780f79000, 4096)            = 0\n"
"close(2)                                = 0\n"
"exit_group(0)                           = ?"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:78
msgid "To attach <command>strace</command> to an already running process, you need to specify the <option>-p</option> with the process ID (<systemitem>PID</systemitem>) of the process that you want to monitor:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:84
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace -p `pidof cron`\n"
" Process 1261 attached\n"
" restart_syscall(&lt;... resuming interrupted call ...&gt;) = 0\n"
"  stat(\"/etc/localtime\", {st_mode=S_IFREG|0644, st_size=2309, ...}) = 0\n"
"  select(5, [4], NULL, NULL, {0, 0})      = 0 (Timeout)\n"
"  socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 5\n"
"  connect(5, {sa_family=AF_LOCAL, sun_path=\"/var/run/nscd/socket\"}, 110) = 0\n"
"  sendto(5, \"\\2\\0\\0\\0\\0\\0\\0\\0\\5\\0\\0\\0root\\0\", 17, MSG_NOSIGNAL, NULL, 0) = 17\n"
"  poll([{fd=5, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=5, revents=POLLIN|POLLHUP}])\n"
"  read(5, \"\\2\\0\\0\\0\\1\\0\\0\\0\\5\\0\\0\\0\\2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\5\\0\\0\\0\\6\\0\\0\\0\"..., 36) = 36\n"
"  read(5, \"root\\0x\\0root\\0/root\\0/bin/bash\\0\", 28) = 28\n"
"  close(5)                                = 0\n"
"  rt_sigprocmask(SIG_BLOCK, [CHLD], [], 8) = 0\n"
"  rt_sigaction(SIGCHLD, NULL, {0x7f772b9ea890, [], SA_RESTORER|SA_RESTART, 0x7f772adf7880}, 8) = 0\n"
"  rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0\n"
"  nanosleep({60, 0}, 0x7fff87d8c580)      = 0\n"
"  stat(\"/etc/localtime\", {st_mode=S_IFREG|0644, st_size=2309, ...}) = 0\n"
"  select(5, [4], NULL, NULL, {0, 0})      = 0 (Timeout)\n"
"  socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 5\n"
"  connect(5, {sa_family=AF_LOCAL, sun_path=\"/var/run/nscd/socket\"}, 110) = 0\n"
"  sendto(5, \"\\2\\0\\0\\0\\0\\0\\0\\0\\5\\0\\0\\0root\\0\", 17, MSG_NOSIGNAL, NULL, 0) = 17\n"
"  poll([{fd=5, events=POLLIN|POLLERR|POLLHUP}], 1, 5000) = 1 ([{fd=5, revents=POLLIN|POLLHUP}])\n"
"  read(5, \"\\2\\0\\0\\0\\1\\0\\0\\0\\5\\0\\0\\0\\2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\5\\0\\0\\0\\6\\0\\0\\0\"..., 36) = 36\n"
"  read(5, \"root\\0x\\0root\\0/root\\0/bin/bash\\0\", 28) = 28\n"
"  close(5)\n"
"  [...]\n"
""
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:112
msgid "The <option>-e</option> option understands several sub-options and arguments. For example, to trace all attempts to open or write to a particular file, use the following:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:118
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace -e trace=open,write ls ~\n"
"open(\"/etc/ld.so.cache\", O_RDONLY)       = 3\n"
"open(\"/lib64/librt.so.1\", O_RDONLY)      = 3\n"
"open(\"/lib64/libselinux.so.1\", O_RDONLY) = 3\n"
"open(\"/lib64/libacl.so.1\", O_RDONLY)     = 3\n"
"open(\"/lib64/libc.so.6\", O_RDONLY)       = 3\n"
"open(\"/lib64/libpthread.so.0\", O_RDONLY) = 3\n"
"[...]\n"
"open(\"/usr/lib/locale/cs_CZ.utf8/LC_CTYPE\", O_RDONLY) = 3\n"
"open(\".\", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3\n"
"write(1, \"addressbook.db.bak\\nbin\\ncxoffice\\n\"..., 311) = 311\n"
""
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:131
msgid "To trace only network related system calls, use <option>-e trace=network</option>:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:136
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace -e trace=network -p 26520\n"
"Process 26520 attached - interrupt to quit\n"
"socket(PF_NETLINK, SOCK_RAW, 0)         = 50\n"
"bind(50, {sa_family=AF_NETLINK, pid=0, groups=00000000}, 12) = 0\n"
"getsockname(50, {sa_family=AF_NETLINK, pid=26520, groups=00000000}, \\\n"
"[12]) = 0\n"
"sendto(50, \"\\24\\0\\0\\0\\26\\0\\1\\3~p\\315K\\0\\0\\0\\0\\0\\0\\0\\0\", 20, 0,\n"
"{sa_family=AF_NETLINK, pid=0, groups=00000000}, 12) = 20\n"
"[...]"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:146
msgid "The <option>-c</option> calculates the time the kernel spent on each system call:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:151
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace -c find /etc -name xorg.conf\n"
"/etc/X11/xorg.conf\n"
"% time     seconds  usecs/call     calls    errors syscall\n"
"------ ----------- ----------- --------- --------- ----------------\n"
" 32.38    0.000181         181         1           execve\n"
" 22.00    0.000123           0       576           getdents64\n"
" 19.50    0.000109           0       917        31 open\n"
" 19.14    0.000107           0       888           close\n"
"  4.11    0.000023           2        10           mprotect\n"
"  0.00    0.000000           0         1           write\n"
"[...]\n"
"  0.00    0.000000           0         1           getrlimit\n"
"  0.00    0.000000           0         1           arch_prctl\n"
"  0.00    0.000000           0         3         1 futex\n"
"  0.00    0.000000           0         1           set_tid_address\n"
"  0.00    0.000000           0         4           fadvise64\n"
"  0.00    0.000000           0         1           set_robust_list\n"
"------ ----------- ----------- --------- --------- ----------------\n"
"100.00    0.000559                  3633        33 total"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:171
msgid "To trace all child processes of a process, use <option>-f</option>:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:175
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace -f rcapache2 status\n"
"execve(\"/usr/sbin/rcapache2\", [\"rcapache2\", \"status\"], [/* 81 vars */]) = 0\n"
"brk(0)                                  = 0x69e000\n"
"mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \\\n"
"= 0x7f3bb553b000\n"
"mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) \\\n"
"= 0x7f3bb553a000\n"
"[...]\n"
"[pid  4823] rt_sigprocmask(SIG_SETMASK, [],  &lt;unfinished ...&gt;\n"
"[pid  4822] close(4 &lt;unfinished ...&gt;\n"
"[pid  4823] &lt;... rt_sigprocmask resumed&gt; NULL, 8) = 0\n"
"[pid  4822] &lt;... close resumed&gt; )       = 0\n"
"[...]\n"
"[pid  4825] mprotect(0x7fc42cbbd000, 16384, PROT_READ) = 0\n"
"[pid  4825] mprotect(0x60a000, 4096, PROT_READ) = 0\n"
"[pid  4825] mprotect(0x7fc42cde4000, 4096, PROT_READ) = 0\n"
"[pid  4825] munmap(0x7fc42cda2000, 261953) = 0\n"
"[...]\n"
"[pid  4830] munmap(0x7fb1fff10000, 261953) = 0\n"
"[pid  4830] rt_sigprocmask(SIG_BLOCK, NULL, [], 8) = 0\n"
"[pid  4830] open(\"/dev/tty\", O_RDWR|O_NONBLOCK) = 3\n"
"[pid  4830] close(3)\n"
"[...]\n"
"read(255, \"\\n\\n# Inform the caller not only v\"..., 8192) = 73\n"
"rt_sigprocmask(SIG_BLOCK, NULL, [], 8)  = 0\n"
"rt_sigprocmask(SIG_BLOCK, NULL, [], 8)  = 0\n"
"exit_group(0)"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:203
msgid "If you need to analyze the output of <command>strace</command> and the output messages are too long to be inspected directly in the console window, use <option>-o</option>. In that case, unnecessary messages, such as information about attaching and detaching processes, are suppressed. You can also suppress these messages (normally printed on the standard output) with <option>-q</option>. To add time stamps at the beginning of each line with a system call, use <option>-t</option>:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:213
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>strace -t -o strace_sleep.txt sleep 1; more strace_sleep.txt\n"
"08:44:06 execve(\"/bin/sleep\", [\"sleep\", \"1\"], [/* 81 vars */]) = 0\n"
"08:44:06 brk(0)                         = 0x606000\n"
"08:44:06 mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, \\\n"
"-1, 0) = 0x7f8e78cc5000\n"
"[...]\n"
"08:44:06 close(3)                       = 0\n"
"08:44:06 nanosleep({1, 0}, NULL)        = 0\n"
"08:44:07 close(1)                       = 0\n"
"08:44:07 close(2)                       = 0\n"
"08:44:07 exit_group(0)                  = ?"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:225
msgid "The behavior and output format of strace can be largely controlled. For more information, see the relevant manual page (man 1 strace)."
msgstr ""

#. (itstool) path: sect1/title
#: xml/tuning_tracing.xml:231
msgid "Tracing Library Calls with ltrace"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:233
msgid "<command>ltrace</command> traces dynamic library calls of a process. It is used in a similar way to <command>strace</command>, and most of their parameters have a very similar or identical meaning. By default, <command>ltrace</command> uses <filename>/etc/ltrace.conf</filename> or <filename>~/.ltrace.conf</filename> configuration files. You can, however, specify an alternative one with the <option>-F <replaceable>CONFIG_FILE</replaceable></option> option."
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:243
msgid "In addition to library calls, <command>ltrace</command> with the <option>-S</option> option can trace system calls as well:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:248
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>ltrace -S -o ltrace_find.txt find /etc -name \\\n"
"xorg.conf; more ltrace_find.txt\n"
"SYS_brk(NULL)                                              = 0x00628000\n"
"SYS_mmap(0, 4096, 3, 34, 0xffffffff)                       = 0x7f1327ea1000\n"
"SYS_mmap(0, 4096, 3, 34, 0xffffffff)                       = 0x7f1327ea0000\n"
"[...]\n"
"fnmatch(\"xorg.conf\", \"xorg.conf\", 0)                       = 0\n"
"free(0x0062db80)                                           = &lt;void&gt;\n"
"__errno_location()                                         = 0x7f1327e5d698\n"
"__ctype_get_mb_cur_max(0x7fff25227af0, 8192, 0x62e020, -1, 0) = 6\n"
"__ctype_get_mb_cur_max(0x7fff25227af0, 18, 0x7f1327e5d6f0, 0x7fff25227af0,\n"
"0x62e031) = 6\n"
"__fprintf_chk(0x7f1327821780, 1, 0x420cf7, 0x7fff25227af0, 0x62e031\n"
"&lt;unfinished ...&gt;\n"
"SYS_fstat(1, 0x7fff25227230)                               = 0\n"
"SYS_mmap(0, 4096, 3, 34, 0xffffffff)                       = 0x7f1327e72000\n"
"SYS_write(1, \"/etc/X11/xorg.conf\\n\", 19)                   = 19\n"
"[...]"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:267
msgid "You can change the type of traced events with the <option>-e</option> option. The following example prints library calls related to <systemitem>fnmatch</systemitem> and <systemitem>strlen</systemitem> functions:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:274
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>ltrace -e fnmatch,strlen find /etc -name xorg.conf\n"
"[...]\n"
"fnmatch(\"xorg.conf\", \"xorg.conf\", 0)             = 0\n"
"strlen(\"Xresources\")                             = 10\n"
"strlen(\"Xresources\")                             = 10\n"
"strlen(\"Xresources\")                             = 10\n"
"fnmatch(\"xorg.conf\", \"Xresources\", 0)            = 1\n"
"strlen(\"xorg.conf.install\")                      = 17\n"
"[...]"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:284
msgid "To display only the symbols included in a specific library, use <option>-l <replaceable>/path/to/library</replaceable></option>:"
msgstr ""

#. (itstool) path: sect1/screen
#: xml/tuning_tracing.xml:289
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>ltrace -l /lib64/librt.so.1 sleep 1\n"
"clock_gettime(1, 0x7fff4b5c34d0, 0, 0, 0)                  = 0\n"
"clock_gettime(1, 0x7fff4b5c34c0, 0xffffffffff600180, -1, 0) = 0\n"
"+++ exited (status 0) +++"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:294
msgid "You can make the output more readable by indenting each nested call by the specified number of space with the <option>-n <replaceable>NUM_OF_SPACES</replaceable></option>."
msgstr ""

#. (itstool) path: sect1/title
#: xml/tuning_tracing.xml:301
msgid "Debugging and Profiling with Valgrind"
msgstr ""

#. (itstool) path: sect1/para
#: xml/tuning_tracing.xml:303
msgid "Valgrind is a set of tools to debug and profile your programs so that they can run both faster and with less errors. Valgrind can detect problems related to memory management and threading, or can also serve as a framework for building new debugging tools. It is well known that this tool can incur high overhead, causing, for example, higher runtimes or changing the normal program behavior under concurrent workloads based on timing."
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:313
msgid "Installation"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:314
msgid "Valgrind is not shipped with standard <phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> distribution. To install it on your system, you need to obtain SUSE Software Development Kit, and either install it and run"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:319
msgid "<command>zypper</command> <option>install <replaceable>VALGRIND</replaceable></option>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:323
msgid "or browse through the SUSE Software Development Kit directory tree, locate the Valgrind package and install it with"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:327
msgid "<command>rpm</command> <option>-i</option> valgrind-<replaceable>VERSION_ARCHITECTURE</replaceable>.rpm"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:331
msgid "The SDK is a module for SUSE Linux Enterprise and is available via an online channel from the SUSE Customer Center. Alternatively download it from <link xlink:href=\"http://download.suse.com/\"/>. (Search for <literal>SUSE Linux Enterprise Software Development Kit</literal>). Refer to <xref linkend=\"cha.add-ons\"/> for details."
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:341
msgid "Supported Architectures"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:342
msgid "<phrase role=\"productname\"><phrase os=\"osuse\">openSUSE Leap</phrase><phrase os=\"sles\">SUSE Linux Enterprise Server</phrase><phrase os=\"sled\">SUSE Linux Enterprise Desktop</phrase><phrase os=\"slerte\">SUSE Linux Enterprise Real Time Extension</phrase></phrase> supports Valgrind on the following architectures:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:347
msgid "AMD64/Intel 64"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:352
msgid "POWER"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:357
msgid "z Systems"
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:365
msgid "General Information"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:366
msgid "The main advantage of Valgrind is that it works with existing compiled executables. You do not need to recompile or modify your programs to use it. Run Valgrind like this:"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:371
msgid "<command>valgrind</command> <replaceable>VALGRIND_OPTIONS</replaceable> your-prog <replaceable>YOUR-PROGRAM-OPTIONS</replaceable>"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:375
msgid "Valgrind consists of several tools, and each provides specific functionality. Information in this section is general and valid regardless of the used tool. The most important configuration option is <option>--tool</option>. This option tells Valgrind which tool to run. If you omit this option, <systemitem>memcheck</systemitem> is selected by default. For example, to run <command>find ~</command> <option>-name</option> .bashrc with Valgrind's <systemitem>memcheck</systemitem> tools, enter the following in the command line:"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:386
msgid "<command>valgrind</command> <option>--tool</option>=memcheck find ~ -name .bashrc"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:390
msgid "A list of standard Valgrind tools with a brief description follows:"
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:395
msgid "<systemitem>memcheck</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:398
msgid "Detects memory errors. It helps you tune your programs to behave correctly."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:405
msgid "<systemitem>cachegrind</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:408
msgid "Profiles cache prediction. It helps you tune your programs to run faster."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:415
msgid "<systemitem>callgrind</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:418
msgid "Works in a similar way to <systemitem>cachegrind</systemitem> but also gathers additional cache-profiling information."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:425
msgid "<systemitem>exp-drd</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:428
msgid "Detects thread errors. It helps you tune your multi-threaded programs to behave correctly."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:435
msgid "<systemitem>helgrind</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:438
msgid "Another thread error detector. Similar to <systemitem>exp-drd</systemitem> but uses different techniques for problem analysis."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:446
msgid "<systemitem>massif</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:449
msgid "A heap profiler. Heap is an area of memory used for dynamic memory allocation. This tool helps you tune your program to use less memory."
msgstr ""

#. (itstool) path: varlistentry/term
#: xml/tuning_tracing.xml:456
msgid "<systemitem>lackey</systemitem>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:459
msgid "An example tool showing instrumentation basics."
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:468
msgid "Default Options"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:469
msgid "Valgrind can read options at start-up. There are three places which Valgrind checks:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:475
msgid "The file <filename>.valgrindrc</filename> in the home directory of the user who runs Valgrind."
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:481
msgid "The environment variable <literal>$VALGRIND_OPTS</literal>"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:486
msgid "The file <filename>.valgrindrc</filename> in the current directory where Valgrind is run from."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:492
msgid "These resources are parsed exactly in this order, while later given options take precedence over earlier processed options. Options specific to a particular Valgrind tool must be prefixed with the tool name and a colon. For example, if you want <systemitem>cachegrind</systemitem> to always write profile data to the <filename>/tmp/cachegrind_<replaceable>PID</replaceable>.log</filename>, add the following line to the <filename>.valgrindrc</filename> file in your home directory:"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:502
msgid "<literal>--cachegrind:cachegrind-out-file=/tmp/cachegrind_%p.log</literal>"
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:508
msgid "How Valgrind Works"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:509
msgid "Valgrind takes control of your executable before it starts. It reads debugging information from the executable and related shared libraries. The executable's code is redirected to the selected Valgrind tool, and the tool adds its own code to handle its debugging. Then the code is handed back to the Valgrind core and the execution continues."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:516
msgid "For example, <systemitem>memcheck</systemitem> adds its code, which checks every memory access. As a consequence, the program runs much slower than in the native execution environment."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:521
msgid "Valgrind simulates every instruction of your program. Therefore, it not only checks the code of your program, but also all related libraries (including the C library), libraries used for graphical environment, and so on. If you try to detect errors with Valgrind, it also detects errors in associated libraries (like C, X11, or Gtk libraries). Because you probably do not need these errors, Valgrind can selectively, suppress these error messages to suppression files. The <option>--gen-suppressions=yes</option> tells Valgrind to report these suppressions which you can copy to a file."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:532
msgid "You should supply a real executable (machine code) as a Valgrind argument. If your application is run, for example, from a shell or Perl script, you will by mistake get error reports related to <command>/bin/sh</command> (or <command>/usr/bin/perl</command>). In such cases, you can use <option>--trace-children=yes</option> to work around this issue. However, using the executable itself will avoid any confusion over this issue."
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:545
msgid "Messages"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:546
msgid "During its runtime, Valgrind reports messages with detailed errors and important events. The following example explains the messages:"
msgstr ""

#. (itstool) path: sect2/screen
#: xml/tuning_tracing.xml:550
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>valgrind --tool=memcheck find ~ -name .bashrc\n"
"[...]\n"
"==6558== Conditional jump or move depends on uninitialised value(s)\n"
"==6558==    at 0x400AE79: _dl_relocate_object (in /lib64/ld-2.11.1.so)\n"
"==6558==    by 0x4003868: dl_main (in /lib64/ld-2.11.1.so)\n"
"[...]\n"
"==6558== Conditional jump or move depends on uninitialised value(s)\n"
"==6558==    at 0x400AE82: _dl_relocate_object (in /lib64/ld-2.11.1.so)\n"
"==6558==    by 0x4003868: dl_main (in /lib64/ld-2.11.1.so)\n"
"[...]\n"
"==6558== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)\n"
"==6558== malloc/free: in use at exit: 2,228 bytes in 8 blocks.\n"
"==6558== malloc/free: 235 allocs, 227 frees, 489,675 bytes allocated.\n"
"==6558== For counts of detected errors, rerun with: -v\n"
"==6558== searching for pointers to 8 not-freed blocks.\n"
"==6558== checked 122,584 bytes.\n"
"==6558==\n"
"==6558== LEAK SUMMARY:\n"
"==6558==    definitely lost: 0 bytes in 0 blocks.\n"
"==6558==      possibly lost: 0 bytes in 0 blocks.\n"
"==6558==    still reachable: 2,228 bytes in 8 blocks.\n"
"==6558==         suppressed: 0 bytes in 0 blocks.\n"
"==6558== Rerun with --leak-check=full to see details of leaked memory."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:573
msgid "The <literal>==6558==</literal> introduces Valgrind's messages and contains the process ID number (PID). You can easily distinguish Valgrind's messages from the output of the program itself, and decide which messages belong to a particular process."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:579
msgid "To make Valgrind's messages more detailed, use <option>-v</option> or even <option>-v -v</option>."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:583
msgid "You can make Valgrind send its messages to three different places:"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:588
msgid "By default, Valgrind sends its messages to the file descriptor 2, which is the standard error output. You can tell Valgrind to send its messages to any other file descriptor with the <option>--log-fd=<replaceable>FILE_DESCRIPTOR_NUMBER</replaceable></option> option."
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:597
msgid "The second and probably more useful way is to send Valgrind's messages to a file with <option>--log-file=<replaceable>FILENAME</replaceable></option>. This option accepts several variables, for example, <literal>%p</literal> gets replaced with the PID of the currently profiled process. This way you can send messages to different files based on their PID. <literal>%q{env_var}</literal> is replaced with the value of the related <literal>env_var</literal> environment variable."
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:607
msgid "The following example checks for possible memory errors during the Apache Web server restart, while following children processes and writing detailed Valgrind's messages to separate files distinguished by the current process PID:"
msgstr ""

#. (itstool) path: listitem/screen
#: xml/tuning_tracing.xml:613
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>valgrind -v --tool=memcheck --trace-children=yes \\\n"
"--log-file=valgrind_pid_%p.log rcapache2 restart"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:615
msgid "This process created 52 log files in the testing system, and took 75 seconds instead of the usual 7 seconds needed to run <command>sudo systemctl restart apache2</command> without Valgrind, which is approximately 10 times more."
msgstr ""

#. (itstool) path: listitem/screen
#: xml/tuning_tracing.xml:621
#, no-wrap
msgid ""
"<prompt>tux &gt; </prompt>ls -1 valgrind_pid_*log\n"
"valgrind_pid_11780.log\n"
"valgrind_pid_11782.log\n"
"valgrind_pid_11783.log\n"
"[...]\n"
"valgrind_pid_11860.log\n"
"valgrind_pid_11862.log\n"
"valgrind_pid_11863.log"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:631
msgid "You may also prefer to send the Valgrind's messages over the network. You need to specify the <literal>aa.bb.cc.dd</literal> IP address and <literal>port_num</literal> port number of the network socket with the <option>--log-socket=<replaceable>AA.BB.CC.DD:PORT_NUM</replaceable></option> option. If you omit the port number, 1500 will be used."
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:638
msgid "It is useless to send Valgrind's messages to a network socket if no application is capable of receiving them on the remote machine. That is why <command>valgrind-listener</command>, a simple listener, is shipped together with Valgrind. It accepts connections on the specified port and copies everything it receives to the standard output."
msgstr ""

#. (itstool) path: sect2/title
#: xml/tuning_tracing.xml:651
msgid "Error Messages"
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:652
msgid "Valgrind remembers all error messages, and if it detects a new error, the error is compared against old error messages. This way Valgrind checks for duplicate error messages. In case of a duplicate error, it is recorded but no message is shown. This mechanism prevents you from being overwhelmed by millions of duplicate errors."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:659
msgid "The <option>-v</option> option will add a summary of all reports (sorted by their total count) to the end of the Valgrind's execution output. Moreover, Valgrind stops collecting errors if it detects either 1000 different errors, or 10 000 000 errors in total. If you want to suppress this limit and wish to see all error messages, use <option>--error-limit=no</option>."
msgstr ""

#. (itstool) path: sect2/para
#: xml/tuning_tracing.xml:667
msgid "Some errors usually cause other ones. Therefore, fix errors in the same order as they appear and re-check the program continuously."
msgstr ""

#. (itstool) path: sect1/title
#: xml/tuning_tracing.xml:674
msgid "For More Information"
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:678
msgid "For a complete list of options related to the described tracing tools, see the corresponding man page (<command>man 1 strace</command>, <command>man 1 ltrace</command>, and <command>man 1 valgrind</command>)."
msgstr ""

#. (itstool) path: listitem/para
#: xml/tuning_tracing.xml:686
msgid "To describe advanced usage of Valgrind is beyond the scope of this document. It is very well documented, see <link xlink:href=\"http://valgrind.org/docs/manual/manual.html\">Valgrind User Manual</link>. These pages are indispensable if you need more advanced information on Valgrind or the usage and purpose of its standard tools."
msgstr ""

