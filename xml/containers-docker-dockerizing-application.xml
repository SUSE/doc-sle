<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="cha-docker-dockerizing-application" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Creating Application Images</title>
 <para>
  &deng; is designed to allow running multiple separate application
  environments in parallel, with lower resource use than when using full
  virtual machines. Several types of applications are suitable for running
  inside &docker; containers: daemons, Web servers, and applications that expose
  IP ports for communications. You can use &deng; to automate the building and
  deployment processes by performing the build process inside a &docker;
  container, building an image, and then deploying containers based on the
  image.
 </para>
 <para>
  Running an application inside a &docker; container has the following
  advantages.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    The image with the application is portable across servers running different
    Linux host distributions and versions.
   </para>
  </listitem>
  <listitem>
   <para>
    You can share the image of the application using a repository.
   </para>
  </listitem>
  <listitem>
   <para>
    You can use different versions of software in the container and on the host
    system, without creating dependency issues.
   </para>
  </listitem>
  <listitem>
   <para>
    You can run several instances of the same application that are completely
    independent from each other.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  Using &deng; to build applications has the following advantages.
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You can prepare an image of the complete build environment.
   </para>
  </listitem>
  <listitem>
   <para>
    Developers can test their code in the same environment as used in
    production.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  The following section provides examples and recommendations on creating
  &docker; images for applications. Before proceeding, make sure that you have
  activated your &productname; base &docker; image as described in
  <xref linkend="sec-download-prebuild-images"/>.
 </para>
 <sect1 xml:id="sec-application-with-specific-dependencies">
  <title>Running an Application with Specific Package Versions</title>

  <para>
   If your application needs a version of a package different from the package
   installed on the system, you can create a &docker; image that includes the
   package version the application requires.
   The following example <filename>Dockerfile</filename> allows building an image
   based on an up-to-date version of &productname; with an older
   version of the <literal>example</literal> package:
  </para>

<screen>FROM registry.suse.com/suse/sle15
MAINTAINER Tux

RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0
COPY application.rpm /tmp/

RUN zypper --non-interactive in /tmp/application.rpm

ENTRYPOINT ["/etc/bin/application"]

CMD ["-i"]</screen>

  <para>
   Build the image by running the following command in the directory that the
   <filename>Dockerfile</filename> resides in:
  </para>

  <screen>&prompt.user;docker build --tag tux_application:latest .</screen>

  <para>
   The <filename>Dockerfile</filename> example shown above performs the
   following operations during the <command>docker build</command>:
  </para>

  <orderedlist>
   <listitem>
    <para>
     Updates the &productname; repositories.
    </para>
   </listitem>
   <listitem>
    <para>
     Installs the desired version of the <literal>example</literal> package.
    </para>
   </listitem>
   <listitem>
    <para>
     Copies the application package to the image. The binary RPM must be
     placed in the build context.
    </para>
   </listitem>
   <listitem>
    <para>
     Unpacks the application.
    </para>
   </listitem>
   <listitem>
    <para>
     The last two steps run the application after a container is started.
    </para>
   </listitem>
  </orderedlist>


  <para>
   After a successful build of the <literal>tux_application</literal> image,
   you can start a container based on the new image using the following
   command:
  </para>

  <screen>&prompt.user;docker run -it --name application_instance tux_application:latest</screen>

  <para>
   Keep in mind that after closing the application, the &docker; container
   exits as well.
  </para>
 </sect1>
 <sect1 xml:id="sec-applications-with-configuration">
  <title>Running Applications with a Specific Configuration</title>

  <para>
   To run an instance using a different configuration, create a derived image
   and include additional configuration with it.
   For example, if your application is called <emphasis>example</emphasis> and
   can be configured using the file
   <filename>/etc/example/configuration_example</filename>, you could use:
  </para>

<screen>FROM registry.suse.com/suse/sle15 <co xml:id="co-dockerfile-specificconf-from"/>
RUN zypper ref &amp;&amp; zypper --non-interactive in example <co xml:id="co-dockerfile-specificconf-refreshinstall"/>

ENV BACKUP=/backup <co xml:id="co-dockerfile-specificconf-env"/>

RUN mkdir -p $BACKUP <co xml:id="co-dockerfile-specificconf-mkdir"/>
COPY configuration_example /etc/example/ <co xml:id="co-dockerfile-specificconf-configuration"/>

ENTRYPOINT ["/etc/bin/example"] <co xml:id="co-dockerfile-specificconf-entrypoint"/></screen>

  <para>
   The above example <filename>Dockerfile</filename> performs the following
   operations:
  </para>

  <calloutlist>
   <callout arearefs="co-dockerfile-specificconf-from">
    <para>
     Base image, taken from <xref linkend="sec-download-prebuild-images"/>.
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-refreshinstall">
    <para>
     Refreshing of repositories and installation of the
     <emphasis>example</emphasis>.
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-env">
    <para>
     Sets a <literal>BACKUP</literal> environment variable (the variable
     persists to containers started from the image). You can always overwrite
     the value of the variable while running the container by specifying a new
     value.
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-mkdir">
    <para>
     Creates the directory <literal>/backup</literal>.
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-configuration">
    <para>
     Copies the <filename>configuration_example</filename> to the image.
    </para>
   </callout>
   <callout arearefs="co-dockerfile-specificconf-entrypoint">
    <para>
     Runs the <emphasis>example</emphasis> application.
    </para>
   </callout>
  </calloutlist>

  <para>
   You can now build the image. After a successful build, you can run a
   container based on the created image.
  </para>
 </sect1>
 <sect1 xml:id="sec-run-application-with-volumes">
  <title>Sharing Data Between an Application and the Host System</title>

  <para>
   &deng; allows sharing data between host and a container by using
   <emphasis>volumes</emphasis>.
   You can specify a mount point directly in the <filename>Dockerfile</filename>.
   However, you cannot specify a directory on the host system in the
   <filename>Dockerfile</filename>, as the directory may not be accessible at
   build time. Find the mounted directory under
   <literal>/var/lib/docker/volumes/</literal> on the host system.
  </para>

  <note>
   <title>Discarding Changes to the Directory to Be Shared</title>
   <para>
    After you specify a mount point by using the <literal>VOLUME</literal>
    instruction, all changes performed to the directory with the
    <literal>RUN</literal> instruction are discarded. After the mount point is
    specified, the volume becomes a part of a temporary container, which is
    removed after a successful build. This means that for certain actions to
    take effect, they must be performed before specifying a mount point. For
    example, if you need to change permissions, do this before you specify the
    directory as a mount point in the <filename>Dockerfile</filename>.
   </para>
  </note>

  <para>
   Specify a particular mount point on the host system when running a container
   by using the <literal>-v</literal> option:
  </para>

  <screen>&prompt.user;docker run -it --name testing -v /home/tux/data:/data sles12sp4:latest /bin/bash</screen>

  <note>
   <para>
    The <literal>-v</literal> option overwrites the
    <literal>VOLUME</literal> instruction if you specify the same mount point
    in the container.
   </para>
  </note>

  <para>
   The following example image contains a Web server that reads Web content
   from the host's file system. The <filename>Dockerfile</filename> could look
   as follows:
  </para>

<screen>FROM registry.suse.com/suse/sles12sp4
RUN zypper ref &amp;&amp; zypper --non-interactive in apache2
COPY apache2 /etc/sysconfig/
RUN chown -R admin /data
EXPOSE 80
VOLUME /data
ENTRYPOINT ["apache2ctl"]</screen>

  <para>
   The example above installs the Apache Web server to the image and copies the
   entire configuration to the image. The <literal>data</literal> directory is
   owned by the <emphasis>admin</emphasis> user and is used as a mount point to
   store Web pages.
  </para>
 </sect1>
 <sect1 xml:id="sec-docker-daemons">
  <title>Applications Running in the Background</title>

  <para>
   If your application needs to run in the background as a daemon or as an
   application exposing ports for communication, you can run the &docker;
   container in the background.
  </para>

  <para>
   An example <filename>Dockerfile</filename> for an application exposing a
   port looks as follows:
  </para>

  <example xml:id="ex-docker-dockerfile-apache2">
   <title>Building an Apache2 Web Server &docker; Container (<filename>Dockerfile</filename>)</title>
<screen>FROM registry.suse.com/suse/sle15 <co xml:id="co-dockerfile-apache2-from"/>
MAINTAINER &exampleuser_plain; <co xml:id="co-dockerfile-apache2-maintainer"/>

ADD etc/ /etc/zypp/ <co xml:id="co-dockerfile-apache2-repos-services"/>
RUN zypper refs &amp;&amp; zypper refresh <co xml:id="co-dockerfile-apache2-refresh"/>
RUN zypper --non-interactive in apache2 <co xml:id="co-dockerfile-apache2-install"/>

RUN echo "The Web server is running" > /srv/www/htdocs/test.html <co xml:id="co-dockerfile-apache2-echo"/>
# COPY data/* /srv/www/htdocs/ <co xml:id="co-dockerfile-apache2-copy"/>

EXPOSE 80 <co xml:id="co-dockerfile-apache2-expose"/>

ENTRYPOINT ["/usr/sbin/httpd"]
CMD ["-D", "FOREGROUND"]</screen>
   <calloutlist>
    <callout arearefs="co-dockerfile-apache2-from">
     <para>
      Base image, taken from <xref linkend="sec-download-prebuild-images"/>.
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-maintainer">
     <para>
      Maintainer of the image (optional).
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-repos-services">
     <para>
      The repositories and service files. These are copied to
      <filename>/etc/zypp/repos.d</filename> and
      <filename>/etc/zypp/services.d</filename> to make them also available on
      the host in the &docker; container.
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-refresh">
     <para>
      Command to refresh repositories and services.
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-install">
     <para>
      Command to install Apache2.
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-echo">
     <para>
      Test line for debugging purposes. This line can be removed if everything
      works as expected.
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-copy">
     <para>
      A <literal>COPY</literal> instruction to copy data from the host system
      to the directory in the container used by the server. The
      leading hash character (<literal>#</literal>) marks this line as a
      comment: it is not executed.
     </para>
    </callout>
    <callout arearefs="co-dockerfile-apache2-expose">
     <para>
      The exposed port for the Apache Web server.
     </para>
    </callout>
   </calloutlist>
  </example>

  <note>
   <title>Make Sure the Ports Used by the &docker; Image Are Free</title>
   <para>
    Make sure there is no other server software running on the host, to
    be able to use port 80.
    If other servers are running, stop them or have them use different ports.
   </para>
  </note>

  <para>
   To use the container, proceed as follows:
  </para>

  <procedure xml:id="pro-docker-apache2">
   <title>Testing the Apache2 Web Server</title>
   <step>
    <para>
     Prepare the host system for the build process.
    </para>
    <substeps>
     <step>
      <para>
       Make sure the host system is subscribed to the
       <guimenu>Server Applications Module</guimenu> of &productname;.
       To view installed modules or install additional modules,
       open &yast; and select <guimenu>Add System Extensions or Modules</guimenu>.
      </para>
     </step>
     <step>
      <para>
       Make sure the &sle; images from the &suse; Registry are installed
       as described in <xref linkend="sec-download-prebuild-images"/>.
      </para>
     </step>
     <step>
      <para>
       Save the <filename>Dockerfile</filename> from
       <xref linkend="ex-docker-dockerfile-apache2"/> into the
       <filename class="directory">docker</filename> directory.
      </para>
     </step>
     <step>
      <para>
       Within the &docker; container, you need access to software repositories
       and services that are registered on the host. To make them available,
       copy repositories and service files from the host to the
       <filename class="directory">docker/etc</filename> directory:
      </para>
<screen>&prompt.user;cd docker
&prompt.user;mkdir etc
&prompt.sudo;cp -a /etc/zypp/{repos.d,services.d} etc/</screen>
      <para>
       Instead of copying all repository and service files, you can also copy
       only the subset that is required by the &docker; container.
      </para>
     </step>
     <step>
      <para>
       Add Web site data (such as HTML files) into the
       <filename>docker/data</filename>
       directory. The contents of this directory are copied to the &docker;
       image and are thus published by the Web server.
      </para>
     </step>
    </substeps>
   </step>
   <step xml:id="st-docker-apache2-build">
    <para>
     Build the container. Set a tag for your image with the <option>-t</option>
     option (here <literal>&exampleuser_plain;/apache2</literal>, but
     you can use any name you want):
    </para>
    <screen>&prompt.sudo;docker build -t &exampleuser_plain;/apache2 .</screen>
    <para>
     &deng; now executes the instructions provided in
     <filename>Dockerfile</filename>: It takes the base image, copies content,
     refreshes repositories and installs the Apache2, etc.
    </para>
   </step>
   <step>
    <para>
     Create a &docker; container instance from the &docker; image created in
     the previous step:
    </para>
    <screen>&prompt.user;docker run --detach --interactive --tty &exampleuser_plain;/apache2</screen>
    <para>
     &deng; returns the container ID, for example:
    </para>
    <screen>7bd674eb196d330d50f8a3cfc2bc61a243a4a535390767250b11a7886134ab93</screen>
   </step>
   <step>
    <para>
     Point a browser to <uri>http://localhost:80/test.html</uri>.
     You should see the message <literal>The Web server is running</literal>.
    </para>
   </step>
   <step>
    <para>
     To see an overview of running containers, use:
    </para>
<screen>&prompt.user;docker ps --latest
CONTAINER ID        IMAGE               COMMAND                  [...]
<emphasis role="bold">7bd674eb196d</emphasis>        tux/apache2         "/usr/sbin/httpd -..."   [...]</screen>
    <para>
     To stop and delete the &docker; container, use the following command:
    </para>
    <screen>&prompt.user;docker rm --force 7bd674eb196d</screen>
   </step>
  </procedure>
  <para>
   You can use the resulting container to serve your data with the Apache2
   Web server by following these steps:
  </para>

  <procedure>
   <title>Creating a &docker; Container with your Own Data</title>
   <step>
    <para>
     In the <filename>Dockerfile</filename>:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Comment the line starting with <literal>RUN echo</literal> by adding a
       <literal>#</literal> character at its beginning
       (<xref linkend="co-dockerfile-apache2-echo"/> in
       <xref linkend="ex-docker-dockerfile-apache2"/>).
      </para>
     </listitem>
     <listitem>
      <para>
       Uncomment the line starting with <literal>COPY</literal> by removing the
       leading <literal>#</literal> character.
       (<xref linkend="co-dockerfile-apache2-copy"/> in
       <xref linkend="ex-docker-dockerfile-apache2"/>).
      </para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>
     Rebuild the image as described in <xref linkend="st-docker-apache2-build"/>
     of <xref linkend="pro-docker-apache2" xrefstyle="select:label"/>.
    </para>
   </step>
   <step>
    <para>
     Run the image in the detached mode:
    </para>
    <screen>&prompt.user;docker run --detach --interactive --tty &exampleuser_plain;/apache2</screen>
    <para>
     &deng; responds with the container ID, for example:
    </para>
    <screen>e43fff4ae9832ecdb7677c058a73039d7610c32145a1d9b6ad0a4ed52b5c4dc7</screen>
   </step>
  </procedure>

  <para>
   To view the published data, point a browser at
   <uri>http://localhost:80/test.html</uri>.
  </para>

  <para>
   To avoid copying Web site data into the &docker; container, share a
   directory of the host with the container. For more information, see
   <link xlink:href="https://docs.docker.com/storage/volumes/"/>.
  </para>
 </sect1>
</chapter>
