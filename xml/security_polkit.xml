<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0"
         xml:id="cha-security-polkit">

 <title>The &pk; authentication framework</title>
 <info>
      <abstract>
        <para>
         &pk; is an authentication framework used in graphical Linux desktop
         environments, for fine-grained management of access rights on the
         system. Traditionally, there is a strong separation of
         privileges on Linux between the &rootuser; user as the fully authorized
         administrator account, and all other accounts and groups on the
         system. These non-administrator accounts may have certain additional
         privileges, like accessing sound hardware through an
         <literal>audio</literal> group. This kind of
         privilege is fixed, however and cannot be granted only in certain
         specific situations, or for a certain duration of time.
        </para>
        <para>
         Instead of fully switching to the &rootuser; user (using programs
         such as <command>sudo</command>) for gaining higher privileges,
         &pk; grants specific privileges to a user or group on an
         as-needed basis. This is controlled by configuration files that
         describe individual actions that need to be authorized
	        in a dynamic context.
        </para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
 </info>

 <sect1 xml:id="sec-security-polkit-oview">
  <title>Conceptual overview</title>

  <para>
   &pk; consists of multiple components. <command>polkitd</command> is a
   privileged central background service that performs authentication checks
   based on the existing &pk; configuration. &pk;-enabled applications
   forward specific authentication requests to the
   <command>polkitd</command> daemon. A &pk; authentication agent running in
   the unprivileged user context is responsible for displaying
   authentication requests on behalf of the <command>polkitd</command>
   daemon, and providing the credentials that have been entered interactively by
   the user.
  </para>

  <para>
   A &pk; <emphasis>action</emphasis> represents a single activity that is
   subject to &pk;'s authorization rules. For example, the intent to reboot the
   computer can be modeled as a single action in &pk;. Each action has a unique
   identifier, for the reboot example the action is called
   <literal>org.freedesktop.login1.reboot</literal>.
  </para>

  <sect2 xml:id="sec-security-polkit-agents">
   <title>The authentication agent</title>
   <para>
    When a user starts a graphical session in a fully featured desktop
    environment, an authentication agent is typically started automatically,
    running in the background. You notice it when an authentication
    prompt appears in response to an application requesting authorization for a
    certain action. Using &pk; in text mode or via SSH is not easily possible,
    therefore this document focuses on its use in a graphical session context.
   </para>
  </sect2>

  <sect2 xml:id="sec-security-polkit-structure">
   <title>Configuration of &pk;</title>
   <para>
    &pk;'s configuration consists of <emphasis>actions</emphasis> and
    <emphasis>authorization rules</emphasis>:
   </para>
   <variablelist>
    <varlistentry>
     <term>Actions (file extension <filename>*.policy</filename>)</term>
     <listitem>
      <para>
       Actions are defined in XML files that are located in
       <filename>/usr/share/polkit-1/actions</filename>. Each file defines
       one or more actions for a certain application domain, and each action
       contains human-readable descriptions and its default authorization
       settings. Although a system administrator can write their own rules, these
       default policy files must not be edited directly.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Authorization rules (file extension <filename>*.rules</filename>)</term>
     <listitem>
      <para>
       Rules are written in the JavaScript programming language, and are located
       in two places: <filename>/usr/share/polkit-1/rules.d </filename> is used
       by system packages, and <filename>/etc/polkit-1/rules.d</filename> is for
       locally administered configurations. The rule files contain more complex
       logic on top of the default action authorization settings. For example,
       a rule file could overrule a restrictive action and allow certain users
       to use it even without authorization.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-polkit-oview-commands">
   <title>&pk; Utilities</title>
   <para>
    &pk; provides certain utilities for specific tasks (see also their
    respective man pages for further details):
   </para>
   <variablelist>
    <varlistentry>
     <term><command>pkaction</command>
     </term>
     <listitem>
      <para>
       Get details about a defined action. See
       <xref linkend="sec-security-polkit-query"/> for more
       information.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkcheck</command>
     </term>
     <listitem>
      <para>
       Checks whether a process is authorized for a specific &pk; action.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkexec</command>
     </term>
     <listitem>
      <para>
       Allows executing programs as a different user based on &pk; authorization
       settings. This is similar to <command>su</command> or <command>sudo</command>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkttyagent</command>
     </term>
     <listitem>
      <para>
       Starts a textual authentication agent. This agent is used if a
       desktop environment does not have its own authentication agent.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-security-polkit-types">
  <title>Authorization types</title>

  <para>
   Every time a &pk; enabled application carries out a privileged operation,
   &pk; is asked whether the user is entitled to do so. The answer can be
   <literal>yes</literal>, <literal>no</literal>, or
   <literal>authentication needed</literal>. In the latter case an authentication
   dialog is displayed for the user to enter the necessary credentials.
  </para>

  <sect2 xml:id="sec-security-polkit-policies-implicit">
   <title>Implicit Authorizations</title>
   <para>
    When no dedicated &pk; JavaScript rules exist for a given action, the outcome
    depends on the implicit authorizations settings that are defined for each
    action in a &pk; policy file. There are three authorization categories:
    <literal>allow_active</literal>,
    <literal>allow_inactive</literal>, and <literal>allow_any</literal>.
    <literal>allow_active</literal> is applied to users in an active session. An
    active session is a local login on the text mode console or in a graphical
    user environment. The session becomes inactive when you switch to another
    console, for example, in which case the category
    <literal>allow_inactive</literal> is relevant. <literal>allow_any</literal>
    is used for all other contexts, for example for remote users logged in via
    SSH or VNC. Each of these categories has one of the following authorization
    settings assigned:
   </para>
   <variablelist>
    <varlistentry>
     <term>no</term>
     <listitem>
      <para>
       The user is never granted authorization of the desired action.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yes</term>
     <listitem>
      <para>
       The user is always granted authorization without the need to enter any credentials.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_self</term>
     <listitem>
      <para>
       The user needs to enter their own password for the action to be
       authorized.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_self_keep</term>
     <listitem>
      <para>
       Like <literal>auth_self</literal>, but the authorization is cached for a
       certain duration, for example, if the same action is executed by the same
       application again, then it is not necessary to re-enter the password.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_admin</term>
     <listitem>
      <para>
       The user needs to enter the administrator (&rootuser;) password for the action to be authorized.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_admin_keep</term>
     <listitem>
      <para>
       Similar to <literal>auth_self_keep</literal>, only requiring the administrator (&rootuser;) password.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-polkit-policies-default">
   <title>&suse; default privileges</title>
   <para>
    The implicit authorization settings found in &pk; policy files described so
    far are from the upstream developers of the respective applications.
    We call these settings the <emphasis>upstream defaults</emphasis>. These
    upstream defaults are not necessarily the same defaults that are used on
    &suse; systems. &productname; comes with a predefined set of privileges that
    override the upstream defaults. These settings come in three different
    flavors (profiles) of which only one can be active at any time:
   </para>
   <variablelist>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.easy</filename>
     </term>
     <listitem>
      <para>
       Authorization settings tailored towards single-user desktop systems where
       the administrator is also the only active interactive user. It offers
       reduced security in favor of improved user experience.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.standard</filename>
     </term>
     <listitem>
      <para>
       Balanced settings suitable for most systems.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.restrictive</filename>
     </term>
     <listitem>
      <para>
       More conservative authorization settings that reduce possible attack
       surface at the expense of user experience in certain areas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    To switch the active polkit profile, edit
    <filename>/etc/sysconfig/security</filename>
    and adjust the value of <varname>POLKIT_DEFAULT_PRIVS</varname> to one of
    <literal>easy</literal>, <literal>standard</literal>, or
    <literal>restrictive</literal>.
    Then run the command <command>set_polkit_default_privs</command> as &rootuser;.
   </para>
   <para>
    Do not modify the profile settings in the files listed above. To define your
    own custom &pk; settings, use
    <filename>/etc/polkit-default-privs.local</filename>. For details, refer to
    <xref linkend="sec-security-polkit-change-modify-config-implicit"/>.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-polkit-query">
  <title>Querying Privileges</title>

  <para>
   To query privileges, use the command <command>pkaction</command> included
   in &pk;.
  </para>

  <para>
   &pk; comes with command-line tools for changing privileges and
   executing commands as another user (see
   <xref linkend="sec-security-polkit-oview-commands"/> for a short
   overview). Each existing policy has a unique name with which it
   can be identified. List all available policies with the command
   <command>pkaction</command>. See <command>man pkaction</command> for more
   information.
  </para>

  <para>
   To display the needed authorization for a given policy (for
   example, <literal>org.freedesktop.login1.reboot</literal>), use
   <command>pkaction</command> as follows:
  </para>

  <screen>&prompt.user;<command>pkaction -v --action-id=org.freedesktop.login1.reboot</command>
org.freedesktop.login1.reboot:
  description:       Reboot the system
  message:           Authentication is required to allow rebooting the system
  vendor:            The systemd Project
  vendor_url:        http://www.freedesktop.org/wiki/Software/systemd
  icon:
  implicit any:      auth_admin_keep
  implicit inactive: auth_admin_keep
  implicit active:   yes</screen>

  <note>
   <title>Restrictions of <command>pkaction</command> on &productname;</title>
   <para>
    <command>pkaction</command> only takes the upstream defaults into account.
    It is not aware of the SUSE default privileges that are overriding the
    upstream defaults. Therefore be careful about interpreting this output.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="sec-security-polkit-change-modify-config">
  <title>Modifying &pk; Configuration</title>

  <para>
   Adjusting &pk; settings is useful when you want to deploy the same set of
   policies to different machines, for example to the computers of a specific
   team. Customization of &pk; authorization settings can also be used to harden
   security for specific actions, or to improve the user experience by reducing
   the amount of password prompts for frequently used actions. Note, however,
   that granting certain &pk; actions without authentication
   can be a security hazard that may grant a regular user full &rootuser;
   privileges. Only lower &pk; authentication requirements when you are certain
   it doesn't violate the system security in your specific environment.
  </para>

  <sect2 xml:id="sec-security-polkit-change-modify-config-actions">
   <title>Overriding &pk; policy files</title>
   <para>
    The list of available &pk; actions depends on the packages that you have
    installed on your system. For a quick overview, use
    <command>pkaction</command> to list all actions &pk; knows about.
   </para>
   <para>
    For the purposes of this example we show how the command
    <command>gparted</command> (<quote>&gnome; Partition Editor</quote>)
    is integrated into &pk;.
   </para>
   <para>
    The file
    <filename>/usr/share/polkit-1/actions/org.opensuse.policykit.gparted.policy</filename>
    has the following content:
   </para>
<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd"&gt;
&lt;policyconfig&gt; <co xml:id="co-polkit-actions-policyconfig"/>

  &lt;action id="org-opensuse-polkit-gparted"&gt; <co xml:id="co-polkit-actions-action"/>
    &lt;message&gt;Authentication is required to run the GParted Partition Editor&lt;/message&gt;
    &lt;icon_name&gt;gparted&lt;/icon_name&gt;
    &lt;defaults&gt; <co xml:id="co-polkit-actions-defaults"/>
      &lt;allow_any&gt;auth_admin&lt;/allow_any&gt;
      &lt;allow_inactive&gt;auth_admin&lt;/allow_inactive&gt;
     &lt; allow_active&gt;auth_admin&lt;/allow_active&gt;
    &lt;/defaults&gt;
    &lt;annotate <co xml:id="co-polkit-actions-annotate"/>
      key="org.freedesktop.policykit.exec.path"&gt;/usr/sbin/gparted&lt;/annotate&gt;
    &lt;annotate <xref linkend="co-polkit-actions-annotate"/>
      key="org.freedesktop.policykit.exec.allow_gui"&gt;true&lt;/annotate&gt;
  &lt;/action&gt;

&lt;/policyconfig&gt;</screen>
   <calloutlist>
    <callout arearefs="co-polkit-actions-policyconfig">
     <para>
      Root XML element of the policy file.
     </para>
    </callout>
    <callout arearefs="co-polkit-actions-action">
     <para>
      Start of the definition of the only action in this policy.
     </para>
    </callout>
    <callout arearefs="co-polkit-actions-defaults">
     <para>
      Here the implicit authorization settings as described above are found.
     </para>
    </callout>
    <callout arearefs="co-polkit-actions-annotate">
     <para>
      The <literal>annotate</literal> element contains additional information
      regarding how &pk; performs an action. In this case, it contains
      the path to the gparted executable and a setting that this program is
      allowed to access the graphical display. These annotations are necessary
      for the use of an action in conjunction with the &pk; tool <command>pkexec</command>.
     </para>
    </callout>
   </calloutlist>
   <para>
    To add your own policy, create a <filename>.policy</filename> file with
    the structure above, add the appropriate action name into the
    <literal>id</literal> attribute, and define the desired override implicit
    authorization settings.
   </para>
   <note>
    <title>Deprecated name PolicyKit</title>
    <para>
     The &pk; authorization framework was formerly named PolicyKit. In certain
     places, like in the XML document preamble above, this old name still
     appears.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec-security-polkit-change-modify-config-authrules">
   <title>Adding JavaScript authorization rules</title>
   <para>
    Authorization rules overrule the implicit authorization settings.
    To add your own rules, store your files under <filename>/etc/polkit-1/rules.d/</filename>.
   </para>
   <para>
    The files in this directory start with a two-digit number, a dash, a
    descriptive name, and end with <filename>.rules</filename>. Functions
    inside these files are executed in the lexicographical order of the file names
    in the directory. For example, <filename>00-foo.rules</filename> is ordered
    (and hence executed) before <filename>60-bar.rules</filename> or even
    <filename>90-default-privs.rules</filename>.
   </para>
   <para>
    Inside the rule file, the script typically checks for the action ID to be
    authorized. For example, to allow the command
    <command>gparted</command> to be executed by
    any member of the <systemitem class="groupname">admin</systemitem>
    group, check for the action ID <literal>org.opensuse.policykit.gparted</literal>:
   </para>
<screen>/* Allow users in admin group to run GParted without authentication */
polkit.addRule(function(action, subject) {
    if (action.id == "org.opensuse.policykit.gparted" &amp;&amp;
        subject.isInGroup("admin")) {
        return polkit.Result.YES;
    }
});</screen>
   <para>
    Find the description of all classes and methods of the functions in the
    &pk; API at
    <link xlink:href="http://www.freedesktop.org/software/polkit/docs/latest/ref-api.html"/>.
   </para>
  </sect2>

  <sect2 xml:id="sec-security-polkit-change-modify-config-implicit">
   <title>Modifying the &suse; default privileges</title>
   <para>
    As described in <xref linkend="sec-security-polkit-policies-default"/>,
    &suse; ships different override profiles for the &pk; implicit authorization
    settings defined by the upstream developers. Custom privileges can be defined
    in <filename>/etc/polkit-default-privs.local</filename>. Privileges defined
    here always take precedence over the predefined profile settings.
    To add a custom privilege setting, do the following:
   </para>
   <procedure xml:id="pro-custom-privileges">
    <title>Modifying default privileges</title>
    <step>
     <para>
      Edit <filename>/etc/polkit-default-privs.local</filename>. To define a
      privilege, add a line for each action in the following format:
     </para>
<screen><replaceable>&lt;action-id&gt;</replaceable>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<replaceable>&lt;auth_any&gt;</replaceable>:<replaceable>&lt;auth_inactive&gt;</replaceable>:<replaceable>&lt;auth_active&gt;</replaceable></screen>
     <para>
      Alternatively, if all three categories receive the same value, you can also specify only a single value:
     </para>
<screen><replaceable>&lt;action-id&gt;</replaceable>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<replaceable>&lt;auth_all&gt;</replaceable></screen>
     <para>
      For example:
     </para>
<screen>org.freedesktop.color-manager.modify-profile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auth_admin_keep</screen>
    </step>
    <step>
     <para>
      Run this tool as &rootuser; for the changes to take effect:
     </para>
     <screen>&prompt.root;<command>/sbin/set_polkit_default_privs</command></screen>
    </step>
   </procedure>
   <para>
   Refer to <command>man polkit-default-privs</command> for the full
   documentation of the SUSE &pk; default privileges.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-polkit-change-defaults">
  <title>Restoring the &suse; default privileges</title>

  <para>
   To restore the &suse; default authorization settings follow these steps:
  </para>

  <procedure xml:id="pro-restore-polkit-defaults">
   <title>Restoring the &productname; defaults</title>
   <step>
    <para>
     Choose the desired profile as described in <xref linkend="sec-security-polkit-policies-default"/>
    </para>
   </step>
   <step>
    <para>
     Remove any overrides from <filename>/etc/polkit-default-privs.local</filename>.
    </para>
   </step>
   <step>
    <para>
     Run <command>set_polkit_default_privs</command> to regenerate the default rules.
    </para>
   </step>
  </procedure>
 </sect1>
</chapter>
