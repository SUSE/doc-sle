<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xml:id="cha.registry.installation" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.0"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Storing Images</title>
 <para>
  Prior to creating your own images, you should decide where you will store the
  images. The easiest solution is to push these images to the
  <link xlink:href="https://hub.docker.com">Docker Hub</link>. By default, all
  images pushed to the Docker Hub are public. This is probably fine as long as
  this does not violate your company's policy and your images do not contain
  sensitive data or proprietary software.
 </para>
 <para>
  If you need to restrict access to your Docker images, there are two options:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    <!-- Are we really advertising the services of some unaffiliated third
    party? - sknorr, 2017-12-07 -->
    Get a subscription on Docker Hub that unlocks the feature to create private
    repositories.
   </para>
  </listitem>
  <listitem>
   <para>
    Run an on-site Docker registry where to store all the Docker images used by
    your organization or company and combine them with Portus to secure the
    registry.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  This chapter describes how to set up an on-site Docker registry and how to
  combine it with Portus.
 </para>
 <sect1 xml:id="sec.docker.registry.definition">
  <title>What is a Docker Registry?</title>

  <para>
   The Docker Registry is an open-source project created by Docker Inc. It
   allows the storage and retrieval of Docker images. By running a local
   instance of the Docker registry it is possible to completely avoid usage of
   Docker Hub.
  </para>

  <para>
   Docker Registry is also used by Docker Hub. However, Docker Hub,
   as seen from the user perspective, is made of the following parts at least:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     The user interface (UI): The part that is accessed by users with their
     browser. The UI provides a nice and intuitive way to browse the contents
     of Docker Hub either manually or by using a search feature. It also
     allows to create organizations made by different users.
    </para>
    <para>
     This component is closed-source.
    </para>
   </listitem>
   <listitem>
    <para>
     The authentication component: This is used to protect the images stored
     inside of Docker Hub. It validates all push, pull and search requests.
    </para>
    <para>
     This component is closed-source.
    </para>
   </listitem>
   <listitem>
    <para>
     The storage back-end: This is where Docker images are sent and
     downloaded from. It is provided by Docker Registry.
    </para>
    <para>
     This component is open-source.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.docker.registry.installation">
  <title>Installing and Setting Up Docker Registry</title>

  <procedure>
   <step>
    <para>
     Install the <systemitem>docker-distribution-registry</systemitem> package:
    </para>
    <screen>sudo zypper install docker-distribution-registry</screen>
   </step>
   <step>
    <para>
     To automatically start the Docker registry at boot time:
    </para>
    <screen>sudo systemctl enable registry</screen>
   </step>
   <step>
    <para>
     Start the Docker Registry:
    </para>
    <screen>sudo systemctl start registry</screen>
   </step>
  </procedure>

  <para>
   The Docker registry configuration is defined inside of
   <filename>/etc/registry/config.yml</filename>.
  </para>

  <para>
   With the default configuration the registry listens on ports
   <literal>5000</literal> and stores the Docker images under
   <filename>/var/lib/docker-registry</filename>.
  </para>

  <note>
   <title>Incompatible Versions of Docker and Docker Registry</title>
   <para>
    Docker registry version 2.3 is not compatible with Docker versions older
    than 1.10, because v2 manifests were only introduced with Docker 1.10. As
    Docker and Docker registry can be installed on different boxes, the
    versions might be incompatible. If you experience communication errors
    between Docker and Docker registry, update both to the latest versions.
   </para>
  </note>

  <!--
      fcastelli 2015-07-08: TODO: update once we create a TID illustrating the secure setup of
      Docker registry and Portus.
     -->

  <para>
   For more details about Docker registry and its configuration, see the
   official documentation at:
   <link xlink:href="https://docs.docker.com/registry/"/>.
  </para>
 </sect1>
 <sect1 xml:id="sec.docker.registry.limitations">
  <title>Limitations</title>

  <para>
   The Docker registry has two major limitations:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     It lacks any form of authentication. That means everybody with access to
     the Docker Registry can push and pull images to it. That also includes the
     possibility to overwrite already existing images.
    </para>
   </listitem>
   <listitem>
    <para>
     There is no way to see which images have been pushed to the Docker
     Registry. You need to manually take notes of what is being stored inside
     of it. There is also no search functionality, which makes collaboration
     harder.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec.docker.portus">
  <title>Portus</title>

  <para>
   Portus is an authentication service and user interface for the Docker
   registry. It is an open source project created by &suse; to address all the
   limitations faced by the local instances of Docker registry.
  </para>

  <para>
   By combining Portus and Docker registry, it is possible to have a secure and
   enterprise ready on-premise version of the Docker Hub.
  </para>

  <para>
   Portus is accessible in &slea;&nbsp;&productnumber; through the Containers
   module. To install Portus, use the following command:
  </para>

  <screen>sudo zypper in portus</screen>

  <para>
   To configure Portus, follow these steps:
  </para>

  <procedure>
   <step>
    <para>
     First of all, you should install Portus's dependencies if you have not
     already. This is thoroughly documented here:
     <link xlink:href="http://port.us.org/docs/setups/1_rpm_packages.html#portus-dependencies"/>.
     This document will help you to get through the installation process, and
     it will also warn you about some of the common pitfalls.
    </para>
   </step>
   <step>
    <para>
     After installing Portus and its dependencies, you need to configure your
     instance. The initial setup of Portus is explained here:
     <link xlink:href="http://port.us.org/docs/setups/1_rpm_packages.html#initial-setup"/>.
     When you are done with <command>portusctl</command>, you should modify
     some configurable values before using Portus. This is thoroughly explained
     in this documentation page:
     <link xlink:href="http://port.us.org/docs/Configuring-Portus.html"/>.
    </para>
   </step>
   <step>
    <para>
     To apply the configuration changes, restart Apache (this is required after
     each configuration change).
    </para>
   </step>
   <step>
    <para>
     Finally, when entering Portus for the first time, you will be required to
     enter some information about your installed registry. For details, see:
     <link xlink:href="http://port.us.org/docs/setups/1_rpm_packages#the-default-installation.html"/>.
    </para>
   </step>
   <step>
    <para>
     The Portus setup is now complete and you can start using Portus.
    </para>
   </step>
  </procedure>

  <para>
   Currently, &suse;'s Docker offering includes Portus as a technology preview.
   For more information about Portus, see:
   <link xlink:href="http://port.us.org/"/>.
  </para>
 </sect1>
</chapter>
