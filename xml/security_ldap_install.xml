<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       version="5.0"
       xml:id="sec-security-ldap-server-install">
 <info>
  <title>Installing &ds389;</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  Install &ds389; with the following command:
 </para>

<screen>&prompt.sudo;<command>zypper install 389-ds</command></screen>

 <para>
  After installation, set up the server <phrase os="sles;osuse">as described in
  <xref linkend="sec-security-ldap-server"/>.</phrase>
 </para>

 <sect2 xml:id="sec-security-ldap-server">
  <title>Setting up a new &ds389; instance</title>
  <para>
   You will use the <command>dscreate</command> command to create new &ds389;
   instances, and the <command>dsctl</command> command to cleanly remove them.
  </para>
  <para>
   There are two ways to configure and create a new instance: from a custom
   configuration file, and from an auto-generated template file. You can use
   the auto-generated template without changes for a test instance, though for
   a production system you must carefully review it and make any necessary
   changes.
  </para>
  <para>
   Then you will set up administration credentials, manage users and groups,
   and configure identity services.
  </para>
<!--
    *  configuring other applications (showing "dsidm instance client_config display")
   -->
  <para>
   The &ds389; is controlled by three primary commands:
  </para>
  <variablelist>
   <varlistentry>
    <term><command>dsctl</command></term>
    <listitem>
     <para>
      Manages a local instance and requires &rootuser; permissions. Requires
      you to be connected to a terminal which is running the directory server
      instance. Used for starting, stopping, backing up the database, and more.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>dsconf</command></term>
    <listitem>
     <para>
      The primary tool used for administration and configuration of the server.
      Manages an instance's configuration via its external interfaces. This
      allows you to make configuration changes remotely on the instance.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>dsidm</command></term>
    <listitem>
     <para>
      Used for identity management (managing users, groups, passwords, etc.).
      The permissions are granted by access controls, so, for example, users
      can reset their own password or change details of their own account.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   Follow these steps to set up a simple instance for testing and development,
   populated with a small set of sample entries.
  </para>
  <procedure>
   <step>
    <para>
<!--Creating the Directory Server Instance from inf file-->
     <xref linkend="sec-security-ldap-server-instance" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
<!--Creating the Directory Server Instance from a template-->
     <xref linkend="sec-security-ldap-server-template" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
<!--Configuring Admin Credentials for Local Access-->
     <xref linkend="sec-security-ldap-server-credentials" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
<!--Configuring Users and Groups-->
     <xref linkend="sec-security-ldap-server-users" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
<!--Configuring SSSD-->
     <xref linkend="sec-security-ldap-server-sssd" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
<!-- Managing Modules -->
     <xref linkend="sec-security-ldap-modules" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
<!--Using CA Certificates for TLS Connections -->
     <xref linkend="sec-security-ldap-server-ca" xrefstyle="select:title"/>
    </para>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-instance">
  <title>Creating a &ds389; instance with a custom configuration file</title>
  <para>
   You can create a new &ds389; instance from a simple custom configuration
   file. This file must be in the INF format, and you can name it anything you
   like.
  </para>
  <para>
   The default instance name is <literal>localhost</literal>. The instance name
   cannot be changed after it has been created. It is better to create your own
   instance name, rather than using the default, to avoid confusion and to
   enable a better understanding of how it all works. The following examples
   use the <replaceable>LDAP1</replaceable> instance name, and a suffix of
   dc=<replaceable>LDAP1</replaceable>,dc=<replaceable>COM</replaceable>.
  </para>
  <para>
   <xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/> shows an
   example configuration file that you can use to create a new &ds389;
   instance. You can copy and use this file without changes.
  </para>
  <procedure>
   <step>
    <para>
     Copy the following example file, <filename>LDAP1.inf</filename>, to your
     home directory:
    </para>
    <example xml:id="ex-ldap-389-ds-inf">
     <title>Minimal &ds389; instance configuration file</title>
<screen># <replaceable>LDAP1.inf</replaceable>

[general]
config_version = 2 <co xml:id="co-ldap-389-ds-config-version"/>

[slapd]
root_password = <replaceable>PASSWORD</replaceable><co xml:id="co-ldap-389-ds-rootpasswd"/>
self_sign_cert = True <co xml:id="co-ldap-389-ds-cert"/>
instance_name = <replaceable>LDAP1</replaceable>

[backend-userroot]
sample_entries = yes <co xml:id="co-ldap-389-ds-sample-entries"/>
suffix = dc=<replaceable>LDAP1</replaceable>,dc=<replaceable>COM</replaceable></screen>
     <calloutlist>
      <callout arearefs="co-ldap-389-ds-config-version">
       <para>
        This line is required, indicating that this is a version 2 setup INF
        file.
       </para>
      </callout>
      <callout arearefs="co-ldap-389-ds-rootpasswd">
       <para>
        Create a strong <varname>root_password</varname> for the ldap user
        <literal>cn=Directory Manager</literal>. This user is for connecting
        (binding) to the directory.
       </para>
      </callout>
      <callout arearefs="co-ldap-389-ds-cert">
       <para>
        Create self-signed server certificates in
        <filename>/etc/dirsrv/slapd-<replaceable>LDAP1</replaceable></filename>.
       </para>
      </callout>
      <callout arearefs="co-ldap-389-ds-sample-entries">
       <para>
        Populate the new instance with sample user and group entries.
       </para>
      </callout>
     </calloutlist>
    </example>
   </step>
   <step>
    <para>
     To create the &ds389; instance from
     <xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/>, run the
     following command:
    </para>
<screen>&prompt.sudo;<command>dscreate -v from-file <replaceable>LDAP1.inf</replaceable> |</command> \
<command>tee <replaceable>LDAP1-OUTPUT.txt</replaceable></command></screen>
    <para>
     This shows all activity during the instance creation, stores all the
     messages in
     <filename><replaceable>LDAP1-OUTPUT.txt</replaceable></filename>, and
     creates a working LDAP server in about a minute. The verbose output
     contains a lot of useful information. If you do not want to save it, then
     delete the <literal>| tee
     <replaceable>LDAP1-OUTPUT.txt</replaceable></literal> portion of the
     command.
    </para>
   </step>
   <step>
    <para>
     If the <command>dscreate</command> command should fail, the messages will
     tell you why. After correcting any issues, remove the instance (see
     <xref linkend="sec-security-ldap-server-remove"/>) and create a new
     instance.
    </para>
   </step>
   <step>
    <para>
     A successful installation reports <literal>Completed installation for
     <replaceable>LDAP1</replaceable></literal>. Check the status of your new
     server:
    </para>
<screen>&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> status</command>
Instance "LDAP1" is running</screen>
   </step>
   <step xml:id="sec-security-ldap-server-remove">
    <para>
     The following commands are for cleanly removing the instance. The first
     command performs a dry run and does not remove the instance. When you are
     sure you want to remove it, use the second command with the
     <command>--do-it</command> option:
    </para>
<screen>&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> remove</command>
Not removing: if you are sure, add --do-it

&prompt.sudo;dsctl <command><replaceable>LDAP1</replaceable> remove --do-it</command></screen>
    <para>
     This command also removes partially installed or corrupted instances. You
     can reliably create and remove instances as often as you want.
    </para>
   </step>
  </procedure>
  <para>
   If you forget the name of your instance, use <command>dsctl</command> to
   list all instances:
  </para>
<screen>&prompt.user;<command>dsctl -l</command>
slapd-<replaceable>LDAP1</replaceable></screen>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-template">
  <title>Creating a &ds389; instance from a template</title>
  <para>
   You can auto-create a template for a new &ds389; instance with the
   <command>dscreate</command> command. This creates a template that you can
   use without making any changes, for testing. For production systems, review
   and change it to suit your own requirements. The defaults are
   documented in the template file, and commented out. To make changes,
   uncomment the default and enter your own value. All options are well
   documented.
  </para>
  <para>
   The following example prints the template to stdout:
  </para>
<screen>&prompt.user;<command>dscreate create-template</command></screen>
  <para>
   This is good for a quick review of the template, but you must create a file
   to use in creating your new &ds389; instance. You can name this file
   anything you want:
  </para>
<screen>&prompt.user;<command>dscreate create-template <replaceable>TEMPLATE.txt</replaceable></command></screen>
  <para>
   This is a snippet from the new file:
  </para>
<screen># full_machine_name (str)
# Description: Sets the fully qualified hostname (FQDN) of this system. When
# installing this instance with GSSAPI authentication behind a load balancer, set
# this parameter to the FQDN of the load balancer and, additionally, set
# "strict_host_checking" to "false".
# Default value: ldapserver1.test.net
;full_machine_name = ldapserver1.test.net

# selinux (bool)
# Description: Enables SELinux detection and integration during the installation
# of this instance. If set to "True", dscreate auto-detects whether SELinux is
# enabled. Set this parameter only to "False" in a development environment.
# Default value: True
;selinux = True</screen>
  <para>
   It automatically configures certain options from your existing environment; for
   example, the system's fully-qualified domain name, which is called
   <literal>full_machine_name</literal> in the template. Use this file with no
   changes to create a new instance:
  </para>
<screen>&prompt.sudo;<command>dscreate from-file <replaceable>TEMPLATE.txt</replaceable></command></screen>
  <para>
   This creates a new instance named <literal>localhost</literal>, and
   automatically starts it after creation:
  </para>
<screen>&prompt.sudo;<command>dsctl localhost status</command>
Instance "localhost" is running</screen>
  <para>
   The default values create a fully operational instance, but there are certain
   values you might want to change.
  </para>
  <para>
   The instance name cannot be changed after it has been created. It is better
   to create your own instance name, rather than using the default, to avoid
   confusion and to enable a better understanding of how it all works. To do
   this, uncomment the <literal>;instance_name = localhost</literal> line and
   change <literal>localhost</literal> to your chosen name. In the following
   examples, the instance name is <replaceable>LDAP1</replaceable>.
  </para>
  <para>
   Another useful change is to populate your new instance with sample users and
   groups. Uncomment <literal>;sample_entries = no</literal> and change
   <literal>no</literal> to <literal>yes</literal>. This creates the
   <literal>demo_user</literal> and <literal>demo_group</literal>.
  </para>
  <para>
   Set your own password by uncommenting <literal>;root_password</literal>, and
   replacing the default password with your own.
  </para>
  <para>
   The template does not create a default suffix, so you should configure your
   own on the <literal>suffix</literal> line, like the following example:
  </para>
<screen>suffix = dc=<replaceable>LDAP1</replaceable>,dc=<replaceable>COM</replaceable></screen>
  <para>
   You can cleanly remove any instance and start over with
   <command>dsctl</command>:
  </para>
<screen>&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> remove --do-it</command></screen>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-stop-start">
  <title>Stopping and starting &ds389;</title>
  <para>
   The following examples use <literal>LDAP1</literal> as the instance name.
   Use &systemd; to manage your &ds389; instance. Get the status of your
   instance:
  </para>
<screen>&prompt.user;<command>systemctl status --no-pager --full dirsrv@LDAP1.service</command>
   ● dirsrv@LDAP1.service - 389 Directory Server LDAP1.
     Loaded: loaded (/usr/lib/systemd/system/dirsrv@.service; enabled; vendor preset: disabled)
     Active: active (running) since Thu 2021-03-11 08:55:28 PST; 2h 7min ago
    Process: 4451 ExecStartPre=/usr/lib/dirsrv/ds_systemd_ask_password_acl
       /etc/dirsrv/slapd-LDAP1/dse.ldif (code=exited, status=0/SUCCESS)
   Main PID: 4456 (ns-slapd)
     Status: "slapd started: Ready to process requests"
      Tasks: 26
     CGroup: /system.slice/system-dirsrv.slice/dirsrv@LDAP1.service
             └─4456 /usr/sbin/ns-slapd -D /etc/dirsrv/slapd-LDAP1 -i /run/dirsrv/slapd-LDAP1.pid
</screen>
  <para>
   Start, stop and restart your LDAP server:
  </para>
<screen>&prompt.sudo;<command>systemctl start <replaceable>dirsrv@LDAP1.service</replaceable></command>
&prompt.sudo;<command>systemctl stop <replaceable>dirsrv@LDAP1.service</replaceable></command>
&prompt.sudo;<command>systemctl restart <replaceable>dirsrv@LDAP1.service</replaceable></command></screen>
  <para>
   See <xref linkend="cha-systemd"/> for more information on using
   <command>systemctl</command>.
  </para>
  <para>
   The <command>dsctl</command> command also starts and stops your server:
  </para>
<screen>&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> status</command>
&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> stop</command>
&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> restart</command>
&prompt.sudo;<command>dsctl <replaceable>LDAP1</replaceable> start</command>
</screen>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-credentials">
  <title>Configuring administrator credentials for local administration</title>
  <para>
   For local administration of the &ds389;, you can create a
   <filename>.dsrc</filename> configuration file in the
   <filename>/root</filename> directory, allowing root and sudo users to
   administer the server without typing connection details with every command.
   <xref linkend="ex-security-ldap-server-credentials-local" xrefstyle="select:label"/>
   shows an example for local administration on the server, using
   <replaceable>LDAP1</replaceable> and <replaceable>com</replaceable> for the
   suffix.
  </para>
  <para>
   After creating your <filename>/root/.dsrc</filename> file, try a few
   administration commands, such as creating new users (see
   <xref linkend="sec-security-ldap-server-users"/>).
  </para>
  <example xml:id="ex-security-ldap-server-credentials-local">
   <title>A <filename>.dsrc</filename> file for local administration</title>
<screen># /root/.dsrc file for administering the LDAP1 instance

[<replaceable>LDAP1</replaceable>] <co xml:id="co-ldap-server-dsrc-instance-name"/>

uri = ldapi://<replaceable>%%2fvar%%2frun%%2fslapd-LDAP1.socket</replaceable> <co xml:id="co-ldap-server-dsrc-remote-ldapi"/>
basedn = dc=<replaceable>LDAP1</replaceable>,dc=<replaceable>COM</replaceable>
binddn = cn=Directory Manager
</screen>
   <calloutlist>
    <callout arearefs="co-ldap-server-dsrc-instance-name">
     <para>
      This must specify your exact instance name.
     </para>
    </callout>
    <callout arearefs="co-ldap-server-dsrc-remote-ldapi">
     <para>
      <literal>ldapi</literal> detects the UID and GID of the user attempting
      to log in to the server. If the UID/GID are <literal>0/0</literal> or
      <literal>dirsrv:dirsrv</literal>, <literal>ldapi</literal> binds the user
      as the directory server root dn, which is <literal>cn=Directory
      Manager</literal>.
     </para>
     <para>
      In the URI, the slashes are replaced with <literal>%%2f</literal>, so in
      this example the path is
      <filename>/var/run/slapd-<replaceable>LDAP1</replaceable>.socket</filename>.
     </para>
    </callout>
   </calloutlist>
  </example>
       <important>
       <title>New negation feature in sudoers.ldap</title>
       <para>
         In <package>sudo</package> versions older than 1.9.9,
         negation in sudoers.ldap does
         not work for the <literal>sudoUser</literal>,
         <literal>sudoRunAsUser</literal>, or
         <literal>sudoRunAsGroup</literal> attributes. For example:
       </para>
       <screen> # does not match all but joe
# instead, it does not match anyone
sudoUser: !joe

# does not match all but joe
# instead, it matches everyone including Joe
sudoUser: ALL
sudoUser: !joe</screen>
     </important>
  <para>
    In <command>sudo</command> version 1.9.9 and higher, negation is
    enabled for the <literal>sudoUser</literal> attribute. See
    <command>man 5 sudoers.ldap</command> for more information.
  </para>
 </sect2>
</sect1>
