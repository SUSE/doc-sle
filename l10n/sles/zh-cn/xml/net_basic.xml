<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="net_basic.xml" version="5.0" xml:id="cha-network">
 <title>基本网络知识</title>
 <info>
  <abstract>
   <para>
    Linux 提供集成进各类网络结构中所需的网络工具和功能。可以通过 YaST 配置使用网络卡进行的网络访问。也可以手动进行配置。在本章中，仅描述基础机制和相关网络配置文件。
   </para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  Linux 和其他 Unix 操作系统均使用 TCP/IP 协议。该协议不是单个网络协议，而是提供多种服务的一系列网络协议。<xref linkend="tab-net-basic-tcpproto"/>中所列的协议用于通过 TCP/IP 在两台计算机之间交换数据。由 TCP/IP 连接而成的网络构成了全球网络，也称作<quote>互联网</quote>。
 </para>
 <para>
  RFC 指<emphasis>注释请求</emphasis> (Request for Comments)。RFC 由一些文档组成，用来描述各种互联网协议和操作系统及其应用程序的实施过程。RFC 文档用来描述如何设置互联网协议。有关 RFC 的更多信息，请参见 <link xlink:href="https://datatracker.ietf.org/"/>。
 </para>
 <variablelist xml:id="tab-net-basic-tcpproto">
  <title>TCP/IP 协议系列中的数种协议</title>
  <varlistentry>
   <term>TCP</term>
   <listitem>
    <para>
     传送控制协议：面向连接的安全协议。要传输的数据首先由应用程序作为数据流发送，然后由操作系统转换为相应的格式。数据到达目标主机上的相应应用程序时采用最初发送时的原始数据流格式。TCP 确定在传输过程中是否有任何数据丢失或发生混乱。只要涉及到数据序列就会实施 TCP。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>UDP</term>
   <listitem>
    <para>
     用户数据报协议：无连接、不安全的协议。要传送的数据以应用程序生成的数据包的形式发送。不能保证数据以正确的顺序到达接收方，也可能丢失数据。UDP 适用于面向记录的应用程序。它的等待时间比 TCP 稍短。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>ICMP</term>
   <listitem>
    <para>
     互联网控制消息协议：这不是面向最终用户的协议，而是用来发出错误报告的特殊控制协议，能够控制参与 TCP/IP 数据传送的计算机的行为。此外，它还提供一种特殊的回应方式，可以通过 ping 程序查看该方式。
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>IGMP</term>
   <listitem>
    <para>
     互联网组管理协议：此协议控制实施 IP 多路广播时的计算机行为。
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para>
  如<xref linkend="fig-net-basic-OSI"/> 中所示，数据交换在不同的层中进行。实际的网络层是通过 IP（互联网协议）的不安全数据传送。IP 的上面是 TCP（传送控制协议），它能够确保一定程度的数据传送安全性。IP 层由底层硬件相关协议（例如以太网）提供支持。
 </para>
 <figure xml:id="fig-net-basic-OSI">
  <title>TCP/IP 的简化层模型</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata width="100%" fileref="net_basic_osi.svg"/>
   </imageobject>
   <imageobject role="html">
    <imagedata width="75%" fileref="net_basic_osi.png"/>
   </imageobject>
  </mediaobject>
 </figure>
 <para>
  该图为每一层都提供了一到两个示例。层按照<emphasis>抽象程度</emphasis>排序。最底层非常接近硬件。最上层则几乎就是硬件的完全抽象化。每一层都有自己的特殊功能。每一层的特殊功能多隐含在其描述中。数据链路层和物理层表示所用的物理网络（如以太网）。
 </para>
 <para>
  几乎所有硬件协议都在面向数据包的基础上发挥作用。要传送的数据收集在<emphasis>包</emphasis>中（一次无法发送所有数据）。TCP/IP 包最大约为 64 KB。包通常要小得多，因为可能受到网络硬件的限制。以太网上的数据包最大约为 1500 个字节。通过以太网发送数据时，TCP/IP 包的大小不能超过这个限额。如果传送更多数据，操作系统需要发送更多的数据包。
 </para>
 <para>
  为使层实现其指定功能，必须在数据包中保存与每层相关的附加信息。这些信息保存在数据包的<emphasis>报头</emphasis>中。每一层都在每个新包的开头附加一小块称为协议报头的数据。<xref linkend="fig-net-basic-TCPPaket"/>中演示了一个通过以太网电缆传送的 TCP/IP 数据包示例。校验和位于包的末尾而不是开头，这样更便于网络硬件处理。
 </para>
 <figure xml:id="fig-net-basic-TCPPaket">
  <title>TCP/IP 以太网数据包</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata width="80%" fileref="net_basic_tcppacket.svg"/>
   </imageobject>
   <imageobject role="html">
    <imagedata width="75%" fileref="net_basic_tcppacket.png"/>
   </imageobject>
  </mediaobject>
 </figure>
 <para>
  当应用程序通过网络发送数据时，数据会穿越每个层次，所有传递都在 Linux 内核中实施（只有物理层除外）。每一层都负责准备好数据，以便传递到下一层。最底层最后负责发送数据。接收数据时则逆向执行整个过程。正像剥洋葱皮那样，在每一层中都要从传输数据中删除协议报头。最后，传输层负责使数据可供目标上的应用程序使用。通过这种方式，每一层只与其上一层或下一层通讯。对于应用程序而言，数据是通过无线连接还是有线连接传输都无关紧要。同样，只要数据包的格式正确，传送哪种数据对数据线也无关紧要。
 </para>
 <sect1 xml:id="sec-network-addresses">
  <title>IP 地址和路由</title>

  <para>
   各节的论述仅限于 IPv4 网络。有关 IPv6 协议（IPv4 的后续协议）的信息，请参见<xref linkend="sec-network-ipv6"/>。
  </para>

  <sect2 xml:id="sec-network-addresses-ip">
   <title>IP 地址</title>
   <para>
    互联网上的每台计算机都有一个唯一的 32 位地址。这些 32 位（或 4 字节）地址通常按<xref linkend="aus-net-basic-ipaddress"/>的第二行所示的格式书写。
   </para>
   <example xml:id="aus-net-basic-ipaddress">
    <title>编写 IP 地址</title>
<screen>IP Address (binary):  11000000 10101000 00000000 00010100
IP Address (decimal):      192.     168.       0.      20</screen>
   </example>
   <para>
    在十进制格式中，四字节以十进制数书写，其间以句点分隔。IP 地址被指派给主机或网络接口。它在全球只能使用一次。这条规则也有例外，但这些例外与下文无关。
   </para>
   <para>
    IP 地址中的点表示分级系统。直到 20 世纪 90 年代，IP 地址仍然有严格的分类。但是，此系统经证实太过死板，已经废止。现已改为使用<emphasis>无类别路由</emphasis> - （CIDR，无类别域间路由）。
   </para>
  </sect2>

  <sect2 xml:id="sec-network-addresses-route">
   <title>网络掩码和路由</title>
   <para>
    网络掩码用于定义子网的地址范围。如果两台主机位于同一子网中，它们可直接相互访问。如果它们位于不同子网中，则需要用于处理此子网的所有通讯的网关地址才能相互访问。要检查两个 IP 地址是否位于同一个子网中，只需分别将两个地址与网络掩码进行<quote>AND</quote>操作。如果结果相同，则两个 IP 地址在同一个本地网络中。如果结果不同，则仅能通过网关连接远程 IP 地址和远程接口。
   </para>
   <para>
    要了解网络掩码如何工作，可查看<xref linkend="tab-net-basic-netmask"/>。网络掩码有 32 位，它确定 IP 地址有多少属于网络。对于所有为 <literal>1</literal> 的位，将它们在 IP 地址中的相应位标记为属于网络。对于所有值为 <literal>0</literal> 的位，标记其属于子网内。这意味着值为 <literal>1</literal> 的位越多，子网就越小。因为网络掩码总是由多个连续的 <literal>1</literal> 位组成，所以也可通过计算网络掩码中的位数来确定。在<xref linkend="tab-net-basic-netmask"/>中，第一个 24 位的网络也可写作 <literal>192.168.0.0/24</literal>。
   </para>
   <example xml:id="tab-net-basic-netmask">
    <title>将 IP 地址链接到网络掩码</title>
<screen>IP address (192.168.0.20):  11000000 10101000 00000000 00010100
Netmask   (255.255.255.0):  11111111 11111111 11111111 00000000
---------------------------------------------------------------
Result of the link:         11000000 10101000 00000000 00000000
In the decimal system:           192.     168.       0.       0

IP address (213.95.15.200): 11010101 10111111 00001111 11001000
Netmask    (255.255.255.0): 11111111 11111111 11111111 00000000
---------------------------------------------------------------
Result of the link:         11010101 10111111 00001111 00000000
In the decimal system:           213.      95.      15.       0</screen>
   </example>
   <para>
    再举个例子：通过同一以太网电缆相连的所有计算机通常都位于同一子网中，可直接访问。即使用交换机或网桥物理分隔该子网，这些主机仍然可以直接访问。
   </para>
   <para>
    仅在网关是为目标网络配的时，才能访问本地子网外部的 IP 地址。通常情况下，只有一个网关处理所有外部流量。然而，也可能为不同的子网配置多个网关。
   </para>
   <para>
    如果配置了网关，所有的外部 IP 包将发送到相应的网关。此网关随后会尝试以相同的方式转发该包（从主机到主机）直到到达目标主机或超过该包的 TTL（存活时间）。
   </para>
   <variablelist xml:id="net-basic-spezial-net">
    <title>特定地址</title>
    <varlistentry>
     <term>
      基础网络地址
     </term>
     <listitem>
      <para>
       这是网络掩码和该网络中的任意地址，如<xref linkend="tab-net-basic-netmask"/> 中的 <literal>Result</literal>（结果）所示。不能将此地址指派给任何主机。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      广播地址
     </term>
     <listitem>
      <para>
       这可以解释为：<quote>访问此子网中的所有主机</quote>。要生成此地址，需要将网络掩码反转为二进制格式，并使用逻辑 OR 链接到基本网络地址。因此，以上示例会生成 192.168.0.255。该地址无法指派给任何主机。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      本地主机
     </term>
     <listitem>
      <para>
       地址 <systemitem class="ipaddress">127.0.0.1</systemitem> 指派给每台主机的<quote>回路设备</quote>。可以使用此地址以及通过 IPv4 定义的完整 <systemitem class="ipaddress">127.0.0.0/8</systemitem> 回写网络中的所有地址为您自己的计算机设置一个连接。如果使用 IPv6，则只有一个回写地址 (<systemitem class="ipaddress">::1</systemitem>)。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    由于 IP 地址必须在全球范围内唯一，您不能随机选择地址。共有三个地址域可用于建立基于 IP 的专用网络。这些地址无法与互联网上的其他地址建立任何连接，因为它们不能通过互联网传送。这些地址域在 RFC 1597 中指定，并且列在<xref linkend="tab-net-basic-privat-net"/> 中。
   </para>
   <table xml:id="tab-net-basic-privat-net">
    <title>专用 IP 地址域</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>
         网络/网络掩码
        </para>
       </entry>
       <entry>
        <para>
         域
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         <systemitem class="ipaddress">10.0.0.0</systemitem>/<systemitem class="netmask">255.0.0.0</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="ipaddress">10.x.x.x</systemitem>
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <systemitem class="ipaddress">172.16.0.0</systemitem>/<systemitem class="netmask">255.240.0.0</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="ipaddress">172.16.x.x</systemitem> – <systemitem class="ipaddress">172.31.x.x</systemitem>
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         <systemitem class="ipaddress">192.168.0.0</systemitem>/<systemitem class="netmask">255.255.0.0</systemitem>
        </para>
       </entry>
       <entry>
        <para>
         <systemitem class="ipaddress">192.168.x.x</systemitem>
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-network-ipv6">
  <title>IPv6 - 新一代互联网</title>

  <important arch="zseries" os="sles">
   <title>IBM Z：IPv6 支持</title>
   <para>
    IBM Z 硬件的 CTC 和 IUCV 网络连接不支持 IPv6。
   </para>
  </important>

  <para>
   由于万维网 (WWW) 的出现，过去十五年内，越来越多的计算机通过 TCP/IP 进行通讯，互联网的规模发生了爆炸性的增长。自从 1990 年在 CERN (<link xlink:href="http://public.web.cern.ch"/>) 任职的 Tim Berners-Lee 开创了 WWW，互联网主机的数量已从几千台猛增至上亿台。
  </para>

  <para>
   如上所述，IPv4 地址只有 32 位。而且还有不少 IP 地址丢失，它们因网络组织结构的原因而无法使用。子网中可用的地址数量是位数的平方减 2。举例来说，某个子网可以有 2 个、6 个或 14 个可用地址。如果要将 128 台主机连接到互联网，您的子网要提供 256 个 IP 地址，其中只有 254 个可用，因为有两个 IP 地址需要供该子网本身的结构使用：广播和基础网络地址。
  </para>

  <para>
   在当前的 IPv4 协议下，DHCP 或 NAT（网络地址转换）是用来避免出现地址短缺的典型机制。这些方法与用来分隔专用地址空间和公用地址空间的规定相结合，肯定能够缓解短缺状况；它们的问题在于不仅配置烦琐，而且也加重了维护的负担。要在 IPv4 网络中设置主机，您需要若干地址项，如主机本身的 IP 地址、子网掩码、网关地址，可能还要提供名称服务器地址。所有这些项都是必需的，而且无法从其他任何地方得到这些项。
  </para>

  <para>
   利用 IPv6，地址的短缺和复杂的配置都将成为过去。以下各节进一步描述了 IPv6 带来的改进和优点，以及如何从旧协议过渡到新协议。
  </para>

  <sect2 xml:id="sec-network-ipv6-adv">
   <title>优点</title>
   <para>
    新协议带来的最为重要同时也最为显著的改进是极大地扩展了可用的地址空间。IPv6 地址由 128 位值而不是传统的 32 位值组成，它提供的 IP 地址数目多达 10 的 15 次方的若干倍。
   </para>
   <para>
    不过，IPv6 与以前的不同不仅限于长度，其内部结构也发生了变化，这种结构可以包含更多的有关系统和系统所属网络的具体信息。有关详细信息，请参见<xref linkend="sec-network-ipv6-address"/>。
   </para>
   <para>
    下面列出了新协议的其他优点：
   </para>
   <variablelist>
    <varlistentry>
     <term>自动配置</term>
     <listitem>
      <para>
       IPv6 使网络能够<quote>即插即用</quote>，这意味着无需进行任何手动配置即可将新配置的系统集成到（本地）网络中。新主机可以使用其自动配置机制，依赖名为<emphasis>邻居发现</emphasis> (ND) 的协议从邻近的路由器提供的信息中得到自己的地址。这种方法不要求管理员参与，并且无需维护用于分配地址的中央服务器，这是 IPv4 无法媲美的（IPv4 中需要使用 DHCP 服务器来自动分配地址）。
      </para>
      <para>
       不过，如果路由器已连接到交换机，则路由器应发送带标志的定期通告，告知网络中的主机彼此应如何交互。有关详细信息，请参见 RFC 2462 和 <systemitem>radvd.conf(5)</systemitem> 手册页以及 RFC 3315。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>移动能力</term>
     <listitem>
      <para>
       利用 IPv6，为一个网络接口同时指派多个地址成为可能。这样用户能够轻松访问多个网络，如同使用移动电话公司提供的国际漫游服务一样轻松自如。当您带着手机出国时，手机只要进入通信区域就会自动登录国外的服务，这样无论您身处何地，用同一个号码都可以联系到您，而且您也能像在国内一样拨打电话。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>安全通讯</term>
     <listitem>
      <para>
       在 IPv4 中，网络安全是一项附加功能。IPv6 则将 IPsec 作为其核心功能之一，允许系统通过安全隧道通讯，避免被互联网上的外来者窃听。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>向后兼容性</term>
     <listitem>
      <para>
       实际上，要想将整个互联网一下子从 IPv4 转换为 IPv6 是不可能的。因此，这两个协议不仅要能在互联网上共存，还应能够共存于一个系统中，这一点至关重要。要实现这一点，一方面两种地址应兼容（IPv4 地址可以轻松转换为 IPv6 地址），另一方面还要使用多个隧道。请参见<xref linkend="sec-network-ipv6-coexist"/>。此外，系统可以依赖<emphasis>双栈 IP</emphasis> 技术同时支持两种协议，这意味着系统中有两种完全分开的网络堆栈，从而避免这两种版本的协议相互影响。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>通过多路广播自定义定制服务</term>
     <listitem>
      <para>
       在 IPv4 中，有些服务（如 SMB）需要向本地网络中的所有主机广播其数据包。IPv6 使服务器能够通过<emphasis>多路广播</emphasis>对主机寻址（即将多个主机作为组的一部分寻址），因而提供了更精细的方法。这种方法与通过<emphasis>广播</emphasis>对所有主机寻址，或通过<emphasis>单路广播</emphasis>单独对每个主机寻址均不同。将哪些主机作为一组来寻址可能要取决于具体的应用程序。可使用一些预定义的组来寻址，例如对所有名称服务器寻址（<emphasis>所有名称服务器多路广播组</emphasis>），或对所有路由器寻址（<emphasis>所有路由器多路广播组</emphasis>）。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-address">
   <title>地址类型和结构</title>
   <para>
    如上所述，当前的 IP 协议存在两个重要限制：IP 地址日益短缺，并且配置网络、维护路由选择表的任务变得越来越复杂繁重。IPv6 通过将地址空间扩展到 128 位解决了第一个问题。通过引入分级地址结构，结合先进的网络地址分配技术和<emphasis>多宿主</emphasis>功能（将多个地址指派给同一个设备，从而支持对多个网络的访问），第二个问题也得到缓解。
   </para>
   <para>
    使用 IPv6 时，了解三种类型的地址十分有用：
   </para>
   <variablelist>
    <varlistentry>
     <term>单路广播</term>
     <listitem>
      <para>
       这类地址只与一个网络接口关联。采用这类地址的包只传递到一个目标。因此，使用单路广播地址可以将包传送到本地网络或互联网上的单个主机。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>多路广播</term>
     <listitem>
      <para>
       这类地址与一组网络接口相关。采用这类地址的包将传递到属于该组的所有目标。多路广播地址主要供特定网络服务使用，用于以有序的方式与特定的主机组通讯。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>任意广播</term>
     <listitem>
      <para>
       这类地址与一组接口相关。采用这类地址的包将根据基础路由协议的原则，传递给该组中与发送方最为接近的成员。任意广播地址便于主机在特定网络区域内找到提供特定服务的服务器。同一类型的所有服务器都具有相同的任意广播地址。在请求服务时，主机会收到路由协议决定的最接近它的服务器的回复。如果出于某种原因此服务器无法回复，协议会自动选择距离稍远一些的服务器，依此类推。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    IPv6 地址分为八组，每组四位数字，代表十六位，采用十六进制表示法。它们之间用冒号 (<literal>:</literal>) 分隔。可以删除某组中的前置零字节，但不能删除组中或组末的零。另一个约定是：连续的零字节若超过四个，则可以省略为双冒号形式。不过，每个地址只允许有一个这样的 <literal>::</literal>。中演示了这种简写表示法，其中的三行全部表示同一地址。<xref linkend="aus-net-ipv6-add"/>
   </para>
   <example xml:id="aus-net-ipv6-add">
    <title>示例 IPv6 地址</title>
<screen>fe80 : 0000 : 0000 : 0000 : 0000 : 10 : 1000 : 1a4
fe80 :    0 :    0 :    0 :    0 : 10 : 1000 : 1a4
fe80 :                           : 10 : 1000 : 1a4</screen>
   </example>
   <para>
    IPv6 地址的每个部分都有明确的功能。前面的字节构成前缀，用于指定地址类型。中间部分是地址的网络部分，但可以不用。地址的结尾构成主机部分。在 IPv6 中，网络掩码是通过在地址末尾的斜杠后指明前缀的长度来定义的。<xref linkend="aus-net-ipv6-addpre"/> 中的地址包含上述信息，即：前 64 位构成地址的网络部分，后 64 位构成地址的主机部分。换言之，<literal>64</literal> 表示网络掩码由左起的 64 个 1 位值构成。与 IPv4 一样，IP 地址使用 AND 结合网络掩码值，以确定主机位于同一子网中还是其他网络中。
   </para>
   <example xml:id="aus-net-ipv6-addpre">
    <title>指定前缀长度的 IPv6 地址</title>
<screen>fe80::10:1000:1a4/64</screen>
   </example>
   <para>
    IPv6 可以识别几种预定义的前缀类型。<xref linkend="list-net-basic-ipv6-prefix"/>中列出了其中的一部分。
   </para>
   <variablelist xml:id="list-net-basic-ipv6-prefix">
    <title>各种 IPv6 前缀</title>
    <varlistentry>
     <term><systemitem class="ipaddress">00</systemitem>
     </term>
     <listitem>
      <para>
       IPv4 地址和 IPv6 上的 IPv4 兼容地址。这些用于与 IPv4 保持兼容。要使用这些地址，仍然需要依赖路由器将 IPv6 包转换为 IPv4 包。有若干特殊地址（如用于回路设备的地址）也采用此前缀。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">2</systemitem> 或 <systemitem class="ipaddress">3</systemitem> 作为第一个数字
     </term>
     <listitem>
      <para>
       可聚合全局单路广播地址。类似 IPv4 的情况，可以指定某个接口作为特定子网的一部分。目前，有以下地址空间：<systemitem class="ipaddress">2001::/16</systemitem>（生产质量地址空间）和 <systemitem class="ipaddress">2002::/16</systemitem>（6to4 地址空间）。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">fe80::/10</systemitem>
     </term>
     <listitem>
      <para>
       链路本地地址。不应路由带有这种前缀的地址，而只能从同一子网中访问。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">fec0::/10</systemitem>
     </term>
     <listitem>
      <para>
       站点本地地址。可以路由这种地址，但只局限在它们所属的组织的网络之内。实际上，这些是相当于当前的专用网络地址空间（如 <systemitem class="ipaddress">10.x.x.x</systemitem>）的 IPv6 地址。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">ff</systemitem>
     </term>
     <listitem>
      <para>
       这些是多路广播地址。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    单路广播地址由三个基本部分组成：
   </para>
   <variablelist>
    <varlistentry>
     <term>公共拓扑结构</term>
     <listitem>
      <para>
       第一部分（也包含上述前缀之一）用于通过公共互联网路由数据包。其中包含提供互联网访问的公司或机构的相关信息。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>站点拓朴结构</term>
     <listitem>
      <para>
       第二部分包含要将包传递到的子网的路由信息。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>接口 ID</term>
     <listitem>
      <para>
       第三部分标识要将包传递到的接口。其中允许使用 MAC。由于 MAC 是硬件厂商编程到设备中的全球唯一的固定标识符，配置过程得到了极大简化。事实上，前 64 个地址位共同构成 <literal>EUI-64</literal> 令牌，后 48 位从 MAC 中提取，其余的 24 位包含有关令牌类型的特殊信息。这样还可以将 <literal>EUI-64</literal> 令牌指派给没有 MAC 的接口，如基于 PPP 的接口。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    在这个基础结构之上，IPv6 还区分五种不同的单路广播地址：
   </para>
   <variablelist>
    <varlistentry>
     <term><systemitem class="ipaddress">::</systemitem> (未指定) </term>
     <listitem>
      <para>
       在首次初始化接口时（此时尚无法通过其他方法确定地址），这类地址可被主机用作其源地址。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">::1</systemitem>（回路） </term>
     <listitem>
      <para>
       回路设备的地址。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv4 兼容地址</term>
     <listitem>
      <para>
       IPv6 地址由 IPv4 地址和 96 个零位组成的前缀构成。这类兼容地址用于隧道通讯进程（请参见<xref linkend="sec-network-ipv6-coexist"/>），以便 IPv4 和 IPv6 主机与在纯 IPv4 环境中操作的其他主机通讯。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>映射到 IPv6 的 IPv4 地址</term>
     <listitem>
      <para>
       这类地址以 IPv6 表示法指定纯 IPv4 地址。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>本地地址</term>
     <listitem>
      <para>
       有两类地址可供本地使用：
      </para>
      <variablelist>
       <varlistentry>
        <term>链路本地</term>
        <listitem>
         <para>
          这类地址只能在本地子网中使用。不能具有此类源地址或目标地址的包路由到互联网或其他子网。这些地址包含特殊的前缀 (<systemitem class="ipaddress">fe80::/10</systemitem>) 和网卡的接口 ID，中间部分为零字节。这类地址在自动配置过程中使用，用于与同一子网中的其他主机通讯。
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>站点本地</term>
        <listitem>
         <para>
          可以将采用这类地址的包路由到其他子网，但不能路由到更广阔的互联网 — 不能跨越组织自身的网络。这类地址用于内部网，相当于 IPv4 定义的专用地址空间。其中包含特殊的前缀 (<systemitem class="ipaddress">fec0::/10</systemitem>)、接口 ID，及指定子网 ID 的 16 位字段。其余部分也会填入零字节。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    作为 IPv6 引进的全新功能，每个网络接口通常可以获得多个 IP 地址，这个功能的优点即在于：可以通过同一接口访问多个网络。其中一个网络可以用 MAC 和已知前缀进行全自动配置，这样当启用 IPv6 （使用链路本地地址）后，即可访问本地网络中的所有主机。由于其中使用了 MAC，所用的任何 IP 地址都是全球唯一的。地址中只有指定<emphasis>站点拓朴结构</emphasis>和<emphasis>公共拓朴结构</emphasis>的部分才是可变部分，这取决于主机当前运行所在的实际网络。
   </para>
   <para>
    要使主机在不同网络间切换，主机至少需要两个地址。其中之一 - <emphasis>本地地址</emphasis>，不仅包含接口 ID 而且包含该主机通常所属的本地网络的标识符（以及相应的前缀）。本地地址是静态地址，因此一般不变。所有要发送到移动主机的包仍可以传递到该主机，不管它是在本地网络还是其他任何网络中操作。这一点得益于 IPv6 引进的全新功能，如<emphasis>无状态自动配置</emphasis>和<emphasis>邻居发现</emphasis>。除本地地址之外，移动主机还获得一个或多个额外的地址，这些地址属于该主机漫游到的外地网络。这些地址称为<emphasis>转交</emphasis>地址。本地网络有一种功能，可以在主机漫游到外地时转发要发送给该主机的所有包。在 IPv6 环境中，这项任务由<emphasis>本地代理</emphasis>来完成，该代理可以接收要发送到本地地址的所有包，并通过隧道进行转发。另一方面，发送到转交地址的那些包可直接转发到移动主机，而不必进行任何特殊的迂回处理。
   </para>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-coexist">
   <title>IPv4 与 IPv6 并存</title>
   <para>
    将与互联网相连的所有主机从 IPv4 迁移到 IPv6 是一个逐步的过程。这两种协议将在未来一定时间内并存。通过<emphasis>双栈</emphasis>技术来实施这两种协议，可以在同一系统上同时支持这两种协议。但这仍然没有解决启用了 IPv6 的主机如何与 IPv4 主机通讯，以及应如何通过当前的网络（绝大部分都基于 IPv4）传输 IPv6 数据包的问题。最好的解决方案就是提供隧道处理功能和兼容地址（请参见 <xref linkend="sec-network-ipv6-address"/>）。
   </para>
   <para>
    IPv6 主机多少孤立于（全球）IPv4 网络，它可通过隧道通讯：IPv6 包封装为 IPv4 包，以便在 IPv4 网络中移动。这种在两个 IPv4 主机间的连接被称为<emphasis>隧道</emphasis>。要实现这种功能，包必须包含 IPv6 目标地址（或相应的前缀），以及隧道接收端远程主机的 IPv4 地址。根据主机管理员间的协议，可以手动配置基本的隧道。这也称作<emphasis>静态隧道</emphasis>。
   </para>
   <para>
    但是，静态隧道的配置和维护往往过于烦琐，不能适应日常通讯需要。因此，IPv6 提供了三种不同的<emphasis>动态隧道</emphasis>方法：
   </para>
   <variablelist>
    <varlistentry>
     <term>6over4</term>
     <listitem>
      <para>
       IPv6 包被自动封装为 IPv4 包，并通过支持多路广播的 IPv4 网络发送。这种方法诱导 IPv6 将整个网络（互联网）视为一个巨大的局域网 (LAN)。这样即可自动确定 IPv4 隧道的接收端。不过，这种方法的可扩展性不够好，而且不易推行，因为 IP 多路广播在互联网上尚未普及。因此，它提供的解决方案仅适用于支持多路广播的小型公司网络或机构网络。RFC 2529 中对这种方法作出了规定。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>6to4</term>
     <listitem>
      <para>
       利用这种方法，可以从 IPv6 地址自动生成 IPv4 地址，从而支持孤立的 IPv6 主机通过 IPv4 网络进行通讯。不过，用这种方法在孤立的 IPv6 主机和互联网之间通讯时存在一些问题。RFC 3056 中对这种方法进行了描述。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv6 隧道中介程序</term>
     <listitem>
      <para>
       这种方法依赖特殊的服务器为 IPv6 主机提供专用隧道。RFC 3053 中对此进行了描述。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-config">
   <title>配置 IPv6</title>

   <para>
    要配置 IPv6，通常无需在各个工作站上执行任何更改。默认情况下启用 IPv6。要在已安装系统上禁用或启用 IPv6，请使用 YaST <guimenu>网络设置</guimenu>模块。在<guimenu>全局选项</guimenu>选项卡上，根据需要选择或取消选择<guimenu>启用 IPv6</guimenu> 选项。要暂时启用直至下次重引导，请以 <systemitem class="username">root</systemitem> 身份输入 <command>modprobe</command> <option>-i ipv6</option>。装载 IPv6 模块后无法将其卸载。
   </para>
   <para>
    由于 IPv6 使用自动配置，将给网卡指派<emphasis>链路-本地</emphasis>网络中的地址。一般不在工作站上管理路由选择表。工作站可以使用<emphasis>路由器广告协议</emphasis>查询网络路由器，了解应实施的前缀和网关。使用 radvd 程序可以设置 IPv6 路由器。此程序会通知工作站对 IPv6 地址使用哪个前缀和哪个路由器。或者，可以使用 zebra/quagga 自动配置两个地址和路由选择。
   </para>

   <para>
    有关如何使用 <filename>/etc/sysconfig/network</filename> 文件设置各种隧道的信息，请参见 <literal>ifcfg-tunnel</literal> 的手册页 (<command>man ifcfg-tunnel</command>)。
   </para>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-moreinfo">
   <title>更多信息</title>
   <para>
    上文的概述中并未全面论述 IPv6 这一主题。如果要深入了解这种较新的协议，请参考以下联机文档和书籍：
   </para>
   <variablelist>
    <varlistentry>
     <term><link xlink:href="http://www.ipv6.org/"/>
     </term>
     <listitem>
      <para>
       学习 IPv6 知识的起点。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="http://www.ipv6day.org"/>
     </term>
     <listitem>
      <para>
       启动您自己的 IPv6 网络所需的所有信息。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="http://www.ipv6-to-standard.org/"/>
     </term>
     <listitem>
      <para>
       已启用 IPv6 的产品列表。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="http://www.bieringer.de/linux/IPv6/"/>
     </term>
     <listitem>
      <para>
       在此可找到 Linux IPv6-HOWTO 以及许多与该主题有关的链接。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>RFC 2460</term>
     <listitem>
      <para>
       有关 IPv6 的基础 RFC。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv6 essentials</term>
     <listitem>
      <para>
       Silvia Hagen 所著的 <emphasis>IPv6 Essentials</emphasis>(ISBN 0-596-00125-8) 中描述了该主题的所有重要方面。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-network-nameres">
  <title>名称解析</title>

  <para>
   DNS 有助于将 IP 地址指派给一个或多个名称，并将名称指派给 IP 地址。在 Linux 中，这种转换通常由一种特殊的称为 bind 的软件来完成。负责这种转换的计算机称为<emphasis>名称服务器</emphasis>。这些名称构成了具有层次结构的系统，各个名称组成部分之间用句点分隔。不过，这个名称层次与上述 IP 地址层次无关。
  </para>

  <para>
   考虑以 <systemitem class="fqdomainname">hostname.domain</systemitem> 格式书写的完整名称，如 <systemitem class="fqdomainname">jupiter.example.com</systemitem>。完整名称，即<emphasis>完全限定的域名</emphasis> (FQDN)，由主机名和域名 (<systemitem class="domainname">example.com</systemitem>) 组成。后者还包含<emphasis>顶级域</emphasis>或 TLD (<systemitem class="domainname">com</systemitem>)。
  </para>

  <para>
   TLD 的指派由于历史原因已经变得十分混乱。传统的指派方法是美国所用的三字母域名，而世界其他地方采用的标准是双字母 ISO 国家/地区代码。此外，2000 年还引入了较长的 TLD 来表示特定的活动领域（例如 <systemitem class="domainname">.info</systemitem>、<systemitem class="domainname">.name</systemitem>、<systemitem class="domainname">.museum</systemitem>）。
  </para>

  <para>
   在互联网发展的早期阶段（ 1990 年之前），文件 <filename>/etc/hosts</filename> 被用来储存互联网上表示的所有计算机的名称。后来事实证明随着接入互联网的计算机与日俱增，这种方法很快就行不通了。为此人们开发了一个分散式数据库，以十分分散的方式储存主机名。这个数据库类似名称服务器，它并不储存与互联网上的所有主机相关的数据，但可以向其他名称服务器发送请求。
  </para>

  <para>
   位于层次顶级的是 <emphasis>root 名称服务器</emphasis>。这些 root 名称服务器管理顶级域，并由网络信息中心 (NIC) 运行。每个 root 名称服务器都了解负责特定顶级域的名称服务器。有关顶级域 NIC 的信息，请参见 <link xlink:href="http://www.internic.net"/>。
  </para>

  <para>
   DNS 不仅可以解析主机名，还能够为整个域识别出负责接收电子邮件的主机，即<emphasis>邮件交换器 (MX)</emphasis>。
  </para>

  <para>
   为解析 IP 地址，您的计算机必须了解至少一个名称服务器及其 IP 地址。使用 YaST 可轻松指定此类名称服务器。<phrase os="sles;osuse">有关如何在 <phrase role="productname"><phrase os="sles">SUSE® Linux Enterprise Server</phrase></phrase> 中配置针对名称服务器的访问，请参见<xref linkend="sec-network-yast-change-host"/>。有关如何设置您自己的名称服务器的信息，请参见<xref linkend="cha-dns"/>。</phrase>
  </para>

  <para>
   <literal>whois</literal> 协议与 DNS 密切相关。使用此程序可以快速找出负责给定域的服务器。
  </para>



  <note>
   <title>MDNS 和 .local 域名</title>
   <para>
    <literal>.local</literal> 顶级域由解析程序视为 link-local 域。DNS 请求作为多路广播 DNS 请求（而不是常规 DNS 请求）发送。如果已在名称服务器配置中使用 <literal>.local</literal> 域，必须在 <filename>/etc/host.conf</filename> 中关闭此选项。有关更多信息，请参见 <filename>host.conf</filename> 手册页。
   </para>
   <para>
    要在安装期间关闭 MDNS，请使用 <literal>nomdns=1</literal> 引导参数。
   </para>
   <para>
    有关多路广播 DNS 的详细信息，请参见 <link xlink:href="http://www.multicastdns.org"/>。
   </para>
  </note>
 </sect1>
 <xi:include href="net_yast.xml"/>
 
 <xi:include href="net_wicked.xml"/>
 <xi:include href="net_router.xml"/>
 <xi:include href="net_bonding.xml"/>
 <xi:include href="net_teaming.xml"/>
 <xi:include href="net_sdn.xml"/>
</chapter>
