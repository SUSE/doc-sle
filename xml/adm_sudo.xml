<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter version="5.0" xml:id="cha.adm.sudo"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>sudo <!-- TODO: Better title --></title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker></dm:bugtracker>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>

  <para>
      <quote>With great power comes great responsibility</quote>:
      &sudo; provides the means to only
      use the power of the super user when needed.
  </para>

  <sect1 xml:id="sec.adm.sudo.intro">
    <title>What is &sudo;?</title>
    
    <para>
      TODO
    </para>
    
    <sect2>
      <title>Rationale</title>
      <para>
        Many commands and system utilities need to be run as &rootuser;
        to modify files and/or perform tasks that only the super user is allowed to.

        For security purposes and to avoid running dangerous commands accidentially,
        it is generally disregarded to log in as &rootuser; directly.
        Instead, it is recommended to work as a normal, unprivileged, user and
        use the &sudo; command to run commands with elevated privileges.
      </para>
    </sect2>
    
    <sect2>
      <title>Difference between &sudo; and <command>su</command></title>
      <para>
        In its default configuration, &sudo; is, apart of different options,
        similiar to <command>su</command>.
        Compared to <command>su</command>, &sudo; offers the possibility to allow users
        to run commands with privileges of any other user in a highly configurable manner.
        While <command>su</command> uses PAM for authenticating as target user,
        &sudo; makes it possible to authenticate with your own credentials,
        increasing security by not having to share the &rootuser; password.
        
        For instance, you can allow members of the group &examplegroup; to run a command <command>frobnicate</command>
        as &exampleuserII;, with the restriction that no arguments are specified.
        This can be used to assign roles with specific abilities to certain users and groups.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="sec.adm.sudo.usage">
    <title>Basic &sudo; usage</title>
    
    <para>
      TODO
    </para>
    
    <sect2>
      <title>Running a single command</title>
      <para>
        Logged in as normal user, you can run any command as &rootuser; by prepending it with &sudo;.
        It will prompt for the root password and, if authenticated sucessfully, run the command as &rootuser;:
        <screen>
          &prompt.user;id -un
          tux
          &prompt.user;sudo id -un
          root's password:<co xml:id="sudo.usage.pw"/>
          root
          &prompt.user;id -un
          tux<co xml:id="sudo.usage.after"/>
          &prompt.user;sudo id -un
          <co xml:id="sudo.usage.nopw"/>
          root
        </screen>
        <calloutlist>
          <callout arearefs="sudo.usage.pw">
            <para>The password is not shown during input, neither as clear text nor as bullets.</para>
          </callout>
          <callout arearefs="sudo.usage.after">
            <para>Only the single command is run with elevated privileges, those after &sudo;
            are run as normal user again.</para>
          </callout>
          <callout arearefs="sudo.usage.nopw">
            <para>For a limited amount of time you do not need to enter the &rootuser; password again.</para>
          </callout>
        </calloutlist>
      </para>
      
      <para>
        File redirection does not directly work that way:
        
        <screen>
          &prompt.user; sudo echo s &gt; /proc/sysrq-trigger 
          bash: /proc/sysrq-trigger: Permission denied
          &prompt.user; sudo cat &lt; /proc/1/maps
          bash: /proc/1/maps: Permission denied
        </screen>
        
        Only the <command>echo</command>/<command>cat</command> binary is run with elevated privileges,
        while the redirection is performed by the user's shell.
        
        You can either start a shell like in <xref linkend="sec.sudo.shell"/>
        or utilize the <command>dd</command> utility instead:
        
        <screen>
          echo s | sudo dd of=/proc/sysrq-trigger
          sudo dd if=/proc/1/maps | cat <!-- TODO: Better example! -->
        </screen>
      </para>
    </sect2>

    <sect2 xml:id="sec.sudo.shell">
      <title>Starting a shell</title>
      <para>
        Having to prepend &sudo; to every command can be cumbersome.
        While you can specify a shell as a command: <command>sudo bash</command>,
        there are two options specifically for this purpose.

        <variablelist>
          <varlistentry>
            <term>
              <literal>sudo -s (&lt;command&gt;)</literal>
            </term>
            <listitem>
              <para>
                Starts a shell specified by the <envar>SHELL</envar> environment variable or the target user's settings.
                If a command is given, it is passed to the shell (with the <option>-c</option> option),
                else the shell is run in interactive mode.
              </para>
              <screen>
                <prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -i
                root's password:
                <prompt>root:/home/tux # </prompt>exit
                <prompt>&exampleuser_plain;:~ &gt; </prompt>
              </screen>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>
              <literal>sudo -i (&lt;command&gt;)</literal>
            </term>
            <listitem>
              <para>
                Like <option>-s</option>, but start the shell as login shell.
                This means that the shell's start-up files (<filename>.profile</filename> etc.) are read
                and the current working directory is set to the target user's <envar>HOME</envar>.
              </para>
              <screen>
                <prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -i
                root's password:
                <prompt>root:~ # </prompt>exit
                <prompt>&exampleuser_plain;:~ &gt; </prompt>
              </screen>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
    </sect2>
    
    <sect2>
      <title>Environment variables</title>
      <para>By default, &sudo; does not propagate environment variables:
        <screen>
          &prompt.user;ENVVAR=test env | grep ENVVAR
          ENVVAR=test
          &prompt.user;ENVVAR=test sudo env | grep ENVVAR
          root's password:
          <co xml:id="sudo.env.novar"/>
          &prompt.user;
        </screen>
        <calloutlist>
          <callout arearefs="sudo.env.novar">
            <para>
              The empty output shows that the environment variable <envar>ENVVAR</envar>
              did not exist in the context of the command run with &sudo;.
            </para>
          </callout>
        </calloutlist>
        </para>
    </sect2>
  </sect1>

  <sect1>
    <title>Configuring &sudo;</title>
    
    <para>
      &sudo; is a very flexible tool with extensive configuration.
    </para>
    
    <sect2>
      <title>Editing the configuration files</title>
      <para>
        The main policy configuration file for &sudo; is <filename>/etc/sudoers</filename>.
        As it is possible to lock yourself out of the system if there are any errors in that file, it is
        strongly recommended to use the <command>visudo</command> for editing.
        It will prevent simultaneous changes to the opened file and check for syntax errors before saving.
      </para>
      <para>
        Despite its name, you can also use editors other than vi by setting the <envar>EDITOR</envar>
        environment variable, for example:
        <screen>
          sudo EDITOR=<replaceable>/usr/bin/nano</replaceable> visudo
        </screen>
      </para>
      <para>
        However, the <filename>/etc/sudoers</filename> file itself is supplied by the system packages and
        modifications may break on updates. Therefore, it is recommended to put any custom configuration into
        the <filename>/etc/sudoers.d/</filename> directory. Any file in there is automatically included.
        To edit a file in that subdirectory, run:
        <screen>
          sudo visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable>
          <!-- Is that possible? --><prompt>Or, alternatively</prompt>
          sudo EDITOR=<replaceable>/usr/bin/nano</replaceable> visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable>
        </screen>

        For more info on the <command>visudo</command> command, run <command>man visudo</command>.
      </para>
    </sect2>
    
    <sect2>
      <title>Basic sudoers syntax</title>
      <para>
        For detailed information about the <filename>/etc/sudoers</filename> configuration file, consult
        <command>man 5 sudoers</command>.
      </para>
    </sect2>

    <sect2>
      <title>Use case: &sudo; without &rootuser; password</title>
      <para>
        In some scenarios it is favourable
      </para>
    </sect2>
  </sect1>
    
  <sect1 xml:id="sec.adm.sudo.moreinfo">
    <title>More Information</title>

    <para>
    A quick overview about the available command line switches can be retrieved
    by <command>sudo --help</command>. An explanation and other important information
    can be found in the man page: <command>man 8 sudo</command>.
    More about this topic can be found in the following list:
    </para>
    <!-- TODO: List. -->
  </sect1>
</chapter>
