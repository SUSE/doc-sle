<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<!-- FATE#320468 [DOCU] Create a network teaming (teamd) section in
                 administration guide doc
     Compare to sec.bond
-->
<?xml-model href="urn:x-suse:rng:geekodoc5-flat.rnc" type="application/relax-ng-compact-syntax"?>

<sect1 version="5.1" xml:id="sec.team"
 xmlns="http://docbook.org/ns/docbook"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Setting Up Team Devices for &netteam;</title>
  <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
  </info>
  <remark>toms 2016-06-16: FATE#320468</remark>
  <para>
   The term <quote>link aggregation</quote> is the general term which
   describes combining (or aggregating) a network connection to provide a
   logical layer. Sometimes you find the terms <quote>channel teaming</quote>,
   <quote>ethernet bonding</quote>, <quote>port truncating</quote> etc.
   which are synonyms and refer to the same concept.
  </para>
 <para>
  This concept is widley known as <quote>bonding</quote> and originally
  integrated into the Linux kernel (see <xref linkend="sec.bond"/> for the
  original implementation). The term <emphasis>&netteam;</emphasis>
  is used to refer to the new implementation of this concept.
 </para>
 <para>
  The main difference between bonding and &netteam; is that teaming
  supplies a set of small kernel modules which are responsible for providing
  an interface for teamd instances.
  Everything else is handled in user space.
  This is different from the original bonding implementation which contains
  all of its functionality exclusively in the kernel.
 </para>
 <para>
  Both implementation, bonding and &netteam; can be used in parallel.
  &netteam; is an alternative to the existing bonding implementation. It does
  not replace bonding.
 </para>
 <para>
  &netteam; can be used for different use cases. The two most important
  use cases are explained later and involve:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    Load balancing between different network devices.
   </para>
  </listitem>
  <listitem>
   <para>
    Failover from one network device to another in case one of the devices
    should fail.
   </para>
  </listitem>
 </itemizedlist>
 <para>
  <remark>toms 2016-06-21: FATE#320947 for Teaming in/with YaST</remark>
  Currently, there is no &yast; module to support creating a teaming device.
  You need to configure &netteam; manually. The general procedure is shown
  below which can be applied for all your &netteam; configuration:
 </para>

 <procedure xml:id="pro.team.general">
  <title>General Procedure</title>
  <step>
   <para>
    Make sure you have all the necessary packages installed. Install the
    packages <package>libteam-tools</package>, <package>libteamdctl0</package>,
    <package>libteamdctl0</package>, and <package>python-libteam</package>.
   </para>
  </step>
  <step>
   <para>
    Create a configuration file under <filename>/etc/sysconfig/network/</filename>.
    Usually it will be <filename>ifcfg-team0</filename>. If you need more than
    one  &netteam; device, give them ascending numbers.
   </para>
   <para>
    This configuration file contains several variables which are explained in
    the manpages (see <command>man ifcfg</command> and
    <command>man ifcfg-team</command>).
   </para>
  </step>
  <step>
   <para>
    Remove the configuration files of the interfaces which will be used for
    the teaming device (usually <filename>ifcfg-eth0</filename> and
    <filename>ifcfg-eth1</filename>).
   </para>
   <para>
    It is recommended to make a backup and remove both files. Wicked will
    recreate the configuration files with the neccessary parameters for teaming.
   </para>
  </step>
  <step>
   <para>
    Optionally, check if everything is included in Wicked's configuration file:
   </para>
   <screen>wicked show-config</screen>
  </step>
  <step>
   <para>
    Start the &netteam; device <systemitem class="service">team0</systemitem>:
   </para>
   <screen>wicked all ifup team0</screen>
   <para>
    In case you need additional debug information, use the option
    <option>--debug all</option> after the <command>all</command> subcommand.
   </para>
  </step>
  <step>
    <para>
     Check the status of the &netteam; device. This can be done by the
     following commands:
    </para>
   <itemizedlist>
    <listitem>
     <para>
      Get the state of the teamd instance from Wicked:
     </para>
     <screen>wicked ifstatus --verbose team0</screen>
    </listitem>
    <listitem>
     <para>
      Get the state of the entire instance:
     </para>
     <screen>teamdctl team0 state</screen>
    </listitem>
    <listitem>
     <para>
      Get the systemd state of the teamd instance:
     </para>
     <screen>systemctl status teamd@team0</screen>
    </listitem>
   </itemizedlist>
   <para>
    Each of them shows a slightly different view depending on your needs.
   </para>
  </step>
  <step>
   <para>
    In case you need to change something in the <filename>ifcfg-team0</filename>
    file afterwards, reload its configuration with:
   </para>
   <screen>wicked ifreload team0</screen>
  </step>
 </procedure>

 <para>
  Do <emphasis>not</emphasis> use <command>systemctl</command> for starting or
  stopping the teaming device! Instead, use the <command>wicked</command>
  command as shown above.
 </para>

 <sect2 xml:id="sec.team.lb">
  <title>Use Case: Loadbalancing with &netteam;</title>
  <para>
   Loadbalancing is used to improve bandwidth.
   Use the following configuration file to create a &netteam; device with
   loadbalancing capabilities. Proceed with <xref linkend="pro.team.general"/>
   to setup the device. Check the output with <command>teamdctl</command>.
  </para>

  <example xml:id="ex.team.lb">
   <title>Configuration for Loadbalancing with &netteam;</title>
   <screen>STARTMODE=auto <co xml:id="co.team.lb.startmode"/>
BOOTPROTO=static <co xml:id="co.team.lb.boot-and-ip"/>
IPADDRESS="&exampledomain1ip;.1/24" <xref linkend="co.team.lb.boot-and-ip"/>
IPADDR6="fd00:deca:fbad:50::1/64" <xref linkend="co.team.lb.boot-and-ip"/>

TEAM_RUNNER="loadbalance" <co xml:id="co.team.lb.loadbalance"/>
TEAM_LB_TX_HASH="ipv4,ipv6,eth,vlan"
TEAM_LB_TX_BALANCER_NAME="basic"
TEAM_LB_TX_BALANCER_INTERVAL="100"

TEAM_PORT_DEVICE_0="eth0" <co xml:id="co.team.lb.dev"/>
TEAM_PORT_DEVICE_1="eth1" <xref linkend="co.team.lb.dev"/>

TEAM_LW_NAME="ethtool" <co xml:id="co.team.lb.name"/>
TEAM_LW_ETHTOOL_DELAY_UP="10" <co xml:id="co.team.lb.ethtool.delay"/>
TEAM_LW_ETHTOOL_DELAY_DOWN="10" <xref linkend="co.team.lb.ethtool.delay"
/></screen>
   <!-- Sync this calloutlist with the second example. Mostly the
        explanations are the same.
   -->
   <calloutlist>
    <callout arearefs="co.team.lb.startmode">
     <para>
      Controls the start of the teaming device. The value of <literal>auto</literal>
      means, the interface will be set up as soon as the network service
      is available and will be started automatically on every reboot.
     </para>
     <para>
      In case you need to control the device yourself (and not to start
      automatically), set <varname>STARTMODE</varname> to
      <literal>manual</literal>.
     </para>
    </callout>
    <callout arearefs="co.team.lb.boot-and-ip">
     <para>
      Sets a static IP address (here <systemitem
       class="ipaddress">&exampledomain1ip;.1</systemitem> for IPv4 and
      <systemitem class="ipaddress">fd00:deca:fbad:50::1</systemitem> for IPv6).
     </para>
     <para>
      If the &netteam; device should use a dynamic IP address, set
      <literal>BOOTPROTO="dhcp"</literal> and remove (or comment) the line
      with <varname>IPADDRESS</varname> and <varname>IPADDR6</varname>.
     </para>
    </callout>
    <callout arearefs="co.team.lb.loadbalance">
     <para>
      Sets <varname>TEAM_RUNNER</varname> to <literal>loadbalance</literal>
      to activate the loadbalancing mode.
     </para>
    </callout>
    <callout arearefs="co.team.lb.dev">
     <para>
      Specifies one or more devices which should be aggregated to create the
      &netteam; device.
     </para>
    </callout>
    <callout arearefs="co.team.lb.name">
     <para>
      Defines a link watcher to monitor state of subordinate devices.
      The default value <literal>ethtool</literal> checks only if the device
      is up and accessible. This makes this check fast enough. However, it
      does not check if the device can really send or receive packets.
     </para>
     <para> If you need a higher convidence in the connection, use the
       <literal>arp_ping</literal> option. This send pings to an arbitrary host
      (configured in the <varname>TEAM_LW_ARP_PING_TARGET_HOST</varname>
      variable). Only if the replies are received, the &netteam; device is
      considered to be up. </para>
    </callout>
    <callout arearefs="co.team.lb.ethtool.delay">
     <para>
      Defines the delay in milisecons between the link coming up (or down)
      and the runner being notified.
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect2>

 <sect2 xml:id="sec.team.dhcp">
  <title>Use Case: Failover with &netteam;</title>
  <para>
   Failover is used to ensure high availability of a critical &netteam;
   device by involving a parallel backup network device. The backup network
   device is running all the time and takes over when the main device should
   fail.
  </para>
  <para>
   Use the following configuration file to create a &netteam; device with
   failover capabilities. Proceed with <xref linkend="pro.team.general"/>
   to setup the device. Check the output with <command>teamdctl</command>.
  </para>

  <example xml:id="ex.team.failover">
   <title>Configuration for DHCP &netteam; Device</title>
       <screen>STARTMODE=auto <co xml:id="co.team.failover.startmode"/>
BOOTPROTO=static <co xml:id="co.team.failover.boot-and-ip"/>
IPADDR="&exampledomain1ip;.2/24" <xref linkend="co.team.failover.boot-and-ip"/>
IPADDR6="fd00:deca:fbad:50::2/64" <xref linkend="co.team.failover.boot-and-ip"/>

TEAM_RUNNER=activebackup <co xml:id="co.team.failover.activebackup"/>
TEAM_PORT_DEVICE_0="eth0" <co xml:id="co.team.failover.dev"/>
TEAM_PORT_DEVICE_1="eth1" <xref linkend="co.team.failover.dev"/>

TEAM_LW_NAME=ethtool <co xml:id="co.team.failover.name"/>
TEAM_LW_ETHTOOL_DELAY_UP="10" <co xml:id="co.team.failover.ethtool.delay"/>
TEAM_LW_ETHTOOL_DELAY_DOWN="10" <xref linkend="co.team.failover.ethtool.delay"
/></screen>
   <calloutlist>
    <callout arearefs="co.team.failover.startmode">
     <para>
      Controls the start of the teaming device. The value of <literal>auto</literal>
      means, the interface will be set up as soon as the network service
      is available and will be started automatically on every reboot.
     </para>
     <para>
      In case you need to control the device yourself (and not to start
      automatically), set <varname>STARTMODE</varname> to
      <literal>manual</literal>.
     </para>
    </callout>
    <callout arearefs="co.team.failover.boot-and-ip">
     <para>
      Sets a static IP address (here <systemitem
       class="ipaddress">&exampledomain1ip;.2</systemitem> for IPv4 and
      <systemitem class="ipaddress">fd00:deca:fbad:50::2</systemitem> for IPv6).
     </para>
     <para>
      If the &netteam; device should use a dynamic IP address, set
      <literal>BOOTPROTO="dhcp"</literal> and remove (or comment) the line
      with <varname>IPADDRESS</varname> and <varname>IPADDR6</varname>.
     </para>
    </callout>
    <callout arearefs="co.team.failover.activebackup">
     <para>
      Sets <varname>TEAM_RUNNER</varname> to <literal>activebackup</literal>
      to activate the failover mode.
     </para>
    </callout>
    <callout arearefs="co.team.failover.dev">
     <para>
      Specifies one or more devices which should be aggregated to create the
      &netteam; device.
     </para>
    </callout>
    <callout arearefs="co.team.failover.name">
     <para>
      Defines a link watcher to monitor state of subordinate devices.
      The default value <literal>ethtool</literal> checks only if the device
      is up and accessible. This makes this check fast enough. However, it
      does not check if the device can really send or receive packets.
     </para>
     <para> If you need a higher convidence in the connection, use the
       <literal>arp_ping</literal> option. This send pings to an arbitrary host
      (configured in the <varname>TEAM_LW_ARP_PING_TARGET_HOST</varname>
      variable). Only if the replies are received, the &netteam; device is
      considered to be up. </para>
    </callout>
    <callout arearefs="co.team.failover.ethtool.delay">
     <para>
      Defines the delay in milisecons between the link coming up (or down)
      and the runner being notified.
     </para>
    </callout>
   </calloutlist>
  </example>
 </sect2>

</sect1>
