<?xml version="1.0" encoding="UTF-8"?>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:base="suse_sw_packages.xml" version="5.0" xml:id="sec-suse-packages">
 <title>特殊軟體套件的相關資訊</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>
  後續章節提供了有關以下工具的基本資訊：<systemitem class="resource">bash</systemitem>、<systemitem class="resource">cron</systemitem>、<systemitem class="resource">logrotate</systemitem>、<systemitem class="resource">locate</systemitem>、<systemitem class="resource">ulimit</systemitem> 和 <systemitem class="resource">free</systemitem>。

 </para>

 <sect2 xml:id="sec-suse-packages-bash">
  <title><systemitem class="resource">bash</systemitem> 套件和 <filename>/etc/profile</filename></title>
  <para>
   Bash 是預設的系統外圍程序。如果以它做為登入外圍程序，可以讀取多種啟始化檔案。Bash 會以它們顯示在清單中的順序來處理。
  </para>
  <orderedlist spacing="normal">
   <listitem>
    <para>
     <filename>/etc/profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.profile</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>/etc/bash.bashrc</filename>
    </para>
   </listitem>
   <listitem>
    <para>
     <filename>~/.bashrc</filename>
    </para>
   </listitem>
  </orderedlist>
  <para>
   在 <filename>~/.profile</filename> 或 <filename>~/.bashrc</filename> 中進行自訂設定。為了確保系統能正確處理這些檔案，需要將基本設定從 <filename>/etc/skel/.profile</filename> 或 <filename>/etc/skel/.bashrc</filename> 複製到使用者的主目錄。建議在更新後從 <filename>/etc/skel</filename> 複製這些設定。請執行下列的外圍程式指令，以避免遺失您調整過的設定。
  </para>
<screen><prompt>&gt; </prompt>mv ~/.bashrc ~/.bashrc.old
<prompt>&gt; </prompt>cp /etc/skel/.bashrc ~/.bashrc
<prompt>&gt; </prompt>mv ~/.profile ~/.profile.old
<prompt>&gt; </prompt>cp /etc/skel/.profile ~/.profile</screen>
  <para>
   然後將個人的調整從 <literal>*.old</literal> 檔案複製回去。
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-packages-cron">
  <title><phrase>cron</phrase> 套件</title>
  <para>
   使用 <systemitem class="daemon">cron</systemitem> 可在預先定義的時間自動在背景中執行指令。<systemitem class="daemon">cron</systemitem> 使用格式經過特別設定的時間表，並且該工具隨附了幾個預設的時間表。使用者也可以視需要指定自訂的表。
  </para>
  <para>
   cron 表格位於 <filename>/var/spool/cron/tabs</filename>。<filename>/etc/crontab</filename> 做為整個系統的 cron 表格。在時間表格之後、指令之前，輸入要直接執行指令的使用者名稱。在<xref linkend="ex-suse-packages-cron"/>中，輸入的是 <systemitem class="username">root</systemitem>。位於 <filename>/etc/cron.d</filename> 的套件專用表格具有相同的格式。請參閱 <command>cron</command> 手冊頁 (<command>man cron</command>)。
  </para>
  <example xml:id="ex-suse-packages-cron">
   <title>/etc/crontab 中的項目</title>
<screen>1-59/5 * * * *   root   test -x /usr/sbin/atrun &amp;&amp; /usr/sbin/atrun</screen>
  </example>
  <para>
   不能透過呼叫指令 <command>crontab -e</command> 來編輯 <filename>/etc/crontab</filename>。這個檔案必須直接載入編輯器中，然後進行修改和儲存。
  </para>
  <para>
   有些套件會將外圍程序指令碼安裝到 <filename>/etc/cron.hourly</filename>、<filename>/etc/cron.daily</filename>、<filename>/etc/cron.weekly</filename> 和 <filename>/etc/cron.monthly</filename> 目錄中，由 <filename>/usr/lib/cron/run-crons</filename> 控制這些指令碼的執行。<filename>/usr/lib/cron/run-crons</filename> 每隔 15 分鐘會從主表格 (<filename>/etc/crontab</filename>) 中執行一次。這會保證被忽略的程序可以在適當的時間執行。
  </para>
  <para>
   若要依自訂時間執行 <filename>hourly</filename>、<filename>daily</filename> 或其他定期維護指令碼，請使用 <filename>/etc/crontab</filename> 項目定期移除時戳檔案 (請參閱 <xref linkend="ex-suse-packages-cron-time"/>，它會在每個整點之前移除 <filename>hourly</filename> 時戳檔案，在每天的凌晨 2:14 移除 <filename>daily</filename> 時戳檔案，等等)。
  </para>
  <example xml:id="ex-suse-packages-cron-time">
   <title>/etc/crontab：移除時戳檔案</title>
<screen>59 *  * * *     root  rm -f /var/spool/cron/lastrun/cron.hourly
14 2  * * *     root  rm -f /var/spool/cron/lastrun/cron.daily
29 2  * * 6     root  rm -f /var/spool/cron/lastrun/cron.weekly
44 2  1 * *     root  rm -f /var/spool/cron/lastrun/cron.monthly</screen>
  </example>
  <para>
   或者，在 <filename>/etc/sysconfig/cron</filename> 中將 <literal>DAILY_TIME</literal> 設定為應啟動 <filename>cron.daily</filename> 的時間。<literal>MAX_NOT_RUN</literal> 的設定可確定日常任務能夠觸發並加以執行，即使使用者在長時間內均未於指定的 <literal>DAILY_TIME</literal> 開啟電腦。<literal>MAX_NOT_RUN</literal> 的最大值為 14 天。
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-packages-cronstatus">
  <title>停止 Cron 狀態訊息</title>
  <para>
   若要避免 Cron 狀態訊息導致的郵件氾濫，在新安裝的 <filename>/etc/sysconfig/cron</filename> 中，<literal>SEND_MAIL_ON_NO_ERROR</literal> 的預設值設為「<literal>no</literal>」。即使將此設定設為「<literal>no</literal>」，系統仍會將 cron 資料輸出傳送至 <literal>MAILTO</literal> 位址，如 cron 手冊頁所述。
  </para>
  <para>
   對於更新，建議根據需要設定這些值。
  </para>
 </sect2>

 <xi:include href="suse_logfiles.xml"/>

 <sect2 xml:id="sec-suse-locate">
  <title><command>locate</command> 指令</title>

  <para>
   可以快速尋找檔案的 <command>locate</command> 指令，未包含在軟體標準安裝的範圍內。如果需要，請安裝套件 <systemitem>mlocate</systemitem>，它是套件 <systemitem>findutils-locate</systemitem> 的後續套件。<systemitem class="daemon">updatedb</systemitem> 程序會在每晚自行啟動，或在啟動系統後的 15 分鐘左右啟動。
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-ulimit">
  <title><command>ulimit</command> 指令</title>
  <para>
   利用 <command>ulimit</command> (<emphasis>使用者限制</emphasis>) 指令，您可以設定系統資源的使用限制，並顯示這些限制。<command>ulimit</command> 對於限制應用程式可使用的記憶體特別有用。利用它，可以避免應用程式佔用過多的系統資源，降低作業系統效能，甚至讓系統當機。
  </para>
  <para>
   <command>ulimit</command> 可以搭配多種選項來使用。若要限制記憶體的使用，請利用<xref linkend="tab-suse-packages-ulimit"/> 中所列的選項。
  </para>
  <table xml:id="tab-suse-packages-ulimit">
   <title><command>ulimit</command>：為使用者設定資源</title>

   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para>
        <option>-m</option>
       </para>
      </entry>
      <entry>
       <para>
        最大的常駐集大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-v</option>
       </para>
      </entry>
      <entry>
       <para>
        外圍程序可用的虛擬記憶體最大容量
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-s</option>
       </para>
      </entry>
      <entry>
       <para>
        堆疊的最大大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-c</option>
       </para>
      </entry>
      <entry>
       <para>
        所建立的核心檔案的最大大小
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <option>-a</option>
       </para>
      </entry>
      <entry>
       <para>
        將會報告所有目前限制
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   系統範圍的預設項目在 <filename>/etc/profile</filename> 中設定。建議不要直接編輯此檔案，因為在系統升級期間將會覆寫變更。若要自訂系統範圍的設定檔設定，請使用 <filename>/etc/profile.local</filename>。各使用者的設定應該在 <filename>~<replaceable>USER</replaceable>/.profile</filename> 中進行。
  </para>
  <example xml:id="ex-u-ulimit-bashrc">
   <title><command>ulimit</command>：<filename>~/.bashrc</filename> 中的設定</title>
<screen># Limits maximum resident set size (physical memory):
ulimit -m 98304

# Limits of virtual memory:
ulimit -v 98304</screen>
  </example>
  <para>
   記憶體配置的單位必須為 KB。如需詳細資訊，請參閱<command>man bash</command>。
  </para>
  <important>
   <title><command>ulimit</command> 支援</title>
   <para>
    並非所有的外圍程序都支援 <command>ulimit</command> 指示詞。PAM (例如 <literal>pam_limits</literal>) 做為 <command>ulimit</command> 的替代方法，提供了全面的調整功能。
   </para>
  </important>
 </sect2>

 <sect2 xml:id="sec-suse-free">
  <title><command>free</command> 指令</title>
  <para>
   <command>free</command> 指令會顯示系統中的可用記憶體總容量、已用實體記憶體和交換空間，以及核心佔用的緩衝區和快取。<emphasis>可用的 RAM</emphasis> 的概念要回溯到聯合記憶體管理的年代之前。<emphasis>記憶體要物盡其用的</emphasis>口號非常適用於 Linux。所以，Linux 一直致力於平衡快取，不允許有剩餘或未使用的記憶體。
  </para>
  <para>
   基本上，核心不會直接瞭解有關任何應用程式或使用者資料的資訊。相反地，它會在<emphasis>頁面快取</emphasis>中管理應用程式與使用者資料。如果記憶體不足，它的某些部分會寫入交換分割區或檔案中，這樣，使用 <command>mmap</command> 指令便可一開始就從這些交換分割區或檔案中讀取這些部分 (請參閱 <command>man mmap</command>)。
  </para>
  <para>
   核心也可以有其他的快取，例如 <emphasis>slab 快取</emphasis>，網路存取的快取資料會儲存於此處。這也許能夠解釋 <filename>/proc/meminfo</filename> 中計數器之間的差異。透過 <filename>/proc/slabinfo</filename> 可以存取大多數 (但並非全部) 快取。
  </para>
  <para>
   但如果您的目的是要確定目前所用的 RAM 量，請在 <filename>/proc/meminfo</filename> 中尋找此資訊。
  </para>
 </sect2>

 <sect2 xml:id="sec-suse-manpages">
  <title>手冊頁和資訊頁</title>
  <para>
   某些 GNU 應用程式 (例如 tar) 不再支援手冊頁。針對這些指令，請使用 <option>--help</option> 選項來取得資訊頁的快速綜覽，這些頁面將提供更深入詳盡的說明。Info 是 GNU 的超文字系統。輸入 <command>info</command> <option>info</option> 可以查看此系統的介紹。您可以輸入 <command>emacs</command> <option>-f info</option> 使用 Emacs 檢視資訊頁，也可以直接在主控台中使用 <command>info</command> 來檢視。您也可以使用 tkinfo、xinfo 或說明系統來檢視資訊頁面。
  </para>
 </sect2>



 <sect2 xml:id="sec-suse-packages-man">
  <title>使用 <command>man</command> 指令選取手冊頁</title>
  <para>
   若要閱讀手冊頁，請輸入 <command>man</command>
   <replaceable>MAN_PAGE</replaceable>。如果不同區段中存在同名的手冊頁，所有的這些 手冊頁都會列出，並會顯示對應的區段號碼。請選取要顯示的那個頁面。如果您未在幾秒內輸入區段號碼，將會顯示第一個手冊頁。
  </para>
  <para>
   若要將此行為變更為預設系統行為，請在外圍程序啟始化檔案 (如 <filename>~/.bashrc</filename>) 中設定 <literal>MAN_POSIXLY_CORRECT=1</literal>。
  </para>
 </sect2>

 <xi:include href="suse_emacs.xml"/>
</sect1>
